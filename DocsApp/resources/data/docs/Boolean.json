{
  "$type": "doxi",
  "files": [
    "../../../../docs/docs/js/primitives/Boolean.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Boolean",
        "text": "\nThe <a href='#!/api/Boolean'>Boolean</a> object is an object wrapper for a boolean value.\n\nThe value passed as the first parameter is converted to a boolean value, if necessary. If value is\nomitted or is 0, -0, null, false, `NaN`, undefined, or the empty string (\"\"), the object has an\ninitial value of false. All other values, including any object or the string `\"false\"`, create an\nobject with an initial value of true.\n\nDo not confuse the primitive Boolean values true and false with the true and false values of the\nBoolean object.\n\nAny object whose value is not <a href='#!/api/undefined'>undefined</a> or <a href='#!/api/null'>null</a>, including a Boolean object whose value is false,\nevaluates to true when passed to a conditional statement. For example, the condition in the following\nif statement evaluates to true:\n\n    x = new Boolean(false);\n    if (x) {\n        // . . . this code is executed\n    }\n\nThis behavior does not apply to Boolean primitives. For example, the condition in the following if\nstatement evaluates to `false`:\n    x = false;\n    if (x) {\n        // . . . this code is not executed\n    }\n\nDo not use a <a href='#!/api/Boolean'>Boolean</a> object to convert a non-boolean value to a boolean value. Instead, use Boolean\nas a function to perform this task:\n\n    x = Boolean(expression);     // preferred\n    x = new Boolean(expression); // don't use\n\nIf you specify any object, including a Boolean object whose value is false, as the initial value of a\nBoolean object, the new Boolean object has a value of true.\n\n    myFalse = new Boolean(false);   // initial value of false\n    g = new Boolean(myFalse);       // initial value of true\n    myString = new String(\"Hello\"); // string object\n    s = new Boolean(myString);      // initial value of true\n\nDo not use a Boolean object in place of a Boolean primitive.\n\n# Creating Boolean objects with an initial value of false\n\n    bNoParam = new Boolean();\n    bZero = new Boolean(0);\n    bNull = new Boolean(null);\n    bEmptyString = new Boolean(\"\");\n    bfalse = new Boolean(false);\n\n# Creating Boolean objects with an initial value of true\n\n    btrue = new Boolean(true);\n    btrueString = new Boolean(\"true\");\n    bfalseString = new Boolean(\"false\");\n    bSuLin = new Boolean(\"Su Lin\");\n\n<div class=\"notice\">\nDocumentation for this class comes from <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">MDN</a>\nand is available under <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">Creative Commons: Attribution-Sharealike license</a>.\n</div>\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates a new boolean object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Either a truthy or falsy value to create the corresponding Boolean object.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,70,20",
                      "text": "0,70,26,75",
                      "type": "0,70,12"
                    }
                  }
                ],
                "src": {
                  "name": "0,68,12",
                  "text": "0,69,4,30"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string of either \"true\" or \"false\" depending upon the value of the object.\nOverrides the `Object.prototype.toString` method.\n\nThe Boolean object overrides the <a href='#!/api/Boolean-method-toString'>toString</a> method of the <a href='#!/api/Object'>Object</a> object; it does not inherit\n`Object.toString`. For Boolean objects, the <a href='#!/api/Boolean-method-toString'>toString</a> method returns a string representation of\nthe object.\n\nJavaScript calls the <a href='#!/api/Boolean-method-toString'>toString</a> method automatically when a Boolean is to be represented as a text\nvalue or when a Boolean is referred to in a string concatenation.\n\nFor Boolean objects and values, the built-in <a href='#!/api/Boolean-method-toString'>toString</a> method returns the string `\"true\"` or\n`\"false\"` depending on the value of the boolean object. In the following code, `flag.toString`\nreturns `\"true\"`.\n\n    var flag = new Boolean(true)\n    var myVar = flag.toString()\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The boolean value represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "0,94,21,43",
                      "type": "0,94,13"
                    }
                  }
                ],
                "src": {
                  "name": "0,76,12",
                  "text": "0,77,4,781"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the <a href='#!/api/Boolean'>Boolean</a> object. Overrides the `Object.prototype.valueOf` method.\n\nThe <a href='#!/api/Boolean-method-valueOf'>valueOf</a> method of Boolean returns the primitive value of a Boolean object or literal Boolean\nas a Boolean data type.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n    x = new Boolean();\n    myVar = x.valueOf()      //assigns false to myVar\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The primitive value.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,109,22,21",
                      "type": "0,109,13"
                    }
                  }
                ],
                "src": {
                  "name": "0,98,12",
                  "text": "0,99,4,389"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,2,11",
          "text": "0,3,4,2460"
        }
      }
    ]
  },
  "version": 1
}