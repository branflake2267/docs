{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/lang/Array.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.Array",
        "singleton": true,
        "text": "\nA set of useful static methods to deal with arrays; provide missing methods for\nolder browsers.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "inheritdoc": "Ext.Array#merge",
                "src": {
                  "inheritdoc": "0,1481,8"
                }
              },
              {
                "$type": "method",
                "name": "binarySearch",
                "text": "This method returns the index that a given item would be inserted into the\ngiven (sorted) `array`. Note that the given `item` may or may not be in the\narray. This method will return the index of where the item *should* be.\n\nFor example:\n\n     var array = [ 'A', 'D', 'G', 'K', 'O', 'R', 'X' ];\n     var index = Ext.Array.binarySearch(array, 'E');\n\n     console.log('index: ' + index);\n     // logs \"index: 2\"\n\n     array.splice(index, 0, 'E');\n\n     console.log('array : ' + array.join(''));\n     // logs \"array: ADEGKORX\"\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array to search.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "0,233,30",
                      "text": "0,233,36,21",
                      "type": "0,233,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item that you want to insert into the `array`.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,234,28",
                      "text": "0,234,33,51",
                      "type": "0,234,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The first index in the `array` to consider.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,235,29",
                      "text": "0,235,38,44",
                      "type": "0,235,20",
                      "value": "0,235,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index that marks the end of the range\nto consider. The item at this index is *not* considered.\n",
                    "type": "Number",
                    "value": "array.length",
                    "src": {
                      "name": "0,236,29",
                      "text": "0,236,47,42:0,237,12,57",
                      "type": "0,236,20",
                      "value": "0,236,33"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "compareFn",
                    "optional": true,
                    "text": "The comparison function that matches the sort\norder of the `array`. The default `compareFn` compares items using less-than\nand greater-than operators.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,238,31",
                      "text": "0,238,42,46:0,239,12,105",
                      "type": "0,238,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index for the given item in the given array based on\nthe current sorters.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,241,29,57:0,242,12,21",
                      "type": "0,241,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,244,0",
                  "text": "0,216,12,524"
                }
              },
              {
                "$type": "method",
                "name": "clean",
                "text": "Filter through an array and remove empty item as defined in {@link Ext#method!isEmpty Ext#isEmpty}.\n\nSee {@link Ext.Array#method!filter Ext.Array#filter}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "type": "Array",
                    "src": {
                      "name": "0,653,27",
                      "type": "0,653,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "results\n",
                    "type": "Array",
                    "src": {
                      "text": "0,654,28,8",
                      "type": "0,654,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,656,0",
                  "text": "0,649,12,124"
                }
              },
              {
                "$type": "method",
                "name": "clone",
                "text": "Clone a flat array without referencing the previous one. Note that this is different\nfrom `Ext.clone` since it doesn't handle recursive cloning. It's simply a convenient, easy-to-remember method\nfor `Array.prototype.slice.call(array)`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,842,27",
                      "text": "0,842,33,11",
                      "type": "0,842,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The clone array.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,843,28,17",
                      "type": "0,843,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,845,0",
                  "text": "0,838,12,237"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "text": "Checks whether or not the given `array` contains the specified `item`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array to check.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,415,27",
                      "text": "0,415,33,20",
                      "type": "0,415,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to find.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,416,28",
                      "text": "0,416,33,18",
                      "type": "0,416,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the array contains the item, `false` otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,417,30,58",
                      "type": "0,417,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,419,0",
                  "text": "0,413,12,72"
                }
              },
              {
                "$type": "method",
                "name": "difference",
                "text": "Perform a set difference A-B by subtracting all items in array B from array A.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "arrayA",
                    "type": "Array",
                    "src": {
                      "name": "0,943,27",
                      "type": "0,943,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "arrayB",
                    "type": "Array",
                    "src": {
                      "name": "0,944,27",
                      "type": "0,944,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "difference\n",
                    "type": "Array",
                    "src": {
                      "text": "0,945,28,11",
                      "type": "0,945,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,947,0",
                  "text": "0,941,12,80"
                }
              },
              {
                "$type": "method",
                "name": "each",
                "text": "Iterates an array or an iterable value and invoke the given callback function for each item.\n\n    var countries = ['Vietnam', 'Singapore', 'United States', 'Russia'];\n\n    Ext.Array.each(countries, function(name, index, countriesItSelf) {\n        console.log(name);\n    });\n\n    var sum = function() {\n        var sum = 0;\n\n        Ext.Array.each(arguments, function(value) {\n            sum += value;\n        });\n\n        return sum;\n    };\n\n    sum(1, 2, 3); // returns 6\n\nThe iteration can be stopped by returning `false` from the callback function.\nReturning `{@link undefined}` (i.e `return;`) will only exit the callback function and\nproceed with the next iteration of the loop.\n\n    Ext.Array.each(countries, function(name, index, countriesItSelf) {\n        if (name === 'Singapore') {\n            return false; // break here\n        }\n    });\n\n{@link Ext#each Ext.each} is alias for {@link Ext.Array#method!each Ext.Array#each}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iterable",
                    "text": "The value to be iterated. If this\nargument is not iterable, the callback function is called once.\n",
                    "type": "Array/NodeList/Object",
                    "src": {
                      "name": "0,326,43",
                      "text": "0,326,52,34:0,327,12,64",
                      "type": "0,326,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The callback function. If it returns `false`, the iteration\nstops and this method returns the current `index`. Returning `{@link undefined}` (i.e\n`return;`) will only exit the callback function and proceed with the next iteration\nin the loop.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The item at the current `index` in the passed `array`\n",
                        "type": "Object",
                        "src": {
                          "name": "0,332,31",
                          "text": "0,332,36,54",
                          "type": "0,332,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "The current `index` within the `array`\n",
                        "type": "Number",
                        "src": {
                          "name": "0,333,31",
                          "text": "0,333,37,39",
                          "type": "0,333,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "allItems",
                        "text": "The `array` itself which was passed as the first argument\n",
                        "type": "Array",
                        "src": {
                          "name": "0,334,30",
                          "text": "0,334,39,58",
                          "type": "0,334,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "return",
                        "text": "Return `false` to stop iteration.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,335,32",
                          "text": "0,335,39,34",
                          "type": "0,335,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,328,30",
                      "text": "0,328,33,60:0,329,12,175",
                      "type": "0,328,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the specified function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,336,29",
                      "text": "0,336,36,74",
                      "type": "0,336,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "reverse",
                    "optional": true,
                    "text": "Reverse the iteration order (loop from the end to the beginning).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,337,30",
                      "text": "0,337,45,66",
                      "type": "0,337,20",
                      "value": "0,337,38"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "See description for the `fn` parameter.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,338,30,40",
                      "type": "0,338,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,340,0",
                  "text": "0,294,12,922"
                }
              },
              {
                "$type": "method",
                "name": "equals",
                "text": "Shallow compares the contents of 2 arrays using strict equality.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array1",
                    "type": "Array",
                    "src": {
                      "name": "0,621,27",
                      "type": "0,621,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "array2",
                    "type": "Array",
                    "src": {
                      "name": "0,622,27",
                      "type": "0,622,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the arrays are equal.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,623,30,32",
                      "type": "0,623,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,625,0",
                  "text": "0,620,12,65"
                }
              },
              {
                "$type": "method",
                "name": "erase",
                "text": "Removes items from an array. This is functionally equivalent to the splice method\nof Array, but works around bugs in IE8's splice method and does not copy the\nremoved elements in order to return them (because very often they are ignored).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array on which to replace.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1363,27",
                      "text": "0,1363,33,31",
                      "type": "0,1363,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index in the array at which to operate.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1364,28",
                      "text": "0,1364,34,44",
                      "type": "0,1364,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "removeCount",
                    "text": "The number of items to remove at index.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1365,28",
                      "text": "0,1365,40,40",
                      "type": "0,1365,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The array passed.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,1366,28,18",
                      "type": "0,1366,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1369,0",
                  "text": "0,1359,12,240"
                }
              },
              {
                "$type": "method",
                "name": "every",
                "text": "Executes the specified function for each array element until the function returns a falsy value.\nIf such an item is found, the function will return `false` immediately.\nOtherwise, it will return `true`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "type": "Array",
                    "src": {
                      "name": "0,548,27",
                      "type": "0,548,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "Callback function for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "Current item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,550,30",
                          "text": "0,550,35,14",
                          "type": "0,550,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "Index of the item.\n",
                        "type": "Number",
                        "src": {
                          "name": "0,551,31",
                          "text": "0,551,37,19",
                          "type": "0,551,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "array",
                        "text": "The whole array that's being iterated.\n",
                        "type": "Array",
                        "src": {
                          "name": "0,552,30",
                          "text": "0,552,36,39",
                          "type": "0,552,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,549,30",
                      "text": "0,549,33,33",
                      "type": "0,549,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "Callback function scope.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,553,28",
                      "text": "0,553,34,25",
                      "type": "0,553,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`treu` if no false value is returned by the callback function.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,554,30,63",
                      "type": "0,554,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,556,0",
                  "text": "0,544,12,204"
                }
              },
              {
                "$type": "method",
                "name": "filter",
                "text": "Creates a new array with all of the elements of this array for which\nthe provided filtering function returns a truthy value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "type": "Array",
                    "src": {
                      "name": "0,701,27",
                      "type": "0,701,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "Callback function for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "Current item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,703,30",
                          "text": "0,703,35,14",
                          "type": "0,703,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "Index of the item.\n",
                        "type": "Number",
                        "src": {
                          "name": "0,704,31",
                          "text": "0,704,37,19",
                          "type": "0,704,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "array",
                        "text": "The whole array that's being iterated.\n",
                        "type": "Array",
                        "src": {
                          "name": "0,705,30",
                          "text": "0,705,36,39",
                          "type": "0,705,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,702,30",
                      "text": "0,702,33,33",
                      "type": "0,702,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "Callback function scope.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,706,28",
                      "text": "0,706,34,25",
                      "type": "0,706,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "results\n",
                    "type": "Array",
                    "src": {
                      "text": "0,707,28,8",
                      "type": "0,707,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,709,0",
                  "text": "0,698,12,126"
                }
              },
              {
                "$type": "method",
                "name": "findBy",
                "text": "Returns the first item in the array which elicits a truthy return value from the\npassed selection function.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array to search\n",
                    "type": "Array",
                    "src": {
                      "name": "0,738,27",
                      "text": "0,738,33,20",
                      "type": "0,738,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The selection function to execute for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The array item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,740,30",
                          "text": "0,740,35,16",
                          "type": "0,740,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "The index of the array item.\n",
                        "type": "String",
                        "src": {
                          "name": "0,741,31",
                          "text": "0,741,37,29",
                          "type": "0,741,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,739,30",
                      "text": "0,739,33,49",
                      "type": "0,739,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope (<code>this</code> reference) in which the\nfunction is executed. Defaults to the array\n",
                    "type": "Object",
                    "src": {
                      "name": "0,742,28",
                      "text": "0,742,34,64:0,743,12,44",
                      "type": "0,742,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first item in the array which returned true from the selection\nfunction, or null if none was found.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,744,29,67:0,745,12,37",
                      "type": "0,744,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,747,0",
                  "text": "0,736,12,108"
                }
              },
              {
                "$type": "method",
                "name": "flatten",
                "text": "Recursively flattens into 1-d Array. Injects Arrays inline.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array to flatten\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1095,27",
                      "text": "0,1095,33,21",
                      "type": "0,1095,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The 1-d array.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,1096,28,15",
                      "type": "0,1096,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1098,0",
                  "text": "0,1093,12,61"
                }
              },
              {
                "$type": "method",
                "name": "forEach",
                "text": "Iterates an array and invoke the given callback function for each item. Note that this will simply\ndelegate to the native `Array.prototype.forEach` method if supported. It doesn't support stopping the\niteration by returning `false` in the callback function like {@link Ext.Array#method!each Ext.Array#each}. However, performance\ncould be much better in modern browsers comparing with {@link Ext.Array#method!each Ext.Array#each}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array to iterate.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,371,27",
                      "text": "0,371,33,22",
                      "type": "0,371,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The callback function.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The item at the current `index` in the passed `array`.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,373,31",
                          "text": "0,373,36,55",
                          "type": "0,373,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "The current `index` within the `array`.\n",
                        "type": "Number",
                        "src": {
                          "name": "0,374,31",
                          "text": "0,374,37,40",
                          "type": "0,374,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "allItems",
                        "text": "The `array` itself which was passed as the first argument.\n",
                        "type": "Array",
                        "src": {
                          "name": "0,375,31",
                          "text": "0,375,40,59",
                          "type": "0,375,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,372,30",
                      "text": "0,372,33,23",
                      "type": "0,372,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(Optional) The execution scope (`this`) in which the\nspecified function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,376,28",
                      "text": "0,376,34,53:0,377,12,32",
                      "type": "0,376,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,379,0",
                  "text": "0,366,12,386"
                }
              },
              {
                "$type": "method",
                "name": "from",
                "text": "Converts a value to an array if it's not already an array; returns:\n\n- An empty array if given value is `{@link undefined}` or `{@link null}`\n- Itself if given value is already an array\n- An array copy if given value is {@link Ext#method!isIterable Ext#isIterable} (arguments, NodeList and alike)\n- An array with one item which is the given value, otherwise\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to convert to an array if it's not already is an array.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,767,28",
                      "text": "0,767,34,66",
                      "type": "0,767,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newReference",
                    "optional": true,
                    "text": "`true` to clone the given array and return a new reference if necessary.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,768,30",
                      "text": "0,768,44,73",
                      "type": "0,768,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "array\n",
                    "type": "Array",
                    "src": {
                      "text": "0,769,28,6",
                      "type": "0,769,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,771,0",
                  "text": "0,760,12,330"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "include",
                "text": "Push an item into the array only if the array doesn't contain it yet.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,828,27",
                      "text": "0,828,33,11",
                      "type": "0,828,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to include.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,829,28",
                      "text": "0,829,33,21",
                      "type": "0,829,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,831,0",
                  "text": "0,826,12,71"
                }
              },
              {
                "$type": "method",
                "name": "indexOf",
                "text": "Get the index of the provided `item` in the given `array`, a supplement for the\nmissing arrayPrototype.indexOf in Internet Explorer.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array to check.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,392,27",
                      "text": "0,392,33,20",
                      "type": "0,392,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to find.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,393,28",
                      "text": "0,393,33,18",
                      "type": "0,393,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "from",
                    "text": "(Optional) The index at which to begin the search.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,394,28",
                      "text": "0,394,33,51",
                      "type": "0,394,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of item in the array (or -1 if it is not found).\n",
                    "type": "Number",
                    "src": {
                      "text": "0,395,29,59",
                      "type": "0,395,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,397,0",
                  "text": "0,389,12,134"
                }
              },
              {
                "$type": "method",
                "name": "insert",
                "text": "Inserts items in to an array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array in which to insert.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1374,27",
                      "text": "0,1374,33,30",
                      "type": "0,1374,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index in the array at which to operate.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1375,28",
                      "text": "0,1375,34,44",
                      "type": "0,1375,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "items",
                    "text": "The array of items to insert at index.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1376,27",
                      "text": "0,1376,33,39",
                      "type": "0,1376,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The array passed.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,1377,28,18",
                      "type": "0,1377,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1379,0",
                  "text": "0,1372,12,31"
                }
              },
              {
                "$type": "method",
                "name": "intersect",
                "text": "Merge multiple arrays into one with unique items that exist in all of the arrays.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array1",
                    "type": "Array",
                    "src": {
                      "name": "0,874,27",
                      "type": "0,874,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "array2",
                    "type": "Array",
                    "src": {
                      "name": "0,875,27",
                      "type": "0,875,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "etc",
                    "type": "Array",
                    "src": {
                      "name": "0,876,27",
                      "type": "0,876,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "intersect\n",
                    "type": "Array",
                    "src": {
                      "text": "0,877,28,10",
                      "type": "0,877,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,879,0",
                  "text": "0,872,12,83"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "map",
                "text": "Creates a new array with the results of calling a provided function on every element in this array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "type": "Array",
                    "src": {
                      "name": "0,510,27",
                      "type": "0,510,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "Callback function for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "Current item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,512,30",
                          "text": "0,512,35,14",
                          "type": "0,512,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "Index of the item.\n",
                        "type": "Number",
                        "src": {
                          "name": "0,513,31",
                          "text": "0,513,37,19",
                          "type": "0,513,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "array",
                        "text": "The whole array that's being iterated.\n",
                        "type": "Array",
                        "src": {
                          "name": "0,514,30",
                          "text": "0,514,36,39",
                          "type": "0,514,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,511,30",
                      "text": "0,511,33,33",
                      "type": "0,511,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "Callback function scope\n",
                    "type": "Object",
                    "src": {
                      "name": "0,515,29",
                      "text": "0,515,36,24",
                      "type": "0,515,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "results\n",
                    "type": "Array",
                    "src": {
                      "text": "0,516,28,8",
                      "type": "0,516,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,518,0",
                  "text": "0,508,12,101"
                }
              },
              {
                "$type": "method",
                "name": "max",
                "text": "Returns the maximum value in the Array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array from which to select the maximum value.\n",
                    "type": "Array/NodeList",
                    "src": {
                      "name": "0,1156,36",
                      "text": "0,1156,42,50",
                      "type": "0,1156,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "comparisonFn",
                    "text": "(optional) a function to perform the comparison which determines maximization.\nIf omitted the \">\" operator will be used.\n__Note:__ gt = 1; eq = 0; lt = -1\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "max",
                        "text": "Current maximum value.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,1160,40",
                          "text": "0,1160,44,23",
                          "type": "0,1160,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The value to compare with the current maximum.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,1161,40",
                          "text": "0,1161,45,47",
                          "type": "0,1161,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,1157,30",
                      "text": "0,1157,43,79:0,1158,12,76",
                      "type": "0,1157,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "maxValue The maximum value.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1162,29,28",
                      "type": "0,1162,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1164,0",
                  "text": "0,1154,12,41"
                }
              },
              {
                "$type": "method",
                "name": "mean",
                "text": "Calculates the mean of all items in the array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array to calculate the mean value of.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1189,27",
                      "text": "0,1189,33,42",
                      "type": "0,1189,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The mean.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,1190,29,10",
                      "type": "0,1190,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1192,0",
                  "text": "0,1187,12,48"
                }
              },
              {
                "$type": "method",
                "name": "merge",
                "text": "Merge multiple arrays into one with unique items.\n\n{@link Ext.Array#union} is alias for {@link Ext.Array#method!merge Ext.Array#merge}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array1",
                    "type": "Array",
                    "src": {
                      "name": "0,854,27",
                      "type": "0,854,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "array2",
                    "type": "Array",
                    "src": {
                      "name": "0,855,27",
                      "type": "0,855,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "etc",
                    "type": "Array",
                    "src": {
                      "name": "0,856,27",
                      "type": "0,856,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "merged\n",
                    "type": "Array",
                    "src": {
                      "text": "0,857,28,7",
                      "type": "0,857,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,859,0",
                  "text": "0,850,12,113"
                }
              },
              {
                "$type": "method",
                "name": "min",
                "text": "Returns the minimum value in the Array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array from which to select the minimum value.\n",
                    "type": "Array/NodeList",
                    "src": {
                      "name": "0,1123,36",
                      "text": "0,1123,42,50",
                      "type": "0,1123,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "comparisonFn",
                    "text": "(optional) a function to perform the comparison which determines minimization.\nIf omitted the \"<\" operator will be used.\n__Note:__ gt = 1; eq = 0; lt = -1\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "min",
                        "text": "Current minimum value.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,1127,40",
                          "text": "0,1127,44,23",
                          "type": "0,1127,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The value to compare with the current minimum.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,1128,40",
                          "text": "0,1128,45,47",
                          "type": "0,1128,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,1124,30",
                      "text": "0,1124,43,79:0,1125,12,76",
                      "type": "0,1124,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "minValue The minimum value.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1129,29,28",
                      "type": "0,1129,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1131,0",
                  "text": "0,1121,12,41"
                }
              },
              {
                "$type": "method",
                "name": "numericSortFn",
                "text": "A function used to sort an array by numeric value. By default, javascript array values\nare coerced to strings when sorting, which can be problematic when using numeric values. To\nensure that the values are sorted numerically, this method can be passed to the sort method:\n\n    Ext.Array.sort(myArray, Ext.Array.numericSortFn);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "a",
                    "src": {
                      "name": "0,1466,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "b",
                    "src": {
                      "name": "0,1466,0"
                    }
                  }
                ],
                "src": {
                  "name": "0,1466,0",
                  "text": "0,1460,12,327"
                }
              },
              {
                "$type": "method",
                "name": "pluck",
                "text": "Plucks the value of a property from each item in the Array. Example:\n\n    Ext.Array.pluck(Ext.query(\"p\"), \"className\"); // [el1.className, el2.className, ..., elN.className]\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array of items to pluck the value from.\n",
                    "type": "Array/NodeList",
                    "src": {
                      "name": "0,489,36",
                      "text": "0,489,42,44",
                      "type": "0,489,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "propertyName",
                    "text": "The property name to pluck from each element.\n",
                    "type": "String",
                    "src": {
                      "name": "0,490,28",
                      "text": "0,490,41,46",
                      "type": "0,490,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value from each item in the Array.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,491,28,39",
                      "type": "0,491,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,493,0",
                  "text": "0,485,12,175"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "push",
                "text": "Pushes new items onto the end of an Array.\n\nPassed parameters may be single items, or arrays of items. If an Array is found in the argument list, all its\nelements are pushed into the end of the target Array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The Array onto which to push new items\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1435,27",
                      "text": "0,1435,34,39",
                      "type": "0,1435,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "elements",
                    "text": "The elements to add to the array. Each parameter may\nbe an Array, in which case all the elements of that Array will be pushed into the end of the\ndestination Array.\n",
                    "type": "Object...",
                    "src": {
                      "name": "0,1436,31",
                      "text": "0,1436,40,53:0,1437,12,112",
                      "type": "0,1436,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array containing all the new items push onto the end.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,1439,28,57",
                      "type": "0,1439,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1442,0",
                  "text": "0,1430,12,209"
                }
              },
              {
                "$type": "method",
                "name": "reduce",
                "since": "6.0.0",
                "text": "This method applies the `reduceFn` function against an accumulator and each\nvalue of the `array` (from left-to-right) to reduce it to a single value.\n\nIf no `initialValue` is specified, the first element of the array is used as\nthe initial value. For example:\n\n     function reducer (previous, value, index) {\n         console.log('[' + index + ']: (' + previous + ',' + value + '}');\n         return previous * 10 + value;\n     }\n\n     v = Ext.Array.reduce([2, 3, 4], reducer);\n     console.log('v = ' + v);\n\n     > [1]: (2, 3)\n     > [2]: (23, 4)\n     > v = 234\n\n     v = Ext.Array.reduce([2, 3, 4], reducer, 1);\n     console.log('v = ' + v);\n\n     > [0]: (1, 2)\n     > [1]: (12, 3)\n     > [2]: (123, 4)\n     > v = 1234\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array to process.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,992,27",
                      "text": "0,992,33,22",
                      "type": "0,992,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "reduceFn",
                    "text": "The reducing callback function.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "previous",
                        "text": "The previous value.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,994,36",
                          "text": "0,994,45,20",
                          "type": "0,994,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "value",
                        "text": "The current value.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,995,36",
                          "text": "0,995,42,19",
                          "type": "0,995,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "The index in the array of the current `value`.\n",
                        "type": "Number",
                        "src": {
                          "name": "0,996,37",
                          "text": "0,996,43,47",
                          "type": "0,996,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "array",
                        "text": "The array to being processed.\n",
                        "type": "Array",
                        "src": {
                          "name": "0,997,36",
                          "text": "0,997,42,30",
                          "type": "0,997,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,993,30",
                      "text": "0,993,39,32",
                      "type": "0,993,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "initialValue",
                    "optional": true,
                    "text": "The starting value.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,998,28",
                      "text": "0,998,42,20",
                      "type": "0,998,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The reduced value.\n",
                    "type": "Mixed",
                    "src": {
                      "text": "0,999,28,19",
                      "type": "0,999,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1000,20",
                  "since": "0,1001,19",
                  "text": "0,966,12,723"
                }
              },
              {
                "$type": "method",
                "name": "remove",
                "text": "Removes the specified item from the array if it exists.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,793,27",
                      "text": "0,793,33,11",
                      "type": "0,793,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to remove.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,794,28",
                      "text": "0,794,33,20",
                      "type": "0,794,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The passed array.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,795,28,18",
                      "type": "0,795,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,797,0",
                  "text": "0,791,12,57"
                }
              },
              {
                "$type": "method",
                "name": "removeAt",
                "text": "Removes item/s at the specified index.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,810,27",
                      "text": "0,810,33,11",
                      "type": "0,810,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the item to be removed.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,811,28",
                      "text": "0,811,34,37",
                      "type": "0,811,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "count",
                    "optional": true,
                    "text": "The number of items to be removed.\n",
                    "type": "Number",
                    "value": "1",
                    "src": {
                      "name": "0,812,29",
                      "text": "0,812,38,35",
                      "type": "0,812,20",
                      "value": "0,812,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The passed array.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,813,28,18",
                      "type": "0,813,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,815,0",
                  "text": "0,808,12,40"
                }
              },
              {
                "$type": "method",
                "name": "replace",
                "text": "Replaces items in an array. This is functionally equivalent to the splice method\nof Array, but works around bugs in IE8's splice method and is often more convenient\nto call because it accepts an array of items to insert rather than use a variadic\nargument list.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array on which to replace.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1404,27",
                      "text": "0,1404,33,31",
                      "type": "0,1404,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index in the array at which to operate.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1405,28",
                      "text": "0,1405,34,44",
                      "type": "0,1405,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "removeCount",
                    "text": "The number of items to remove at index (can be 0).\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1406,28",
                      "text": "0,1406,40,51",
                      "type": "0,1406,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "insert",
                    "text": "(optional) An array of items to insert at index.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1407,27",
                      "text": "0,1407,34,49",
                      "type": "0,1407,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The array passed.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,1408,28,18",
                      "type": "0,1408,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1411,0",
                  "text": "0,1399,12,263"
                }
              },
              {
                "$type": "method",
                "name": "slice",
                "text": "Returns a shallow copy of a part of an array. This is equivalent to the native\ncall `Array.prototype.slice.call(array, begin, end)`. This is often used when \"array\"\nis \"arguments\" since the arguments object does not supply a slice method but can\nbe the context object to `Array.prototype.slice`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array (or arguments object).\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1049,27",
                      "text": "0,1049,33,33",
                      "type": "0,1049,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "text": "The index at which to begin. Negative values are offsets from\nthe end of the array.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1050,28",
                      "text": "0,1050,34,62:0,1051,12,22",
                      "type": "0,1050,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "text": "The index at which to end. The copied items do not include\nend. Negative values are offsets from the end of the array. If end is omitted,\nall items up to the end of the array are copied.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1052,28",
                      "text": "0,1052,32,59:0,1053,12,128",
                      "type": "0,1052,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The copied piece of the array.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,1055,28,31",
                      "type": "0,1055,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1056,20",
                  "text": "0,1044,12,297"
                }
              },
              {
                "$type": "method",
                "name": "some",
                "text": "Executes the specified function for each array element until the function returns a truthy value.\nIf such an item is found, the function will return `true` immediately. Otherwise, it will return `false`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "type": "Array",
                    "src": {
                      "name": "0,586,27",
                      "type": "0,586,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "Callback function for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "Current item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,588,30",
                          "text": "0,588,35,14",
                          "type": "0,588,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "Index of the item.\n",
                        "type": "Number",
                        "src": {
                          "name": "0,589,31",
                          "text": "0,589,37,19",
                          "type": "0,589,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "array",
                        "text": "The whole array that's being iterated.\n",
                        "type": "Array",
                        "src": {
                          "name": "0,590,30",
                          "text": "0,590,36,39",
                          "type": "0,590,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,587,30",
                      "text": "0,587,33,33",
                      "type": "0,587,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "Callback function scope.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,591,28",
                      "text": "0,591,34,25",
                      "type": "0,591,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the callback function returns a truthy value.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,592,30,56",
                      "type": "0,592,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,594,0",
                  "text": "0,583,12,205"
                }
              },
              {
                "$type": "method",
                "name": "sort",
                "text": "Sorts the elements of an Array in a stable manner (equivalently keyed values do not move relative to each other).\nBy default, this method sorts the elements alphabetically and ascending.\n**Note:** This method modifies the passed array, in the same manner as the\nnative javascript Array.sort.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The array to sort.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1081,27",
                      "text": "0,1081,33,19",
                      "type": "0,1081,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sortFn",
                    "optional": true,
                    "text": "The comparison function.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "a",
                        "text": "The first item to compare.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,1083,34",
                          "text": "0,1083,36,27",
                          "type": "0,1083,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "b",
                        "text": "The second item to compare.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "0,1084,34",
                          "text": "0,1084,36,28",
                          "type": "0,1084,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "return",
                        "text": "`-1` if a < b, `1` if a > b, otherwise `0`.\n",
                        "type": "Number",
                        "src": {
                          "name": "0,1085,35",
                          "text": "0,1085,42,44",
                          "type": "0,1085,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,1082,31",
                      "text": "0,1082,39,25",
                      "type": "0,1082,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The sorted array.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,1086,28,18",
                      "type": "0,1086,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1088,0",
                  "text": "0,1076,12,293"
                }
              },
              {
                "$type": "method",
                "name": "splice",
                "text": "Replaces items in an array. This is equivalent to the splice method of Array, but\nworks around bugs in IE8's splice method. The signature is exactly the same as the\nsplice method except that the array is the first argument. All arguments following\nremoveCount are inserted in the array at index.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array on which to replace.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1419,27",
                      "text": "0,1419,33,31",
                      "type": "0,1419,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index in the array at which to operate.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1420,28",
                      "text": "0,1420,34,44",
                      "type": "0,1420,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "removeCount",
                    "text": "The number of items to remove at index (can be 0).\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1421,28",
                      "text": "0,1421,40,51",
                      "type": "0,1421,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "elements",
                    "text": "The elements to add to the array. If you don't specify\nany elements, splice simply removes elements from the array.\n",
                    "type": "Object...",
                    "src": {
                      "name": "0,1422,31",
                      "text": "0,1422,40,55:0,1423,12,61",
                      "type": "0,1422,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array containing the removed items.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,1424,28,39",
                      "type": "0,1424,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1427,0",
                  "text": "0,1414,12,297"
                }
              },
              {
                "$type": "method",
                "name": "sum",
                "text": "Calculates the sum of all items in the given array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array to calculate the sum value of.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1199,27",
                      "text": "0,1199,33,41",
                      "type": "0,1199,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The sum.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,1200,29,9",
                      "type": "0,1200,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1202,0",
                  "text": "0,1197,12,53"
                }
              },
              {
                "$type": "method",
                "name": "toArray",
                "text": "Converts any iterable (numeric indices and a length property) into a true array.\n\n    function test() {\n        var args = Ext.Array.toArray(arguments),\n            fromSecondToLastArgs = Ext.Array.toArray(arguments, 1);\n\n        alert(args.join(' '));\n        alert(fromSecondToLastArgs.join(' '));\n    }\n\n    test('just', 'testing', 'here'); // alerts 'just testing here';\n                                     // alerts 'testing here';\n\n    Ext.Array.toArray(document.getElementsByTagName('div')); // will convert the NodeList into an array\n    Ext.Array.toArray('splitted'); // returns ['s', 'p', 'l', 'i', 't', 't', 'e', 'd']\n    Ext.Array.toArray('splitted', 0, 3); // returns ['s', 'p', 'l']\n\n{@link Ext#toArray Ext.toArray} is alias for {@link Ext.Array#method!toArray Ext.Array#toArray}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iterable",
                    "text": "the iterable object to be turned into a true Array.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,453,28",
                      "text": "0,453,37,52",
                      "type": "0,453,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "a zero-based index that specifies the start of extraction.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,454,29",
                      "text": "0,454,38,59",
                      "type": "0,454,20",
                      "value": "0,454,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "a 1-based index that specifies the end of extraction.\n",
                    "type": "Number",
                    "value": "-1",
                    "src": {
                      "name": "0,455,29",
                      "text": "0,455,37,54",
                      "type": "0,455,20",
                      "value": "0,455,33"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "0,456,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,458,0",
                  "text": "0,434,12,789"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toMap",
                "text": "Creates a map (object) keyed by the elements of the given array. The values in\nthe map are the index+1 of the array element. For example:\n\n     var map = Ext.Array.toMap(['a','b','c']);\n\n     // map = { a: 1, b: 2, c: 3 };\n\nOr a key property can be specified:\n\n     var map = Ext.Array.toMap([\n             { name: 'a' },\n             { name: 'b' },\n             { name: 'c' }\n         ], 'name');\n\n     // map = { a: 1, b: 2, c: 3 };\n\nLastly, a key extractor can be provided:\n\n     var map = Ext.Array.toMap([\n             { name: 'a' },\n             { name: 'b' },\n             { name: 'c' }\n         ], function (obj) { return obj.name.toUpperCase(); });\n\n     // map = { A: 1, B: 2, C: 3 };\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array to create the map from.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1243,27",
                      "text": "0,1243,33,34",
                      "type": "0,1243,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "getKey",
                    "optional": true,
                    "text": "Name of the object property to use\nas a key or a function to extract the key.\n",
                    "type": "String/Function",
                    "src": {
                      "name": "0,1244,38",
                      "text": "0,1244,46,35:0,1245,12,43",
                      "type": "0,1244,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "Value of `this` inside callback specified for `getKey`.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1246,29",
                      "text": "0,1246,36,56",
                      "type": "0,1246,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The resulting map.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1247,29,19",
                      "type": "0,1247,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1249,0",
                  "text": "0,1216,12,696"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "toValueMap",
                "text": "Creates a map (object) keyed by a property of elements of the given array. The values in\nthe map are the array element. For example:\n\n     var map = Ext.Array.toValueMap(['a','b','c']);\n\n     // map = { a: 'a', b: 'b', c: 'c' };\n\nOr a key property can be specified:\n\n     var map = Ext.Array.toValueMap([\n             { name: 'a' },\n             { name: 'b' },\n             { name: 'c' }\n         ], 'name');\n\n     // map = { a: {name: 'a'}, b: {name: 'b'}, c: {name: 'c'} };\n\nLastly, a key extractor can be provided:\n\n     var map = Ext.Array.toValueMap([\n             { name: 'a' },\n             { name: 'b' },\n             { name: 'c' }\n         ], function (obj) { return obj.name.toUpperCase(); });\n\n     // map = { A: {name: 'a'}, B: {name: 'b'}, C: {name: 'c'} };\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "The Array to create the map from.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1298,27",
                      "text": "0,1298,33,34",
                      "type": "0,1298,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "getKey",
                    "optional": true,
                    "text": "Name of the object property to use\nas a key or a function to extract the key.\n",
                    "type": "String/Function",
                    "src": {
                      "name": "0,1299,38",
                      "text": "0,1299,46,35:0,1300,12,43",
                      "type": "0,1299,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "Value of this inside callback. This parameter is only\npassed when `getKey` is a function. If `getKey` is not a function, the 3rd\nargument is `arrayify`.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1301,29",
                      "text": "0,1301,36,54:0,1302,12,99",
                      "type": "0,1301,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "arrayify",
                    "optional": true,
                    "text": "Pass `1` to create arrays for all map entries\nor `2` to create arrays for map entries that have 2 or more items with the\nsame key. This only applies when `getKey` is specified. By default the map will\nhold the last entry with a given key.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1304,29",
                      "text": "0,1304,39,46:0,1305,12,193",
                      "type": "0,1304,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The resulting map.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1308,29,19",
                      "type": "0,1308,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1310,0",
                  "text": "0,1271,12,772"
                }
              },
              {
                "$type": "method",
                "name": "unique",
                "text": "Returns a new array with unique items.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "type": "Array",
                    "src": {
                      "name": "0,676,27",
                      "type": "0,676,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "results\n",
                    "type": "Array",
                    "src": {
                      "text": "0,677,28,8",
                      "type": "0,677,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,679,0",
                  "text": "0,674,12,40"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,2,11",
          "singleton": "0,3,4",
          "text": "0,4,4,97"
        }
      }
    ]
  },
  "version": 1
}