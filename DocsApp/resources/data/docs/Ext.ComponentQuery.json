{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/ComponentQuery.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Ext.Base,Object",
        "extends": "Ext.Base",
        "name": "Ext.ComponentQuery",
        "requires": "Ext.ComponentManager,Ext.util.Operators,Ext.util.LruCache",
        "singleton": true,
        "text": "Provides searching of Components within Ext.ComponentManager (globally) or a specific\nExt.container.Container on the document with a similar syntax to a CSS selector.\nReturns Array of matching Components, or empty Array.\n\n## Basic Component lookup\n\nComponents can be retrieved by using their {@link Ext.Component}:\n\n- `component`\n- `gridpanel`\n\nMatching by `xtype` matches inherited types, so in the following code, the previous field\n*of any type which inherits from `TextField`* will be found:\n\n    prevField = myField.previousNode('textfield');\n\nTo match only the exact type, pass the \"shallow\" flag by adding `(true)` to xtype\n(See Component's {@link Ext.Component#method!isXType Ext.Component#isXType} method):\n\n    prevTextField = myField.previousNode('textfield(true)');\n\nYou can search Components by their `id` or `itemId` property, prefixed with a #:\n\n    #myContainer\n\nComponent `xtype` and `id` or `itemId` can be used together to avoid possible\nid collisions between Components of different types:\n\n    panel#myPanel\n\nWhen Component's `id` or `xtype` contains dots, you can escape them in your selector:\n\n    my\\.panel#myPanel\n\nKeep in mind that JavaScript treats the backslash character in a special way, so you\nneed to escape it, too, in the actual code:\n\n    var myPanel = Ext.ComponentQuery.query('my\\\\.panel#myPanel');\n\n## Traversing Component tree\n\nComponents can be found by their relation to other Components. There are several\nrelationship operators, mostly taken from CSS selectors:\n\n- **`E F`** All descendant Components of E that match F\n- **`E > F`** All direct children Components of E that match F\n- **`E ^ F`** All parent Components of E that match F\n\nExpressions between relationship operators are matched left to right, i.e. leftmost\nselector is applied first, then if one or more matches are found, relationship operator\nitself is applied, then next selector expression, etc. It is possible to combine\nrelationship operators in complex selectors:\n\n    window[title=\"Input form\"] textfield[name=login] ^ form > button[action=submit]\n\nThat selector can be read this way: Find a window with title \"Input form\", in that\nwindow find a TextField with name \"login\" at any depth (including subpanels and/or\nFieldSets), then find an `{@link Ext.form.Panel}` that is a parent of the TextField, and in\nthat form find a direct child that is a button with custom property `action` set to\nvalue \"submit\".\n\nWhitespace on both sides of `^` and `>` operators is non-significant, i.e. can be\nomitted, but usually is used for clarity.\n\n## Searching by Component attributes\n\nComponents can be searched by their object property values (attributes). To do that,\nuse attribute matching expression in square brackets:\n\n- `component[disabled]` - matches any Component that has `disabled` property with\nany truthy (non-empty, not `false`) value.\n- `panel[title=\"Test\"]` - matches any Component that has `title` property set to\n\"Test\". Note that if the value does not contain spaces, the quotes are optional.\n\nAttributes can use any of the following operators to compare values:\n`=`, `!=`, `^=`, `$=`, `*=`, `%=`, `|=` and `~=`.\n\nPrefixing the attribute name with an at sign `@` means that the property must be\nthe object's `ownProperty`, not a property from the prototype chain.\n\nSpecifications like `[propName]` check that the property is a truthy value. To check\nthat the object has an `ownProperty` of a certain name, regardless of the value use\nthe form `[?propName]`.\n\nThe specified value is coerced to match the type of the property found in the\ncandidate Component using {@link Ext#method!coerce Ext#coerce}.\n\nIf you need to find Components by their `itemId` property, use the `#id` form; it will\ndo the same as `[itemId=id]` but is easier to read.\n\nIf you need to include a metacharacter like (, ), [, ], etc., in the query, escape it\nby prefixing it with a backslash:\n\n     var component = Ext.ComponentQuery.query('[myProperty=\\\\[foo\\\\]]');\n\n## Attribute matching operators\n\nThe '=' operator will return the results that **exactly** match the\nspecified object property (attribute):\n\n    Ext.ComponentQuery.query('panel[cls=my-cls]');\n\nWill match the following Component:\n\n    Ext.create('Ext.window.Window', {\n        cls: 'my-cls'\n    });\n\nBut will not match the following Component, because 'my-cls' is one value\namong others:\n\n     Ext.create('Ext.panel.Panel', {\n         cls: 'foo-cls my-cls bar-cls'\n     });\n\nYou can use the '~=' operator instead, it will return Components with\nthe property that **exactly** matches one of the whitespace-separated\nvalues. This is also true for properties that only have *one* value:\n\n    Ext.ComponentQuery.query('panel[cls~=my-cls]');\n\nWill match both Components:\n\n    Ext.create('Ext.panel.Panel', {\n        cls: 'foo-cls my-cls bar-cls'\n    });\n\n    Ext.create('Ext.window.Window', {\n        cls: 'my-cls'\n    });\n\nGenerally, '=' operator is more suited for object properties other than\nCSS classes, while '~=' operator will work best with properties that\nhold lists of whitespace-separated CSS classes.\n\nThe '^=' operator will return Components with specified attribute that\nstart with the passed value:\n\n    Ext.ComponentQuery.query('panel[title^=Sales]');\n\nWill match the following Component:\n\n    Ext.create('Ext.panel.Panel', {\n        title: 'Sales estimate for Q4'\n    });\n\nThe '$=' operator will return Components with specified properties that\nend with the passed value:\n\n    Ext.ComponentQuery.query('field[fieldLabel$=name]');\n\nWill match the following Component:\n\n    Ext.create('Ext.form.field.Text', {\n        fieldLabel: 'Enter your name'\n    });\n\nThe '/=' operator will return Components with specified properties that\nmatch the passed regular expression:\n\n    Ext.ComponentQuery.query('button[action/=\"edit|save\"]');\n\nWill match the following Components with a custom `action` property:\n\n    Ext.create('Ext.button.Button', {\n         action: 'edit'\n    });\n\n    Ext.create('Ext.button.Button', {\n         action: 'save'\n    });\n\nWhen you need to use meta characters like [], (), etc. in your query, make sure\nto escape them with back slashes:\n\n    Ext.ComponentQuery.query('panel[title=\"^Sales for Q\\\\[1-4\\\\]\"]');\n\nThe following test will find panels with their `ownProperty` collapsed being equal to\n`false`. It will **not** match a collapsed property from the prototype chain.\n\n    Ext.ComponentQuery.query('panel[@collapsed=false]');\n\nMember expressions from candidate Components may be tested. If the expression returns\na *truthy* value, the candidate Component will be included in the query:\n\n    var disabledFields = myFormPanel.query(\"{isDisabled()}\");\n\nSuch expressions are executed in Component's context, and the above expression is\nsimilar to running this snippet for every Component in your application:\n\n     if (component.isDisabled()) {\n         matches.push(component);\n     }\n\nIt is important to use only methods that are available in **every** Component instance\nto avoid run time exceptions. If you need to match your Components with a custom\ncondition formula, you can augment `{@link Ext.Component}` to provide custom matcher that\nwill return `false` by default, and override it in your custom classes:\n\n     Ext.define('My.Component', {\n         override: 'Ext.Component',\n         myMatcher: function() { return false; }\n     });\n\n     Ext.define('My.Panel', {\n         extend: 'Ext.panel.Panel',\n         requires: ['My.Component'],     // Ensure that Component override is applied\n         myMatcher: function(selector) {\n             return selector === 'myPanel';\n         }\n     });\n\nAfter that you can use a selector with your custom matcher to find all instances\nof `My.Panel`:\n\n     Ext.ComponentQuery.query(\"{myMatcher('myPanel')}\");\n\nHowever if you really need to use a custom matcher, you may find it easier to implement\na custom Pseudo class instead (see below).\n\n## Conditional matching\n\nAttribute matchers can be combined to select only Components that match **all**\nconditions (logical AND operator):\n\n    Ext.ComponentQuery.query('panel[cls~=my-cls][floating=true][title$=\"sales data\"]');\n\nE.g., the query above will match only a Panel-descended Component that has 'my-cls'\nCSS class *and* is floating *and* with a title that ends with \"sales data\".\n\nExpressions separated with commas will match any Component that satisfies\n*either* expression (logical OR operator):\n\n    Ext.ComponentQuery.query('field[fieldLabel^=User], field[fieldLabel*=password]');\n\nE.g., the query above will match any field with field label starting with \"User\",\n*or* any field that has \"password\" in its label.\n\nIf you need to include a comma in an attribute matching expression, escape it with a\nbackslash:\n\n    Ext.ComponentQuery.query('field[fieldLabel^=\"User\\\\, foo\"], field[fieldLabel*=password]');\n\n## Pseudo classes\n\nPseudo classes may be used to filter results in the same way as in\n{@link Ext.dom.Query}. There are five default pseudo classes:\n\n* `not` Negates a selector.\n* `first` Filters out all except the first matching item for a selector.\n* `last` Filters out all except the last matching item for a selector.\n* `focusable` Filters out all except Components which are currently able to recieve\nfocus.\n* `nth-child` Filters Components by ordinal position in the selection.\n* `scrollable` Filters out all except Components which are scrollable.\n\nThese pseudo classes can be used with other matchers or without them:\n\n     // Select first direct child button in any panel\n     Ext.ComponentQuery.query('panel > button:first');\n\n     // Select last field in Profile form\n     Ext.ComponentQuery.query('form[title=Profile] field:last');\n\n     // Find first focusable Component in a panel and focus it\n     panel.down(':focusable').focus();\n\n     // Select any field that is not hidden in a form\n     form.query('field:not(hiddenfield)');\n\n     // Find last scrollable Component and reset its scroll positions.\n     tabpanel.down(':scrollable[hideMode=display]:last').getScrollable().scrollTo(0, 0);\n\nPseudo class `nth-child` can be used to find any child Component by its\nposition relative to its siblings. This class' handler takes one argument\nthat specifies the selection formula as `Xn` or `Xn+Y`:\n\n     // Find every odd field in a form\n     form.query('field:nth-child(2n+1)'); // or use shortcut: :nth-child(odd)\n\n     // Find every even field in a form\n     form.query('field:nth-child(2n)');   // or use shortcut: :nth-child(even)\n\n     // Find every 3rd field in a form\n     form.query('field:nth-child(3n)');\n\nPseudo classes can be combined to further filter the results, e.g., in the\nform example above we can modify the query to exclude hidden fields:\n\n     // Find every 3rd non-hidden field in a form\n     form.query('field:not(hiddenfield):nth-child(3n)');\n\nNote that when combining pseudo classes, whitespace is significant, i.e.\nthere should be no spaces between pseudo classes. This is a common mistake;\nif you accidentally type a space between `field` and `:not`, the query\nwill not return any result because it will mean \"find *field's children\nComponents* that are not hidden fields...\".\n\n## Custom pseudo classes\n\nIt is possible to define your own custom pseudo classes. In fact, a\npseudo class is just a property in `Ext.ComponentQuery.pseudos` object\nthat defines pseudo class name (property name) and pseudo class handler\n(property value):\n\n    // Function receives array and returns a filtered array.\n    Ext.ComponentQuery.pseudos.invalid = function(items) {\n        var i = 0, l = items.length, c, result = [];\n        for (; i < l; i++) {\n            if (!(c = items[i]).isValid()) {\n                result.push(c);\n            }\n        }\n        return result;\n    };\n\n    var invalidFields = myFormPanel.query('field:invalid');\n    if (invalidFields.length) {\n        invalidFields[0].getEl().scrollIntoView(myFormPanel.body);\n        for (var i = 0, l = invalidFields.length; i < l; i++) {\n            invalidFields[i].getEl().frame(\"red\");\n        }\n    }\n\nPseudo class handlers can be even more flexible, with a selector\nargument used to define the logic:\n\n     // Handler receives array of itmes and selector in parentheses\n     Ext.ComponentQuery.pseudos.titleRegex = function(components, selector) {\n         var i = 0, l = components.length, c, result = [], regex = new RegExp(selector);\n         for (; i < l; i++) {\n             c = components[i];\n             if (c.title && regex.test(c.title)) {\n                 result.push(c);\n             }\n         }\n         return result;\n     }\n\n     var salesTabs = tabPanel.query('panel:titleRegex(\"sales\\\\s+for\\\\s+201[123]\")');\n\nBe careful when using custom pseudo classes with MVC Controllers: when\nyou use a pseudo class in Controller's `control` or `listen` component\nselectors, the pseudo class' handler function will be called very often\nand may slow down your application significantly. A good rule of thumb\nis to always specify Component xtype with the pseudo class so that the\nhandlers are only called on Components that you need, and try to make\nthe condition checks as cheap in terms of execution time as possible.\nNote how in the example above, handler function checks that Component\n*has* a title first, before running regex test on it.\n\n## Query examples\n\nQueries return an array of Components. Here are some example queries:\n\n    // retrieve all Ext.Panels in the document by xtype\n    var panelsArray = Ext.ComponentQuery.query('panel');\n\n    // retrieve all Ext.Panels within the container with an id myCt\n    var panelsWithinmyCt = Ext.ComponentQuery.query('#myCt panel');\n\n    // retrieve all direct children which are Ext.Panels within myCt\n    var directChildPanel = Ext.ComponentQuery.query('#myCt > panel');\n\n    // retrieve all grids or trees\n    var gridsAndTrees = Ext.ComponentQuery.query('gridpanel, treepanel');\n\n    // Focus first Component\n    myFormPanel.child(':focusable').focus();\n\n    // Retrieve every odd text field in a form\n    myFormPanel.query('textfield:nth-child(odd)');\n\n    // Retrieve every even field in a form, excluding hidden fields\n    myFormPanel.query('field:not(hiddenfield):nth-child(even)');\n\n    // Retrieve every scrollable in a tabpanel\n    tabpanel.query(':scrollable');\n\nFor easy access to queries based from a particular Container see the\n{@link Ext.container.Container#method!query Ext.container.Container#query}, {@link Ext.container.Container#method!down Ext.container.Container#down} and\n{@link Ext.container.Container#method!child Ext.container.Container#child} methods. Also see\n{@link Ext.Component#method!up Ext.Component#up}.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_visit",
                "text": "Visit implementation which handles both preOrder and postOrder modes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "preOrder",
                    "src": {
                      "name": "0,1031,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "selector",
                    "src": {
                      "name": "0,1031,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "src": {
                      "name": "0,1031,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "0,1031,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "0,1031,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraArgs",
                    "src": {
                      "name": "0,1031,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1028,12",
                  "name": "0,1031,0",
                  "text": "0,1029,12,70"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "1,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,118,12",
                  "name": "1,120,0",
                  "text": "1,116,12,125"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1251,37",
                      "text": "1,1251,42,57:1,1252,12,67",
                      "type": "1,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1253,29,48",
                      "type": "1,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1250,12",
                  "name": "1,1255,0",
                  "text": "1,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1338,37",
                      "text": "1,1338,42,57:1,1339,12,66",
                      "type": "1,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1340,29,52",
                      "type": "1,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1337,12",
                  "name": "1,1342,0",
                  "text": "1,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,40,21",
                      "text": "2,40,28,19",
                      "type": "2,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "2,38,12",
                  "text": "2,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "1,1626,0",
                  "text": "1,1623,12,132"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1469,29",
                      "text": "1,1469,35,40",
                      "type": "1,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1470,30",
                      "text": "1,1470,42,60",
                      "type": "1,1470,20",
                      "value": "1,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1471,29,27",
                      "type": "1,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1473,0",
                  "text": "1,1466,12,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "1,1506,12",
                  "name": "1,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1551,29",
                      "text": "1,1551,35,37",
                      "type": "1,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "1,1552,35,48:1,1553,12,33",
                      "type": "1,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1555,0",
                  "text": "1,1523,12,715"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,1515,12",
                  "name": "1,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,1449,28",
                      "type": "1,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1450,31,5",
                      "type": "1,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1448,12",
                  "name": "1,1452,0",
                  "text": "1,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "is",
                "text": "Tests whether the passed Component matches the selector string.\nAn empty selector will always match.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The Component to test\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "0,1078,35",
                      "text": "0,1078,45,22",
                      "type": "0,1078,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector string to test against.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1079,28",
                      "text": "0,1079,37,37",
                      "type": "0,1079,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the Component matches the selector.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1080,30,44",
                      "type": "0,1080,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1083,0",
                  "text": "0,1075,12,102"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "1,1571,28",
                      "type": "1,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "1,1572,28",
                      "type": "1,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1573,29,20",
                      "type": "1,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1574,12",
                  "name": "1,1576,0",
                  "text": "1,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "query",
                "text": "Returns an array of matched Components from within the passed root object.\n\nThis method filters returned Components in a similar way to how CSS selector based DOM\nqueries work using a textual selector string.\n\nSee class summary for details.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector string to filter returned Components.\n",
                    "type": "String",
                    "src": {
                      "name": "0,934,28",
                      "text": "0,934,37,51",
                      "type": "0,934,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "The Container within which to perform the query.\nIf omitted, all Components within the document are included in the search.\n\nThis parameter may also be an array of Components to filter according to the selector.\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "0,935,46",
                      "text": "0,935,52,49:0,936,12,163",
                      "type": "0,935,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched Components.\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "0,939,38,24",
                      "type": "0,939,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,943,0",
                  "text": "0,927,12,242"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1478,35",
                      "text": "1,1478,40,69",
                      "type": "1,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1479,29",
                      "text": "1,1479,36,41",
                      "type": "1,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1480,31,5",
                      "type": "1,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1482,0",
                  "text": "1,1476,12,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "1,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1160,12",
                  "name": "1,1163,0",
                  "text": "1,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,297,21,32",
                      "type": "2,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,239,12",
                  "text": "2,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "1,1589,30",
                      "text": "1,1589,36,44",
                      "type": "1,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1590,31,5",
                      "type": "1,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1591,12",
                  "name": "1,1593,0",
                  "text": "1,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              },
              {
                "$type": "method",
                "name": "visitPostOrder",
                "text": "Traverses the tree rooted at the passed root in post-order mode, calling the passed function on the nodes at each level.\nThat is the function is called upon each node **after** being called on its children).\n\nFor an object to be queryable, it must implement the `getRefItems` method which returns all\nimmediate child items.\n\nThis method is used at each level down the cascade. Currently {@link Ext.Component}s\nand {@link Ext.data.TreeModel}s are queryable.\n\nIf you have tree-structured data, you can make your nodes queryable, and use ComponentQuery on them.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "A ComponentQuery selector used to filter candidate nodes before calling the function.\nAn empty string matches any node.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1014,28",
                      "text": "0,1014,37,86:0,1015,12,34",
                      "type": "0,1014,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "text": "The root queryable object to start from.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1016,28",
                      "text": "0,1016,33,41",
                      "type": "0,1016,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call. Return `false` to abort the traverse.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "node",
                        "text": "The node being visited.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,1018,31",
                          "text": "0,1018,36,24",
                          "type": "0,1018,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,1017,30",
                      "text": "0,1017,33,60",
                      "type": "0,1017,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The context (`this` reference) in which the function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1019,29",
                      "text": "0,1019,36,66",
                      "type": "0,1019,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraArgs",
                    "optional": true,
                    "text": "A set of arguments to be appended to the function's argument list to pass down extra data known to the caller\n**after** the node being visited.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1020,28",
                      "text": "0,1020,39,110:0,1021,12,34",
                      "type": "0,1020,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,1023,0",
                  "text": "0,1003,12,580"
                }
              },
              {
                "$type": "method",
                "name": "visitPreOrder",
                "text": "Traverses the tree rooted at the passed root in pre-order mode, calling the passed function on the nodes at each level.\nThat is the function is called upon each node **before** being called on its children).\n\nFor an object to be queryable, it must implement the `getRefItems` method which returns all\nimmediate child items.\n\nThis method is used at each level down the cascade. Currently {@link Ext.Component}s\nand {@link Ext.data.TreeModel}s are queryable.\n\nIf you have tree-structured data, you can make your nodes queryable, and use ComponentQuery on them.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "A ComponentQuery selector used to filter candidate nodes before calling the function.\nAn empty string matches any node.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,989,28",
                      "text": "0,989,37,86:0,990,12,34",
                      "type": "0,989,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "text": "The root queryable object to start from.\n",
                    "type": "String",
                    "src": {
                      "name": "0,991,28",
                      "text": "0,991,33,41",
                      "type": "0,991,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call. Return `false` to abort the traverse.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "node",
                        "text": "The node being visited.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,993,31",
                          "text": "0,993,36,24",
                          "type": "0,993,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,992,30",
                      "text": "0,992,33,60",
                      "type": "0,992,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The context (`this` reference) in which the function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,994,29",
                      "text": "0,994,36,66",
                      "type": "0,994,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraArgs",
                    "optional": true,
                    "text": "A set of arguments to be appended to the function's argument list to pass down extra data known to the caller\n**after** the node being visited.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,995,28",
                      "text": "0,995,39,110:0,996,12,34",
                      "type": "0,995,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,998,0",
                  "text": "0,978,12,580"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "1,1049,13",
                  "name": "1,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1066,12",
                  "name": "1,1062,33",
                  "since": "1,1067,19",
                  "text": "1,1063,12,225",
                  "type": "1,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1076,12",
                  "name": "1,1072,33",
                  "since": "1,1077,19",
                  "text": "1,1073,12,229",
                  "type": "1,1072,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "cache",
                "text": "Cache of selectors and matching ComponentQuery.Query objects\n",
                "src": {
                  "access": "0,828,12",
                  "name": "0,831,0",
                  "text": "0,829,12,61"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1102,12",
                  "name": "1,1100,32",
                  "text": "1,1101,12,69",
                  "type": "1,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1084,12",
                  "name": "1,1082,32",
                  "readonly": "1,1085,12",
                  "since": "1,1086,19",
                  "text": "1,1083,12,64",
                  "type": "1,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1093,12",
                  "name": "1,1091,32",
                  "readonly": "1,1094,12",
                  "since": "1,1095,19",
                  "text": "1,1092,12,75",
                  "type": "1,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1056,12",
                  "name": "1,1053,32",
                  "readonly": "1,1057,12",
                  "text": "1,1054,12,94",
                  "type": "1,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "pseudos",
                "text": "Cache of pseudo class filter functions\n",
                "src": {
                  "access": "0,836,12",
                  "name": "0,839,0",
                  "text": "0,837,12,39"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "1,1413,12",
                  "name": "1,1379,34",
                  "text": "1,1380,12,1011",
                  "type": "1,1379,23"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,940,28",
                      "type": "1,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "1,941,32",
                      "text": "1,941,44,49",
                      "type": "1,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,942,12",
                  "inheritable": "1,944,12",
                  "name": "1,946,0",
                  "static": "1,943,12",
                  "text": "1,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,464,28",
                      "type": "1,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,461,12",
                  "inheritable": "1,463,12",
                  "name": "1,466,0",
                  "static": "1,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "1,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,659,12",
                  "inheritable": "1,661,12",
                  "name": "1,665,0",
                  "static": "1,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,522,28",
                      "text": "1,522,36,34",
                      "type": "1,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,523,30",
                      "text": "1,523,46,39",
                      "type": "1,523,20",
                      "value": "1,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,524,30",
                      "text": "1,524,45,45:1,525,12,53",
                      "type": "1,524,20",
                      "value": "1,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,527,12",
                  "name": "1,529,0",
                  "static": "1,526,12",
                  "text": "1,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,450,28",
                      "type": "1,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,451,31,5",
                      "type": "1,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,453,12",
                  "name": "1,455,0",
                  "static": "1,452,12",
                  "text": "1,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "1,693,30",
                      "text": "1,693,40,33",
                      "type": "1,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "1,694,34",
                      "text": "1,694,42,35",
                      "type": "1,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,695,31,5",
                      "type": "1,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,698,12",
                  "inheritable": "1,697,12",
                  "name": "1,700,0",
                  "static": "1,696,12",
                  "text": "1,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,810,12",
                  "inheritable": "1,812,12",
                  "name": "1,814,0",
                  "static": "1,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,824,12",
                  "inheritable": "1,826,12",
                  "name": "1,828,0",
                  "static": "1,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,107,29,22",
                      "type": "1,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,109,12",
                  "name": "1,111,0",
                  "static": "1,108,12",
                  "text": "1,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1018,35",
                      "text": "1,1018,41,63:1,1019,12,43",
                      "type": "1,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1020,35",
                      "text": "1,1020,42,25",
                      "type": "1,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,1022,12",
                  "name": "1,1025,0",
                  "static": "1,1021,12",
                  "text": "1,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,347,12",
                  "inheritable": "1,349,12",
                  "name": "1,352,0",
                  "static": "1,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "1,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,968,12",
                  "inheritable": "1,970,12",
                  "name": "1,972,0",
                  "static": "1,969,12",
                  "text": "1,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "1,989,29,10",
                      "type": "1,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,991,12",
                  "name": "1,993,0",
                  "static": "1,990,12",
                  "text": "1,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "1,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,840,12",
                  "inheritable": "1,842,12",
                  "name": "1,844,0",
                  "static": "1,841,12",
                  "text": "1,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "1,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "1,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,424,12",
                  "inheritable": "1,426,12",
                  "name": "1,428,0",
                  "static": "1,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,762,28",
                      "text": "1,762,36,52:1,763,12,66",
                      "type": "1,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,764,31,11",
                      "type": "1,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,766,12",
                  "name": "1,768,0",
                  "static": "1,765,12",
                  "text": "1,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "1,402,12",
                  "inheritable": "1,404,12",
                  "name": "1,406,0",
                  "static": "1,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "1,395,12",
                  "inheritable": "1,397,12",
                  "name": "1,399,0",
                  "static": "1,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "extends": "0,386,0",
          "name": "0,386,0",
          "requires": "0,389,0,0:0,390,0,0:0,391,0,0",
          "singleton": "0,387,0",
          "text": "0,2,4,14407"
        }
      }
    ]
  },
  "version": 1
}