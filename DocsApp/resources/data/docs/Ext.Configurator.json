{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/class/Configurator.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.Configurator",
        "text": "This class manages the config properties for a class.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "add",
                "text": "This method adds new config properties. This is called for classes when they are\ndeclared, then for any mixins that class may define and finally for any overrides\ndefined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The config object containing the new config properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,138,24",
                      "text": "0,138,31,56",
                      "type": "0,138,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,139,28",
                      "text": "0,139,40,49",
                      "type": "0,139,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,140,8",
                  "name": "0,142,0",
                  "text": "0,134,8,195"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "configure",
                "text": "This method configures the given `instance` using the specified `instanceConfig`.\nThe given `instance` should have been created by this object's `{@link #property!cls cls}`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "instance",
                    "text": "The instance to configure.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,328,24",
                      "text": "0,328,33,27",
                      "type": "0,328,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "instanceConfig",
                    "text": "The configuration properties to apply to `instance`.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,329,24",
                      "text": "0,329,39,53",
                      "type": "0,329,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,330,8",
                  "name": "0,332,0",
                  "text": "0,325,8,153"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "merge",
                "text": "Merges the values of a config object onto a base config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "instance",
                    "type": "Ext.Base",
                    "src": {
                      "name": "0,629,26",
                      "type": "0,629,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "baseConfig",
                    "type": "Object",
                    "src": {
                      "name": "0,630,24",
                      "type": "0,630,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "0,631,24",
                      "type": "0,631,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the merged config\n",
                    "type": "Object",
                    "src": {
                      "text": "0,632,25,18",
                      "type": "0,632,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,633,8",
                  "name": "0,635,0",
                  "text": "0,628,8,57"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "reconfigure",
                "items": [
                  {
                    "$type": "param",
                    "name": "instance",
                    "src": {
                      "name": "0,665,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "instanceConfig",
                    "src": {
                      "name": "0,665,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "src": {
                      "name": "0,665,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,663,8",
                  "name": "0,665,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "resolvePlatformConfig",
                "since": "5.1.0",
                "text": "This method accepts an instance config object containing a `platformConfig`\nproperty and merges the appropriate rules from that sub-object with the root object\nto create the final config object that should be used. This is method called by\n`{@link #method!configure #configure}` when it receives an `instanceConfig` containing a\n`platformConfig` property.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "instanceConfig",
                    "text": "The instance config parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,761,24",
                      "text": "0,761,39,31",
                      "type": "0,761,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new instance config object with platformConfig results applied.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,762,25,68",
                      "type": "0,762,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,763,8",
                  "name": "0,766,0",
                  "since": "0,764,15",
                  "text": "0,755,8,339"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "cachedConfigs",
                "readonly": true,
                "text": "This object holds a bool value for each cachedConfig property keyed by name.\n\nThis map is maintained as each property is added via the `{@link #method!add add}` method.\n",
                "type": "Object",
                "src": {
                  "access": "0,56,12",
                  "name": "0,55,31",
                  "readonly": "0,57,12",
                  "text": "0,51,12,150",
                  "type": "0,55,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "cls",
                "readonly": true,
                "text": "The class to which this instance is associated.\n",
                "type": "Ext.Class",
                "src": {
                  "access": "0,23,8",
                  "name": "0,22,30",
                  "readonly": "0,24,8",
                  "text": "0,22,34,48",
                  "type": "0,22,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "configs",
                "readonly": true,
                "text": "This object holds an `{@link Ext.Config}` value for each config property keyed by name.\nThis object has as its prototype object the `{@link #property!configs configs}` of its super class.\n\nThis map is maintained as each property is added via the `{@link #method!add add}` method.\n",
                "type": "Object",
                "src": {
                  "access": "0,45,12",
                  "name": "0,44,31",
                  "readonly": "0,46,12",
                  "text": "0,39,12,227",
                  "type": "0,44,23"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "initList",
                "text": "This array holds the properties that need to be set on new instances.\n\nThis array is populated when the first instance is passed to `{@link #method!configure configure}` (basically\nwhen the first instance is created). The entries in `{@link #property!initMap initMap}` are iterated to find\nthose configs needing per-instance processing.\n",
                "type": "Ext.Config[]",
                "src": {
                  "access": "0,129,8",
                  "name": "0,128,33",
                  "text": "0,122,8,286",
                  "type": "0,128,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "initMap",
                "readonly": true,
                "text": "This object holds a `{@link Number}` for each config property keyed by name. This object has\nas its prototype object the `{@link #property!initMap initMap}` of its super class. The value of each property\nhas the following meaning:\n\n  * `0` - initial value is `{@link null}` and requires no processing.\n  * `1` - initial value must be set on each instance.\n  * `2` - initial value can be cached on the prototype by the first instance.\n\nAny `{@link null}` values will either never be added to this map or (if added by a base\nclass and set to `{@link null}` by a derived class) will cause the entry to be 0.\n\nThis map is maintained as each property is added via the `{@link #method!add add}` method.\n",
                "type": "Object",
                "src": {
                  "access": "0,76,12",
                  "name": "0,75,31",
                  "readonly": "0,77,12",
                  "text": "0,62,12,620",
                  "type": "0,75,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "superCfg",
                "readonly": true,
                "text": "The super class `Configurator` instance or `{@link null}` if there is no super class.\n",
                "type": "Ext.Configurator",
                "src": {
                  "access": "0,32,8",
                  "name": "0,31,37",
                  "readonly": "0,33,8",
                  "text": "0,29,8,79",
                  "type": "0,31,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "values",
                "readonly": true,
                "text": "This object holds the default value for each config property keyed by name. This\nobject has as its prototype object the `{@link #property!values values}` of its super class.\n\nThis map is maintained as each property is added via the `{@link #method!add add}` method.\n",
                "type": "Object",
                "src": {
                  "access": "0,88,12",
                  "name": "0,87,31",
                  "readonly": "0,89,12",
                  "text": "0,82,12,222",
                  "type": "0,87,23"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,4,4",
          "name": "0,2,11",
          "text": "0,3,4,54"
        }
      }
    ]
  },
  "version": 1
}