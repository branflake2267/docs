{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/EventManager.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "deprecatedVersion": "5.0.0",
        "extended": "Ext.Base,Object",
        "extends": "Ext.Base",
        "name": "Ext.EventManager",
        "singleton": true,
        "text": "Registers event handlers on DOM elements.\n\nThis class is deprecated.  Please use the Ext.dom.Element api to attach listeners to\nDOM Elements.  For example:\n\n    var element = Ext.get('myId');\n\n    element.on('click', function(e) {\n        // event handling logic here\n    });\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "1,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,118,12",
                  "name": "1,120,0",
                  "text": "1,116,12,125"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "Appends an event handler to an element.  The shorthand version {@link #method!on #on} is equivalent.\nTypically you will use {@link Ext.dom.Element#method!addListener Ext.dom.Element#addListener} directly on an Element in favor of\ncalling this version.\n\n{@link Ext.EventManager#method!on Ext.EventManager#on} is an alias for {@link Ext.EventManager#method!addListener Ext.EventManager#addListener}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The html element or id to assign the event handler to.\n",
                    "type": "String/Ext.dom.Element/HTMLElement/Window",
                    "src": {
                      "name": "0,30,59",
                      "text": "0,30,62,55",
                      "type": "0,30,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String",
                    "src": {
                      "name": "0,32,24",
                      "text": "0,32,34,37:0,33,8,61",
                      "type": "0,32,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "handler",
                    "optional": true,
                    "text": "The handler function the event invokes. A String parameter\nis assumed to be method name in `scope` object, or Element object if no scope is provided.\n",
                    "type": "Function/String",
                    "items": [
                      {
                        "$type": "property",
                        "name": "event",
                        "text": "The {@link Ext.event.Event} describing the event.\n",
                        "type": "Ext.event.Event",
                        "src": {
                          "name": "0,37,41",
                          "text": "0,37,47,62",
                          "type": "0,37,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "The Element which was the target of the event.\nNote that this may be filtered by using the `delegate` option.\n",
                        "type": "Ext.dom.Element",
                        "src": {
                          "name": "0,38,41",
                          "text": "0,38,48,47:0,39,8,63",
                          "type": "0,38,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "options",
                        "text": "The options object from the addListener call.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,40,32",
                          "text": "0,40,40,46",
                          "type": "0,40,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,35,34",
                      "text": "0,35,43,59:0,36,8,91",
                      "type": "0,35,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is executed.\nDefaults to the Element.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,42,25",
                      "text": "0,42,32,72:0,43,8,26",
                      "type": "0,42,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration properties.\nThis may contain any of the following properties (See {@link Ext.dom.Element#method!addListener Ext.dom.Element#addListener}\nfor examples of how to use these options.):\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "The scope (`this` reference) in which the handler function is executed. Defaults to the Element.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,48,32",
                          "text": "0,48,38,97",
                          "type": "0,48,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "text": "A simple selector to filter the target or look for a descendant of the target. See {@link Ext.dom.Query} for\ninformation about simple selectors.\n",
                        "type": "String",
                        "src": {
                          "name": "0,49,32",
                          "text": "0,49,41,109:0,50,8,36",
                          "type": "0,49,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "text": "True to stop the event. That is stop propagation, and prevent the default action.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,51,33",
                          "text": "0,51,43,82",
                          "type": "0,51,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "text": "True to prevent the default action\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,52,33",
                          "text": "0,52,48,35",
                          "type": "0,52,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "text": "True to prevent event propagation\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,53,33",
                          "text": "0,53,49,34",
                          "type": "0,53,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "normalized",
                        "text": "False to pass a browser event to the handler function instead of an Ext.event.Event\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,54,33",
                          "text": "0,54,44,84",
                          "type": "0,54,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "The number of milliseconds to delay the invocation of the handler after te event fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "0,55,32",
                          "text": "0,55,38,88",
                          "type": "0,55,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "True to add a handler to handle just the next firing of the event, and then remove itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,56,33",
                          "text": "0,56,40,91",
                          "type": "0,56,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is *not* invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "0,57,32",
                          "text": "0,57,39,85:0,58,8,170",
                          "type": "0,57,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "Only call the handler if the event was fired on the target Element,\n*not* if the event was bubbled up from a child node.\n",
                        "type": "Ext.dom.Element",
                        "src": {
                          "name": "0,60,41",
                          "text": "0,60,48,68:0,61,8,53",
                          "type": "0,60,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "capture",
                        "text": "`true` to initiate capture which will fire the listeners on the target Element *before* any descendant Elements.\nNormal events start with the target element and propagate upward to ancestor elements, whereas captured events propagate from the top of the DOM\ndownward to descendant elements. This option is the same as the useCapture parameter in the javascript addEventListener method.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,62,33",
                          "text": "0,62,41,113:0,63,8,273",
                          "type": "0,62,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,45,25",
                      "text": "0,45,34,55:0,46,8,134",
                      "type": "0,45,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,66,0",
                  "text": "0,24,8,290"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1251,37",
                      "text": "1,1251,42,57:1,1252,12,67",
                      "type": "1,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1253,29,48",
                      "type": "1,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1250,12",
                  "name": "1,1255,0",
                  "text": "1,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1338,37",
                      "text": "1,1338,42,57:1,1339,12,66",
                      "type": "1,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1340,29,52",
                      "type": "1,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1337,12",
                  "name": "1,1342,0",
                  "text": "1,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,40,21",
                      "text": "2,40,28,19",
                      "type": "2,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "2,38,12",
                  "text": "2,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "1,1626,0",
                  "text": "1,1623,12,132"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1469,29",
                      "text": "1,1469,35,40",
                      "type": "1,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1470,30",
                      "text": "1,1470,42,60",
                      "type": "1,1470,20",
                      "value": "1,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1471,29,27",
                      "type": "1,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1473,0",
                  "text": "1,1466,12,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "1,1506,12",
                  "name": "1,1508,0"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "getId",
                "text": "Get the id of the element. If one has not been assigned, automatically assign it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "text": "The element to get the id for.\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,247,45",
                      "text": "0,247,53,31",
                      "type": "0,247,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "0,248,25,3",
                      "type": "0,248,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,249,8",
                  "name": "0,251,0",
                  "text": "0,246,8,82"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1551,29",
                      "text": "1,1551,35,37",
                      "type": "1,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "1,1552,35,48:1,1553,12,33",
                      "type": "1,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1555,0",
                  "text": "1,1523,12,715"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "getPageX",
                "text": "Gets the x coordinate from the event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The event\n",
                    "type": "Object",
                    "src": {
                      "name": "0,285,24",
                      "text": "0,285,30,10",
                      "type": "0,285,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The x coordinate\n",
                    "type": "Number",
                    "src": {
                      "text": "0,286,25,17",
                      "type": "0,286,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,287,8",
                  "name": "0,289,0",
                  "text": "0,284,8,37"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "getPageXY",
                "text": "Gets the x & y coordinate from the event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The event\n",
                    "type": "Object",
                    "src": {
                      "name": "0,299,24",
                      "text": "0,299,30,10",
                      "type": "0,299,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The x/y coordinate\n",
                    "type": "Number[]",
                    "src": {
                      "text": "0,300,27,19",
                      "type": "0,300,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,301,8",
                  "name": "0,303,0",
                  "text": "0,298,8,41"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "getPageY",
                "text": "Gets the y coordinate from the event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The event\n",
                    "type": "Object",
                    "src": {
                      "name": "0,324,24",
                      "text": "0,324,30,10",
                      "type": "0,324,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The y coordinate\n",
                    "type": "Number",
                    "src": {
                      "text": "0,325,25,17",
                      "type": "0,325,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,326,8",
                  "name": "0,328,0",
                  "text": "0,323,8,37"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "getRelatedTarget",
                "text": "Gets the related target from the event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The event\n",
                    "type": "Object",
                    "src": {
                      "name": "0,262,24",
                      "text": "0,262,30,10",
                      "type": "0,262,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The related target.\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "0,263,30,20",
                      "type": "0,263,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,264,8",
                  "name": "0,266,0",
                  "text": "0,261,8,40"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "getTarget",
                "text": "Gets the target of the event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The event\n",
                    "type": "Object",
                    "src": {
                      "name": "0,338,24",
                      "text": "0,338,30,10",
                      "type": "0,338,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "target\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "0,339,30,7",
                      "type": "0,339,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,340,8",
                  "name": "0,342,0",
                  "text": "0,337,8,30"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,1515,12",
                  "name": "1,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,1449,28",
                      "type": "1,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1450,31,5",
                      "type": "1,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1448,12",
                  "name": "1,1452,0",
                  "text": "1,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "1,1571,28",
                      "type": "1,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "1,1572,28",
                      "type": "1,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1573,29,20",
                      "type": "1,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1574,12",
                  "name": "1,1576,0",
                  "text": "1,1569,12,140"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.EventManager#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "0,380,8",
                  "name": "0,379,16"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext#method-on Ext.on}('resize', fn) to attach a window resize listener.\n",
                "deprecatedVersion": "5.0.0",
                "name": "onWindowResize",
                "text": "Adds a listener to be notified when the browser window is resized and provides resize event buffering (100 milliseconds),\npasses new viewport width and height to handlers.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler function the window resize event invokes.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,77,26",
                      "text": "0,77,29,54",
                      "type": "0,77,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,78,26",
                      "text": "0,78,32,112",
                      "type": "0,78,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Options object as passed to {@link Ext.dom.Element#method!addListener Ext.dom.Element#addListener}\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,79,27",
                      "text": "0,79,36,64",
                      "type": "0,79,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "0,80,8",
                  "deprecatedVersion": "0,80,8",
                  "name": "0,82,0",
                  "text": "0,75,8,172"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "onWindowUnload",
                "text": "Adds a listener to be notified when the browser window is unloaded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler function the window unload event invokes.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,92,26",
                      "text": "0,92,29,54",
                      "type": "0,92,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,93,26",
                      "text": "0,93,32,112",
                      "type": "0,93,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "Options object as passed to {@link Ext.dom.Element#method!addListener Ext.dom.Element#addListener}\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,94,26",
                      "text": "0,94,34,64",
                      "type": "0,94,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,95,8",
                  "name": "0,97,0",
                  "text": "0,91,8,68"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "preventDefault",
                "text": "Prevents the browsers default handling of the event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The event to prevent the default\n",
                    "type": "Event",
                    "src": {
                      "name": "0,220,23",
                      "text": "0,220,29,33",
                      "type": "0,220,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,221,8",
                  "name": "0,223,0",
                  "text": "0,219,8,53"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "purgeElement",
                "text": "Recursively removes all previous added listeners from an element and its children.\nTypically you will use {@link Ext.dom.Element#method!clearListeners Ext.dom.Element#clearListeners} directly on an Element\nin favor of calling this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The id or html element from which\nto remove all event handlers.\n",
                    "type": "String/Ext.dom.Element/HTMLElement/Window",
                    "src": {
                      "name": "0,109,59",
                      "text": "0,109,62,34:0,110,8,30",
                      "type": "0,109,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "(optional) The name of the event.\n",
                    "type": "String",
                    "src": {
                      "name": "0,111,24",
                      "text": "0,111,34,34",
                      "type": "0,111,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,112,8",
                  "name": "0,114,0",
                  "text": "0,106,8,201"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "removeAll",
                "text": "Removes all event handers from an element.  Typically you will use {@link Ext.dom.Element#method!clearListeners Ext.dom.Element#clearListeners} directly on an Element in favor of calling this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The id or html element from which\nto remove all event handlers.\n",
                    "type": "String/Ext.dom.Element/HTMLElement/Window",
                    "src": {
                      "name": "0,125,59",
                      "text": "0,125,62,34:0,126,8,30",
                      "type": "0,125,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,127,8",
                  "name": "0,129,0",
                  "text": "0,123,8,162"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler from an element.  The shorthand version {@link #method!un #un} is equivalent.  Typically\nyou will use {@link Ext.dom.Element#method!removeListener Ext.dom.Element#removeListener} directly on an Element in favor of calling this version.\n\n{@link Ext.EventManager#method!on Ext.EventManager#on} is an alias for {@link Ext.EventManager#method!addListener Ext.EventManager#addListener}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The id or html element from which to remove the listener.\n",
                    "type": "String/Ext.dom.Element/HTMLElement/Window",
                    "src": {
                      "name": "0,143,59",
                      "text": "0,143,62,58",
                      "type": "0,143,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event.\n",
                    "type": "String",
                    "src": {
                      "name": "0,144,24",
                      "text": "0,144,34,23",
                      "type": "0,144,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler function to remove. **This must be a reference to the function passed\ninto the {@link #method!addListener #addListener} call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "0,145,26",
                      "text": "0,145,29,82:0,146,8,38",
                      "type": "0,145,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "If a scope (`this` reference) was specified when the listener was added,\nthen this must refer to the same object.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,147,24",
                      "text": "0,147,30,73:0,148,8,41",
                      "type": "0,147,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,150,0",
                  "text": "0,138,8,296"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "removeResizeListener",
                "text": "Removes the passed window resize listener.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes\n",
                    "type": "Function",
                    "src": {
                      "name": "0,160,26",
                      "text": "0,160,29,29",
                      "type": "0,160,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "The scope of handler\n",
                    "type": "Object",
                    "src": {
                      "name": "0,161,26",
                      "text": "0,161,32,21",
                      "type": "0,161,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,162,8",
                  "name": "0,164,0",
                  "text": "0,159,8,43"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "removeUnloadListener",
                "text": "Removes the passed window unload listener.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes\n",
                    "type": "Function",
                    "src": {
                      "name": "0,174,26",
                      "text": "0,174,29,29",
                      "type": "0,174,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "The scope of handler\n",
                    "type": "Object",
                    "src": {
                      "name": "0,175,26",
                      "text": "0,175,32,21",
                      "type": "0,175,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,176,8",
                  "name": "0,178,0",
                  "text": "0,173,8,43"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "deprecatedVersion": "5.0.0",
                "name": "resolveTextNode",
                "text": "Resolve any text nodes accounting for browser differences.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,358,29",
                      "text": "0,358,34,9",
                      "type": "0,358,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The resolved node\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "0,359,30,18",
                      "type": "0,359,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,357,8",
                  "deprecatedVersion": "0,360,8",
                  "name": "0,362,0",
                  "text": "0,356,8,59"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1478,35",
                      "text": "1,1478,40,69",
                      "type": "1,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1479,29",
                      "text": "1,1479,36,41",
                      "type": "1,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1480,31,5",
                      "type": "1,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1482,0",
                  "text": "1,1476,12,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "1,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1160,12",
                  "name": "1,1163,0",
                  "text": "1,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "stopEvent",
                "text": "Stop the event (preventDefault and stopPropagation)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The event to stop\n",
                    "type": "Event",
                    "src": {
                      "name": "0,188,23",
                      "text": "0,188,29,18",
                      "type": "0,188,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,189,8",
                  "name": "0,191,0",
                  "text": "0,187,8,52"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "stopPropagation",
                "text": "Cancels bubbling of the event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The event to stop bubbling.\n",
                    "type": "Event",
                    "src": {
                      "name": "0,202,23",
                      "text": "0,202,29,28",
                      "type": "0,202,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,203,8",
                  "name": "0,205,0",
                  "text": "0,201,8,31"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,297,21,32",
                      "type": "2,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,239,12",
                  "text": "2,240,4,2445"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.EventManager#removeListener",
                "name": "un",
                "src": {
                  "inheritdoc": "0,387,8",
                  "name": "0,386,16"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "1,1589,30",
                      "text": "1,1589,36,44",
                      "type": "1,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1590,31,5",
                      "type": "1,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1591,12",
                  "name": "1,1593,0",
                  "text": "1,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "1,1049,13",
                  "name": "1,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1066,12",
                  "name": "1,1062,33",
                  "since": "1,1067,19",
                  "text": "1,1063,12,225",
                  "type": "1,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1076,12",
                  "name": "1,1072,33",
                  "since": "1,1077,19",
                  "text": "1,1073,12,229",
                  "type": "1,1072,23"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1102,12",
                  "name": "1,1100,32",
                  "text": "1,1101,12,69",
                  "type": "1,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1084,12",
                  "name": "1,1082,32",
                  "readonly": "1,1085,12",
                  "since": "1,1086,19",
                  "text": "1,1083,12,64",
                  "type": "1,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1093,12",
                  "name": "1,1091,32",
                  "readonly": "1,1094,12",
                  "since": "1,1095,19",
                  "text": "1,1092,12,75",
                  "type": "1,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1056,12",
                  "name": "1,1053,32",
                  "readonly": "1,1057,12",
                  "text": "1,1054,12,94",
                  "type": "1,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "1,1413,12",
                  "name": "1,1379,34",
                  "text": "1,1380,12,1011",
                  "type": "1,1379,23"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,940,28",
                      "type": "1,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "1,941,32",
                      "text": "1,941,44,49",
                      "type": "1,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,942,12",
                  "inheritable": "1,944,12",
                  "name": "1,946,0",
                  "static": "1,943,12",
                  "text": "1,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,464,28",
                      "type": "1,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,461,12",
                  "inheritable": "1,463,12",
                  "name": "1,466,0",
                  "static": "1,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "1,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,659,12",
                  "inheritable": "1,661,12",
                  "name": "1,665,0",
                  "static": "1,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,522,28",
                      "text": "1,522,36,34",
                      "type": "1,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,523,30",
                      "text": "1,523,46,39",
                      "type": "1,523,20",
                      "value": "1,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,524,30",
                      "text": "1,524,45,45:1,525,12,53",
                      "type": "1,524,20",
                      "value": "1,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,527,12",
                  "name": "1,529,0",
                  "static": "1,526,12",
                  "text": "1,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,450,28",
                      "type": "1,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,451,31,5",
                      "type": "1,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,453,12",
                  "name": "1,455,0",
                  "static": "1,452,12",
                  "text": "1,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "1,693,30",
                      "text": "1,693,40,33",
                      "type": "1,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "1,694,34",
                      "text": "1,694,42,35",
                      "type": "1,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,695,31,5",
                      "type": "1,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,698,12",
                  "inheritable": "1,697,12",
                  "name": "1,700,0",
                  "static": "1,696,12",
                  "text": "1,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,810,12",
                  "inheritable": "1,812,12",
                  "name": "1,814,0",
                  "static": "1,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,824,12",
                  "inheritable": "1,826,12",
                  "name": "1,828,0",
                  "static": "1,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,107,29,22",
                      "type": "1,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,109,12",
                  "name": "1,111,0",
                  "static": "1,108,12",
                  "text": "1,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1018,35",
                      "text": "1,1018,41,63:1,1019,12,43",
                      "type": "1,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1020,35",
                      "text": "1,1020,42,25",
                      "type": "1,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,1022,12",
                  "name": "1,1025,0",
                  "static": "1,1021,12",
                  "text": "1,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,347,12",
                  "inheritable": "1,349,12",
                  "name": "1,352,0",
                  "static": "1,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "1,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,968,12",
                  "inheritable": "1,970,12",
                  "name": "1,972,0",
                  "static": "1,969,12",
                  "text": "1,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "1,989,29,10",
                      "type": "1,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,991,12",
                  "name": "1,993,0",
                  "static": "1,990,12",
                  "text": "1,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "1,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,840,12",
                  "inheritable": "1,842,12",
                  "name": "1,844,0",
                  "static": "1,841,12",
                  "text": "1,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "1,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "1,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,424,12",
                  "inheritable": "1,426,12",
                  "name": "1,428,0",
                  "static": "1,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,762,28",
                      "text": "1,762,36,52:1,763,12,66",
                      "type": "1,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,764,31,11",
                      "type": "1,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,766,12",
                  "name": "1,768,0",
                  "static": "1,765,12",
                  "text": "1,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "1,402,12",
                  "inheritable": "1,404,12",
                  "name": "1,406,0",
                  "static": "1,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "1,395,12",
                  "inheritable": "1,397,12",
                  "name": "1,399,0",
                  "static": "1,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "deprecatedVersion": "0,15,4",
          "extends": "0,17,0",
          "name": "0,2,11",
          "singleton": "0,14,4",
          "text": "0,3,4,277"
        }
      }
    ]
  },
  "version": 1
}