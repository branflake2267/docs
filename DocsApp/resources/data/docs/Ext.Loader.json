{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/class/Loader.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.Loader",
        "singleton": true,
        "text": "This class provides dynamic loading support for JavaScript classes. Application code\ndoes not typically need to call <a href='#!/api/Ext.Loader'>Ext.Loader</a> except perhaps to configure path mappings\nwhen not using [Sencha Cmd](http://www.sencha.com/products/sencha-cmd/).\n\n     Ext.Loader.setPath('MyApp', 'app');\n\nWhen using Sencha Cmd, this is handled by the \"bootstrap\" provided by the application\nbuild script and such configuration is not necessary.\n\n# Typical Usage\n\nThe <a href='#!/api/Ext.Loader'>Ext.Loader</a> is most often used behind the scenes to satisfy class references in\nclass declarations. Like so:\n\n     Ext.define('MyApp.view.Main', {\n         extend: 'Ext.panel.Panel',\n\n         mixins: [\n             'MyApp.util.Mixin'\n         ],\n\n         requires: [\n             'Ext.grid.Panel'\n         ],\n\n         uses: [\n             'MyApp.util.Stuff'\n         ]\n     });\n\nIn all of these cases, <a href='#!/api/Ext.Loader'>Ext.Loader</a> is used internally to resolve these class names\nand ensure that the necessary class files are loaded.\n\nDuring development, these files are loaded individually for optimal debugging. For a\nproduction use, [Sencha Cmd](http://www.sencha.com/products/sencha-cmd/) will replace\nall of these strings with the actual resolved class references because it ensures that\nthe classes are all contained in the build in the correct order. In development, these\nfiles will not be loaded until the `MyApp.view.Main` class indicates they are needed\nas shown above.\n\n# Loading Classes\n\nYou can also use <a href='#!/api/Ext.Loader'>Ext.Loader</a> directly to load classes or files. The simplest form of\nuse is <a href='#!/api/Ext-method-require'>Ext#require</a>.\n\nFor example:\n\n     Ext.require('MyApp.view.Main', function () {\n         // On callback, the MyApp.view.Main class is now loaded\n\n         var view = new MyApp.view.Main();\n     });\n\nYou can alternatively require classes by alias or wildcard.\n\n    Ext.require('widget.window');\n\n    Ext.require(['widget.window', 'layout.border', 'Ext.data.Connection']);\n\n    Ext.require(['widget.*', 'layout.*', 'Ext.data.*']);\n\nThe callback function is optional.\n\n**Note** Using `Ext.require` at global scope will cause <a href='#!/api/Ext-method-onReady'>Ext#onReady</a> and\n<a href='#!/api/Ext.app.Application-method-launch'>Ext.app.Application#launch</a> methods to be deferred until the required classes\nare loaded. It is these cases where the callback function is most often unnecessary.\n\n## Using Excludes\n\nAlternatively, you can exclude what you don't need:\n\n    // Include everything except Ext.tree.*\n    Ext.exclude('Ext.tree.*').require('*');\n\n    // Include all widgets except widget.checkbox* (this will exclude\n    // widget.checkbox, widget.checkboxfield, widget.checkboxgroup, etc.)\n    Ext.exclude('widget.checkbox*').require('widget.*');\n\n# Dynamic Instantiation\n\nAnother feature enabled by <a href='#!/api/Ext.Loader'>Ext.Loader</a> is instantiation using class names or aliases.\n\nFor example:\n\n     var win = Ext.create({\n         xtype: 'window',\n\n         // or\n         // xclass: 'Ext.window.Window'\n\n         title: 'Hello'\n     });\n\nThis form of creation can be useful if the type to create (`window` in the above) is\nnot known statically. Internally, <a href='#!/api/Ext-method-create'>Ext#create</a> may need to *synchronously*\nload the desired class and its requirements. Doing this will generate a warning in\nthe console:\n\n     [Ext.Loader] Synchronously loading 'Ext.window.Window'...\n\nIf you see these in your debug console, you should add the indicated class(es) to the\nappropriate `requires` array (as above) or make an <a href='#!/api/Ext-method-require'>Ext#require</a> call.\n\n\n**Note** Using <a href='#!/api/Ext-method-create'>Ext#create</a> has some performance overhead and is best reserved\nfor cases where the target class is not known until run-time.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "disableCaching",
                "optional": true,
                "text": "Appends current timestamp to script files to prevent caching.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,151,32",
                  "text": "0,152,16,62",
                  "type": "0,151,22",
                  "value": "0,151,47"
                }
              },
              {
                "$type": "property",
                "name": "disableCachingParam",
                "optional": true,
                "text": "The get parameter name for the cache buster's timestamp.\n",
                "type": "String",
                "value": "\"_dc\"",
                "src": {
                  "name": "0,157,31",
                  "text": "0,158,16,57",
                  "type": "0,157,22",
                  "value": "0,157,51"
                }
              },
              {
                "$type": "property",
                "name": "enabled",
                "optional": true,
                "text": "Whether or not to enable the dynamic dependency loading feature.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,137,32",
                  "text": "0,138,16,65",
                  "type": "0,137,22",
                  "value": "0,137,40"
                }
              },
              {
                "$type": "property",
                "name": "paths",
                "text": "The mapping from namespaces to file paths\n\n    {\n        'Ext': '.', // This is set by default, Ext.layout.container.Container will be\n                    // loaded from ./layout/Container.js\n\n        'My': './src/my_own_folder' // My.layout.Container will be loaded from\n                                    // ./src/my_own_folder/layout/Container.js\n    }\n\nNote that all relative paths are relative to the current HTML document.\nIf not being specified, for example, `Other.awesome.Class` will simply be\nloaded from `\"./Other/awesome/Class.js\"`.\n",
                "type": "Object",
                "src": {
                  "name": "0,163,30",
                  "text": "0,164,16,546",
                  "type": "0,163,22"
                }
              },
              {
                "$type": "property",
                "name": "preserveScripts",
                "text": "`false` to remove asynchronously loaded scripts, `true` to retain script\nelement for browser debugger compatibility and improved load performance.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,181,31",
                  "text": "0,182,16,147",
                  "type": "0,181,22"
                }
              },
              {
                "$type": "property",
                "name": "scriptChainDelay",
                "optional": true,
                "text": "millisecond delay between asynchronous script injection (prevents stack\noverflow on some user agents) 'false' disables delay but potentially\nincreases stack load.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,143,32",
                  "text": "0,144,16,163",
                  "type": "0,143,22",
                  "value": "0,143,49"
                }
              },
              {
                "$type": "property",
                "name": "scriptCharset",
                "text": "Optional charset to specify encoding of dynamic script content.\n",
                "type": "String",
                "src": {
                  "name": "0,188,30",
                  "text": "0,189,16,64",
                  "type": "0,188,22"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "addClassPathMappings",
                "text": "Sets a batch of path entries\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "paths",
                    "text": "a set of className: path mappings\n",
                    "type": "Object",
                    "src": {
                      "name": "0,394,28",
                      "text": "0,394,34,34",
                      "type": "0,394,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Loader",
                    "src": {
                      "text": "0,395,33,5",
                      "type": "0,395,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,397,0",
                  "text": "0,392,12,30"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addUsedClasses",
                "text": "Ensure that any classes referenced in the `uses` property are loaded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "classes",
                    "src": {
                      "name": "0,679,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,676,12",
                  "name": "0,679,0",
                  "text": "0,677,12,70"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "checkReady",
                "src": {
                  "access": "0,868,12",
                  "name": "0,870,0"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "flushMissingQueue",
                "src": {
                  "access": "0,848,12",
                  "name": "0,850,0"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Get the config value corresponding to the specified name. If no name is given, will return the config object\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The config property name\n",
                    "type": "String",
                    "src": {
                      "name": "0,367,28",
                      "text": "0,367,33,25",
                      "type": "0,367,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "0,368,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,370,0",
                  "text": "0,366,12,109"
                }
              },
              {
                "$type": "method",
                "name": "getPath",
                "text": "Translates a className to a file path by adding the\nthe proper prefix and converting the .'s to /'s. For example:\n\n    Ext.Loader.setPath('My', '/path/to/My');\n\n    alert(Ext.Loader.getPath('My.awesome.Class')); // alerts '/path/to/My/awesome/Class.js'\n\nNote that the deeper namespace levels, if explicitly set, are always resolved first. For example:\n\n    Ext.Loader.setPath({\n        'My': '/path/to/lib',\n        'My.awesome': '/other/path/for/awesome/stuff',\n        'My.awesome.more': '/more/awesome/path'\n    });\n\n    alert(Ext.Loader.getPath('My.awesome.Class')); // alerts '/other/path/for/awesome/stuff/Class.js'\n\n    alert(Ext.Loader.getPath('My.awesome.more.Class')); // alerts '/more/awesome/path/Class.js'\n\n    alert(Ext.Loader.getPath('My.cool.Class')); // alerts '/path/to/lib/cool/Class.js'\n\n    alert(Ext.Loader.getPath('Unknown.strange.Stuff')); // alerts 'Unknown/strange/Stuff.js'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "type": "String",
                    "src": {
                      "name": "0,441,28",
                      "type": "0,441,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "path\n",
                    "type": "String",
                    "src": {
                      "text": "0,442,29,5",
                      "type": "0,442,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,444,0",
                  "text": "0,418,12,902"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.Loader-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "historyPush",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "type": "String",
                    "src": {
                      "name": "0,742,28",
                      "type": "0,742,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,741,12",
                  "name": "0,744,0"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.Loader-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "loadScript",
                "text": "Loads the specified script URL and calls the supplied callbacks. If this method\nis called before <a href='#!/api/Ext-property-isReady'>Ext#isReady</a>, the script's load will delay the transition\nto ready. This can be used to load arbitrary scripts that may contain further\n<a href='#!/api/Ext-method-require'>Ext#require</a> calls.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object or simply the URL(s) to load.\n",
                    "type": "Object/String/String[]",
                    "items": [
                      {
                        "$type": "property",
                        "name": "url",
                        "text": "The URL from which to load the script.\n",
                        "type": "String",
                        "src": {
                          "name": "0,823,36",
                          "text": "0,823,40,39",
                          "type": "0,823,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onLoad",
                        "optional": true,
                        "text": "The callback to call on successful load.\n",
                        "type": "Function",
                        "src": {
                          "name": "0,824,39",
                          "text": "0,824,47,41",
                          "type": "0,824,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onError",
                        "optional": true,
                        "text": "The callback to call on failure to load.\n",
                        "type": "Function",
                        "src": {
                          "name": "0,825,39",
                          "text": "0,825,48,41",
                          "type": "0,825,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "scope",
                        "optional": true,
                        "text": "The scope (`this`) for the supplied callbacks.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,826,37",
                          "text": "0,826,44,47",
                          "type": "0,826,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,822,44",
                      "text": "0,822,52,49",
                      "type": "0,822,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,828,0",
                  "text": "0,817,12,280"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "loadScripts",
                "text": "This is an internal method that delegate content loading to the\nbootstrap layer.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "params",
                    "src": {
                      "name": "0,756,19"
                    }
                  }
                ],
                "src": {
                  "access": "0,755,12",
                  "name": "0,758,0",
                  "text": "0,753,12,81"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "loadScriptsSync",
                "text": "This method is provide for use by the bootstrap layer.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "urls",
                    "type": "String[]",
                    "src": {
                      "name": "0,795,30",
                      "type": "0,795,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,794,12",
                  "name": "0,797,0",
                  "text": "0,793,12,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "loadScriptsSyncBasePrefix",
                "text": "This method is provide for use by the bootstrap layer.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "urls",
                    "type": "String[]",
                    "src": {
                      "name": "0,807,30",
                      "type": "0,807,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,806,12",
                  "name": "0,809,0",
                  "text": "0,805,12,55"
                }
              },
              {
                "$type": "method",
                "name": "onReady",
                "text": "Add a new listener to be executed when all required scripts are fully loaded\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function callback to be executed\n",
                    "type": "Function",
                    "src": {
                      "name": "0,652,30",
                      "text": "0,652,33,37",
                      "type": "0,652,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "The execution scope (`this`) of the callback function.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,653,28",
                      "text": "0,653,34,55",
                      "type": "0,653,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "withDomReady",
                    "optional": true,
                    "text": "Pass `false` to not also wait for document\ndom ready.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,654,30",
                      "text": "0,654,49,43:0,655,12,11",
                      "type": "0,654,20",
                      "value": "0,654,43"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Additional callback options.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "delay",
                        "optional": true,
                        "text": "A number of milliseconds to delay.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "0,657,37",
                          "text": "0,657,46,35",
                          "type": "0,657,20",
                          "value": "0,657,43"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "Relative priority of this callback. Negative\nnumbers are reserved.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "0,658,37",
                          "text": "0,658,49,45:0,659,12,22",
                          "type": "0,658,20",
                          "value": "0,658,46"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,656,29",
                      "text": "0,656,38,29",
                      "type": "0,656,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,661,0",
                  "text": "0,650,12,78"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.Loader-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.Loader-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "setPath",
                "text": "Sets the path of a namespace.\nFor Example:\n\n    Ext.Loader.setPath('Ext', '.');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "See <a href='#!/api/Ext.Function-method-flexSetter'>Ext.Function#flexSetter</a>\n",
                    "type": "String/Object",
                    "src": {
                      "name": "0,380,35",
                      "text": "0,380,40,47",
                      "type": "0,380,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "path",
                    "optional": true,
                    "text": "See <a href='#!/api/Ext.Function-method-flexSetter'>Ext.Function#flexSetter</a>\n",
                    "type": "String",
                    "src": {
                      "name": "0,381,29",
                      "text": "0,381,35,47",
                      "type": "0,381,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Loader",
                    "src": {
                      "text": "0,382,33,5",
                      "type": "0,382,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,385,0",
                  "text": "0,375,12,81"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.Loader-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.Loader-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.Loader-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.Loader-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "triggerReady",
                "src": {
                  "access": "0,696,12",
                  "name": "0,698,0"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.Loader-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.Loader-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.Loader-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.Loader-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.Loader-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.Loader-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.Loader-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.Loader-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.Loader-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.Loader-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "classesLoading",
                "src": {
                  "access": "0,257,12",
                  "name": "0,259,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "config",
                "text": "Configuration\n",
                "src": {
                  "access": "0,224,12",
                  "name": "0,226,0",
                  "text": "0,223,12,14"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.Loader-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "hasFileLoadError",
                "src": {
                  "access": "0,246,13",
                  "name": "0,247,0"
                }
              },
              {
                "$type": "property",
                "name": "history",
                "text": "An array of class names to keep track of the dependency loading order.\nThis is not guaranteed to be the same everytime due to the asynchronous\nnature of the Loader.\n",
                "type": "Array",
                "src": {
                  "name": "0,218,30",
                  "text": "0,214,12,166",
                  "type": "0,218,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "isInHistory",
                "src": {
                  "access": "0,203,12",
                  "name": "0,205,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "isLoading",
                "text": "Flag indicating whether there are still files being loaded\n",
                "src": {
                  "access": "0,209,12",
                  "name": "0,211,0",
                  "text": "0,208,12,59"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "missingQueue",
                "src": {
                  "access": "0,269,12",
                  "name": "0,271,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "optionalRequires",
                "text": "Contains classes referenced in `uses` properties.\n",
                "src": {
                  "access": "0,236,12",
                  "name": "0,238,0",
                  "text": "0,235,12,50"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "readyListeners",
                "text": "Maintain the list of listeners to execute when all required scripts are fully loaded\n",
                "src": {
                  "access": "0,230,12",
                  "name": "0,232,0",
                  "text": "0,229,12,85"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "requiresMap",
                "text": "Map of fully qualified class names to an array of dependent classes.\n",
                "src": {
                  "access": "0,242,12",
                  "name": "0,244,0",
                  "text": "0,241,12,69"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "scriptsLoading",
                "text": "The number of scripts loading via loadScript.\n",
                "src": {
                  "access": "0,251,12",
                  "name": "0,253,0",
                  "text": "0,250,12,46"
                }
              },
              {
                "$type": "property",
                "name": "setConfig",
                "text": "Set the configuration for the loader. This should be called right after ext-(debug).js\nis included in the page, and before Ext.onReady. i.e:\n\n    <script type=\"text/javascript\" src=\"ext-core-debug.js\"></script>\n    <script type=\"text/javascript\">\n        Ext.Loader.setConfig({\n          enabled: true,\n          paths: {\n              'My': 'my_own_path'\n          }\n        });\n    </script>\n    <script type=\"text/javascript\">\n        Ext.require(...);\n\n        Ext.onReady(function() {\n          // application code here\n        });\n    </script>\n\nRefer to config options of <a href='#!/api/Ext.Loader'>Ext.Loader</a> for the list of possible properties\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The config object to override the default values\n",
                    "type": "Object",
                    "src": {
                      "name": "0,347,28",
                      "text": "0,347,35,49",
                      "type": "0,347,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Loader",
                    "src": {
                      "text": "0,348,33,5",
                      "type": "0,348,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,350,0",
                  "text": "0,325,12,635"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "syncModeEnabled",
                "src": {
                  "access": "0,263,12",
                  "name": "0,265,0"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,110,11",
          "singleton": "0,111,4",
          "text": "0,3,4,3541"
        }
      }
    ]
  },
  "version": 1
}