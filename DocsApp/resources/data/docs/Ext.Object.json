{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/lang/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Ext.Object",
        "singleton": true,
        "text": "\nA collection of useful static methods to deal with objects.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "chain",
                "text": "Returns a new object with the given object as the prototype chain. This method is\ndesigned to mimic the ECMA standard `Object.create` method and is assigned to that\nfunction when it is available.\n\n**NOTE** This method does not support the property definitions capability of the\n`Object.create` method. Only the first argument is supported.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The prototype chain for the new object.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,32,24",
                      "text": "0,32,31,40",
                      "type": "0,32,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,34,0",
                  "text": "0,25,8,341"
                }
              },
              {
                "$type": "method",
                "name": "clear",
                "text": "This method removes all keys from the given object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object from which to remove all keys.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,43,24",
                      "text": "0,43,31,42",
                      "type": "0,43,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The given object.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,44,25,18",
                      "type": "0,44,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,46,0",
                  "text": "0,42,8,52"
                }
              },
              {
                "$type": "method",
                "name": "freeze",
                "text": "Freezes the given object making it immutable. This operation is by default shallow\nand does not effect objects referenced by the given object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "text": "The object to freeze.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,60,24",
                      "text": "0,60,28,22",
                      "type": "0,60,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "Pass `true` to freeze sub-objects recursively.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,61,26",
                      "text": "0,61,38,47",
                      "type": "0,61,16",
                      "value": "0,61,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The given object `obj`.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,62,25,24",
                      "type": "0,62,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,64,0",
                  "text": "0,56,8,144"
                }
              },
              {
                "$type": "method",
                "name": "toQueryObjects",
                "text": "Converts a `name` - `value` pair to an array of objects with support for nested structures. Useful to construct\nquery strings. For example:\n\n    var objects = Ext.Object.toQueryObjects('hobbies', ['reading', 'cooking', 'swimming']);\n\n    // objects then equals:\n    [\n        { name: 'hobbies', value: 'reading' },\n        { name: 'hobbies', value: 'cooking' },\n        { name: 'hobbies', value: 'swimming' },\n    ];\n\n    var objects = Ext.Object.toQueryObjects('dateOfBirth', {\n        day: 3,\n        month: 8,\n        year: 1987,\n        extra: {\n            hour: 4\n            minute: 30\n        }\n    }, true); // Recursive\n\n    // objects then equals:\n    [\n        { name: 'dateOfBirth[day]', value: 3 },\n        { name: 'dateOfBirth[month]', value: 8 },\n        { name: 'dateOfBirth[year]', value: 1987 },\n        { name: 'dateOfBirth[extra][hour]', value: 4 },\n        { name: 'dateOfBirth[extra][minute]', value: 30 },\n    ];\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "0,109,24",
                      "type": "0,109,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object/Array",
                    "src": {
                      "name": "0,110,30",
                      "type": "0,110,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "True to traverse object recursively\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,111,26",
                      "text": "0,111,43,36",
                      "type": "0,111,16",
                      "value": "0,111,36"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object[]",
                    "src": {
                      "type": "0,112,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,114,0",
                  "text": "0,78,8,938"
                }
              },
              {
                "$type": "method",
                "name": "toQueryString",
                "text": "Takes an object and converts it to an encoded query string.\n\nNon-recursive:\n\n    Ext.Object.toQueryString({foo: 1, bar: 2}); // returns \"foo=1&bar=2\"\n    Ext.Object.toQueryString({foo: null, bar: 2}); // returns \"foo=&bar=2\"\n    Ext.Object.toQueryString({'some price': '$300'}); // returns \"some%20price=%24300\"\n    Ext.Object.toQueryString({date: new Date(2011, 0, 1)}); // returns \"date=%222011-01-01T00%3A00%3A00%22\"\n    Ext.Object.toQueryString({colors: ['red', 'green', 'blue']}); // returns \"colors=red&colors=green&colors=blue\"\n\nRecursive:\n\n    Ext.Object.toQueryString({\n        username: 'Jacky',\n        dateOfBirth: {\n            day: 1,\n            month: 2,\n            year: 1911\n        },\n        hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]\n    }, true); // returns the following string (broken down and url-decoded for ease of reading purpose):\n    // username=Jacky\n    //    &dateOfBirth[day]=1&dateOfBirth[month]=2&dateOfBirth[year]=1911\n    //    &hobbies[0]=coding&hobbies[1]=eating&hobbies[2]=sleeping&hobbies[3][0]=nested&hobbies[3][1]=stuff\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object to encode\n",
                    "type": "Object",
                    "src": {
                      "name": "0,183,24",
                      "text": "0,183,31,21",
                      "type": "0,183,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "Whether or not to interpret the object in recursive format.\n(PHP / Ruby on Rails servers and similar).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,184,26",
                      "text": "0,184,43,60:0,185,8,43",
                      "type": "0,184,16",
                      "value": "0,184,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "queryString\n",
                    "type": "String",
                    "src": {
                      "text": "0,186,25,12",
                      "type": "0,186,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,188,0",
                  "text": "0,158,8,1086"
                }
              },
              {
                "$type": "method",
                "name": "fromQueryString",
                "text": "Converts a query string back into an object.\n\nNon-recursive:\n\n    Ext.Object.fromQueryString(\"foo=1&bar=2\"); // returns {foo: '1', bar: '2'}\n    Ext.Object.fromQueryString(\"foo=&bar=2\"); // returns {foo: '', bar: '2'}\n    Ext.Object.fromQueryString(\"some%20price=%24300\"); // returns {'some price': '$300'}\n    Ext.Object.fromQueryString(\"colors=red&colors=green&colors=blue\"); // returns {colors: ['red', 'green', 'blue']}\n\nRecursive:\n\n    Ext.Object.fromQueryString(\n        \"username=Jacky&\"+\n        \"dateOfBirth[day]=1&dateOfBirth[month]=2&dateOfBirth[year]=1911&\"+\n        \"hobbies[0]=coding&hobbies[1]=eating&hobbies[2]=sleeping&\"+\n        \"hobbies[3][0]=nested&hobbies[3][1]=stuff\", true);\n\n    // returns\n    {\n        username: 'Jacky',\n        dateOfBirth: {\n            day: '1',\n            month: '2',\n            year: '1911'\n        },\n        hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queryString",
                    "text": "The query string to decode\n",
                    "type": "String",
                    "src": {
                      "name": "0,244,24",
                      "text": "0,244,36,27",
                      "type": "0,244,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "Whether or not to recursively decode the string. This format is supported by\nPHP / Ruby on Rails servers and similar.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,245,26",
                      "text": "0,245,43,77:0,246,8,41",
                      "type": "0,245,16",
                      "value": "0,245,36"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "0,247,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,249,0",
                  "text": "0,216,8,930"
                }
              },
              {
                "$type": "method",
                "name": "each",
                "text": "Iterates through an object and invokes the given callback function for each iteration.\nThe iteration can be stopped by returning `false` in the callback function. For example:\n\n    var person = {\n        name: 'Jacky'\n        hairColor: 'black'\n        loves: ['food', 'sleeping', 'wife']\n    };\n\n    Ext.Object.each(person, function(key, value, myself) {\n        console.log(key + \":\" + value);\n\n        if (key === 'hairColor') {\n            return false; // stop the iteration\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object to iterate\n",
                    "type": "Object",
                    "src": {
                      "name": "0,359,24",
                      "text": "0,359,31,22",
                      "type": "0,359,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The callback function.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "key",
                        "type": "String",
                        "src": {
                          "name": "0,361,27",
                          "type": "0,361,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "value",
                        "type": "Object",
                        "src": {
                          "name": "0,362,27",
                          "type": "0,362,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "object",
                        "text": "The object itself\n",
                        "type": "Object",
                        "src": {
                          "name": "0,363,27",
                          "text": "0,363,34,18",
                          "type": "0,363,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,360,26",
                      "text": "0,360,29,23",
                      "type": "0,360,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The execution scope (`this`) of the callback function\n",
                    "type": "Object",
                    "src": {
                      "name": "0,364,25",
                      "text": "0,364,32,54",
                      "type": "0,364,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,366,0",
                  "text": "0,342,8,499"
                }
              },
              {
                "$type": "method",
                "name": "eachValue",
                "text": "Iterates through an object and invokes the given callback function for each iteration.\nThe iteration can be stopped by returning `false` in the callback function. For example:\n\n    var items = {\n        1: 'Hello',\n        2: 'World'\n    };\n\n    Ext.Object.eachValue(items, function (value) {\n        console.log(\"Value: \" + value);\n    });\n\nThis will log 'Hello' and 'World' in no particular order. This method is useful\nin cases where the keys are not important to the processing, just the values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object to iterate\n",
                    "type": "Object",
                    "src": {
                      "name": "0,409,24",
                      "text": "0,409,31,22",
                      "type": "0,409,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The callback function.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "value",
                        "text": "The value of\n",
                        "type": "Object",
                        "src": {
                          "name": "0,411,27",
                          "text": "0,411,33,13",
                          "type": "0,411,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,410,26",
                      "text": "0,410,29,23",
                      "type": "0,410,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The execution scope (`this`) of the callback function\n",
                    "type": "Object",
                    "src": {
                      "name": "0,412,25",
                      "text": "0,412,32,54",
                      "type": "0,412,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,414,0",
                  "text": "0,394,8,501"
                }
              },
              {
                "$type": "method",
                "name": "merge",
                "text": "Merges any number of objects recursively without referencing them or their children.\n\n    var extjs = {\n        companyName: 'Ext JS',\n        products: ['Ext JS', 'Ext GWT', 'Ext Designer'],\n        isSuperCool: true,\n        office: {\n            size: 2000,\n            location: 'Palo Alto',\n            isFun: true\n        }\n    };\n\n    var newStuff = {\n        companyName: 'Sencha Inc.',\n        products: ['Ext JS', 'Ext GWT', 'Ext Designer', 'Sencha Touch', 'Sencha Animator'],\n        office: {\n            size: 40000,\n            location: 'Redwood City'\n        }\n    };\n\n    var sencha = Ext.Object.merge(extjs, newStuff);\n\n    // extjs and sencha then equals to\n    {\n        companyName: 'Sencha Inc.',\n        products: ['Ext JS', 'Ext GWT', 'Ext Designer', 'Sencha Touch', 'Sencha Animator'],\n        isSuperCool: true,\n        office: {\n            size: 40000,\n            location: 'Redwood City',\n            isFun: true\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "destination",
                    "text": "The object into which all subsequent objects are merged.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,476,24",
                      "text": "0,476,36,57",
                      "type": "0,476,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "Any number of objects to merge into the destination.\n",
                    "type": "Object...",
                    "src": {
                      "name": "0,477,27",
                      "text": "0,477,34,53",
                      "type": "0,477,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "merged The destination object with all passed objects merged in.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,478,25,65",
                      "type": "0,478,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,480,0",
                  "text": "0,440,8,960"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "mergeIf",
                "items": [
                  {
                    "$type": "param",
                    "name": "destination",
                    "src": {
                      "name": "0,510,15"
                    }
                  }
                ],
                "src": {
                  "access": "0,509,8",
                  "name": "0,512,0"
                }
              },
              {
                "$type": "method",
                "name": "getAllKeys",
                "text": "Returns all keys of the given object as an array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,541,24",
                      "type": "0,541,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of keys from the object or any of its prototypes.\n",
                    "type": "String[]",
                    "src": {
                      "text": "0,542,27,59",
                      "type": "0,542,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,545,0",
                  "text": "0,539,8,51"
                }
              },
              {
                "$type": "method",
                "name": "getKey",
                "text": "Returns the first matching key corresponding to the given value.\nIf no matching value is found, null is returned.\n\n    var person = {\n        name: 'Jacky',\n        loves: 'food'\n    };\n\n    alert(Ext.Object.getKey(person, 'food')); // alerts 'loves'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,567,24",
                      "type": "0,567,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to find\n",
                    "type": "Object",
                    "src": {
                      "name": "0,568,24",
                      "text": "0,568,30,18",
                      "type": "0,568,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,570,0",
                  "text": "0,557,8,252"
                }
              },
              {
                "$type": "method",
                "name": "getValues",
                "text": "Gets all values of the given object as an array.\n\n    var values = Ext.Object.getValues({\n        name: 'Jacky',\n        loves: 'food'\n    }); // ['Jacky', 'food']\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,588,24",
                      "type": "0,588,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of values from the object\n",
                    "type": "Array",
                    "src": {
                      "text": "0,589,24,35",
                      "type": "0,589,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,591,0",
                  "text": "0,581,8,165"
                }
              },
              {
                "$type": "method",
                "name": "getKeys",
                "text": "Returns the `hasOwnProperty` keys of the given object as an array.\n\n    var values = Ext.Object.getKeys({\n        name: 'Jacky',\n        loves: 'food'\n    }); // ['name', 'loves']\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,612,24",
                      "type": "0,612,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of keys from the object\n",
                    "type": "String[]",
                    "src": {
                      "text": "0,613,27,33",
                      "type": "0,613,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,616,0",
                  "text": "0,605,8,181"
                }
              },
              {
                "$type": "method",
                "name": "getSize",
                "text": "Gets the total number of this object's own properties\n\n    var size = Ext.Object.getSize({\n        name: 'Jacky',\n        loves: 'food'\n    }); // size equals 2\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,644,24",
                      "type": "0,644,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "size\n",
                    "type": "Number",
                    "src": {
                      "text": "0,645,25,5",
                      "type": "0,645,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,647,0",
                  "text": "0,637,8,162"
                }
              },
              {
                "$type": "method",
                "name": "isEmpty",
                "text": "Checks if there are any properties on this object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,662,24",
                      "type": "0,662,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if there no properties on the object.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,663,26,45",
                      "type": "0,663,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,665,0",
                  "text": "0,661,8,51"
                }
              },
              {
                "$type": "method",
                "name": "equals",
                "text": "Shallow compares the contents of 2 objects using strict equality. Objects are\nconsidered equal if they both have the same set of properties and the\nvalue for those properties equals the other in the corresponding object.\n\n    // Returns true\n    Ext.Object.equals({\n        foo: 1,\n        bar: 2\n    }, {\n        foo: 1,\n        bar: 2\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object1",
                    "type": "Object",
                    "src": {
                      "name": "0,689,24",
                      "type": "0,689,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object2",
                    "type": "Object",
                    "src": {
                      "name": "0,690,24",
                      "type": "0,690,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the objects are equal.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,691,26,33",
                      "type": "0,691,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,693,0",
                  "text": "0,676,8,346"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fork",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "src": {
                      "name": "0,727,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,725,8",
                  "name": "0,727,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "classify",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "src": {
                      "name": "0,768,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,766,8",
                  "name": "0,768,0"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,2,11",
          "singleton": "0,6,4",
          "text": "0,3,4,62"
        }
      }
    ]
  },
  "version": 1
}