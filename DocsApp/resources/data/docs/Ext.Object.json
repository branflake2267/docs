{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/lang/Object.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.Object",
        "singleton": true,
        "text": "\nA collection of useful static methods to deal with objects.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "chain",
                "text": "Returns a new object with the given object as the prototype chain. This method is\ndesigned to mimic the ECMA standard `Object.create` method and is assigned to that\nfunction when it is available.\n\n**NOTE** This method does not support the property definitions capability of the\n`Object.create` method. Only the first argument is supported.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The prototype chain for the new object.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,32,24",
                      "text": "0,32,31,40",
                      "type": "0,32,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,34,0",
                  "text": "0,25,8,341"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "classify",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "src": {
                      "name": "0,768,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,766,8",
                  "name": "0,768,0"
                }
              },
              {
                "$type": "method",
                "name": "clear",
                "text": "This method removes all keys from the given object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object from which to remove all keys.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,43,24",
                      "text": "0,43,31,42",
                      "type": "0,43,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The given object.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,44,25,18",
                      "type": "0,44,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,46,0",
                  "text": "0,42,8,52"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "each",
                "text": "Iterates through an object and invokes the given callback function for each iteration.\nThe iteration can be stopped by returning `false` in the callback function. For example:\n\n    var person = {\n        name: 'Jacky'\n        hairColor: 'black'\n        loves: ['food', 'sleeping', 'wife']\n    };\n\n    Ext.Object.each(person, function(key, value, myself) {\n        console.log(key + \":\" + value);\n\n        if (key === 'hairColor') {\n            return false; // stop the iteration\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object to iterate\n",
                    "type": "Object",
                    "src": {
                      "name": "0,359,24",
                      "text": "0,359,31,22",
                      "type": "0,359,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The callback function.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "key",
                        "type": "String",
                        "src": {
                          "name": "0,361,27",
                          "type": "0,361,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "value",
                        "type": "Object",
                        "src": {
                          "name": "0,362,27",
                          "type": "0,362,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "object",
                        "text": "The object itself\n",
                        "type": "Object",
                        "src": {
                          "name": "0,363,27",
                          "text": "0,363,34,18",
                          "type": "0,363,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,360,26",
                      "text": "0,360,29,23",
                      "type": "0,360,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The execution scope (`this`) of the callback function\n",
                    "type": "Object",
                    "src": {
                      "name": "0,364,25",
                      "text": "0,364,32,54",
                      "type": "0,364,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,366,0",
                  "text": "0,342,8,499"
                }
              },
              {
                "$type": "method",
                "name": "eachValue",
                "text": "Iterates through an object and invokes the given callback function for each iteration.\nThe iteration can be stopped by returning `false` in the callback function. For example:\n\n    var items = {\n        1: 'Hello',\n        2: 'World'\n    };\n\n    Ext.Object.eachValue(items, function (value) {\n        console.log(\"Value: \" + value);\n    });\n\nThis will log 'Hello' and 'World' in no particular order. This method is useful\nin cases where the keys are not important to the processing, just the values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object to iterate\n",
                    "type": "Object",
                    "src": {
                      "name": "0,409,24",
                      "text": "0,409,31,22",
                      "type": "0,409,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The callback function.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "value",
                        "text": "The value of\n",
                        "type": "Object",
                        "src": {
                          "name": "0,411,27",
                          "text": "0,411,33,13",
                          "type": "0,411,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,410,26",
                      "text": "0,410,29,23",
                      "type": "0,410,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The execution scope (`this`) of the callback function\n",
                    "type": "Object",
                    "src": {
                      "name": "0,412,25",
                      "text": "0,412,32,54",
                      "type": "0,412,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,414,0",
                  "text": "0,394,8,501"
                }
              },
              {
                "$type": "method",
                "name": "equals",
                "text": "Shallow compares the contents of 2 objects using strict equality. Objects are\nconsidered equal if they both have the same set of properties and the\nvalue for those properties equals the other in the corresponding object.\n\n    // Returns true\n    Ext.Object.equals({\n        foo: 1,\n        bar: 2\n    }, {\n        foo: 1,\n        bar: 2\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object1",
                    "type": "Object",
                    "src": {
                      "name": "0,689,24",
                      "type": "0,689,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object2",
                    "type": "Object",
                    "src": {
                      "name": "0,690,24",
                      "type": "0,690,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the objects are equal.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,691,26,33",
                      "type": "0,691,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,693,0",
                  "text": "0,676,8,346"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fork",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "src": {
                      "name": "0,727,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,725,8",
                  "name": "0,727,0"
                }
              },
              {
                "$type": "method",
                "name": "freeze",
                "text": "Freezes the given object making it immutable. This operation is by default shallow\nand does not effect objects referenced by the given object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "text": "The object to freeze.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,60,24",
                      "text": "0,60,28,22",
                      "type": "0,60,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "Pass `true` to freeze sub-objects recursively.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,61,26",
                      "text": "0,61,38,47",
                      "type": "0,61,16",
                      "value": "0,61,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The given object `obj`.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,62,25,24",
                      "type": "0,62,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,64,0",
                  "text": "0,56,8,144"
                }
              },
              {
                "$type": "method",
                "name": "fromQueryString",
                "text": "Converts a query string back into an object.\n\nNon-recursive:\n\n    Ext.Object.fromQueryString(\"foo=1&bar=2\"); // returns {foo: '1', bar: '2'}\n    Ext.Object.fromQueryString(\"foo=&bar=2\"); // returns {foo: '', bar: '2'}\n    Ext.Object.fromQueryString(\"some%20price=%24300\"); // returns {'some price': '$300'}\n    Ext.Object.fromQueryString(\"colors=red&colors=green&colors=blue\"); // returns {colors: ['red', 'green', 'blue']}\n\nRecursive:\n\n    Ext.Object.fromQueryString(\n        \"username=Jacky&\"+\n        \"dateOfBirth[day]=1&dateOfBirth[month]=2&dateOfBirth[year]=1911&\"+\n        \"hobbies[0]=coding&hobbies[1]=eating&hobbies[2]=sleeping&\"+\n        \"hobbies[3][0]=nested&hobbies[3][1]=stuff\", true);\n\n    // returns\n    {\n        username: 'Jacky',\n        dateOfBirth: {\n            day: '1',\n            month: '2',\n            year: '1911'\n        },\n        hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queryString",
                    "text": "The query string to decode\n",
                    "type": "String",
                    "src": {
                      "name": "0,244,24",
                      "text": "0,244,36,27",
                      "type": "0,244,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "Whether or not to recursively decode the string. This format is supported by\nPHP / Ruby on Rails servers and similar.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,245,26",
                      "text": "0,245,43,77:0,246,8,41",
                      "type": "0,245,16",
                      "value": "0,245,36"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "0,247,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,249,0",
                  "text": "0,216,8,930"
                }
              },
              {
                "$type": "method",
                "name": "getAllKeys",
                "text": "Returns all keys of the given object as an array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,541,24",
                      "type": "0,541,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of keys from the object or any of its prototypes.\n",
                    "type": "String[]",
                    "src": {
                      "text": "0,542,27,59",
                      "type": "0,542,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,545,0",
                  "text": "0,539,8,51"
                }
              },
              {
                "$type": "method",
                "name": "getKey",
                "text": "Returns the first matching key corresponding to the given value.\nIf no matching value is found, null is returned.\n\n    var person = {\n        name: 'Jacky',\n        loves: 'food'\n    };\n\n    alert(Ext.Object.getKey(person, 'food')); // alerts 'loves'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,567,24",
                      "type": "0,567,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to find\n",
                    "type": "Object",
                    "src": {
                      "name": "0,568,24",
                      "text": "0,568,30,18",
                      "type": "0,568,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,570,0",
                  "text": "0,557,8,252"
                }
              },
              {
                "$type": "method",
                "name": "getKeys",
                "text": "Returns the <a href='#!/api/Ext.Object-method-hasOwnProperty'>hasOwnProperty</a> keys of the given object as an array.\n\n    var values = Ext.Object.getKeys({\n        name: 'Jacky',\n        loves: 'food'\n    }); // ['name', 'loves']\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,612,24",
                      "type": "0,612,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of keys from the object\n",
                    "type": "String[]",
                    "src": {
                      "text": "0,613,27,33",
                      "type": "0,613,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,616,0",
                  "text": "0,605,8,181"
                }
              },
              {
                "$type": "method",
                "name": "getSize",
                "text": "Gets the total number of this object's own properties\n\n    var size = Ext.Object.getSize({\n        name: 'Jacky',\n        loves: 'food'\n    }); // size equals 2\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,644,24",
                      "type": "0,644,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "size\n",
                    "type": "Number",
                    "src": {
                      "text": "0,645,25,5",
                      "type": "0,645,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,647,0",
                  "text": "0,637,8,162"
                }
              },
              {
                "$type": "method",
                "name": "getValues",
                "text": "Gets all values of the given object as an array.\n\n    var values = Ext.Object.getValues({\n        name: 'Jacky',\n        loves: 'food'\n    }); // ['Jacky', 'food']\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,588,24",
                      "type": "0,588,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of values from the object\n",
                    "type": "Array",
                    "src": {
                      "text": "0,589,24,35",
                      "type": "0,589,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,591,0",
                  "text": "0,581,8,165"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.Object-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isEmpty",
                "text": "Checks if there are any properties on this object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,662,24",
                      "type": "0,662,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if there no properties on the object.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,663,26,45",
                      "type": "0,663,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,665,0",
                  "text": "0,661,8,51"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.Object-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "merge",
                "text": "Merges any number of objects recursively without referencing them or their children.\n\n    var extjs = {\n        companyName: 'Ext JS',\n        products: ['Ext JS', 'Ext GWT', 'Ext Designer'],\n        isSuperCool: true,\n        office: {\n            size: 2000,\n            location: 'Palo Alto',\n            isFun: true\n        }\n    };\n\n    var newStuff = {\n        companyName: 'Sencha Inc.',\n        products: ['Ext JS', 'Ext GWT', 'Ext Designer', 'Sencha Touch', 'Sencha Animator'],\n        office: {\n            size: 40000,\n            location: 'Redwood City'\n        }\n    };\n\n    var sencha = Ext.Object.merge(extjs, newStuff);\n\n    // extjs and sencha then equals to\n    {\n        companyName: 'Sencha Inc.',\n        products: ['Ext JS', 'Ext GWT', 'Ext Designer', 'Sencha Touch', 'Sencha Animator'],\n        isSuperCool: true,\n        office: {\n            size: 40000,\n            location: 'Redwood City',\n            isFun: true\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "destination",
                    "text": "The object into which all subsequent objects are merged.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,476,24",
                      "text": "0,476,36,57",
                      "type": "0,476,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "Any number of objects to merge into the destination.\n",
                    "type": "Object...",
                    "src": {
                      "name": "0,477,27",
                      "text": "0,477,34,53",
                      "type": "0,477,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "merged The destination object with all passed objects merged in.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,478,25,65",
                      "type": "0,478,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,480,0",
                  "text": "0,440,8,960"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "mergeIf",
                "items": [
                  {
                    "$type": "param",
                    "name": "destination",
                    "src": {
                      "name": "0,510,15"
                    }
                  }
                ],
                "src": {
                  "access": "0,509,8",
                  "name": "0,512,0"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.Object-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.Object-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.Object-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.Object-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.Object-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.Object-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toQueryObjects",
                "text": "Converts a `name` - `value` pair to an array of objects with support for nested structures. Useful to construct\nquery strings. For example:\n\n    var objects = Ext.Object.toQueryObjects('hobbies', ['reading', 'cooking', 'swimming']);\n\n    // objects then equals:\n    [\n        { name: 'hobbies', value: 'reading' },\n        { name: 'hobbies', value: 'cooking' },\n        { name: 'hobbies', value: 'swimming' },\n    ];\n\n    var objects = Ext.Object.toQueryObjects('dateOfBirth', {\n        day: 3,\n        month: 8,\n        year: 1987,\n        extra: {\n            hour: 4\n            minute: 30\n        }\n    }, true); // Recursive\n\n    // objects then equals:\n    [\n        { name: 'dateOfBirth[day]', value: 3 },\n        { name: 'dateOfBirth[month]', value: 8 },\n        { name: 'dateOfBirth[year]', value: 1987 },\n        { name: 'dateOfBirth[extra][hour]', value: 4 },\n        { name: 'dateOfBirth[extra][minute]', value: 30 },\n    ];\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "0,109,24",
                      "type": "0,109,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object/Array",
                    "src": {
                      "name": "0,110,30",
                      "type": "0,110,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "True to traverse object recursively\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,111,26",
                      "text": "0,111,43,36",
                      "type": "0,111,16",
                      "value": "0,111,36"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object[]",
                    "src": {
                      "type": "0,112,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,114,0",
                  "text": "0,78,8,938"
                }
              },
              {
                "$type": "method",
                "name": "toQueryString",
                "text": "Takes an object and converts it to an encoded query string.\n\nNon-recursive:\n\n    Ext.Object.toQueryString({foo: 1, bar: 2}); // returns \"foo=1&bar=2\"\n    Ext.Object.toQueryString({foo: null, bar: 2}); // returns \"foo=&bar=2\"\n    Ext.Object.toQueryString({'some price': '$300'}); // returns \"some%20price=%24300\"\n    Ext.Object.toQueryString({date: new Date(2011, 0, 1)}); // returns \"date=%222011-01-01T00%3A00%3A00%22\"\n    Ext.Object.toQueryString({colors: ['red', 'green', 'blue']}); // returns \"colors=red&colors=green&colors=blue\"\n\nRecursive:\n\n    Ext.Object.toQueryString({\n        username: 'Jacky',\n        dateOfBirth: {\n            day: 1,\n            month: 2,\n            year: 1911\n        },\n        hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]\n    }, true); // returns the following string (broken down and url-decoded for ease of reading purpose):\n    // username=Jacky\n    //    &dateOfBirth[day]=1&dateOfBirth[month]=2&dateOfBirth[year]=1911\n    //    &hobbies[0]=coding&hobbies[1]=eating&hobbies[2]=sleeping&hobbies[3][0]=nested&hobbies[3][1]=stuff\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object to encode\n",
                    "type": "Object",
                    "src": {
                      "name": "0,183,24",
                      "text": "0,183,31,21",
                      "type": "0,183,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "Whether or not to interpret the object in recursive format.\n(PHP / Ruby on Rails servers and similar).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,184,26",
                      "text": "0,184,43,60:0,185,8,43",
                      "type": "0,184,16",
                      "value": "0,184,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "queryString\n",
                    "type": "String",
                    "src": {
                      "text": "0,186,25,12",
                      "type": "0,186,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,188,0",
                  "text": "0,158,8,1086"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.Object-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.Object-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.Object-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.Object-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.Object-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.Object-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.Object-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.Object-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.Object-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.Object-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.Object-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,2,11",
          "singleton": "0,6,4",
          "text": "0,3,4,62"
        }
      }
    ]
  },
  "version": 1
}