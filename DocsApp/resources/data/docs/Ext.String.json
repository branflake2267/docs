{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/lang/String.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.String",
        "singleton": true,
        "text": "\nA collection of useful static methods to deal with strings.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "addCharacterEntities",
                "text": "Adds a set of character entity definitions to the set used by\n{@link Ext.String#method!htmlEncode Ext.String#htmlEncode} and {@link Ext.String#method!htmlDecode Ext.String#htmlDecode}.\n\nThis object should be keyed by the entity name sequence,\nwith the value being the textual representation of the entity.\n\n     Ext.String.addCharacterEntities({\n         '&amp;Uuml;':'Ü',\n         '&amp;ccedil;':'ç',\n         '&amp;ntilde;':'ñ',\n         '&amp;egrave;':'è'\n     });\n     var s = Ext.String.htmlEncode(\"A string with entities: èÜçñ\");\n\n__Note:__ the values of the character entities defined on this object are expected\nto be single character values.  As such, the actual values represented by the\ncharacters are sensitive to the character encoding of the JavaScript source\nfile when defined in string literal form. Script tags referencing server\nresources with character entities must ensure that the 'charset' attribute\nof the script node is consistent with the actual character encoding of the\nserver resource.\n\nThe set of character entities may be reset back to the default state by using\nthe {@link Ext.String#method!resetCharacterEntities Ext.String#resetCharacterEntities} method\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newEntities",
                    "text": "The set of character entities to add to the current\ndefinitions.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,191,28",
                      "text": "0,191,40,52:0,192,12,13",
                      "type": "0,191,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,194,0",
                  "text": "0,166,12,1089"
                }
              },
              {
                "$type": "method",
                "name": "capitalize",
                "text": "Capitalize the first letter of the given string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "string",
                    "type": "String",
                    "src": {
                      "name": "0,261,28",
                      "type": "0,261,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,262,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,264,0",
                  "text": "0,260,12,49"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "createRegex",
                "since": "5.0.0",
                "text": "Creates a `{@link RegExp}` given a string `value` and optional flags. For example, the\nfollowing two regular expressions are equivalent.\n\n     var regex1 = Ext.String.createRegex('hello');\n\n     var regex2 = /^hello$/i;\n\nThe following two regular expressions are also equivalent:\n\n     var regex1 = Ext.String.createRegex('world', false, false, false);\n\n     var regex2 = /world/;\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The String to convert to a `{@link RegExp}`.\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "0,327,35",
                      "text": "0,327,41,37",
                      "type": "0,327,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startsWith",
                    "optional": true,
                    "text": "Pass `false` to allow a match to start\nanywhere in the string. By default the `value` will match only at the start\nof the string.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,328,30",
                      "text": "0,328,47,39:0,329,12,91",
                      "type": "0,328,20",
                      "value": "0,328,41"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "endsWith",
                    "optional": true,
                    "text": "Pass `false` to allow the match to end before\nthe end of the string. By default the `value` will match only at the end of the\nstring.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,331,30",
                      "text": "0,331,45,46:0,332,12,88",
                      "type": "0,331,20",
                      "value": "0,331,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ignoreCase",
                    "optional": true,
                    "text": "Pass `false` to make the `{@link RegExp}` case\nsensitive (removes the 'i' flag).\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,334,30",
                      "text": "0,334,47,39:0,335,12,34",
                      "type": "0,334,20",
                      "value": "0,334,41"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "RegExp",
                    "src": {
                      "type": "0,337,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,339,0",
                  "since": "0,336,19",
                  "text": "0,314,12,374"
                }
              },
              {
                "$type": "method",
                "name": "createVarName",
                "text": "Converts a string of characters into a legal, parse-able JavaScript `var` name as long as the passed\nstring contains at least one alphabetic character. Non alphanumeric characters, and *leading* non alphabetic\ncharacters will be removed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "A string to be converted into a `var` name.\n",
                    "type": "String",
                    "src": {
                      "name": "0,128,28",
                      "text": "0,128,30,44",
                      "type": "0,128,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A legal JavaScript `var` name.\n",
                    "type": "String",
                    "src": {
                      "text": "0,129,29,31",
                      "type": "0,129,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,131,0",
                  "text": "0,125,12,238"
                }
              },
              {
                "$type": "method",
                "name": "ellipsis",
                "text": "Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The string to truncate.\n",
                    "type": "String",
                    "src": {
                      "name": "0,285,28",
                      "text": "0,285,34,24",
                      "type": "0,285,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "length",
                    "text": "The maximum length to allow before truncating.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,286,28",
                      "text": "0,286,35,47",
                      "type": "0,286,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "word",
                    "optional": true,
                    "text": "`true` to try to find a common word break.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,287,30",
                      "text": "0,287,42,43",
                      "type": "0,287,20",
                      "value": "0,287,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The converted text.\n",
                    "type": "String",
                    "src": {
                      "text": "0,288,29,20",
                      "type": "0,288,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,290,0",
                  "text": "0,284,12,93"
                }
              },
              {
                "$type": "method",
                "name": "endsWith",
                "text": "Checks if a string ends with a substring\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "The original string\n",
                    "type": "String",
                    "src": {
                      "name": "0,107,28",
                      "text": "0,107,30,20",
                      "type": "0,107,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "text": "The substring to check\n",
                    "type": "String",
                    "src": {
                      "name": "0,108,28",
                      "text": "0,108,32,23",
                      "type": "0,108,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ignoreCase",
                    "optional": true,
                    "text": "True to ignore the case in the comparison\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,109,30",
                      "text": "0,109,48,42",
                      "type": "0,109,20",
                      "value": "0,109,41"
                    }
                  }
                ],
                "src": {
                  "name": "0,111,0",
                  "text": "0,106,12,41"
                }
              },
              {
                "$type": "method",
                "name": "escape",
                "text": "Escapes the passed string for ' and \\.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "string",
                    "text": "The string to escape.\n",
                    "type": "String",
                    "src": {
                      "name": "0,360,28",
                      "text": "0,360,35,22",
                      "type": "0,360,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The escaped string.\n",
                    "type": "String",
                    "src": {
                      "text": "0,361,29,20",
                      "type": "0,361,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,363,0",
                  "text": "0,359,12,39"
                }
              },
              {
                "$type": "method",
                "name": "escapeRegex",
                "text": "Escapes the passed string for use in a regular expression.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "string",
                    "text": "The string to escape.\n",
                    "type": "String",
                    "src": {
                      "name": "0,306,28",
                      "text": "0,306,35,22",
                      "type": "0,306,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The escaped string.\n",
                    "type": "String",
                    "src": {
                      "text": "0,307,29,20",
                      "type": "0,307,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,309,0",
                  "text": "0,305,12,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasHtmlCharacters",
                "text": "Checks if a string has values needing to be html encoded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "The string to test\n",
                    "type": "String",
                    "src": {
                      "name": "0,158,28",
                      "text": "0,158,30,19",
                      "type": "0,158,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the string contains HTML characters\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,159,30,46",
                      "type": "0,159,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,157,12",
                  "name": "0,161,0",
                  "text": "0,156,12,58"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "htmlDecode",
                "text": "Convert certain characters (&, <, >, ', and \") from their HTML character equivalents.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The string to decode.\n",
                    "type": "String",
                    "src": {
                      "name": "0,147,28",
                      "text": "0,147,34,22",
                      "type": "0,147,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The decoded text.\n",
                    "type": "String",
                    "src": {
                      "text": "0,148,29,18",
                      "type": "0,148,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,151,0",
                  "text": "0,146,12,86"
                }
              },
              {
                "$type": "method",
                "name": "htmlEncode",
                "text": "Convert certain characters (&, <, >, ', and \") to their HTML character equivalents for literal display in web pages.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The string to encode.\n",
                    "type": "String",
                    "src": {
                      "name": "0,137,28",
                      "text": "0,137,34,22",
                      "type": "0,137,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The encoded text.\n",
                    "type": "String",
                    "src": {
                      "text": "0,138,29,18",
                      "type": "0,138,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,141,0",
                  "text": "0,136,12,117"
                }
              },
              {
                "$type": "method",
                "name": "insert",
                "text": "Inserts a substring into a string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "The original string.\n",
                    "type": "String",
                    "src": {
                      "name": "0,42,28",
                      "text": "0,42,30,21",
                      "type": "0,42,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The substring to insert.\n",
                    "type": "String",
                    "src": {
                      "name": "0,43,28",
                      "text": "0,43,34,25",
                      "type": "0,43,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index to insert the substring. Negative indexes will insert from the end of\nthe string. Example:\n\n    Ext.String.insert(\"abcdefg\", \"h\", -1); // abcdefhg\n",
                    "type": "Number",
                    "src": {
                      "name": "0,44,28",
                      "text": "0,44,34,80:0,45,12,78",
                      "type": "0,44,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value with the inserted substring\n",
                    "type": "String",
                    "src": {
                      "text": "0,49,29,38",
                      "type": "0,49,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,51,0",
                  "text": "0,41,12,35"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "leftPad",
                "text": "Pads the left side of a string with a specified character.  This is especially useful\nfor normalizing number and date strings.  Example usage:\n\n    var s = Ext.String.leftPad('123', 5, '0');\n    // s now contains the string: '00123'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "string",
                    "text": "The original string.\n",
                    "type": "String",
                    "src": {
                      "name": "0,395,28",
                      "text": "0,395,35,21",
                      "type": "0,395,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "text": "The total length of the output string.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,396,28",
                      "text": "0,396,33,39",
                      "type": "0,396,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "character",
                    "optional": true,
                    "text": "(optional) The character with which to pad the original string.\n",
                    "type": "String",
                    "value": "' '",
                    "src": {
                      "name": "0,397,29",
                      "text": "0,397,44,64",
                      "type": "0,397,20",
                      "value": "0,397,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The padded string.\n",
                    "type": "String",
                    "src": {
                      "text": "0,398,29,19",
                      "type": "0,398,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,400,0",
                  "text": "0,389,12,234"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "repeat",
                "text": "Returns a string with a specified number of repetitions a given string pattern.\nThe pattern be separated by a different string.\n\n     var s = Ext.String.repeat('---', 4); // = '------------'\n     var t = Ext.String.repeat('--', 3, '/'); // = '--/--/--'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pattern",
                    "text": "The pattern to repeat.\n",
                    "type": "String",
                    "src": {
                      "name": "0,416,28",
                      "text": "0,416,36,23",
                      "type": "0,416,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "count",
                    "text": "The number of times to repeat the pattern (may be 0).\n",
                    "type": "Number",
                    "src": {
                      "name": "0,417,28",
                      "text": "0,417,34,54",
                      "type": "0,417,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sep",
                    "text": "An option string to separate each pattern.\n",
                    "type": "String",
                    "src": {
                      "name": "0,418,28",
                      "text": "0,418,32,43",
                      "type": "0,418,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,420,0",
                  "text": "0,410,12,254"
                }
              },
              {
                "$type": "method",
                "name": "resetCharacterEntities",
                "text": "Resets the set of character entity definitions used by\n{@link Ext.String#method!htmlEncode Ext.String#htmlEncode} and {@link Ext.String#method!htmlDecode Ext.String#htmlDecode} back to the\ndefault state.\n",
                "src": {
                  "name": "0,214,0",
                  "text": "0,210,12,146"
                }
              },
              {
                "$type": "method",
                "name": "splitWords",
                "text": "Splits a string of space separated words into an array, trimming as needed. If the\nwords are already an array, it is returned.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "words",
                    "type": "String/Array",
                    "src": {
                      "name": "0,434,34",
                      "type": "0,434,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,436,0",
                  "text": "0,431,12,128"
                }
              },
              {
                "$type": "method",
                "name": "startsWith",
                "text": "Checks if a string starts with a substring\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "The original string\n",
                    "type": "String",
                    "src": {
                      "name": "0,88,28",
                      "text": "0,88,30,20",
                      "type": "0,88,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "text": "The substring to check\n",
                    "type": "String",
                    "src": {
                      "name": "0,89,28",
                      "text": "0,89,34,23",
                      "type": "0,89,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ignoreCase",
                    "optional": true,
                    "text": "True to ignore the case in the comparison\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,90,30",
                      "text": "0,90,48,42",
                      "type": "0,90,20",
                      "value": "0,90,41"
                    }
                  }
                ],
                "src": {
                  "name": "0,92,0",
                  "text": "0,87,12,43"
                }
              },
              {
                "$type": "method",
                "name": "toggle",
                "text": "Utility function that allows you to easily switch a string between two alternating values.  The passed value\nis compared to the current string, and if they are equal, the other value that was passed in is returned.  If\nthey are already different, the first value passed in is returned.  Note that this method returns the new value\nbut does not change the current string.\n\n    // alternate sort directions\n    sort = Ext.String.toggle(sort, 'ASC', 'DESC');\n\n    // instead of conditional logic:\n    sort = (sort === 'ASC' ? 'DESC' : 'ASC');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "string",
                    "text": "The current string.\n",
                    "type": "String",
                    "src": {
                      "name": "0,379,28",
                      "text": "0,379,35,20",
                      "type": "0,379,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to compare to the current string.\n",
                    "type": "String",
                    "src": {
                      "name": "0,380,28",
                      "text": "0,380,34,44",
                      "type": "0,380,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "other",
                    "text": "The new value to use if the string already equals the first value passed in.\n",
                    "type": "String",
                    "src": {
                      "name": "0,381,28",
                      "text": "0,381,34,77",
                      "type": "0,381,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new value.\n",
                    "type": "String",
                    "src": {
                      "text": "0,382,29,15",
                      "type": "0,382,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,384,0",
                  "text": "0,368,12,541"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "trim",
                "text": "Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:\n\n    var s = '  foo bar  ';\n    alert('-' + s + '-');                   //alerts \"- foo bar -\"\n    alert('-' + Ext.String.trim(s) + '-');  //alerts \"-foo bar-\"\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "string",
                    "text": "The string to trim.\n",
                    "type": "String",
                    "src": {
                      "name": "0,249,28",
                      "text": "0,249,35,20",
                      "type": "0,249,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The trimmed string.\n",
                    "type": "String",
                    "src": {
                      "text": "0,250,29,20",
                      "type": "0,250,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,252,0",
                  "text": "0,243,12,258"
                }
              },
              {
                "$type": "method",
                "name": "uncapitalize",
                "text": "Uncapitalize the first letter of a given string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "string",
                    "type": "String",
                    "src": {
                      "name": "0,273,28",
                      "type": "0,273,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,274,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,276,0",
                  "text": "0,272,12,49"
                }
              },
              {
                "$type": "method",
                "name": "urlAppend",
                "text": "Appends content to the query string of a URL, handling logic for whether to place\na question mark or ampersand.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "url",
                    "text": "The URL to append to.\n",
                    "type": "String",
                    "src": {
                      "name": "0,230,28",
                      "text": "0,230,32,22",
                      "type": "0,230,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "string",
                    "text": "The content to append to the URL.\n",
                    "type": "String",
                    "src": {
                      "name": "0,231,28",
                      "text": "0,231,35,34",
                      "type": "0,231,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The resulting URL\n",
                    "type": "String",
                    "src": {
                      "text": "0,232,29,18",
                      "type": "0,232,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,234,0",
                  "text": "0,228,12,112"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,2,11",
          "singleton": "0,5,4",
          "text": "0,3,4,61"
        }
      }
    ]
  },
  "version": 1
}