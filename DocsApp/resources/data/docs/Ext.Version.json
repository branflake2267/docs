{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/Version.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.Version",
        "text": "\nA utility class that wraps around a version number string and provides convenient methods\nto perform comparisons. A version number is expressed in the following general format:\n\n    major[.minor[.patch[.build[release]]]]\n\nThe `Version` instance holds various readonly properties that contain the digested form\nof the version string. The numeric componnets of <a href='#!/api/Ext.Version-property-major'>major</a>, <a href='#!/api/Ext.Version-property-minor'>minor</a>, <a href='#!/api/Ext.Version-property-patch'>patch</a> and <a href='#!/api/Ext.Version-property-build'>build</a>\nas well as the textual suffix called <a href='#!/api/Ext.Version-property-release'>release</a>.\n\nNot depicted in the above syntax are three possible prefixes used to control partial\nmatching. These are '^' (the default), '>' and '~'. These are discussed below.\n\nExamples:\n\n    var version = new Ext.Version('1.0.2beta'); // or maybe \"1.0\" or \"1.2.3.4RC\"\n    console.log(\"Version is \" + version); // Version is 1.0.2beta\n\n    console.log(version.getMajor()); // 1\n    console.log(version.getMinor()); // 0\n    console.log(version.getPatch()); // 2\n    console.log(version.getBuild()); // 0\n    console.log(version.getRelease()); // beta\n\nThe understood values of <a href='#!/api/Ext.Version-property-release'>release</a> are assigned numberic equivalents for the sake of\ncomparsion. The order of these from smallest to largest is as follows:\n\n * `\"dev\"`\n * `\"alpha\"` or `\"a\"`\n * `\"beta\"` or `\"b\"`\n * `\"RC\"` or `\"rc\"`\n * `\"#\"`\n * `\"pl\"` or `\"p\"`\n\nAny other (unrecognized) suffix is consider greater than any of these.\n\n## Comparisons\nThere are two forms of comparison that are commonly needed: full and partial. Full\ncomparison is simpler and is also the default.\n\nExample:\n\n    var version = new Ext.Version('1.0.2beta');\n\n    console.log(version.isGreaterThan('1.0.1')); // True\n    console.log(version.isGreaterThan('1.0.2alpha')); // True\n    console.log(version.isGreaterThan('1.0.2RC')); // False\n    console.log(version.isGreaterThan('1.0.2')); // False\n    console.log(version.isLessThan('1.0.2')); // True\n\n    console.log(version.match(1.0)); // True (using a Number)\n    console.log(version.match('1.0.2')); // True (using a String)\n\nThese comparisons are ultimately implemented by <a href='#!/api/Ext.Version-method-compareTo'>Ext.Version#compareTo</a>\nwhich returns -1, 0 or 1 depending on whether the `Version' instance is less than, equal\nto, or greater than the given \"other\" version.\n\nFor example:\n\n     var n = version.compareTo('1.0.1');  // == 1  (because 1.0.2beta > 1.0.1)\n\n     n = version.compareTo('1.1');  // == -1\n     n = version.compareTo(version); // == 0\n\n### Partial Comparisons\nBy default, unspecified version number fields are filled with 0. In other words, the\nversion number fields are 0-padded on the right or a \"lower bound\". This produces the\nmost commonly used forms of comparsion:\n\n     var ver = new Version('4.2');\n\n     n = ver.compareTo('4.2.1'); // == -1  (4.2 promotes to 4.2.0 and is less than 4.2.1)\n\nThere are two other ways to interpret comparisons of versions of different length. The\nfirst of these is to change the padding on the right to be a large number (scuh as\nInfinity) instead of 0. This has the effect of making the version an upper bound. For\nexample:\n\n     var ver = new Version('^4.2'); // NOTE: the '^' prefix used\n\n     n = ver.compareTo('4.3'); // == -1  (less than 4.3)\n\n     n = ver.compareTo('4.2'); // == 1   (greater than all 4.2's)\n     n = ver.compareTo('4.2.1'); // == 1\n     n = ver.compareTo('4.2.9'); // == 1\n\nThe second way to interpret this comparison is to ignore the extra digits, making the\nmatch a prefix match. For example:\n\n     var ver = new Version('~4.2'); // NOTE: the '~' prefix used\n\n     n = ver.compareTo('4.3'); // == -1\n\n     n = ver.compareTo('4.2'); // == 0\n     n = ver.compareTo('4.2.1'); // == 0\n\nThis final form can be useful when version numbers contain more components than are\nimportant for certain comparisons. For example, the full version of Ext JS 4.2.1 is\n\"4.2.1.883\" where 883 is the <a href='#!/api/Ext.Version-property-build'>build</a> number.\n\nThis is how to create a \"partial\" `Version` and compare versions to it:\n\n     var version421ish = new Version('~4.2.1');\n\n     n = version421ish.compareTo('4.2.1.883'); // == 0\n     n = version421ish.compareTo('4.2.1.2'); // == 0\n     n = version421ish.compareTo('4.2.1'); // == 0\n\n     n = version421ish.compareTo('4.2'); // == 1\n\nIn the above example, '4.2.1.2' compares as equal to '4.2.1' because digits beyond the\ngiven \"4.2.1\" are ignored. However, '4.2' is less than the '4.2.1' prefix; its missing\ndigit is filled with 0.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "compareTo",
                "text": "Compares this version instance to the specified `other` version.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "other",
                    "text": "The other version to which to compare.\n",
                    "type": "String/Number/Ext.Version",
                    "src": {
                      "name": "0,235,47",
                      "text": "0,235,53,39",
                      "type": "0,235,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "-1 if this version is less than the target version, 1 if this\nversion is greater, and 0 if they are equal.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,236,29,62:0,237,12,45",
                      "type": "0,236,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,239,0",
                  "text": "0,233,12,66"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "equals",
                "text": "Returns whether this version equals to the supplied argument\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The version to compare with\n",
                    "type": "String/Number",
                    "src": {
                      "name": "0,384,35",
                      "text": "0,384,42,28",
                      "type": "0,384,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this version equals to the target, `false` otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,385,30,63",
                      "type": "0,385,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,387,0",
                  "text": "0,383,12,61"
                }
              },
              {
                "$type": "method",
                "name": "getBuild",
                "text": "Returns the build component value.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,324,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,326,0",
                  "text": "0,323,12,35"
                }
              },
              {
                "$type": "method",
                "name": "getMajor",
                "text": "Returns the major component value.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,300,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,302,0",
                  "text": "0,299,12,35"
                }
              },
              {
                "$type": "method",
                "name": "getMinor",
                "text": "Returns the minor component value.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,308,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,310,0",
                  "text": "0,307,12,35"
                }
              },
              {
                "$type": "method",
                "name": "getPatch",
                "text": "Returns the patch component value.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,316,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,318,0",
                  "text": "0,315,12,35"
                }
              },
              {
                "$type": "method",
                "name": "getRelease",
                "text": "Returns the release component text (e.g., \"beta\").\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,332,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,334,0",
                  "text": "0,331,12,51"
                }
              },
              {
                "$type": "method",
                "name": "getReleaseValue",
                "text": "Returns the release component value for comparison purposes.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number/String",
                    "src": {
                      "type": "0,340,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,342,0",
                  "text": "0,339,12,61"
                }
              },
              {
                "$type": "method",
                "name": "getShortVersion",
                "text": "Returns shortVersion version without dots and release\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,419,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,421,0",
                  "text": "0,418,12,54"
                }
              },
              {
                "$type": "method",
                "name": "gt",
                "text": "Convenient alias to <a href='#!/api/Ext.Version-method-isGreaterThan'>Ext.Version#isGreaterThan</a>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "type": "String/Number/Ext.Version",
                    "src": {
                      "name": "0,427,47",
                      "type": "0,427,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,428,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,430,0",
                  "text": "0,426,12,68"
                }
              },
              {
                "$type": "method",
                "name": "gtEq",
                "text": "Convenient alias to <a href='#!/api/Ext.Version-method-isGreaterThanOrEqual'>Ext.Version#isGreaterThanOrEqual</a>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "type": "String/Number/Ext.Version",
                    "src": {
                      "name": "0,445,47",
                      "type": "0,445,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,446,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,448,0",
                  "text": "0,444,12,82"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.Version-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isGreaterThan",
                "text": "Returns whether this version if greater than the supplied argument\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The version to compare with\n",
                    "type": "String/Number",
                    "src": {
                      "name": "0,348,35",
                      "text": "0,348,42,28",
                      "type": "0,348,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this version if greater than the target, `false` otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,349,30,69",
                      "type": "0,349,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,351,0",
                  "text": "0,347,12,67"
                }
              },
              {
                "$type": "method",
                "name": "isGreaterThanOrEqual",
                "text": "Returns whether this version if greater than or equal to the supplied argument\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The version to compare with\n",
                    "type": "String/Number",
                    "src": {
                      "name": "0,357,35",
                      "text": "0,357,42,28",
                      "type": "0,357,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this version if greater than or equal to the target, `false` otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,358,30,81",
                      "type": "0,358,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,360,0",
                  "text": "0,356,12,79"
                }
              },
              {
                "$type": "method",
                "name": "isLessThan",
                "text": "Returns whether this version if smaller than the supplied argument\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The version to compare with\n",
                    "type": "String/Number",
                    "src": {
                      "name": "0,366,35",
                      "text": "0,366,42,28",
                      "type": "0,366,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this version if smaller than the target, `false` otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,367,30,69",
                      "type": "0,367,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,369,0",
                  "text": "0,365,12,67"
                }
              },
              {
                "$type": "method",
                "name": "isLessThanOrEqual",
                "text": "Returns whether this version if less than or equal to the supplied argument\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The version to compare with\n",
                    "type": "String/Number",
                    "src": {
                      "name": "0,375,35",
                      "text": "0,375,42,28",
                      "type": "0,375,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this version if less than or equal to the target, `false` otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,376,30,78",
                      "type": "0,376,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,378,0",
                  "text": "0,374,12,76"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.Version-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "lt",
                "text": "Convenient alias to <a href='#!/api/Ext.Version-method-isLessThan'>Ext.Version#isLessThan</a>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "type": "String/Number/Ext.Version",
                    "src": {
                      "name": "0,436,47",
                      "type": "0,436,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,437,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,439,0",
                  "text": "0,435,12,62"
                }
              },
              {
                "$type": "method",
                "name": "ltEq",
                "text": "Convenient alias to <a href='#!/api/Ext.Version-method-isLessThanOrEqual'>Ext.Version#isLessThanOrEqual</a>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "type": "String/Number/Ext.Version",
                    "src": {
                      "name": "0,454,47",
                      "type": "0,454,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,455,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,457,0",
                  "text": "0,453,12,76"
                }
              },
              {
                "$type": "method",
                "name": "match",
                "text": "Returns whether this version matches the supplied argument. Example:\n\n    var version = new Ext.Version('1.0.2beta');\n    console.log(version.match(1)); // true\n    console.log(version.match(1.0)); // true\n    console.log(version.match('1.0.2')); // true\n    console.log(version.match('1.0.2RC')); // false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The version to compare with\n",
                    "type": "String/Number",
                    "src": {
                      "name": "0,400,35",
                      "text": "0,400,42,28",
                      "type": "0,400,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this version matches the target, `false` otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,401,30,61",
                      "type": "0,401,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,403,0",
                  "text": "0,392,12,308"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.Version-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.Version-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toArray",
                "text": "Returns this format: [major, minor, patch, build, release]. Useful for comparison.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number[]",
                    "src": {
                      "type": "0,410,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,412,0",
                  "text": "0,409,12,83"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.Version-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.Version-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.Version-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.Version-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "toString",
                "text": "Override the native <a href='#!/api/Ext.Version-method-toString'>toString</a> method\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "version\n",
                    "type": "String",
                    "src": {
                      "text": "0,283,29,8",
                      "type": "0,283,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,282,12",
                  "name": "0,285,0",
                  "text": "0,281,12,38"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "valueOf",
                "text": "Override the native <a href='#!/api/Ext.Version-method-valueOf'>valueOf</a> method\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "version\n",
                    "type": "String",
                    "src": {
                      "text": "0,292,29,8",
                      "type": "0,292,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,291,12",
                  "name": "0,294,0",
                  "text": "0,290,12,37"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "build",
                "optional": true,
                "readonly": true,
                "text": "The fourth numeric part of the version number string.\n",
                "type": "Number",
                "src": {
                  "name": "0,201,36",
                  "readonly": "0,203,16",
                  "text": "0,202,16,54",
                  "type": "0,201,27"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.Version-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "major",
                "readonly": true,
                "text": "The first numeric part of the version number string.\n",
                "type": "Number",
                "src": {
                  "name": "0,180,35",
                  "readonly": "0,182,16",
                  "text": "0,181,16,53",
                  "type": "0,180,27"
                }
              },
              {
                "$type": "property",
                "name": "minor",
                "optional": true,
                "readonly": true,
                "text": "The second numeric part of the version number string.\n",
                "type": "Number",
                "src": {
                  "name": "0,187,36",
                  "readonly": "0,189,16",
                  "text": "0,188,16,54",
                  "type": "0,187,27"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "parts",
                "readonly": true,
                "text": "The split array of version number components found in the version string.\nFor example, for \"1.2.3\", this would be `[1, 2, 3]`.\n",
                "type": "Number[]",
                "src": {
                  "access": "0,168,16",
                  "name": "0,164,37",
                  "readonly": "0,167,16",
                  "text": "0,165,16,127",
                  "type": "0,164,27"
                }
              },
              {
                "$type": "property",
                "name": "patch",
                "optional": true,
                "readonly": true,
                "text": "The third numeric part of the version number string.\n",
                "type": "Number",
                "src": {
                  "name": "0,194,36",
                  "readonly": "0,196,16",
                  "text": "0,195,16,53",
                  "type": "0,194,27"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "name": "release",
                "optional": true,
                "readonly": true,
                "text": "The release level. The following values are understood:\n\n * `\"dev\"`\n * `\"alpha\"` or `\"a\"`\n * `\"beta\"` or `\"b\"`\n * `\"RC\"` or `\"rc\"`\n * `\"#\"`\n * `\"pl\"` or `\"p\"`\n",
                "type": "String",
                "value": "\"\"",
                "src": {
                  "name": "0,219,32",
                  "readonly": "0,228,12",
                  "text": "0,220,12,159",
                  "type": "0,219,23",
                  "value": "0,219,40"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "releaseValueMap",
                "src": {
                  "access": "0,477,12",
                  "name": "0,479,0"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "name": "compare",
                "static": true,
                "text": "Compare 2 specified versions by ensuring the first parameter is a `Version`\ninstance and then calling the <a href='#!/api/Ext.Version-method-compareTo'>compareTo</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "current",
                    "text": "The current version to compare to\n",
                    "type": "String",
                    "src": {
                      "name": "0,507,28",
                      "text": "0,507,36,34",
                      "type": "0,507,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The target version to compare to\n",
                    "type": "String",
                    "src": {
                      "name": "0,508,28",
                      "text": "0,508,35,33",
                      "type": "0,508,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns -1 if the current version is smaller than the target version, 1 if greater, and 0 if they're equivalent\n",
                    "type": "Number",
                    "src": {
                      "text": "0,509,29,112",
                      "type": "0,509,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,511,0",
                  "static": "0,506,12",
                  "text": "0,503,12,127"
                }
              },
              {
                "$type": "method",
                "name": "getComponentValue",
                "static": true,
                "text": "Converts a version component to a comparable value\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to convert\n",
                    "type": "Object",
                    "src": {
                      "name": "0,495,28",
                      "text": "0,495,34,21",
                      "type": "0,495,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "0,496,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,498,0",
                  "static": "0,494,12",
                  "text": "0,492,12,52"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,2,11",
          "text": "0,3,4,4311"
        }
      }
    ]
  },
  "version": 1
}