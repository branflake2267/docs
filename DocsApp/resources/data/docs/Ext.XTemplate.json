{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/XTemplate.js",
    "../../../ext/packages/core/src/Template.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Ext.Template,Ext.Base,Object",
        "extends": "Ext.Template",
        "name": "Ext.XTemplate",
        "requires": "Ext.util.XTemplateCompiler",
        "text": "A template class that supports advanced functionality like:\n\n- Auto-filling arrays using templates and sub-templates\n- Conditional processing with basic comparison operators\n- Basic math function support\n- Execute arbitrary inline code with special built-in template variables\n- Custom member functions\n- Many special tags and built-in operators that aren't defined as part of the API, but are supported in the templates that can be created\n\nXTemplate provides the templating mechanism built into {@link Ext.view.View}.\n\nThe {@link Ext.Template} describes the acceptable parameters to pass to the constructor. The following examples\ndemonstrate all of the supported features.\n\n# Sample Data\n\nThis is the data object used for reference in each code example:\n\n    var data = {\n        name: 'Don Griffin',\n        title: 'Senior Technomage',\n        company: 'Sencha Inc.',\n        drinks: ['Coffee', 'Water', 'More Coffee'],\n        kids: [\n            { name: 'Aubrey',  age: 17 },\n            { name: 'Joshua',  age: 13 },\n            { name: 'Cale',    age: 10 },\n            { name: 'Nikol',   age: 5 },\n            { name: 'Solomon', age: 0 }\n        ]\n    };\n\n# Auto filling of arrays\n\nThe **tpl** tag and the **for** operator are used to process the provided data object:\n\n- If the value specified in for is an array, it will auto-fill, repeating the template block inside the tpl\n  tag for each item in the array.\n- If for=\".\" is specified, the data object provided is examined.\n- If between=\"...\" is specified, the provided value will be inserted between the items.\n  This is also supported in the \"foreach\" looping template.\n- While processing an array, the special variable {#} will provide the current array index + 1 (starts at 1, not 0).\n\nExamples:\n\n    <tpl for=\".\">...</tpl>       // loop through array at root node\n    <tpl for=\"foo\">...</tpl>     // loop through array at foo node\n    <tpl for=\"foo.bar\">...</tpl> // loop through array at foo.bar node\n    <tpl for=\".\" between=\",\">...</tpl> // loop through array at root node and insert ',' between each item\n\nUsing the sample data above:\n\n    var tpl = new Ext.XTemplate(\n        '<p>Kids: ',\n        '<tpl for=\".\">',       // process the data.kids node\n            '<p>{#}. {name}</p>',  // use current array index to autonumber\n        '</tpl></p>'\n    );\n    tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object\n\nAn example illustrating how the **for** property can be leveraged to access specified members of the provided data\nobject to populate the template:\n\n    var tpl = new Ext.XTemplate(\n        '<p>Name: {name}</p>',\n        '<p>Title: {title}</p>',\n        '<p>Company: {company}</p>',\n        '<p>Kids: ',\n        '<tpl for=\"kids\">',     // interrogate the kids property within the data\n            '<p>{name}</p>',\n        '</tpl></p>'\n    );\n    tpl.overwrite(panel.body, data);  // pass the root node of the data object\n\nFlat arrays that contain values (and not objects) can be auto-rendered using the special **`{.}`** variable inside a\nloop. This variable will represent the value of the array at the current index:\n\n    var tpl = new Ext.XTemplate(\n        '<p>{name}\\'s favorite beverages:</p>',\n        '<tpl for=\"drinks\">',\n            '<div> - {.}</div>',\n        '</tpl>'\n    );\n    tpl.overwrite(panel.body, data);\n\nWhen processing a sub-template, for example while looping through a child array, you can access the parent object's\nmembers via the **parent** object:\n\n    var tpl = new Ext.XTemplate(\n        '<p>Name: {name}</p>',\n        '<p>Kids: ',\n        '<tpl for=\"kids\">',\n            '<tpl if=\"age &gt; 1\">',\n                '<p>{name}</p>',\n                '<p>Dad: {parent.name}</p>',\n            '</tpl>',\n        '</tpl></p>'\n    );\n    tpl.overwrite(panel.body, data);\n\nThe **foreach** operator is used to loop over an object's properties.  The following\nexample demonstrates looping over the main data object's properties:\n\n    var tpl = new Ext.XTemplate(\n        '<dl>',\n            '<tpl foreach=\".\">',\n                '<dt>{$}</dt>', // the special **`{$}`** variable contains the property name\n                '<dd>{.}</dd>', // within the loop, the **`{.}`** variable is set to the property value\n            '</tpl>',\n        '</dl>'\n    );\n    tpl.overwrite(panel.body, data);\n\n# Conditional processing with basic comparison operators\n\nThe **tpl** tag and the **if** operator are used to provide conditional checks for deciding whether or not to render\nspecific parts of the template.\n\nUsing the sample data above:\n\n    var tpl = new Ext.XTemplate(\n        '<p>Name: {name}</p>',\n        '<p>Kids: ',\n        '<tpl for=\"kids\">',\n            '<tpl if=\"age &gt; 1\">',\n                '<p>{name}</p>',\n            '</tpl>',\n        '</tpl></p>'\n    );\n    tpl.overwrite(panel.body, data);\n\nMore advanced conditionals are also supported:\n\n    var tpl = new Ext.XTemplate(\n        '<p>Name: {name}</p>',\n        '<p>Kids: ',\n        '<tpl for=\"kids\">',\n            '<p>{name} is a ',\n            '<tpl if=\"age &gt;= 13\">',\n                '<p>teenager</p>',\n            '<tpl elseif=\"age &gt;= 2\">',\n                '<p>kid</p>',\n            '<tpl else>',\n                '<p>baby</p>',\n            '</tpl>',\n        '</tpl></p>'\n    );\n\n    var tpl = new Ext.XTemplate(\n        '<p>Name: {name}</p>',\n        '<p>Kids: ',\n        '<tpl for=\"kids\">',\n            '<p>{name} is a ',\n            '<tpl switch=\"name\">',\n                '<tpl case=\"Aubrey\" case=\"Nikol\">',\n                    '<p>girl</p>',\n                '<tpl default>',\n                    '<p>boy</p>',\n            '</tpl>',\n        '</tpl></p>'\n    );\n\nA `break` is implied between each case and default, however, multiple cases can be listed\nin a single &lt;tpl&gt; tag.\n\n# Using double quotes\n\nExamples:\n\n    var tpl = new Ext.XTemplate(\n        \"<tpl if='age &gt; 1 && age &lt; 10'>Child</tpl>\",\n        \"<tpl if='age &gt;= 10 && age &lt; 18'>Teenager</tpl>\",\n        \"<tpl if='this.isGirl(name)'>...</tpl>\",\n        '<tpl if=\"id == \\'download\\'\">...</tpl>',\n        \"<tpl if='needsIcon'><img src='{icon}' class='{iconCls}'/></tpl>\",\n        \"<tpl if='name == \\\"Don\\\"'>Hello</tpl>\"\n    );\n\n# Basic math support\n\nThe following basic math operators may be applied directly on numeric data values:\n\n    + - * /\n\nFor example:\n\n    var tpl = new Ext.XTemplate(\n        '<p>Name: {name}</p>',\n        '<p>Kids: ',\n        '<tpl for=\"kids\">',\n            '<tpl if=\"age &gt; 1\">',  // <-- Note that the > is encoded\n                '<p>{#}: {name}</p>',  // <-- Auto-number each item\n                '<p>In 5 Years: {age+5}</p>',  // <-- Basic math\n                '<p>Dad: {parent.name}</p>',\n            '</tpl>',\n        '</tpl></p>'\n    );\n    tpl.overwrite(panel.body, data);\n\n# Execute arbitrary inline code with special built-in template variables\n\nAnything between `{[ ... ]}` is considered code to be executed in the scope of the template.\nThe expression is evaluated and the result is included in the generated result. There are\nsome special variables available in that code:\n\n- **out**: The output array into which the template is being appended (using `push` to later\n  `join`).\n- **values**: The values in the current scope. If you are using scope changing sub-templates,\n  you can change what values is.\n- **parent**: The scope (values) of the ancestor template.\n- **xindex**: If you are in a \"for\" or \"foreach\" looping template, the index of the loop you are in (1-based).\n- **xcount**: If you are in a \"for\" looping template, the total length of the array you are looping.\n- **xkey**: If you are in a \"foreach\" looping template, the key of the current property\nbeing examined.\n\nThis example demonstrates basic row striping using an inline code block and the xindex variable:\n\n    var tpl = new Ext.XTemplate(\n        '<p>Name: {name}</p>',\n        '<p>Company: {[values.company.toUpperCase() + \", \" + values.title]}</p>',\n        '<p>Kids: ',\n        '<tpl for=\"kids\">',\n            '<div class=\"{[xindex % 2 === 0 ? \"even\" : \"odd\"]}\">',\n            '{name}',\n            '</div>',\n        '</tpl></p>'\n     );\n\nAny code contained in \"verbatim\" blocks (using \"{% ... %}\") will be inserted directly in\nthe generated code for the template. These blocks are not included in the output. This\ncan be used for simple things like break/continue in a loop, or control structures or\nmethod calls (when they don't produce output). The `this` references the template instance.\n\n    var tpl = new Ext.XTemplate(\n        '<p>Name: {name}</p>',\n        '<p>Company: {[values.company.toUpperCase() + \", \" + values.title]}</p>',\n        '<p>Kids: ',\n        '<tpl for=\"kids\">',\n            '{% if (xindex % 2 === 0) continue; %}',\n            '{name}',\n            '{% if (xindex > 100) break; %}',\n            '</div>',\n        '</tpl></p>'\n     );\n\n# Template member functions\n\nOne or more member functions can be specified in a configuration object passed into the XTemplate constructor for\nmore complex processing:\n\n    var tpl = new Ext.XTemplate(\n        '<p>Name: {name}</p>',\n        '<p>Kids: ',\n        '<tpl for=\"kids\">',\n            '<tpl if=\"this.isGirl(name)\">',\n                '<p>Girl: {name} - {age}</p>',\n            '<tpl else>',\n                '<p>Boy: {name} - {age}</p>',\n            '</tpl>',\n            '<tpl if=\"this.isBaby(age)\">',\n                '<p>{name} is a baby!</p>',\n            '</tpl>',\n        '</tpl></p>',\n        {\n            // XTemplate configuration:\n            disableFormats: true,\n            // member functions:\n            isGirl: function(name){\n               return name == 'Aubrey' || name == 'Nikol';\n            },\n            isBaby: function(age){\n               return age < 1;\n            }\n        }\n    );\n    tpl.overwrite(panel.body, data);\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "hide": true,
                "name": "compiled",
                "text": "Only applies to {@link Ext.Template}, XTemplates are compiled automatically on the\nfirst call to {@link #method!apply #apply} or {@link #method!applyOut #applyOut}.\n",
                "type": "Boolean",
                "src": {
                  "hide": "0,297,8",
                  "name": "0,294,23",
                  "text": "0,295,8,134",
                  "type": "0,294,14"
                }
              },
              {
                "$type": "property",
                "name": "definitions",
                "text": "Optional. A statement, or array of statements which set up `var`s which may then\nbe accessed within the scope of the generated function.\n\n    var data = {\n        name: 'Don Griffin',\n        isWizard: true,\n        title: 'Senior Technomage',\n        company: 'Sencha Inc.'\n    };\n\n    var tpl = new Ext.XTemplate('{[values.isWizard ? wizard : notSoWizard]}' +\n        ' {name}', {\n        definitions: 'var wizard = \"Wizard\", notSoWizard = \"Townsperson\";'\n    });\n\n    console.log(tpl.apply(data));\n    // LOGS: Wizard Don Griffin\n",
                "type": "String/Array",
                "src": {
                  "name": "0,301,28",
                  "text": "0,302,8,533",
                  "type": "0,301,14"
                }
              },
              {
                "$type": "property",
                "name": "disableFormats",
                "text": "True to disable format functions in the template. If the template doesn't contain\nformat functions, setting disableFormats to true will reduce apply time. Defaults to false.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,135,23",
                  "text": "1,136,8,174",
                  "type": "1,135,14"
                }
              },
              {
                "$type": "property",
                "name": "strict",
                "optional": true,
                "text": "Expressions in templates that traverse \"dot paths\" and fail (due to `{@link null}` at some\nstage) have always been expanded as empty strings. This is convenient in most cases\nbut doing so can also mask errors in the template. Setting this to `true` changes\nthis default so that any expression errors will be thrown as exceptions.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,331,24",
                  "text": "0,332,8,322",
                  "type": "0,331,14",
                  "value": "0,331,31"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "2,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,118,12",
                  "name": "2,120,0",
                  "text": "2,116,12,125"
                }
              },
              {
                "$type": "method",
                "name": "append",
                "text": "Applies the supplied `values` to the template and appends the new node(s) to the specified `el`.\n\nFor example usage see {@link Ext.Template}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "1,396,52",
                      "text": "1,396,55,20",
                      "type": "1,396,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "values",
                    "text": "The template values. See {@link #method!applyTemplate #applyTemplate} for details.\n",
                    "type": "Object/Array",
                    "src": {
                      "name": "1,397,30",
                      "text": "1,397,37,61",
                      "type": "1,397,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "text": "(optional) true to return an Ext.Element.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,398,25",
                      "text": "1,398,39,42",
                      "type": "1,398,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node or Element\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "1,399,46,24",
                      "type": "1,399,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,401,0",
                  "text": "1,392,8,167"
                }
              },
              {
                "$type": "method",
                "name": "apply",
                "text": "Returns an HTML fragment of this template with the specified values applied.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "values",
                    "text": "The template values. Can be an array if your params are numeric:\n\n    var tpl = new Ext.Template('Name: {0}, Age: {1}');\n    tpl.apply(['John', 25]);\n\nor an object:\n\n    var tpl = new Ext.Template('Name: {name}, Age: {age}');\n    tpl.apply({name: 'John', age: 25});\n",
                    "type": "Object/Array",
                    "src": {
                      "name": "1,171,30",
                      "text": "1,171,37,65:1,172,8,202",
                      "type": "1,171,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The HTML fragment\n",
                    "type": "String",
                    "src": {
                      "text": "1,181,25,18",
                      "type": "1,181,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,183,0",
                  "text": "1,169,8,78"
                }
              },
              {
                "$type": "method",
                "name": "applyOut",
                "text": "Appends the result of this template to the provided output array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "values",
                    "text": "The template values. See {@link #method!apply #apply}.\n",
                    "type": "Object/Array",
                    "src": {
                      "name": "1,242,30",
                      "text": "1,242,37,41",
                      "type": "1,242,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "out",
                    "text": "The array to which output is pushed.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,243,23",
                      "text": "1,243,27,37",
                      "type": "1,243,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The given out array.\n",
                    "type": "Array",
                    "src": {
                      "text": "1,244,24,21",
                      "type": "1,244,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,246,0",
                  "text": "1,241,8,66"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.Template#apply",
                "name": "applyTemplate",
                "text": "Alias for {@link #method!apply #apply}.\n",
                "src": {
                  "inheritdoc": "1,265,8",
                  "name": "1,262,16",
                  "text": "1,264,8,26"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "2,1251,37",
                      "text": "2,1251,42,57:2,1252,12,67",
                      "type": "2,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1253,29,48",
                      "type": "2,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1250,12",
                  "name": "2,1255,0",
                  "text": "2,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "2,1338,37",
                      "text": "2,1338,42,57:2,1339,12,66",
                      "type": "2,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1340,29,52",
                      "type": "2,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1337,12",
                  "name": "2,1342,0",
                  "text": "2,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "compile",
                "text": "Does nothing. XTemplates are compiled automatically, so this function simply returns this.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.XTemplate",
                    "src": {
                      "text": "0,379,32,5",
                      "type": "0,379,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,381,0",
                  "text": "0,378,8,91"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new template.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "html",
                    "text": "List of strings to be concatenated into template.\nAlternatively an array of strings can be given, but then no config object may be passed.\n",
                    "type": "String...",
                    "src": {
                      "name": "1,81,27",
                      "text": "1,81,32,50:1,82,8,89",
                      "type": "1,81,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "(optional) Config object\n",
                    "type": "Object",
                    "src": {
                      "name": "1,83,24",
                      "text": "1,83,31,25",
                      "type": "1,83,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,85,0",
                  "text": "1,79,8,23"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "2,1626,0",
                  "text": "2,1623,12,132"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "evalCompiled",
                "items": [
                  {
                    "$type": "param",
                    "name": "$",
                    "src": {
                      "name": "1,311,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,309,8",
                  "name": "1,311,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "evaluate",
                "text": "Do not create the substitution closure on every apply call\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "values",
                    "src": {
                      "name": "1,200,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,197,8",
                  "name": "1,200,0",
                  "text": "1,198,8,59"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1469,29",
                      "text": "2,1469,35,40",
                      "type": "2,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,1470,30",
                      "text": "2,1470,42,60",
                      "type": "2,1470,20",
                      "value": "2,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1471,29,27",
                      "type": "2,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1473,0",
                  "text": "2,1466,12,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "2,1506,12",
                  "name": "2,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1551,29",
                      "text": "2,1551,35,37",
                      "type": "2,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "2,1552,35,48:2,1553,12,33",
                      "type": "2,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1555,0",
                  "text": "2,1523,12,715"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "2,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,1515,12",
                  "name": "2,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,100,20",
                      "text": "3,100,25,34",
                      "type": "3,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,101,22,57:3,102,4,15",
                      "type": "3,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,53,12",
                  "text": "3,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "2,1449,28",
                      "type": "2,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,1450,31,5",
                      "type": "2,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1448,12",
                  "name": "2,1452,0",
                  "text": "2,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "insertAfter",
                "text": "Applies the supplied values to the template and inserts the new node(s) after el.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "1,382,52",
                      "text": "1,382,55,20",
                      "type": "1,382,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "values",
                    "text": "The template values. See {@link #method!applyTemplate #applyTemplate} for details.\n",
                    "type": "Object/Array",
                    "src": {
                      "name": "1,383,30",
                      "text": "1,383,37,61",
                      "type": "1,383,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "text": "(optional) true to return a Ext.Element.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,384,25",
                      "text": "1,384,39,41",
                      "type": "1,384,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node or Element\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "1,385,46,24",
                      "type": "1,385,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,387,0",
                  "text": "1,380,8,83"
                }
              },
              {
                "$type": "method",
                "name": "insertBefore",
                "text": "Applies the supplied values to the template and inserts the new node(s) before el.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "1,370,52",
                      "text": "1,370,55,20",
                      "type": "1,370,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "values",
                    "text": "The template values. See {@link #method!applyTemplate #applyTemplate} for details.\n",
                    "type": "Object/Array",
                    "src": {
                      "name": "1,371,30",
                      "text": "1,371,37,61",
                      "type": "1,371,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "text": "(optional) true to return a Ext.Element.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,372,25",
                      "text": "1,372,39,41",
                      "type": "1,372,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node or Element\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "1,373,46,24",
                      "type": "1,373,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,375,0",
                  "text": "1,368,8,84"
                }
              },
              {
                "$type": "method",
                "name": "insertFirst",
                "text": "Applies the supplied values to the template and inserts the new node(s) as the first child of el.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "1,358,52",
                      "text": "1,358,55,20",
                      "type": "1,358,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "values",
                    "text": "The template values. See {@link #method!applyTemplate #applyTemplate} for details.\n",
                    "type": "Object/Array",
                    "src": {
                      "name": "1,359,30",
                      "text": "1,359,37,61",
                      "type": "1,359,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "text": "(optional) true to return a Ext.Element.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,360,25",
                      "text": "1,360,39,41",
                      "type": "1,360,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node or Element\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "1,361,46,24",
                      "type": "1,361,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,363,0",
                  "text": "1,356,8,99"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "3,148,20",
                      "text": "3,148,30,71:3,149,4,18",
                      "type": "3,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "3,150,20",
                      "text": "3,150,27,50",
                      "type": "3,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,151,22,56",
                      "type": "3,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,106,12",
                  "text": "3,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "2,1571,28",
                      "type": "2,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "2,1572,28",
                      "type": "2,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1573,29,20",
                      "type": "2,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1574,12",
                  "name": "2,1576,0",
                  "text": "2,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "overwrite",
                "text": "Applies the supplied values to the template and overwrites the content of el with the new node(s).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "1,413,52",
                      "text": "1,413,55,20",
                      "type": "1,413,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "values",
                    "text": "The template values. See {@link #method!applyTemplate #applyTemplate} for details.\n",
                    "type": "Object/Array",
                    "src": {
                      "name": "1,414,30",
                      "text": "1,414,37,61",
                      "type": "1,414,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "text": "(optional) true to return a Ext.Element.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,415,25",
                      "text": "1,415,39,41",
                      "type": "1,415,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node or Element\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "1,416,46,24",
                      "type": "1,416,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,418,0",
                  "text": "1,411,8,100"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,220,20",
                      "text": "3,220,25,34",
                      "type": "3,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,221,22,57:3,222,4,22",
                      "type": "3,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,155,12",
                  "text": "3,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "set",
                "text": "Sets the HTML used as the template and optionally compiles it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "html",
                    "type": "String",
                    "src": {
                      "name": "1,273,24",
                      "type": "1,273,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "compile",
                    "text": "(optional) True to compile the template.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,274,25",
                      "text": "1,274,33,41",
                      "type": "1,274,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Template",
                    "src": {
                      "text": "1,275,31,5",
                      "type": "1,275,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,277,0",
                  "text": "1,272,8,63"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "2,1478,35",
                      "text": "2,1478,40,69",
                      "type": "2,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1479,29",
                      "text": "2,1479,36,41",
                      "type": "2,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,1480,31,5",
                      "type": "2,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1482,0",
                  "text": "2,1476,12,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "2,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1160,12",
                  "name": "2,1163,0",
                  "text": "2,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "3,235,21,32",
                      "type": "3,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,226,12",
                  "text": "3,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "3,297,21,32",
                      "type": "3,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,239,12",
                  "text": "3,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "2,1589,30",
                      "text": "2,1589,36,44",
                      "type": "2,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,1590,31,5",
                      "type": "2,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1591,12",
                  "name": "2,1593,0",
                  "text": "2,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,340,21,50",
                      "type": "3,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,301,12",
                  "text": "3,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "2,1049,13",
                  "name": "2,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1066,12",
                  "name": "2,1062,33",
                  "since": "2,1067,19",
                  "text": "2,1063,12,225",
                  "type": "2,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1076,12",
                  "name": "2,1072,33",
                  "since": "2,1077,19",
                  "text": "2,1073,12,229",
                  "type": "2,1072,23"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "3,346,14",
                  "text": "3,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1102,12",
                  "name": "2,1100,32",
                  "text": "2,1101,12,69",
                  "type": "2,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "emptyObj",
                "src": {
                  "access": "0,289,8",
                  "name": "0,291,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "fn",
                "readonly": true,
                "text": "The function that applies this template. This is created on first use of the\ntemplate (calls to `{@link #method!apply apply}` or `{@link #method!applyOut applyOut}`).\n",
                "type": "Function",
                "src": {
                  "access": "0,325,8",
                  "name": "0,322,29",
                  "readonly": "0,326,8",
                  "text": "0,323,8,120",
                  "type": "0,322,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1084,12",
                  "name": "2,1082,32",
                  "readonly": "2,1085,12",
                  "since": "2,1086,19",
                  "text": "2,1083,12,64",
                  "type": "2,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1093,12",
                  "name": "2,1091,32",
                  "readonly": "2,1094,12",
                  "since": "2,1095,19",
                  "text": "2,1092,12,75",
                  "type": "2,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1056,12",
                  "name": "2,1053,32",
                  "readonly": "2,1057,12",
                  "text": "2,1054,12,94",
                  "type": "2,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "isTemplate",
                "text": "`true` in this class to identify an object as an instantiated Template, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,124,28",
                  "text": "1,125,8,93",
                  "type": "1,124,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "3,46,14",
                  "text": "3,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "re",
                "text": "Regular expression used to extract tokens.\n\nFinds the following expressions within a format string\n\n                    {AND?}\n                    /   \\\n                  /       \\\n                /           \\\n              /               \\\n           OR                  AND?\n          /  \\                 / \\\n         /    \\               /   \\\n        /      \\             /     \\\n   (\\d+)  ([a-z_][\\w\\-]*)   /       \\\n    index       name       /         \\\n                          /           \\\n                         /             \\\n                  \\:([a-z_\\.]*)   (?:\\((.*?)?\\))?\n                     formatFn           args\n\nNumeric index or (name followed by optional formatting function and args)\n",
                "type": "RegExp",
                "src": {
                  "access": "1,164,8",
                  "name": "1,142,27",
                  "text": "1,143,8,715",
                  "type": "1,142,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "2,1413,12",
                  "name": "2,1379,34",
                  "text": "2,1380,12,1011",
                  "type": "2,1379,23"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "2,940,28",
                      "type": "2,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "2,941,32",
                      "text": "2,941,44,49",
                      "type": "2,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,942,12",
                  "inheritable": "2,944,12",
                  "name": "2,946,0",
                  "static": "2,943,12",
                  "text": "2,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "2,464,28",
                      "type": "2,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,461,12",
                  "inheritable": "2,463,12",
                  "name": "2,466,0",
                  "static": "2,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "2,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "2,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,659,12",
                  "inheritable": "2,661,12",
                  "name": "2,665,0",
                  "static": "2,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,522,28",
                      "text": "2,522,36,34",
                      "type": "2,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,523,30",
                      "text": "2,523,46,39",
                      "type": "2,523,20",
                      "value": "2,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,524,30",
                      "text": "2,524,45,45:2,525,12,53",
                      "type": "2,524,20",
                      "value": "2,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,527,12",
                  "name": "2,529,0",
                  "static": "2,526,12",
                  "text": "2,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "2,450,28",
                      "type": "2,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,451,31,5",
                      "type": "2,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,453,12",
                  "name": "2,455,0",
                  "static": "2,452,12",
                  "text": "2,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "2,693,30",
                      "text": "2,693,40,33",
                      "type": "2,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "2,694,34",
                      "text": "2,694,42,35",
                      "type": "2,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,695,31,5",
                      "type": "2,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,698,12",
                  "inheritable": "2,697,12",
                  "name": "2,700,0",
                  "static": "2,696,12",
                  "text": "2,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "2,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,810,12",
                  "inheritable": "2,812,12",
                  "name": "2,814,0",
                  "static": "2,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "2,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,824,12",
                  "inheritable": "2,826,12",
                  "name": "2,828,0",
                  "static": "2,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,107,29,22",
                      "type": "2,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,109,12",
                  "name": "2,111,0",
                  "static": "2,108,12",
                  "text": "2,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "2,1018,35",
                      "text": "2,1018,41,63:2,1019,12,43",
                      "type": "2,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "2,1020,35",
                      "text": "2,1020,42,25",
                      "type": "2,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,1022,12",
                  "name": "2,1025,0",
                  "static": "2,1021,12",
                  "text": "2,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "2,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,347,12",
                  "inheritable": "2,349,12",
                  "name": "2,352,0",
                  "static": "2,348,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "from",
                "static": true,
                "text": "Creates a template from the passed element's value (_display:none_ textarea, preferred) or innerHTML.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "A DOM element or its id\n",
                    "type": "String/HTMLElement",
                    "src": {
                      "name": "1,59,40",
                      "text": "1,59,43,24",
                      "type": "1,59,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "(optional) Config object\n",
                    "type": "Object",
                    "src": {
                      "name": "1,60,28",
                      "text": "1,60,35,25",
                      "type": "1,60,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The created template\n",
                    "type": "Ext.Template",
                    "src": {
                      "text": "1,61,35,21",
                      "type": "1,61,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,63,12",
                  "name": "1,65,0",
                  "static": "1,62,12",
                  "text": "1,58,12,102"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "2,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,968,12",
                  "inheritable": "2,970,12",
                  "name": "2,972,0",
                  "static": "2,969,12",
                  "text": "2,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "2,989,29,10",
                      "type": "2,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,991,12",
                  "name": "2,993,0",
                  "static": "2,990,12",
                  "text": "2,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getTpl",
                "static": true,
                "text": "Gets an `XTemplate` from an object (an instance of an {@link Ext#method!define Ext#define}'d class).\nMany times, templates are configured high in the class hierarchy and are to be\nshared by all classes that derive from that base. To further complicate matters,\nthese templates are seldom actual instances but are rather configurations. For\nexample:\n\n     Ext.define('MyApp.Class', {\n         extraCls: 'extra-class',\n\n         someTpl: [\n             '<div class=\"{%this.emitClass(out)%}\"></div>',\n         {\n             // Member fn - outputs the owing class's extra CSS class\n             emitClass: function(out) {\n                 out.push(this.owner.extraCls);\n             }\n         }]\n     });\n\nThe goal being to share that template definition with all instances and even\ninstances of derived classes, until `someTpl` is overridden. This method will\n\"upgrade\" these configurations to be real `XTemplate` instances *in place* (to\navoid creating one instance per object).\n\nThe resulting XTemplate will have an `owner` reference injected which refers back\nto the owning object whether that is an object which has an *own instance*, or a\nclass prototype. Through this link, XTemplate member functions will be able to access\nprototype properties of its owning class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "instance",
                    "text": "The object from which to get the `XTemplate` (must be\nan instance of an {@link Ext#method!define Ext#define}'d class).\n",
                    "type": "Object",
                    "src": {
                      "name": "0,416,28",
                      "text": "0,416,37,54:0,417,12,47",
                      "type": "0,416,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property by which to get the `XTemplate`.\n",
                    "type": "String",
                    "src": {
                      "name": "0,418,28",
                      "text": "0,418,33,58",
                      "type": "0,418,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `XTemplate` instance or null if not found.\n",
                    "type": "Ext.XTemplate",
                    "src": {
                      "text": "0,419,36,47",
                      "type": "0,419,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,420,12",
                  "name": "0,423,0",
                  "static": "0,421,12",
                  "text": "0,387,12,1254"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "2,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "2,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,840,12",
                  "inheritable": "2,842,12",
                  "name": "2,844,0",
                  "static": "2,841,12",
                  "text": "2,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "2,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "2,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,424,12",
                  "inheritable": "2,426,12",
                  "name": "2,428,0",
                  "static": "2,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,762,28",
                      "text": "2,762,36,52:2,763,12,66",
                      "type": "2,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,764,31,11",
                      "type": "2,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,766,12",
                  "name": "2,768,0",
                  "static": "2,765,12",
                  "text": "2,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "2,402,12",
                  "inheritable": "2,404,12",
                  "name": "2,406,0",
                  "static": "2,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "2,395,12",
                  "inheritable": "2,397,12",
                  "name": "2,399,0",
                  "static": "2,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "extends": "0,280,0",
          "name": "0,279,0",
          "requires": "0,283,0",
          "text": "0,2,4,9816"
        }
      }
    ]
  },
  "version": 1
}