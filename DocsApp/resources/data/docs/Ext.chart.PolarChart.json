{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/chart/PolarChart.js",
    "../../../ext/classic/classic/src/util/Floating.js",
    "../../../ext/classic/classic/src/container/Container.js",
    "../../../ext/classic/classic/src/Component.js",
    "../../../ext/classic/classic/src/layout/container/Anchor.js",
    "../../../ext/packages/charts/src/chart/AbstractChart.js",
    "../../../ext/classic/classic/src/panel/Panel.js",
    "../../../ext/packages/core/src/mixin/Accessible.js",
    "../../../ext/packages/core/src/mixin/Bindable.js",
    "../../../ext/classic/classic/src/container/DockingContainer.js",
    "../../../ext/packages/charts/src/draw/Container.js",
    "../../../ext/classic/classic/src/util/Focusable.js",
    "../../../ext/classic/classic/src/util/KeyboardInteractive.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/classic/classic/src/util/ComponentDragger.js",
    "../../../ext/packages/charts/classic/src/draw/ContainerBase.js",
    "../../../ext/packages/core/src/mixin/Container.js",
    "../../../ext/classic/classic/src/state/Stateful.js",
    "../../../ext/classic/classic/src/util/ElementContainer.js",
    "../../../ext/packages/core/src/mixin/ComponentDelegation.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../ext/packages/core/src/util/Positionable.js",
    "../../../ext/classic/classic/src/util/Renderable.js",
    "../../../ext/classic/classic/src/util/Animate.js",
    "../../../ext/packages/core/src/mixin/Queryable.js",
    "../../../ext/packages/core/src/mixin/Inheritable.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/classic/theme-neutral/sass/var/panel/Panel.scss",
    "../../../ext/classic/theme-neptune/sass/var/panel/Panel.scss",
    "../../../ext/classic/theme-neutral/sass/var/scroll/Indicator.scss"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "widget.polar",
        "extended": "Ext.chart.AbstractChart,Ext.draw.Container,Ext.draw.ContainerBase,Ext.panel.Panel,Ext.container.Container,Ext.Component,Ext.Base,Object",
        "extends": "Ext.chart.AbstractChart",
        "name": "Ext.chart.PolarChart",
        "requires": "Ext.chart.grid.CircularGrid,Ext.chart.grid.RadialGrid",
        "text": "\nRepresent a chart that uses polar coordinates.\nA polar chart has two axes: an angular axis (which is a circle) and\na radial axis (a straight line from the center to the edge of the circle).\nThe angular axis is usually a Category axis while the radial axis is\ntypically numerical.\n\nPie charts and Radar charts are common examples of Polar charts.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "activeCounter",
                "text": "An incrementing numeric counter indicating activation index for use by the {@link #property!zIndexManager #zIndexManager}\nto sort its stack.\n",
                "type": "Number",
                "src": {
                  "access": "1,117,12",
                  "name": "1,118,26",
                  "text": "1,118,40,98:1,119,12,19",
                  "type": "1,118,18"
                }
              },
              {
                "$type": "property",
                "name": "activeItem",
                "since": "2.3.0",
                "text": "A string component id or the numeric index of the component that should be\ninitially activated within the container's layout on render.  For example,\nactiveItem: 'item-1' or activeItem: 0 (index 0 = the first item in the\ncontainer's collection).  activeItem only applies to layout styles that can\ndisplay items one at a time (like {@link Ext.layout.container.Card} and\n{@link Ext.layout.container.Fit}).\n",
                "type": "String/Number",
                "src": {
                  "name": "2,442,29",
                  "since": "2,450,15",
                  "text": "2,443,8,405",
                  "type": "2,442,14"
                }
              },
              {
                "$type": "property",
                "name": "alignTarget",
                "optional": true,
                "text": "A Component or Element by which to position this component according to the {@link #cfg!defaultAlign #defaultAlign}.\nDefaults to the owning Container.\n\n*Only applicable if this component is {@link #cfg!floating #cfg-floating}*\n\n*Used upon first show*.\n",
                "type": "String",
                "src": {
                  "name": "3,413,23",
                  "text": "3,414,8,220",
                  "type": "3,413,14"
                }
              },
              {
                "$type": "property",
                "name": "alwaysOnTop",
                "optional": true,
                "text": "A flag indicating that this component should be on the top of the z-index stack for use by the {@link #property!zIndexManager #zIndexManager}\nto sort its stack.\n\nThis may be a positive number to prioritize the ordering of multiple visible always on top components.\n\nThis may be set to a *negative* number to prioritize a component to the *bottom* of the z-index stack.\n",
                "type": "Boolean/Number",
                "value": "false",
                "src": {
                  "name": "1,124,35",
                  "text": "1,124,54,118:1,125,12,227",
                  "type": "1,124,18",
                  "value": "1,124,47"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.layout.container.Anchor",
                "name": "anchor",
                "type": "String",
                "src": {
                  "inheritdoc": "3,425,8",
                  "name": "3,424,22",
                  "type": "3,424,14"
                }
              },
              {
                "$type": "property",
                "name": "anchorSize",
                "text": "Defines the anchoring size of container.\nEither a number to define the width of the container or an object with `{@link #cfg!width width}` and `{@link #cfg!height height}` fields.\n",
                "type": "Number/Object",
                "src": {
                  "name": "4,304,33",
                  "text": "4,305,12,141",
                  "type": "4,304,18"
                }
              },
              {
                "$type": "property",
                "name": "animateShadow",
                "optional": true,
                "text": "`true` to animate the shadow along with the component while the component is animating.\nBy default the shadow is hidden while the component is animating\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,31,24",
                  "text": "1,32,8,153",
                  "type": "1,31,14",
                  "value": "1,31,38"
                }
              },
              {
                "$type": "property",
                "name": "animation",
                "text": "(optional) `true` for the default animation (easing: 'ease' and duration: 500)\nor a standard animation config object to be used for default chart animations.\n",
                "type": "Boolean/Object",
                "src": {
                  "name": "5,287,34",
                  "text": "5,287,44,79:5,288,12,79",
                  "type": "5,287,18"
                }
              },
              {
                "$type": "property",
                "name": "animCollapse",
                "text": "`true` to animate the transition when the panel is collapsed, `false` to skip the animation (defaults to `true`\nif the {@link Ext.fx.Anim} class is available, otherwise `false`). May also be specified as the animation\nduration in milliseconds.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,232,23",
                  "text": "6,233,8,244",
                  "type": "6,232,14"
                }
              },
              {
                "$type": "property",
                "name": "ariaAttributes",
                "text": "An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as `aria-live`, `aria-flowto`, etc.\n\n**Note** that this config is only meaningful at the Component rendering time,\nand setting it after that will do nothing.\n",
                "type": "Object",
                "src": {
                  "name": "7,39,26",
                  "text": "7,39,41,47:7,40,12,280",
                  "type": "7,39,18"
                }
              },
              {
                "$type": "property",
                "name": "ariaDescribedBy",
                "optional": true,
                "text": "DOM selector for a child element that is to be used\nas description for this Component, set in `aria-describedby` attribute.\nThe selector works the same way as {@link #cfg!ariaLabelledBy #ariaLabelledBy}.\n",
                "type": "String",
                "src": {
                  "name": "7,32,23",
                  "text": "7,32,40,52:7,33,8,132",
                  "type": "7,32,14"
                }
              },
              {
                "$type": "property",
                "name": "ariaLabel",
                "optional": true,
                "text": "ARIA label for this Component. It is best to use\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} option instead, because screen readers prefer\n`aria-labelledby` attribute to `aria-label`. {@link #cfg!ariaLabel #ariaLabel} and\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} config options are mutually exclusive.\n",
                "type": "String",
                "src": {
                  "name": "7,15,23",
                  "text": "7,15,34,49:7,16,8,201",
                  "type": "7,15,14"
                }
              },
              {
                "$type": "property",
                "name": "ariaLabelledBy",
                "optional": true,
                "text": "DOM selector for a child element that is to be used\nas label for this Component, set in `aria-labelledby` attribute.\nIf the selector is by `{@link #cfg!id #id}`, the label element can be any existing element,\nnot necessarily a child of the main Component element.\n\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} and {@link #cfg!ariaLabel #ariaLabel} config options are\nmutually exclusive, and `{@link #cfg!ariaLabelledBy ariaLabelledBy}` has the higher precedence.\n",
                "type": "String",
                "src": {
                  "name": "7,22,23",
                  "text": "7,22,39,52:7,23,8,331",
                  "type": "7,22,14"
                }
              },
              {
                "$type": "property",
                "name": "autoDestroy",
                "optional": true,
                "since": "2.3.0",
                "text": "If true the container will automatically destroy any contained component that is removed\nfrom it, else destruction must be handled manually.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "2,454,24",
                  "since": "2,457,15",
                  "text": "2,455,8,141",
                  "type": "2,454,14",
                  "value": "2,454,36"
                }
              },
              {
                "$type": "property",
                "name": "autoEl",
                "since": "2.3.0",
                "text": "A tag name or {@link Ext.dom.Helper} spec used to create the {@link #method!getEl #getEl} which will\nencapsulate this Component.\n\nYou do not normally need to specify this. For the base classes {@link Ext.Component} and\n{@link Ext.container.Container}, this defaults to **'div'**. The more complex Sencha classes use a more\ncomplex DOM structure specified by their own {@link #cfg!renderTpl #renderTpl}s.\n\nThis is intended to allow the developer to create application-specific utility Components encapsulated by\ndifferent DOM elements. Example usage:\n\n    {\n        xtype: 'component',\n        autoEl: {\n            tag: 'img',\n            src: 'http://www.example.com/example.jpg'\n        }\n    }, {\n        xtype: 'component',\n        autoEl: {\n            tag: 'blockquote',\n            html: 'autoEl is cool!'\n        }\n    }, {\n        xtype: 'container',\n        autoEl: 'ul',\n        cls: 'ux-unordered-list',\n        items: {\n            xtype: 'component',\n            autoEl: 'li',\n            html: 'First list item'\n        }\n    }\n",
                "type": "String/Object",
                "src": {
                  "name": "3,429,29",
                  "since": "3,463,15",
                  "text": "3,430,8,1033",
                  "type": "3,429,14"
                }
              },
              {
                "$type": "property",
                "name": "autoRender",
                "text": "This config is intended mainly for non-{@link #cfg!floating #cfg-floating} Components which may or may not be shown. Instead of using\n{@link #cfg!renderTo #renderTo} in the configuration, and rendering upon construction, this allows a Component to render itself\nupon first _{@link Ext.Component#method!show Ext.Component#method-show}_. If {@link #cfg!floating #cfg-floating} is `true`, the value of this config is omitted as if it is `true`.\n\nSpecify as `true` to have this Component render to the document body upon first show.\n\nSpecify as an element, or the ID of an element to have this Component render to a specific element upon first\nshow.\n",
                "type": "Boolean/String/HTMLElement/Ext.dom.Element",
                "src": {
                  "name": "3,467,58",
                  "text": "3,468,8,583",
                  "type": "3,467,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link #scrollable} instead\n",
                "deprecatedVersion": "5.1.0",
                "name": "autoScroll",
                "optional": true,
                "text": "`true` to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary,\n`false` to clip any overflowing content.\n\nThis should not be combined with {@link #cfg!overflowX #overflowX} or  {@link #cfg!overflowY #overflowY}.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "deprecatedMessage": "3,485,8",
                  "deprecatedVersion": "3,485,8",
                  "name": "3,480,24",
                  "text": "3,481,8,232",
                  "type": "3,480,14",
                  "value": "3,480,35"
                }
              },
              {
                "$type": "property",
                "name": "autoShow",
                "since": "2.3.0",
                "text": "`true` to automatically show the component upon creation. This config option may only be used for\n{@link #cfg!floating #cfg-floating} components or components that use {@link #cfg!autoRender #autoRender}.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,489,23",
                  "since": "3,493,15",
                  "text": "3,490,8,176",
                  "type": "3,489,14"
                }
              },
              {
                "$type": "property",
                "name": "axes",
                "text": "Array of {@link Ext.chart.axis.Axis} instances or config objects. For example:\n\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        title: 'Number of Hits',\n        minimum: 0\n    }, {\n        type: 'category',\n        position: 'bottom',\n        title: 'Month of the Year'\n    }]\n",
                "type": "Ext.chart.axis.Axis/Array/Object",
                "src": {
                  "name": "5,311,52",
                  "text": "5,312,12,306",
                  "type": "5,311,18"
                }
              },
              {
                "$type": "property",
                "name": "background",
                "text": "Set the chart background. This can be a gradient object, image, or color.\n\nFor example, if `{@link #cfg!background background}` were to be a color we could set the object as\n\n    background: '#ccc'\n\nYou can specify an image by using:\n\n    background: {\n        type: 'image',\n        src: 'http://path.to.image/'\n    }\n\nAlso you can specify a gradient by using the gradient object syntax:\n\n    background: {\n        type: 'linear',\n        degrees: 0,\n        stops: [\n            {\n                offset: 0,\n                color: 'white'\n            },\n            {\n                offset: 1,\n                color: 'blue'\n            }\n        ]\n    }\n",
                "type": "Object",
                "src": {
                  "name": "5,349,26",
                  "text": "5,349,37,74:5,350,12,559",
                  "type": "5,349,18"
                }
              },
              {
                "$type": "property",
                "name": "baseCls",
                "optional": true,
                "text": "The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class `x-panel-body`. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the `{@link #cfg!baseCls baseCls}` `x-panel` and use\n`{@link #cfg!componentCls componentCls}` to add specific styling for this component.\n",
                "type": "String",
                "value": "'x-component'",
                "src": {
                  "name": "3,498,23",
                  "text": "3,499,8,398",
                  "type": "3,498,14",
                  "value": "3,498,31"
                }
              },
              {
                "$type": "property",
                "name": "bbar",
                "text": "Convenience config. Short for 'Bottom Bar'.\n\n    bbar: [\n      { xtype: 'button', text: 'Button 1' }\n    ]\n\nis equivalent to\n\n    dockedItems: [{\n        xtype: 'toolbar',\n        dock: 'bottom',\n        items: [\n            { xtype: 'button', text: 'Button 1' }\n        ]\n    }]\n",
                "type": "Object/Object[]",
                "src": {
                  "name": "6,482,31",
                  "text": "6,483,8,280",
                  "type": "6,482,14"
                }
              },
              {
                "$type": "property",
                "name": "bind",
                "optional": true,
                "text": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `{@link #cfg!title title}` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n",
                "type": "Object",
                "src": {
                  "name": "8,12,27",
                  "text": "8,13,12,559",
                  "type": "8,12,18"
                }
              },
              {
                "$type": "property",
                "name": "bodyBorder",
                "since": "2.3.0",
                "text": "A shortcut to add or remove the border on the body of a panel. In the classic theme\nthis only applies to a panel which has the {@link #cfg!frame #frame} configuration set to `true`.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,240,23",
                  "since": "6,243,15",
                  "text": "6,241,8,171",
                  "type": "6,240,14"
                }
              },
              {
                "$type": "property",
                "name": "bodyCls",
                "text": "A CSS class, space-delimited string of classes, or array of classes to be applied to the panel's body element.\nThe following examples are all valid:\n\n    bodyCls: 'foo'\n    bodyCls: 'foo bar'\n    bodyCls: ['foo', 'bar']\n",
                "type": "String/String[]",
                "src": {
                  "name": "6,247,31",
                  "text": "6,248,8,220",
                  "type": "6,247,14"
                }
              },
              {
                "$type": "property",
                "name": "bodyPadding",
                "optional": true,
                "text": "A shortcut for setting a padding style on the body element. The value can either be\na number to be applied to all sides, or a normal css string describing padding.\n",
                "type": "Number/String",
                "value": "undefined",
                "src": {
                  "name": "6,257,30",
                  "text": "6,258,8,164",
                  "type": "6,257,14",
                  "value": "6,257,42"
                }
              },
              {
                "$type": "property",
                "name": "bodyStyle",
                "since": "2.3.0",
                "text": "Custom CSS styles to be applied to the panel's body element, which can be supplied as a valid CSS style string,\nan object containing style property name/value pairs or a function that returns such a string or object.\nFor example, these two formats are interpreted to be equivalent:\n\n    bodyStyle: 'background:#ffc; padding:10px;'\n\n    bodyStyle: {\n        background: '#ffc',\n        padding: '10px'\n    }\n",
                "type": "String/Object/Function",
                "src": {
                  "name": "6,263,38",
                  "since": "6,275,15",
                  "text": "6,264,8,408",
                  "type": "6,263,14"
                }
              },
              {
                "$type": "property",
                "name": "border",
                "optional": true,
                "text": "Specify as `false` to render the Panel with zero width borders.\n\nLeaving the value as `true` uses the selected theme's {@link Ext.panel.Panel#var!$panel-border-width Ext.panel.Panel#$panel-border-width}\n\nDefaults to `false` when using or extending Neptune.\n\n**Note:** is ignored when {@link #cfg!frame #frame} is set to **true**.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "6,279,24",
                  "text": "6,280,8,279",
                  "type": "6,279,14",
                  "value": "6,279,31"
                }
              },
              {
                "$type": "property",
                "name": "bubbleEvents",
                "since": "3.4.0",
                "text": "An array of events that, when fired, should be bubbled to any parent container.\nSee {@link Ext.util.Observable#method!enableBubble Ext.util.Observable#enableBubble}.\n",
                "type": "String[]",
                "src": {
                  "name": "2,462,24",
                  "since": "2,465,15",
                  "text": "2,463,8,126",
                  "type": "2,462,14"
                }
              },
              {
                "$type": "property",
                "name": "buttonAlign",
                "text": "The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to\n'right' for buttons/fbar, 'left' for other toolbar types).\n\n**NOTE:** The preferred way to specify toolbars is to use the dockedItems config. Instead of buttonAlign you\nwould add the layout: { pack: 'start' | 'center' | 'end' } option to the dockedItem config.\n",
                "type": "String",
                "src": {
                  "name": "6,451,22",
                  "text": "6,452,8,370",
                  "type": "6,451,14"
                }
              },
              {
                "$type": "property",
                "name": "buttons",
                "text": "Convenience config used for adding buttons docked to the bottom of the panel. This is a\nsynonym for the {@link #cfg!fbar #fbar} config.\n\n    buttons: [\n      { text: 'Button 1' }\n    ]\n\nis equivalent to\n\n    dockedItems: [{\n        xtype: 'toolbar',\n        dock: 'bottom',\n        ui: 'footer',\n        defaults: {\n            minWidth: 200\n        },\n        items: [\n            { xtype: 'component', flex: 1 },\n            { xtype: 'button', text: 'Button 1' }\n        ]\n    }]\n\nThe {@link #cfg!minButtonWidth #minButtonWidth} is used as the default {@link Ext.button.Button#cfg!minWidth Ext.button.Button#minWidth} for\neach of the buttons in the buttons toolbar.\n",
                "type": "Object/Object[]",
                "src": {
                  "name": "6,573,31",
                  "text": "6,574,8,616",
                  "type": "6,573,14"
                }
              },
              {
                "$type": "property",
                "name": "center",
                "text": "Determines the center of the polar chart.\nUpdated when the chart performs layout.\n",
                "type": "Array",
                "src": {
                  "name": "0,26,25",
                  "text": "0,26,32,42:0,27,12,40",
                  "type": "0,26,18"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.util.ElementContainer#childEls",
                "name": "childEls",
                "type": "Object/String[]/Object[]",
                "src": {
                  "inheritdoc": "3,525,8",
                  "name": "3,524,40",
                  "type": "3,524,14"
                }
              },
              {
                "$type": "property",
                "name": "closable",
                "text": "True to display the 'close' tool button and allow the user to close the window, false to hide the button and\ndisallow closing the window.\n\nBy default, when close is requested by clicking the close button in the header, the {@link #method!close #method-close} method will be\ncalled. This will _{@link Ext.Component#method!destroy Ext.Component#method-destroy}_ the Panel and its content meaning that it may not be\nreused.\n\nTo make closing a Panel _hide_ the Panel so that it may be reused, set {@link #cfg!closeAction #closeAction} to 'hide'.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,291,23",
                  "text": "6,292,8,490",
                  "type": "6,291,14"
                }
              },
              {
                "$type": "property",
                "name": "closeAction",
                "text": "The action to take when the close header tool is clicked:\n\n- **`'{@link #method!destroy #method-destroy}'`** :\n\n  {@link #method!remove #method-remove} the window from the DOM and {@link Ext.Component#method!destroy Ext.Component#method-destroy} it and all descendant\n  Components. The window will **not** be available to be redisplayed via the {@link #method!show #method-show} method.\n\n- **`'{@link #method!hide #method-hide}'`** :\n\n  {@link #method!hide #method-hide} the window by setting visibility to hidden and applying negative offsets. The window will be\n  available to be redisplayed via the {@link #method!show #method-show} method.\n\n**Note:** This behavior has changed! setting *does* affect the {@link #method!close #method-close} method which will invoke the\nappropriate closeAction.\n",
                "type": "String",
                "src": {
                  "name": "6,304,22",
                  "text": "6,305,8,687",
                  "type": "6,304,14"
                }
              },
              {
                "$type": "property",
                "name": "closeToolText",
                "text": "Text to be announced by screen readers when the\n**close** {@link Ext.panel.Tool} is focused.  Will also be set as the close\ntool's {@link Ext.panel.Tool#cfg!tooltip Ext.panel.Tool#cfg-tooltip} text.\n\n**Note:** Applicable when the panel is {@link #cfg!closable #closable}: true\n",
                "type": "String",
                "src": {
                  "name": "6,324,22",
                  "text": "6,324,36,48:6,325,8,201",
                  "type": "6,324,14"
                }
              },
              {
                "$type": "property",
                "name": "cls",
                "optional": true,
                "since": "1.1.0",
                "text": "An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.\n",
                "type": "String/String[]",
                "value": "''",
                "src": {
                  "name": "3,541,32",
                  "since": "3,546,15",
                  "text": "3,542,8,281",
                  "type": "3,541,14",
                  "value": "3,541,36"
                }
              },
              {
                "$type": "property",
                "name": "collapsed",
                "text": "`true` to render the panel collapsed, `false` to render it expanded.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,334,23",
                  "text": "6,335,8,69",
                  "type": "6,334,14"
                }
              },
              {
                "$type": "property",
                "name": "collapsedCls",
                "text": "A CSS class to add to the panel's element after it has been collapsed.\n",
                "type": "String",
                "src": {
                  "name": "6,340,22",
                  "text": "6,341,8,71",
                  "type": "6,340,14"
                }
              },
              {
                "$type": "property",
                "name": "collapseDirection",
                "text": "The direction to collapse the Panel when the toggle button is clicked.\n\nDefaults to the {@link #cfg!headerPosition #cfg-headerPosition}\n\n**Important: This config is _ignored_ for {@link #cfg!collapsible #collapsible} Panels which are direct child items of a {@link Ext.layout.container.Border}.**\n\nSpecify as `'top'`, `'bottom'`, `'left'` or `'right'`.\n",
                "type": "String",
                "src": {
                  "name": "6,346,22",
                  "text": "6,347,8,330",
                  "type": "6,346,14"
                }
              },
              {
                "$type": "property",
                "name": "collapseFirst",
                "text": "`true` to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in\nthe panel's title bar, `false` to render it last.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,358,23",
                  "text": "6,359,8,161",
                  "type": "6,358,14"
                }
              },
              {
                "$type": "property",
                "name": "collapseMode",
                "text": "**Important: this config is only effective for {@link #cfg!collapsible #collapsible} Panels which are direct child items of a\n{@link Ext.layout.container.Border}.**\n\nWhen _not_ a direct child item of a {@link Ext.layout.container.Border}, then the Panel's header\nremains visible, and the body is collapsed to zero dimensions. If the Panel has no header, then a new header\n(orientated correctly depending on the {@link #cfg!collapseDirection #collapseDirection}) will be inserted to show a the title and a re-\nexpand tool.\n\nWhen a child item of a {@link Ext.layout.container.Border}, this config has three possible values:\n\n- `{@link undefined}` - When collapsed, a placeholder {@link Ext.panel.Header} is injected into the layout to\n  represent the Panel and to provide a UI with a Tool to allow the user to re-expand the Panel.\n\n- `\"header\"` - The Panel collapses to leave its header visible as when not inside a\n  {@link Ext.layout.container.Border}.\n\n- `\"mini\"` - The Panel collapses without a visible header.\n",
                "type": "String",
                "src": {
                  "name": "6,375,22",
                  "text": "6,376,8,1028",
                  "type": "6,375,14"
                }
              },
              {
                "$type": "property",
                "name": "collapseToolText",
                "text": "Text to be announced by screen readers when\n**collapse** {@link Ext.panel.Tool} is focused.  Will also be set as the\ncollapse tool's {@link Ext.panel.Tool#cfg!tooltip Ext.panel.Tool#cfg-tooltip} text.\n\n**Note:** Applicable when the panel is {@link #cfg!collapsible #collapsible}: true\n",
                "type": "String",
                "src": {
                  "name": "6,397,22",
                  "text": "6,397,39,44:6,398,8,210",
                  "type": "6,397,14"
                }
              },
              {
                "$type": "property",
                "name": "collapsible",
                "text": "True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button\narea. False to keep the panel sized either statically, or by an owning layout manager, with no toggle Tool.\nWhen a panel is used in a {@link Ext.layout.container.Border}, the {@link #cfg!floatable #floatable} option\ncan influence the behavior of collapsing.\nSee {@link #cfg!collapseMode #collapseMode} and {@link #cfg!collapseDirection #collapseDirection}\n",
                "type": "Boolean",
                "src": {
                  "name": "6,365,23",
                  "text": "6,366,8,423",
                  "type": "6,365,14"
                }
              },
              {
                "$type": "property",
                "name": "colors",
                "text": "Array of colors/gradients to override the color of items and legends.\n",
                "type": "Array",
                "src": {
                  "name": "5,333,25",
                  "text": "5,333,32,70",
                  "type": "5,333,18"
                }
              },
              {
                "$type": "property",
                "name": "columnWidth",
                "optional": true,
                "text": "Defines the column width inside {@link Ext.layout.container.Column}.\n\nThe columnWidth property is always evaluated as a percentage and must be a decimal value greater than 0 and\nless than 1 (e.g., .25).  See the description at the top of {@link Ext.layout.container.Column} for\nadditional usage details when combining width and columnWidth configs within the layout.\n",
                "type": "Number",
                "src": {
                  "name": "3,550,23",
                  "text": "3,551,8,395",
                  "type": "3,550,14"
                }
              },
              {
                "$type": "property",
                "name": "componentCls",
                "text": "CSS Class to be added to a components root level element to give distinction to it via styling.\n",
                "type": "String",
                "src": {
                  "name": "3,559,22",
                  "text": "3,560,8,96",
                  "type": "3,559,14"
                }
              },
              {
                "$type": "property",
                "name": "componentLayout",
                "text": "The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.\n\nGenerally, developers will not use this configuration as all provided Components which need their internal\nelements sizing (Such as {@link Ext.form.field.Base}) come with their own componentLayout managers.\n\nThe {@link Ext.layout.container.Auto} will be used on instances of the base Ext.Component\nclass which simply sizes the Component's encapsulating element to the height and width specified in the\n{@link #method!setSize #setSize} method.\n",
                "type": "String/Object",
                "src": {
                  "name": "3,565,29",
                  "text": "3,566,8,670",
                  "type": "3,565,14"
                }
              },
              {
                "$type": "property",
                "name": "constrain",
                "text": "True to constrain the panel within its containing element, false to allow it to fall outside of its containing\nelement. By default floating components such as Windows will be rendered to `document.body`. To render and constrain the window within\nanother element specify {@link #cfg!renderTo #renderTo}. Optionally the header only can be constrained\nusing {@link #cfg!constrainHeader #constrainHeader}.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,416,23",
                  "text": "6,417,8,367",
                  "type": "6,416,14"
                }
              },
              {
                "$type": "property",
                "name": "constrainHeader",
                "text": "True to constrain the panel header within its containing element (allowing the panel body to fall outside of\nits containing element) or false to allow the header to fall outside its containing element.\nOptionally the entire panel can be constrained using {@link #cfg!constrain #constrain}.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,425,23",
                  "text": "6,426,8,275",
                  "type": "6,425,14"
                }
              },
              {
                "$type": "property",
                "name": "constraintInsets",
                "text": "An object or a string (in TRBL order) specifying insets from the configured {@link #cfg!constrainTo #constrainTo}\nwithin which this component must be constrained when positioning or sizing.\nexample:\n\n   constraintInsets: '10 10 10 10' // Constrain with 10px insets from parent\n",
                "type": "Object/String",
                "src": {
                  "name": "3,580,29",
                  "text": "3,581,8,277",
                  "type": "3,580,14"
                }
              },
              {
                "$type": "property",
                "name": "constrainTo",
                "text": "A {@link Ext.util.Region} (or an element from which a Region measurement will be read) which is used\nto constrain the component. Only applies when the component is floating.\n",
                "type": "Ext.util.Region/Ext.dom.Element",
                "src": {
                  "name": "3,589,47",
                  "text": "3,590,8,181",
                  "type": "3,589,14"
                }
              },
              {
                "$type": "property",
                "name": "contentEl",
                "since": "3.4.0",
                "text": "Specify an existing HTML element, or the `{@link #cfg!id id}` of an existing HTML element to use as the content for this component.\n\nThis config option is used to take an existing HTML element and place it in the layout element of a new component\n(it simply moves the specified DOM element _after the Component is rendered_ to use as the content.\n\n**Notes:**\n\nThe specified HTML element is appended to the layout element of the component _after any configured\n{@link #cfg!html #html} has been inserted_, and so the document will not contain this element at the time\nthe {@link #event!render #event-render} event is fired.\n\nThe specified HTML element used will not participate in any **`{@link Ext.container.Container#cfg!layout Ext.container.Container#layout}`**\nscheme that the Component may use. It is just HTML. Layouts operate on child\n**`{@link Ext.container.Container#cfg!items Ext.container.Container#cfg-items}`**.\n\nAdd either the `x-hidden` or the `x-hidden-display` CSS class to prevent a brief flicker of the content before it\nis rendered to the panel.\n",
                "type": "String",
                "src": {
                  "name": "3,595,22",
                  "since": "3,614,15",
                  "text": "3,596,8,974",
                  "type": "3,595,14"
                }
              },
              {
                "$type": "property",
                "name": "controller",
                "text": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n",
                "type": "String/Object/Ext.app.ViewController",
                "src": {
                  "name": "8,45,56",
                  "text": "8,46,12,637",
                  "type": "8,45,18"
                }
              },
              {
                "$type": "property",
                "name": "data",
                "since": "3.4.0",
                "text": "The initial set of data to apply to the `{@link #cfg!tpl #tpl}` to update the content\narea of the Component.\n",
                "type": "Object",
                "src": {
                  "name": "3,279,26",
                  "since": "3,283,19",
                  "text": "3,280,12,101",
                  "type": "3,279,18"
                }
              },
              {
                "$type": "property",
                "name": "defaultAlign",
                "optional": true,
                "text": "The default {@link Ext.util.Positionable#method!getAlignToXY Ext.util.Positionable#getAlignToXY} anchor position value for this component\nrelative to its {@link #cfg!alignTarget #alignTarget} (which defaults to its owning Container).\n\n_Only applicable if this component is {@link #cfg!floating #cfg-floating}_\n\n*Used upon first show*.\n",
                "type": "String",
                "value": "\"c-c\"",
                "src": {
                  "name": "3,618,23",
                  "text": "3,619,8,291",
                  "type": "3,618,14",
                  "value": "3,618,36"
                }
              },
              {
                "$type": "property",
                "name": "defaultButton",
                "optional": true,
                "text": "Reference name of the component to act as the default\nbutton for this Panel. Default button is activated by pressing Enter key while focus\nis contained within the Panel's {@link #cfg!defaultButtonTarget #defaultButtonTarget}.\n\nThe most obvious use for `{@link #cfg!defaultButton defaultButton}` is submitting a form:\n\n     var loginWindow = new Ext.window.Window({\n         autoShow: true,\n         width: 300,\n         layout: 'form',\n         title: 'Enter login information',\n         referenceHolder: true,\n         defaultFocus: 'textfield',\n         defaultButton: 'okButton',\n\n         items: [{\n             xtype: 'textfield',\n             fieldLabel: 'User name'\n         }, {\n             xtype: 'textfield',\n             fieldLabel: 'Password'\n         }],\n\n         buttons: [{\n             reference: 'okButton',\n             text: 'Login',\n             handler: function() {\n                 Ext.Msg.alert('Submit', 'Your login is being processed');\n             }\n         }]\n     });\n",
                "type": "String",
                "src": {
                  "name": "6,841,23",
                  "text": "6,841,38,54:6,842,8,895",
                  "type": "6,841,14"
                }
              },
              {
                "$type": "property",
                "name": "defaultButtonTarget",
                "optional": true,
                "text": "Name of the element that will be the target of\n{@link #cfg!defaultButton #defaultButton} keydown listener. The default element is Panel body, which\nmeans that pressing Enter key while focus is on docked items will not fire `{@link #cfg!defaultButton defaultButton}`\naction.\n\nIf you want `{@link #cfg!defaultButton defaultButton}` action to fire in docked items, set this config to `\"el\"`.\n",
                "type": "String",
                "src": {
                  "name": "6,875,23",
                  "text": "6,875,44,47:6,876,8,269",
                  "type": "6,875,14"
                }
              },
              {
                "$type": "property",
                "name": "defaultDockWeights",
                "text": "This object holds the default weights applied to dockedItems that have no weight. These start with a\nweight of 1, to allow negative weights to insert before top items and are odd numbers\nso that even weights can be used to get between different dock orders.\n\nTo make default docking order match border layout, do this:\n\n     Ext.panel.Panel.prototype.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };\n\nChanging these defaults as above or individually on this object will effect all Panels.\nTo change the defaults on a single panel, you should replace the entire object:\n\n     initComponent: function () {\n         // NOTE: Don't change members of defaultDockWeights since the object is shared.\n         this.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };\n\n         this.callParent();\n     }\n\nTo change only one of the default values, you do this:\n\n     initComponent: function () {\n         // NOTE: Don't change members of defaultDockWeights since the object is shared.\n         this.defaultDockWeights = Ext.applyIf({ top: 10 }, this.defaultDockWeights);\n\n         this.callParent();\n     }\n",
                "type": "Object",
                "src": {
                  "name": "9,30,22",
                  "text": "9,31,8,1122",
                  "type": "9,30,14"
                }
              },
              {
                "$type": "property",
                "name": "defaultFocus",
                "text": "\nSpecifies a child Component to receive focus when this Container's {@link #method!focus #method-focus}\nmethod is called. Should be a valid {@link Ext.ComponentQuery} selector.\n",
                "type": "String",
                "src": {
                  "name": "2,650,22",
                  "text": "2,651,8,169",
                  "type": "2,650,14"
                }
              },
              {
                "$type": "property",
                "name": "defaultListenerScope",
                "text": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n",
                "type": "Boolean",
                "src": {
                  "name": "8,84,27",
                  "text": "8,85,12,508",
                  "type": "8,84,18"
                }
              },
              {
                "$type": "property",
                "name": "defaults",
                "since": "2.3.0",
                "text": "This option is a means of applying default settings to all added items whether added\nthrough the {@link #cfg!items #cfg-items} config or via the {@link #method!add #method-add} or {@link #method!insert #insert} methods.\n\nDefaults are applied to both config objects and instantiated components conditionally\nso as not to override existing properties in the item (see {@link Ext#method!applyIf Ext#applyIf}).\n\nIf the defaults option is specified as a function, then the function will be called\nusing this Container as the scope (`this` reference) and passing the added item as\nthe first parameter. Any resulting object from that call is then applied to the item\nas default properties.\n\nFor example, to automatically apply padding to the body of each of a set of\ncontained {@link Ext.panel.Panel} items, you could pass:\n`defaults: {bodyStyle:'padding:15px'}`.\n\nUsage:\n\n    defaults: { // defaults are applied to items, not the container\n        scrollable: true\n    },\n    items: [\n        // default will not be applied here, panel1 will be scrollable: false\n        {\n            xtype: 'panel',\n            id: 'panel1',\n            scrollable: false\n        },\n        // this component will have scrollable: true\n        new Ext.panel.Panel({\n            id: 'panel2'\n        })\n    ]\n",
                "type": "Object/Function",
                "src": {
                  "name": "2,469,31",
                  "since": "2,503,15",
                  "text": "2,470,8,1231",
                  "type": "2,469,14"
                }
              },
              {
                "$type": "property",
                "name": "defaultType",
                "optional": true,
                "since": "2.3.0",
                "text": "The default {@link Ext.Component} of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.\n",
                "type": "String",
                "value": "\"panel\"",
                "src": {
                  "name": "2,507,24",
                  "since": "2,510,16",
                  "text": "2,508,9,192",
                  "type": "2,507,15",
                  "value": "2,507,36"
                }
              },
              {
                "$type": "property",
                "name": "detachOnRemove",
                "optional": true,
                "text": "True to move any component to the {@link Ext#method!getDetachedBody Ext#getDetachedBody} when the component is\nremoved from this container. This option is only applicable when the component is not destroyed while\nbeing removed, see {@link #cfg!autoDestroy #autoDestroy} and {@link #method!remove #method-remove}. If this option is set to false, the DOM\nof the component will remain in the current place until it is explicitly moved.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "2,515,24",
                  "text": "2,516,8,387",
                  "type": "2,515,14",
                  "value": "2,515,39"
                }
              },
              {
                "$type": "property",
                "name": "disabled",
                "since": "2.3.0",
                "text": "`true` to disable the component.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,629,23",
                  "since": "3,631,15",
                  "text": "3,630,8,33",
                  "type": "3,629,14"
                }
              },
              {
                "$type": "property",
                "name": "disabledCls",
                "optional": true,
                "text": "CSS class to add when the Component is disabled.\n",
                "type": "String",
                "value": "'x-item-disabled'",
                "src": {
                  "name": "3,652,23",
                  "text": "3,653,8,49",
                  "type": "3,652,14",
                  "value": "3,652,35"
                }
              },
              {
                "$type": "property",
                "name": "dock",
                "text": "The side of the {@link Ext.panel.Panel} where this component is to be\ndocked when specified in the panel's\n{@link Ext.panel.Panel#cfg!dockedItems Ext.panel.Panel#dockedItems} config.\n\nPossible values are:\n\n - top\n - bottom\n - left\n - right\n",
                "type": "'top'/'bottom'/'left'/'right'",
                "src": {
                  "name": "3,658,45",
                  "text": "3,659,8,226",
                  "type": "3,658,14"
                }
              },
              {
                "$type": "property",
                "name": "dockedItems",
                "text": "A component or series of components to be added as docked items to this panel. The docked items can be docked to\neither the top, right, left or bottom of a panel. This is typically used for things like toolbars or tab bars:\n\n    var panel = new Ext.panel.Panel({\n        dockedItems: [{\n            xtype: 'toolbar',\n            dock: 'top',\n            items: [{\n                text: 'Docked to the top'\n            }]\n        }]\n    });\n",
                "type": "Object/Object[]",
                "src": {
                  "name": "6,434,31",
                  "text": "6,435,8,440",
                  "type": "6,434,14"
                }
              },
              {
                "$type": "property",
                "inheritdoc": true,
                "localDoc": "**NOTE:** The private {@link Ext.panel.DD} class is used instead of\nComponentDragger when {@link #simpleDrag} is false (_default_).  In this case you\nmay pass a config for {@link Ext.dd.DragSource}.\n\nSee also {@link #dd}.\n",
                "name": "draggable",
                "src": {
                  "inheritdoc": "6,603,8",
                  "localDoc": "6,604,18",
                  "name": "6,602,13"
                }
              },
              {
                "$type": "property",
                "name": "engine",
                "optional": true,
                "text": "Defines the engine (type of surface) used to render draw container contents.\n\nThe render engine is selected automatically depending on the platform used. Priority\nis given to the {@link Ext.draw.engine.Canvas} engine due to its performance advantage.\n\nYou may also set the engine config to be `{@link Ext.draw.engine.Svg}` if so desired.\n",
                "type": "String",
                "value": "\"Ext.draw.engine.Canvas\"",
                "src": {
                  "name": "10,48,23",
                  "text": "10,49,8,330",
                  "type": "10,48,14",
                  "value": "10,48,30"
                }
              },
              {
                "$type": "property",
                "name": "expandToolText",
                "text": "Text to be announced by screen readers when\n**expand** {@link Ext.panel.Tool} is focused.  Will also be set as the\nexpand tool's {@link Ext.panel.Tool#cfg!tooltip Ext.panel.Tool#cfg-tooltip} text.\n\n**Note:** Applicable when the panel is {@link #cfg!collapsible #collapsible}: true\n",
                "type": "String",
                "src": {
                  "name": "6,406,22",
                  "text": "6,406,37,44:6,407,8,206",
                  "type": "6,406,14"
                }
              },
              {
                "$type": "property",
                "name": "fbar",
                "text": "Convenience config used for adding items to the bottom of the panel. Short for Footer Bar.\n\n    fbar: [\n      { type: 'button', text: 'Button 1' }\n    ]\n\nis equivalent to\n\n    dockedItems: [{\n        xtype: 'toolbar',\n        dock: 'bottom',\n        ui: 'footer',\n        defaults: {\n            minWidth: 200\n        },\n        items: [\n            { xtype: 'component', flex: 1 },\n            { xtype: 'button', text: 'Button 1' }\n        ]\n    }]\n\nThe {@link #cfg!minButtonWidth #minButtonWidth} is used as the default {@link Ext.button.Button#cfg!minWidth Ext.button.Button#minWidth} for\neach of the buttons in the fbar.\n",
                "type": "Object/Object[]",
                "src": {
                  "name": "6,503,31",
                  "text": "6,504,8,583",
                  "type": "6,503,14"
                }
              },
              {
                "$type": "property",
                "name": "fixed",
                "optional": true,
                "text": "Configure as `true` to have this Component fixed at its `X, Y` coordinates in the browser viewport, immune\nto scrolling the document.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,46,24",
                  "text": "1,47,8,134",
                  "type": "1,46,14",
                  "value": "1,46,30"
                }
              },
              {
                "$type": "property",
                "name": "flex",
                "text": "Flex may be applied to **child items** of a box layout ({@link Ext.layout.container.VBox} or\n{@link Ext.layout.container.HBox}). Each child item with a flex property will\nfill space (horizontally in `hbox`, vertically in `vbox`) according to that item's\n**relative** flex value compared to the sum of all items with a flex value specified.\n\nAny child items that have either a `{@link #cfg!flex flex}` of `0` or `{@link undefined}`\nwill not be 'flexed' (the initial size will not be changed).\n",
                "type": "Number",
                "src": {
                  "name": "3,698,22",
                  "text": "3,699,8,476",
                  "type": "3,698,14"
                }
              },
              {
                "$type": "property",
                "name": "floatable",
                "text": "**Important: This config is only effective for {@link #cfg!collapsible #collapsible} Panels which are direct child items of a\n{@link Ext.layout.container.Border}.**\n\ntrue to allow clicking a collapsed Panel's {@link #cfg!placeholder #placeholder} to display the Panel floated above the layout,\nfalse to force the user to fully expand a collapsed region by clicking the expand button to see it again.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,612,23",
                  "text": "6,613,8,380",
                  "type": "6,612,14"
                }
              },
              {
                "$type": "property",
                "name": "floating",
                "text": "Specify as true to float the Component outside of the document flow using CSS absolute positioning.\n\nComponents such as {@link Ext.window.Window}s and {@link Ext.menu.Menu}s are floating by default.\n\nFloating Components that are programmatically {@link Ext.Component#method!render Ext.Component#method-render} will register\nthemselves with the global {@link Ext.WindowManager}\n\n### Floating Components as child items of a Container\n\nA floating Component may be used as a child item of a Container. This just allows the floating Component to seek\na ZIndexManager by examining the ownerCt chain.\n\nWhen configured as floating, Components acquire, at render time, a {@link Ext.ZIndexManager} which\nmanages a stack of related floating Components. The ZIndexManager sorts its stack according to\nan incrementing access counter and the {@link Ext.util.Floating#cfg!alwaysOnTop Ext.util.Floating#alwaysOnTop} config when the Component's {@link #method!toFront #toFront} method is called.\n\nThe ZIndexManager is found by traversing up the {@link #property!ownerCt #ownerCt} chain to find an ancestor which itself is\nfloating. This is so that descendant floating Components of floating _Containers_ (Such as a ComboBox dropdown\nwithin a Window) can have its zIndex managed relative to any siblings, but always **above** that floating\nancestor Container.\n\nIf no floating ancestor is found, a floating Component registers itself with the default {@link Ext.WindowManager}.\n\nFloating components _do not participate in the Container's layout_. Because of this, they are not rendered until\nyou explicitly {@link #method!show #method-show} them.\n\nAfter rendering, the ownerCt reference is deleted, and the {@link #property!floatParent #floatParent} property is set to the found\nfloating ancestor Container. If no floating ancestor Container was found the {@link #property!floatParent #floatParent} property will\nnot be set.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,709,23",
                  "text": "3,710,8,1828",
                  "type": "3,709,14"
                }
              },
              {
                "$type": "property",
                "name": "focusCls",
                "optional": true,
                "text": "CSS class that will be added to focused\nComponent, and removed when Component blurs.\n",
                "type": "String",
                "value": "'x-focus'",
                "src": {
                  "name": "11,38,23",
                  "text": "11,38,43,40:11,39,8,45",
                  "type": "11,38,14",
                  "value": "11,38,32"
                }
              },
              {
                "$type": "property",
                "name": "focusOnToFront",
                "text": "Specifies whether the floated component should be automatically {@link Ext.Component#method!focus Ext.Component#method-focus} when\nit is {@link #method!toFront #toFront}.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,10,23",
                  "text": "1,11,8,157",
                  "type": "1,10,14"
                }
              },
              {
                "$type": "property",
                "name": "formBind",
                "optional": true,
                "text": "When inside FormPanel, any component configured with `formBind: true` will\nbe enabled/disabled depending on the validity state of the form.\nSee {@link Ext.form.Panel} for more information and example.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "3,744,24",
                  "text": "3,745,8,201",
                  "type": "3,744,14",
                  "value": "3,744,33"
                }
              },
              {
                "$type": "property",
                "name": "frame",
                "text": "True to apply a frame to the panel.\n\n**Note:** `frame: true` overrides {@link #cfg!border #border}\n",
                "type": "Boolean",
                "src": {
                  "name": "6,622,23",
                  "text": "6,623,8,100",
                  "type": "6,622,14"
                }
              },
              {
                "$type": "property",
                "name": "frameHeader",
                "text": "True to apply a frame to the panel panels header (if 'frame' is true).\n",
                "type": "Boolean",
                "src": {
                  "name": "6,630,23",
                  "text": "6,631,8,71",
                  "type": "6,630,14"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "inheritdoc": "Ext.panel.Header#cfg-glyph",
                "name": "glyph",
                "src": {
                  "accessor": "6,174,12",
                  "inheritdoc": "6,173,12",
                  "name": "6,172,17"
                }
              },
              {
                "$type": "property",
                "name": "gradients",
                "text": "Defines a set of gradients that can be used as color properties\n(fillStyle and strokeStyle, but not shadowColor) in sprites.\nThe gradients array is an array of objects with the following properties:\n- **id** - string - The unique name of the gradient.\n- **type** - string, optional - The type of the gradient. Available types are: 'linear', 'radial'. Defaults to 'linear'.\n- **angle** - number, optional - The angle of the gradient in degrees.\n- **stops** - array - An array of objects with 'color' and 'offset' properties, where 'offset' is a real number from 0 to 1.\n\nFor example:\n\n    gradients: [{\n        id: 'gradientId1',\n        type: 'linear',\n        angle: 45,\n        stops: [{\n            offset: 0,\n            color: 'red'\n        }, {\n           offset: 1,\n           color: 'yellow'\n        }]\n    }, {\n       id: 'gradientId2',\n       type: 'radial',\n       stops: [{\n           offset: 0,\n           color: '#555',\n       }, {\n           offset: 1,\n           color: '#ddd',\n       }]\n    }]\n\nThen the sprites can use 'gradientId1' and 'gradientId2' by setting the color attributes to those ids, for example:\n\n    sprite.setAttributes({\n        fillStyle: 'url(#gradientId1)',\n        strokeStyle: 'url(#gradientId2)'\n    });\n",
                "type": "Object[]",
                "src": {
                  "name": "10,152,28",
                  "text": "10,153,12,1245",
                  "type": "10,152,18"
                }
              },
              {
                "$type": "property",
                "name": "header",
                "optional": true,
                "text": "Pass as `false` to prevent a Header from being created and shown.\n\nPass as a config object (optionally containing an `{@link #cfg!xtype xtype}`) to custom-configure this Panel's header.\n\nSee {@link Ext.panel.Header} for all the options that may be specified here.\n\nA {@link Ext.panel.Header} is a {@link Ext.container.Container} which contains the Panel's {@link #cfg!title #title} and {@link #cfg!tools #tools}.\nYou may also configure the Panel's `{@link #cfg!header header}` option with its own child items which go *before* the {@link #cfg!tools #tools}\n\nBy default the panel {@link #cfg!title #title} is inserted after items configured in this config, but before any tools.\nTo insert the title at any point in the full array, specify the {@link Ext.panel.Header#cfg!titlePosition Ext.panel.Header#cfg-titlePosition} config:\n\n    new Ext.panel.Panel({\n        title: 'Test',\n        tools: [{\n            type: 'refresh'\n        }, {\n            type: 'help'\n        }],\n        titlePosition: 2 // Title will come AFTER the two tools\n        ...\n    });\n",
                "type": "Boolean/Object",
                "src": {
                  "name": "6,637,31",
                  "text": "6,638,8,968",
                  "type": "6,637,14"
                }
              },
              {
                "$type": "property",
                "name": "headerOverCls",
                "text": "Optional CSS class to apply to the header element on mouseover\n",
                "type": "String",
                "src": {
                  "name": "6,664,22",
                  "text": "6,665,8,63",
                  "type": "6,664,14"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "name": "headerPosition",
                "optional": true,
                "text": "Specify as `'top'`, `'bottom'`, `'left'` or `'right'`.\n",
                "type": "'top'/'bottom'/'left'/'right'",
                "value": "'top'",
                "src": {
                  "accessor": "6,181,12",
                  "name": "6,179,50",
                  "text": "6,180,12,55",
                  "type": "6,179,18",
                  "value": "6,179,65"
                }
              },
              {
                "$type": "property",
                "name": "height",
                "text": "The height of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.\n",
                "type": "Number/String",
                "src": {
                  "name": "3,762,29",
                  "text": "3,763,8,149",
                  "type": "3,762,14"
                }
              },
              {
                "$type": "property",
                "name": "hidden",
                "since": "2.3.0",
                "text": "`true` to hide the component.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,768,23",
                  "since": "3,770,15",
                  "text": "3,769,8,30",
                  "type": "3,768,14"
                }
              },
              {
                "$type": "property",
                "name": "hideCollapseTool",
                "text": "`true` to hide the expand/collapse toggle button when `{@link #cfg!collapsible #collapsible} == true`, `false` to display it.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,669,23",
                  "text": "6,670,8,109",
                  "type": "6,669,14"
                }
              },
              {
                "$type": "property",
                "name": "hideMode",
                "since": "1.1.0",
                "text": "A String which specifies how this Component's encapsulating DOM element will be hidden. Values may be:\n\n  - `'display'` : The Component will be hidden using the `display: none` style.\n  - `'visibility'` : The Component will be hidden using the `visibility: hidden` style.\n  - `'offsets'` : The Component will be hidden by absolutely positioning it out of the visible area of the document.\n    This is useful when a hidden Component must maintain measurable dimensions. Hiding using `display` results in a\n    Component having zero dimensions.\n",
                "type": "String",
                "src": {
                  "name": "3,775,22",
                  "since": "3,784,15",
                  "text": "3,776,8,544",
                  "type": "3,775,14"
                }
              },
              {
                "$type": "property",
                "name": "highlightItem",
                "text": "The current highlight item in the chart.\nThe object must be the one that you get from item events.\n\nNote that series can also own highlight items.\nThis notion is separate from this one and should not be used at the same time.\n",
                "type": "Object",
                "src": {
                  "name": "5,435,26",
                  "text": "5,436,12,226",
                  "type": "5,435,18"
                }
              },
              {
                "$type": "property",
                "name": "html",
                "optional": true,
                "since": "3.4.0",
                "text": "An HTML fragment, or a {@link Ext.dom.Helper} specification to use as the layout element content.\nThe HTML content is added after the component is rendered, so the document will not contain this HTML at the time\nthe {@link #event!render #event-render} event is fired. This content is inserted into the body _before_ any configured {@link #cfg!contentEl #contentEl}\nis appended.\n",
                "type": "String/Object",
                "value": "''",
                "src": {
                  "name": "3,789,30",
                  "since": "3,795,15",
                  "text": "3,790,8,360",
                  "type": "3,789,14",
                  "value": "3,789,35"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "inheritdoc": "Ext.panel.Header#cfg-icon",
                "name": "icon",
                "src": {
                  "accessor": "6,188,12",
                  "inheritdoc": "6,187,12",
                  "name": "6,186,17"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "inheritdoc": "Ext.panel.Header#cfg-iconAlign",
                "name": "iconAlign",
                "src": {
                  "accessor": "6,195,12",
                  "inheritdoc": "6,194,12",
                  "name": "6,193,17"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "inheritdoc": "Ext.panel.Header#cfg-iconCls",
                "name": "iconCls",
                "src": {
                  "accessor": "6,202,12",
                  "inheritdoc": "6,201,12",
                  "name": "6,200,17"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "since": "1.1.0",
                "text": "The **unique** id of this component instance.\n\nUse of this config should be considered carefully as this value must be unique across\nall existing components. Components created with an `{@link #cfg!id id}` may be accessed globally\nusing {@link Ext#getCmp Ext.getCmp}.\n\nInstead of using assigned ids, consider a {@link #cfg!reference #reference} config and a {@link #cfg!controller #cfg-controller}\nto respond to events and perform processing upon this Component.\n\nAlternatively, {@link #cfg!itemId #itemId} and {@link Ext.ComponentQuery} can be\nused to perform selector-based searching for Components analogous to DOM querying.\nThe {@link Ext.container.Container} class contains several helpful\n{@link Ext.container.Container#method!down Ext.container.Container#down} to query its descendant\nComponents by selector.\n\nNote that this `{@link #cfg!id id}` will also be used as the element id for the containing HTML\nelement that is rendered to the page for this component. This allows you to write\nid-based CSS rules to style the specific instance of this component uniquely, and\nalso to select sub-elements using this component's `{@link #cfg!id id}` as the parent.\n\nDefaults to an {@link #method!getId #getId}.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed by\n(optional) additional letters, underscores, digits or hyphens.\n",
                "type": "String",
                "src": {
                  "name": "3,799,22",
                  "since": "3,825,15",
                  "text": "3,800,8,1290",
                  "type": "3,799,14"
                }
              },
              {
                "$type": "property",
                "name": "innerPadding",
                "text": "The amount of inner padding in pixels.\nInner padding is the padding from the outermost angular axis to the series.\n",
                "type": "Number",
                "src": {
                  "name": "0,37,26",
                  "text": "0,37,39,39:0,38,12,76",
                  "type": "0,37,18"
                }
              },
              {
                "$type": "property",
                "name": "insetPadding",
                "text": "The amount of inset padding in pixels for the chart.\nInset padding is the padding from the boundary of the chart to any of its contents.\n",
                "type": "Object/Number/String",
                "src": {
                  "name": "5,338,40",
                  "text": "5,338,53,53:5,339,12,84",
                  "type": "5,338,18"
                }
              },
              {
                "$type": "property",
                "name": "interactions",
                "text": "Interactions are optional modules that can be plugged in to a chart to allow the user to interact\nwith the chart and its data in special ways. The `{@link #cfg!interactions interactions}` config takes an Array of Object\nconfigurations, each one corresponding to a particular interaction class identified by a `type` property:\n\n    new Ext.chart.AbstractChart({\n        renderTo: Ext.getBody(),\n        width: 800,\n        height: 600,\n        store: store1,\n        axes: [\n            // ...some axes options...\n        ],\n        series: [\n            // ...some series options...\n        ],\n        interactions: [{\n            type: 'interactiontype'\n            // ...additional configs for the interaction...\n        }]\n    });\n\nWhen adding an interaction which uses only its default configuration (no extra properties other than `type`),\nyou can alternately specify only the type as a String rather than the full Object:\n\n    interactions: ['reset', 'rotate']\n\nThe current supported interaction types include:\n\n- {@link Ext.chart.interactions.PanZoom} - allows pan and zoom of axes\n- {@link Ext.chart.interactions.ItemHighlight} - allows highlighting of series data points\n- {@link Ext.chart.interactions.ItemInfo} - allows displaying details of a data point in a popup panel\n- {@link Ext.chart.interactions.Rotate} - allows rotation of pie and radar series\n\nSee the documentation for each of those interaction classes to see how they can be configured.\n\nAdditional custom interactions can be registered using `'interactions.'` alias prefix.\n",
                "type": "Array",
                "src": {
                  "name": "5,382,25",
                  "text": "5,383,12,1561",
                  "type": "5,382,18"
                }
              },
              {
                "$type": "property",
                "name": "itemId",
                "since": "3.4.0",
                "text": "The **unique** id of this component instance within its container. See also the\n{@link #cfg!reference #reference} config.\n\nAn `{@link #cfg!itemId itemId}` can be used as an alternative way to get a reference to a component when no object reference is\navailable. Instead of using an `{@link #cfg!id #id}` with {@link Ext#getCmp getCmp}, use\n`{@link #cfg!itemId itemId}` with {@link Ext.container.Container#method!getComponent Ext.container.Container#getComponent} which will\nretrieve `{@link #cfg!itemId itemId}`'s or {@link #cfg!id #id}'s. Since `{@link #cfg!itemId itemId}`'s are an index to the container's\ninternal collection, the `{@link #cfg!itemId itemId}` is scoped locally to the container -- avoiding\npotential conflicts with {@link Ext.ComponentManager} which requires a **unique**\n`{@link #cfg!id #id}` values.\n\n    var c = new Ext.panel.Panel({ //\n        height: 300,\n        renderTo: document.body,\n        layout: 'auto',\n        items: [{\n            itemId: 'p1',\n            title: 'Panel 1',\n            height: 150\n        },{\n            itemId: 'p2',\n            title: 'Panel 2',\n            height: 150\n        }]\n    });\n\n    p1 = c.getComponent('p1'); // not the same as Ext.getCmp()\n    console.log(p1);\n    p2 = p1.ownerCt.getComponent('p2'); // reference via a sibling\n    console.log(p2);\n\nAlso see {@link #cfg!id #id}, `{@link Ext.container.Container#method!query Ext.container.Container#query}`, `{@link Ext.container.Container#method!down Ext.container.Container#down}` and\n`{@link Ext.container.Container#method!child Ext.container.Container#child}`.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed by\n(optional) additional letters, underscores, digits or hyphens.\n\n**Note**: to access the container of an item see {@link #property!ownerCt #ownerCt}.\n",
                "type": "String",
                "src": {
                  "name": "3,829,22",
                  "since": "3,869,15",
                  "text": "3,830,8,1513",
                  "type": "3,829,14"
                }
              },
              {
                "$type": "property",
                "name": "items",
                "since": "2.3.0",
                "text": "A single item, or an array of child Components to be added to this container\n\n**Unless configured with a {@link #cfg!layout #layout}, a Container simply renders child\nComponents serially into its encapsulating element and performs no sizing or\npositioning upon them.**\n\nExample:\n\n    // specifying a single item\n    items: {...},\n    layout: 'fit',    // The single items is sized to fit\n\n    // specifying multiple items\n    items: [{...}, {...}],\n    layout: 'hbox', // The items are arranged horizontally\n\nEach item may be:\n\n- A {@link Ext.Component}\n- A Component configuration object\n\nIf a configuration object is specified, the actual type of Component to be\ninstantiated my be indicated by using the {@link Ext.Component#cfg!xtype Ext.Component#xtype} option.\n\nEvery Component class has its own {@link Ext.Component#cfg!xtype Ext.Component#xtype}.\n\nIf an {@link Ext.Component#cfg!xtype Ext.Component#xtype} is not explicitly specified, the\n{@link #cfg!defaultType #defaultType} for the Container is used, which by default is usually `panel`.\n\n# Notes:\n\nExt uses lazy rendering. Child Components will only be rendered\nshould it become necessary. Items are automatically laid out when they are first\nshown (no sizing is done while hidden), or in response to a {@link #method!updateLayout #updateLayout} call.\n\nDo not specify {@link Ext.panel.Panel#cfg!contentEl Ext.panel.Panel#contentEl} or\n{@link Ext.panel.Panel#cfg!html Ext.panel.Panel#html} with `items`.\n",
                "type": "Object/Object[]",
                "src": {
                  "name": "2,525,31",
                  "since": "2,564,15",
                  "text": "2,526,8,1332",
                  "type": "2,525,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "keyHandlers",
                "text": "Handlers for keydown events.\n\nThis object's keys correspond to keyboard key names in\n{@link Ext.event.Event}, with values defined as method\nnames that should be executed when a keydown event occurs\nfor the specified key name.\nFor example:\n\n     Ext.define('MyButton', {\n         extend: 'Ext.button.Button',\n\n         config: {\n             keyHandlers: {\n                 ENTER: 'onEnterKey'\n             }\n         },\n\n         onEnterKey: function(event) {\n             ...\n         }\n     });\n",
                "type": "Object",
                "src": {
                  "access": "12,36,12",
                  "name": "12,14,26",
                  "text": "12,14,38,29:12,15,12,469",
                  "type": "12,14,18"
                }
              },
              {
                "$type": "property",
                "name": "layout",
                "since": "2.3.0",
                "text": "**Important**: In order for child items to be correctly sized and\npositioned, typically a layout manager **must** be specified through\nthe `{@link #cfg!layout layout}` configuration option.\n\nThe sizing and positioning of child {@link #cfg!items #cfg-items} is the responsibility of\nthe Container's layout manager which creates and manages the type of layout\nyou have in mind.  For example:\n\nIf the layout configuration is not explicitly specified for\na general purpose container (e.g. Container or Panel) the\n{@link Ext.layout.container.Auto} will be used\nwhich does nothing but render child components sequentially into the\nContainer (no sizing or positioning will be performed in this situation).\n\n**layout** may be specified as either as an Object or as a String:\n\n## Specify as an Object\n\nExample usage:\n\n    layout: {\n        type: 'vbox',\n        align: 'left'\n    }\n\n  - **type**\n\n    The layout type to be used for this container.  If not specified,\n    a default {@link Ext.layout.container.Auto} will be created and used.\n\n    Valid layout <code>type</code> values are listed in {@link Ext.enums.Layout}.\n\n  - Layout specific configuration properties\n\n    Additional layout specific configuration properties may also be\n    specified. For complete details regarding the valid config options for\n    each layout type, see the layout class corresponding to the `type`\n    specified.\n\n## Specify as a String\n\nExample usage:\n\n    layout: 'vbox'\n\n  - **layout**\n\n    The layout `type` to be used for this container (see {@link Ext.enums.Layout}\n    for list of valid values).\n\n    Additional layout specific configuration properties. For complete\n    details regarding the valid config options for each layout type, see the\n    layout class corresponding to the `{@link #cfg!layout layout}` specified.\n\n## Configuring the default layout type\n\nIf a certain Container class has a default layout (For example a {@link Ext.toolbar.Toolbar}\nwith a default `Box` layout), then to simply configure the default layout,\nuse an object, but without the `type` property:\n\n\n    xtype: 'toolbar',\n    layout: {\n        pack: 'center'\n    }\n",
                "type": "Ext.enums.Layout/Object",
                "src": {
                  "name": "2,570,39",
                  "since": "2,637,15",
                  "text": "2,571,8,2112",
                  "type": "2,570,14"
                }
              },
              {
                "$type": "property",
                "name": "lbar",
                "text": "Convenience config. Short for 'Left Bar' (left-docked, vertical toolbar).\n\n    lbar: [\n      { xtype: 'button', text: 'Button 1' }\n    ]\n\nis equivalent to\n\n    dockedItems: [{\n        xtype: 'toolbar',\n        dock: 'left',\n        items: [\n            { xtype: 'button', text: 'Button 1' }\n        ]\n    }]\n",
                "type": "Object/Object[]",
                "src": {
                  "name": "6,532,31",
                  "text": "6,533,8,308",
                  "type": "6,532,14"
                }
              },
              {
                "$type": "property",
                "name": "legend",
                "type": "Ext.chart.Legend/Object",
                "src": {
                  "name": "5,328,43",
                  "type": "5,328,18"
                }
              },
              {
                "$type": "property",
                "name": "liquidLayout",
                "text": "Components that achieve their internal layout results using solely CSS with no JS\nintervention must set this to true.  This allows the component to opt out of the\nlayout run when used inside certain container layouts such as {@link Ext.layout.container.Form} and {@link Ext.layout.container.Auto}\nresulting in a performance gain. The following components currently use liquid\nlayout (`liquidLayout: true`):\n\n- All Form Fields (subclasses of {@link Ext.form.field.Base})\n- {@link Ext.button.Button}\n\nIt is important to keep in mind that components using liquidLayout do not fire\nthe following events:\n\n- {@link #event!resize #event-resize}\n- {@link #event!boxready #event-boxready}\n\nIn addition liquidLayout components do not call the following template methods:\n\n- {@link #method!afterComponentLayout #afterComponentLayout}\n- {@link #method!onBoxReady #onBoxReady}\n- {@link #method!onResize #onResize}\n\nAny component that needs to fire these events or to have these methods called during\nits life cycle needs to set `{@link #cfg!liquidLayout liquidLayout}` to `false`.  The following example\ndemonstrates how to enable the resize event for a\n{@link Ext.form.field.TextArea}:\n\n    @example\n    var win = Ext.create({\n            xtype: 'window',\n            title: 'Resize This Window!',\n            height: 100,\n            width: 200,\n            layout: 'anchor',\n            items: [{\n                xtype: 'textarea',\n                anchor: '0 0',\n                liquidLayout: false // allows the textarea to fire \"resize\"\n            }]\n        }),\n        textfield = win.items.getAt(0);\n\n    win.show();\n\n    textfield.on('resize', function(textfield, width, height) {\n        Ext.Msg.alert('Text Field Resized', 'width: ' + width + ', height: ' + height);\n    });\n\nUse caution when setting `{@link #cfg!liquidLayout liquidLayout}` to `false` as it carries a performance penalty\nsince it means the layout system must perform expensive DOM reads to determine the\nComponent's size.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1593,0",
                  "text": "3,1541,8,1868",
                  "type": "3,1540,14"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the {@link Ext.view.View}'s **`{@link Ext.view.View#event!itemclick Ext.view.View#itemclick}`** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "13,243,25",
                  "text": "13,244,11,1325",
                  "type": "13,243,17"
                }
              },
              {
                "$type": "property",
                "name": "liveDrag",
                "optional": true,
                "text": "True to drag the component itself.  Else a lightweight version of the component\nwill be shown (_using the component's ghost() method_).\n\n**Note:** This config is only relevant when used with dragging implemented via\n{@link Ext.util.ComponentDragger}.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "14,37,24",
                  "text": "14,39,8,251",
                  "type": "14,37,14",
                  "value": "14,37,33"
                }
              },
              {
                "$type": "property",
                "name": "loader",
                "text": "A configuration object or an instance of a {@link Ext.ComponentLoader} to load remote content\nfor this Component.\n\n    Ext.create('Ext.Component', {\n        loader: {\n            url: 'content.html',\n            autoLoad: true\n        },\n        renderTo: Ext.getBody()\n    });\n",
                "type": "Ext.ComponentLoader/Object",
                "src": {
                  "name": "3,873,42",
                  "text": "3,874,8,278",
                  "type": "3,873,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "mainRect",
                "text": "The main area of the chart where grid and series are drawn.\n",
                "src": {
                  "access": "5,423,12",
                  "name": "5,426,0",
                  "text": "5,424,12,60"
                }
              },
              {
                "$type": "property",
                "name": "manageHeight",
                "optional": true,
                "text": "When true, the dock component layout writes\nheight information to the panel's DOM elements based on its shrink wrap height\ncalculation. This ensures that the browser respects the calculated height.\nWhen false, the dock component layout will not write heights on the panel or its\nbody element. In some simple layout cases, not writing the heights to the DOM may\nbe desired because this allows the browser to respond to direct DOM manipulations\n(like animations).\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "6,676,24",
                  "text": "6,676,43,44:6,677,8,418",
                  "type": "6,676,14",
                  "value": "6,676,37"
                }
              },
              {
                "$type": "property",
                "name": "margin",
                "text": "Specifies the margin for this component. The margin can be a single numeric value to apply to all sides or it can\nbe a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).\n",
                "type": "Number/String",
                "src": {
                  "name": "3,887,29",
                  "text": "3,888,8,212",
                  "type": "3,887,14"
                }
              },
              {
                "$type": "property",
                "name": "maskElement",
                "optional": true,
                "text": "\nThe name of the element property in this Panel to mask when masked by a LoadMask.\n\nDefaults to `\"el\"` to indicate that any LoadMask should be rendered into this Panel's encapsulating element.\n\nThis could be configured to be `\"body\"` so that only the body is masked and toolbars and the header are still mouse-accessible.\n",
                "type": "String",
                "value": "\"el\"",
                "src": {
                  "name": "6,687,23",
                  "text": "6,688,8,322",
                  "type": "6,687,14",
                  "value": "6,687,35"
                }
              },
              {
                "$type": "property",
                "name": "maxHeight",
                "text": "The maximum value in pixels which this Component will set its height to.\n\n**Warning:** This will override any size management applied by layout managers.\n",
                "type": "Number",
                "src": {
                  "name": "3,358,26",
                  "text": "3,359,12,154",
                  "type": "3,358,18"
                }
              },
              {
                "$type": "property",
                "name": "maxWidth",
                "text": "The maximum value in pixels which this Component will set its width to.\n\n**Warning:** This will override any size management applied by layout managers.\n",
                "type": "Number",
                "src": {
                  "name": "3,366,26",
                  "text": "3,367,12,153",
                  "type": "3,366,18"
                }
              },
              {
                "$type": "property",
                "name": "minButtonWidth",
                "text": "Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default\nvalue for the {@link Ext.button.Button#cfg!minWidth Ext.button.Button#minWidth} config of each Button added to the **footer toolbar** via the\n{@link #cfg!fbar #fbar} or {@link #cfg!buttons #buttons} configurations. It will be ignored for buttons that have a minWidth configured\nsome other way, e.g. in their own config object or via the {@link Ext.container.Container#cfg!defaults Ext.container.Container#defaults} of\ntheir parent container.\n",
                "type": "Number",
                "src": {
                  "name": "6,698,22",
                  "text": "6,699,8,456",
                  "type": "6,698,14"
                }
              },
              {
                "$type": "property",
                "name": "minHeight",
                "text": "The minimum value in pixels which this Component will set its height to.\n\n**Warning:** This will override any size management applied by layout managers.\n",
                "type": "Number",
                "src": {
                  "name": "3,374,26",
                  "text": "3,375,12,154",
                  "type": "3,374,18"
                }
              },
              {
                "$type": "property",
                "name": "minWidth",
                "text": "The minimum value in pixels which this Component will set its width to.\n\n**Warning:** This will override any size management applied by layout managers.\n",
                "type": "Number",
                "src": {
                  "name": "3,382,26",
                  "text": "3,383,12,153",
                  "type": "3,382,18"
                }
              },
              {
                "$type": "property",
                "name": "modal",
                "optional": true,
                "text": "True to make the floated component modal and mask everything behind it when displayed, false to display it without\nrestricting access to other UI elements.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,17,24",
                  "text": "1,18,8,156",
                  "type": "1,17,14",
                  "value": "1,17,30"
                }
              },
              {
                "$type": "property",
                "name": "modelValidation",
                "text": "This config enables binding to your `{@link Ext.data.Model#cfg!validators Ext.data.Model#validators}`. This\nis only processed by form fields (e.g., `{@link Ext.form.field.Text}`) at present, but\nthis setting is inherited and so can be set on a parent container.\n\nWhen set to `true` by a component or not set by a component but inherited from\nan ancestor container, `{@link Ext.data.Validation}` records are used to automatically\nbind validation results for any form field to which a `value` is bound.\n\nWhile this config can be set arbitrarily high in the component hierarchy, doing\nso can create a lot overhead if most of your form fields do not actually rely on\n`validators` in your data model.\n\nUsing this setting for a form that is bound to an `{@link Ext.data.Model}` might look\nlike this:\n\n     {\n         xtype: 'panel',\n         modelValidation: true,\n         items: [{\n             xtype: 'textfield',\n             bind: '{theUser.firstName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.lastName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.phoneNumber}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.email}'\n         }]\n     }\n\nThe above is equivalent to the following manual binding of validation:\n\n     {\n         xtype: 'panel',\n         items: [{\n             xtype: 'textfield',\n             bind: {\n                 value:      '{theUser.firstName}'\n                 validation: '{theUser.validation.firstName}'\n             }\n         },{\n             xtype: 'textfield',\n             bind: {\n                 value:      '{theUser.lastName}'\n                 validation: '{theUser.validation.lastName}'\n             }\n         },{\n             xtype: 'textfield',\n             bind: {\n                 value:      '{theUser.phoneNumber}'\n                 validation: '{theUser.validation.phoneNumber}'\n             }\n         },{\n             xtype: 'textfield',\n             bind: {\n                 value:      '{theUser.email}'\n                 validation: '{theUser.validation.email}'\n             }\n         }]\n     }\n\nNotice that \"validation\" is a pseudo-association defined for all entities. See\n`{@link Ext.data.Model#method!getValidation Ext.data.Model#getValidation}` for further details.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,288,27",
                  "text": "3,289,12,2219",
                  "type": "3,288,18"
                }
              },
              {
                "$type": "property",
                "name": "overCls",
                "optional": true,
                "since": "2.3.0",
                "text": "An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element,\nand removed when the mouse moves out. This can be useful for adding customized 'active' or 'hover' styles to the\ncomponent or any of its children using standard CSS rules.\n",
                "type": "String",
                "value": "''",
                "src": {
                  "name": "3,906,23",
                  "since": "3,911,15",
                  "text": "3,907,8,287",
                  "type": "3,906,14",
                  "value": "3,906,31"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link #scrollable} instead\n",
                "deprecatedVersion": "5.1.0",
                "name": "overflowX",
                "text": "Possible values are:\n\n - `'auto'` to enable automatic horizontal scrollbar (Style overflow-x: 'auto').\n - `'scroll'` to always enable horizontal scrollbar (Style overflow-x: 'scroll').\n\nThe default is overflow-x: 'hidden'. This should not be combined with {@link #cfg!autoScroll #autoScroll}.\n",
                "type": "String",
                "src": {
                  "deprecatedMessage": "3,922,8",
                  "deprecatedVersion": "3,922,8",
                  "name": "3,915,22",
                  "text": "3,916,8,277",
                  "type": "3,915,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link #scrollable} instead\n",
                "deprecatedVersion": "5.1.0",
                "name": "overflowY",
                "text": "Possible values are:\n\n - `'auto'` to enable automatic vertical scrollbar (Style overflow-y: 'auto').\n - `'scroll'` to always enable vertical scrollbar (Style overflow-y: 'scroll').\n\nThe default is overflow-y: 'hidden'. This should not be combined with {@link #cfg!autoScroll #autoScroll}.\n",
                "type": "String",
                "src": {
                  "deprecatedMessage": "3,933,8",
                  "deprecatedVersion": "3,933,8",
                  "name": "3,926,22",
                  "text": "3,927,8,273",
                  "type": "3,926,14"
                }
              },
              {
                "$type": "property",
                "name": "overlapHeader",
                "text": "True to overlap the header in a panel over the framing of the panel itself. This is needed when frame:true (and\nis done automatically for you). Otherwise it is undefined. If you manually add rounded corners to a panel header\nwhich does not have frame:true, this will need to be set to true.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,708,23",
                  "text": "6,709,8,291",
                  "type": "6,708,14"
                }
              },
              {
                "$type": "property",
                "name": "padding",
                "text": "Specifies the padding for this component. The padding can be a single numeric value to apply to all sides or it\ncan be a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).\n",
                "type": "Number/String",
                "src": {
                  "name": "3,937,29",
                  "text": "3,938,8,214",
                  "type": "3,937,14"
                }
              },
              {
                "$type": "property",
                "name": "placeholder",
                "text": "**Important: This config is only effective for {@link #cfg!collapsible #collapsible} Panels which are direct child items of a\n{@link Ext.layout.container.Border} when not using the `'header'` {@link #cfg!collapseMode #collapseMode}.**\n\n**Optional.** A Component (or config object for a Component) to show in place of this Panel when this Panel is\ncollapsed by a {@link Ext.layout.container.Border}. Defaults to a generated {@link Ext.panel.Header} containing a {@link Ext.panel.Tool} to re-expand the Panel.\n",
                "type": "Ext.Component/Object",
                "src": {
                  "name": "6,715,36",
                  "text": "6,716,8,513",
                  "type": "6,715,14"
                }
              },
              {
                "$type": "property",
                "name": "placeholderCollapseHideMode",
                "optional": true,
                "text": "The {@link Ext.dom.Element#method!setVisibilityMode Ext.dom.Element#setVisibilityMode} for hiding collapsed panels when\nusing {@link #cfg!collapseMode #collapseMode} \"placeholder\".\n",
                "type": "Number",
                "value": "Ext.Element.VISIBILITY",
                "src": {
                  "name": "6,725,23",
                  "text": "6,726,8,127",
                  "type": "6,725,14",
                  "value": "6,725,51"
                }
              },
              {
                "$type": "property",
                "name": "plugins",
                "since": "2.3.0",
                "text": "An array of plugins to be added to this component. Can also be just a single plugin instead of array.\n\nPlugins provide custom functionality for a component. The only requirement for\na valid plugin is that it contain an `init` method that accepts a reference of type Ext.Component. When a component\nis created, if any plugins are available, the component will call the init method on each plugin, passing a\nreference to itself. Each plugin can then call methods or respond to events on the component as needed to provide\nits functionality.\n\nPlugins can be added to component by either directly referencing the plugin instance:\n\n    plugins: [Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit: 1})],\n\nBy using config object with ptype:\n\n    plugins: {ptype: 'cellediting', clicksToEdit: 1},\n\nOr with just a ptype:\n\n    plugins: ['cellediting', 'gridviewdragdrop'],\n\nSee {@link Ext.enums.Plugin} for list of all ptypes.\n",
                "type": "Ext.plugin.Abstract[]/Ext.plugin.Abstract/Object[]/Object/Ext.enums.Plugin[]/Ext.enums.Plugin",
                "src": {
                  "name": "3,943,109",
                  "since": "3,966,15",
                  "text": "3,944,8,924",
                  "type": "3,943,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link #header} instead.\nPrevent a Header from being created and shown.\n",
                "deprecatedVersion": "4.1.0",
                "name": "preventHeader",
                "type": "Boolean",
                "src": {
                  "deprecatedMessage": "6,733,8",
                  "deprecatedVersion": "6,733,8",
                  "name": "6,732,23",
                  "type": "6,732,14"
                }
              },
              {
                "$type": "property",
                "name": "previewAltText",
                "text": "The text to place in the Preview image alt attribute.\n",
                "type": "String",
                "src": {
                  "name": "15,16,22",
                  "text": "15,16,37,54",
                  "type": "15,16,14"
                }
              },
              {
                "$type": "property",
                "name": "previewTitleText",
                "text": "The text to place in Preview Chart window title.\n",
                "type": "String",
                "src": {
                  "name": "15,11,22",
                  "text": "15,11,39,49",
                  "type": "15,11,14"
                }
              },
              {
                "$type": "property",
                "name": "publishes",
                "since": "5.0.0",
                "text": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found in a class\nconfig block. In these situations, you may utilize {@link #method!publishState #publishState} if the property has a\nsetter method.  Let's use {@link Ext.form.Labelable#method!setFieldLabel Ext.form.Labelable#setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n",
                "type": "String/String[]/Object",
                "src": {
                  "name": "8,100,42",
                  "since": "8,179,19",
                  "text": "8,101,12,2498",
                  "type": "8,100,18"
                }
              },
              {
                "$type": "property",
                "name": "radius",
                "text": "Determines the radius of the polar chart.\nUpdated when the chart performs layout.\n",
                "type": "Number",
                "src": {
                  "name": "0,31,26",
                  "text": "0,31,33,42:0,32,12,40",
                  "type": "0,31,18"
                }
              },
              {
                "$type": "property",
                "name": "rbar",
                "text": "Convenience config. Short for 'Right Bar' (right-docked, vertical toolbar).\n\n    rbar: [\n      { xtype: 'button', text: 'Button 1' }\n    ]\n\nis equivalent to\n\n    dockedItems: [{\n        xtype: 'toolbar',\n        dock: 'right',\n        items: [\n            { xtype: 'button', text: 'Button 1' }\n        ]\n    }]\n",
                "type": "Object/Object[]",
                "src": {
                  "name": "6,553,31",
                  "text": "6,554,8,311",
                  "type": "6,553,14"
                }
              },
              {
                "$type": "property",
                "name": "reference",
                "text": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.container.Container#cfg!referenceHolder Ext.container.Container#referenceHolder}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n",
                "type": "String",
                "src": {
                  "name": "8,190,26",
                  "text": "8,191,12,477",
                  "type": "8,190,18"
                }
              },
              {
                "$type": "property",
                "name": "referenceHolder",
                "text": "If `true`, this container will be marked as being a point in the hierarchy where\nreferences to items with a specified `{@link #cfg!reference reference}` config will be held. The container\nwill automatically become a referenceHolder if a {@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.container.Container} for more information\nabout references & reference holders.\n",
                "type": "Boolean",
                "src": {
                  "name": "16,20,27",
                  "text": "16,21,12,370",
                  "type": "16,20,18"
                }
              },
              {
                "$type": "property",
                "name": "region",
                "optional": true,
                "text": "Defines the region inside {@link Ext.layout.container.Border}.\n\nPossible values:\n\n- north - Positions component at top.\n- south - Positions component at bottom.\n- east - Positions component at right.\n- west - Positions component at left.\n- center - Positions component at the remaining space.\n  There **must** be a component with `region: \"center\"` in every border layout.\n",
                "type": "\"north\"/\"south\"/\"east\"/\"west\"/\"center\"",
                "value": "undefined",
                "src": {
                  "name": "3,970,55",
                  "text": "3,971,8,387",
                  "type": "3,970,14",
                  "value": "3,970,62"
                }
              },
              {
                "$type": "property",
                "name": "renderData",
                "text": "\nThe data used by {@link #cfg!renderTpl #renderTpl} in addition to the following property values of the component:\n\n- id\n- ui\n- uiCls\n- baseCls\n- componentCls\n- frame\n\nSee {@link #cfg!renderSelectors #renderSelectors} and {@link #cfg!childEls #cfg-childEls} for usage examples.\n",
                "type": "Object",
                "src": {
                  "name": "3,984,22",
                  "text": "3,985,8,228",
                  "type": "3,984,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link #cfg-childEls} instead.\n",
                "deprecatedVersion": "5.0",
                "name": "renderSelectors",
                "text": "An object containing properties specifying CSS selectors which identify child elements\ncreated by the render process.\n\nAfter the Component's internal structure is rendered according to the {@link #cfg!renderTpl #renderTpl}, this object is iterated through,\nand the found Elements are added as properties to the Component using the `renderSelector` property name.\n\nFor example, a Component which renders a title and description into its element:\n\n     Ext.create('Ext.Component', {\n         renderTo: Ext.getBody(),\n         renderTpl: [\n             '<h1 class=\"title\">{title}</h1>',\n             '<p>{desc}</p>'\n         ],\n         renderData: {\n             title: \"Error\",\n             desc: \"Something went wrong\"\n         },\n         renderSelectors: {\n             titleEl: 'h1.title',\n             descEl: 'p'\n         },\n         listeners: {\n             afterrender: function(cmp){\n                 // After rendering the component will have a titleEl and descEl properties\n                 cmp.titleEl.setStyle({color: \"red\"});\n             }\n         }\n     });\n\nThe use of `{@link #cfg!renderSelectors renderSelectors}` is deprecated (for performance reasons). The above\ncode should be refactored into something like this:\n\n     Ext.create('Ext.Component', {\n         renderTo: Ext.getBody(),\n         renderTpl: [\n             '<h1 class=\"title\" id=\"{id}-titleEl\" data-ref=\"titleEl\">{title}</h1>',\n             '<p id=\"{id}-descEl\" data-ref=\"descEl\">{desc}</p>'\n         ],\n         renderData: {\n             title: \"Error\",\n             desc: \"Something went wrong\"\n         },\n         childEls: [\n             'titleEl',\n             'descEl'\n         ]\n     });\n\nTo use `{@link #cfg!childEls childEls}` yet retain the use of selectors (which remains as expensive as\n`{@link #cfg!renderSelectors renderSelectors}`):\n\n     Ext.create('Ext.Component', {\n         renderTo: Ext.getBody(),\n         renderTpl: [\n             '<h1 class=\"title\">{title}</h1>',\n             '<p>{desc}</p>'\n         ],\n         renderData: {\n             title: \"Error\",\n             desc: \"Something went wrong\"\n         },\n         childEls: {\n             titleEl: { selectNode: 'h1.title' },\n             descEl: { selectNode: 'p' }\n         }\n     });\n",
                "type": "Object",
                "src": {
                  "deprecatedMessage": "3,1068,8",
                  "deprecatedVersion": "3,1068,8",
                  "name": "3,999,22",
                  "text": "3,1000,8,2159",
                  "type": "3,999,14"
                }
              },
              {
                "$type": "property",
                "name": "renderTo",
                "since": "2.3.0",
                "text": "Specify the `{@link #cfg!id id}` of the element, a DOM element or an existing Element that this component will be rendered into.\n\n**Notes:**\n\nDo *not* use this option if the Component is to be a child item of a {@link Ext.container.Container}.\nIt is the responsibility of the {@link Ext.container.Container}'s\n{@link Ext.container.Container#cfg!layout Ext.container.Container#layout} to render and manage its child items.\n\nWhen using this config, a call to `render()` is not required.\n\nSee also: {@link #method!render #method-render}.\n",
                "type": "String/HTMLElement/Ext.dom.Element",
                "src": {
                  "name": "3,1072,50",
                  "since": "3,1085,15",
                  "text": "3,1073,8,505",
                  "type": "3,1072,14"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "renderTpl",
                "text": "An {@link Ext.XTemplate} used to create the internal structure inside this Component's encapsulating\n{@link #method!getEl #getEl}.\n\nYou do not normally need to specify this. For the base classes {@link Ext.Component} and\n{@link Ext.container.Container}, this defaults to **`{@link null}`** which means that they will be initially rendered\nwith no internal structure; they render their {@link #method!getEl #getEl} empty. The more specialized\nclasses with complex DOM structures provide their own template definitions.\n\nThis is intended to allow the developer to create application-specific utility Components with customized\ninternal structure.\n\nUpon rendering, any created child elements may be automatically imported into object properties using the\n{@link #cfg!renderSelectors #renderSelectors} and {@link #cfg!childEls #cfg-childEls} options.\n",
                "type": "Ext.XTemplate/String/String[]",
                "src": {
                  "access": "3,1103,8",
                  "name": "3,1089,45",
                  "text": "3,1090,8,802",
                  "type": "3,1089,14"
                }
              },
              {
                "$type": "property",
                "name": "resizable",
                "text": "Specify as `true` to apply a {@link Ext.resizer.Resizer} to this Component after rendering.\n\nMay also be specified as a config object to be passed to the constructor of {@link Ext.resizer.Resizer}\nto override any defaults. By default the Component passes its minimum and maximum size, and uses\n`{@link Ext.resizer.Resizer#cfg!dynamic Ext.resizer.Resizer#dynamic}: false`\n",
                "type": "Boolean/Object",
                "src": {
                  "name": "3,1114,30",
                  "text": "3,1115,8,355",
                  "type": "3,1114,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "resizeHandler",
                "text": "Override value.\n",
                "src": {
                  "access": "5,429,12",
                  "name": "5,432,0",
                  "text": "5,430,12,16"
                }
              },
              {
                "$type": "property",
                "name": "resizeHandles",
                "text": "A valid {@link Ext.resizer.Resizer} handles config string. Only applies when resizable = true.\n",
                "type": "String",
                "src": {
                  "name": "3,1123,22",
                  "text": "3,1124,8,95",
                  "type": "3,1123,14"
                }
              },
              {
                "$type": "property",
                "name": "saveDelay",
                "text": "A buffer to be applied if many state events are fired within a short period.\n",
                "type": "Number",
                "src": {
                  "name": "17,88,22",
                  "text": "17,89,8,77",
                  "type": "17,88,14"
                }
              },
              {
                "$type": "property",
                "name": "scrollable",
                "text": "Configuration options to make this Component scrollable. Acceptable values are:\n\n- `true` to enable auto scrolling.\n- `false` (or `{@link null}`) to disable scrolling - this is the default.\n- `x` or `horizontal` to enable horizontal scrolling only\n- `y` or `vertical` to enable vertical scrolling only\n\nAlso accepts a configuration object for a `{@link Ext.scroll.Scroller}` if\nif advanced configuration is needed.\n\nThe getter for this config returns the {@link Ext.scroll.Scroller}\ninstance.  You can use the Scroller API to read or manipulate the scroll position:\n\n    // scrolls the component to 5 on the x axis and 10 on the y axis\n    component.getScrollable().scrollTo(5, 10);\n",
                "type": "Boolean/String/Object",
                "src": {
                  "name": "3,390,41",
                  "text": "3,391,12,684",
                  "type": "3,390,18"
                }
              },
              {
                "$type": "property",
                "name": "series",
                "text": "Array of {@link Ext.chart.series.Series} instances or config objects. For example:\n\n    series: [{\n        type: 'column',\n        axis: 'left',\n        listeners: {\n            'afterrender': function() {\n                console.log('afterrender');\n            }\n        },\n        xField: 'category',\n        yField: 'data1'\n    }]\n",
                "type": "Ext.chart.series.Series/Array",
                "src": {
                  "name": "5,293,49",
                  "text": "5,294,12,341",
                  "type": "5,293,18"
                }
              },
              {
                "$type": "property",
                "name": "session",
                "optional": true,
                "text": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n",
                "type": "Boolean/Object/Ext.data.Session",
                "value": "null",
                "src": {
                  "name": "8,204,52",
                  "text": "8,205,12,531",
                  "type": "8,204,18",
                  "value": "8,204,60"
                }
              },
              {
                "$type": "property",
                "name": "shadow",
                "text": "Specifies whether the floating component should be given a shadow. Set to true to automatically create an\n{@link Ext.dom.Shadow Ext.Shadow}, or a string indicating the shadow's display {@link Ext.dom.Shadow#cfg!mode Ext.Shadow#mode}. Set to false to\ndisable the shadow.\n",
                "type": "String/Boolean",
                "src": {
                  "name": "1,23,30",
                  "text": "1,24,8,231",
                  "type": "1,23,14"
                }
              },
              {
                "$type": "property",
                "name": "shadowOffset",
                "text": "Number of pixels to offset the shadow.\n",
                "type": "Number",
                "src": {
                  "name": "1,52,22",
                  "text": "1,53,8,39",
                  "type": "1,52,14"
                }
              },
              {
                "$type": "property",
                "name": "shim",
                "text": "`true` to enable an iframe shim for this Component to keep\nwindowed objects from showing through.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,57,23",
                  "text": "1,57,28,59:1,58,8,39",
                  "type": "1,57,14"
                }
              },
              {
                "$type": "property",
                "inheritdoc": true,
                "localDoc": "##Panels (subclasses and instances)\n\nBy default, when a panel is configured to shrink wrap in a given dimension, only\nthe panel's \"content\" (items and html content inside the panel body) contributes\nto its size, and the content of docked items is ignored. Optionally you can use\nthe {@link #shrinkWrapDock} config to allow docked items to contribute to the\npanel's size as well. For example, if shrinkWrap and shrinkWrapDock are both set\nto true, the width of the panel would be the width of the panel's content and the\npanel's header text.\n",
                "name": "shrinkWrap",
                "optional": true,
                "value": "2",
                "src": {
                  "inheritdoc": "6,740,8",
                  "localDoc": "6,741,18",
                  "name": "6,739,14",
                  "value": "6,739,25"
                }
              },
              {
                "$type": "property",
                "name": "shrinkWrapDock",
                "text": "Allows for this panel to include the {@link #cfg!dockedItems #dockedItems} when trying to determine\nthe overall size of the panel. This option is only applicable when this panel is\nalso shrink wrapping in the same dimensions. See {@link Ext.panel.Panel#cfg!shrinkWrap Ext.Panel#shrinkWrap} for\nan explanation of the configuration options.\n",
                "type": "Boolean/Number",
                "src": {
                  "name": "6,753,30",
                  "text": "6,754,8,291",
                  "type": "6,753,14"
                }
              },
              {
                "$type": "property",
                "name": "simpleDrag",
                "optional": true,
                "text": "When {@link #cfg!draggable #cfg-draggable} is `true`, Specify this as `true` to  cause the `{@link #cfg!draggable draggable}` config\nto work the same as it does in {@link Ext.window.Window}. This Panel\njust becomes movable. No DragDrop instances receive any notifications.\nFor example:\n\n    @example\n    var win = Ext.create('widget.window', {\n        height: 300,\n        width: 300,\n        title: 'Constraining Window',\n        closable: false,\n        items: {\n            title: \"Floating Panel\",\n            width: 100,\n            height: 100,\n            floating: true,\n            draggable: true,\n            constrain: true,\n            simpleDrag: true\n        }\n    });\n    win.show();\n    // Floating components begin life hidden\n    win.child('[title=Floating Panel]').show();\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "6,762,24",
                  "text": "6,763,8,763",
                  "type": "6,762,14",
                  "value": "6,762,35"
                }
              },
              {
                "$type": "property",
                "name": "sprites",
                "text": "Defines a set of sprites to be added to the drawContainer surface.\n\nFor example:\n\n     sprites: [{\n          type: 'circle',\n          fillStyle: '#79BB3F',\n          r: 100,\n          x: 100,\n          y: 100\n     }]\n",
                "type": "Object[]",
                "src": {
                  "name": "10,135,28",
                  "text": "10,136,12,219",
                  "type": "10,135,18"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.state.Stateful#cfg-stateEvents",
                "localDoc": "By default the following stateEvents are added:\n\n - {@link #event-resize} - _(added by Ext.Component)_\n - {@link #event-collapse}\n - {@link #event-expand}\n",
                "name": "stateEvents",
                "src": {
                  "inheritdoc": "6,792,8",
                  "localDoc": "6,793,18",
                  "name": "6,791,13"
                }
              },
              {
                "$type": "property",
                "name": "stateful",
                "text": "A flag which causes the object to attempt to restore the state of\ninternal properties from a saved state on startup. The object must have\na {@link #cfg!stateId #stateId} for state to be managed.\n\nAuto-generated ids are not guaranteed to be stable across page loads and\ncannot be relied upon to save and restore the same state for a object.\n\nFor state saving to work, the state manager's provider must have been\nset to an implementation of {@link Ext.state.Provider} which overrides the\n{@link Ext.state.Provider#method!set Ext.state.Provider#set} and {@link Ext.state.Provider#method!get Ext.state.Provider#get}\nmethods to save and recall name/value pairs. A built-in implementation,\n{@link Ext.state.CookieProvider} is available.\n\nTo set the state provider for the current page:\n\n   Ext.state.Manager.setProvider(new Ext.state.CookieProvider({\n       expires: new Date(new Date().getTime()+(1000*60*60*24*7)), //7 days from now\n   }));\n\nA stateful object attempts to save state when one of the events\nlisted in the {@link #cfg!stateEvents #stateEvents} configuration fires.\n\nTo save state, a stateful object first serializes its state by\ncalling *{@link #method!getState #getState}*.\n\nThe Component base class implements {@link #method!getState #getState} to save its width and height within the state\nonly if they were initially configured, and have changed from the configured value.\n\nThe Panel class saves its collapsed state in addition to that.\n\nThe Grid class saves its column state and store state (sorters and filters and grouper) in addition to its superclass state.\n\nIf there is more application state to be save, the developer must provide an implementation which\nfirst calls the superclass method to inherit the above behaviour, and then injects new properties\ninto the returned object.\n\nThe value yielded by getState is passed to {@link Ext.state.Manager#method!set Ext.state.Manager#set}\nwhich uses the configured {@link Ext.state.Provider} to save the object\nkeyed by the {@link #cfg!stateId #stateId}.\n\nDuring construction, a stateful object attempts to *restore* its state by calling\n{@link Ext.state.Manager#method!get Ext.state.Manager#get} passing the {@link #cfg!stateId #stateId}\n\nThe resulting object is passed to {@link #method!applyState #applyState}*. The default implementation of\n{@link #method!applyState #applyState} simply copies properties into the object, but a developer may\noverride this to support restoration of more complex application state.\n\nYou can perform extra processing on state save and restore by attaching\nhandlers to the {@link #event!beforestaterestore #beforestaterestore}, {@link #event!staterestore #staterestore},\n{@link #event!beforestatesave #beforestatesave} and {@link #event!statesave #statesave} events.\n",
                "type": "Boolean",
                "src": {
                  "name": "17,15,23",
                  "text": "17,16,8,2441",
                  "type": "17,15,14"
                }
              },
              {
                "$type": "property",
                "name": "stateId",
                "text": "The unique id for this object to use for state management purposes.\n\nSee {@link #cfg!stateful #stateful} for an explanation of saving and restoring state.\n",
                "type": "String",
                "src": {
                  "name": "17,70,22",
                  "text": "17,71,8,141",
                  "type": "17,70,14"
                }
              },
              {
                "$type": "property",
                "name": "store",
                "text": "The data source to which the chart is bound. Acceptable values for this property are:\n\n  - **any {@link Ext.data.Store} class / subclass**\n  - **an {@link Ext.data.Store#cfg!storeId Ext.data.Store#storeId}**\n  - **a {@link Ext.data.Store} config object**.  When passing a config you can\n    specify the store type by alias.  Passing a config object with a store type will\n    dynamically create a new store of that type when the chart is instantiated.\n\nFor example:\n\n    Ext.define('MyApp.store.Customer', {\n        extend: 'Ext.data.Store',\n        alias: 'store.customerstore',\n\n        fields: ['name', 'value']\n    });\n\n\n    Ext.create({\n        xtype: 'cartesian',\n        renderTo: document.body,\n        height: 400,\n        width: 400,\n        store: {\n            type: 'customerstore',\n            data: [{\n                name: 'metric one',\n                value: 10\n            }]\n        },\n        axes: [{\n            type: 'numeric',\n            position: 'left',\n            title: {\n                text: 'Sample Values',\n                fontSize: 15\n            },\n            fields: 'value'\n        }, {\n            type: 'category',\n            position: 'bottom',\n            title: {\n                text: 'Sample Values',\n                fontSize: 15\n            },\n            fields: 'name'\n        }],\n        series: {\n            type: 'bar',\n            xField: 'name',\n            yField: 'value'\n        }\n    });\n",
                "type": "Ext.data.Store/String/Object",
                "src": {
                  "name": "5,211,48",
                  "text": "5,212,12,1447",
                  "type": "5,211,18"
                }
              },
              {
                "$type": "property",
                "name": "style",
                "text": "The style for the chart component.\n",
                "type": "Object",
                "src": {
                  "name": "5,281,26",
                  "text": "5,282,12,35",
                  "type": "5,281,18"
                }
              },
              {
                "$type": "property",
                "name": "suspendLayout",
                "text": "If true, suspend calls to updateLayout. Useful when batching multiple adds to a container\nand not passing them as multiple arguments or an array.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,643,23",
                  "text": "2,644,8,146",
                  "type": "2,643,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "tabGuard",
                "since": "6.0.0",
                "text": "When set to `true`, two elements are added to the panel's element. These are the\n`{@link #property!tabGuardBeforeEl #tabGuardBeforeEl}` and `{@link #property!tabGuardAfterEl #tabGuardAfterEl}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "9,88,8",
                  "name": "9,87,23",
                  "since": "9,89,15",
                  "text": "9,85,8,141",
                  "type": "9,87,14"
                }
              },
              {
                "$type": "property",
                "name": "tabIndex",
                "optional": true,
                "text": "DOM tabIndex attribute for this Focusable's\nfocusEl.\n",
                "type": "Number",
                "src": {
                  "name": "11,33,23",
                  "text": "11,33,33,44:11,34,8,9",
                  "type": "11,33,14"
                }
              },
              {
                "$type": "property",
                "name": "tbar",
                "text": "Convenience config. Short for 'Top Bar'.\n\n    tbar: [\n      { xtype: 'button', text: 'Button 1' }\n    ]\n\nis equivalent to\n\n    dockedItems: [{\n        xtype: 'toolbar',\n        dock: 'top',\n        items: [\n            { xtype: 'button', text: 'Button 1' }\n        ]\n    }]\n",
                "type": "Object/Object[]",
                "src": {
                  "name": "6,461,31",
                  "text": "6,462,8,274",
                  "type": "6,461,14"
                }
              },
              {
                "$type": "property",
                "name": "theme",
                "optional": true,
                "text": "The name of the theme to be used. A theme defines the colors and styles\nused by the series, axes, markers and other chart components.\nPlease see the documentation for the {@link Ext.chart.theme.Base} class for more information.\nPossible theme values are:\n  - 'green', 'sky', 'red', 'purple', 'blue', 'yellow'\n  - 'category1' to 'category6'\n  - and the above theme names with the '-gradients' suffix, e.g. 'green-gradients'\n",
                "type": "String",
                "value": "\"default\"",
                "src": {
                  "name": "5,269,27",
                  "text": "5,270,12,423",
                  "type": "5,269,18",
                  "value": "5,269,33"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "inheritdoc": "Ext.panel.Header#title",
                "localDoc": "When a `title` is specified, the {@link Ext.panel.Header} will\nautomatically be created and displayed unless {@link #header} is set to\n`false`.\n",
                "name": "title",
                "type": "String",
                "src": {
                  "accessor": "6,212,12",
                  "inheritdoc": "6,208,12",
                  "localDoc": "6,209,22",
                  "name": "6,214,0",
                  "type": "6,207,18"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "inheritdoc": "Ext.panel.Header#cfg-titleAlign",
                "name": "titleAlign",
                "src": {
                  "accessor": "6,219,12",
                  "inheritdoc": "6,218,12",
                  "name": "6,217,17"
                }
              },
              {
                "$type": "property",
                "name": "titleCollapse",
                "text": "`true` to allow expanding and collapsing the panel (when `{@link #cfg!collapsible #collapsible} = true`) by clicking anywhere in\nthe header bar, `false`) to allow it only by clicking to tool button). When a panel is used in a\n{@link Ext.layout.container.Border}, the {@link #cfg!floatable #floatable} option can influence the behavior of collapsing.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,801,23",
                  "text": "6,802,8,332",
                  "type": "6,801,14"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "inheritdoc": "Ext.panel.Header#cfg-titleRotation",
                "name": "titleRotation",
                "src": {
                  "accessor": "6,226,12",
                  "inheritdoc": "6,225,12",
                  "name": "6,224,17"
                }
              },
              {
                "$type": "property",
                "name": "toFrontOnShow",
                "text": "True to automatically call {@link #method!toFront #toFront} when the {@link #method!show #method-show} method is called on an already visible,\nfloating component.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1199,23",
                  "text": "3,1200,8,134",
                  "type": "3,1199,14"
                }
              },
              {
                "$type": "property",
                "name": "tools",
                "text": "An array of {@link Ext.panel.Tool} configs/instances to be added to the header tool area. The tools are stored as\nchild components of the header container. They can be accessed using {@link #method!down #down} and {#query}, as well as the\nother component methods. The toggle tool is automatically created if {@link #cfg!collapsible #collapsible} is set to true.\n\nNote that, apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the\nvisual button. Any required functionality must be provided by adding handlers that implement the necessary\nbehavior.\n\nExample usage:\n\n    tools:[{\n        type:'refresh',\n        tooltip: 'Refresh form Data',\n        // hidden:true,\n        handler: function(event, toolEl, panelHeader) {\n            // refresh logic\n        }\n    },\n    {\n        type:'help',\n        tooltip: 'Get Help',\n        callback: function(panel, tool, event) {\n            // show help here\n        }\n    }]\n\nThe difference between `handler` and `callback` is the signature. For details on\nthe distinction, see {@link Ext.panel.Tool}.\n",
                "type": "Object[]/Ext.panel.Tool[]",
                "src": {
                  "name": "6,809,41",
                  "text": "6,810,8,1061",
                  "type": "6,809,14"
                }
              },
              {
                "$type": "property",
                "name": "tpl",
                "since": "3.4.0",
                "text": "An {@link Ext.Template}, {@link Ext.XTemplate} or an array of strings to form an Ext.XTemplate. Used in\nconjunction with the `{@link #cfg!data #data}` and `{@link #cfg!tplWriteMode #tplWriteMode}` configurations.\n",
                "type": "Ext.XTemplate/Ext.Template/String/String[]",
                "src": {
                  "name": "3,1206,58",
                  "since": "3,1210,15",
                  "text": "3,1207,8,186",
                  "type": "3,1206,14"
                }
              },
              {
                "$type": "property",
                "name": "tplWriteMode",
                "since": "3.4.0",
                "text": "The Ext.(X)Template method to use when updating the content area of the Component.\nSee `{@link Ext.XTemplate#method!overwrite Ext.XTemplate#overwrite}` for information on default mode.\n",
                "type": "String",
                "src": {
                  "name": "3,1223,22",
                  "since": "3,1227,15",
                  "text": "3,1224,8,155",
                  "type": "3,1223,14"
                }
              },
              {
                "$type": "property",
                "name": "twoWayBindable",
                "text": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `value` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes #publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n",
                "type": "String/String[]/Object",
                "src": {
                  "name": "8,239,42",
                  "text": "8,240,12,402",
                  "type": "8,239,18"
                }
              },
              {
                "$type": "property",
                "name": "ui",
                "text": "A UI style for a component.\n",
                "type": "String",
                "src": {
                  "name": "3,1232,22",
                  "text": "3,1233,8,28",
                  "type": "3,1232,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "uiCls",
                "text": "An array of of `classNames` which are currently applied to this component.\n",
                "type": "String[]",
                "src": {
                  "access": "3,1240,8",
                  "name": "3,1238,24",
                  "text": "3,1239,8,75",
                  "type": "3,1238,14"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "name": "userCls",
                "text": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n",
                "type": "String/String[]",
                "src": {
                  "accessor": "3,1257,8",
                  "name": "3,1245,31",
                  "text": "3,1246,8,277",
                  "type": "3,1245,14"
                }
              },
              {
                "$type": "property",
                "name": "viewModel",
                "text": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n",
                "type": "String/Object/Ext.app.ViewModel",
                "src": {
                  "name": "8,258,51",
                  "text": "8,259,12,690",
                  "type": "8,258,18"
                }
              },
              {
                "$type": "property",
                "name": "weight",
                "optional": true,
                "text": "A value to control how Components are laid out in a {@link Ext.layout.container.Border} layout or as docked items.\n\nIn a Border layout, this can control how the regions (not the center) region lay out if the west or east take full height\nor if the north or south region take full width. Also look at the {@link Ext.layout.container.Border#cfg!regionWeights Ext.layout.container.Border#regionWeights} on the Border layout. An example to show how you can\ntake control of this is:\n\n    Ext.create('Ext.container.Viewport', {\n        layout      : 'border',\n        defaultType : 'panel',\n        items       : [\n            {\n                region : 'north',\n                title  : 'North',\n                height : 100\n            },\n            {\n                region : 'south',\n                title  : 'South',\n                height : 100,\n                weight : -25\n            },\n            {\n                region : 'west',\n                title  : 'West',\n                width  : 200,\n                weight : 15\n            },\n            {\n                region : 'east',\n                title  : 'East',\n                width  : 200\n            },\n            {\n                region : 'center',\n                title  : 'center'\n            }\n        ]\n    });\n\nIf docked items, the weight will order how the items are laid out. Here is an example to put a {@link Ext.toolbar.Toolbar} above\na {@link Ext.panel.Panel}'s header:\n\n    Ext.create('Ext.panel.Panel', {\n        renderTo    : document.body,\n        width       : 300,\n        height      : 300,\n        title       : 'Panel',\n        html        : 'Panel Body',\n        dockedItems : [\n            {\n                xtype : 'toolbar',\n                items : [\n                    {\n                        text : 'Save'\n                    }\n                ]\n            },\n            {\n                xtype  : 'toolbar',\n                weight : -10,\n                items  : [\n                    {\n                        text : 'Remove'\n                    }\n                ]\n            }\n        ]\n    });\n",
                "type": "Number",
                "src": {
                  "name": "3,1262,23",
                  "text": "3,1263,8,2060",
                  "type": "3,1262,14"
                }
              },
              {
                "$type": "property",
                "name": "width",
                "text": "The width of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.\n",
                "type": "Number/String",
                "src": {
                  "name": "3,1335,29",
                  "text": "3,1336,8,148",
                  "type": "3,1335,14"
                }
              },
              {
                "$type": "property",
                "name": "xtype",
                "since": "2.3.0",
                "text": "**Note:** Only applies to {@link Ext.Component} derived classes when used as\na config in {@link Ext#method!define Ext#define}.\n\nThis property provides a shorter alternative to creating objects than using a full\nclass name. Using `{@link #cfg!xtype xtype}` is the most common way to define component instances,\nespecially in a container. For example, the items in a form containing text fields\ncould be created explicitly like so:\n\n     items: [\n         Ext.create('Ext.form.field.Text', {\n             fieldLabel: 'Foo'\n         }),\n         Ext.create('Ext.form.field.Text', {\n             fieldLabel: 'Bar'\n         }),\n         Ext.create('Ext.form.field.Number', {\n             fieldLabel: 'Num'\n         })\n     ]\n\nBut by using `{@link #cfg!xtype xtype}`, the above becomes:\n\n     items: [\n         {\n             xtype: 'textfield',\n             fieldLabel: 'Foo'\n         },\n         {\n             xtype: 'textfield',\n             fieldLabel: 'Bar'\n         },\n         {\n             xtype: 'numberfield',\n             fieldLabel: 'Num'\n         }\n     ]\n\nWhen the `{@link #cfg!xtype xtype}` is common to many items, {@link Ext.container.Container#cfg!defaultType Ext.container.Container#defaultType}\nis another way to specify the `{@link #cfg!xtype xtype}` for all items that don't have an explicit `{@link #cfg!xtype xtype}`:\n\n     defaultType: 'textfield',\n     items: [\n         { fieldLabel: 'Foo' },\n         { fieldLabel: 'Bar' },\n         { fieldLabel: 'Num', xtype: 'numberfield' }\n     ]\n\nEach member of the `items` array is now just a \"configuration object\". These objects\nare used to create and configure component instances. A configuration object can be\nmanually used to instantiate a component using {@link Ext#method!widget Ext#widget}:\n\n     var text1 = Ext.create('Ext.form.field.Text', {\n         fieldLabel: 'Foo'\n     });\n\n     // or alternatively:\n\n     var text1 = Ext.widget({\n         xtype: 'textfield',\n         fieldLabel: 'Foo'\n     });\n\nThis conversion of configuration objects into instantiated components is done when\na container is created as part of its {Ext.container.AbstractContainer#initComponent}\nprocess. As part of the same process, the `items` array is converted from its raw\narray form into a {@link Ext.util.MixedCollection} instance.\n\nYou can define your own `{@link #cfg!xtype xtype}` on a custom {@link Ext.Component} by specifying\nthe `{@link #cfg!xtype xtype}` property in {@link Ext#method!define Ext#define}. For example:\n\n    Ext.define('MyApp.PressMeButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'pressmebutton',\n        text: 'Press Me'\n    });\n\nCare should be taken when naming an `{@link #cfg!xtype xtype}` in a custom component because there is\na single, shared scope for all xtypes. Third part components should consider using\na prefix to avoid collisions.\n\n    Ext.define('Foo.form.CoolButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'ux-coolbutton',\n        text: 'Cool!'\n    });\n\nSee {@link Ext.enums.Widget} for list of all available xtypes.\n",
                "type": "Ext.enums.Widget",
                "src": {
                  "name": "3,1341,32",
                  "since": "3,1430,15",
                  "text": "3,1342,8,2822",
                  "type": "3,1341,14"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "activate",
                "text": "Fires after a Component has been visually activated.\n\n**Note** This event is only fired if this Component is a child of a {@link Ext.container.Container}\nthat uses {@link Ext.layout.container.Card} as it's layout or this Component is a floating Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1820,31",
                      "type": "3,1820,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1815,15",
                  "text": "3,1816,8,256"
                }
              },
              {
                "$type": "event",
                "name": "add",
                "since": "2.3.0",
                "text": "Fires after any {@link Ext.Component} is added or inserted into the container.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "2,698,41",
                      "type": "2,698,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component that was added\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,699,31",
                      "text": "2,699,41,29",
                      "type": "2,699,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which the component was added to the container's items collection\n",
                    "type": "Number",
                    "src": {
                      "name": "2,700,24",
                      "text": "2,700,30,79",
                      "type": "2,700,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,696,15",
                  "since": "2,701,15",
                  "text": "2,697,8,79"
                }
              },
              {
                "$type": "event",
                "name": "added",
                "since": "3.4.0",
                "text": "Fires after a Component had been added to a Container.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1845,31",
                      "type": "3,1845,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "container",
                    "text": "Parent Container\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "3,1846,41",
                      "text": "3,1846,51,17",
                      "type": "3,1846,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "pos",
                    "text": "position of Component\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1847,24",
                      "text": "3,1847,28,22",
                      "type": "3,1847,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1843,15",
                  "since": "3,1848,15",
                  "text": "3,1844,8,55"
                }
              },
              {
                "$type": "event",
                "name": "afterlayout",
                "since": "2.3.0",
                "text": "Fires when the components in this container are arranged by the associated layout manager.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "2,707,41",
                      "type": "2,707,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "layout",
                    "text": "The ContainerLayout implementation for this container\n",
                    "type": "Ext.layout.container.Container",
                    "src": {
                      "name": "2,708,48",
                      "text": "2,708,55,54",
                      "type": "2,708,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,705,15",
                  "since": "2,709,15",
                  "text": "2,706,8,91"
                }
              },
              {
                "$type": "event",
                "name": "afterlayoutanimation",
                "since": "6.0.0",
                "text": "This event first after a component's layout has been updated by a layout that\nincluded animation (e.g., a {@link Ext.panel.Panel} in an\n{@link Ext.layout.container.Accordion} layout).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1800,31",
                      "type": "3,1800,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1796,15",
                  "since": "3,1801,15",
                  "text": "3,1797,8,200"
                }
              },
              {
                "$type": "event",
                "name": "afterrender",
                "since": "3.4.0",
                "text": "Fires after the component rendering is finished.\n\nThe `{@link #event!afterrender afterrender}` event is fired after this Component has been {@link #property!rendered #rendered}, been post-processed by any\n`{@link #method!afterRender afterRender}` method defined for the Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1925,31",
                      "type": "3,1925,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1920,15",
                  "since": "3,1926,15",
                  "text": "3,1921,8,207"
                }
              },
              {
                "$type": "event",
                "name": "beforeactivate",
                "text": "Fires before a Component has been visually activated. Returning `false` from an event listener can prevent\nthe activate from occurring.\n\n**Note** This event is only fired if this Component is a child of a {@link Ext.container.Container}\nthat uses {@link Ext.layout.container.Card} as it's layout.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1811,31",
                      "type": "3,1811,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1805,15",
                  "text": "3,1806,8,297"
                }
              },
              {
                "$type": "event",
                "name": "beforeadd",
                "since": "2.3.0",
                "text": "Fires before any {@link Ext.Component} is added or inserted into the container.\nA handler can return false to cancel the add.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "2,716,41",
                      "type": "2,716,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component being added\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,717,31",
                      "text": "2,717,41,26",
                      "type": "2,717,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which the component will be added to the container's items collection\n",
                    "type": "Number",
                    "src": {
                      "name": "2,718,24",
                      "text": "2,718,30,83",
                      "type": "2,718,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,713,15",
                  "since": "2,719,15",
                  "text": "2,714,8,126"
                }
              },
              {
                "$type": "event",
                "name": "beforeclose",
                "text": "Fires before the user closes the panel. Return false from any listener to stop the close event being\nfired\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "panel",
                    "text": "The Panel object\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,948,33",
                      "text": "6,948,39,17",
                      "type": "6,948,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,945,15",
                  "text": "6,946,8,107"
                }
              },
              {
                "$type": "event",
                "name": "beforecollapse",
                "text": "Fires before this panel is collapsed. Return false to prevent the collapse.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "The Panel being collapsed.\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,954,33",
                      "text": "6,954,35,27",
                      "type": "6,954,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "direction",
                    "text": ". The direction of the collapse. One of\n\n  - Ext.Component.DIRECTION_TOP\n  - Ext.Component.DIRECTION_RIGHT\n  - Ext.Component.DIRECTION_BOTTOM\n  - Ext.Component.DIRECTION_LEFT\n",
                    "type": "String",
                    "src": {
                      "name": "6,955,24",
                      "text": "6,955,34,40:6,956,8,136",
                      "type": "6,955,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "text": "True if the collapse is animated, else false.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "6,962,25",
                      "text": "6,962,33,46",
                      "type": "6,962,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,952,15",
                  "text": "6,953,8,76"
                }
              },
              {
                "$type": "event",
                "name": "beforedeactivate",
                "text": "Fires before a Component has been visually deactivated. Returning `false` from an event listener can\nprevent the deactivate from occurring.\n\n**Note** This event is only fired if this Component is a child of a {@link Ext.container.Container}\nthat uses {@link Ext.layout.container.Card} as it's layout.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1830,31",
                      "type": "3,1830,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1824,15",
                  "text": "3,1825,8,301"
                }
              },
              {
                "$type": "event",
                "name": "beforedestroy",
                "since": "1.1.0",
                "text": "Fires before the component is {@link #method!destroy #method-destroy}ed. Return `false` from an event handler to stop the\n{@link #method!destroy #method-destroy}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1944,31",
                      "type": "3,1944,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1941,15",
                  "since": "3,1945,15",
                  "text": "3,1942,8,131"
                }
              },
              {
                "$type": "event",
                "name": "beforeexpand",
                "text": "Fires before this panel is expanded. Return false to prevent the expand.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "The Panel being expanded.\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,968,33",
                      "text": "6,968,35,26",
                      "type": "6,968,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "text": "True if the expand is animated, else false.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "6,969,25",
                      "text": "6,969,33,44",
                      "type": "6,969,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,966,15",
                  "text": "6,967,8,73"
                }
              },
              {
                "$type": "event",
                "name": "beforehide",
                "since": "1.1.0",
                "text": "Fires before the component is hidden when calling the {@link Ext.Component#method!hide Ext.Component#method-hide} method. Return `false` from an event\nhandler to stop the hide.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1884,31",
                      "type": "3,1884,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1881,15",
                  "since": "3,1885,15",
                  "text": "3,1882,8,156"
                }
              },
              {
                "$type": "event",
                "name": "beforerefresh",
                "text": "Fires before a refresh to the chart data is called.  If the `{@link #event!beforerefresh beforerefresh}` handler returns\n`false` the {@link #event!refresh #refresh} action will be canceled.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,105,41",
                      "type": "5,105,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,102,15",
                  "text": "5,103,8,146"
                }
              },
              {
                "$type": "event",
                "name": "beforeremove",
                "since": "2.3.0",
                "text": "Fires before any {@link Ext.Component} is removed from the container.  A handler can return\nfalse to cancel the remove.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "2,726,41",
                      "type": "2,726,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component being removed\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,727,31",
                      "text": "2,727,41,28",
                      "type": "2,727,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,723,15",
                  "since": "2,728,15",
                  "text": "2,724,8,120"
                }
              },
              {
                "$type": "event",
                "name": "beforerender",
                "since": "1.1.0",
                "text": "Fires before the component is {@link #property!rendered #rendered}. Return `false` from an event handler to stop the\n{@link #method!render #method-render}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1908,31",
                      "type": "3,1908,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1905,15",
                  "since": "3,1909,15",
                  "text": "3,1906,8,122"
                }
              },
              {
                "$type": "event",
                "name": "beforeshow",
                "since": "1.1.0",
                "text": "Fires before the component is shown when calling the {@link Ext.Component#method!show Ext.Component#method-show} method. Return `false` from an event\nhandler to stop the show.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1869,31",
                      "type": "3,1869,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1866,15",
                  "since": "3,1870,15",
                  "text": "3,1867,8,155"
                }
              },
              {
                "$type": "event",
                "name": "beforestaterestore",
                "text": "Fires before the state of the object is restored. Return false from an event handler to stop the restore.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.state.Stateful",
                    "src": {
                      "name": "17,96,36",
                      "type": "17,96,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The hash of state values returned from the StateProvider. If this\nevent is not vetoed, then the state object is passed to *`{@link #method!applyState applyState}`*. By default,\nthat simply copies property values into this object. The method maybe overriden to\nprovide custom state restoration.\n",
                    "type": "Object",
                    "src": {
                      "name": "17,97,24",
                      "text": "17,97,30,66:17,98,8,201",
                      "type": "17,97,16"
                    }
                  }
                ],
                "src": {
                  "name": "17,94,15",
                  "text": "17,95,8,106"
                }
              },
              {
                "$type": "event",
                "name": "beforestatesave",
                "text": "Fires before the state of the object is saved to the configured state provider. Return false to stop the save.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.state.Stateful",
                    "src": {
                      "name": "17,115,36",
                      "type": "17,115,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The hash of state values. This is determined by calling\n*`getState()`* on the object. This method must be provided by the\ndeveloper to return whatever representation of state is required, by default, Ext.state.Stateful\nhas a null implementation.\n",
                    "type": "Object",
                    "src": {
                      "name": "17,116,24",
                      "text": "17,116,30,56:17,117,8,190",
                      "type": "17,116,16"
                    }
                  }
                ],
                "src": {
                  "name": "17,113,15",
                  "text": "17,114,8,111"
                }
              },
              {
                "$type": "event",
                "name": "blur",
                "text": "Fires when this Component loses focus.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "11,53,31",
                      "type": "11,53,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The blur event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "11,54,33",
                      "text": "11,54,39,16",
                      "type": "11,54,16"
                    }
                  }
                ],
                "src": {
                  "name": "11,51,15",
                  "text": "11,52,8,39"
                }
              },
              {
                "$type": "event",
                "name": "bodyresize",
                "text": "Fires when the size of the draw container body changes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "size",
                    "text": "The object containing 'width' and 'height' of the draw container's body.\n",
                    "type": "Object",
                    "src": {
                      "name": "10,117,24",
                      "text": "10,117,29,73",
                      "type": "10,117,16"
                    }
                  }
                ],
                "src": {
                  "name": "10,115,15",
                  "text": "10,116,8,56"
                }
              },
              {
                "$type": "event",
                "name": "boxready",
                "text": "Fires *one time* - after the component has been laid out for the first time at its initial size.\n\nThis event does not fire on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1935,31",
                      "type": "3,1935,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The initial width.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1936,24",
                      "text": "3,1936,30,19",
                      "type": "3,1936,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The initial height.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1937,24",
                      "text": "3,1937,31,20",
                      "type": "3,1937,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1930,15",
                  "text": "3,1931,8,256"
                }
              },
              {
                "$type": "event",
                "name": "childmove",
                "text": "Fires after any {@link Ext.Component} has changed its ordinal position within the container.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "2,742,41",
                      "type": "2,742,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component that was moved\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,743,31",
                      "text": "2,743,41,29",
                      "type": "2,743,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prevIndex",
                    "text": "The previous ordinal position of the Component\n",
                    "type": "Number",
                    "src": {
                      "name": "2,744,24",
                      "text": "2,744,34,47",
                      "type": "2,744,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newIndex",
                    "text": "The new ordinal position of the Component\n",
                    "type": "Number",
                    "src": {
                      "name": "2,745,24",
                      "text": "2,745,33,42",
                      "type": "2,745,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,740,15",
                  "text": "2,741,8,93"
                }
              },
              {
                "$type": "event",
                "name": "close",
                "text": "Fires when the user closes the panel.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "panel",
                    "text": "The Panel object\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,975,33",
                      "text": "6,975,39,17",
                      "type": "6,975,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,973,15",
                  "text": "6,974,8,38"
                }
              },
              {
                "$type": "event",
                "name": "collapse",
                "text": "Fires after this Panel has collapsed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "The Panel that has been collapsed.\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,981,33",
                      "text": "6,981,35,35",
                      "type": "6,981,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,979,15",
                  "text": "6,980,8,38"
                }
              },
              {
                "$type": "event",
                "name": "deactivate",
                "text": "Fires after a Component has been visually deactivated.\n\n**Note** This event is only fired if this Component is a child of a {@link Ext.container.Container}\nthat uses {@link Ext.layout.container.Card} as it's layout or this Component is a floating Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1839,31",
                      "type": "3,1839,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1834,15",
                  "text": "3,1835,8,258"
                }
              },
              {
                "$type": "event",
                "name": "destroy",
                "since": "1.1.0",
                "text": "Fires after the component is {@link #method!destroy #method-destroy}ed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1951,31",
                      "type": "3,1951,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1949,15",
                  "since": "3,1952,15",
                  "text": "3,1950,8,56"
                }
              },
              {
                "$type": "event",
                "name": "disable",
                "since": "1.1.0",
                "text": "Fires after the component is disabled.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1854,31",
                      "type": "3,1854,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1852,15",
                  "since": "3,1855,15",
                  "text": "3,1853,8,39"
                }
              },
              {
                "$type": "event",
                "name": "dockedadd",
                "text": "Fires when any {@link Ext.Component} is added or inserted as a docked item.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "9,17,33",
                      "type": "9,17,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component being added\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "9,18,31",
                      "text": "9,18,41,26",
                      "type": "9,18,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which the component will be added docked items collection\n",
                    "type": "Number",
                    "src": {
                      "name": "9,19,24",
                      "text": "9,19,30,71",
                      "type": "9,19,16"
                    }
                  }
                ],
                "src": {
                  "name": "9,15,15",
                  "text": "9,16,8,76"
                }
              },
              {
                "$type": "event",
                "name": "dockedremove",
                "text": "Fires when any {@link Ext.Component} is removed from the docked items.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "9,25,33",
                      "type": "9,25,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component being removed\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "9,26,31",
                      "text": "9,26,41,28",
                      "type": "9,26,16"
                    }
                  }
                ],
                "src": {
                  "name": "9,23,15",
                  "text": "9,24,8,71"
                }
              },
              {
                "$type": "event",
                "name": "enable",
                "since": "1.1.0",
                "text": "Fires after the component is enabled.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1861,31",
                      "type": "3,1861,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1859,15",
                  "since": "3,1862,15",
                  "text": "3,1860,8,38"
                }
              },
              {
                "$type": "event",
                "name": "expand",
                "text": "Fires after this Panel has expanded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "The Panel that has been expanded.\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,987,33",
                      "text": "6,987,35,34",
                      "type": "6,987,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,985,15",
                  "text": "6,986,8,37"
                }
              },
              {
                "$type": "event",
                "name": "float",
                "text": "Fires after a collapsed Panel has been \"floated\" by clicking on\nit's header. Only applicable when the Panel is an item in a\n{@link Ext.layout.container.Border}.\n",
                "src": {
                  "name": "6,991,15",
                  "text": "6,992,8,175"
                }
              },
              {
                "$type": "event",
                "name": "focus",
                "text": "Fires when this Component receives focus.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "11,46,31",
                      "type": "11,46,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The focus event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "11,47,33",
                      "text": "11,47,39,17",
                      "type": "11,47,16"
                    }
                  }
                ],
                "src": {
                  "name": "11,44,15",
                  "text": "11,45,8,42"
                }
              },
              {
                "$type": "event",
                "name": "focusenter",
                "text": "Fires when focus enters this Component's hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "11,60,31",
                      "type": "11,60,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The focusenter event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "11,61,33",
                      "text": "11,61,39,22",
                      "type": "11,61,16"
                    }
                  }
                ],
                "src": {
                  "name": "11,58,15",
                  "text": "11,59,8,52"
                }
              },
              {
                "$type": "event",
                "name": "focusleave",
                "text": "Fires when focus leaves this Component's hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "11,67,31",
                      "type": "11,67,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The focusleave event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "11,68,33",
                      "text": "11,68,39,22",
                      "type": "11,68,16"
                    }
                  }
                ],
                "src": {
                  "name": "11,65,15",
                  "text": "11,66,8,52"
                }
              },
              {
                "$type": "event",
                "name": "glyphchange",
                "text": "Fired when the Panel glyph has been changed by the {@link #setGlyph} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,1000,33",
                      "type": "6,1000,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newGlyph",
                    "type": "Number/String",
                    "src": {
                      "name": "6,1001,31",
                      "type": "6,1001,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldGlyph",
                    "type": "Number/String",
                    "src": {
                      "name": "6,1002,31",
                      "type": "6,1002,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,998,15",
                  "text": "6,999,8,77"
                }
              },
              {
                "$type": "event",
                "name": "hide",
                "since": "1.1.0",
                "text": "Fires after the component is hidden. Fires after the component is hidden when calling the {@link Ext.Component#method!hide Ext.Component#method-hide}\nmethod.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1892,31",
                      "type": "3,1892,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1889,15",
                  "since": "3,1893,15",
                  "text": "3,1890,8,137"
                }
              },
              {
                "$type": "event",
                "name": "iconchange",
                "text": "Fires after the Panel icon has been set or changed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "The Panel which has the icon changed.\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,1008,33",
                      "text": "6,1008,35,38",
                      "type": "6,1008,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newIcon",
                    "text": "The path to the new icon image.\n",
                    "type": "String",
                    "src": {
                      "name": "6,1009,24",
                      "text": "6,1009,32,32",
                      "type": "6,1009,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldIcon",
                    "text": "The path to the previous panel icon image.\n",
                    "type": "String",
                    "src": {
                      "name": "6,1010,24",
                      "text": "6,1010,32,43",
                      "type": "6,1010,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,1006,15",
                  "text": "6,1007,8,52"
                }
              },
              {
                "$type": "event",
                "name": "iconclschange",
                "text": "Fires after the Panel iconCls has been set or changed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "The Panel which has the iconCls changed.\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,1016,33",
                      "text": "6,1016,35,41",
                      "type": "6,1016,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newIconCls",
                    "text": "The new iconCls.\n",
                    "type": "String",
                    "src": {
                      "name": "6,1017,24",
                      "text": "6,1017,35,17",
                      "type": "6,1017,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldIconCls",
                    "text": "The previous panel iconCls.\n",
                    "type": "String",
                    "src": {
                      "name": "6,1018,24",
                      "text": "6,1018,35,28",
                      "type": "6,1018,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,1014,15",
                  "text": "6,1015,8,55"
                }
              },
              {
                "$type": "event",
                "name": "itemclick",
                "text": "Fires when a click event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,175,41",
                      "type": "5,175,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "5,176,24",
                      "type": "5,176,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "5,177,23",
                      "type": "5,177,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,171,15",
                  "text": "5,172,8,164"
                }
              },
              {
                "$type": "event",
                "name": "itemdblclick",
                "text": "Fires when a double click event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,185,41",
                      "type": "5,185,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "5,186,24",
                      "type": "5,186,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "5,187,23",
                      "type": "5,187,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,181,15",
                  "text": "5,182,8,171"
                }
              },
              {
                "$type": "event",
                "name": "itemmousedown",
                "text": "Fires when a mousedown event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,145,41",
                      "type": "5,145,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "5,146,24",
                      "type": "5,146,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "5,147,23",
                      "type": "5,147,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,141,15",
                  "text": "5,142,8,168"
                }
              },
              {
                "$type": "event",
                "name": "itemmousemove",
                "text": "Fires when the mouse is moved on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,125,41",
                      "type": "5,125,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "5,126,24",
                      "type": "5,126,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "5,127,23",
                      "type": "5,127,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,121,15",
                  "text": "5,122,8,162"
                }
              },
              {
                "$type": "event",
                "name": "itemmouseout",
                "text": "Fires when the mouse exits a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,165,41",
                      "type": "5,165,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "5,166,24",
                      "type": "5,166,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "5,167,23",
                      "type": "5,167,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,161,15",
                  "text": "5,162,8,156"
                }
              },
              {
                "$type": "event",
                "name": "itemmouseover",
                "text": "Fires when the mouse enters a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,155,41",
                      "type": "5,155,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "5,156,24",
                      "type": "5,156,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "5,157,23",
                      "type": "5,157,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,151,15",
                  "text": "5,152,8,157"
                }
              },
              {
                "$type": "event",
                "name": "itemmouseup",
                "text": "Fires when a mouseup event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,135,41",
                      "type": "5,135,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "5,136,24",
                      "type": "5,136,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "5,137,23",
                      "type": "5,137,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,131,15",
                  "text": "5,132,8,166"
                }
              },
              {
                "$type": "event",
                "name": "itemtap",
                "text": "Fires when a tap event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,195,41",
                      "type": "5,195,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "5,196,24",
                      "type": "5,196,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "5,197,23",
                      "type": "5,197,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,191,15",
                  "text": "5,192,8,162"
                }
              },
              {
                "$type": "event",
                "name": "move",
                "text": "Fires after the component is moved.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1972,31",
                      "type": "3,1972,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new x position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1973,24",
                      "text": "3,1973,26,20",
                      "type": "3,1973,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The new y position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1974,24",
                      "text": "3,1974,26,20",
                      "type": "3,1974,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1970,15",
                  "text": "3,1971,8,36"
                }
              },
              {
                "$type": "event",
                "name": "redraw",
                "text": "Fires after the chart is redrawn.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,117,41",
                      "type": "5,117,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,115,15",
                  "text": "5,116,8,34"
                }
              },
              {
                "$type": "event",
                "name": "refresh",
                "text": "Fires after the chart data has been refreshed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,111,41",
                      "type": "5,111,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,109,15",
                  "text": "5,110,8,47"
                }
              },
              {
                "$type": "event",
                "name": "remove",
                "since": "2.3.0",
                "text": "Fires after any {@link Ext.Component} is removed from the container.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "2,734,41",
                      "type": "2,734,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component that was removed\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,735,31",
                      "text": "2,735,41,31",
                      "type": "2,735,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,732,15",
                  "since": "2,736,15",
                  "text": "2,733,8,69"
                }
              },
              {
                "$type": "event",
                "name": "removed",
                "since": "3.4.0",
                "text": "Fires when a component is removed from an Ext.container.Container\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1899,31",
                      "type": "3,1899,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ownerCt",
                    "text": "Container which holds the component\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "3,1900,41",
                      "text": "3,1900,49,36",
                      "type": "3,1900,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1897,15",
                  "since": "3,1901,15",
                  "text": "3,1898,8,66"
                }
              },
              {
                "$type": "event",
                "name": "render",
                "since": "1.1.0",
                "text": "Fires after the component markup is {@link #property!rendered #rendered}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1915,31",
                      "type": "3,1915,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1913,15",
                  "since": "3,1916,15",
                  "text": "3,1914,8,55"
                }
              },
              {
                "$type": "event",
                "name": "resize",
                "text": "Fires after the component is resized. Note that this does *not* fire when the component is first laid out at its initial\nsize. To hook that point in the life cycle, use the {@link #event!boxready #boxready} event.\n\nThis event does not fire on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1962,31",
                      "type": "3,1962,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width that was set.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1963,24",
                      "text": "3,1963,30,28",
                      "type": "3,1963,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height that was set.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1964,24",
                      "text": "3,1964,31,29",
                      "type": "3,1964,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldWidth",
                    "text": "The previous width.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1965,24",
                      "text": "3,1965,33,20",
                      "type": "3,1965,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldHeight",
                    "text": "The previous height.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1966,24",
                      "text": "3,1966,34,21",
                      "type": "3,1966,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1956,15",
                  "text": "3,1957,8,357"
                }
              },
              {
                "$type": "event",
                "name": "show",
                "since": "1.1.0",
                "text": "Fires after the component is shown when calling the {@link Ext.Component#method!show Ext.Component#method-show} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1876,31",
                      "type": "3,1876,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1874,15",
                  "since": "3,1877,15",
                  "text": "3,1875,8,99"
                }
              },
              {
                "$type": "event",
                "name": "spriteclick",
                "text": "Fires when a click event occurs on a sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sprite",
                    "type": "Object",
                    "src": {
                      "name": "10,96,24",
                      "type": "10,96,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "10,97,23",
                      "type": "10,97,16"
                    }
                  }
                ],
                "src": {
                  "name": "10,94,15",
                  "text": "10,95,8,45"
                }
              },
              {
                "$type": "event",
                "name": "spritedblclick",
                "text": "Fires when a double click event occurs on a sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sprite",
                    "type": "Object",
                    "src": {
                      "name": "10,103,24",
                      "type": "10,103,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "10,104,23",
                      "type": "10,104,16"
                    }
                  }
                ],
                "src": {
                  "name": "10,101,15",
                  "text": "10,102,8,52"
                }
              },
              {
                "$type": "event",
                "name": "spritemousedown",
                "text": "Fires when a mousedown event occurs on a sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sprite",
                    "type": "Object",
                    "src": {
                      "name": "10,75,24",
                      "type": "10,75,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "10,76,23",
                      "type": "10,76,16"
                    }
                  }
                ],
                "src": {
                  "name": "10,73,15",
                  "text": "10,74,8,49"
                }
              },
              {
                "$type": "event",
                "name": "spritemousemove",
                "text": "Fires when the mouse is moved on a sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sprite",
                    "type": "Object",
                    "src": {
                      "name": "10,61,24",
                      "type": "10,61,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "10,62,23",
                      "type": "10,62,16"
                    }
                  }
                ],
                "src": {
                  "name": "10,59,15",
                  "text": "10,60,8,43"
                }
              },
              {
                "$type": "event",
                "name": "spritemouseout",
                "text": "Fires when the mouse exits a sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sprite",
                    "type": "Object",
                    "src": {
                      "name": "10,89,24",
                      "type": "10,89,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "10,90,23",
                      "type": "10,90,16"
                    }
                  }
                ],
                "src": {
                  "name": "10,87,15",
                  "text": "10,88,8,37"
                }
              },
              {
                "$type": "event",
                "name": "spritemouseover",
                "text": "Fires when the mouse enters a sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sprite",
                    "type": "Object",
                    "src": {
                      "name": "10,82,24",
                      "type": "10,82,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "10,83,23",
                      "type": "10,83,16"
                    }
                  }
                ],
                "src": {
                  "name": "10,80,15",
                  "text": "10,81,8,38"
                }
              },
              {
                "$type": "event",
                "name": "spritemouseup",
                "text": "Fires when a mouseup event occurs on a sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sprite",
                    "type": "Object",
                    "src": {
                      "name": "10,68,24",
                      "type": "10,68,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "10,69,23",
                      "type": "10,69,16"
                    }
                  }
                ],
                "src": {
                  "name": "10,66,15",
                  "text": "10,67,8,47"
                }
              },
              {
                "$type": "event",
                "name": "spritetap",
                "text": "Fires when a tap event occurs on a sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sprite",
                    "type": "Object",
                    "src": {
                      "name": "10,110,24",
                      "type": "10,110,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "10,111,23",
                      "type": "10,111,16"
                    }
                  }
                ],
                "src": {
                  "name": "10,108,15",
                  "text": "10,109,8,43"
                }
              },
              {
                "$type": "event",
                "name": "staterestore",
                "text": "Fires after the state of the object is restored.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.state.Stateful",
                    "src": {
                      "name": "17,106,36",
                      "type": "17,106,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The hash of state values returned from the StateProvider. This is passed\nto *`{@link #method!applyState applyState}`*. By default, that simply copies property values into this\nobject. The method maybe overridden to provide custom state restoration.\n",
                    "type": "Object",
                    "src": {
                      "name": "17,107,24",
                      "text": "17,107,30,73:17,108,8,149",
                      "type": "17,107,16"
                    }
                  }
                ],
                "src": {
                  "name": "17,104,15",
                  "text": "17,105,8,49"
                }
              },
              {
                "$type": "event",
                "name": "statesave",
                "text": "Fires after the state of the object is saved to the configured state provider.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.state.Stateful",
                    "src": {
                      "name": "17,125,36",
                      "type": "17,125,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The hash of state values. This is determined by calling\n*`getState()`* on the object. This method must be provided by the\ndeveloper to return whatever representation of state is required, by default, Ext.state.Stateful\nhas a null implementation.\n",
                    "type": "Object",
                    "src": {
                      "name": "17,126,24",
                      "text": "17,126,30,56:17,127,8,190",
                      "type": "17,126,16"
                    }
                  }
                ],
                "src": {
                  "name": "17,123,15",
                  "text": "17,124,8,79"
                }
              },
              {
                "$type": "event",
                "name": "storechange",
                "text": "Fires when the store of the chart changes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "5,203,41",
                      "type": "5,203,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newStore",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "5,204,32",
                      "type": "5,204,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldStore",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "5,205,32",
                      "type": "5,205,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,201,15",
                  "text": "5,202,8,43"
                }
              },
              {
                "$type": "event",
                "name": "titlechange",
                "text": "Fires after the Panel title has been set or changed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "the Panel which has been resized.\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "name": "6,1024,33",
                      "text": "6,1024,35,34",
                      "type": "6,1024,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newTitle",
                    "text": "The new title.\n",
                    "type": "String",
                    "src": {
                      "name": "6,1025,24",
                      "text": "6,1025,33,15",
                      "type": "6,1025,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldTitle",
                    "text": "The previous panel title.\n",
                    "type": "String",
                    "src": {
                      "name": "6,1026,24",
                      "text": "6,1026,33,26",
                      "type": "6,1026,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,1022,15",
                  "text": "6,1023,8,53"
                }
              },
              {
                "$type": "event",
                "name": "unfloat",
                "text": "Fires after a \"floated\" Panel has returned to it's collapsed state\nas a result of the mouse leaving the Panel. Only applicable when\nthe Panel is an item in a\n{@link Ext.layout.container.Border}.\n",
                "src": {
                  "name": "6,1030,15",
                  "text": "6,1031,8,209"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "13,413,27",
                      "type": "13,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "13,414,30,35",
                      "type": "13,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "13,412,12",
                  "name": "13,416,0",
                  "text": "13,411,12,65"
                }
              },
              {
                "$type": "method",
                "name": "add",
                "since": "2.3.0",
                "text": "Adds {@link Ext.Component}(s) to this Container.\n\n## Description:\n\n- Fires the {@link #event!beforeadd #beforeadd} event before adding.\n- The Container's {@link #cfg!defaults #defaults} will be applied\n  accordingly (see `{@link #cfg!defaults #defaults}` for details).\n- Fires the `{@link #event!add #event-add}` event after the component has been added.\n\n## Notes:\n\nIf the Container is __already rendered__ when `add`\nis called, it will render the newly added Component into its content area.\n\n**If** the Container was configured with a size-managing {@link #cfg!layout #layout} manager,\nthe Container will recalculate its internal layout at this time too.\n\nNote that the default layout manager simply renders child Components sequentially\ninto the content area and thereafter performs no sizing.\n\nIf adding multiple new child Components, pass them as an array to the `add` method,\nso that only one layout recalculation is performed.\n\n    tb = new Ext.toolbar.Toolbar({\n        renderTo: document.body\n    });  // toolbar is rendered\n    // add multiple items.\n    // default type for Toolbar is 'button')\n    tb.add([{text:'Button 1'}, {text:'Button 2'}]);\n\nTo inject components between existing ones, use the {@link #method!insert #insert} method.\n\n## Warning:\n\nComponents directly managed by the BorderLayout layout manager may not be removed\nor added.  See the Notes for {@link Ext.layout.container.Border} for\nmore details.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "Either one or more Components to add or an Array of Components to add.\nSee `{@link #cfg!items #cfg-items}` for additional information.\n",
                    "type": "Ext.Component[]/Object[]/Ext.Component.../Object...",
                    "src": {
                      "name": "2,797,69",
                      "text": "2,798,8,125",
                      "type": "2,797,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Components that were added.\n",
                    "type": "Ext.Component[]/Ext.Component",
                    "src": {
                      "text": "2,801,48,32",
                      "type": "2,801,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,805,0",
                  "since": "2,803,15",
                  "text": "2,759,8,1393"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for {@link #method!onAfter #onAfter}.\n",
                "src": {
                  "name": "13,1236,0",
                  "text": "13,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for {@link #method!onBefore #onBefore}.\n",
                "src": {
                  "name": "13,1230,0",
                  "text": "13,1228,12,29"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addBindableUpdater",
                "since": "5.0.0",
                "text": "Ensures that the given property (if it is a Config System config) has a proper\n\"updater\" method on this instance to sync changes to the config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the config property.\n",
                    "type": "String",
                    "src": {
                      "name": "8,504,28",
                      "text": "8,504,37,33",
                      "type": "8,504,20"
                    }
                  }
                ],
                "src": {
                  "access": "8,505,12",
                  "name": "8,508,0",
                  "since": "8,506,19",
                  "text": "8,502,12,144"
                }
              },
              {
                "$type": "method",
                "name": "addBodyCls",
                "text": "Adds a CSS class to the body element. If not rendered, the class will\nbe added when the panel is rendered.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "The class to add\n",
                    "type": "String",
                    "src": {
                      "name": "6,1050,24",
                      "text": "6,1050,28,17",
                      "type": "6,1050,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "text": "6,1051,34,5",
                      "type": "6,1051,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,1053,0",
                  "text": "6,1048,8,107"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addChildEl",
                "since": "6.0.0",
                "text": "Add a childEl specific to this instance. This must be called before render.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "childEl",
                    "src": {
                      "name": "18,231,19"
                    }
                  }
                ],
                "src": {
                  "access": "18,232,12",
                  "name": "18,235,0",
                  "since": "18,233,19",
                  "text": "18,230,12,76"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #addCls} instead.\n",
                "deprecatedVersion": "4.1",
                "inheritdoc": "Ext.Component#addCls",
                "name": "addClass",
                "since": "2.3.0",
                "src": {
                  "deprecatedMessage": "3,6483,20",
                  "deprecatedVersion": "3,6483,20",
                  "inheritdoc": "3,6482,20",
                  "name": "3,6481,28",
                  "since": "3,6484,27"
                }
              },
              {
                "$type": "method",
                "name": "addCls",
                "text": "Adds a CSS class to the top level element representing this component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "The CSS class name to add.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,2160,33",
                      "text": "3,2160,37,27",
                      "type": "3,2160,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the Component to allow method chaining.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,2161,32,48",
                      "type": "3,2161,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,2163,0",
                  "text": "3,2159,8,71"
                }
              },
              {
                "$type": "method",
                "name": "addClsWithUI",
                "text": "Adds a `{@link #cfg!cls cls}` to the `{@link #cfg!uiCls uiCls}` array, which will also call {@link #method!addUIClsToElement #addUIClsToElement} and adds to all elements of this\ncomponent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "classes",
                    "text": "A string or an array of strings to add to the `{@link #cfg!uiCls uiCls}`.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,2174,33",
                      "text": "3,2174,41,55",
                      "type": "3,2174,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "skip",
                    "optional": true,
                    "text": "`true` to skip adding it to the class and do it later (via the return).\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,2175,26",
                      "text": "3,2175,32,72",
                      "type": "3,2175,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,2177,0",
                  "text": "3,2172,8,127"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDelegatedListener",
                "text": "Adds a listeners with the \"delegate\" event option.  Users should not invoke this\nmethod directly.  Use the \"delegate\" event option of\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "19,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "19,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "19,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "src": {
                      "name": "19,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "src": {
                      "name": "19,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caller",
                    "src": {
                      "name": "19,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "manager",
                    "src": {
                      "name": "19,19,0"
                    }
                  }
                ],
                "src": {
                  "access": "19,14,12",
                  "name": "19,19,0",
                  "text": "19,15,12,195"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "20,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,118,12",
                  "name": "20,120,0",
                  "text": "20,116,12,125"
                }
              },
              {
                "$type": "method",
                "name": "addDocked",
                "text": "Adds docked item(s) to the container.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "items",
                    "text": "The Component or array of components to add. The components\nmust include a 'dock' parameter on each component to indicate where it should be docked\n('top', 'right', 'bottom', 'left').\n",
                    "type": "Object/Object[]",
                    "src": {
                      "name": "9,125,33",
                      "text": "9,125,39,60:9,126,8,124",
                      "type": "9,125,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "pos",
                    "optional": true,
                    "text": "The index at which the Component will be added\n",
                    "type": "Number",
                    "src": {
                      "name": "9,128,25",
                      "text": "9,128,30,47",
                      "type": "9,128,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The added components.\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "9,129,34,22",
                      "type": "9,129,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,131,0",
                  "text": "9,123,8,39"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The {@link #method!on #on} method is shorthand for\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "13,835,35",
                      "text": "13,835,45,37:13,836,12,61",
                      "type": "13,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "13,838,38",
                      "text": "13,838,42,46:13,839,12,166",
                      "type": "13,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "13,843,29",
                      "text": "13,843,36,62:13,844,12,73",
                      "type": "13,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "13,853,36",
                          "text": "13,854,12,139",
                          "type": "13,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "13,857,36",
                          "text": "13,858,12,94",
                          "type": "13,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "13,861,37",
                          "text": "13,862,12,96",
                          "type": "13,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "13,865,36",
                          "text": "13,866,12,262",
                          "type": "13,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  {@link Ext.Function#method!requestAnimationFrame Ext.Function#requestAnimationFrame}. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "13,870,36",
                          "text": "13,871,12,323",
                          "type": "13,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "13,877,49",
                          "text": "13,878,12,135",
                          "type": "13,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to {@link Ext.Component}.**\n  The name of a Component property which references an {@link Ext.dom.Element}\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of {@link Ext.Component} which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "13,881,36",
                          "text": "13,882,12,781",
                          "type": "13,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "13,905,37",
                          "text": "13,906,12,295",
                          "type": "13,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopPropagation Ext.event.Event#stopPropagation} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "13,914,38",
                          "text": "13,915,12,212",
                          "type": "13,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!preventDefault Ext.event.Event#preventDefault} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "13,919,38",
                          "text": "13,920,12,210",
                          "type": "13,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopEvent Ext.event.Event#stopEvent} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "13,924,38",
                          "text": "13,925,12,200",
                          "type": "13,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "13,929,36",
                          "text": "13,930,12,179",
                          "type": "13,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `destroy` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using {@link #method!un #un}; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See {@link #method!un #un} for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "13,934,38",
                          "text": "13,935,12,441",
                          "type": "13,934,20",
                          "value": "13,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "13,942,37",
                          "text": "13,943,12,737",
                          "type": "13,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "13,954,37",
                          "text": "13,955,12,301",
                          "type": "13,954,20",
                          "value": "13,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "13,846,29",
                      "text": "13,846,38,44:13,847,12,154",
                      "type": "13,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "13,962,29",
                      "text": "13,963,12,1831",
                      "type": "13,962,20",
                      "value": "13,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "13,1021,29,54:13,1022,12,516",
                      "type": "13,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "13,1041,0",
                  "text": "13,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use `{@link #method!mon mon}` or `{@link #method!addManagedListener addManagedListener}` if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "13,456,56",
                      "text": "13,456,61,47",
                      "type": "13,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "13,457,34",
                      "text": "13,457,40,63",
                      "type": "13,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "13,458,36",
                      "text": "13,458,39,49:13,459,11,85",
                      "type": "13,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,461,27",
                      "text": "13,461,33,92:13,462,11,43",
                      "type": "13,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} options.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,463,27",
                      "text": "13,463,35,67:13,464,11,61",
                      "type": "13,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "13,465,28,54:13,466,11,513",
                      "type": "13,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,484,0",
                  "text": "13,430,11,1093"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addPlugin",
                "text": "Adds a plugin. May be called at any time in the component's life cycle.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "plugin",
                    "src": {
                      "name": "3,2266,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,2263,8",
                  "name": "3,2266,0",
                  "text": "3,2264,8,72"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "addPropertyToState",
                "text": "Save a property to the given state object if it is not its default or configured\nvalue.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The state object.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,2285,24",
                      "text": "3,2285,30,18",
                      "type": "3,2285,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "propName",
                    "text": "The name of the property on this object to save.\n",
                    "type": "String",
                    "src": {
                      "name": "3,2286,24",
                      "text": "3,2286,33,49",
                      "type": "3,2286,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value of the state property (defaults to `this[propName]`).\n",
                    "type": "String",
                    "src": {
                      "name": "3,2287,25",
                      "text": "3,2287,32,64",
                      "type": "3,2287,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The state object or a new object if state was `{@link null}` and the property\nwas saved.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,2288,25,70:3,2289,8,11",
                      "type": "3,2288,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,2290,8",
                  "name": "3,2292,0",
                  "text": "3,2282,8,89"
                }
              },
              {
                "$type": "method",
                "name": "addSeries",
                "text": "Adds a {@link Ext.chart.series.Series} to this chart.\n\nThe Series (or array) passed will be added to the existing series. If an `{@link #cfg!id id}` is specified\nin a new Series, any existing Series of that `{@link #cfg!id id}` will be updated.\n\nThe chart will be redrawn in response to the change.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newSeries",
                    "text": "A config object\ndescribing the Series to add, or an instantiated Series object. Or an array of these.\n",
                    "type": "Object/Object[]/Ext.chart.series.Series/Ext.chart.series.Series[]",
                    "src": {
                      "name": "5,1212,83",
                      "text": "5,1212,93,16:5,1213,8,86",
                      "type": "5,1212,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,1215,0",
                  "text": "5,1205,8,275"
                }
              },
              {
                "$type": "method",
                "name": "addStateEvents",
                "text": "Add events that will trigger the state to be saved. If the first argument is an\narray, each element of that array is the name of a state event. Otherwise, each\nargument passed to this method is the name of a state event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "The event name or an array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "17,150,33",
                      "text": "17,150,40,43",
                      "type": "17,150,16"
                    }
                  }
                ],
                "src": {
                  "name": "17,152,0",
                  "text": "17,146,8,222"
                }
              },
              {
                "$type": "method",
                "name": "addTool",
                "text": "Add tools to this panel\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "tools",
                    "text": "The tools to add.\n\nBy default the tools will be accessible via keyboard, with the exception\nof automatically added collapse/expand and close tools.\n\nIf you implement keyboard equivalents of your tools' actions elsewhere\nand do not want the tools to participate in keyboard navigation, you can\nmake them presentational instead:\n\n     panel.addTool({\n         type: 'mytool',\n         focusable: false,\n         ariaRole: 'presentation',\n         ...\n     });\n",
                    "type": "Object[]/Ext.panel.Tool[]",
                    "src": {
                      "name": "6,1063,43",
                      "text": "6,1063,49,18:6,1064,8,440",
                      "type": "6,1063,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,1079,0",
                  "text": "6,1062,8,24"
                }
              },
              {
                "$type": "method",
                "inheritdoc": true,
                "name": "addUIClsToElement",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "src": {
                      "name": "6,1144,0"
                    }
                  }
                ],
                "src": {
                  "inheritdoc": "6,1142,8",
                  "name": "6,1144,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addUIToElement",
                "text": "Method which adds a specified UI to the components element.\n",
                "src": {
                  "access": "3,5797,12",
                  "name": "3,5799,0",
                  "text": "3,5796,12,60"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "adjustForConstraints",
                "items": [
                  {
                    "$type": "param",
                    "name": "xy",
                    "src": {
                      "name": "21,175,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "parent",
                    "src": {
                      "name": "21,175,0"
                    }
                  }
                ],
                "src": {
                  "access": "21,173,8",
                  "name": "21,175,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "adjustPosition",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "3,2378,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "3,2378,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,2376,8",
                  "name": "3,2378,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterClassMixedIn",
                "text": "Called after the mixin is applied. We need to see if `{@link #cfg!childEls childEls}` were used by\nthe `targetClass` and apply them to the config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetClass",
                    "type": "Ext.Class",
                    "src": {
                      "name": "18,253,31",
                      "type": "18,253,20"
                    }
                  }
                ],
                "src": {
                  "access": "18,254,12",
                  "name": "18,256,0",
                  "text": "18,251,12,125"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterCollapse",
                "template": true,
                "text": "Invoked after the Panel is Collapsed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animated",
                    "type": "Boolean",
                    "src": {
                      "name": "6,1155,25",
                      "type": "6,1155,16"
                    }
                  }
                ],
                "src": {
                  "access": "6,1158,8",
                  "name": "6,1160,0",
                  "template": "6,1157,8",
                  "text": "6,1153,8,39"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterComponentLayout",
                "template": true,
                "text": "Called by the layout system after the Component has been laid out.\n\nThis method is not called on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The width that was set\n",
                    "type": "Number",
                    "src": {
                      "name": "3,2218,24",
                      "text": "3,2218,30,23",
                      "type": "3,2218,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The height that was set\n",
                    "type": "Number",
                    "src": {
                      "name": "3,2219,24",
                      "text": "3,2219,31,24",
                      "type": "3,2219,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldWidth",
                    "text": "The old width, or `{@link undefined}` if this was the initial layout.\n",
                    "type": "Number/undefined",
                    "src": {
                      "name": "3,2220,34",
                      "text": "3,2220,43,62",
                      "type": "3,2220,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldHeight",
                    "text": "The old height, or `{@link undefined}` if this was the initial layout.\n",
                    "type": "Number/undefined",
                    "src": {
                      "name": "3,2221,34",
                      "text": "3,2221,44,63",
                      "type": "3,2221,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2224,8",
                  "name": "3,2226,0",
                  "template": "3,2223,8",
                  "text": "3,2213,8,228"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterExpand",
                "template": true,
                "text": "Invoked after the Panel is Expanded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animated",
                    "type": "Boolean",
                    "src": {
                      "name": "6,1195,25",
                      "type": "6,1195,16"
                    }
                  }
                ],
                "src": {
                  "access": "6,1198,8",
                  "name": "6,1200,0",
                  "template": "6,1197,8",
                  "text": "6,1193,8,38"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterHide",
                "template": true,
                "text": "Invoked after the Component has been hidden.\n\nGets passed the same `callback` and `scope` parameters that #onHide received.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,2400,27",
                      "type": "3,2400,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,2401,25",
                      "type": "3,2401,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2404,8",
                  "name": "3,2406,0",
                  "template": "3,2403,8",
                  "text": "3,2396,8,125"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterLayout",
                "template": true,
                "text": "Invoked after the Container has laid out (and rendered if necessary)\nits child Components.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "layout",
                    "type": "Ext.layout.container.Container",
                    "src": {
                      "name": "2,921,48",
                      "type": "2,921,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,924,8",
                  "name": "2,926,0",
                  "template": "2,923,8",
                  "text": "2,918,8,92"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterRender",
                "template": true,
                "text": "Allows additional behavior after rendering is complete. At this stage, the\n{@link Ext.Component} {@link Ext.Component#method!getEl Ext.Component#getEl} will have\nbeen styled according to the configuration, will have had any configured CSS\nclass names added, and will be in the configured visibility and configured enable\nstate.\n\n**Note:** If the Component has a {@link Ext.Component#cfg!controller Ext.Component#controller}\nand the controller has an {@link Ext.app.ViewController#method!afterRender Ext.app.ViewController#afterRender}\nmethod it will be called passing the Component as the single param.\n",
                "src": {
                  "access": "22,279,8",
                  "name": "22,281,0",
                  "template": "22,278,8",
                  "text": "22,268,8,553"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterSetPosition",
                "template": true,
                "text": "Template method called after a Component has been positioned.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "3,2430,24",
                      "type": "3,2430,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "3,2431,24",
                      "type": "3,2431,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2434,8",
                  "name": "3,2436,0",
                  "template": "3,2433,8",
                  "text": "3,2428,8,63"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterShow",
                "template": true,
                "text": "Invoked after the Component is shown (after #onShow is called).\n\nGets passed the same parameters as #show.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "type": "String/Ext.dom.Element",
                    "src": {
                      "name": "3,2449,41",
                      "type": "3,2449,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,2450,27",
                      "type": "3,2450,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,2451,25",
                      "type": "3,2451,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2454,8",
                  "name": "3,2456,0",
                  "template": "3,2453,8",
                  "text": "3,2445,8,108"
                }
              },
              {
                "$type": "method",
                "name": "alignTo",
                "text": "Aligns the element with another element relative to the specified anchor points. If\nthe other element is the document it aligns it to the viewport. The position\nparameter is optional, and can be specified in any one of the following formats:\n\n- **Blank**: Defaults to aligning the element's top-left corner to the target's\n  bottom-left corner (\"tl-bl\").\n- **One anchor (deprecated)**: The passed anchor position is used as the target\n  element's anchor point.  The element being aligned will position its top-left\n  corner (tl) to that point. *This method has been deprecated in favor of the newer\n  two anchor syntax below*.\n- **Two anchors**: If two values from the table below are passed separated by a dash,\n  the first value is used as the element's anchor point, and the second value is\n  used as the target's anchor point.\n\nIn addition to the anchor points, the position parameter also supports the \"?\"\ncharacter. If \"?\" is passed at the end of the position string, the element will\nattempt to align as specified, but the position will be adjusted to constrain to\nthe viewport if necessary. Note that the element being aligned might be swapped to\nalign to a different position than that specified in order to enforce the viewport\nconstraints. Following are all of the supported anchor positions:\n\n<pre>\nValue  Description\n-----  -----------------------------\ntl     The top left corner (default)\nt      The center of the top edge\ntr     The top right corner\nl      The center of the left edge\nc      In the center of the element\nr      The center of the right edge\nbl     The bottom left corner\nb      The center of the bottom edge\nbr     The bottom right corner\n</pre>\n\nExample Usage:\n\n    // align el to other-el using the default positioning\n    // (\"tl-bl\", non-constrained)\n    el.alignTo(\"other-el\");\n\n    // align the top left corner of el with the top right corner of other-el\n    // (constrained to viewport)\n    el.alignTo(\"other-el\", \"tr?\");\n\n    // align the bottom right corner of el with the center left edge of other-el\n    el.alignTo(\"other-el\", \"br-l?\");\n\n    // align the center of el with the bottom left corner of other-el and\n    // adjust the x position by -6 pixels (and the y position by 0)\n    el.alignTo(\"other-el\", \"c-bl\", [-6, 0]);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "text": "The Positionable,\nHTMLElement, or id of the element to align to.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String",
                    "src": {
                      "name": "21,237,58",
                      "text": "21,237,66,18:21,238,8,47",
                      "type": "21,237,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "The position to align to\n",
                    "type": "String",
                    "value": "\"tl-bl?\"",
                    "src": {
                      "name": "21,239,25",
                      "text": "21,239,44,25",
                      "type": "21,239,16",
                      "value": "21,239,34"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "offsets",
                    "optional": true,
                    "text": "Offset the positioning by [x, y]\nElement animation config object\n",
                    "type": "Number[]",
                    "src": {
                      "name": "21,240,27",
                      "text": "21,240,36,33:21,241,8,32",
                      "type": "21,240,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "21,242,40,5",
                      "type": "21,242,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,244,0",
                  "text": "21,185,8,2269"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "anim",
                "text": "Process the passed fx configuration.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "23,286,0"
                    }
                  }
                ],
                "src": {
                  "access": "23,283,8",
                  "name": "23,286,0",
                  "text": "23,284,8,37"
                }
              },
              {
                "$type": "method",
                "name": "animate",
                "text": "Performs custom animation on this object.\n\nThis method is applicable to both the {@link Ext.Component} class and the {@link Ext.draw.sprite.Sprite}\nclass. It performs animated transitions of certain properties of this object over a specified timeline.\n\n### Animating a {@link Ext.Component}\n\nWhen animating a Component, the following properties may be specified in `from`, `to`, and `keyframe` objects:\n\n  - `x` - The Component's page X position in pixels.\n\n  - `y` - The Component's page Y position in pixels\n\n  - `left` - The Component's `left` value in pixels.\n\n  - `top` - The Component's `top` value in pixels.\n\n  - `{@link #cfg!width width}` - The Component's `{@link #cfg!width width}` value in pixels.\n\n  - `{@link #cfg!height height}` - The Component's `{@link #cfg!height height}` value in pixels.\n\n  - `dynamic` - Specify as true to update the Component's layout (if it is a Container) at every frame of the animation.\n    *Use sparingly as laying out on every intermediate size change is an expensive operation.*\n\nFor example, to animate a Window to a new size, ensuring that its internal layout and any shadow is correct:\n\n    myWindow = Ext.create('Ext.window.Window', {\n        title: 'Test Component animation',\n        width: 500,\n        height: 300,\n        layout: {\n            type: 'hbox',\n            align: 'stretch'\n        },\n        items: [{\n            title: 'Left: 33%',\n            margin: '5 0 5 5',\n            flex: 1\n        }, {\n            title: 'Left: 66%',\n            margin: '5 5 5 5',\n            flex: 2\n        }]\n    });\n    myWindow.show();\n    myWindow.header.el.on('click', function() {\n        myWindow.animate({\n            to: {\n                width: (myWindow.getWidth() == 500) ? 700 : 500,\n                height: (myWindow.getHeight() == 300) ? 400 : 300\n            }\n        });\n    });\n\nFor performance reasons, by default, the internal layout is only updated when the Window reaches its final `\"to\"`\nsize. If dynamic updating of the Window's child Components is required, then configure the animation with\n`dynamic: true` and the two child items will maintain their proportions during the animation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "Configuration for {@link Ext.fx.Anim}.\nNote that the {@link Ext.fx.Anim#cfg!to Ext.fx.Anim#to} config is required.\n",
                    "type": "Object",
                    "src": {
                      "name": "23,269,24",
                      "text": "23,269,31,39:23,270,8,60",
                      "type": "23,269,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Object",
                    "src": {
                      "text": "23,271,25,5",
                      "type": "23,271,17"
                    }
                  }
                ],
                "src": {
                  "name": "23,273,0",
                  "text": "23,211,8,2113"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyBind",
                "since": "5.0.0",
                "items": [
                  {
                    "$type": "param",
                    "name": "binds",
                    "type": "String/Object",
                    "src": {
                      "name": "8,523,35",
                      "type": "8,523,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "currentBindings",
                    "type": "Object",
                    "src": {
                      "name": "8,524,28",
                      "type": "8,524,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "8,525,21"
                    }
                  }
                ],
                "src": {
                  "access": "8,526,12",
                  "name": "8,529,0",
                  "since": "8,527,19"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyDefaults",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "2,1812,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,1810,12",
                  "name": "2,1812,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyRenderSelectors",
                "text": "Sets references to elements inside the component. This applies {@link Ext.Component#cfg!renderSelectors Ext.Component#cfg-renderSelectors}\nas well as {@link Ext.Component#cfg!childEls Ext.Component#cfg-childEls}.\n",
                "src": {
                  "access": "22,865,12",
                  "name": "22,867,0",
                  "text": "22,863,12,177"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applySession",
                "since": "5.0.0",
                "text": "Transforms a Session config to a proper instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "session",
                    "type": "Object",
                    "src": {
                      "name": "8,626,28",
                      "type": "8,626,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Session",
                    "src": {
                      "type": "8,627,21"
                    }
                  }
                ],
                "src": {
                  "access": "8,628,12",
                  "name": "8,631,0",
                  "since": "8,629,19",
                  "text": "8,625,12,50"
                }
              },
              {
                "$type": "method",
                "name": "applyState",
                "text": "Applies the state to the object. This should be overridden in subclasses to do\nmore complex state operations. By default it applies the state properties onto\nthe current object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The state\n",
                    "type": "Object",
                    "src": {
                      "name": "17,258,24",
                      "text": "17,258,30,10",
                      "type": "17,258,16"
                    }
                  }
                ],
                "src": {
                  "name": "17,260,0",
                  "text": "17,255,8,178"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyViewModel",
                "since": "5.0.0",
                "text": "Transforms a ViewModel config to a proper instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "viewModel",
                    "type": "String/Object/Ext.app.ViewModel",
                    "src": {
                      "name": "8,654,53",
                      "type": "8,654,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "type": "8,655,21"
                    }
                  }
                ],
                "src": {
                  "access": "8,656,12",
                  "name": "8,659,0",
                  "since": "8,657,19",
                  "text": "8,653,12,52"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "attachChildEls",
                "text": "Sets references to elements inside the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "src": {
                      "name": "18,274,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "18,274,0"
                    }
                  }
                ],
                "src": {
                  "access": "18,272,12",
                  "name": "18,274,0",
                  "text": "18,271,12,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "attachReference",
                "text": "Sets up a component reference.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component to reference.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "16,92,35",
                      "text": "16,92,45,28",
                      "type": "16,92,20"
                    }
                  }
                ],
                "src": {
                  "access": "16,93,12",
                  "name": "16,95,0",
                  "text": "16,91,12,31"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeBlur",
                "text": "Template method to do any pre-blur processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "11,310,33",
                      "text": "11,310,35,17",
                      "type": "11,310,16"
                    }
                  }
                ],
                "src": {
                  "access": "11,309,8",
                  "name": "11,312,0",
                  "text": "11,308,8,47"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeComponentLayout",
                "template": true,
                "text": "Occurs before `{@link #cfg!componentLayout componentLayout}` is run. Returning `false` from this method will prevent the `{@link #cfg!componentLayout componentLayout}` from\nbeing executed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "adjWidth",
                    "text": "The box-adjusted width that was set.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,2700,24",
                      "text": "3,2700,33,37",
                      "type": "3,2700,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "adjHeight",
                    "text": "The box-adjusted height that was set.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,2701,24",
                      "text": "3,2701,34,38",
                      "type": "3,2701,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2704,8",
                  "name": "3,2706,0",
                  "template": "3,2703,8",
                  "text": "3,2697,8,132"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeDestroy",
                "template": true,
                "text": "Invoked before the Component is destroyed.\n",
                "src": {
                  "access": "3,2715,8",
                  "name": "3,2717,0",
                  "template": "3,2714,8",
                  "text": "3,2711,8,44"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeFocus",
                "text": "Template method to do any pre-focus processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "11,364,33",
                      "text": "11,364,35,17",
                      "type": "11,364,16"
                    }
                  }
                ],
                "src": {
                  "access": "11,363,8",
                  "name": "11,366,0",
                  "text": "11,362,8,48"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeLayout",
                "template": true,
                "text": "Occurs before componentLayout is run. In previous releases, this method could\nreturn `false` to prevent its layout but that is not supported in Ext JS 4.1 or\nhigher. This method is simply a notification of the impending layout to give the\ncomponent a chance to adjust the DOM. Ideally, DOM reads should be avoided at this\ntime to reduce expensive document reflows.\n",
                "src": {
                  "access": "3,2727,8",
                  "name": "3,2729,0",
                  "template": "3,2726,8",
                  "text": "3,2720,8,366"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeRender",
                "template": true,
                "text": "Allows additional behavior before rendering.\n\n**Note:** If the Component has a {@link Ext.Component#cfg!controller Ext.Component#controller}\nand the controller has a {@link Ext.app.ViewController#method!beforeRender Ext.app.ViewController#beforeRender}\nmethod it will be called passing the Component as the single param.\n",
                "src": {
                  "access": "22,398,8",
                  "name": "22,400,0",
                  "template": "22,397,8",
                  "text": "22,391,8,278"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beforeSetPosition",
                "text": "Template method called before a Component is positioned.\n\nEnsures that the position is adjusted so that the Component is constrained if so configured.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "3,2741,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "3,2741,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "src": {
                      "name": "3,2741,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,2736,8",
                  "name": "3,2741,0",
                  "text": "3,2737,8,151"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeShow",
                "template": true,
                "text": "Invoked before the Component is shown.\n",
                "src": {
                  "access": "3,2799,8",
                  "name": "3,2801,0",
                  "template": "3,2798,8",
                  "text": "3,2795,8,40"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beginCollapse",
                "text": "Called before the change from default, configured state into the collapsed state.\nThis method may be called at render time to enable rendering in an initially collapsed state,\nor at runtime when an existing, fully laid out Panel may be collapsed.\nIt basically saves configs which need to be clobbered for the duration of the collapsed state.\n",
                "src": {
                  "access": "6,1323,8",
                  "name": "6,1329,0",
                  "text": "6,1324,8,342"
                }
              },
              {
                "$type": "method",
                "name": "bindStore",
                "text": "Changes the data store bound to this chart and refreshes it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store to bind to this chart.\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "5,1634,32",
                      "text": "5,1634,38,33",
                      "type": "5,1634,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,1636,0",
                  "text": "5,1633,8,61"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "blur",
                "src": {
                  "access": "11,792,12",
                  "name": "11,794,0"
                }
              },
              {
                "$type": "method",
                "name": "bubble",
                "text": "Bubbles up the component/container hierarchy, calling the specified function with each component. The scope\n(*this*) of function call will be the scope provided or the current component. The arguments to the function will\nbe the args provided or the current component. If the function returns false at any point, the bubble is stopped.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call\n",
                    "type": "Function",
                    "src": {
                      "name": "3,2808,26",
                      "text": "3,2808,29,21",
                      "type": "3,2808,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope of the function. Defaults to current node.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,2809,25",
                      "text": "3,2809,32,53",
                      "type": "3,2809,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "optional": true,
                    "text": "The args to call the function with. Defaults to passing the current component.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,2810,24",
                      "text": "3,2810,30,79",
                      "type": "3,2810,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,2811,32,5",
                      "type": "3,2811,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,2813,0",
                  "text": "3,2804,8,337"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "cacheRefEls",
                "text": "Ensures that all elements with \"data-ref\" attributes get loaded into the cache.\nThis really helps on IE8 where `getElementById` is a search not a lookup. By\npopulating our cache with one search of the DOM we then have random access to\nthe elements as we do our `{@link #cfg!childEls childEls}` wire up.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "src": {
                      "name": "22,898,0"
                    }
                  }
                ],
                "src": {
                  "access": "22,896,12",
                  "name": "22,898,0",
                  "text": "22,892,12,281"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "calculateAnchorXY",
                "text": "Calculates x,y coordinates specified by the anchor position on the element, adding\nextraX and extraY values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "optional": true,
                    "text": "The specified anchor position.\nSee {@link #method!alignTo #alignTo} for details on supported anchor positions.\n",
                    "type": "String",
                    "value": "'tl'",
                    "src": {
                      "name": "21,255,25",
                      "text": "21,255,38,31:21,256,8,64",
                      "type": "21,255,16",
                      "value": "21,255,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraX",
                    "optional": true,
                    "text": "value to be added to the x coordinate\n",
                    "type": "Number",
                    "src": {
                      "name": "21,257,25",
                      "text": "21,257,33,38",
                      "type": "21,257,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraY",
                    "optional": true,
                    "text": "value to be added to the y coordinate\n",
                    "type": "Number",
                    "src": {
                      "name": "21,258,25",
                      "text": "21,258,33,38",
                      "type": "21,258,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "optional": true,
                    "text": "An object containing the size to use for calculating anchor\nposition {width: (target width), height: (target height)} (defaults to the\nelement's current size)\n",
                    "type": "Object",
                    "src": {
                      "name": "21,259,25",
                      "text": "21,259,31,60:21,260,8,99",
                      "type": "21,259,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y] An array containing the element's x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "21,262,27,61",
                      "type": "21,262,17"
                    }
                  }
                ],
                "src": {
                  "access": "21,263,8",
                  "name": "21,265,0",
                  "text": "21,253,8,109"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "calculateConstrainedPosition",
                "text": "Override of Positionable method to calculate constrained position based upon possibly only\nconstraining our header.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "src": {
                      "name": "6,2484,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedPosition",
                    "src": {
                      "name": "6,2484,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "src": {
                      "name": "6,2484,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedSize",
                    "src": {
                      "name": "6,2484,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,2480,8",
                  "name": "6,2484,0",
                  "text": "6,2481,8,116"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "20,1251,37",
                      "text": "20,1251,42,57:20,1252,12,67",
                      "type": "20,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "20,1253,29,48",
                      "type": "20,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "20,1250,12",
                  "name": "20,1255,0",
                  "text": "20,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "20,1338,37",
                      "text": "20,1338,42,57:20,1339,12,66",
                      "type": "20,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "20,1340,29,52",
                      "type": "20,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "20,1337,12",
                  "name": "20,1342,0",
                  "text": "20,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "cancelChartLayout",
                "text": "Cancel a scheduled layout.\n",
                "src": {
                  "name": "5,611,0",
                  "text": "5,609,8,27"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "cancelFocus",
                "text": "Cancel any deferred focus on this component\n",
                "src": {
                  "access": "11,296,8",
                  "name": "11,298,0",
                  "text": "11,295,8,44"
                }
              },
              {
                "$type": "method",
                "name": "cascade",
                "since": "2.3.0",
                "text": "Cascades down the component/container heirarchy from this component (passed in\nthe first call), calling the specified function with each component. The scope\n(this reference) of the function call will be the scope provided or the current\ncomponent. The arguments to the function will be the args provided or the current\ncomponent. If the function returns false at any point, the cascade is stopped on\nthat branch.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call\n",
                    "type": "Function",
                    "src": {
                      "name": "2,1008,26",
                      "text": "2,1008,29,21",
                      "type": "2,1008,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope of the function (defaults to current component)\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1009,25",
                      "text": "2,1009,32,58",
                      "type": "2,1009,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "optional": true,
                    "text": "The args to call the function with. The current component\nalways passed as the last argument.\n",
                    "type": "Array",
                    "src": {
                      "name": "2,1010,24",
                      "text": "2,1010,30,58:2,1011,8,36",
                      "type": "2,1010,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "text": "2,1012,32,5",
                      "type": "2,1012,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1015,0",
                  "since": "2,1013,15",
                  "text": "2,1002,8,414"
                }
              },
              {
                "$type": "method",
                "name": "center",
                "text": "Center this Component in its container.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "1,516,32,5",
                      "type": "1,516,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,518,0",
                  "text": "1,515,8,40"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "changeConstraint",
                "items": [
                  {
                    "$type": "param",
                    "name": "newValue",
                    "src": {
                      "name": "3,5826,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldValue",
                    "src": {
                      "name": "3,5826,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "constrainMethod",
                    "src": {
                      "name": "3,5826,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "styleName",
                    "src": {
                      "name": "3,5826,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sizeName",
                    "src": {
                      "name": "3,5826,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,5824,12",
                  "name": "3,5826,0"
                }
              },
              {
                "$type": "method",
                "name": "child",
                "text": "Retrieves the first direct child of this container which matches the passed selector or component.\nThe passed in selector must comply with an Ext.ComponentQuery selector, or it can be an actual Ext.Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "An Ext.ComponentQuery selector. If no selector is\nspecified, the first child will be returned.\n",
                    "type": "String/Ext.Component",
                    "src": {
                      "name": "24,62,39",
                      "text": "24,62,49,50:24,63,8,45",
                      "type": "24,62,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching child Ext.Component (or `{@link null}` if no match was found).\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "24,64,32,68",
                      "type": "24,64,17"
                    }
                  }
                ],
                "src": {
                  "name": "24,66,0",
                  "text": "24,60,8,209"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "clearDelegatedListeners",
                "text": "Clears all listeners that were attached using the \"delegate\" event option.\nUsers should not invoke this method directly.  It is called automatically as\npart of normal {@link Ext.util.Observable#method!clearListeners Ext.util.Observable#clearListeners}\nprocessing.\n",
                "src": {
                  "access": "19,59,12",
                  "name": "19,65,0",
                  "text": "19,60,12,237"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "13,1255,0",
                  "text": "13,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "13,1291,0",
                  "text": "13,1289,11,47"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "clearReference",
                "text": "Clear a component reference.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component to remove.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "16,116,35",
                      "text": "16,116,45,25",
                      "type": "16,116,20"
                    }
                  }
                ],
                "src": {
                  "access": "16,117,12",
                  "name": "16,119,0",
                  "text": "16,115,12,29"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "clearReferences",
                "text": "Invalidates the references collection. Typically called when\nremoving a container from this container, since it's difficult\nto know what references got removed.\n",
                "src": {
                  "access": "16,163,12",
                  "name": "16,165,0",
                  "text": "16,159,12,162"
                }
              },
              {
                "$type": "method",
                "name": "cloneConfig",
                "text": "Clone the current component using the original config values passed into this instance by default.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "overrides",
                    "text": "A new config containing any properties to override in the cloned version.\nAn id property can be passed on this object, otherwise one will be generated to avoid duplicates.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,2832,24",
                      "text": "3,2832,34,74:3,2833,8,98",
                      "type": "3,2832,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "clone The cloned copy of this component\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,2834,32,40",
                      "type": "3,2834,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,2836,0",
                  "text": "3,2831,8,99"
                }
              },
              {
                "$type": "method",
                "name": "close",
                "text": "Closes the Panel. By default, this method, removes it from the DOM, {@link Ext.Component#method!destroy Ext.Component#method-destroy}s the\nPanel object and all its descendant Components. The {@link #event!beforeclose #beforeclose} event is fired before the\nclose happens and will cancel the close action if it returns false.\n\n**Note:** This method is also affected by the {@link #cfg!closeAction #closeAction} setting. For more explicit control use\n{@link #method!destroy #method-destroy} and {@link #method!hide #method-hide} methods.\n",
                "src": {
                  "name": "6,1560,0",
                  "text": "6,1553,8,462"
                }
              },
              {
                "$type": "method",
                "name": "collapse",
                "text": "Collapses the panel body so that the body becomes hidden. Docked Components parallel to the border towards which\nthe collapse takes place will remain visible. Fires the {@link #event!beforecollapse #beforecollapse} event which will cancel the\ncollapse action if it returns false.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "direction",
                    "optional": true,
                    "text": "The direction to collapse towards. Must be one of\n\n  - Ext.Component.DIRECTION_TOP\n  - Ext.Component.DIRECTION_RIGHT\n  - Ext.Component.DIRECTION_BOTTOM\n  - Ext.Component.DIRECTION_LEFT\n\nDefaults to {@link #cfg!collapseDirection #collapseDirection}.\n",
                    "type": "String",
                    "src": {
                      "name": "6,1571,25",
                      "text": "6,1571,36,50:6,1572,8,177",
                      "type": "6,1571,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "True to animate the transition, else false\n(defaults to the value of the {@link #cfg!animCollapse #animCollapse} panel config). May\nalso be specified as the animation duration in milliseconds.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "6,1580,26",
                      "text": "6,1580,35,43:6,1581,8,132",
                      "type": "6,1580,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "text": "6,1583,34,5",
                      "type": "6,1583,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,1585,0",
                  "text": "6,1567,8,259"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constrainBox",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "src": {
                      "name": "21,866,0"
                    }
                  }
                ],
                "src": {
                  "access": "21,864,8",
                  "name": "21,866,0"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The configuration options may be specified as either:\n\n- **an element** : it is set as the internal element and its id used as the component id\n- **a string** : it is assumed to be the id of an existing element and is used as the component id\n- **anything else** : it is assumed to be a standard config object and is applied to the component\n",
                    "type": "Ext.dom.Element/String/Object",
                    "src": {
                      "name": "3,1984,47",
                      "text": "3,1984,54,54:3,1985,8,288",
                      "type": "3,1984,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1990,0",
                  "text": "3,1983,8,23"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constructPlugin",
                "items": [
                  {
                    "$type": "param",
                    "name": "ptype",
                    "text": "string or config object containing a ptype property.\n\nConstructs a plugin according to the passed config object/ptype string.\n\nEnsures that the constructed plugin always has a `cmp` reference back to this component.\nThe setting up of this is done in PluginManager. The PluginManager ensures that a reference to this\ncomponent is passed to the constructor. It also ensures that the plugin's `setCmp` method (if any) is called.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,5849,35",
                      "text": "3,5849,41,53:3,5850,12,373",
                      "type": "3,5849,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,5856,12",
                  "name": "3,5858,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constructPlugins",
                "text": "Returns an array of fully constructed plugin instances. This converts any configs into their\nappropriate instances.\n\nIt does not mutate the plugins array. It creates a new array.\n",
                "src": {
                  "access": "3,5877,12",
                  "name": "3,5879,0",
                  "text": "3,5873,12,179"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "text": "Determines whether the passed Component is either an immediate child of this Container,\nor whether it is a descendant.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "comp",
                    "text": "The Component to test.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,1042,31",
                      "text": "2,1042,36,23",
                      "type": "2,1042,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "Pass `true` to test for the Component being a descendant at any level.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,1043,26",
                      "text": "2,1043,38,71",
                      "type": "2,1043,16",
                      "value": "2,1043,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the passed Component is contained at the specified level.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,1044,26,68",
                      "type": "2,1044,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1046,0",
                  "text": "2,1039,8,120"
                }
              },
              {
                "$type": "method",
                "name": "convertCollapseDir",
                "text": "converts a collapsdDir into an anchor argument for Element.slideIn\noverridden in rtl mode to switch \"l\" and \"r\"\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collapseDir",
                    "src": {
                      "name": "6,1642,0"
                    }
                  }
                ],
                "src": {
                  "name": "6,1642,0",
                  "text": "6,1639,8,112"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "13,1522,27",
                      "text": "13,1522,35,55",
                      "type": "13,1522,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "13,1523,26",
                      "text": "13,1523,35,61",
                      "type": "13,1523,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "13,1524,20"
                    }
                  }
                ],
                "src": {
                  "access": "13,1520,11",
                  "name": "13,1526,0",
                  "text": "13,1521,11,103"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "since": "1.1.0",
                "text": "Destroys the Component. This method must not be overridden.\nTo add extra functionality to destruction time in a subclass, implement the\ntemplate method {@link #method!beforeDestroy #beforeDestroy} or {@link #method!onDestroy #onDestroy}. And do not forget to\n`callParent()` in your implementation.\n",
                "src": {
                  "name": "3,2857,0",
                  "since": "3,2855,15",
                  "text": "3,2851,8,258"
                }
              },
              {
                "$type": "method",
                "name": "disable",
                "text": "Disables all child input fields and buttons.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "silent",
                    "src": {
                      "name": "2,1065,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fromParent",
                    "src": {
                      "name": "2,1065,0"
                    }
                  }
                ],
                "src": {
                  "name": "2,1065,0",
                  "text": "2,1063,8,45"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doApplyRenderTpl",
                "text": "Called from the selected frame generation template to insert this Component's inner structure inside the framing structure.\n\nWhen framing is used, a selected frame generation template is used as the primary template of the #getElConfig instead\nof the configured {@link Ext.Component#cfg!renderTpl Ext.Component#renderTpl}. The renderTpl is invoked by this method which is injected into the framing template.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "out",
                    "src": {
                      "name": "22,464,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "values",
                    "src": {
                      "name": "22,464,0"
                    }
                  }
                ],
                "src": {
                  "access": "22,458,8",
                  "name": "22,464,0",
                  "text": "22,459,8,390"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doAutoRender",
                "text": "Handles autoRender.\nFloating Components may have an ownerCt. If they are asking to be constrained, constrain them within that\nownerCt, and have their z-index managed locally. Floating Components are always rendered to document.body\n",
                "src": {
                  "access": "22,920,12",
                  "name": "22,922,0",
                  "text": "22,917,12,232"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doClose",
                "src": {
                  "access": "6,1756,8",
                  "name": "6,1758,0"
                }
              },
              {
                "$type": "method",
                "name": "doConstrain",
                "text": "Moves this floating Component into a constrain region.\n\nBy default, this Component is constrained to be within the container it was added to, or the element it was\nrendered to.\n\nAn alternative constraint may be passed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "optional": true,
                    "text": "The Element or {@link Ext.util.Region}\ninto which this Component is to be constrained. Defaults to the element into which this floating Component\nwas rendered.\n",
                    "type": "String/HTMLElement/Ext.dom.Element/Ext.util.Region",
                    "src": {
                      "name": "1,399,69",
                      "text": "1,399,82,46:1,400,8,121",
                      "type": "1,399,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,403,0",
                  "text": "1,393,8,219"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireDelegatedEvent",
                "text": "Fires a delegated event.  Users should not invoke this method directly.  It\nis called automatically by the framework as needed (see the \"delegate\" event\noption of {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} for more\ndetails.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "19,88,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "19,88,0"
                    }
                  }
                ],
                "src": {
                  "access": "19,82,12",
                  "name": "19,88,0",
                  "text": "19,83,12,233"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "13,761,27",
                      "type": "13,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "13,762,26",
                      "type": "13,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "13,763,28",
                      "type": "13,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "13,759,11",
                  "name": "13,765,0",
                  "text": "13,758,11,24"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doRemove",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "src": {
                      "name": "2,1862,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "doDestroy",
                    "src": {
                      "name": "2,1862,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,1860,12",
                  "name": "2,1862,0"
                }
              },
              {
                "$type": "method",
                "name": "down",
                "text": "Retrieves the first descendant of this container which matches the passed selector.\nThe passed in selector must comply with an Ext.ComponentQuery selector, or it can be an actual Ext.Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "An Ext.ComponentQuery selector or Ext.Component. If no selector is\nspecified, the first child will be returned.\n",
                    "type": "String/Ext.Component",
                    "src": {
                      "name": "24,88,39",
                      "text": "24,88,49,67:24,89,8,45",
                      "type": "24,88,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching descendant Ext.Component (or `{@link null}` if no match was found).\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "24,90,32,73",
                      "type": "24,90,17"
                    }
                  }
                ],
                "src": {
                  "name": "24,92,0",
                  "text": "24,86,8,194"
                }
              },
              {
                "$type": "method",
                "name": "download",
                "text": "Downloads an image or PDF of the chart / drawing or opens it in a separate\nbrowser tab/window if the download can't be triggered. The exact behavior is\nplatform and browser specific. For more consistent results on mobile devices use\nthe {@link #method!preview #preview} method instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "The following config options are supported:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "url",
                        "text": "The url to post the data to. Defaults to\nthe {@link #property!defaultDownloadServerUrl #defaultDownloadServerUrl} configuration on the class.\n",
                        "type": "String",
                        "src": {
                          "name": "10,414,31",
                          "text": "10,414,35,41:10,415,8,67",
                          "type": "10,414,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "format",
                        "text": "The format of image to export. See the\n{@link #property!supportedFormats #supportedFormats}. Defaults to 'png' on the Sencha IO server.\nNote that you can't export to 'svg' format if the {@link Ext.draw.engine.Canvas}\n{@link Ext.draw.Container#cfg!engine Ext.draw.Container#engine} is used.\n",
                        "type": "String",
                        "src": {
                          "name": "10,417,31",
                          "text": "10,417,38,39:10,418,8,209",
                          "type": "10,417,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "width",
                        "text": "A width to send to the server for\nconfiguring the image width. Defaults to natural image width on\nthe Sencha IO server.\n",
                        "type": "Number",
                        "src": {
                          "name": "10,422,31",
                          "text": "10,422,37,34:10,423,8,87",
                          "type": "10,422,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "text": "A height to send to the server for\nconfiguring the image height. Defaults to natural image height on\nthe Sencha IO server.\n",
                        "type": "Number",
                        "src": {
                          "name": "10,426,31",
                          "text": "10,426,38,35:10,427,8,89",
                          "type": "10,426,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "filename",
                        "text": "The filename of the downloaded image.\nDefaults to 'chart' on the Sencha IO server. The config.format is used\nas a filename extension.\n",
                        "type": "String",
                        "src": {
                          "name": "10,430,31",
                          "text": "10,430,40,38:10,431,8,97",
                          "type": "10,430,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "scale",
                        "text": "The scaling of the downloaded image.\nDefaults to 1 on the Sencha IO server. The server will try to determine the natural\nsize of the image unless the width/height configs have been set. If the\n{@link Ext.draw.engine.Canvas} {@link Ext.draw.Container#cfg!engine Ext.draw.Container#engine} is\nused the natural image size will depend on the value of the window.devicePixelRatio.\nFor example, for devices with devicePixelRatio of 2 the produced image will be\ntwo times larger than for devices with devicePixelRatio of 1 for the same drawing.\nThis is done so that the users with devices with HiDPI screens get a downloaded\nimage that looks as crisp on their device as the original drawing.\nIf you want image size to be consistent across devices with different device\npixel ratios, you can set the value of this config to 1/devicePixelRatio.\nThis parameter is ignored by the Sencha IO server if config.format is set to 'svg'.\n",
                        "type": "Number",
                        "src": {
                          "name": "10,434,31",
                          "text": "10,434,37,37:10,435,8,868",
                          "type": "10,434,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "pdf",
                        "text": "PDF specific options.\nThis config is only used if config.format is set to 'pdf'.\nThe given object should be in either this format:\n\n    {\n      width: '200px',\n      height: '300px',\n      border: '0px'\n    }\n\nor this format:\n\n    {\n      format: 'A4',\n      orientation: 'portrait',\n      border: '1cm'\n    }\n\nSupported dimension units are: 'mm', 'cm', 'in', 'px'. No unit means 'px'.\nSupported formats are: 'A3', 'A4', 'A5', 'Legal', 'Letter', 'Tabloid'.\nOrientation ('portrait', 'landscape') is optional and defaults to 'portrait'.\n",
                        "type": "Object",
                        "src": {
                          "name": "10,447,31",
                          "text": "10,447,35,22:10,448,8,514",
                          "type": "10,447,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "jpeg",
                        "text": "JPEG specific options.\nThis config is only used if config.format is set to 'jpeg'.\nThe given object should be in this format:\n\n    {\n      quality: 80\n    }\n\nWhere quality is an integer between 0 and 100.\n",
                        "type": "Object",
                        "src": {
                          "name": "10,469,31",
                          "text": "10,469,36,23:10,470,8,183",
                          "type": "10,469,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "10,412,25",
                      "text": "10,412,33,44",
                      "type": "10,412,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if request was successfully sent to the server.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "10,479,26,53",
                      "type": "10,479,17"
                    }
                  }
                ],
                "src": {
                  "name": "10,481,0",
                  "text": "10,407,8,271"
                }
              },
              {
                "$type": "method",
                "name": "enable",
                "text": "Enables all child input fields and buttons.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "silent",
                    "src": {
                      "name": "2,1086,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fromParent",
                    "src": {
                      "name": "2,1086,0"
                    }
                  }
                ],
                "src": {
                  "name": "2,1086,0",
                  "text": "2,1084,8,44"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "13,1567,36",
                      "text": "13,1567,47,54",
                      "type": "13,1567,19"
                    }
                  }
                ],
                "src": {
                  "name": "13,1569,0",
                  "text": "13,1534,11,1138"
                }
              },
              {
                "$type": "method",
                "name": "ensureAttachedToBody",
                "text": "Ensures that this component is attached to `document.body`. If the component was\nrendered to {@link Ext#method!getDetachedBody Ext#getDetachedBody}, then it will be appended to `document.body`.\nAny configured position is also restored.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "runLayout",
                    "optional": true,
                    "text": "True to run the component's layout.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "22,837,26",
                      "text": "22,837,43,36",
                      "type": "22,837,16",
                      "value": "22,837,36"
                    }
                  }
                ],
                "src": {
                  "name": "22,839,0",
                  "text": "22,834,8,209"
                }
              },
              {
                "$type": "method",
                "name": "expand",
                "text": "Expands the panel body so that it becomes visible.  Fires the {@link #event!beforeexpand #beforeexpand} event which will\ncancel the expand action if it returns false.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "True to animate the transition, else false\n(defaults to the value of the {@link #cfg!animCollapse #animCollapse} panel config).  May\nalso be specified as the animation duration in milliseconds.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "6,1803,26",
                      "text": "6,1803,35,43:6,1804,8,133",
                      "type": "6,1803,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "text": "6,1806,34,5",
                      "type": "6,1806,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,1808,0",
                  "text": "6,1801,8,147"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "findFocusTarget",
                "text": "Finds an alternate Component to focus if this Component is disabled while focused, or\nfocused while disabled, or otherwise unable to focus.\n\nIn both cases, focus must not be lost to document.body, but must move to an intuitively\nconnectible Component, either a sibling, or uncle or nephew.\n\nThis is both for the convenience of keyboard users, and also for when focus is tracked\nwithin a Component tree such as for ComboBoxes and their dropdowns.\n\nFor example, a ComboBox with a PagingToolbar in is BoundList. If the \"Next Page\"\nbutton is hit, the LoadMask shows and focuses, the next page is the last page, so\nthe \"Next Page\" button is disabled. When the LoadMask hides, it attempt to focus the\nlast focused Component which is the disabled \"Next Page\" button. In this situation,\nfocus should move to a sibling within the PagingToolbar.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A closely related focusable Component to which focus can move.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "11,636,36,63",
                      "type": "11,636,21"
                    }
                  }
                ],
                "src": {
                  "access": "11,637,12",
                  "name": "11,639,0",
                  "text": "11,621,12,837"
                }
              },
              {
                "$type": "method",
                "name": "findParentBy",
                "text": "Find a container above this component at any level by a custom function. If the passed function returns true, the\ncontainer will be returned.\n\nSee also the {@link Ext.Component#method!up Ext.Component#up} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The custom function to call with the arguments (container, this component).\n",
                    "type": "Function",
                    "src": {
                      "name": "3,3059,26",
                      "text": "3,3059,29,76",
                      "type": "3,3059,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first Container for which the custom function returns true\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "text": "3,3060,42,63",
                      "type": "3,3060,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3062,0",
                  "text": "3,3054,8,193"
                }
              },
              {
                "$type": "method",
                "name": "findParentByType",
                "text": "Find a container above this component at any level by xtype or class\n\nSee also the {@link Ext.Component#method!up Ext.Component#up} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xtype",
                    "text": "The xtype string for a component, or the class of the component directly\n",
                    "type": "String/Ext.Class",
                    "src": {
                      "name": "3,3077,34",
                      "text": "3,3077,40,73",
                      "type": "3,3077,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first Container which matches the given xtype or class\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "text": "3,3078,42,59",
                      "type": "3,3078,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3080,0",
                  "text": "3,3073,8,120"
                }
              },
              {
                "$type": "method",
                "name": "findPlugin",
                "text": "Retrieves plugin from this component's collection by its `ptype`.\n\n    var grid = Ext.create('Ext.grid.Panel', {\n        store: {\n            fields: ['name'],\n            data: [{\n                name: 'Scott Pilgrim'\n            }]\n        },\n        columns: [{\n            header: 'Name',\n            dataIndex: 'name',\n            editor: 'textfield',\n            flex: 1\n        }],\n        selType: 'cellmodel',\n        plugins: {\n            ptype: 'cellediting',\n            clicksToEdit: 1,\n            pluginId: 'myplugin'\n        },\n        height: 200,\n        width: 400,\n        renderTo: Ext.getBody()\n    });\n\n    grid.findPlugin('cellediting');  // the cellediting plugin\n\n**Note:** See also {@link #method!getPlugin #getPlugin}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ptype",
                    "text": "The Plugin's `ptype` as specified by the class's\n{@link Ext.Class#cfg!alias Ext.Class#cfg-alias} configuration.\n",
                    "type": "String",
                    "src": {
                      "name": "3,3120,24",
                      "text": "3,3120,30,49:3,3121,8,49",
                      "type": "3,3120,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "plugin instance or `{@link undefined}` if not found\n",
                    "type": "Ext.plugin.Abstract",
                    "src": {
                      "text": "3,3122,38,44",
                      "type": "3,3122,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3124,0",
                  "text": "3,3090,8,730"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "finishRender",
                "text": "This method visits the rendered component tree in a \"top-down\" order. That is, this\ncode runs on a parent component before running on a child. This method calls the\n{@link #method!onRender #onRender} method of each component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "containerIdx",
                    "text": "The index into the Container items of this Component.\n",
                    "type": "Number",
                    "src": {
                      "name": "22,1008,28",
                      "text": "22,1008,41,54",
                      "type": "22,1008,20"
                    }
                  }
                ],
                "src": {
                  "access": "22,1010,12",
                  "name": "22,1012,0",
                  "text": "22,1005,12,209"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #fireEventAction} instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n`{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "13,640,28",
                      "text": "13,640,38,31",
                      "type": "13,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "13,641,27",
                      "text": "13,641,32,58",
                      "type": "13,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "13,642,30",
                      "text": "13,642,33,21",
                      "type": "13,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "13,643,29",
                      "text": "13,643,36,62:13,644,12,72",
                      "type": "13,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`\n",
                    "type": "Object",
                    "src": {
                      "name": "13,645,29",
                      "text": "13,645,38,52:13,646,12,72",
                      "type": "13,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}` for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "13,647,29",
                      "text": "13,647,45,47:13,648,12,394",
                      "type": "13,647,20",
                      "value": "13,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "13,653,12",
                  "deprecatedVersion": "13,653,12",
                  "name": "13,655,0",
                  "text": "13,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}).\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "13,568,27",
                      "text": "13,568,37,31",
                      "type": "13,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "13,569,30",
                      "text": "13,569,35,54",
                      "type": "13,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "13,570,29,77",
                      "type": "13,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,572,0",
                  "text": "13,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "13,605,27",
                      "text": "13,605,37,31",
                      "type": "13,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "13,606,29",
                      "text": "13,606,34,53",
                      "type": "13,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "13,607,29,77",
                      "type": "13,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,609,0",
                  "text": "13,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "13,721,28",
                      "text": "13,721,38,31",
                      "type": "13,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "13,722,27",
                      "text": "13,722,32,58",
                      "type": "13,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "13,723,37",
                      "text": "13,723,40,21",
                      "type": "13,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "13,724,29",
                      "text": "13,724,36,62:13,725,12,72",
                      "type": "13,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "13,726,36",
                      "text": "13,726,44,47:13,727,12,201",
                      "type": "13,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,731,0",
                  "text": "13,714,12,409"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fireHierarchyEvent",
                "since": "4.2.0",
                "text": "This method fires an event on `{@link Ext.GlobalEvents}` allowing interested parties to know\nof certain critical events for this component. This is done globally because the\n(few) listeners can immediately receive the event rather than bubbling the event\nonly to reach the top and have no listeners.\n\nThe main usage for these events is to do with floating components. For example, the\nload mask is a floating component. The component it is masking may be inside several\ncontainers. As such, they need to know when component is hidden, either directly, or\nvia a parent container being hidden. To do this they subscribe to these events and\nfilter out the appropriate container.\n\nThis functionality is contained in Component (as opposed to Container) because a\nComponent can be the ownerCt for a floating component (loadmask), and the loadmask\nneeds to know when its owner is shown/hidden so that its hidden state can be\nsynchronized.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The event name.\n",
                    "type": "String",
                    "src": {
                      "name": "3,5986,28",
                      "text": "3,5986,38,16",
                      "type": "3,5986,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,5988,12",
                  "name": "3,5990,0",
                  "since": "3,5987,19",
                  "text": "3,5970,12,925"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fitContainer",
                "items": [
                  {
                    "$type": "param",
                    "name": "animate",
                    "src": {
                      "name": "1,545,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,543,8",
                  "name": "1,545,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fixReference",
                "text": "Sets up a reference on our current reference holder.\n",
                "src": {
                  "access": "25,335,12",
                  "name": "25,337,0",
                  "text": "25,333,12,54"
                }
              },
              {
                "$type": "method",
                "name": "focus",
                "text": "Try to focus this component.\n\nIf this component is disabled, a close relation will be targeted for focus instead\nto keep focus localized for keyboard users.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selectText",
                    "optional": true,
                    "text": "If applicable, `true` to also select all the text in this component, or an array consisting of start and end (defaults to start) position of selection.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "11,202,24",
                      "text": "11,202,36,152",
                      "type": "11,202,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "delay",
                    "optional": true,
                    "text": "Delay the focus this number of milliseconds (true for 10 milliseconds).\n",
                    "type": "Boolean/Number",
                    "src": {
                      "name": "11,203,33",
                      "text": "11,203,40,72",
                      "type": "11,203,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "Only needed if the `delay` parameter is used. A function to call upon focus.\n",
                    "type": "Function",
                    "src": {
                      "name": "11,204,27",
                      "text": "11,204,37,77",
                      "type": "11,204,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "Only needed if the `delay` parameter is used. The scope (`this` reference) in which to execute the callback.\n",
                    "type": "Function",
                    "src": {
                      "name": "11,205,27",
                      "text": "11,205,34,109",
                      "type": "11,205,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The focused Component. Usually `this` Component. Some Containers may\ndelegate focus to a descendant Component ({@link Ext.window.Window}s can do this through their\n{@link Ext.window.Window#cfg!defaultFocus Ext.window.Window#defaultFocus} config option. If this component is disabled, a closely\nrelated component will be focused and that will be returned.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "11,206,32,69:11,207,8,271",
                      "type": "11,206,17"
                    }
                  }
                ],
                "src": {
                  "name": "11,211,0",
                  "text": "11,198,8,157"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #updateLayout} instead.\n",
                "deprecatedVersion": "4.1",
                "inheritdoc": "Ext.Component#updateLayout",
                "name": "forceComponentLayout",
                "src": {
                  "deprecatedMessage": "3,6510,20",
                  "deprecatedVersion": "3,6510,20",
                  "inheritdoc": "3,6509,20",
                  "name": "3,6508,28"
                }
              },
              {
                "$type": "method",
                "name": "getActiveAnimation",
                "text": "Returns the current animation if this object has any effects actively running or queued, else returns false.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Anim if element has active effects, else false\n",
                    "type": "Ext.fx.Anim/Boolean",
                    "src": {
                      "text": "23,368,38,47",
                      "type": "23,368,17"
                    }
                  }
                ],
                "src": {
                  "name": "23,370,0",
                  "text": "23,367,8,109"
                }
              },
              {
                "$type": "method",
                "name": "getAlignToXY",
                "text": "Gets the x,y coordinates to align this element with another element. See\n{@link #method!alignTo #alignTo} for more info on the supported position values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "text": "The Positionable,\nHTMLElement, or id of the element to align to.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String",
                    "src": {
                      "name": "21,319,58",
                      "text": "21,319,66,18:21,320,8,47",
                      "type": "21,319,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "The position to align to\n",
                    "type": "String",
                    "value": "\"tl-bl?\"",
                    "src": {
                      "name": "21,321,25",
                      "text": "21,321,44,25",
                      "type": "21,321,16",
                      "value": "21,321,34"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "offsets",
                    "optional": true,
                    "text": "Offset the positioning by [x, y]\n",
                    "type": "Number[]",
                    "src": {
                      "name": "21,322,27",
                      "text": "21,322,36,33",
                      "type": "21,322,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y]\n",
                    "type": "Number[]",
                    "src": {
                      "text": "21,323,27,7",
                      "type": "21,323,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,325,0",
                  "text": "21,317,8,138"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAnchorToXY",
                "text": "Gets the x,y coordinates of an element specified by the anchor position on the\nelement.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "21,25,33",
                      "text": "21,25,36,12",
                      "type": "21,25,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anchor",
                    "optional": true,
                    "text": "The specified anchor position.\nSee {@link #method!alignTo #alignTo} for details on supported anchor positions.\n",
                    "type": "String",
                    "value": "'tl'",
                    "src": {
                      "name": "21,26,25",
                      "text": "21,26,38,31:21,27,8,64",
                      "type": "21,26,16",
                      "value": "21,26,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "True to get the local (element top/left-relative) anchor\nposition instead of page coordinates\n",
                    "type": "Boolean",
                    "src": {
                      "name": "21,28,26",
                      "text": "21,28,33,57:21,29,8,37",
                      "type": "21,28,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "optional": true,
                    "text": "An object containing the size to use for calculating anchor\nposition {width: (target width), height: (target height)} (defaults to the\nelement's current size)\n",
                    "type": "Object",
                    "src": {
                      "name": "21,30,25",
                      "text": "21,30,31,60:21,31,8,99",
                      "type": "21,30,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y] An array containing the element's x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "21,33,27,61",
                      "type": "21,33,17"
                    }
                  }
                ],
                "src": {
                  "access": "21,34,8",
                  "name": "21,36,0",
                  "text": "21,23,8,88"
                }
              },
              {
                "$type": "method",
                "name": "getAnchorXY",
                "text": "Gets the x,y coordinates specified by the anchor position on the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "optional": true,
                    "text": "The specified anchor position.\nSee {@link #method!alignTo #alignTo} for details on supported anchor positions.\n",
                    "type": "String",
                    "value": "'tl'",
                    "src": {
                      "name": "21,448,25",
                      "text": "21,448,38,31:21,449,8,64",
                      "type": "21,448,16",
                      "value": "21,448,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "True to get the local (element top/left-relative) anchor\nposition instead of page coordinates\n",
                    "type": "Boolean",
                    "src": {
                      "name": "21,450,26",
                      "text": "21,450,33,57:21,451,8,37",
                      "type": "21,450,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "optional": true,
                    "text": "An object containing the size to use for calculating anchor\nposition {width: (target width), height: (target height)} (defaults to the\nelement's current size)\n",
                    "type": "Object",
                    "src": {
                      "name": "21,452,25",
                      "text": "21,452,31,60:21,453,8,99",
                      "type": "21,452,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y] An array containing the element's x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "21,455,27,61",
                      "type": "21,455,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,457,0",
                  "text": "21,447,8,74"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAnimationProps",
                "text": "Get animation properties\n",
                "src": {
                  "access": "23,306,8",
                  "name": "23,309,0",
                  "text": "23,307,8,25"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAriaLabelEl",
                "text": "Find component(s) that label or describe this component,\nand return the id(s) of their ariaEl elements.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "reference",
                    "optional": true,
                    "text": "Component reference,\nor array of component references, or a function that should return\nthe proper attribute string. The function will be called in the\ncontext of the labelled component.\n",
                    "type": "Function/String/String[]",
                    "src": {
                      "name": "7,72,47",
                      "text": "7,72,58,21:7,73,12,167",
                      "type": "7,72,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Element id string, or null\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "7,77,34,27",
                      "type": "7,77,21"
                    }
                  }
                ],
                "src": {
                  "access": "7,78,12",
                  "name": "7,80,0",
                  "text": "7,69,12,105"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAutoId",
                "src": {
                  "access": "3,6003,12",
                  "name": "3,6005,0"
                }
              },
              {
                "$type": "method",
                "name": "getAxis",
                "text": "Returns an axis instance based on the type of data passed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "axis",
                    "text": "You may request an axis by passing\nan id, the number of the array key returned by {@link #getAxes}, or an axis instance.\n",
                    "type": "String/Number/Ext.chart.axis.Axis",
                    "src": {
                      "name": "5,861,51",
                      "text": "5,861,56,35:5,862,8,86",
                      "type": "5,861,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The axis requested.\n",
                    "type": "Ext.chart.axis.Axis",
                    "src": {
                      "text": "5,863,38,20",
                      "type": "5,863,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,860,16",
                  "text": "5,860,24,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBorderPadding",
                "text": "Returns the size of the element's borders and padding.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "an object with the following numeric properties\n- beforeX\n- afterX\n- beforeY\n- afterY\n",
                    "type": "Object",
                    "src": {
                      "text": "21,42,25,48:21,43,8,38",
                      "type": "21,42,17"
                    }
                  }
                ],
                "src": {
                  "access": "21,47,8",
                  "name": "21,49,0",
                  "text": "21,41,8,55"
                }
              },
              {
                "$type": "method",
                "name": "getBox",
                "text": "Return an object defining the area of this Element which can be passed to\n{@link #method!setBox #setBox} to set another Element's size/location to match this element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "contentBox",
                    "optional": true,
                    "text": "If true a box for the content of the element is\nreturned.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "21,474,26",
                      "text": "21,474,38,48:21,475,8,10",
                      "type": "21,474,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "If true the element's left and top relative to its\n`offsetParent` are returned instead of page x/y.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "21,476,26",
                      "text": "21,476,33,51:21,477,8,49",
                      "type": "21,476,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object in the format\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "x",
                        "text": "The element's X position.\n",
                        "type": "Number",
                        "src": {
                          "name": "21,479,32",
                          "text": "21,479,34,26",
                          "type": "21,479,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "y",
                        "text": "The element's Y position.\n",
                        "type": "Number",
                        "src": {
                          "name": "21,480,32",
                          "text": "21,480,34,26",
                          "type": "21,480,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "width",
                        "text": "The element's width.\n",
                        "type": "Number",
                        "src": {
                          "name": "21,481,32",
                          "text": "21,481,38,21",
                          "type": "21,481,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "text": "The element's height.\n",
                        "type": "Number",
                        "src": {
                          "name": "21,482,32",
                          "text": "21,482,39,22",
                          "type": "21,482,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "bottom",
                        "text": "The element's lower bound.\n",
                        "type": "Number",
                        "src": {
                          "name": "21,483,32",
                          "text": "21,483,39,27",
                          "type": "21,483,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "right",
                        "text": "The element's rightmost bound.\n\nThe returned object may also be addressed as an Array where index 0 contains the X\nposition and index 1 contains the Y position. The result may also be used for\n{@link #method!setXY #setXY}\n",
                        "type": "Number",
                        "src": {
                          "name": "21,484,32",
                          "text": "21,484,38,31:21,485,8,177",
                          "type": "21,484,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "21,478,25,24",
                      "type": "21,478,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,490,0",
                  "text": "21,471,8,153"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "13,793,41,63",
                      "type": "13,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "13,792,11",
                  "name": "13,795,0",
                  "text": "13,791,11,43"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getBubbleTarget",
                "text": "Implements an upward event bubbling policy. By default a Component bubbles events up to its {@link #method!getRefOwner #getRefOwner}.\n\nComponent subclasses may implement a different bubbling strategy by overriding this method.\n",
                "src": {
                  "access": "3,3144,8",
                  "name": "3,3149,0",
                  "text": "3,3145,8,223"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getChartSize",
                "text": "Cache chart size as element.getSize results in a relatively expensive call\nto getComputedStyle, which may slow the rendering of a frame by as much as 2%.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isRecompute",
                    "src": {
                      "name": "5,1487,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,1483,8",
                  "name": "5,1487,0",
                  "text": "5,1484,8,154"
                }
              },
              {
                "$type": "method",
                "name": "getChildByElement",
                "text": "Return the immediate child Component in which the passed element is located.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element to test (or ID of element).\n",
                    "type": "Ext.dom.Element/HTMLElement/String",
                    "src": {
                      "name": "2,1107,52",
                      "text": "2,1107,55,40",
                      "type": "2,1107,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deep",
                    "text": "If `true`, returns the deepest descendant Component which contains the passed element.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1108,25",
                      "text": "2,1108,30,87",
                      "type": "2,1108,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The child item which contains the passed element.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "2,1109,32,50",
                      "type": "2,1109,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1111,0",
                  "text": "2,1106,8,77"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getChildItemsToDisable",
                "text": "Gets a list of child components to enable/disable when the container is\nenabled/disabled\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Items to be enabled/disabled\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "2,1922,38,29",
                      "type": "2,1922,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1921,12",
                  "name": "2,1924,0",
                  "text": "2,1919,12,89"
                }
              },
              {
                "$type": "method",
                "name": "getClientRegion",
                "text": "Returns a region object that defines the client area of this element.\n\nThat is, the area *within* any scrollbars.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A Region containing \"top, left, bottom, right\" properties.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "21,735,34,59",
                      "type": "21,735,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,737,0",
                  "text": "21,732,8,114"
                }
              },
              {
                "$type": "method",
                "name": "getCollapsed",
                "text": "Returns the current collapsed state of the panel.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "False when not collapsed, otherwise the value of {@link #cfg!collapseDirection #collapseDirection}.\n",
                    "type": "Boolean/String",
                    "src": {
                      "text": "6,2054,33,77",
                      "type": "6,2054,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,2056,0",
                  "text": "6,2053,8,50"
                }
              },
              {
                "$type": "method",
                "name": "getComponent",
                "since": "2.3.0",
                "text": "Attempts a default component lookup (see {@link Ext.container.Container#method!getComponent Ext.container.Container#getComponent}). If the component is not found in the normal\nitems, the dockedItems are searched and the matched component (if any) returned (see {@link #method!getDockedComponent #getDockedComponent}). Note that docked\nitems will only be matched by component id or itemId -- if you pass a numeric index only non-docked child components will be searched.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "comp",
                    "text": "The component id, itemId or position to find\n",
                    "type": "String/Number",
                    "src": {
                      "name": "6,2075,31",
                      "text": "6,2075,36,45",
                      "type": "6,2075,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The component (if found)\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "6,2076,32,25",
                      "type": "6,2076,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,2079,0",
                  "since": "6,2077,15",
                  "text": "6,2072,8,399"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "20,1469,29",
                      "text": "20,1469,35,40",
                      "type": "20,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "20,1470,30",
                      "text": "20,1470,42,60",
                      "type": "20,1470,20",
                      "value": "20,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "20,1471,29,27",
                      "type": "20,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "20,1473,0",
                  "text": "20,1466,12,151"
                }
              },
              {
                "$type": "method",
                "name": "getConstrainRegion",
                "text": "Returns the content region of this element for purposes of constraining floating\nchildren.  That is the region within the borders and scrollbars, but not within the padding.\n",
                "src": {
                  "name": "21,596,0",
                  "text": "21,593,8,174"
                }
              },
              {
                "$type": "method",
                "name": "getConstrainVector",
                "text": "Returns the `[X, Y]` vector by which this Positionable's element must be translated to make a best\nattempt to constrain within the passed constraint. Returns `false` if the element\ndoes not need to be moved.\n\nPriority is given to constraining the top and left within the constraint.\n\nThe constraint may either be an existing element into which the element is to be\nconstrained, or a {@link Ext.util.Region} into which this element is to be\nconstrained.\n\nBy default, any extra shadow around the element is **not** included in the constrain calculations - the edges\nof the element are used as the element bounds. To constrain the shadow within the constrain region, set the\n`constrainShadow` property on this element to `true`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "optional": true,
                    "text": "The\nPositionable, HTMLElement, element id, or Region into which the element is to be\nconstrained.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String/Ext.util.Region",
                    "src": {
                      "name": "21,637,75",
                      "text": "21,637,88,4:21,638,8,94",
                      "type": "21,637,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedPosition",
                    "optional": true,
                    "text": "A proposed `[X, Y]` position to test for validity\nand to produce a vector for instead of using the element's current position\n",
                    "type": "Number[]",
                    "src": {
                      "name": "21,640,27",
                      "text": "21,640,45,50:21,641,8,76",
                      "type": "21,640,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedSize",
                    "optional": true,
                    "text": "A proposed `[width, height]` size to constrain\ninstead of using the element's current size\n",
                    "type": "Number[]",
                    "src": {
                      "name": "21,642,27",
                      "text": "21,642,41,47:21,643,8,44",
                      "type": "21,642,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**If** the element *needs* to be translated, an `[X, Y]`\nvector by which this element must be translated. Otherwise, `false`.\n",
                    "type": "Number[]/Boolean",
                    "src": {
                      "text": "21,644,35,57:21,645,8,69",
                      "type": "21,644,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,647,0",
                  "text": "21,623,8,734"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getContentTarget",
                "src": {
                  "access": "2,1929,12",
                  "name": "2,1931,0"
                }
              },
              {
                "$type": "method",
                "name": "getController",
                "text": "Returns the {@link Ext.app.ViewController} instance associated with this\ncomponent via the {@link #cfg!controller #controller} config or {@link #setController} method.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns this component's ViewController or\nnull if one was not configured\n",
                    "type": "Ext.app.ViewController",
                    "src": {
                      "text": "8,79,45,43:8,80,12,31",
                      "type": "8,79,21"
                    }
                  }
                ],
                "src": {
                  "name": "8,76,20",
                  "text": "8,77,12,152"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "20,1506,12",
                  "name": "20,1508,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getDefaultContentTarget",
                "src": {
                  "access": "2,1936,12",
                  "name": "2,1938,0"
                }
              },
              {
                "$type": "method",
                "name": "getDefaultFocus",
                "text": "Finds the configured default focus item. See {@link #cfg!defaultFocus #defaultFocus}.\n",
                "src": {
                  "name": "2,1249,0",
                  "text": "2,1247,8,68"
                }
              },
              {
                "$type": "method",
                "name": "getDockedComponent",
                "text": "Finds a docked component by id, itemId or position. Also see {@link #method!getDockedItems #getDockedItems}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "comp",
                    "text": "The id, itemId or position of the docked component (see {@link Ext.container.Container#method!getComponent Ext.container.Container#getComponent} for details)\n",
                    "type": "String/Number",
                    "src": {
                      "name": "9,234,31",
                      "text": "9,234,36,127",
                      "type": "9,234,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The docked component (if found)\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "9,235,32,32",
                      "type": "9,235,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,237,0",
                  "text": "9,233,8,85"
                }
              },
              {
                "$type": "method",
                "name": "getDockedItems",
                "text": "Retrieves an array of all currently docked Components.\n\nFor example to find a toolbar that has been docked at top:\n\n    panel.getDockedItems('toolbar[dock=\"top\"]');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "A {@link Ext.ComponentQuery} selector string to filter the returned items.\n",
                    "type": "String",
                    "src": {
                      "name": "9,251,24",
                      "text": "9,251,33,90",
                      "type": "9,251,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beforeBody",
                    "text": "An optional flag to limit the set of items to only those\n before the body (true) or after the body (false). All components are returned by\n default.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "9,252,25",
                      "text": "9,252,36,57:9,253,8,92",
                      "type": "9,252,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The array of docked components meeting the specified criteria.\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "9,255,34,63",
                      "type": "9,255,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,257,0",
                  "text": "9,245,8,166"
                }
              },
              {
                "$type": "method",
                "name": "getEl",
                "since": "1.1.0",
                "text": "Retrieves the top level element representing this component.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "3,3164,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3167,0",
                  "since": "3,3165,15",
                  "text": "3,3163,8,61"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getFocusClsEl",
                "text": "Returns the focus styling holder element associated with this Focusable.\nBy default it is the same element as {@link #method!getFocusEl #getFocusEl}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The focus styling element.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "11,93,30,27",
                      "type": "11,93,17"
                    }
                  }
                ],
                "src": {
                  "access": "11,94,8",
                  "name": "11,96,0",
                  "text": "11,90,8,143"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getFocusEl",
                "text": "Returns the focus holder element associated with this Container.\nBy default, this is the Container's target element; however if {@link #cfg!defaultFocus #defaultFocus}\nis defined, the child component referenced by that property will be found\nand returned instead.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the focus holding element.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "2,1169,34,27",
                      "type": "2,1169,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,1163,8",
                  "name": "2,1171,0",
                  "text": "2,1164,8,247"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getFocusTask",
                "src": {
                  "access": "11,699,12",
                  "name": "11,701,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getFrameInfo",
                "text": "On render, reads an encoded style attribute, \"filter\" from the style of this Component's element.\nThis information is memoized based upon the CSS class name of this Component's element.\nBecause child Components are rendered as textual HTML as part of the topmost Container, a dummy div is inserted\ninto the document to receive the document element's CSS class name, and therefore style attributes.\n",
                "src": {
                  "access": "22,1172,12",
                  "name": "22,1178,0",
                  "text": "22,1173,12,398"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getFrameTpl",
                "items": [
                  {
                    "$type": "param",
                    "name": "table",
                    "src": {
                      "name": "22,1315,0"
                    }
                  }
                ],
                "src": {
                  "access": "22,1313,12",
                  "name": "22,1315,0"
                }
              },
              {
                "$type": "method",
                "name": "getHeader",
                "text": "Gets the {@link Ext.panel.Header} for this panel.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.panel.Header",
                    "src": {
                      "type": "6,2090,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,2092,0",
                  "text": "6,2089,8,57"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getHeaderCollapsedClasses",
                "text": "Create the class array to add to the Header when collapsed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "header",
                    "src": {
                      "name": "6,2100,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,2097,8",
                  "name": "6,2100,0",
                  "text": "6,2098,8,60"
                }
              },
              {
                "$type": "method",
                "name": "getHeight",
                "text": "Gets the current height of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "3,3173,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3175,0",
                  "text": "3,3172,8,63"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the `{@link #cfg!id id}` of this component. Will auto-generate an `{@link #cfg!id id}` if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "3,3211,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3213,0",
                  "text": "3,3210,8,98"
                }
              },
              {
                "$type": "method",
                "name": "getImage",
                "text": "Produces an image of the chart / drawing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "format",
                    "optional": true,
                    "text": "Possible options are 'image' (the method will return an\nImage object) and 'stream' (the method will return the image as a byte stream).\nIf missing, the DataURL of the drawing's (or chart's) image will be returned.\n",
                    "type": "String",
                    "src": {
                      "name": "10,365,25",
                      "text": "10,365,33,56:10,366,8,158",
                      "type": "10,365,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "data",
                        "text": "Image element, byte stream or DataURL.\n",
                        "type": "String",
                        "src": {
                          "name": "10,369,32",
                          "text": "10,369,37,39",
                          "type": "10,369,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "type",
                        "text": "The type of the data (e.g. 'png' or 'svg').\n",
                        "type": "String",
                        "src": {
                          "name": "10,370,32",
                          "text": "10,370,37,44",
                          "type": "10,370,17"
                        }
                      }
                    ],
                    "src": {
                      "type": "10,368,17"
                    }
                  }
                ],
                "src": {
                  "name": "10,372,0",
                  "text": "10,364,8,42"
                }
              },
              {
                "$type": "method",
                "name": "getInherited",
                "since": "5.0.0",
                "text": "This method returns an object containing the inherited properties for this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "inner",
                    "optional": true,
                    "text": "Pass `true` to return `inheritedStateInner` instead\nof the normal `inheritedState` object. This is only needed internally and should\nnot be passed by user code.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "25,88,26",
                      "text": "25,88,39,52:25,89,8,110",
                      "type": "25,88,16",
                      "value": "25,88,32"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `inheritedState` object containing inherited properties.\n",
                    "type": "Object",
                    "src": {
                      "text": "25,92,25,61",
                      "type": "25,92,17"
                    }
                  }
                ],
                "src": {
                  "name": "25,95,0",
                  "since": "25,93,15",
                  "text": "25,86,8,86"
                }
              },
              {
                "$type": "method",
                "name": "getInheritedConfig",
                "since": "5.0.0",
                "text": "This method returns the value of a config property that may be inherited from some\nancestor.\n\nIn some cases, a config may be explicitly set on a component with the intent of\n*only* being presented to its children while that component should act upon the\ninherited value (see `{@link #cfg!referenceHolder referenceHolder}` for example). In these cases the `skipThis`\nparameter should be specified as `true`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the config property to return.\n",
                    "type": "String",
                    "src": {
                      "name": "25,152,24",
                      "text": "25,152,33,43",
                      "type": "25,152,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` if the property should be ignored if\nfound on this instance. In other words, `true` means the property must be inherited\nand not explicitly set on this instance.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "25,153,26",
                      "text": "25,153,42,49:25,154,8,125",
                      "type": "25,153,16",
                      "value": "25,153,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value of the requested `property`.\n",
                    "type": "Mixed",
                    "src": {
                      "text": "25,156,24,39",
                      "type": "25,156,17"
                    }
                  }
                ],
                "src": {
                  "name": "25,159,0",
                  "since": "25,157,15",
                  "text": "25,144,8,379"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "20,1551,29",
                      "text": "20,1551,35,37",
                      "type": "20,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "20,1552,35,48:20,1553,12,33",
                      "type": "20,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "20,1555,0",
                  "text": "20,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getInsertPosition",
                "text": "This function takes the position argument passed to onRender and returns a\nDOM element that you can use in the insertBefore.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "position",
                    "text": "Index, element id or element you want\nto put this component before.\n",
                    "type": "String/Number/Ext.dom.Element/HTMLElement",
                    "src": {
                      "name": "22,564,59",
                      "text": "22,564,68,38:22,565,8,30",
                      "type": "22,564,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "DOM element that you can use in the insertBefore\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "22,566,30,49",
                      "type": "22,566,17"
                    }
                  }
                ],
                "src": {
                  "name": "22,568,0",
                  "text": "22,562,8,125"
                }
              },
              {
                "$type": "method",
                "name": "getInteraction",
                "text": "Get an interaction by type.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "type",
                    "text": "The type of the interaction.\n",
                    "type": "String",
                    "src": {
                      "name": "5,1405,24",
                      "text": "5,1405,29,29",
                      "type": "5,1405,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The interaction. `{@link null}`\nif not found.\n",
                    "type": "Ext.chart.interactions.Abstract",
                    "src": {
                      "text": "5,1406,50,24:5,1407,8,14",
                      "type": "5,1406,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,1409,0",
                  "text": "5,1404,8,28"
                }
              },
              {
                "$type": "method",
                "name": "getItemForPoint",
                "text": "Given an x/y point relative to the chart, find and return the first series item that\nmatches that point.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "5,1504,24",
                      "type": "5,1504,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "5,1505,24",
                      "type": "5,1505,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with `{@link #cfg!series series}` and `item` properties, or `false` if no item found.\n",
                    "type": "Object",
                    "src": {
                      "text": "5,1506,25,76",
                      "type": "5,1506,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,1508,0",
                  "text": "5,1502,8,105"
                }
              },
              {
                "$type": "method",
                "name": "getItemId",
                "text": "Returns the value of {@link #cfg!itemId #itemId} assigned to this component, or when that\nis not set, returns the value of {@link #cfg!id #id}.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "3,3234,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3236,0",
                  "text": "3,3232,8,124"
                }
              },
              {
                "$type": "method",
                "name": "getItemsForPoint",
                "text": "Given an x/y point relative to the chart, find and return all series items that match that point.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "5,1536,24",
                      "type": "5,1536,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "5,1537,24",
                      "type": "5,1537,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of objects with `{@link #cfg!series series}` and `item` properties.\n",
                    "type": "Array",
                    "src": {
                      "text": "5,1538,24,57",
                      "type": "5,1538,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,1540,0",
                  "text": "5,1535,8,98"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getKeyMap",
                "src": {
                  "access": "6,2113,8",
                  "name": "6,2115,0"
                }
              },
              {
                "$type": "method",
                "name": "getLayout",
                "text": "Returns the {@link Ext.layout.container.Container} instance currently associated with this Container.\nIf a layout has not been instantiated yet, that is done first\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The layout\n",
                    "type": "Ext.layout.container.Container",
                    "src": {
                      "text": "2,1188,49,11",
                      "type": "2,1188,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1190,0",
                  "text": "2,1186,8,171"
                }
              },
              {
                "$type": "method",
                "name": "getLegendStore",
                "text": "Return the legend store that contains all the legend information.\nThis information is collected from all the series.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.data.Store",
                    "src": {
                      "type": "5,760,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,762,0",
                  "text": "5,758,8,117"
                }
              },
              {
                "$type": "method",
                "name": "getLoader",
                "text": "Gets the {@link Ext.ComponentLoader} for this Component.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The loader instance, null if it doesn't exist.\n",
                    "type": "Ext.ComponentLoader",
                    "src": {
                      "text": "3,3242,38,47",
                      "type": "3,3242,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3244,0",
                  "text": "3,3241,8,57"
                }
              },
              {
                "$type": "method",
                "name": "getLocalX",
                "text": "Returns the x coordinate of this element reletive to its `offsetParent`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The local x coordinate\n",
                    "type": "Number",
                    "src": {
                      "text": "21,55,25,23",
                      "type": "21,55,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,57,0",
                  "text": "21,54,8,73"
                }
              },
              {
                "$type": "method",
                "name": "getLocalXY",
                "text": "Returns the x and y coordinates of this element relative to its `offsetParent`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The local XY position of the element\n",
                    "type": "Number[]",
                    "src": {
                      "text": "21,63,27,37",
                      "type": "21,63,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,65,0",
                  "text": "21,62,8,80"
                }
              },
              {
                "$type": "method",
                "name": "getLocalY",
                "text": "Returns the y coordinate of this element reletive to its `offsetParent`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The local y coordinate\n",
                    "type": "Number",
                    "src": {
                      "text": "21,71,25,23",
                      "type": "21,71,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,73,0",
                  "text": "21,70,8,73"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getMaskTarget",
                "text": "Returns the element which is masked by the {@link #method!mask #mask} method, or into which the {@link #method!setLoading #setLoading} is rendered into.\n\nThe default implementation uses the {@link #cfg!maskElement #maskElement} configuration to access the Component's child element by name. By default, {@link #cfg!maskElement #maskElement}\nis `{@link null}` which means that `{@link null}` is returned from this method indicating that the mask needs to be rendered into the document because\ncomponent structure should not be contaminated by mask elements.\n\nSome subclasses may override this method if they have knowledge about external structures where a mask could usefully be rendered.\n\nFor example a {@link Ext.view.Table} will request that its owning {@link Ext.panel.Table} be masked. The\nGridPanel will have its own implementation of `{@link #method!getMaskTarget getMaskTarget}` which will return the element dictated by its own {@link #cfg!maskElement #maskElement}\nPanels use `\"el\"` as their {@link #cfg!maskElement #maskElement} by default, but that could be overridden to be `\"body\"` to leave toolbars and the header\nmouse-accessible.\n",
                "src": {
                  "access": "3,3263,8",
                  "name": "3,3278,0",
                  "text": "3,3264,8,1030"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getMemento",
                "text": "Memento Factory method\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "Name of the Memento (used as prefix for named Memento)\n",
                    "type": "String",
                    "src": {
                      "name": "6,1311,24",
                      "text": "6,1311,29,55",
                      "type": "6,1311,16"
                    }
                  }
                ],
                "src": {
                  "access": "6,1309,8",
                  "name": "6,1313,0",
                  "text": "6,1310,8,23"
                }
              },
              {
                "$type": "method",
                "name": "getOffsetsTo",
                "text": "Returns the offsets of this element from the passed element. The element must both\nbe part of the DOM tree and not have display:none to have page coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "offsetsTo",
                    "text": "The Positionable,\nHTMLElement, or element id to get get the offsets from.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String",
                    "src": {
                      "name": "21,712,59",
                      "text": "21,712,69,18:21,713,9,56",
                      "type": "21,712,17"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The XY page offsets (e.g. `[100, -200]`)\n",
                    "type": "Number[]",
                    "src": {
                      "text": "21,714,28,41",
                      "type": "21,714,18"
                    }
                  }
                ],
                "src": {
                  "name": "21,716,0",
                  "text": "21,710,9,159"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getOverflowEl",
                "text": "Get an el for overflowing, defaults to the target el\n",
                "src": {
                  "access": "3,6023,12",
                  "name": "3,6025,0",
                  "text": "3,6022,12,53"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getOverflowStyle",
                "text": "Returns the CSS style object which will set the Component's scroll styles.\nThis must be applied to the {@link #method!getTargetEl #getTargetEl}.\n",
                "src": {
                  "access": "3,6030,12",
                  "name": "3,6034,0",
                  "text": "3,6031,12,140"
                }
              },
              {
                "$type": "method",
                "name": "getPlugin",
                "text": "Retrieves a plugin from this component's collection by its `pluginId`.\n\n    var grid = Ext.create('Ext.grid.Panel', {\n        store: {\n            fields: ['name'],\n            data: [{\n                name: 'Scott Pilgrim'\n            }]\n        },\n        columns: [{\n            header: 'Name',\n            dataIndex: 'name',\n            editor: 'textfield',\n            flex: 1\n        }],\n        selType: 'cellmodel',\n        plugins: {\n            ptype: 'cellediting',\n            clicksToEdit: 1,\n            pluginId: 'myplugin'\n        },\n        height: 200,\n        width: 400,\n        renderTo: Ext.getBody()\n    });\n\n    grid.getPlugin('myplugin');  // the cellediting plugin\n\n**Note:** See also {@link #method!findPlugin #findPlugin}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pluginId",
                    "text": "The `pluginId` set on the plugin config object\n",
                    "type": "String",
                    "src": {
                      "name": "3,3313,24",
                      "text": "3,3313,33,47",
                      "type": "3,3313,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "plugin instance or `{@link null}` if not found\n",
                    "type": "Ext.plugin.Abstract",
                    "src": {
                      "text": "3,3314,38,39",
                      "type": "3,3314,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3316,0",
                  "text": "3,3283,8,732"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getPlugins",
                "text": "Returns an array of current fully constructed plugin instances.\n",
                "src": {
                  "access": "3,6064,12",
                  "name": "3,6066,0",
                  "text": "3,6063,12,64"
                }
              },
              {
                "$type": "method",
                "name": "getPosition",
                "text": "Gets the current XY position of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "If true the element's left and top are returned instead of page XY.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,3331,26",
                      "text": "3,3331,39,68",
                      "type": "3,3331,16",
                      "value": "3,3331,32"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The XY position of the element (e.g., [100, 200])\n",
                    "type": "Number[]",
                    "src": {
                      "text": "3,3332,27,50",
                      "type": "3,3332,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3334,0",
                  "text": "3,3330,8,68"
                }
              },
              {
                "$type": "method",
                "name": "getReferences",
                "since": "5.0.0",
                "text": "Returns an object holding the descendants of this view keyed by their\n`{@link Ext.Component#cfg!reference Ext.Component#cfg-reference}`. This object should not be held\npast the scope of the function calling this method. It will not be valid if items\nare added or removed from this or any sub-container.\n\nThe intended usage is shown here (assume there are 3 components with reference\nvalues of \"foo\", \"bar\" and \"baz\" at some level below this container):\n\n     onClick: function () {\n         var refs = this.getReferences();\n\n         // using \"refs\" we can access any descendant by its \"reference\"\n\n         refs.foo.getValue() + refs.bar.getValue() + refs.baz.getValue();\n     }\n\nIf `this` component has a `{@link Ext.Component#cfg!reference Ext.Component#cfg-reference}` assigned\nto it, that is **not** included in this object. That reference is understood to\nbelong to the ancestor container configured as the `{@link #cfg!referenceHolder referenceHolder}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "An object with each child reference. This will be `{@link null}` if this\ncontainer has no descendants with a `{@link Ext.Component#cfg!reference Ext.Component#cfg-reference}`\nspecified.\n",
                    "type": "Object",
                    "src": {
                      "text": "16,52,25,65:16,53,8,95",
                      "type": "16,52,17"
                    }
                  }
                ],
                "src": {
                  "name": "16,57,0",
                  "since": "16,55,15",
                  "text": "16,32,8,897"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getRefItems",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "type": "Boolean",
                    "src": {
                      "name": "5,1709,25",
                      "type": "5,1709,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "5,1710,17"
                    }
                  }
                ],
                "src": {
                  "access": "5,1708,8",
                  "name": "5,1712,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getRefOwner",
                "text": "Used by {@link Ext.ComponentQuery}, and the {@link Ext.Component#method!up Ext.Component#up}\nmethod to find the owning Component in the linkage hierarchy.\n\nBy default this returns the Container which contains this Component.\n\nThis may be overridden by Component authors who implement ownership hierarchies\nwhich are not based upon ownerCt, such as BoundLists being owned by Fields or Menus\nbeing owned by Buttons.\n",
                "src": {
                  "access": "25,285,8",
                  "name": "25,287,0",
                  "text": "25,277,8,408"
                }
              },
              {
                "$type": "method",
                "name": "getRegion",
                "text": "Returns a region object that defines the area of this element.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A Region containing \"top, left, bottom, right\" properties.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "21,724,34,59",
                      "type": "21,724,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,726,0",
                  "text": "21,723,8,63"
                }
              },
              {
                "$type": "method",
                "name": "getScrollX",
                "text": "Returns the \"x\" scroll position for this component.  Only applicable for\n{@link #cfg!scrollable #scrollable} components\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "3,3359,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3361,0",
                  "text": "3,3357,8,104"
                }
              },
              {
                "$type": "method",
                "name": "getScrollY",
                "text": "Returns the \"y\" scroll position for this component.  Only applicable for\n{@link #cfg!scrollable #scrollable} components\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "3,3369,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3371,0",
                  "text": "3,3367,8,104"
                }
              },
              {
                "$type": "method",
                "name": "getSize",
                "text": "Gets the current size of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "contentSize",
                    "optional": true,
                    "text": "true to get the width/size minus borders and padding\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,3378,26",
                      "text": "3,3378,39,53",
                      "type": "3,3378,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object containing the element's size:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "type": "Number",
                        "src": {
                          "name": "3,3380,32",
                          "type": "3,3380,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "type": "Number",
                        "src": {
                          "name": "3,3381,32",
                          "type": "3,3381,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "3,3379,25,41",
                      "type": "3,3379,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3383,0",
                  "text": "3,3377,8,61"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getSizeModel",
                "text": "Returns an object that describes how this component's width and height are managed.\nAll of these objects are shared and should not be modified.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The size model for this component.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "text": "The {@link Ext.layout.SizeModel}\nfor the width.\n",
                        "type": "Ext.layout.SizeModel",
                        "src": {
                          "name": "3,3392,46",
                          "text": "3,3392,52,44:3,3393,8,15",
                          "type": "3,3392,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "text": "The {@link Ext.layout.SizeModel}\nfor the height.\n",
                        "type": "Ext.layout.SizeModel",
                        "src": {
                          "name": "3,3394,46",
                          "text": "3,3394,53,44:3,3395,8,16",
                          "type": "3,3394,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "3,3391,25,35",
                      "type": "3,3391,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ownerCtSizeModel",
                    "src": {
                      "name": "3,3398,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,3396,8",
                  "name": "3,3398,0",
                  "text": "3,3388,8,145"
                }
              },
              {
                "$type": "method",
                "name": "getState",
                "text": "The supplied default state gathering method for the Component class.\n\nThis method returns dimension settings such as `{@link #cfg!flex flex}`, `{@link #cfg!anchor anchor}`, `{@link #cfg!width width}` and `{@link #cfg!height height}` along with `{@link #cfg!collapsed collapsed}`\nstate.\n\nSubclasses which implement more complex state should call the superclass's implementation, and apply their state\nto the result if this basic state is to be saved.\n\nNote that Component state will only be saved if the Component has a {@link #cfg!stateId #stateId} and there as a StateProvider\nconfigured for the document.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "3,3527,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3529,0",
                  "text": "3,3516,8,495"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getStateId",
                "text": "Gets the state id for this object.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The 'stateId' or the implicit 'id' specified by component configuration.\n",
                    "type": "String",
                    "src": {
                      "text": "17,268,25,73",
                      "type": "17,268,17"
                    }
                  }
                ],
                "src": {
                  "access": "17,269,8",
                  "name": "17,271,0",
                  "text": "17,267,8,35"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getStyleProxy",
                "text": "Returns an offscreen div with the same class name as the element this is being rendered.\nThis is because child item rendering takes place in a detached div which, being not\npart of the document, has no styling.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "src": {
                      "name": "22,1295,0"
                    }
                  }
                ],
                "src": {
                  "access": "22,1290,12",
                  "name": "22,1295,0",
                  "text": "22,1291,12,211"
                }
              },
              {
                "$type": "method",
                "name": "getSurface",
                "text": "Get a surface by the given id or create one if it doesn't exist.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "optional": true,
                    "type": "String",
                    "value": "\"main\"",
                    "src": {
                      "name": "10,330,25",
                      "type": "10,330,16",
                      "value": "10,330,28"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Surface",
                    "src": {
                      "type": "10,331,17"
                    }
                  }
                ],
                "src": {
                  "name": "10,333,0",
                  "text": "10,329,8,65"
                }
              },
              {
                "$type": "method",
                "name": "getTabIndex",
                "text": "Return the actual tabIndex for this Focusable.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "tabIndex attribute value\n",
                    "type": "Number",
                    "src": {
                      "text": "11,418,25,25",
                      "type": "11,418,17"
                    }
                  }
                ],
                "src": {
                  "name": "11,420,0",
                  "text": "11,416,8,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTargetEl",
                "text": "This is used to determine where to insert the 'html', 'contentEl' and 'items' in this component.\n",
                "src": {
                  "access": "3,6093,12",
                  "name": "3,6095,0",
                  "text": "3,6092,12,97"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTdCls",
                "text": "Needed for when widget is rendered into a grid cell. The class to add to the cell element.\n",
                "src": {
                  "access": "3,6100,12",
                  "name": "3,6103,0",
                  "text": "3,6101,12,91"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTdType",
                "text": "Partner method to {@link #method!getTdCls #getTdCls}.\n\nReturns the base type for the component. Defaults to return `this.xtype`, but\nAll derived classes of {@link Ext.form.field.Text} can return the type 'textfield',\nand all derived classes of {@link Ext.button.Button} can return the type 'button'\n",
                "src": {
                  "access": "3,6108,12",
                  "name": "3,6115,0",
                  "text": "3,6109,12,299"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTpl",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "3,6122,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6120,12",
                  "name": "3,6122,0"
                }
              },
              {
                "$type": "method",
                "name": "getViewRegion",
                "text": "Returns the **content** region of this element. That is the region within the borders\nand padding.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A Region containing \"top, left, bottom, right\" member data.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "21,768,34,60",
                      "type": "21,768,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,770,0",
                  "text": "21,766,8,99"
                }
              },
              {
                "$type": "method",
                "name": "getWidth",
                "text": "Gets the current width of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "3,3565,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3567,0",
                  "text": "3,3564,8,62"
                }
              },
              {
                "$type": "method",
                "name": "getX",
                "text": "Gets the current X position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The X position of the element\n",
                    "type": "Number",
                    "src": {
                      "text": "21,79,25,30",
                      "type": "21,79,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,81,0",
                  "text": "21,78,8,74"
                }
              },
              {
                "$type": "method",
                "name": "getXType",
                "text": "Gets the xtype for this component as registered with {@link Ext.ComponentManager}. For a list of all available\nxtypes, see the {@link Ext.Component} header. Example usage:\n\n    var t = new Ext.form.field.Text();\n    alert(t.getXType());  // alerts 'textfield'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The xtype\n",
                    "type": "String",
                    "src": {
                      "text": "3,3578,25,10",
                      "type": "3,3578,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3580,0",
                  "text": "3,3572,8,261"
                }
              },
              {
                "$type": "method",
                "name": "getXTypes",
                "since": "2.3.0",
                "text": "Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all available xtypes, see the\n{@link Ext.Component} header.\n\n**If using your own subclasses, be aware that a Component must register its own xtype to participate in\ndetermination of inherited xtypes.**\n\nExample usage:\n\n    @example\n    var t = new Ext.form.field.Text();\n    alert(t.getXTypes());  // alerts 'component/field/textfield'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The xtype hierarchy string\n",
                    "type": "String",
                    "src": {
                      "text": "3,3597,25,27",
                      "type": "3,3597,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3601,0",
                  "since": "3,3599,15",
                  "text": "3,3585,8,421"
                }
              },
              {
                "$type": "method",
                "name": "getXY",
                "text": "Gets the current position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The XY position of the element\n",
                    "type": "Number[]",
                    "src": {
                      "text": "21,87,27,31",
                      "type": "21,87,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,89,0",
                  "text": "21,86,8,72"
                }
              },
              {
                "$type": "method",
                "name": "getY",
                "text": "Gets the current Y position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The Y position of the element\n",
                    "type": "Number",
                    "src": {
                      "text": "21,95,25,30",
                      "type": "21,95,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,97,0",
                  "text": "21,94,8,74"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "ghost",
                "text": "Used for dragging.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "src": {
                      "name": "6,2279,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,2276,8",
                  "name": "6,2279,0",
                  "text": "6,2277,8,19"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "ghostTools",
                "text": "Helper function for ghost\n",
                "src": {
                  "access": "6,2336,8",
                  "name": "6,2339,0",
                  "text": "6,2337,8,26"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleBlurEvent",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "11,734,0"
                    }
                  }
                ],
                "src": {
                  "access": "11,732,12",
                  "name": "11,734,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleFocusEvent",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "11,712,0"
                    }
                  }
                ],
                "src": {
                  "access": "11,710,12",
                  "name": "11,712,0"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Replaced by {@link #getActiveAnimation}\n",
                "deprecatedVersion": "4.0",
                "inheritdoc": "Ext.util.Animate#getActiveAnimation",
                "name": "hasActiveFx",
                "src": {
                  "deprecatedMessage": "23,360,8",
                  "deprecatedVersion": "23,360,8",
                  "inheritdoc": "23,361,8",
                  "name": "23,364,0"
                }
              },
              {
                "$type": "method",
                "name": "hasCls",
                "text": "Checks if the specified CSS class exists on this element's DOM node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The CSS class to check for.\n",
                    "type": "String",
                    "src": {
                      "name": "3,3628,24",
                      "text": "3,3628,34,28",
                      "type": "3,3628,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the class exists, else `false`.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3629,26,42",
                      "type": "3,3629,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3632,0",
                  "text": "3,3627,8,69"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "20,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "20,1515,12",
                  "name": "20,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "13,1334,27",
                      "text": "13,1334,37,35",
                      "type": "13,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "13,1335,29,67",
                      "type": "13,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,1337,0",
                  "text": "13,1331,11,161"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "26,100,20",
                      "text": "26,100,25,34",
                      "type": "26,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "26,101,22,57:26,102,4,15",
                      "type": "26,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "26,53,12",
                  "text": "26,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "hasUICls",
                "text": "Checks if there is currently a specified `{@link #cfg!uiCls uiCls}`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "The `{@link #cfg!cls cls}` to check.\n",
                    "type": "String",
                    "src": {
                      "name": "3,3639,24",
                      "text": "3,3639,28,20",
                      "type": "3,3639,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,3641,0",
                  "text": "3,3638,8,50"
                }
              },
              {
                "$type": "method",
                "name": "hide",
                "text": "Hides this Component, setting it to invisible using the configured {@link #cfg!hideMode #hideMode}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "text": "**only valid for {@link #cfg!floating #cfg-floating} Components\nsuch as {@link Ext.window.Window}s or {@link Ext.tip.ToolTip}s, or regular Components which have\nbeen configured with `floating: true`.**. The target to which the Component should animate while hiding.\n",
                    "type": "String/Ext.dom.Element/Ext.Component",
                    "value": "null",
                    "src": {
                      "name": "3,3650,55",
                      "text": "3,3650,75,50:3,3651,8,217",
                      "type": "3,3650,16",
                      "value": "3,3650,69"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "A callback function to call after the Component is hidden.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,3653,27",
                      "text": "3,3653,37,59",
                      "type": "3,3653,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the callback is executed.\nDefaults to this Component.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,3654,25",
                      "text": "3,3654,32,64:3,3655,8,28",
                      "type": "3,3654,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,3656,32,5",
                      "type": "3,3656,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3658,0",
                  "text": "3,3649,8,86"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initBindable",
                "since": "5.0.0",
                "text": "This method triggers the lazy configs and must be called when it is time to\nfully boot up. The configs that must be initialized are: `{@link #cfg!bind bind}`, `{@link #cfg!publishes publishes}`,\n`{@link #cfg!session session}`, `{@link #cfg!twoWayBindable twoWayBindable}` and `{@link #cfg!viewModel viewModel}`.\n",
                "src": {
                  "access": "8,723,12",
                  "name": "8,726,0",
                  "since": "8,724,19",
                  "text": "8,720,12,199"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initBodyStyles",
                "text": "Parses the {@link #cfg!bodyStyle #bodyStyle} config if available to create a style string that will be applied to the body element.\nThis also includes {@link #cfg!bodyPadding #bodyPadding} and {@link #cfg!bodyBorder #bodyBorder} if available.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A CSS style string with body styles, padding and border.\n",
                    "type": "String",
                    "src": {
                      "text": "6,2383,25,57",
                      "type": "6,2383,17"
                    }
                  }
                ],
                "src": {
                  "access": "6,2384,8",
                  "name": "6,2386,0",
                  "text": "6,2381,8,195"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initComponent",
                "since": "1.1.0",
                "template": true,
                "text": "The initComponent template method is an important initialization step for a Component. It is intended to be\nimplemented by each subclass of Ext.Component to provide any needed constructor logic. The\ninitComponent method of the class being created is called first, with each initComponent method\nup the hierarchy to Ext.Component being called thereafter. This makes it easy to implement and,\nif needed, override the constructor logic of the Component at any step in the hierarchy.\n\nThe initComponent method **must** contain a call to {@link Ext.Base#callParent callParent} in order\nto ensure that the parent class' initComponent method is also called.\n\nAll config options passed to the constructor are applied to `this` before initComponent is called,\nso you can simply access them with `this.someOption`.\n\nThe following example demonstrates using a dynamic string for the text of a button at the time of\ninstantiation of the class.\n\n    Ext.define('DynamicButtonText', {\n        extend: 'Ext.button.Button',\n\n        initComponent: function() {\n            this.text = new Date();\n            this.renderTo = Ext.getBody();\n            this.callParent();\n        }\n    });\n\n    Ext.onReady(function() {\n        Ext.create('DynamicButtonText');\n    });\n",
                "src": {
                  "access": "3,3715,8",
                  "name": "3,3718,0",
                  "since": "3,3716,15",
                  "template": "3,3714,8",
                  "text": "3,3685,8,1253"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "20,1449,28",
                      "type": "20,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "20,1450,31,5",
                      "type": "20,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "20,1448,12",
                  "name": "20,1452,0",
                  "text": "20,1428,12,441"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initDraggable",
                "src": {
                  "access": "6,3767,12",
                  "name": "6,3769,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initEvents",
                "text": "Initialize any events on this component\n",
                "src": {
                  "access": "3,3749,8",
                  "name": "3,3751,0",
                  "text": "3,3748,8,40"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initFocusableElement",
                "text": "Sets up the focus listener on this Component's {@link #method!getFocusEl #getFocusEl} if it has one.\n\nForm Components which must implicitly participate in tabbing order usually have a naturally\nfocusable element as their {@link #method!getFocusEl #getFocusEl}, and it is the DOM event of that\nreceiving focus which drives the Component's `{@link #method!onFocus onFocus}` handling, and the DOM event of it\nbeing blurred which drives the `{@link #method!onBlur onBlur}` handling.\n",
                "src": {
                  "access": "11,669,12",
                  "name": "11,671,0",
                  "text": "11,663,12,410"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initFocusableEvents",
                "text": "Template method to do any event listener initialization for a Focusable.\nThis generally happens after the focusEl is available.\n",
                "src": {
                  "access": "11,81,8",
                  "name": "11,83,0",
                  "text": "11,79,8,128"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initInheritedState",
                "text": "Called by `{@link #method!getInherited getInherited}` to initialize the inheritedState the first time it is\nrequested.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "inheritedState",
                    "src": {
                      "name": "2,1324,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "inheritedStateInner",
                    "src": {
                      "name": "2,1324,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,1322,8",
                  "name": "2,1324,0",
                  "text": "2,1320,8,90"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initItems",
                "text": "This method is called to initialize the `items` collection. A derived class can\noverride this method to do any last minute manipulation of `items` and then call\nthis method using `callParent`. Upon return, the `items` will no longer be a simple\narray.\n",
                "src": {
                  "access": "2,1286,8",
                  "name": "2,1288,0",
                  "text": "2,1282,8,252"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initPadding",
                "text": "Initializes padding by applying it to the target element, or if the layout manages\npadding ensures that the padding on the target element is \"0\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetEl",
                    "src": {
                      "name": "3,6184,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6182,12",
                  "name": "3,6184,0",
                  "text": "3,6180,12,146"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initPlugin",
                "items": [
                  {
                    "$type": "param",
                    "name": "plugin",
                    "src": {
                      "name": "3,6209,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6207,12",
                  "name": "3,6209,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initRenderData",
                "text": "Initialized the renderData to be used when rendering the renderTpl.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object with keys and values that are going to be applied to the renderTpl\n",
                    "type": "Object",
                    "src": {
                      "text": "6,2450,25,74",
                      "type": "6,2450,17"
                    }
                  }
                ],
                "src": {
                  "access": "6,2451,8",
                  "name": "6,2453,0",
                  "text": "6,2449,8,68"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initRenderTpl",
                "text": "Initializes the renderTpl.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The renderTpl XTemplate instance.\n",
                    "type": "Ext.XTemplate",
                    "src": {
                      "text": "22,1393,36,34",
                      "type": "22,1393,21"
                    }
                  }
                ],
                "src": {
                  "access": "22,1394,12",
                  "name": "22,1396,0",
                  "text": "22,1392,12,27"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initSimpleDraggable",
                "text": "Override Component.initDraggable.\nPanel (and subclasses) use the header element as the delegate.\n",
                "src": {
                  "access": "6,3814,12",
                  "name": "6,3818,0",
                  "text": "6,3815,12,97"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initState",
                "text": "Initializes the state of the object upon construction.\n",
                "src": {
                  "access": "17,278,8",
                  "name": "17,280,0",
                  "text": "17,277,8,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initStyles",
                "text": "Applies padding, margin, border, top, left, height, and width configs to the\nappropriate elements.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetEl",
                    "src": {
                      "name": "3,6233,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6231,12",
                  "name": "3,6233,0",
                  "text": "3,6229,12,99"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initTools",
                "text": "Tools are a Panel-specific capability.\nPanel uses initTools. Subclasses may contribute tools by implementing addTools.\n",
                "src": {
                  "access": "6,2510,8",
                  "name": "6,2514,0",
                  "text": "6,2511,8,119"
                }
              },
              {
                "$type": "method",
                "name": "insert",
                "since": "2.3.0",
                "text": "Inserts a Component into this Container at a specified index. Fires the\n{@link #event!beforeadd #beforeadd} event before inserting, then fires the {@link #event!add #event-add}\nevent after the Component has been inserted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which the Component will be inserted\ninto the Container's items collection\n",
                    "type": "Number",
                    "src": {
                      "name": "2,1353,24",
                      "text": "2,1353,30,50:2,1354,8,39",
                      "type": "2,1353,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The child Component or config object to insert.\n\nExt uses lazy rendering, and will only render the inserted Component should\nit become necessary.\n\nA Component config object may be passed in order to avoid the overhead of\nconstructing a real Component object if lazy rendering might mean that the\ninserted Component will not be rendered immediately. To take advantage of\nthis 'lazy instantiation', set the {@link Ext.Component#cfg!xtype Ext.Component#xtype} config\nproperty to the registered type of the Component wanted.\n\nYou can pass an array of Component instances and config objects.\n\nFor a list of all available xtypes, see {@link Ext.enums.Widget}.\n",
                    "type": "Ext.Component/Object/Ext.Component[]/Object[]",
                    "src": {
                      "name": "2,1356,63",
                      "text": "2,1356,73,48:2,1357,8,583",
                      "type": "2,1356,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "component The Component (or config object) that was\ninserted with the Container's default config values applied.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "2,1371,32,52:2,1372,8,62",
                      "type": "2,1371,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1376,0",
                  "since": "2,1374,15",
                  "text": "2,1349,8,195"
                }
              },
              {
                "$type": "method",
                "name": "insertDocked",
                "text": "Inserts docked item(s) to the panel at the indicated position.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pos",
                    "text": "The index at which the Component will be inserted\n",
                    "type": "Number",
                    "src": {
                      "name": "9,298,24",
                      "text": "9,298,28,50",
                      "type": "9,298,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "items",
                    "text": "The Component or array of components to add. The components\nmust include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right',\n'bottom', 'left').\n",
                    "type": "Object/Object[]",
                    "src": {
                      "name": "9,299,33",
                      "text": "9,299,39,60:9,300,8,124",
                      "type": "9,299,16"
                    }
                  }
                ],
                "src": {
                  "name": "9,303,0",
                  "text": "9,297,8,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "invalidateInheritedState",
                "since": "5.0.0",
                "text": "This method marks the current inherited state as invalid. The next time a call is\nmade to `{@link #method!getInherited getInherited}` the objects will be recreated and initialized.\n",
                "src": {
                  "access": "25,310,8",
                  "name": "25,313,0",
                  "since": "25,311,15",
                  "text": "25,308,8,152"
                }
              },
              {
                "$type": "method",
                "name": "is",
                "text": "Tests whether this Component matches a {@link Ext.ComponentQuery}\nselector string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector string to test against.\n",
                    "type": "String",
                    "src": {
                      "name": "3,3778,24",
                      "text": "3,3778,33,37",
                      "type": "3,3778,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this Component matches the selector.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3779,26,47",
                      "type": "3,3779,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3781,0",
                  "text": "3,3776,8,98"
                }
              },
              {
                "$type": "method",
                "name": "isAncestor",
                "text": "Determines whether **this Component** is an ancestor of the passed Component.\nThis will return `true` if the passed Component is anywhere within the subtree\nbeneath this Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "possibleDescendant",
                    "text": "The Component to test for presence\nwithin this Component's subtree.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,3804,31",
                      "text": "3,3804,50,35:3,3805,8,33",
                      "type": "3,3804,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,3807,0",
                  "text": "3,3801,8,181"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isBlurring",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "11,772,0"
                    }
                  }
                ],
                "src": {
                  "access": "11,770,12",
                  "name": "11,772,0"
                }
              },
              {
                "$type": "method",
                "name": "isDescendantOf",
                "text": "Determines whether this component is the descendant of a passed component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ancestor",
                    "text": "A Component which may contain this Component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,3787,31",
                      "text": "3,3787,40,46",
                      "type": "3,3787,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the component is the descendant of the passed component, otherwise `false`.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3788,26,86",
                      "type": "3,3788,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3790,0",
                  "text": "3,3786,8,75"
                }
              },
              {
                "$type": "method",
                "name": "isDisabled",
                "text": "Method to determine whether this Component is currently disabled.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the disabled state of this Component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3818,26,38",
                      "type": "3,3818,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3820,0",
                  "text": "3,3817,8,66"
                }
              },
              {
                "$type": "method",
                "name": "isDraggable",
                "text": "Method to determine whether this Component is draggable.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the draggable state of this component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3826,26,39",
                      "type": "3,3826,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3828,0",
                  "text": "3,3825,8,57"
                }
              },
              {
                "$type": "method",
                "name": "isDroppable",
                "text": "Method to determine whether this Component is droppable.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the droppable state of this component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3834,26,39",
                      "type": "3,3834,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3836,0",
                  "text": "3,3833,8,57"
                }
              },
              {
                "$type": "method",
                "name": "isFloating",
                "text": "Method to determine whether this Component is floating.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the floating state of this component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3842,26,38",
                      "type": "3,3842,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3844,0",
                  "text": "3,3841,8,56"
                }
              },
              {
                "$type": "method",
                "name": "isFocusable",
                "text": "Determine if this Focusable can receive focus at this time.\n\nNote that Containers can be non-focusable themselves while delegating\nfocus treatment to a child Component; see\n{@link Ext.container.Container} for more information.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "Optionally determine if the container itself\nis focusable, or if container's focus is delegated to a child component\nand that child is focusable.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "11,156,26",
                      "text": "11,156,38,45:11,157,8,102",
                      "type": "11,156,16",
                      "value": "11,156,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if component is focusable, false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "11,160,26,46",
                      "type": "11,160,17"
                    }
                  }
                ],
                "src": {
                  "name": "11,162,0",
                  "text": "11,150,8,242"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isFocusing",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "11,750,0"
                    }
                  }
                ],
                "src": {
                  "access": "11,748,12",
                  "name": "11,750,0"
                }
              },
              {
                "$type": "method",
                "name": "isHidden",
                "text": "Method to determine whether this Component is currently set to hidden.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the hidden state of this Component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3850,26,36",
                      "type": "3,3850,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3852,0",
                  "text": "3,3849,8,71"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isLayoutChild",
                "text": "Checks if this component will be contained by the passed component as part of its\nlayout run. If `true`, then the layout on `this` can be skipped because it will be\nencompassed when the layout for `comp` runs. Typical cases where this may be be `false`\nis when asking about floaters nested in containers.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "comp",
                    "text": "The potential owner.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,3897,31",
                      "text": "3,3897,36,21",
                      "type": "3,3897,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this component is a layout child of `comp`.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3898,26,54",
                      "type": "3,3898,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,3900,8",
                  "name": "3,3902,0",
                  "text": "3,3893,8,305"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "isLayoutRoot",
                "text": "Determines whether this Component is the root of a layout. This returns `true` if\nthis component can run its layout without assistance from or impact on its owner.\nIf this component cannot run its layout given these restrictions, `false` is returned\nand its owner will be considered as the next candidate for the layout root.\n\nSetting the {@link #property!_isLayoutRoot #_isLayoutRoot} property to `true` causes this method to always\nreturn `true`. This may be useful when updating a layout of a Container which shrink\nwraps content, and you know that it will not change size, and so can safely be the\ntopmost participant in the layout run.\n",
                "src": {
                  "access": "3,3916,8",
                  "name": "3,3918,0",
                  "text": "3,3907,8,617"
                }
              },
              {
                "$type": "method",
                "name": "isLayoutSuspended",
                "text": "Returns `true` if layout is suspended for this component. This can come from direct\nsuspension of this component's layout activity ({@link Ext.container.Container#cfg!suspendLayout Ext.Container#suspendLayout}) or if one\nof this component's containers is suspended.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` layout of this component is suspended.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3938,26,46",
                      "type": "3,3938,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3940,0",
                  "text": "3,3934,8,225"
                }
              },
              {
                "$type": "method",
                "name": "isMasked",
                "text": "Returns masked state for this Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "True to look up this Component's parent masked state.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,4023,26",
                      "text": "3,4023,38,54",
                      "type": "3,4023,16",
                      "value": "3,4023,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if masked, false otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,4025,26,33",
                      "type": "3,4025,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4027,0",
                  "text": "3,4021,8,42"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "26,148,20",
                      "text": "26,148,30,71:26,149,4,18",
                      "type": "26,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "26,150,20",
                      "text": "26,150,27,50",
                      "type": "26,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "26,151,22,56",
                      "type": "26,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "26,106,12",
                  "text": "26,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "13,1344,29",
                      "text": "13,1344,36,40",
                      "type": "13,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "13,1345,30,31",
                      "type": "13,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "13,1347,0",
                  "text": "13,1343,12,57"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isSyncing",
                "text": "Checks if a particular binding is synchronizing the value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property being bound to.\n",
                    "type": "String",
                    "src": {
                      "name": "8,770,28",
                      "text": "8,770,33,41",
                      "type": "8,770,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the binding is syncing.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "8,771,30,34",
                      "type": "8,771,21"
                    }
                  }
                ],
                "src": {
                  "access": "8,499,-1",
                  "name": "8,775,0",
                  "text": "8,769,12,59"
                }
              },
              {
                "$type": "method",
                "name": "isVisible",
                "since": "1.1.0",
                "text": "Returns `true` if this component is visible.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "Pass `true` to interrogate the visibility status of all parent Containers to\ndetermine whether this Component is truly visible to the user.\n\nGenerally, to determine whether a Component is hidden, the no argument form is needed. For example when creating\ndynamically laid out UIs in a hidden Container before showing them.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,3968,26",
                      "text": "3,3968,38,77:3,3969,8,246",
                      "type": "3,3968,16",
                      "value": "3,3968,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this component is visible, `false` otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3974,26,56",
                      "type": "3,3974,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3978,0",
                  "since": "3,3976,15",
                  "text": "3,3966,8,46"
                }
              },
              {
                "$type": "method",
                "name": "isXType",
                "since": "2.3.0",
                "text": "Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended\nfrom the xtype (default) or whether it is directly of the xtype specified (`shallow = true`).\n\n**If using your own subclasses, be aware that a Component must register its own xtype to participate in\ndetermination of inherited xtypes.**\n\nFor a list of all available xtypes, see the {@link Ext.Component} header.\n\nExample usage:\n\n    @example\n    var t = new Ext.form.field.Text();\n    var isText = t.isXType('textfield');        // true\n    var isBoxSubclass = t.isXType('field');       // true, descended from Ext.form.field.Base\n    var isBoxInstance = t.isXType('field', true); // false, not a direct Ext.form.field.Base instance\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xtype",
                    "text": "The xtype to check for this Component\n",
                    "type": "String",
                    "src": {
                      "name": "3,4008,24",
                      "text": "3,4008,30,38",
                      "type": "3,4008,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "shallow",
                    "optional": true,
                    "text": "`true` to check whether this Component is directly of the specified xtype, `false` to\ncheck whether this Component is descended from the xtype.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,4009,26",
                      "text": "3,4009,41,86:3,4010,8,58",
                      "type": "3,4009,16",
                      "value": "3,4009,34"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this component descends from the specified xtype, `false` otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,4011,26,79",
                      "type": "3,4011,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4015,0",
                  "since": "3,4013,15",
                  "text": "3,3992,8,743"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "20,1571,28",
                      "type": "20,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "20,1572,28",
                      "type": "20,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "20,1573,29,20",
                      "type": "20,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "20,1574,12",
                  "name": "20,1576,0",
                  "text": "20,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "lookup",
                "since": "6.0.1",
                "text": "Gets a reference to the component with the specified {@link #cfg!reference #reference} value.\n\nThe method is a short-hand for the {@link #method!lookupReference #lookupReference} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The name of the reference to lookup.\n",
                    "type": "String",
                    "src": {
                      "name": "16,67,24",
                      "text": "16,67,28,37",
                      "type": "16,67,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The referenced component or `{@link null}` if it is not found.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "16,68,32,55",
                      "type": "16,68,17"
                    }
                  }
                ],
                "src": {
                  "name": "16,71,0",
                  "since": "16,69,15",
                  "text": "16,63,8,149"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "lookupComponent",
                "text": "Called when a raw config object is added to this container either during initialization of the {@link #cfg!items #cfg-items} config,\nor when new items are {@link #method!add #method-add}, or {@link #method!insert #method-insert}.\n\nThis method converts the passed object into an instanced child component.\n\nThis may be overridden in subclasses when special processing needs to be applied to child creation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The config object being added.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1396,24",
                      "text": "2,1396,29,31",
                      "type": "2,1396,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The component to be added.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "2,1397,32,27",
                      "type": "2,1397,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,1388,8",
                  "name": "2,1399,0",
                  "text": "2,1389,8,384"
                }
              },
              {
                "$type": "method",
                "name": "lookupController",
                "since": "5.0.1",
                "text": "Gets the controller that controls this view. May be a controller that belongs\nto a view higher in the hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "`true` to not consider the controller directly attached\nto this view (if it exists).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "8,360,26",
                      "text": "8,360,42,56:8,361,8,29",
                      "type": "8,360,16",
                      "value": "8,360,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The controller. `{@link null}` if no controller is found.\n",
                    "type": "Ext.app.ViewController",
                    "src": {
                      "text": "8,362,41,50",
                      "type": "8,362,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,366,0",
                  "since": "8,364,15",
                  "text": "8,357,8,114"
                }
              },
              {
                "$type": "method",
                "name": "lookupReference",
                "since": "5.0",
                "text": "Gets a reference to the component with the specified {@link #cfg!reference #reference} value.\n\nThe {@link #method!lookup #lookup} method is a short-hand version of this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The name of the reference to lookup.\n",
                    "type": "String",
                    "src": {
                      "name": "16,81,24",
                      "text": "16,81,28,37",
                      "type": "16,81,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The referenced component or `{@link null}` if it is not found.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "16,82,32,55",
                      "type": "16,82,17"
                    }
                  }
                ],
                "src": {
                  "name": "16,85,0",
                  "since": "16,83,15",
                  "text": "16,77,8,148"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "lookupReferenceHolder",
                "since": "5.0.0",
                "text": "Gets the Controller or Component that is used as the reference holder for this view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "`false` to return this as the reference holder if\nthis instance has set `{@link #cfg!referenceHolder referenceHolder}`. Unlike `{@link #method!getInheritedConfig getInheritedConfig}` this method\ndefaults to `true` because it is possible that a `{@link #cfg!reference reference}` property set by the\nowner of a component that is also a `{@link #cfg!referenceHolder referenceHolder}` itself. In this case, the\n`{@link #cfg!reference reference}` connects not to this component but to the parent referenceHolder.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "25,261,26",
                      "text": "25,261,41,50:25,262,8,321",
                      "type": "25,261,16",
                      "value": "25,261,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The reference holder.\n",
                    "type": "Ext.app.ViewController/Ext.container.Container",
                    "src": {
                      "text": "25,267,65,22",
                      "type": "25,267,17"
                    }
                  }
                ],
                "src": {
                  "access": "25,269,8",
                  "name": "25,272,0",
                  "since": "25,270,15",
                  "text": "25,259,8,86"
                }
              },
              {
                "$type": "method",
                "name": "lookupSession",
                "since": "5.0.0",
                "text": "Returns the `{@link Ext.data.Session}` for this instance. This property may come\nfrom this instance's `{@link #cfg!session #session}` or be inherited from this object's parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` to ignore a `{@link #cfg!session session}` configured on\nthis instance and only consider an inherited session.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "8,373,26",
                      "text": "8,373,42,48:8,374,8,54",
                      "type": "8,373,16",
                      "value": "8,373,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Session",
                    "src": {
                      "type": "8,375,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,378,0",
                  "since": "8,376,15",
                  "text": "8,371,8,156"
                }
              },
              {
                "$type": "method",
                "name": "lookupViewModel",
                "since": "5.0.0",
                "text": "Returns the `{@link Ext.app.ViewModel}` for this instance. This property may come from this\nthis instance's `{@link #cfg!viewModel #viewModel}` or be inherited from this object's parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` to ignore a `{@link #cfg!viewModel viewModel}` configured on\nthis instance and only consider an inherited view model.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "8,394,26",
                      "text": "8,394,42,50:8,395,8,57",
                      "type": "8,394,16",
                      "value": "8,394,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "type": "8,396,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,399,0",
                  "since": "8,397,15",
                  "text": "8,392,8,164"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "makeBindableUpdater",
                "since": "5.0.0",
                "text": "Returns an `{@link #method!update update}` method for the given Config that will call `{@link #method!publishState #publishState}`\nto ensure two-way bindings (via `{@link #cfg!bind bind}`) as well as any `{@link #cfg!publishes publishes}` are updated.\nThis method is cached on the `cfg` instance for re-use.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cfg",
                    "type": "Ext.Config",
                    "src": {
                      "name": "8,749,32",
                      "type": "8,749,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The updater function.\n",
                    "type": "Function",
                    "src": {
                      "text": "8,750,31,22",
                      "type": "8,750,21"
                    }
                  }
                ],
                "src": {
                  "access": "8,751,12",
                  "name": "8,754,0",
                  "since": "8,752,19",
                  "text": "8,746,12,223"
                }
              },
              {
                "$type": "method",
                "name": "mask",
                "text": "Masks this component with a semi-opaque layer and makes the contents unavailable to clicks.\n\nSee {@link #method!unmask #unmask}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "msg",
                    "optional": true,
                    "text": "A message to show in the center of the mask layer.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4064,25",
                      "text": "3,4064,30,51",
                      "type": "3,4064,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "msgCls",
                    "optional": true,
                    "text": "A CSS class name to use on the message element in the center of the layer.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4065,25",
                      "text": "3,4065,33,75",
                      "type": "3,4065,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4067,0",
                  "text": "3,4060,8,115"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for {@link #method!addManagedListener #addManagedListener}.\n",
                "src": {
                  "inheritdoc": "13,1787,12",
                  "name": "13,1789,0",
                  "text": "13,1786,12,43"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use `{@link #moveBefore}` or `{@link #moveAfter}` instead.\n",
                "deprecatedVersion": "5.0",
                "name": "move",
                "text": "Moves a Component within the Container. This method does **not** account for things\nlike splitter components added by a layout. To better handle these situations, it\nis recommended to use `{@link #method!moveBefore #moveBefore}` or `{@link #method!moveAfter #moveAfter}` instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromIdx",
                    "text": "The index/component to move.\n",
                    "type": "Number/Ext.Component",
                    "src": {
                      "name": "2,1416,38",
                      "text": "2,1416,46,29",
                      "type": "2,1416,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "toIdx",
                    "text": "The new index for the Component.\n",
                    "type": "Number",
                    "src": {
                      "name": "2,1417,24",
                      "text": "2,1417,30,33",
                      "type": "2,1417,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "component The Component that was moved.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "2,1418,32,40",
                      "type": "2,1418,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "2,1419,8",
                  "deprecatedVersion": "2,1419,8",
                  "name": "2,1421,0",
                  "text": "2,1412,8,244"
                }
              },
              {
                "$type": "method",
                "name": "moveAfter",
                "since": "5.0.0",
                "text": "Moves the given `item(s)` into this container following `after`. This method will\naccount for layout-generated components like splitters and should be used instead\nof index based `{@link #method!move #method-move}`. If `after` is `{@link null}` then the `item` will be the\nfirst item in this container.\n\n    var tb = Ext.create({\n        xtype: 'toolbar',\n        renderTo: Ext.getBody(),\n        items: [{\n            text: 'one'\n        }, {\n            text: 'two'\n        }]\n    });\n\n    // moves the 'one' button after the 'two' button\n    tb.moveAfter(tb.getComponent(0), tb.getComponent(1));\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to move. May be a component,\ncomponent configuration object, or an array of either.\n",
                    "type": "Ext.Component/Ext.Component[]",
                    "src": {
                      "name": "2,1497,47",
                      "text": "2,1497,52,38:2,1498,8,55",
                      "type": "2,1497,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "after",
                    "text": "The reference component. May be `{@link null}`.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,1499,31",
                      "text": "2,1499,37,40",
                      "type": "2,1499,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The moved item(s).\n",
                    "type": "Ext.Component/Ext.Component[]",
                    "src": {
                      "text": "2,1500,48,19",
                      "type": "2,1500,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1503,0",
                  "since": "2,1501,15",
                  "text": "2,1479,8,579"
                }
              },
              {
                "$type": "method",
                "name": "moveBefore",
                "since": "5.0.0",
                "text": "Moves the given `item(s)` into this container in front of `before`. This method\nwill account for layout-generated components like splitters and should be used\ninstead of index based `{@link #method!move #method-move}`. If `before` is `{@link null}` then the\n`item` will be the last item in this container.\n\n    var tb = Ext.create({\n        xtype: 'toolbar',\n        renderTo: Ext.getBody(),\n        items: [{\n            text: 'one'\n        }, {\n            text: 'two'\n        }]\n    });\n\n    // moves the 'two' button before the 'one' button\n    tb.moveBefore(tb.getComponent(1), tb.getComponent(0));\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to move. May be a component,\ncomponent configuration object, or an array of either.\n",
                    "type": "Ext.Component/Ext.Component[]",
                    "src": {
                      "name": "2,1465,47",
                      "text": "2,1465,52,38:2,1466,8,55",
                      "type": "2,1465,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "before",
                    "text": "The reference component. May be `{@link null}`.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,1467,31",
                      "text": "2,1467,38,40",
                      "type": "2,1467,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The moved item(s).\n",
                    "type": "Ext.Component/Ext.Component[]",
                    "src": {
                      "text": "2,1468,48,19",
                      "type": "2,1468,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1471,0",
                  "since": "2,1469,15",
                  "text": "2,1447,8,584"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "moveDocked",
                "text": "Moves a docked item to a different side.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.Component",
                    "src": {
                      "name": "9,375,31",
                      "type": "9,375,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "side",
                    "type": "'top'/'right'/'bottom'/'left'",
                    "src": {
                      "name": "9,376,47",
                      "type": "9,376,16"
                    }
                  }
                ],
                "src": {
                  "access": "9,377,8",
                  "name": "9,379,0",
                  "text": "9,374,8,41"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for {@link #method!removeManagedListener #removeManagedListener}.\n",
                "src": {
                  "inheritdoc": "13,1793,12",
                  "name": "13,1795,0",
                  "text": "13,1792,12,46"
                }
              },
              {
                "$type": "method",
                "name": "nextChild",
                "text": "A method to find a child component after the passed child parameter. If a selector is also provided,\nthe first child component matching the selector will be returned.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "text": "The child to use as a starting point to find the next child.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,1518,31",
                      "text": "2,1518,37,61",
                      "type": "2,1518,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to find the next child. This will return the next child matching this selector. This parameter is optional.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1519,25",
                      "text": "2,1519,35,146",
                      "type": "2,1519,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The next child found, `{@link null}` if no child found.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "2,1520,32,48",
                      "type": "2,1520,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1522,0",
                  "text": "2,1515,8,168"
                }
              },
              {
                "$type": "method",
                "name": "nextNode",
                "text": "Returns the next node in the Component tree in tree traversal order.\n\nNote that this is not limited to siblings, and if invoked upon a node with no matching siblings, will walk the\ntree to attempt to find a match. Contrast with {@link #method!nextSibling #nextSibling}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to filter the following nodes.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4088,25",
                      "text": "3,4088,35,84",
                      "type": "3,4088,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The next node (or the next node which matches the selector).\nReturns `{@link null}` if there is no matching node.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4089,32,61:3,4090,8,45",
                      "type": "3,4089,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4092,0",
                  "text": "3,4084,8,250"
                }
              },
              {
                "$type": "method",
                "name": "nextSibling",
                "text": "Returns the next sibling of this Component.\n\nOptionally selects the next sibling which matches the passed {@link Ext.ComponentQuery} selector.\n\nMay also be referred to as **`next()`**\n\nNote that this is limited to siblings, and if no siblings of the item match, `{@link null}` is returned. Contrast with\n{@link #method!nextNode #nextNode}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to filter the following items.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4130,25",
                      "text": "3,4130,35,84",
                      "type": "3,4130,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The next sibling (or the next sibling which matches the selector).\nReturns `{@link null}` if there is no matching sibling.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4131,32,67:3,4132,8,48",
                      "type": "3,4131,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4134,0",
                  "text": "3,4122,8,329"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "13,1775,12",
                  "name": "13,1777,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onAdd",
                "template": true,
                "text": "This method is invoked after a new Component has been added. It\nis passed the Component which has been added. This method may\nbe used to update any internal structure which may depend upon\nthe state of the child items.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,1553,31",
                      "type": "2,1553,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "type": "Number",
                    "src": {
                      "name": "2,1554,24",
                      "type": "2,1554,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,1557,8",
                  "name": "2,1559,0",
                  "template": "2,1556,8",
                  "text": "2,1548,8,220"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onAdded",
                "since": "3.4.0",
                "template": true,
                "text": "Method to manage awareness of when components are added to their\nrespective Container, firing an #added event. References are\nestablished at add time rather than at render time.\n\nAllows addition of behavior when a Component is added to a\nContainer. At this stage, the Component is in the parent\nContainer's collection of child items. After calling the\nsuperclass's `{@link #method!onAdded onAdded}`, the `{@link #property!ownerCt ownerCt}` reference will be present,\nand if configured with a ref, the `refOwner` will be set.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "container",
                    "text": "Container which holds the component.\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "3,4167,41",
                      "text": "3,4167,51,37",
                      "type": "3,4167,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "pos",
                    "text": "Position at which the component was added.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4168,24",
                      "text": "3,4168,28,43",
                      "type": "3,4168,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "instanced",
                    "text": "`false` if this component was instanced by the parent\ncontainer. `true` if the instance already existed when it was passed to the container.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,4169,25",
                      "text": "3,4169,35,54:3,4170,8,88",
                      "type": "3,4169,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4173,8",
                  "name": "3,4176,0",
                  "since": "3,4174,15",
                  "template": "3,4172,8",
                  "text": "3,4157,8,476"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "13,1190,44",
                      "text": "13,1190,54,37",
                      "type": "13,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "13,1191,37",
                      "text": "13,1191,40,30",
                      "type": "13,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1192,29",
                      "text": "13,1192,36,20",
                      "type": "13,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1193,29",
                      "text": "13,1193,38,44",
                      "type": "13,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,1195,0",
                  "text": "13,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "13,1175,44",
                      "text": "13,1175,54,37",
                      "type": "13,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "13,1176,37",
                      "text": "13,1176,40,30",
                      "type": "13,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1177,29",
                      "text": "13,1177,36,20",
                      "type": "13,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1178,29",
                      "text": "13,1178,38,44",
                      "type": "13,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,1180,0",
                  "text": "13,1170,12,183"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onBeforeAdd",
                "template": true,
                "text": "This method is invoked before adding a new child Component. It\nis passed the new Component, and may be used to modify the\nComponent, or prepare the Container in some way. Returning\nfalse aborts the add operation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,1567,31",
                      "type": "2,1567,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,1570,8",
                  "name": "2,1572,0",
                  "template": "2,1569,8",
                  "text": "2,1562,8,214"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onBlur",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "11,317,0"
                    }
                  }
                ],
                "src": {
                  "access": "11,315,8",
                  "name": "11,317,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onBoxReady",
                "template": true,
                "text": "Invoked when this component has first achieved size. Occurs after the\n{@link #cfg!componentLayout #componentLayout} has completed its initial run.\n\nThis method is not called on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n\n**Note:** If the Component has a {@link Ext.Component#cfg!controller Ext.Component#controller}\nand the controller has a {@link Ext.app.ViewController#method!boxReady Ext.app.ViewController#boxReady} method\nit will be called passing the Component as the single param.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The width of this component\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4244,24",
                      "text": "3,4244,30,28",
                      "type": "3,4244,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The height of this component\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4245,24",
                      "text": "3,4245,31,29",
                      "type": "3,4245,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4248,8",
                  "name": "3,4250,0",
                  "template": "3,4247,8",
                  "text": "3,4234,8,511"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onDataChanged",
                "src": {
                  "access": "5,1570,8",
                  "name": "5,1572,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onDestroy",
                "template": true,
                "text": "Allows addition of behavior to the destroy operation.\nAfter calling the superclass's onDestroy, the Component will be destroyed.\n",
                "src": {
                  "access": "3,4295,8",
                  "name": "3,4297,0",
                  "template": "3,4294,8",
                  "text": "3,4291,8,130"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onDisable",
                "template": true,
                "text": "Allows addition of behavior to the disable operation.\nAfter calling the superclass's `{@link #method!onDisable onDisable}`, the Component will be disabled.\n",
                "src": {
                  "access": "3,4335,8",
                  "name": "3,4337,0",
                  "template": "3,4334,8",
                  "text": "3,4331,8,131"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onDockedAdd",
                "template": true,
                "text": "Invoked after a docked item is added to the Panel.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "type": "Ext.Component",
                    "src": {
                      "name": "9,311,31",
                      "type": "9,311,16"
                    }
                  }
                ],
                "src": {
                  "access": "9,313,8",
                  "name": "9,315,0",
                  "template": "9,312,8",
                  "text": "9,310,8,51"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onDockedRemove",
                "template": true,
                "text": "Invoked after a docked item is removed from the Panel.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "type": "Ext.Component",
                    "src": {
                      "name": "9,319,31",
                      "type": "9,319,16"
                    }
                  }
                ],
                "src": {
                  "access": "9,321,8",
                  "name": "9,323,0",
                  "template": "9,320,8",
                  "text": "9,318,8,55"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onEnable",
                "template": true,
                "text": "Allows addition of behavior to the enable operation.\nAfter calling the superclass's `{@link #method!onEnable onEnable}`, the Component will be enabled.\n",
                "src": {
                  "access": "3,4369,8",
                  "name": "3,4371,0",
                  "template": "3,4368,8",
                  "text": "3,4365,8,128"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onFocus",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "11,371,0"
                    }
                  }
                ],
                "src": {
                  "access": "11,369,8",
                  "name": "11,371,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onFocusEnter",
                "template": true,
                "text": "Called when focus enters this Component's hierarchy\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "event",
                        "text": "The underlying DOM event.\n",
                        "type": "Ext.event.Event",
                        "src": {
                          "name": "11,501,35",
                          "text": "11,501,41,26",
                          "type": "11,501,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "The element gaining focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "11,502,31",
                          "text": "11,502,38,27",
                          "type": "11,502,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "relatedTarget",
                        "text": "The element losing focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "11,503,31",
                          "text": "11,503,45,26",
                          "type": "11,503,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "toComponent",
                        "text": "The Component gaining focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "11,504,33",
                          "text": "11,504,45,29",
                          "type": "11,504,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "fromComponent",
                        "text": "The Component losing focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "11,505,33",
                          "text": "11,505,47,28",
                          "type": "11,505,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "11,500,24",
                      "type": "11,500,16"
                    }
                  }
                ],
                "src": {
                  "access": "11,498,8",
                  "name": "11,507,0",
                  "template": "11,497,8",
                  "text": "11,499,8,52"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onFocusLeave",
                "template": true,
                "text": "Called when focus exits from this Component's hierarchy\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "items": [
                      {
                        "$type": "property",
                        "name": "event",
                        "text": "The underlying DOM event.\n",
                        "type": "Ext.event.Event",
                        "src": {
                          "name": "11,529,35",
                          "text": "11,529,41,26",
                          "type": "11,529,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "The element gaining focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "11,530,31",
                          "text": "11,530,38,27",
                          "type": "11,530,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "relatedTarget",
                        "text": "The element losing focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "11,531,31",
                          "text": "11,531,45,26",
                          "type": "11,531,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "toComponent",
                        "text": "The Component gaining focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "11,532,33",
                          "text": "11,532,45,29",
                          "type": "11,532,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "fromComponent",
                        "text": "The Component losing focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "11,533,33",
                          "text": "11,533,47,28",
                          "type": "11,533,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "11,528,33",
                      "type": "11,528,16"
                    }
                  }
                ],
                "src": {
                  "access": "11,526,8",
                  "name": "11,535,0",
                  "template": "11,525,8",
                  "text": "11,527,8,56"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onHide",
                "template": true,
                "text": "Allows addition of behavior to the hide operation. After\ncalling the superclass's onHide, the Component will be hidden.\n\nGets passed the same parameters as #hide.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "type": "String/Ext.dom.Element/Ext.Component",
                    "src": {
                      "name": "3,4409,55",
                      "type": "3,4409,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,4410,27",
                      "type": "3,4410,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,4411,25",
                      "type": "3,4411,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4414,8",
                  "name": "3,4416,0",
                  "template": "3,4413,8",
                  "text": "3,4404,8,164"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onInheritedAdd",
                "text": "Called when this Inheritable is added to a parent\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "instanced",
                    "type": "Boolean",
                    "src": {
                      "name": "25,351,29",
                      "type": "25,351,20"
                    }
                  }
                ],
                "src": {
                  "access": "25,330,-1",
                  "name": "25,353,0",
                  "text": "25,350,12,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onInheritedRemove",
                "text": "Called when this inheritable is removed from a parent\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "destroying",
                    "text": "`true` if this item will be destroyed by it's container\n",
                    "type": "Boolean",
                    "src": {
                      "name": "25,369,29",
                      "text": "25,369,40,56",
                      "type": "25,369,20"
                    }
                  }
                ],
                "src": {
                  "access": "25,330,-1",
                  "name": "25,371,0",
                  "text": "25,368,12,54"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onMouseDown",
                "text": "Mousedown brings to front, and programmatically grabs focus\nunless the mousedown was on a focusable element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,283,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,279,8",
                  "name": "1,283,0",
                  "text": "1,280,8,108"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onPosition",
                "template": true,
                "text": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new x position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4470,24",
                      "text": "3,4470,26,20",
                      "type": "3,4470,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The new y position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4471,24",
                      "text": "3,4471,26,20",
                      "type": "3,4471,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4474,8",
                  "name": "3,4476,0",
                  "template": "3,4473,8",
                  "text": "3,4467,8,165"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onRemove",
                "template": true,
                "text": "This method is invoked after a new Component has been\nremoved. It is passed the Component which has been\nremoved. This method may be used to update any internal\nstructure which may depend upon the state of the child items.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,1589,31",
                      "type": "2,1589,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "autoDestroy",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1590,25",
                      "type": "2,1590,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,1593,8",
                  "name": "2,1595,0",
                  "template": "2,1592,8",
                  "text": "2,1584,8,224"
                }
              },
              {
                "$type": "method",
                "inheritdoc": true,
                "name": "onRemoved",
                "items": [
                  {
                    "$type": "param",
                    "name": "destroying",
                    "src": {
                      "name": "6,2687,0"
                    }
                  }
                ],
                "src": {
                  "inheritdoc": "6,2685,8",
                  "name": "6,2687,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onRender",
                "template": true,
                "text": "Template method called when this Component's DOM structure is created.\n\nAt this point, this Component's (and all descendants') DOM structure *exists* but it has not\nbeen layed out (positioned and sized).\n\nSubclasses which override this to gain access to the structure at render time should\ncall the parent class's method before attempting to access any child elements of the Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "parentNode",
                    "text": "The parent Element in which this Component's encapsulating element is contained.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "22,679,33",
                      "text": "22,679,44,81",
                      "type": "22,679,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "containerIdx",
                    "text": "The index within the parent Container's child collection of this Component.\n",
                    "type": "Number",
                    "src": {
                      "name": "22,680,24",
                      "text": "22,680,37,76",
                      "type": "22,680,16"
                    }
                  }
                ],
                "src": {
                  "access": "22,683,8",
                  "name": "22,685,0",
                  "template": "22,682,8",
                  "text": "22,671,8,387"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onResize",
                "template": true,
                "text": "Called when the component is resized.\n\nThis method is not called on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "src": {
                      "name": "3,4488,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "src": {
                      "name": "3,4488,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldWidth",
                    "src": {
                      "name": "3,4488,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldHeight",
                    "src": {
                      "name": "3,4488,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,4486,8",
                  "name": "3,4488,0",
                  "template": "3,4485,8",
                  "text": "3,4479,8,199"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onScrollEnd",
                "template": true,
                "text": "Invoked when a scroll operation is completed via this component's {@link #cfg!scrollable #scrollable}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The current x position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4522,24",
                      "text": "3,4522,26,23",
                      "type": "3,4522,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The current y position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4523,24",
                      "text": "3,4523,26,23",
                      "type": "3,4523,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4525,8",
                  "name": "3,4521,16",
                  "template": "3,4524,8",
                  "text": "3,4520,8,96"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onScrollMove",
                "template": true,
                "text": "Invoked when this component is scrolled via its {@link #cfg!scrollable #scrollable}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The current x position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4513,24",
                      "text": "3,4513,26,23",
                      "type": "3,4513,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The current y position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4514,24",
                      "text": "3,4514,26,23",
                      "type": "3,4514,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4516,8",
                  "name": "3,4512,16",
                  "template": "3,4515,8",
                  "text": "3,4511,8,78"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onScrollStart",
                "template": true,
                "text": "Invoked when a scroll is initiated on this component via its {@link #cfg!scrollable #scrollable}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The current x position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4504,24",
                      "text": "3,4504,26,23",
                      "type": "3,4504,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The current y position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4505,24",
                      "text": "3,4505,26,23",
                      "type": "3,4505,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4507,8",
                  "name": "3,4503,16",
                  "template": "3,4506,8",
                  "text": "3,4502,8,91"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onShow",
                "template": true,
                "text": "Allows addition of behavior to the show operation. After\ncalling the superclass's onShow, the Component will be visible.\n\nOverride in subclasses where more complex behaviour is needed.\n\nGets passed the same parameters as #show.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "type": "String/Ext.dom.Element",
                    "src": {
                      "name": "3,4536,41",
                      "type": "3,4536,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,4537,27",
                      "type": "3,4537,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,4538,25",
                      "type": "3,4538,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4541,8",
                  "name": "3,4543,0",
                  "template": "3,4540,8",
                  "text": "3,4529,8,229"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onShowComplete",
                "template": true,
                "text": "Invoked after the #afterShow method is complete.\n\nGets passed the same `callback` and `scope` parameters that #afterShow received.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,4570,27",
                      "type": "3,4570,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,4571,25",
                      "type": "3,4571,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4574,8",
                  "name": "3,4576,0",
                  "template": "3,4573,8",
                  "text": "3,4566,8,132"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onStateChange",
                "text": "This method is called when any of the {@link #cfg!stateEvents #stateEvents} are fired.\n",
                "src": {
                  "access": "17,175,8",
                  "name": "17,177,0",
                  "text": "17,174,8,70"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "owns",
                "text": "Returns `true` if the passed element is within the container tree of this component.\n\nFor example if a menu's submenu contains an {@link Ext.form.field.Date}, that top level\nmenu owns the elements of the date picker. Using this method, you can tell if an event took place\nwithin a certain component tree.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "src": {
                      "name": "3,6329,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6322,12",
                  "name": "3,6329,0",
                  "text": "3,6323,12,305"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "postBlur",
                "text": "Template method to do any post-blur processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "11,356,33",
                      "text": "11,356,35,17",
                      "type": "11,356,16"
                    }
                  }
                ],
                "src": {
                  "access": "11,355,8",
                  "name": "11,358,0",
                  "text": "11,354,8,48"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "postFocus",
                "text": "Template method to do any post-focus processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "11,411,33",
                      "text": "11,411,35,17",
                      "type": "11,411,16"
                    }
                  }
                ],
                "src": {
                  "access": "11,410,8",
                  "name": "11,413,0",
                  "text": "11,409,8,49"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "prepareItems",
                "items": [
                  {
                    "$type": "param",
                    "name": "items",
                    "src": {
                      "name": "2,1949,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "applyDefaults",
                    "src": {
                      "name": "2,1949,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,1947,12",
                  "name": "2,1949,0"
                }
              },
              {
                "$type": "method",
                "name": "prevChild",
                "text": "A method to find a child component before the passed child parameter. If a selector is also provided,\nthe first child component matching the selector will be returned.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "text": "The child to use as a starting point to find the previous child.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,1611,31",
                      "text": "2,1611,37,65",
                      "type": "2,1611,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to find the previous child. This will return the first child matching this selector. This parameter is optional.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1612,25",
                      "text": "2,1612,35,151",
                      "type": "2,1612,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The previous child found, `{@link null}` if no child found.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "2,1613,32,52",
                      "type": "2,1613,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1615,0",
                  "text": "2,1608,8,169"
                }
              },
              {
                "$type": "method",
                "name": "preview",
                "text": "Displays an image of a Ext.draw.Container on screen.\nOn mobile devices this lets users tap-and-hold to bring up the menu\nwith image saving options.\nNote: some browsers won't save the preview image if it's SVG based\n(i.e. generated from a draw container that uses 'Ext.draw.engine.Svg' engine).\nAnd some platforms may not have the means of viewing successfully saved SVG images.\n",
                "src": {
                  "name": "10,546,16",
                  "text": "10,547,8,378"
                }
              },
              {
                "$type": "method",
                "name": "previousNode",
                "text": "Returns the previous node in the Component tree in tree traversal order.\n\nNote that this is not limited to siblings, and if invoked upon a node with no matching siblings, will walk the\ntree in reverse order to attempt to find a match. Contrast with {@link #method!previousSibling #previousSibling}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to filter the preceding nodes.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4601,25",
                      "text": "3,4601,35,84",
                      "type": "3,4601,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The previous node (or the previous node which matches the selector).\nReturns `{@link null}` if there is no matching node.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4602,32,69:3,4603,8,45",
                      "type": "3,4602,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4605,0",
                  "text": "3,4597,8,275"
                }
              },
              {
                "$type": "method",
                "name": "previousSibling",
                "text": "Returns the previous sibling of this Component.\n\nOptionally selects the previous sibling which matches the passed {@link Ext.ComponentQuery}\nselector.\n\nMay also be referred to as **`prev()`**\n\nNote that this is limited to siblings, and if no siblings of the item match, `{@link null}` is returned. Contrast with\n{@link #method!previousNode #previousNode}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to filter the preceding items.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4645,25",
                      "text": "3,4645,35,84",
                      "type": "3,4645,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The previous sibling (or the previous sibling which matches the selector).\nReturns `{@link null}` if there is no matching sibling.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4646,32,75:3,4647,8,48",
                      "type": "3,4646,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4649,0",
                  "text": "3,4636,8,341"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "processData",
                "src": {
                  "access": "5,1608,8",
                  "name": "5,1610,0"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "26,220,20",
                      "text": "26,220,25,34",
                      "type": "26,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "26,221,22,57:26,222,4,22",
                      "type": "26,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "26,155,12",
                  "text": "26,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "publishState",
                "since": "5.0.0",
                "text": "Publish this components state to the `ViewModel`. If no arguments are given (or if\nthis is the first call), the entire state is published. This state is determined by\nthe `{@link #cfg!publishes publishes}` property.\n\nThis method is called only by component authors.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "optional": true,
                    "text": "The name of the property to update.\n",
                    "type": "String",
                    "src": {
                      "name": "8,422,25",
                      "text": "8,422,35,36",
                      "type": "8,422,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value of `property`. Only needed if `property` is given.\n",
                    "type": "Object",
                    "src": {
                      "name": "8,423,25",
                      "text": "8,423,32,61",
                      "type": "8,423,16"
                    }
                  }
                ],
                "src": {
                  "access": "8,424,8",
                  "name": "8,427,0",
                  "since": "8,425,15",
                  "text": "8,416,8,244"
                }
              },
              {
                "$type": "method",
                "name": "query",
                "text": "Retrieves all descendant components which match the passed selector.\nExecutes an Ext.ComponentQuery.query using this container as its root.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "Selector complying to an Ext.ComponentQuery selector.\nIf no selector is specified all items will be returned.\n",
                    "type": "String",
                    "src": {
                      "name": "24,14,25",
                      "text": "24,14,35,54:24,15,8,56",
                      "type": "24,14,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Components which matched the selector\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "24,16,34,38",
                      "type": "24,16,17"
                    }
                  }
                ],
                "src": {
                  "name": "24,18,0",
                  "text": "24,12,8,140"
                }
              },
              {
                "$type": "method",
                "name": "queryBy",
                "text": "Retrieves all descendant components which match the passed function.\nThe function should return false for components that are to be\nexcluded from the selection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The matcher function. It will be called with a single argument,\nthe component being tested.\n",
                    "type": "Function",
                    "src": {
                      "name": "24,27,26",
                      "text": "24,27,29,64:24,28,8,28",
                      "type": "24,27,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope in which to run the function. If not specified,\nit will default to the active component.\n",
                    "type": "Object",
                    "src": {
                      "name": "24,29,25",
                      "text": "24,29,32,58:24,30,8,41",
                      "type": "24,29,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Components matched by the passed function\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "24,31,34,42",
                      "type": "24,31,17"
                    }
                  }
                ],
                "src": {
                  "name": "24,33,0",
                  "text": "24,24,8,161"
                }
              },
              {
                "$type": "method",
                "name": "queryById",
                "text": "Finds a component at any level under this container matching the id/itemId.\nThis is a shorthand for calling ct.down('#' + id);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id to find\n",
                    "type": "String",
                    "src": {
                      "name": "24,52,24",
                      "text": "24,52,27,15",
                      "type": "24,52,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching id, null if not found\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "24,53,32,35",
                      "type": "24,53,17"
                    }
                  }
                ],
                "src": {
                  "name": "24,55,0",
                  "text": "24,50,8,127"
                }
              },
              {
                "$type": "method",
                "name": "redraw",
                "text": "Redraw the chart. If animations are set this will animate the chart too.\n",
                "src": {
                  "name": "5,1460,0",
                  "text": "5,1458,8,73"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "refreshScroll",
                "text": "Implementation which updates the scroll range of a touch scroller.\nSubclasses may change implementation.\n",
                "src": {
                  "access": "3,6358,12",
                  "name": "3,6362,0",
                  "text": "3,6359,12,105"
                }
              },
              {
                "$type": "method",
                "name": "registerFloatingItem",
                "text": "Called by Component#doAutoRender\n\nRegister a Container configured `floating: true` with this Component's {@link Ext.ZIndexManager}.\n\nComponents added in this way will not participate in any layout, but will be rendered\nupon first show in the way that {@link Ext.window.Window}s are.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cmp",
                    "src": {
                      "name": "3,4679,0"
                    }
                  }
                ],
                "src": {
                  "name": "3,4679,0",
                  "text": "3,4672,8,304"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1466,27",
                      "text": "13,1466,34,53",
                      "type": "13,1466,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "13,1467,36",
                      "text": "13,1467,43,58:13,1468,11,231",
                      "type": "13,1467,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "13,1473,28",
                      "text": "13,1473,36,60:13,1474,11,164",
                      "type": "13,1473,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "13,1479,28,130:13,1480,11,192",
                      "type": "13,1479,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,1490,0",
                  "text": "13,1453,11,651"
                }
              },
              {
                "$type": "method",
                "name": "remove",
                "since": "2.3.0",
                "text": "Removes a component from this container.  Fires the {@link #event!beforeremove #beforeremove} event\nbefore removing, then fires the {@link #event!remove #event-remove} event after the component has\nbeen removed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The component instance or id to remove.\n",
                    "type": "Ext.Component/String",
                    "src": {
                      "name": "2,1644,38",
                      "text": "2,1644,48,40",
                      "type": "2,1644,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "autoDestroy",
                    "optional": true,
                    "text": "True to automatically invoke the removed Component's\n{@link Ext.Component#method!destroy Ext.Component#method-destroy} function.\n\nDefaults to the value of this Container's {@link #cfg!autoDestroy #autoDestroy} config.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1646,26",
                      "text": "2,1646,39,53:2,1647,8,120",
                      "type": "2,1646,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "component The Component that was removed.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "2,1651,32,42",
                      "type": "2,1651,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1654,0",
                  "since": "2,1652,15",
                  "text": "2,1640,8,179"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for {@link #method!unAfter #unAfter}.\n",
                "src": {
                  "name": "13,1248,0",
                  "text": "13,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeAll",
                "since": "2.3.0",
                "text": "Removes all components from this container.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "autoDestroy",
                    "optional": true,
                    "text": "True to automatically invoke the removed\nComponent's {@link Ext.Component#method!destroy Ext.Component#method-destroy} function.\nDefaults to the value of this Container's {@link #cfg!autoDestroy #autoDestroy} config.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1687,26",
                      "text": "2,1687,39,41:2,1688,8,130",
                      "type": "2,1687,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Array of the removed components\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "2,1690,34,32",
                      "type": "2,1690,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1693,0",
                  "since": "2,1691,15",
                  "text": "2,1686,8,44"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for {@link #method!unBefore #unBefore}.\n",
                "src": {
                  "name": "13,1242,0",
                  "text": "13,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeBodyCls",
                "text": "Removes a CSS class from the body element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "The class to remove\n",
                    "type": "String",
                    "src": {
                      "name": "6,3033,24",
                      "text": "6,3033,28,20",
                      "type": "6,3033,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "text": "6,3034,34,5",
                      "type": "6,3034,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,3036,0",
                  "text": "6,3032,8,43"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #addCls} instead.\n",
                "deprecatedVersion": "4.1",
                "inheritdoc": "Ext.Component#removeCls",
                "name": "removeClass",
                "since": "2.3.0",
                "src": {
                  "deprecatedMessage": "3,6502,20",
                  "deprecatedVersion": "3,6502,20",
                  "inheritdoc": "3,6501,20",
                  "name": "3,6500,28",
                  "since": "3,6503,27"
                }
              },
              {
                "$type": "method",
                "name": "removeCls",
                "text": "Removes a CSS class from the top level element representing this component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "The CSS class name to remove.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,4689,33",
                      "text": "3,4689,37,30",
                      "type": "3,4689,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the Component to allow method chaining.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4690,32,48",
                      "type": "3,4690,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4692,0",
                  "text": "3,4688,8,76"
                }
              },
              {
                "$type": "method",
                "name": "removeClsWithUI",
                "text": "Removes a `{@link #cfg!cls cls}` to the `{@link #cfg!uiCls uiCls}` array, which will also call {@link #method!removeUIClsFromElement #removeUIClsFromElement} and removes it from all\nelements of this component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "A string or an array of strings to remove to the `{@link #cfg!uiCls uiCls}`.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,4703,33",
                      "text": "3,4703,37,58",
                      "type": "3,4703,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4705,0",
                  "text": "3,4701,8,143"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeDelegatedListener",
                "text": "Removes delegated listeners for a given eventName, function, and scope.\nUsers should not invoke this method directly.  It is called automatically by\nthe framework as part of {@link #method!removeListener #removeListener} processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "19,129,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "19,129,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "19,129,0"
                    }
                  }
                ],
                "src": {
                  "access": "19,124,12",
                  "name": "19,129,0",
                  "text": "19,125,12,210"
                }
              },
              {
                "$type": "method",
                "name": "removeDocked",
                "text": "Removes the docked item from the panel.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The Component to remove.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "9,327,31",
                      "text": "9,327,36,25",
                      "type": "9,327,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "autoDestroy",
                    "text": "(optional) Destroy the component after removal.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "9,328,25",
                      "text": "9,328,37,48",
                      "type": "9,328,16"
                    }
                  }
                ],
                "src": {
                  "name": "9,330,0",
                  "text": "9,326,8,40"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "13,1102,28",
                      "text": "13,1102,38,51",
                      "type": "13,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "13,1103,30",
                      "text": "13,1103,33,66:13,1104,12,76",
                      "type": "13,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1106,28",
                      "text": "13,1106,34,62:13,1107,12,1017",
                      "type": "13,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,1145,0",
                  "text": "13,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the {@link #method!mon #mon} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "13,526,56",
                      "text": "13,526,61,52",
                      "type": "13,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "13,527,34",
                      "text": "13,527,40,63",
                      "type": "13,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "13,528,29",
                      "text": "13,528,32,85",
                      "type": "13,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,529,27",
                      "text": "13,529,33,92:13,530,11,43",
                      "type": "13,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "13,532,0",
                  "text": "13,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "13,1307,28",
                      "text": "13,1307,36,44",
                      "type": "13,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1308,27",
                      "text": "13,1308,43,26:13,1309,11,41",
                      "type": "13,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "13,1306,11",
                  "name": "13,1311,0",
                  "text": "13,1305,11,38"
                }
              },
              {
                "$type": "method",
                "name": "removeSeries",
                "text": "Remove a {@link Ext.chart.series.Series} from this chart.\nThe Series (or array) passed will be removed from the existing series.\n\nThe chart will be redrawn in response to the change.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "text": "The Series or the `{@link #cfg!id id}` of the Series to remove. May be an array.\n",
                    "type": "Ext.chart.series.Series/String",
                    "src": {
                      "name": "5,1228,48",
                      "text": "5,1228,55,65",
                      "type": "5,1228,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,1230,0",
                  "text": "5,1223,8,191"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "removeUIClsFromElement",
                "text": "Method which removes a specified UI + `{@link #cfg!uiCls uiCls}` from the components element. The `{@link #cfg!cls cls}`\nwhich is added to the element will be: `this.baseCls + '-' + ui + uiCls`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "uiCls",
                    "text": "The UI class to remove from the element.\n",
                    "type": "String",
                    "src": {
                      "name": "3,2347,24",
                      "text": "3,2347,30,41",
                      "type": "3,2347,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2348,8",
                  "name": "3,2350,0",
                  "text": "3,2345,8,159"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeUIFromElement",
                "text": "Method which removes a specified UI from the components element.\n",
                "src": {
                  "access": "3,6400,12",
                  "name": "3,6402,0",
                  "text": "3,6399,12,65"
                }
              },
              {
                "$type": "method",
                "name": "render",
                "text": "Renders the Component into the passed HTML element.\n\n**If you are using a {@link Ext.container.Container} object to house this\nComponent, then do not use the render method.**\n\nA Container's child Components are rendered by that Container's\n{@link Ext.container.Container#cfg!layout Ext.container.Container#layout} manager when the Container is first rendered.\n\nWhen creating complex UIs, it is important to remember that sizing and positioning\nof child items is the responsibility of the Container's {@link Ext.container.Container#cfg!layout Ext.container.Container#layout}\nmanager.  If you expect child items to be sized in response to user interactions, you must\nconfigure the Container with a layout manager which creates and manages the type of layout you\nhave in mind.\n\n**Omitting the Container's {@link Ext.container.Container#cfg!layout Ext.Container#layout} config means that a basic\nlayout manager is used which does nothing but render child components sequentially into the\nContainer. No sizing or positioning will be performed in this situation.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "container",
                    "optional": true,
                    "text": "The element this Component should be\nrendered into. If it is being created from existing markup, this should be omitted.\n",
                    "type": "Ext.dom.Element/HTMLElement/String",
                    "src": {
                      "name": "22,758,53",
                      "text": "22,758,64,37:22,759,8,84",
                      "type": "22,758,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "The element ID or DOM node index within the container **before**\nwhich this component will be inserted (defaults to appending to the end of the container)\n",
                    "type": "String/Number",
                    "src": {
                      "name": "22,760,32",
                      "text": "22,760,42,65:22,761,8,90",
                      "type": "22,760,16"
                    }
                  }
                ],
                "src": {
                  "name": "22,763,0",
                  "text": "22,740,8,986"
                }
              },
              {
                "$type": "method",
                "name": "renderFrame",
                "text": "Render all the surfaces in the container.\n",
                "src": {
                  "name": "10,350,0",
                  "text": "10,348,8,42"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "since": "5.0.0",
                "text": "Gets the Controller or Component that is used as the event root for this view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "25,185,25",
                      "text": "25,185,44,46",
                      "type": "25,185,16",
                      "value": "25,185,38"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default listener scope.\n",
                    "type": "Ext.app.ViewController/Ext.container.Container",
                    "src": {
                      "text": "25,186,65,28",
                      "type": "25,186,17"
                    }
                  }
                ],
                "src": {
                  "access": "25,188,8",
                  "name": "25,191,0",
                  "since": "25,189,15",
                  "text": "25,183,8,80"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveSatelliteListenerScope",
                "since": "5.1.1",
                "text": "Returns the default listener scope for a \"satellite\" of this component.\nUsed for resolving scope for observable objects that are not part of the normal\nContainer/Component hierarchy (for example, plugins)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "satellite",
                    "type": "Ext.mixin.Observable",
                    "src": {
                      "name": "25,227,38",
                      "type": "25,227,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "25,228,25",
                      "type": "25,228,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The listener scope\n",
                    "type": "Object",
                    "src": {
                      "text": "25,229,25,19",
                      "type": "25,229,17"
                    }
                  }
                ],
                "src": {
                  "access": "25,230,8",
                  "name": "25,233,0",
                  "since": "25,231,15",
                  "text": "25,223,8,206"
                }
              },
              {
                "$type": "method",
                "name": "resumeChartLayout",
                "text": "Decrements chart's layout suspend count.\nWhen the suspend count is decremented to zero,\na layout is scheduled.\n",
                "src": {
                  "name": "5,599,0",
                  "text": "5,595,8,111"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the {@link #method!suspendEvent #suspendEvent} method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "13,1409,32",
                      "text": "13,1409,42,32",
                      "type": "13,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "13,1411,0",
                  "text": "13,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see {@link #method!suspendEvents #suspendEvents}).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See {@link #method!suspendEvents #suspendEvents}.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "13,1431,29",
                      "text": "13,1431,43,59:13,1432,11,53",
                      "type": "13,1431,19"
                    }
                  }
                ],
                "src": {
                  "name": "13,1434,0",
                  "text": "13,1426,11,198"
                }
              },
              {
                "$type": "method",
                "name": "resumeThicknessChanged",
                "text": "Decrements axis thickness suspend count.\nWhen axis thickness suspend count is decremented to zero,\nchart layout is performed.\n",
                "src": {
                  "name": "5,656,0",
                  "text": "5,652,8,126"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "reverseTranslateXY",
                "text": "Converts local coordinates into page-level coordinates\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xy",
                    "text": "The local x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "name": "21,943,26",
                      "text": "21,943,29,30",
                      "type": "21,943,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The translated coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "21,944,27,27",
                      "type": "21,944,17"
                    }
                  }
                ],
                "src": {
                  "access": "21,945,8",
                  "name": "21,947,0",
                  "text": "21,942,8,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "revertFocus",
                "text": "Returns focus to the cached previously focused Component or element.\n\nUsually called by onHide.\n",
                "src": {
                  "access": "11,550,12",
                  "name": "11,552,0",
                  "text": "11,546,12,97"
                }
              },
              {
                "$type": "method",
                "name": "savePropsToState",
                "text": "Gathers additional named properties of the instance and adds their current values\nto the passed state object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "propNames",
                    "text": "The name (or array of names) of the property to save.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "17,349,33",
                      "text": "17,349,43,54",
                      "type": "17,349,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The state object in to which to save the property values.\n",
                    "type": "Object",
                    "src": {
                      "name": "17,350,24",
                      "text": "17,350,30,58",
                      "type": "17,350,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "state\n",
                    "type": "Object",
                    "src": {
                      "text": "17,351,25,6",
                      "type": "17,351,17"
                    }
                  }
                ],
                "src": {
                  "name": "17,353,0",
                  "text": "17,347,8,110"
                }
              },
              {
                "$type": "method",
                "name": "savePropToState",
                "text": "Conditionally saves a single property from this object to the given state object.\nThe idea is to only save state which has changed from the initial state so that\ncurrent software settings do not override future software settings. Only those\nvalues that are user-changed state should be saved.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "propName",
                    "text": "The name of the property to save.\n",
                    "type": "String",
                    "src": {
                      "name": "17,325,24",
                      "text": "17,325,33,34",
                      "type": "17,325,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The state object in to which to save the property.\n",
                    "type": "Object",
                    "src": {
                      "name": "17,326,24",
                      "text": "17,326,30,51",
                      "type": "17,326,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "stateName",
                    "text": "(optional) The name to use for the property in state.\n",
                    "type": "String",
                    "src": {
                      "name": "17,327,24",
                      "text": "17,327,34,54",
                      "type": "17,327,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the property was saved, false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "17,328,26,46",
                      "type": "17,328,17"
                    }
                  }
                ],
                "src": {
                  "name": "17,330,0",
                  "text": "17,320,8,294"
                }
              },
              {
                "$type": "method",
                "name": "saveState",
                "text": "Saves the state of the object to the persistence store.\n",
                "src": {
                  "name": "17,209,0",
                  "text": "17,207,8,56"
                }
              },
              {
                "$type": "method",
                "name": "scheduleLayout",
                "text": "Schedule a layout at next frame.\n",
                "src": {
                  "name": "5,621,0",
                  "text": "5,619,8,33"
                }
              },
              {
                "$type": "method",
                "name": "scrollBy",
                "text": "Scrolls this Component by the passed delta values, optionally animating.\n\nAll of the following are equivalent:\n\n     comp.scrollBy(10, 10, true);\n     comp.scrollBy([10, 10], true);\n     comp.scrollBy({ x: 10, y: 10 }, true);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deltaX",
                    "text": "Either the x delta, an Array specifying x and y deltas or\nan object with \"x\" and \"y\" properties.\n",
                    "type": "Number/Number[]/Object",
                    "src": {
                      "name": "3,4768,40",
                      "text": "3,4768,47,58:3,4769,8,39",
                      "type": "3,4768,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deltaY",
                    "text": "Either the y delta, or an animate flag or config object.\n",
                    "type": "Number/Boolean/Object",
                    "src": {
                      "name": "3,4770,39",
                      "text": "3,4770,46,57",
                      "type": "3,4770,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "text": "Animate flag/config object if the delta values were passed separately.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,4771,32",
                      "text": "3,4771,40,71",
                      "type": "3,4771,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4773,0",
                  "text": "3,4760,8,227"
                }
              },
              {
                "$type": "method",
                "name": "scrollTo",
                "text": "Scrolls this component to the specified `x` and `y` coordinates.  Only applicable\nfor {@link #cfg!scrollable #scrollable} components.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "3,4784,24",
                      "type": "3,4784,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "3,4785,24",
                      "type": "3,4785,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard Element\nanimation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,4786,33",
                      "text": "3,4786,42,53:3,4787,8,24",
                      "type": "3,4786,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4789,0",
                  "text": "3,4782,8,118"
                }
              },
              {
                "$type": "method",
                "name": "sequenceFx",
                "text": "Ensures that all effects queued after sequenceFx is called on this object are run in sequence. This is the\nopposite of {@link #method!syncFx #syncFx}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Object",
                    "src": {
                      "text": "23,350,25,5",
                      "type": "23,350,17"
                    }
                  }
                ],
                "src": {
                  "name": "23,352,0",
                  "text": "23,348,8,136"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setActive",
                "text": "This method is called internally by {@link Ext.ZIndexManager} to signal that a floating Component has either been\nmoved to the top of its zIndex stack, or pushed from the top of its zIndex stack.\n\nIf a _Window_ is superceded by another Window, deactivating it hides its shadow.\n\nThis method also fires the {@link Ext.Component#event!activate Ext.Component#activate} or\n{@link Ext.Component#event!deactivate Ext.Component#deactivate} event depending on which action occurred.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "active",
                    "optional": true,
                    "text": "True to activate the Component, false to deactivate it.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,472,26",
                      "text": "1,472,40,56",
                      "type": "1,472,16",
                      "value": "1,472,33"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "doFocus",
                    "optional": true,
                    "text": "When activating, set to true to focus the component;\nwhen deactivating, set to false to avoid returning focus to previous element.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,473,26",
                      "text": "1,473,35,53:1,474,8,79",
                      "type": "1,473,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,463,8",
                  "name": "1,477,0",
                  "text": "1,464,8,436"
                }
              },
              {
                "$type": "method",
                "name": "setActiveItem",
                "text": "Sets a component as the active layout item. This only applies when using\na {@link Ext.layout.container.Card} layout.\n\n    var card1 = Ext.create('Ext.panel.Panel', {itemId: 'card-1'});\n    var card2 = Ext.create('Ext.panel.Panel', {itemId: 'card-2'});\n    var panel = Ext.create('Ext.panel.Panel', {\n        layout: 'card',\n        items: [card1, card2]\n    });\n    // These are all equivalent\n    panel.getLayout().setActiveItem(card2);\n    panel.getLayout().setActiveItem('card-2');\n    panel.getLayout().setActiveItem(1);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The component, component {@link Ext.Component#cfg!id Ext.Component#id},\n{@link Ext.Component#cfg!itemId Ext.Component#itemId}, or index of component.\n",
                    "type": "Ext.Component/Number/String",
                    "src": {
                      "name": "2,1794,45",
                      "text": "2,1794,50,54:2,1795,8,60",
                      "type": "2,1794,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the activated component or false when nothing activated.\nFalse is returned also when trying to activate an already active item.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "2,1796,32,57:2,1797,8,71",
                      "type": "2,1796,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,1799,0",
                  "text": "2,1780,8,526"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #setScrollable} instead\n",
                "deprecatedVersion": "5.0.0",
                "name": "setAutoScroll",
                "text": "Sets the overflow on the content element of the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "scroll",
                    "text": "True to allow the Component to auto scroll.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,4799,25",
                      "text": "3,4799,32,44",
                      "type": "3,4799,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4800,32,5",
                      "type": "3,4800,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "3,4801,8",
                  "deprecatedVersion": "3,4801,8",
                  "name": "3,4803,0",
                  "text": "3,4798,8,59"
                }
              },
              {
                "$type": "method",
                "name": "setBodyStyle",
                "text": "Sets the body style according to the passed parameters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "style",
                    "text": "A full style specification string, or object, or the name of a style property to set.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "6,3066,23",
                      "text": "6,3066,29,86",
                      "type": "6,3066,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "If the first param was a style property name, the style property value.\n",
                    "type": "String",
                    "src": {
                      "name": "6,3067,24",
                      "text": "6,3067,30,72",
                      "type": "6,3067,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "text": "6,3068,34,5",
                      "type": "6,3068,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,3070,0",
                  "text": "6,3065,8,56"
                }
              },
              {
                "$type": "method",
                "inheritdoc": true,
                "name": "setBorder",
                "items": [
                  {
                    "$type": "param",
                    "name": "border",
                    "src": {
                      "name": "6,3091,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "targetEl",
                    "src": {
                      "name": "6,3091,0"
                    }
                  }
                ],
                "src": {
                  "inheritdoc": "6,3089,8",
                  "name": "6,3091,0"
                }
              },
              {
                "$type": "method",
                "name": "setBox",
                "text": "Sets the element's box.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "text": "The box to fill {x, y, width, height}\n",
                    "type": "Object",
                    "src": {
                      "name": "21,835,24",
                      "text": "21,835,28,38",
                      "type": "21,835,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "21,836,40,5",
                      "type": "21,836,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,838,0",
                  "text": "21,834,8,24"
                }
              },
              {
                "$type": "method",
                "name": "setCollapsed",
                "text": "Collapses or expands the panel.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collapsed",
                    "text": "`true` to collapse the panel, `false` to expand it.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "6,3126,25",
                      "text": "6,3126,35,52",
                      "type": "6,3126,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,3128,0",
                  "text": "6,3125,8,32"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setComponentLayout",
                "items": [
                  {
                    "$type": "param",
                    "name": "layout",
                    "src": {
                      "name": "3,6429,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6427,12",
                  "name": "3,6429,0"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "20,1478,35",
                      "text": "20,1478,40,69",
                      "type": "20,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "20,1479,29",
                      "text": "20,1479,36,41",
                      "type": "20,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "20,1480,31,5",
                      "type": "20,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "20,1482,0",
                  "text": "20,1476,12,46"
                }
              },
              {
                "$type": "method",
                "name": "setDisabled",
                "text": "Enable or disable the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "disabled",
                    "text": "`true` to disable.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,4860,25",
                      "text": "3,4860,34,19",
                      "type": "3,4860,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4862,0",
                  "text": "3,4859,8,33"
                }
              },
              {
                "$type": "method",
                "name": "setDock",
                "text": "Sets the dock position of this component in its parent panel. Note that this only has effect if this item is part\nof the `{@link #cfg!dockedItems dockedItems}` collection of a parent that has a DockLayout (note that any Panel has a DockLayout by default)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dock",
                    "text": "The dock position.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,4840,24",
                      "text": "3,4840,29,19",
                      "type": "3,4840,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4841,32,5",
                      "type": "3,4841,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4843,0",
                  "text": "3,4838,8,230"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #setDock} instead.\n",
                "deprecatedVersion": "5.0",
                "inheritdoc": "Ext.Component#setDock",
                "name": "setDocked",
                "src": {
                  "deprecatedMessage": "3,6517,20",
                  "deprecatedVersion": "3,6517,20",
                  "inheritdoc": "3,6516,20",
                  "name": "3,6515,28"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setDockedItemsVisibility",
                "text": "Set visibility of docked items after the panel is collapsed or expanded\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "els",
                    "type": "Ext.dom.CompositeElement",
                    "src": {
                      "name": "6,3135,42",
                      "type": "6,3135,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "show",
                    "type": "Boolean",
                    "src": {
                      "name": "6,3136,25",
                      "type": "6,3136,16"
                    }
                  }
                ],
                "src": {
                  "access": "6,3138,8",
                  "name": "6,3140,0",
                  "text": "6,3133,8,73"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setFlex",
                "text": "Sets the flex property of this component. Only applicable when this component is\nan item of a box layout\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "flex",
                    "type": "Number",
                    "src": {
                      "name": "3,4870,24",
                      "type": "3,4870,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4869,8",
                  "name": "3,4872,0",
                  "text": "3,4867,8,105"
                }
              },
              {
                "$type": "method",
                "name": "setHeight",
                "text": "Sets the height of the component. This method fires the {@link #event!resize #resize} event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height to set. This may be one of:\n\n  - A Number specifying the new height in pixels.\n  - A String used to set the CSS height style.\n  - `{@link undefined}` to leave the height unchanged.\n  - `{@link null}` to clear the height.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4879,24",
                      "text": "3,4879,31,43:3,4880,8,178",
                      "type": "3,4879,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4886,32,5",
                      "type": "3,4886,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4888,0",
                  "text": "3,4877,8,80"
                }
              },
              {
                "$type": "method",
                "name": "setHidden",
                "text": "Sets the hidden state of this component. This is basically the same as\n`{@link #method!setVisible #setVisible}` but the boolean parameter has the opposite meaning.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "hidden",
                    "type": "Boolean",
                    "src": {
                      "name": "3,5302,25",
                      "type": "3,5302,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.Component",
                    "src": {
                      "type": "3,5303,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5305,0",
                  "text": "3,5300,8,145"
                }
              },
              {
                "$type": "method",
                "name": "setLayout",
                "text": "Reconfigures the initially configured {@link #cfg!layout #layout}.\n\nNOTE: this method cannot be used to change the \"type\" of layout after the component\nhas been rendered to the DOM. After rendering, this method can only modify the\nexisting layout's configuration properties. The reason for this restriction is that\nmany container layouts insert special wrapping elements into the dom, and the\nframework does not currently support dynamically changing these elements once\nrendered.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "configuration",
                    "text": "object for the layout\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1735,24",
                      "text": "2,1735,38,22",
                      "type": "2,1735,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,1737,0",
                  "text": "2,1727,8,469"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.  In\nversions prior to 5.1, {@link #cfg!listeners #listeners} had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the {@link #method!on #on} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1804,28",
                      "text": "13,1804,38,14",
                      "type": "13,1804,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,1806,0",
                  "text": "13,1798,12,402"
                }
              },
              {
                "$type": "method",
                "name": "setLoading",
                "text": "This method allows you to show or hide a LoadMask on top of this component.\n\nThe mask will be rendered into the element returned by {@link #method!getMaskTarget #getMaskTarget} which for most Components is the Component's\nelement. See {@link #method!getMaskTarget #getMaskTarget} and {@link #cfg!maskElement #maskElement}.\n\nMost Components will return `{@link null}` indicating that their LoadMask cannot reside inside their element, but must\nbe rendered into the document body.\n\n{@link Ext.view.Table} however will direct a LoadMask to be rendered into the owning {@link Ext.panel.Table}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "load",
                    "text": "True to show the default LoadMask, a config object that will be passed to the\nLoadMask constructor, or a message String to show. False to hide the current LoadMask.\n",
                    "type": "Boolean/Object/String",
                    "src": {
                      "name": "3,4903,39",
                      "text": "3,4903,44,78:3,4904,8,87",
                      "type": "3,4903,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The LoadMask instance that has just been shown.\n",
                    "type": "Ext.LoadMask",
                    "src": {
                      "text": "3,4905,31,48",
                      "type": "3,4905,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4907,0",
                  "text": "3,4893,8,543"
                }
              },
              {
                "$type": "method",
                "name": "setLocalX",
                "text": "Sets the local x coordinate of this element using CSS style. When used on an\nabsolute positioned element this method is symmetrical with {@link #method!getLocalX #getLocalX}, but\nmay not be symmetrical when used on a relatively positioned element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The x coordinate. A value of `{@link null}` sets the left style to 'auto'.\n",
                    "type": "Number",
                    "src": {
                      "name": "21,105,24",
                      "text": "21,105,26,67",
                      "type": "21,105,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "21,106,40,5",
                      "type": "21,106,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,108,0",
                  "text": "21,102,8,230"
                }
              },
              {
                "$type": "method",
                "name": "setLocalXY",
                "text": "Sets the local x and y coordinates of this element using CSS style. When used on an\nabsolute positioned element this method is symmetrical with {@link #method!getLocalXY #getLocalXY}, but\nmay not be symmetrical when used on a relatively positioned element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The x coordinate or an array containing [x, y]. A value of\n`{@link null}` sets the left style to 'auto'\n",
                    "type": "Number/Array",
                    "src": {
                      "name": "21,116,30",
                      "text": "21,116,32,59:21,117,8,37",
                      "type": "21,116,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The y coordinate, required if x is not an array. A value of\n`{@link null}` sets the top style to 'auto'\n",
                    "type": "Number",
                    "src": {
                      "name": "21,118,25",
                      "text": "21,118,28,60:21,119,8,36",
                      "type": "21,118,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "21,120,40,5",
                      "type": "21,120,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,122,0",
                  "text": "21,113,8,238"
                }
              },
              {
                "$type": "method",
                "name": "setLocalY",
                "text": "Sets the local y coordinate of this element using CSS style. When used on an\nabsolute positioned element this method is symmetrical with {@link #method!getLocalY #getLocalY}, but\nmay not be symmetrical when used on a relatively positioned element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The y coordinate. A value of `{@link null}` sets the top style to 'auto'.\n",
                    "type": "Number",
                    "src": {
                      "name": "21,130,24",
                      "text": "21,130,26,66",
                      "type": "21,130,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "21,131,40,5",
                      "type": "21,131,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,133,0",
                  "text": "21,127,8,230"
                }
              },
              {
                "$type": "method",
                "name": "setMargin",
                "text": "Sets the margin on the target element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "margin",
                    "text": "The margin to set. See the {@link #cfg!margin #margin} config.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "3,4955,31",
                      "text": "3,4955,38,51",
                      "type": "3,4955,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4957,0",
                  "text": "3,4954,8,39"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setMasked",
                "text": "Set masked state for this Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isMasked",
                    "text": "True if masked, false otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,4037,25",
                      "text": "3,4037,34,33",
                      "type": "3,4037,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4038,8",
                  "name": "3,4040,0",
                  "text": "3,4035,8,38"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #setScrollable} instead\n",
                "deprecatedVersion": "5.0.0",
                "name": "setOverflowXY",
                "text": "Sets the overflow x/y on the content element of the component. The x/y overflow\nvalues can be any valid CSS overflow (e.g., 'auto' or 'scroll'). By default, the\nvalue is 'hidden'.  Passing `{@link undefined}` will preserve the current value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "overflowX",
                    "text": "The overflow-x value.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4988,24",
                      "text": "3,4988,34,22",
                      "type": "3,4988,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "overflowY",
                    "text": "The overflow-y value.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4989,24",
                      "text": "3,4989,34,22",
                      "type": "3,4989,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4990,32,5",
                      "type": "3,4990,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "3,4991,8",
                  "deprecatedVersion": "3,4991,8",
                  "name": "3,4993,0",
                  "text": "3,4984,8,235"
                }
              },
              {
                "$type": "method",
                "name": "setPagePosition",
                "text": "Sets the page XY position of the component. To set the left and top instead, use {@link #method!setPosition #setPosition}.\nThis method fires the {@link #event!move #event-move} event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new x position or an array of `[x,y]`.\n",
                    "type": "Number/Number[]",
                    "src": {
                      "name": "3,5005,33",
                      "text": "3,5005,35,43",
                      "type": "3,5005,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The new y position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,5006,25",
                      "text": "3,5006,28,20",
                      "type": "3,5006,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "True to animate the Component into its new position. You may also pass an\nanimation configuration.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5007,33",
                      "text": "3,5007,42,74:3,5008,8,25",
                      "type": "3,5007,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5009,32,5",
                      "type": "3,5009,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5011,0",
                  "text": "3,5003,8,152"
                }
              },
              {
                "$type": "method",
                "name": "setPosition",
                "text": "Sets the left and top of the component. To set the page XY position instead, use {@link Ext.Component#method!setPagePosition Ext.Component#setPagePosition}. This\nmethod fires the {@link #event!move #event-move} event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new left, an array of `[x,y]`, or animation config object containing `x` and `y` properties.\n",
                    "type": "Number/Number[]/Object",
                    "src": {
                      "name": "3,5053,40",
                      "text": "3,5053,42,97",
                      "type": "3,5053,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The new top.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,5054,25",
                      "text": "3,5054,28,13",
                      "type": "3,5054,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "If `true`, the Component is _animated_ into its new position. You may also pass an\nanimation configuration.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5055,33",
                      "text": "3,5055,42,83:3,5056,8,25",
                      "type": "3,5055,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5057,32,5",
                      "type": "3,5057,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5059,0",
                  "text": "3,5051,8,185"
                }
              },
              {
                "$type": "method",
                "name": "setScrollX",
                "text": "Sets the \"x\" scroll position for this component.  Only applicable for\n{@link #cfg!scrollable #scrollable} components\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "3,5099,24",
                      "type": "3,5099,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard Element\nanimation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5100,33",
                      "text": "3,5100,42,53:3,5101,8,24",
                      "type": "3,5100,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,5103,0",
                  "text": "3,5097,8,101"
                }
              },
              {
                "$type": "method",
                "name": "setScrollY",
                "text": "Sets the \"y\" scroll position for this component.  Only applicable for\n{@link #cfg!scrollable #scrollable} components\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "3,5114,24",
                      "type": "3,5114,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard Element\nanimation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5115,33",
                      "text": "3,5115,42,53:3,5116,8,24",
                      "type": "3,5115,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,5118,0",
                  "text": "3,5112,8,101"
                }
              },
              {
                "$type": "method",
                "name": "setSize",
                "text": "Sets the width and height of this Component. This method fires the {@link #event!resize #resize} event. This method can accept\neither width and height as separate arguments, or you can pass a size object like `{width:10, height:20}`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width to set. This may be one of:\n\n  - A Number specifying the new width in pixels.\n  - A String used to set the CSS width style.\n  - A size object in the format `{width: widthValue, height: heightValue}`.\n  - `{@link undefined}` to leave the width unchanged.\n",
                    "type": "Number/String/Object",
                    "src": {
                      "name": "3,5130,38",
                      "text": "3,5130,44,42:3,5131,8,219",
                      "type": "3,5130,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height to set (not required if a size object is passed as the first arg).\nThis may be one of:\n\n  - A Number specifying the new height in pixels.\n  - A String used to set the CSS height style. Animation may **not** be used.\n  - `{@link undefined}` to leave the height unchanged.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "3,5137,31",
                      "text": "3,5137,38,82:3,5138,8,197",
                      "type": "3,5137,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5144,32,5",
                      "type": "3,5144,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5146,0",
                  "text": "3,5127,8,221"
                }
              },
              {
                "$type": "method",
                "name": "setStyle",
                "text": "Sets the style for this Component's primary element.\n\nStyles should be a valid DOM element style property.\n[Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)\n(_along with the supported CSS version for each_)\n\n    var name = Ext.create({\n        xtype: 'component',\n        renderTo: Ext.getBody(),\n        html: 'Phineas Flynn'\n    });\n\n    // two-param syntax\n    name.setStyle('color', 'white');\n\n    // single-param syntax\n    name.setStyle({\n        fontWeight: 'bold',\n        backgroundColor: 'gray',\n        padding: '10px'\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The style property to be set, or an object of\nmultiple styles.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,5221,31",
                      "text": "3,5221,40,46:3,5222,8,17",
                      "type": "3,5221,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to apply to the given property, or null if an\nobject was passed.\n",
                    "type": "String",
                    "src": {
                      "name": "3,5223,25",
                      "text": "3,5223,32,56:3,5224,8,19",
                      "type": "3,5223,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5225,32,5",
                      "type": "3,5225,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5227,0",
                  "text": "3,5199,8,568"
                }
              },
              {
                "$type": "method",
                "name": "setTabIndex",
                "text": "Set the tabIndex property for this Focusable. If the focusEl\nis avalable, set tabIndex attribute on it, too.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newTabIndex",
                    "text": "new tabIndex to set\n",
                    "type": "Number",
                    "src": {
                      "name": "11,463,24",
                      "text": "11,463,36,20",
                      "type": "11,463,16"
                    }
                  }
                ],
                "src": {
                  "name": "11,465,0",
                  "text": "11,460,8,110"
                }
              },
              {
                "$type": "method",
                "name": "setTitle",
                "text": "Sets the title of this panel.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "title",
                    "text": "The new title\n",
                    "type": "String",
                    "src": {
                      "name": "6,3244,24",
                      "text": "6,3244,30,14",
                      "type": "6,3244,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,3246,0",
                  "text": "6,3243,8,30"
                }
              },
              {
                "$type": "method",
                "inheritdoc": true,
                "name": "setUI",
                "items": [
                  {
                    "$type": "param",
                    "name": "ui",
                    "src": {
                      "name": "6,3295,0"
                    }
                  }
                ],
                "src": {
                  "inheritdoc": "6,3293,8",
                  "name": "6,3295,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setupFramingTpl",
                "text": "Inject a reference to the function which applies the render template into the framing template. The framing template\nwraps the content.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "frameTpl",
                    "src": {
                      "name": "22,1411,0"
                    }
                  }
                ],
                "src": {
                  "access": "22,1407,12",
                  "name": "22,1411,0",
                  "text": "22,1408,12,136"
                }
              },
              {
                "$type": "method",
                "name": "setVisible",
                "since": "1.1.0",
                "text": "Convenience function to hide or show this component by Boolean.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "visible",
                    "text": "`true` to show, `false` to hide.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,5291,25",
                      "text": "3,5291,33,33",
                      "type": "3,5291,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5292,32,5",
                      "type": "3,5292,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5295,0",
                  "since": "3,5293,15",
                  "text": "3,5290,8,64"
                }
              },
              {
                "$type": "method",
                "name": "setWidth",
                "text": "Sets the width of the component. This method fires the {@link #event!resize #resize} event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width to set. This may be one of:\n\n  - A Number specifying the new width in pixels.\n  - A String used to set the CSS width style.\n  - `{@link undefined}` to leave the width unchanged.\n  - `{@link null}` to clear the width.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,5312,24",
                      "text": "3,5312,30,42:3,5313,8,174",
                      "type": "3,5312,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5319,32,5",
                      "type": "3,5319,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5321,0",
                  "text": "3,5310,8,79"
                }
              },
              {
                "$type": "method",
                "name": "setX",
                "text": "Sets the X position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The X position\n",
                    "type": "Number",
                    "src": {
                      "name": "21,139,24",
                      "text": "21,139,26,15",
                      "type": "21,139,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "21,140,40,5",
                      "type": "21,140,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,142,0",
                  "text": "21,138,8,66"
                }
              },
              {
                "$type": "method",
                "name": "setXY",
                "text": "Sets the position of the DOM element in page coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pos",
                    "text": "Contains X & Y [x, y] values for new position (coordinates\nare page-based)\n",
                    "type": "Number[]",
                    "src": {
                      "name": "21,148,26",
                      "text": "21,148,30,59:21,149,8,16",
                      "type": "21,148,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "21,150,40,5",
                      "type": "21,150,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,152,0",
                  "text": "21,147,8,58"
                }
              },
              {
                "$type": "method",
                "name": "setY",
                "text": "Sets the Y position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The Y position\n",
                    "type": "Number",
                    "src": {
                      "name": "21,158,24",
                      "text": "21,158,26,15",
                      "type": "21,158,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "21,159,40,5",
                      "type": "21,159,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,161,0",
                  "text": "21,157,8,66"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setZIndex",
                "text": "z-index is managed by the zIndexManager and may be overwritten at any time.\nReturns the next z-index to be used.\n\nIf this is a Container, then it will have rebased any managed floating Components,\nand so the next available z-index will be approximately 10000 above that.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "src": {
                      "name": "1,376,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,369,8",
                  "name": "1,376,0",
                  "text": "1,370,8,271"
                }
              },
              {
                "$type": "method",
                "name": "show",
                "text": "Shows this Component, rendering it first if {@link #cfg!autoRender #autoRender} or {@link #cfg!floating #cfg-floating} are `true`.\n\nAfter being shown, a {@link #cfg!floating #cfg-floating} Component (such as a {@link Ext.window.Window}), is activated it and\nbrought to the front of its {@link #property!zIndexManager #zIndexManager}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "text": "**only valid for {@link #cfg!floating #cfg-floating} Components such as {@link Ext.window.Window}s or {@link Ext.tip.ToolTip}s, or regular Components which have been configured\nwith `floating: true`.** The target from which the Component should animate from while opening.\n",
                    "type": "String/Ext.dom.Element",
                    "value": "null",
                    "src": {
                      "name": "3,5331,41",
                      "text": "3,5331,61,65:3,5332,8,209",
                      "type": "3,5331,16",
                      "value": "3,5331,55"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "A callback function to call after the Component is displayed.\nOnly necessary if animation was specified.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,5334,27",
                      "text": "3,5334,37,62:3,5335,8,43",
                      "type": "3,5334,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the callback is executed.\nDefaults to this Component.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,5336,25",
                      "text": "3,5336,32,64:3,5337,8,28",
                      "type": "3,5336,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5338,32,5",
                      "type": "3,5338,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5340,0",
                  "text": "3,5326,8,281"
                }
              },
              {
                "$type": "method",
                "name": "showAt",
                "text": "Displays component at specific xy position.\nA floating component (like a menu) is positioned relative to its ownerCt if any.\nUseful for popping up a context menu:\n\n    listeners: {\n        itemcontextmenu: function(view, record, item, index, event, options) {\n            Ext.create('Ext.menu.Menu', {\n                width: 100,\n                height: 100,\n                margin: '0 0 10 0',\n                items: [{\n                    text: 'regular item 1'\n                },{\n                    text: 'regular item 2'\n                },{\n                    text: 'regular item 3'\n                }]\n            }).showAt(event.getXY());\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new x position or array of `[x,y]`.\n",
                    "type": "Number/Number[]",
                    "src": {
                      "name": "3,5427,33",
                      "text": "3,5427,35,40",
                      "type": "3,5427,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The new y position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,5428,25",
                      "text": "3,5428,28,19",
                      "type": "3,5428,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "True to animate the Component into its new position. You may also pass an\nanimation configuration.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5429,33",
                      "text": "3,5429,42,74:3,5430,8,25",
                      "type": "3,5429,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5431,32,5",
                      "type": "3,5431,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5433,0",
                  "text": "3,5406,8,664"
                }
              },
              {
                "$type": "method",
                "name": "showBy",
                "text": "Shows this component by the specified {@link Ext.Component} or {@link Ext.dom.Element}.\nUsed when this component is {@link #cfg!floating #cfg-floating}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The {@link Ext.Component} or {@link Ext.dom.Element} to show the component by.\n",
                    "type": "Ext.Component/Ext.dom.Element",
                    "src": {
                      "name": "3,5454,47",
                      "text": "3,5454,57,79",
                      "type": "3,5454,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "Alignment position as used by {@link Ext.util.Positionable#method!getAlignToXY Ext.util.Positionable#getAlignToXY}.\nDefaults to `{@link #cfg!defaultAlign #defaultAlign}`. See {@link #method!alignTo #alignTo} for possible values.\n",
                    "type": "String",
                    "src": {
                      "name": "3,5455,25",
                      "text": "3,5455,35,74:3,5456,8,79",
                      "type": "3,5455,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "offsets",
                    "optional": true,
                    "text": "Alignment offsets as used by {@link Ext.util.Positionable#method!getAlignToXY Ext.util.Positionable#getAlignToXY}. See {@link #method!alignTo #alignTo} for possible values.\n",
                    "type": "Number[]",
                    "src": {
                      "name": "3,5457,27",
                      "text": "3,5457,36,115",
                      "type": "3,5457,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5458,32,5",
                      "type": "3,5458,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5460,0",
                  "text": "3,5452,8,157"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "slideOutFloatedPanelBegin",
                "text": "This method begins the slide out of the floated panel.\n",
                "src": {
                  "access": "6,3903,12",
                  "name": "6,3905,0",
                  "text": "6,3902,12,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "slideOutFloatedPanelEnd",
                "text": "This method cleans up after the slide out of the floated panel.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "suppressEvents",
                    "src": {
                      "name": "6,3925,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,3923,12",
                  "name": "6,3925,0",
                  "text": "6,3922,12,64"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "20,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "20,1160,12",
                  "name": "20,1163,0",
                  "text": "20,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "stopAnimation",
                "text": "Stops any running effects and clears this object's internal effects queue if it contains any additional effects\nthat haven't started yet.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "23,328,34,12",
                      "type": "23,328,17"
                    }
                  }
                ],
                "src": {
                  "name": "23,330,0",
                  "text": "23,326,8,138"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Replaced by {@link #stopAnimation}\n",
                "deprecatedVersion": "4.0",
                "name": "stopFx",
                "text": "Stops any running effects and clears this object's internal effects queue if it contains any additional effects\nthat haven't started yet.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "23,320,34,12",
                      "type": "23,320,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "23,319,8",
                  "deprecatedVersion": "23,319,8",
                  "name": "23,323,0",
                  "text": "23,317,8,138"
                }
              },
              {
                "$type": "method",
                "name": "suspendChartLayout",
                "text": "Suspends chart's layout.\n",
                "src": {
                  "name": "5,582,0",
                  "text": "5,580,8,25"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n{@link #method!resumeEvent #resumeEvent} will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "13,1381,32",
                      "text": "13,1381,42,33",
                      "type": "13,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "13,1383,0",
                  "text": "13,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see {@link #method!resumeEvents #resumeEvents})\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the {@link #method!resumeEvents #resumeEvents} call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "13,1363,28",
                      "text": "13,1363,43,48:13,1364,11,81",
                      "type": "13,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "13,1366,0",
                  "text": "13,1361,11,64"
                }
              },
              {
                "$type": "method",
                "name": "suspendThicknessChanged",
                "text": "Prevent axes from triggering chart layout when their thickness changes.\nE.g. during an interaction that makes changes to the axes,\nor when chart layout was triggered by something else,\nfor example a chart resize event.\n",
                "src": {
                  "name": "5,647,0",
                  "text": "5,642,8,219"
                }
              },
              {
                "$type": "method",
                "name": "syncFx",
                "text": "Ensures that all effects queued after syncFx is called on this object are run concurrently. This is the opposite\nof {@link #method!sequenceFx #sequenceFx}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Object",
                    "src": {
                      "text": "23,338,25,5",
                      "type": "23,338,17"
                    }
                  }
                ],
                "src": {
                  "name": "23,340,0",
                  "text": "23,336,8,137"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "syncHidden",
                "text": "synchronizes the hidden state of this component with the state of its hierarchy\n",
                "src": {
                  "access": "1,345,8",
                  "name": "1,347,0",
                  "text": "1,344,8,80"
                }
              },
              {
                "$type": "method",
                "name": "toBack",
                "text": "Sends this Component to the back of (lower z-index than) any other visible windows\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "1,507,32,5",
                      "type": "1,507,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,509,0",
                  "text": "1,506,8,83"
                }
              },
              {
                "$type": "method",
                "name": "toFront",
                "text": "Brings this floating Component to the front of any other visible, floating Components managed by the same\n{@link Ext.ZIndexManager}\n\nIf this Component is modal, inserts the modal mask just below this Component in the z-index stack.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "preventFocus",
                    "optional": true,
                    "text": "Specify `true` to prevent the Component from being focused.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,446,26",
                      "text": "1,446,46,60",
                      "type": "1,446,16",
                      "value": "1,446,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "1,447,32,5",
                      "type": "1,447,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,449,0",
                  "text": "1,441,8,247"
                }
              },
              {
                "$type": "method",
                "name": "toggleCollapse",
                "text": "Shortcut for performing an {@link #method!expand #method-expand} or {@link #method!collapse #method-collapse} based on the current state of the panel.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.panel.Panel",
                    "src": {
                      "text": "6,3307,34,5",
                      "type": "6,3307,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,3309,0",
                  "text": "6,3306,8,119"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "26,235,21,32",
                      "type": "26,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "26,226,12",
                  "text": "26,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "26,297,21,32",
                      "type": "26,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "26,239,12",
                  "text": "26,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "translatePoints",
                "text": "Translates the passed page coordinates into left/top css values for the element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The page x or an array containing [x, y]\n",
                    "type": "Number/Array",
                    "src": {
                      "name": "21,892,30",
                      "text": "21,892,32,41",
                      "type": "21,892,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The page y, required if x is not an array\n",
                    "type": "Number",
                    "src": {
                      "name": "21,893,25",
                      "text": "21,893,28,42",
                      "type": "21,893,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with left and top properties. e.g.\n{left: (value), top: (value)}\n",
                    "type": "Object",
                    "src": {
                      "text": "21,894,25,45:21,895,8,30",
                      "type": "21,894,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,897,0",
                  "text": "21,891,8,80"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "translateXY",
                "text": "Translates the passed page coordinates into x and y css values for the element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The page x or an array containing [x, y]\n",
                    "type": "Number/Array",
                    "src": {
                      "name": "21,908,30",
                      "text": "21,908,32,41",
                      "type": "21,908,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The page y, required if x is not an array\n",
                    "type": "Number",
                    "src": {
                      "name": "21,909,25",
                      "text": "21,909,28,42",
                      "type": "21,909,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with x and y properties. e.g.\n{x: (value), y: (value)}\n",
                    "type": "Object",
                    "src": {
                      "text": "21,910,25,40:21,911,8,25",
                      "type": "21,910,17"
                    }
                  }
                ],
                "src": {
                  "access": "21,912,8",
                  "name": "21,914,0",
                  "text": "21,907,8,79"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for {@link #method!removeListener #removeListener}.\n",
                "src": {
                  "inheritdoc": "13,1781,12",
                  "name": "13,1783,0",
                  "text": "13,1780,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "13,1218,44",
                      "text": "13,1218,54,55",
                      "type": "13,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "13,1219,37",
                      "text": "13,1219,40,23",
                      "type": "13,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1220,29",
                      "text": "13,1220,36,41",
                      "type": "13,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1221,29",
                      "text": "13,1221,38,22",
                      "type": "13,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,1223,0",
                  "text": "13,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "13,1204,44",
                      "text": "13,1204,54,55",
                      "type": "13,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "13,1205,37",
                      "text": "13,1205,40,23",
                      "type": "13,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1206,29",
                      "text": "13,1206,36,41",
                      "type": "13,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,1207,29",
                      "text": "13,1207,38,22",
                      "type": "13,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "13,1209,0",
                  "text": "13,1200,12,98"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unghost",
                "items": [
                  {
                    "$type": "param",
                    "name": "show",
                    "src": {
                      "name": "6,3521,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "matchPosition",
                    "src": {
                      "name": "6,3521,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "focus",
                    "src": {
                      "name": "6,3521,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,3519,8",
                  "name": "6,3521,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "20,1589,30",
                      "text": "20,1589,36,44",
                      "type": "20,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "20,1590,31,5",
                      "type": "20,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "20,1591,12",
                  "name": "20,1593,0",
                  "text": "20,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "unmask",
                "text": "Removes the mask applied by {@link #method!mask #mask}\n",
                "src": {
                  "name": "3,5508,0",
                  "text": "3,5506,8,42"
                }
              },
              {
                "$type": "method",
                "name": "up",
                "text": "Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed selector or component.\n\n*Important.* There is not a universal upwards navigation pointer. There are several upwards relationships\nsuch as the {@link Ext.button.Button} which activates a {@link Ext.button.Button#cfg!menu Ext.button.Button#cfg-menu}, or the\n{@link Ext.menu.Item} which activated a {@link Ext.menu.Item#cfg!menu Ext.menu.Item#cfg-menu}, or the\n{@link Ext.grid.column.Column} which activated the column menu.\n\nThese differences are abstracted away by this method.\n\nExample:\n\n    var owningTabPanel = grid.up('tabpanel');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "The selector component or actual component to test. If not passed the immediate owner/activator is returned.\n",
                    "type": "String/Ext.Component",
                    "src": {
                      "name": "3,5535,39",
                      "text": "3,5535,49,109",
                      "type": "3,5535,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "limit",
                    "optional": true,
                    "text": "This may be a selector upon which to stop the upward scan, or a limit of the number of steps, or Component reference to stop on.\n",
                    "type": "String/Number/Ext.Component",
                    "src": {
                      "name": "3,5536,46",
                      "text": "3,5536,53,129",
                      "type": "3,5536,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching ancestor Container (or `{@link undefined}` if no match was found).\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "text": "3,5537,42,72",
                      "type": "3,5537,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5539,0",
                  "text": "3,5522,8,627"
                }
              },
              {
                "$type": "method",
                "name": "update",
                "since": "3.4.0",
                "text": "Update the content area of a component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "htmlOrData",
                    "text": "If this component has been configured with a\ntemplate via the tpl config then it will use this argument as data to populate the\ntemplate. If this component was not configured with a template, the components\ncontent area will be updated via Ext.Element update.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,5576,31",
                      "text": "3,5576,42,45:3,5577,8,215",
                      "type": "3,5576,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "loadScripts",
                    "optional": true,
                    "text": "Only legitimate when using the `{@link #cfg!html html}`\nconfiguration. Causes embedded script tags to be executed. Inline source will be executed\nwith this Component as the scope (`this` reference).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,5580,26",
                      "text": "3,5580,45,38:3,5581,8,143",
                      "type": "3,5580,16",
                      "value": "3,5580,38"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "Only legitimate when using the `{@link #cfg!html html}` configuration.\nCallback to execute when scripts have finished loading.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,5583,27",
                      "text": "3,5583,37,53:3,5584,8,56",
                      "type": "3,5583,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scriptScope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which to\nexecute *inline* script elements content. Scripts with a `src` attribute cannot\nbe executed with this scope.\n",
                    "type": "Object",
                    "value": "`this`",
                    "src": {
                      "name": "3,5585,25",
                      "text": "3,5585,45,41:3,5586,8,110",
                      "type": "3,5585,16",
                      "value": "3,5585,37"
                    }
                  }
                ],
                "src": {
                  "name": "3,5591,0",
                  "since": "3,5589,15",
                  "text": "3,5575,8,40"
                }
              },
              {
                "$type": "method",
                "name": "updateBox",
                "text": "Sets the current box measurements of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "text": "An object in the format {x, y, width, height}\n",
                    "type": "Object",
                    "src": {
                      "name": "3,5647,24",
                      "text": "3,5647,28,46",
                      "type": "3,5647,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5648,32,5",
                      "type": "3,5648,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5650,0",
                  "text": "3,5646,8,73"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateFrame",
                "text": "Updates the frame elements to match new framing. The current `frameBody` is\npreserved by transplanting it into the new frame. All other frame `{@link #cfg!childEls childEls}`\nare destroyed and recreated if needed by the new frame. This method cannot\ntransition from framed to non-framed or vise-versa or between table and div\nbased framing.\n",
                "src": {
                  "access": "22,1427,12",
                  "name": "22,1429,0",
                  "text": "22,1422,12,319"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateHeader",
                "text": "Create, hide, or show the header component as appropriate based on the current config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "force",
                    "text": "True to force the header to be created\n",
                    "type": "Boolean",
                    "src": {
                      "name": "6,3550,25",
                      "text": "6,3550,31,39",
                      "type": "6,3550,16"
                    }
                  }
                ],
                "src": {
                  "access": "6,3549,8",
                  "name": "6,3552,0",
                  "text": "6,3548,8,87"
                }
              },
              {
                "$type": "method",
                "name": "updateLayout",
                "text": "Updates this component's layout. If this update affects this components {@link #property!ownerCt #ownerCt},\nthat component's `{@link #method!updateLayout updateLayout}` method will be called to perform the layout instead.\nOtherwise, just this component (and its child items) will layout.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object with layout options.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "defer",
                        "text": "`true` if this layout should be deferred.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,5665,33",
                          "text": "3,5665,39,42",
                          "type": "3,5665,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "isRoot",
                        "text": "`true` if this layout should be the root of the layout.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,5666,33",
                          "text": "3,5666,40,56",
                          "type": "3,5666,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "3,5664,25",
                      "text": "3,5664,34,31",
                      "type": "3,5664,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,5668,0",
                  "text": "3,5660,8,242"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateSession",
                "text": "Updates the session config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "session",
                    "type": "Ext.data.Session",
                    "src": {
                      "name": "8,814,38",
                      "type": "8,814,20"
                    }
                  }
                ],
                "src": {
                  "access": "8,815,12",
                  "name": "8,817,0",
                  "text": "8,813,12,28"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateViewModel",
                "text": "Updates the viewModel config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "viewModel",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "name": "8,829,39",
                      "type": "8,829,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldViewModel",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "name": "8,830,39",
                      "type": "8,830,20"
                    }
                  }
                ],
                "src": {
                  "access": "8,831,12",
                  "name": "8,833,0",
                  "text": "8,828,12,30"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "26,340,21,50",
                      "type": "26,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "26,301,12",
                  "text": "26,302,4,1821"
                }
              },
              {
                "$type": "method",
                "name": "visitPostOrder",
                "text": "Traverses the tree rooted at this node in post-order mode, calling the passed function on the nodes at each level.\nThat is the function is called upon each node **after** being called on its children).\n\nThis method is used at each level down the cascade. Currently {@link Ext.Component}s\nand {@link Ext.data.TreeModel}s are queryable.\n\nIf you have tree-structured data, you can make your nodes queryable, and use ComponentQuery on them.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "A ComponentQuery selector used to filter candidate nodes before calling the function.\nAn empty string matches any node.\n",
                    "type": "Object",
                    "src": {
                      "name": "24,131,24",
                      "text": "24,131,33,86:24,132,8,34",
                      "type": "24,131,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call. Return `false` to aborl the traverse.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "node",
                        "text": "The node being visited.\n",
                        "type": "Object",
                        "src": {
                          "name": "24,134,27",
                          "text": "24,134,32,24",
                          "type": "24,134,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "24,133,26",
                      "text": "24,133,29,60",
                      "type": "24,133,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The context (`this` reference) in which the function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "24,135,25",
                      "text": "24,135,32,66",
                      "type": "24,135,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraArgs",
                    "optional": true,
                    "text": "A set of arguments to be appended to the function's argument list to pass down extra data known to the caller\n**after** the node being visited.\n",
                    "type": "Array",
                    "src": {
                      "name": "24,136,24",
                      "text": "24,136,35,110:24,137,8,34",
                      "type": "24,136,16"
                    }
                  }
                ],
                "src": {
                  "name": "24,139,0",
                  "text": "24,123,8,458"
                }
              },
              {
                "$type": "method",
                "name": "visitPreOrder",
                "text": "Traverses the tree rooted at this node in pre-order mode, calling the passed function on the nodes at each level.\nThat is the function is called upon each node **before** being called on its children).\n\nThis method is used at each level down the cascade. Currently {@link Ext.Component}s\nand {@link Ext.data.TreeModel}s are queryable.\n\nIf you have tree-structured data, you can make your nodes queryable, and use ComponentQuery on them.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "A ComponentQuery selector used to filter candidate nodes before calling the function.\nAn empty string matches any node.\n",
                    "type": "Object",
                    "src": {
                      "name": "24,110,24",
                      "text": "24,110,33,86:24,111,8,34",
                      "type": "24,110,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call. Return `false` to aborl the traverse.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "node",
                        "text": "The node being visited.\n",
                        "type": "Object",
                        "src": {
                          "name": "24,113,27",
                          "text": "24,113,32,24",
                          "type": "24,113,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "24,112,26",
                      "text": "24,112,29,60",
                      "type": "24,112,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The context (`this` reference) in which the function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "24,114,25",
                      "text": "24,114,32,66",
                      "type": "24,114,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraArgs",
                    "optional": true,
                    "text": "A set of arguments to be appended to the function's argument list to pass down extra data known to the caller\n**after** the node being visited.\n",
                    "type": "Array",
                    "src": {
                      "name": "24,115,24",
                      "text": "24,115,35,110:24,116,8,34",
                      "type": "24,115,16"
                    }
                  }
                ],
                "src": {
                  "name": "24,118,0",
                  "text": "24,102,8,458"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "20,1049,13",
                  "name": "20,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "20,1066,12",
                  "name": "20,1062,33",
                  "since": "20,1067,19",
                  "text": "20,1063,12,225",
                  "type": "20,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "20,1076,12",
                  "name": "20,1072,33",
                  "since": "20,1077,19",
                  "text": "20,1073,12,229",
                  "type": "20,1072,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "13,389,12",
                  "name": "13,392,0",
                  "text": "13,390,12,126"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "_applyDefaultsOptions",
                "src": {
                  "access": "2,667,8",
                  "name": "2,669,0"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "_isLayoutRoot",
                "optional": true,
                "text": "Setting this property to `true` causes the {@link #method!isLayoutRoot #isLayoutRoot} method to return\n`true` and stop the search for the top-most component for a layout.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "access": "3,1530,8",
                  "name": "3,1527,29",
                  "text": "3,1528,8,150",
                  "type": "3,1527,19",
                  "value": "3,1527,43"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "_renderState",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property holds one of the following values during the render process:\n\n  * **0** - The component is not rendered.\n  * **1** - The component has fired beforerender and is about to call beforeRender.\n   The component has just started rendering.\n  * **2** - The component has finished the `{@link #method!beforeRender beforeRender}` process and is about to\n   call `{@link #method!onRender onRender}`. This is when `rendering` is set to `true`.\n  * **3** - The component has started `{@link #method!onRender onRender}`. This is when `{@link #property!rendered rendered}` is set\n   to `true`.\n  * **4** - The component has finished its afterrender process.\n",
                "type": "Number",
                "src": {
                  "access": "22,136,8",
                  "name": "22,124,27",
                  "readonly": "22,137,8",
                  "since": "22,138,15",
                  "text": "22,125,8,553",
                  "type": "22,124,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "addTools",
                "text": "Template method to be implemented in subclasses to add their tools after the collapsible tool.\n",
                "src": {
                  "access": "6,1114,8",
                  "name": "6,1118,0",
                  "text": "6,1116,8,95"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "allowDomMove",
                "src": {
                  "access": "3,1444,8",
                  "name": "3,1446,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "animationSuspendCount",
                "text": "Toggle for chart interactions that require animation to be suspended.\n",
                "src": {
                  "access": "5,447,8",
                  "name": "5,449,0",
                  "text": "5,446,8,70"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "ariaEl",
                "optional": true,
                "readonly": true,
                "since": "5.5.0",
                "text": "The name of the Component property that holds\na reference to the Element that serves as that Component's ARIA element.\nThis property will be replaced with the actual Element reference after rendering.\n\nMost of the simple Components will have their main element as ariaEl.\n",
                "type": "String",
                "value": "'el'",
                "src": {
                  "access": "22,149,8",
                  "name": "22,143,28",
                  "readonly": "22,150,8",
                  "since": "22,151,15",
                  "text": "22,143,41,46:22,144,8,227",
                  "type": "22,143,19",
                  "value": "22,143,35"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "ariaRenderAttributes",
                "optional": true,
                "text": "**Instance specific** ARIA attributes\nto render into Component's ariaEl. This object is only used during rendering,\nand is discarded afterwards.\n",
                "type": "Object",
                "src": {
                  "access": "7,64,8",
                  "name": "7,60,28",
                  "text": "7,60,50,38:7,61,8,108",
                  "type": "7,60,19"
                }
              },
              {
                "$type": "property",
                "name": "ariaRole",
                "optional": true,
                "readonly": true,
                "text": "ARIA role for this Component, defaults to no role.\nWith no role, no other ARIA attributes are set.\n",
                "type": "String",
                "src": {
                  "name": "7,53,28",
                  "readonly": "7,56,8",
                  "text": "7,53,38,51:7,54,8,49",
                  "type": "7,53,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "autoGenId",
                "text": "`true` indicates an `{@link #cfg!id id}` was auto-generated rather than provided by configuration.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1451,8",
                  "name": "3,1449,28",
                  "text": "3,1450,8,83",
                  "type": "3,1449,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "axisThicknessSuspendCount",
                "src": {
                  "access": "5,457,8",
                  "name": "5,459,0"
                }
              },
              {
                "$type": "property",
                "name": "body",
                "readonly": true,
                "text": "The Panel's body {@link Ext.dom.Element} which may be used to contain HTML content.\nThe content may be specified in the {@link #cfg!html #html} config, or it may be loaded using the\n{@link #cfg!loader #loader} config. Read-only.\n\nIf this is used to load visible HTML elements in either way, then\nthe Panel may not be used as a Layout for hosting nested Panels.\n\nIf this Panel is intended to be used as the host of a Layout (See {@link #cfg!layout #layout}\nthen the body Element must not be loaded or changed - it is under the control\nof the Panel's Layout.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "name": "6,896,36",
                  "readonly": "6,908,8",
                  "text": "6,897,8,532",
                  "type": "6,896,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "borderBoxCls",
                "src": {
                  "access": "3,1456,8",
                  "name": "3,1458,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "chartLayoutSuspendCount",
                "src": {
                  "access": "5,452,8",
                  "name": "5,454,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "componentLayoutCounter",
                "text": "The number of component layout calls made on this object.\n",
                "type": "Number",
                "src": {
                  "access": "3,1462,8",
                  "name": "3,1461,27",
                  "text": "3,1463,8,58",
                  "type": "3,1461,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "26,346,14",
                  "text": "26,347,3,1996"
                }
              },
              {
                "$type": "property",
                "inheritdoc": true,
                "name": "contentPaddingProperty",
                "optional": true,
                "type": "String",
                "value": "'bodyPadding'",
                "src": {
                  "inheritdoc": "6,920,8",
                  "name": "6,919,28",
                  "type": "6,919,19",
                  "value": "6,919,51"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "convertPositionSpec",
                "text": "By default this method does nothing but return the position spec passed to it. In\nrtl mode it is overridden to convert \"l\" to \"r\" and vice versa when required.\n",
                "src": {
                  "access": "21,312,8",
                  "name": "21,314,0",
                  "text": "21,310,8,160"
                }
              },
              {
                "$type": "property",
                "name": "dd",
                "text": "\nOnly present if this Panel has been configured with {@link #cfg!draggable #cfg-draggable} `true`.\n\n##Simple dragging##\n\nIf this Panel is configured {@link #cfg!simpleDrag #cfg-simpleDrag} `true` (the default is `false`), this property\nwill reference an instance of {@link Ext.util.ComponentDragger} (A subclass of\n{@link Ext.dd.DragTracker}) which handles moving the Panel's DOM Element,\nand constraining according to the {@link #cfg!constrain #constrain} and {@link #cfg!constrainHeader #constrainHeader} .\n\nThis object fires various events during its lifecycle and during a drag operation.\n\n##Complex dragging interacting with other DragDrop instances##\n\nBy default, this property in a {@link #cfg!draggable #cfg-draggable} Panel will contain an instance of {@link Ext.dd.DragSource} which handles dragging the Panel.\n\nThe developer must provide implementations of the abstract methods of {@link Ext.dd.DragSource} in order to\nsupply behaviour for each stage of the drag/drop process.\n\nSee also {@link #cfg!draggable #cfg-draggable}.\n",
                "type": "Ext.dd.DragSource/Ext.util.ComponentDragger",
                "src": {
                  "name": "6,3779,76",
                  "text": "6,3780,20,698:6,3795,23,53:6,3796,20,201",
                  "type": "6,3779,31"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "defaultBindProperty",
                "optional": true,
                "text": "This property is used to determine the property of a `{@link #cfg!bind bind}` config that is just\nthe value. For example, if `defaultBindProperty=\"value\"`, then this shorthand\n`{@link #cfg!bind bind}` config:\n\n     bind: '{name}'\n\nIs equivalent to this object form:\n\n     bind: {\n         value: '{name}'\n     }\n\nThe `{@link #property!defaultBindProperty defaultBindProperty}` is set to \"value\" for form fields and to \"store\" for\ngrids and trees.\n",
                "type": "String",
                "src": {
                  "access": "8,295,8",
                  "name": "8,280,28",
                  "text": "8,281,8,373",
                  "type": "8,280,19"
                }
              },
              {
                "$type": "property",
                "name": "defaultDownloadServerUrl",
                "optional": true,
                "text": "The default URL used by {@link #method!download #download}.\n",
                "type": "String",
                "value": "\"http://svg.sencha.io\"",
                "src": {
                  "name": "10,197,28",
                  "text": "10,198,8,43",
                  "type": "10,197,19",
                  "value": "10,197,53"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "deferLayouts",
                "src": {
                  "access": "3,1475,8",
                  "name": "3,1477,0"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `destroy` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "20,1102,12",
                  "name": "20,1100,32",
                  "text": "20,1101,12,69",
                  "type": "20,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dockOrder",
                "text": "Values to decide which side of the body element docked items must go\nThis overides any weight. A left/top will *always* sort before a right/bottom\nregardless of any weight value. Weights sort at either side of the \"body\" dividing point.\n",
                "src": {
                  "access": "9,66,8",
                  "name": "9,71,0",
                  "text": "9,67,8,237"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when {@link #method!suspendEvents #suspendEvents} is called, decremented when {@link #method!resumeEvents #resumeEvents} is called.\n",
                "src": {
                  "access": "13,284,11",
                  "name": "13,287,0",
                  "text": "13,285,11,131"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "floating",
                "readonly": true,
                "text": "The value `true` indicates that this Component is floating.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,64,8",
                  "name": "1,62,28",
                  "readonly": "1,65,8",
                  "text": "1,63,8,60",
                  "type": "1,62,19"
                }
              },
              {
                "$type": "property",
                "name": "floatingItems",
                "since": "4.1.0",
                "text": "The MixedCollection containing all the floating child items of this container.\nWill be `{@link undefined}` if there are no floating child items.\n",
                "type": "Ext.util.MixedCollection",
                "src": {
                  "name": "2,1305,53",
                  "since": "2,1306,23",
                  "text": "2,1303,16,137",
                  "type": "2,1305,27"
                }
              },
              {
                "$type": "property",
                "name": "floatParent",
                "readonly": true,
                "text": "**Only present for {@link #cfg!floating #cfg-floating} Components which were inserted as child items of Containers.**\n\nThere are other similar relationships such as the {@link Ext.button.Button} which activates a {@link Ext.button.Button#cfg!menu Ext.button.Button#cfg-menu}, or the\n{@link Ext.menu.Item} which activated a {@link Ext.menu.Item#cfg!menu Ext.menu.Item#cfg-menu}, or the\n{@link Ext.grid.column.Column} which activated the column menu.\n\nThese differences are abstracted away by the {@link #method!up #up} method.\n\nFloating Components that are programmatically {@link Ext.Component#method!render Ext.Component#method-render} will not have a `{@link #property!floatParent floatParent}`\nproperty.\n\nSee {@link #cfg!floating #cfg-floating} and {@link #property!zIndexManager #zIndexManager}\n",
                "type": "Ext.container.Container",
                "src": {
                  "name": "3,1480,34",
                  "readonly": "3,1493,8",
                  "text": "3,1481,8,681",
                  "type": "3,1480,19"
                }
              },
              {
                "$type": "property",
                "name": "focusable",
                "readonly": true,
                "text": "\n`true` for interactive Components, `false` for static Components.\nFor Containers, this property reflects interactiveness of the\nContainer itself, not its children. See {@link #method!isFocusable #isFocusable}.\n\n**Note:** Plain components are static, so not focusable.\n",
                "type": "Boolean",
                "src": {
                  "name": "11,15,28",
                  "readonly": "11,16,8",
                  "text": "11,17,8,249",
                  "type": "11,15,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "focusEl",
                "text": "The component's focusEl.\nAvailable after rendering.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "access": "11,29,8",
                  "name": "11,27,36",
                  "text": "11,27,44,25:11,28,8,27",
                  "type": "11,27,19"
                }
              },
              {
                "$type": "property",
                "name": "frameSize",
                "readonly": true,
                "text": "Indicates the width of any framing elements which were added within the encapsulating\nelement to provide graphical, rounded borders. See the {@link #cfg!frame #frame} config. This\nproperty is `{@link null}` if the component is not framed.\n\nThis is an object containing the frame width in pixels for all four sides of the\nComponent containing the following properties:\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "top",
                    "optional": true,
                    "text": "The width of the top framing element in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1506,38",
                      "text": "3,1506,45,48",
                      "type": "3,1506,19",
                      "value": "3,1506,42"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "right",
                    "optional": true,
                    "text": "The width of the right framing element in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1507,38",
                      "text": "3,1507,47,50",
                      "type": "3,1507,19",
                      "value": "3,1507,44"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "bottom",
                    "optional": true,
                    "text": "The width of the bottom framing element in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1508,38",
                      "text": "3,1508,48,51",
                      "type": "3,1508,19",
                      "value": "3,1508,45"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "left",
                    "optional": true,
                    "text": "The width of the left framing element in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1509,38",
                      "text": "3,1509,46,49",
                      "type": "3,1509,19",
                      "value": "3,1509,43"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "width",
                    "optional": true,
                    "text": "The total width of the left and right framing elements in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1510,38",
                      "text": "3,1510,47,66",
                      "type": "3,1510,19",
                      "value": "3,1510,44"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "height",
                    "optional": true,
                    "text": "The total height of the top and right bottom elements in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1511,38",
                      "text": "3,1511,48,65",
                      "type": "3,1511,19",
                      "value": "3,1511,45"
                    }
                  }
                ],
                "src": {
                  "name": "3,1497,27",
                  "readonly": "3,1498,8",
                  "text": "3,1499,8,350",
                  "type": "3,1497,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "hasFocus",
                "text": "`true` if this component has focus.\n",
                "type": "Boolean",
                "src": {
                  "access": "11,10,8",
                  "name": "11,8,28",
                  "text": "11,9,8,36",
                  "type": "11,8,19"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via {@link #observe}) or\non the {@link Ext.app.EventBus}. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "13,290,30",
                  "readonly": "13,291,11",
                  "text": "13,292,11,790",
                  "type": "13,290,22"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "horizontalDocks",
                "text": "Number of dock 'left' and 'right' items.\n",
                "src": {
                  "access": "9,79,8",
                  "name": "9,82,0",
                  "text": "9,80,8,41"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "horizontalPosProp",
                "src": {
                  "access": "3,1516,8",
                  "name": "3,1518,0"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "initFocusable",
                "text": "Template method to do any Focusable related initialization that\ndoes not involve event listeners creation.\n",
                "src": {
                  "access": "11,74,8",
                  "name": "11,76,0",
                  "text": "11,72,8,107"
                }
              },
              {
                "$type": "property",
                "name": "initialConfig",
                "readonly": true,
                "text": "The config object passed to the constructor during Component creation.\n",
                "type": "Object",
                "src": {
                  "name": "3,2014,31",
                  "readonly": "3,2015,12",
                  "text": "3,2016,12,71",
                  "type": "3,2014,23"
                }
              },
              {
                "$type": "property",
                "name": "isComponent",
                "text": "`true` in this class to identify an object as an instantiated Component, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1521,28",
                  "text": "3,1522,8,94",
                  "type": "3,1521,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "20,1084,12",
                  "name": "20,1082,32",
                  "readonly": "20,1085,12",
                  "since": "20,1086,19",
                  "text": "20,1083,12,64",
                  "type": "20,1082,23"
                }
              },
              {
                "$type": "property",
                "name": "isContainer",
                "text": "`true` in this class to identify an object as an instantiated Container, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "16,13,28",
                  "text": "16,14,8,94",
                  "type": "16,13,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "20,1093,12",
                  "name": "20,1091,32",
                  "readonly": "20,1094,12",
                  "since": "20,1095,19",
                  "text": "20,1092,12,75",
                  "type": "20,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "20,1056,12",
                  "name": "20,1053,32",
                  "readonly": "20,1057,12",
                  "text": "20,1054,12,94",
                  "type": "20,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "13,278,31",
                  "text": "13,279,11,95",
                  "type": "13,278,22"
                }
              },
              {
                "$type": "property",
                "name": "isPanel",
                "text": "`true` in this class to identify an object as an instantiated Panel, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,927,28",
                  "text": "6,928,8,90",
                  "type": "6,927,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "isThicknessChanged",
                "text": "Indicates that thickness of one or more axes has changed,\nat the time of {@link #performLayout} call. I.e. 'performLayout'\nshould be called again when current layout is done.\n",
                "src": {
                  "access": "5,462,8",
                  "name": "5,467,0",
                  "text": "5,463,8,175"
                }
              },
              {
                "$type": "property",
                "name": "items",
                "since": "2.3.0",
                "text": "The Collection containing all the child items of this container.\n",
                "type": "Ext.util.ItemCollection",
                "src": {
                  "name": "2,1297,52",
                  "since": "2,1298,23",
                  "text": "2,1296,16,65",
                  "type": "2,1297,27"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "layoutCounter",
                "text": "The number of container layout calls made on this object.\n",
                "type": "Number",
                "src": {
                  "access": "2,681,8",
                  "name": "2,679,27",
                  "text": "2,680,8,58",
                  "type": "2,679,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "layoutSuspendCount",
                "src": {
                  "access": "3,1535,8",
                  "name": "3,1537,0"
                }
              },
              {
                "$type": "property",
                "name": "maskOnDisable",
                "text": "This is an internal flag that you use when creating custom components. By default this is set to `true` which means\nthat every component gets a mask when it's disabled. Components like FieldContainer, FieldSet, Field, Button, Tab\noverride this property to `false` since they want to implement custom disable logic.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1596,28",
                  "text": "3,1597,8,315",
                  "type": "3,1596,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "offsetsCls",
                "src": {
                  "access": "3,1604,8",
                  "name": "3,1606,0"
                }
              },
              {
                "$type": "property",
                "name": "ownerCt",
                "readonly": true,
                "since": "2.3.0",
                "text": "This Component's owner {@link Ext.container.Container} (is set automatically\nwhen this Component is added to a Container).\n\n*Important.* This is not a universal upwards navigation pointer. It indicates the Container which owns and manages\nthis Component if any. There are other similar relationships such as the {@link Ext.button.Button} which activates a {@link Ext.button.Button#cfg!menu Ext.button.Button#cfg-menu}, or the\n{@link Ext.menu.Item} which activated a {@link Ext.menu.Item#cfg!menu Ext.menu.Item#cfg-menu}, or the\n{@link Ext.grid.column.Column} which activated the column menu.\n\nThese differences are abstracted away by the {@link #method!up #up} method.\n\n**Note**: to access items within the Container see {@link #cfg!itemId #itemId}.\n",
                "type": "Ext.container.Container",
                "src": {
                  "name": "3,1609,34",
                  "readonly": "3,1621,8",
                  "since": "3,1622,15",
                  "text": "3,1610,8,731",
                  "type": "3,1609,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "26,46,14",
                  "text": "26,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "recordCount",
                "text": "The number of records in the chart's store last time the data was changed.\n",
                "src": {
                  "access": "5,1602,8",
                  "name": "5,1605,0",
                  "text": "5,1603,8,75"
                }
              },
              {
                "$type": "property",
                "name": "rendered",
                "readonly": true,
                "since": "1.1.0",
                "text": "Indicates whether or not the component has been rendered.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1626,28",
                  "readonly": "3,1628,8",
                  "since": "3,1629,15",
                  "text": "3,1627,8,58",
                  "type": "3,1626,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "rootCls",
                "src": {
                  "access": "3,1634,8",
                  "name": "3,1636,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "scrollerCls",
                "src": {
                  "access": "3,1639,8",
                  "name": "3,1641,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "scrollFlags",
                "readonly": true,
                "text": "An object property which provides unified information as to which dimensions are\nscrollable based upon the {@link #cfg!scrollable #scrollable} settings (And for *views* of trees and\ngrids, the owning panel's {@link Ext.panel.Table#cfg!scroll Ext.panel.Table#scroll} setting).\n\nNote that if you set overflow styles using the {@link #cfg!style #style} config or\n{@link Ext.panel.Panel#cfg!bodyStyle Ext.panel.Panel#bodyStyle} config, this object does not include\nthat information. Use {@link #cfg!scrollable #scrollable} if you need to access these flags.\n\nThis object has the following properties:\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "x",
                    "text": "`true` if this Component is scrollable\nhorizontally - style setting may be `'auto'` or `'scroll'`.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1655,40",
                      "text": "3,1655,42,39:3,1656,8,60",
                      "type": "3,1655,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "y",
                    "text": "`true` if this Component is scrollable\nvertically - style setting may be `'auto'` or `'scroll'`.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1657,40",
                      "text": "3,1657,42,39:3,1658,8,58",
                      "type": "3,1657,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "both",
                    "text": "`true` if this Component is scrollable both\nhorizontally and vertically.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1659,40",
                      "text": "3,1659,45,44:3,1660,8,29",
                      "type": "3,1659,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "overflowX",
                    "text": "The `overflow-x` style setting, `'auto'`\nor `'scroll'` or `''`.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1661,39",
                      "text": "3,1661,49,41:3,1662,8,23",
                      "type": "3,1661,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "overflowY",
                    "text": "The `overflow-y` style setting, `'auto'`\nor `'scroll'` or `''`.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1663,39",
                      "text": "3,1663,49,41:3,1664,8,23",
                      "type": "3,1663,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,1666,8",
                  "name": "3,1645,27",
                  "readonly": "3,1665,8",
                  "text": "3,1646,8,514",
                  "type": "3,1645,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "20,1413,12",
                  "name": "20,1379,34",
                  "text": "20,1380,12,1011",
                  "type": "20,1379,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "supportedFormats",
                "text": "[supportedFormats=[\"png\", \"pdf\", \"jpeg\", \"gif\"]]\nA list of export types supported by the server.\n",
                "type": "Array",
                "src": {
                  "access": "10,205,8",
                  "name": "10,207,0",
                  "text": "10,203,26,49:10,204,8,48",
                  "type": "10,203,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "surfaceZIndexes",
                "text": "The z-indexes to use for the various surfaces\n",
                "src": {
                  "access": "5,470,8",
                  "name": "5,473,0",
                  "text": "5,471,8,46"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "synthetic",
                "optional": true,
                "text": "This property is `true` if the component was created internally by the framework\nand is not explicitly user-defined. This is set for such things as `Splitter`\ninstances managed by `{@link #cfg!border border}` and `box` layouts.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "access": "3,1218,8",
                  "name": "3,1214,29",
                  "text": "3,1215,8,208",
                  "type": "3,1214,19",
                  "value": "3,1214,39"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "tabGuardAfterEl",
                "since": "6.0.0",
                "text": "This element reference is generated when `{@link #cfg!tabGuard #tabGuard}` is `true`. This element\nis generated after all `{@link #cfg!dockedItems dockedItems}` in the DOM.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "access": "9,97,8",
                  "name": "9,96,36",
                  "since": "9,98,15",
                  "text": "9,94,8,134",
                  "type": "9,96,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "tabGuardBeforeEl",
                "since": "6.0.0",
                "text": "This element reference is generated when `{@link #cfg!tabGuard #tabGuard}` is `true`. This element\nis generated before all `{@link #cfg!dockedItems dockedItems}` in the DOM.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "access": "9,105,8",
                  "name": "9,104,36",
                  "since": "9,106,15",
                  "text": "9,102,8,135",
                  "type": "9,104,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "tabGuardTpl",
                "since": "6.0.0",
                "text": "This template is used to generate the `{@link #cfg!tabGuard tabGuard}` elements. It is used once per\nelement (see `{@link #property!tabGuardBeforeEl #tabGuardBeforeEl}` and `{@link #property!tabGuardAfterEl #tabGuardAfterEl}`).\n",
                "type": "String/String[]/Ext.XTemplate",
                "src": {
                  "access": "9,113,8",
                  "name": "9,110,50",
                  "since": "9,114,15",
                  "text": "9,111,8,153",
                  "type": "9,110,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "validRefRe",
                "text": "Regular expression used for validating `{@link #cfg!reference reference}` values.\n",
                "type": "RegExp",
                "src": {
                  "access": "8,302,8",
                  "name": "8,304,0",
                  "text": "8,301,8,59",
                  "type": "8,300,19"
                }
              },
              {
                "$type": "property",
                "name": "zIndexManager",
                "readonly": true,
                "text": "Only present for {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} Components after\nthey have been rendered.\n\nA reference to the ZIndexManager which is managing this Component's z-index.\n\nThe {@link Ext.ZIndexManager} maintains a stack of floating Component z-indices, and also provides\na single modal mask which is insert just beneath the topmost visible modal floating Component.\n\nFloating Components may be {@link Ext.Component#method!toFront Ext.Component#toFront} or {@link Ext.Component#method!toBack Ext.Component#toBack} of the\nz-index stack.\n\nThis defaults to the global {@link Ext.WindowManager} for floating Components that are\nprogramatically {@link Ext.Component#method!render Ext.Component#method-render}.\n\nFor {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} Components that are added to a\nContainer, the ZIndexManager is acquired from the first ancestor Container found\nthat is floating. If no floating ancestor is found, the global\n{@link Ext.WindowManager} is used.\n\nSee {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} and {@link #property!zIndexParent #zIndexParent}\n",
                "type": "Ext.ZIndexManager",
                "src": {
                  "name": "1,69,38",
                  "readonly": "1,90,8",
                  "text": "1,70,8,1043",
                  "type": "1,69,19"
                }
              },
              {
                "$type": "property",
                "name": "zIndexParent",
                "readonly": true,
                "text": "Only present for {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} Components which were\ninserted as child items of Containers, and which have a floating Container in\ntheir containment ancestry.\n\nFor {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} Components which are child items of a\nContainer, the zIndexParent will be a floating ancestor Container which is\nresponsible for the base z-index value of all its floating descendants. It\nprovides a {@link Ext.ZIndexManager} which provides z-indexing\nservices for all its descendant floating Components.\n\nFloating Components that are programmatically {@link Ext.Component#method!render Ext.Component#method-render} will not have a `{@link #property!zIndexParent zIndexParent}`\nproperty.\n\nFor example, the dropdown {@link Ext.view.BoundList} of a ComboBox which is in a Window will have the\nWindow as its `{@link #property!zIndexParent zIndexParent}`, and will always show above that Window, wherever the Window is placed in the z-index stack.\n\nSee {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} and {@link #property!zIndexManager #zIndexManager}\n",
                "type": "Ext.container.Container",
                "src": {
                  "name": "1,94,34",
                  "readonly": "1,112,8",
                  "text": "1,95,8,973",
                  "type": "1,94,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "20,940,28",
                      "type": "20,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "20,941,32",
                      "text": "20,941,44,49",
                      "type": "20,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "20,942,12",
                  "inheritable": "20,944,12",
                  "name": "20,946,0",
                  "static": "20,943,12",
                  "text": "20,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "20,464,28",
                      "type": "20,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "20,461,12",
                  "inheritable": "20,463,12",
                  "name": "20,466,0",
                  "static": "20,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "20,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "20,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "20,659,12",
                  "inheritable": "20,661,12",
                  "name": "20,665,0",
                  "static": "20,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "20,522,28",
                      "text": "20,522,36,34",
                      "type": "20,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "20,523,30",
                      "text": "20,523,46,39",
                      "type": "20,523,20",
                      "value": "20,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "20,524,30",
                      "text": "20,524,45,45:20,525,12,53",
                      "type": "20,524,20",
                      "value": "20,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "20,527,12",
                  "name": "20,529,0",
                  "static": "20,526,12",
                  "text": "20,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "20,450,28",
                      "type": "20,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "20,451,31,5",
                      "type": "20,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "20,453,12",
                  "name": "20,455,0",
                  "static": "20,452,12",
                  "text": "20,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "20,693,30",
                      "text": "20,693,40,33",
                      "type": "20,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "20,694,34",
                      "text": "20,694,42,35",
                      "type": "20,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "20,695,31,5",
                      "type": "20,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "20,698,12",
                  "inheritable": "20,697,12",
                  "name": "20,700,0",
                  "static": "20,696,12",
                  "text": "20,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "20,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,810,12",
                  "inheritable": "20,812,12",
                  "name": "20,814,0",
                  "static": "20,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "20,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,824,12",
                  "inheritable": "20,826,12",
                  "name": "20,828,0",
                  "static": "20,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "20,107,29,22",
                      "type": "20,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "20,109,12",
                  "name": "20,111,0",
                  "static": "20,108,12",
                  "text": "20,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "20,1018,35",
                      "text": "20,1018,41,63:20,1019,12,43",
                      "type": "20,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "20,1020,35",
                      "text": "20,1020,42,25",
                      "type": "20,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "20,1022,12",
                  "name": "20,1025,0",
                  "static": "20,1021,12",
                  "text": "20,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "20,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "20,347,12",
                  "inheritable": "20,349,12",
                  "name": "20,352,0",
                  "static": "20,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "20,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "20,968,12",
                  "inheritable": "20,970,12",
                  "name": "20,972,0",
                  "static": "20,969,12",
                  "text": "20,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "20,989,29,10",
                      "type": "20,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "20,991,12",
                  "name": "20,993,0",
                  "static": "20,990,12",
                  "text": "20,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "20,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "20,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,840,12",
                  "inheritable": "20,842,12",
                  "name": "20,844,0",
                  "static": "20,841,12",
                  "text": "20,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "20,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "20,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,424,12",
                  "inheritable": "20,426,12",
                  "name": "20,428,0",
                  "static": "20,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "20,762,28",
                      "text": "20,762,36,52:20,763,12,66",
                      "type": "20,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "20,764,31,11",
                      "type": "20,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "20,766,12",
                  "name": "20,768,0",
                  "static": "20,765,12",
                  "text": "20,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "20,402,12",
                  "inheritable": "20,404,12",
                  "name": "20,406,0",
                  "static": "20,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "20,395,12",
                  "inheritable": "20,397,12",
                  "name": "20,399,0",
                  "static": "20,396,12"
                }
              }
            ]
          },
          {
            "$type": "vars",
            "items": [
              {
                "$type": "property",
                "name": "$border-width-threshold",
                "text": "The maximum width a Panel's border can be before resizer handles are embedded\ninto the borders using negative absolute positions.\n\nThis defaults to 2, so that in the classic theme which uses 1 pixel borders,\nresize handles are in the content area within the border as they always have\nbeen.\n\nIn the Neptune theme, the handles are embedded into the 5 pixel wide borders\nof any framed panel.\n",
                "type": "Number",
                "value": "2",
                "src": {
                  "name": "27,39,1",
                  "text": "27,29,4,390",
                  "type": "27,28,10",
                  "value": "27,39,34"
                }
              },
              {
                "$type": "property",
                "name": "$include-panel-default-framed-ui",
                "text": "True to include the \"default-framed\" panel UI\n",
                "type": "Boolean",
                "value": "$include-default-uis",
                "src": {
                  "name": "27,415,1",
                  "text": "27,413,4,46",
                  "type": "27,412,10",
                  "value": "27,415,43"
                }
              },
              {
                "$type": "property",
                "name": "$include-panel-default-ui",
                "text": "True to include the \"default\" panel UI\n",
                "type": "Boolean",
                "value": "$include-default-uis",
                "src": {
                  "name": "27,409,1",
                  "text": "27,407,4,39",
                  "type": "27,406,10",
                  "value": "27,409,36"
                }
              },
              {
                "$type": "property",
                "name": "$include-panel-light-framed-ui",
                "text": "True to include the \"light-framed\" panel UI\n",
                "type": "Boolean",
                "value": "$include-default-uis",
                "src": {
                  "name": "28,60,1",
                  "text": "28,58,4,44",
                  "type": "28,57,10",
                  "value": "28,60,41"
                }
              },
              {
                "$type": "property",
                "name": "$include-panel-light-ui",
                "text": "True to include the \"light\" panel UI\n",
                "type": "Boolean",
                "value": "$include-default-uis",
                "src": {
                  "name": "28,54,1",
                  "text": "28,52,4,37",
                  "type": "28,51,10",
                  "value": "28,54,34"
                }
              },
              {
                "$type": "property",
                "name": "$panel-background-stretch-bottom",
                "text": "The direction to strech the background-gradient of bottom docked Headers when slicing images\nfor IE using Sencha Cmd\n",
                "type": "String",
                "value": "top",
                "src": {
                  "name": "27,365,1",
                  "text": "27,362,4,117",
                  "type": "27,361,10",
                  "value": "27,365,43"
                }
              },
              {
                "$type": "property",
                "name": "$panel-background-stretch-left",
                "text": "The direction to strech the background-gradient of left docked Headers when slicing images\nfor IE using Sencha Cmd\n",
                "type": "String",
                "value": "right",
                "src": {
                  "name": "27,379,1",
                  "text": "27,376,4,115",
                  "type": "27,375,10",
                  "value": "27,379,41"
                }
              },
              {
                "$type": "property",
                "name": "$panel-background-stretch-right",
                "text": "The direction to strech the background-gradient of right docked Headers when slicing images\nfor IE using Sencha Cmd\n",
                "type": "String",
                "value": "left",
                "src": {
                  "name": "27,372,1",
                  "text": "27,369,4,116",
                  "type": "27,368,10",
                  "value": "27,372,42"
                }
              },
              {
                "$type": "property",
                "name": "$panel-background-stretch-top",
                "text": "The direction to strech the background-gradient of top docked Headers when slicing images\nfor IE using Sencha Cmd\n",
                "type": "String",
                "value": "bottom",
                "src": {
                  "name": "27,358,1",
                  "text": "27,355,4,114",
                  "type": "27,354,10",
                  "value": "27,358,40"
                }
              },
              {
                "$type": "property",
                "name": "$panel-base-color",
                "text": "The base color of Panels\n",
                "type": "color",
                "value": "$base-color",
                "src": {
                  "name": "27,19,1",
                  "text": "27,17,4,25",
                  "type": "27,16,10",
                  "value": "27,19,28"
                }
              },
              {
                "$type": "property",
                "name": "$panel-body-background-color",
                "text": "The default body background-color of Panels\n",
                "type": "color",
                "value": "#fff",
                "src": {
                  "name": "27,54,1",
                  "text": "27,52,4,44",
                  "type": "27,51,10",
                  "value": "27,54,39"
                }
              },
              {
                "$type": "property",
                "name": "$panel-body-border-color",
                "text": "The default border-color of the Panel body\n",
                "type": "color",
                "value": "$panel-border-color",
                "src": {
                  "name": "27,66,1",
                  "text": "27,64,4,43",
                  "type": "27,63,10",
                  "value": "27,66,35"
                }
              },
              {
                "$type": "property",
                "name": "$panel-body-border-style",
                "text": "The default border-style of Panels\n",
                "type": "String",
                "value": "solid",
                "src": {
                  "name": "27,48,1",
                  "text": "27,46,4,35",
                  "type": "27,45,10",
                  "value": "27,48,35"
                }
              },
              {
                "$type": "property",
                "name": "$panel-body-border-width",
                "text": "The default border-width of the Panel body\n",
                "type": "Number",
                "value": "1px",
                "src": {
                  "name": "27,72,1",
                  "text": "27,70,4,43",
                  "type": "27,69,10",
                  "value": "27,72,35"
                }
              },
              {
                "$type": "property",
                "name": "$panel-body-color",
                "text": "The default color of text inside a Panel's body\n",
                "type": "color",
                "value": "$color",
                "src": {
                  "name": "27,60,1",
                  "text": "27,58,4,48",
                  "type": "27,57,10",
                  "value": "27,60,28"
                }
              },
              {
                "$type": "property",
                "name": "$panel-body-font-family",
                "text": "The default font-family of the Panel body\n",
                "type": "String",
                "value": "$font-family",
                "src": {
                  "name": "27,90,1",
                  "text": "27,88,4,42",
                  "type": "27,87,10",
                  "value": "27,90,34"
                }
              },
              {
                "$type": "property",
                "name": "$panel-body-font-size",
                "text": "The default font-size of the Panel body\n",
                "type": "Number",
                "value": "$font-size",
                "src": {
                  "name": "27,78,1",
                  "text": "27,76,4,40",
                  "type": "27,75,10",
                  "value": "27,78,32"
                }
              },
              {
                "$type": "property",
                "name": "$panel-body-font-weight",
                "text": "The default font-weight of the Panel body\n",
                "type": "String",
                "value": "$font-weight",
                "src": {
                  "name": "27,84,1",
                  "text": "27,82,4,42",
                  "type": "27,81,10",
                  "value": "27,84,34"
                }
              },
              {
                "$type": "property",
                "name": "$panel-border-color",
                "text": "The default border-color of Panels\n",
                "type": "color",
                "value": "$panel-base-color",
                "src": {
                  "name": "27,25,1",
                  "text": "27,23,4,35",
                  "type": "27,22,10",
                  "value": "27,25,30"
                }
              },
              {
                "$type": "property",
                "name": "$panel-border-width",
                "text": "The default border-width of Panels\n",
                "type": "Number",
                "value": "1px",
                "src": {
                  "name": "27,13,1",
                  "text": "27,11,4,35",
                  "type": "27,10,10",
                  "value": "27,13,30"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-background-color",
                "text": "The background-color of framed Panels\n",
                "type": "color",
                "value": "#fff",
                "src": {
                  "name": "27,309,1",
                  "text": "27,307,4,38",
                  "type": "27,306,10",
                  "value": "27,309,40"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-base-color",
                "text": "The base color of the framed Panels\n",
                "type": "color",
                "value": "$panel-base-color",
                "src": {
                  "name": "27,274,1",
                  "text": "27,272,4,36",
                  "type": "27,271,10",
                  "value": "27,274,34"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-body-border-width",
                "text": "The border-width of the body element of framed Panels\n",
                "type": "Number",
                "value": "1px",
                "src": {
                  "name": "27,321,1",
                  "text": "27,319,4,54",
                  "type": "27,318,10",
                  "value": "27,321,41"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-border-color",
                "text": "The border-color of framed Panels\n",
                "type": "color",
                "value": "$panel-border-color",
                "src": {
                  "name": "27,315,1",
                  "text": "27,313,4,34",
                  "type": "27,312,10",
                  "value": "27,315,36"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-border-radius",
                "text": "The border-radius of framed Panels\n",
                "type": "Number",
                "value": "4px",
                "src": {
                  "name": "27,280,1",
                  "text": "27,278,4,35",
                  "type": "27,277,10",
                  "value": "27,280,37"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-border-style",
                "text": "The border-style of framed Panels\n",
                "type": "String",
                "value": "solid",
                "src": {
                  "name": "27,292,1",
                  "text": "27,290,4,34",
                  "type": "27,289,10",
                  "value": "27,292,36"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-border-width",
                "text": "The border-width of framed Panels\n",
                "type": "Number",
                "value": "1px",
                "src": {
                  "name": "27,286,1",
                  "text": "27,284,4,34",
                  "type": "27,283,10",
                  "value": "27,286,36"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-header-border-width",
                "text": "The border-width of framed Panel Headers\n",
                "type": "Number",
                "value": "$panel-header-border-width",
                "src": {
                  "name": "27,327,1",
                  "text": "27,325,4,41",
                  "type": "27,324,10",
                  "value": "27,327,43"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-header-inner-border-color",
                "text": "The inner border-color of framed Panel Headers\n",
                "type": "color",
                "value": "#fff",
                "src": {
                  "name": "27,333,1",
                  "text": "27,331,4,47",
                  "type": "27,330,10",
                  "value": "27,333,49"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-header-inner-border-width",
                "text": "The inner border-width of framed Panel Headers\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "27,339,1",
                  "text": "27,337,4,47",
                  "type": "27,336,10",
                  "value": "27,339,49"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-header-padding",
                "text": "The padding of framed Panel Headers\n",
                "type": "Number/list",
                "value": "$panel-header-padding",
                "src": {
                  "name": "27,345,1",
                  "text": "27,343,4,36",
                  "type": "27,342,10",
                  "value": "27,345,38"
                }
              },
              {
                "$type": "property",
                "name": "$panel-frame-padding",
                "text": "The padding of {@link Ext.panel.Panel#cfg!frame Ext.panel.Panel#cfg-frame} Panels.\n\nThe padding value must be equal to or greater than value specified in the\n{@link #var!$panel-frame-border-radius #$panel-frame-border-radius} variable (or the maximum value if corner values\nare specified individually).\nSee also: {@link #var!$panel-ignore-frame-padding #$panel-ignore-frame-padding}\n",
                "type": "Number",
                "value": "4px",
                "src": {
                  "name": "27,303,1",
                  "text": "27,296,4,299",
                  "type": "27,295,10",
                  "value": "27,303,31"
                }
              },
              {
                "$type": "property",
                "name": "$panel-ghost-opacity",
                "text": "The opacity of ghost Panels while dragging\n",
                "type": "Number",
                "value": "0.50",
                "src": {
                  "name": "27,351,1",
                  "text": "27,349,4,43",
                  "type": "27,348,10",
                  "value": "27,351,31"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-background-color",
                "text": "The background-color of the Panel Header\n",
                "type": "color",
                "value": "$panel-base-color",
                "src": {
                  "name": "27,224,1",
                  "text": "27,222,4,41",
                  "type": "27,221,10",
                  "value": "27,224,41"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-background-gradient",
                "text": "The background-gradient of the Panel Header. Can be either the name of a predefined\ngradient or a list of color stops. Used as the `$type` parameter for\n{@link Global_CSS#background-gradient}.\n",
                "type": "String/list",
                "value": "'none'",
                "src": {
                  "name": "27,194,1",
                  "text": "27,190,4,193",
                  "type": "27,189,10",
                  "value": "27,194,44"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-border-color",
                "text": "The border-color of the Panel Header\n",
                "type": "color",
                "value": "$panel-border-color",
                "src": {
                  "name": "27,200,1",
                  "text": "27,198,4,37",
                  "type": "27,197,10",
                  "value": "27,200,37"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-border-style",
                "text": "The border-style of Panel Headers\n",
                "type": "String",
                "value": "solid",
                "src": {
                  "name": "27,138,1",
                  "text": "27,136,4,34",
                  "type": "27,135,10",
                  "value": "27,138,37"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-border-width",
                "text": "The border-width of Panel Headers\n",
                "type": "Number",
                "value": "$panel-border-width",
                "src": {
                  "name": "27,132,1",
                  "text": "27,130,4,34",
                  "type": "27,129,10",
                  "value": "27,132,37"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-color",
                "text": "The text color of the Panel Header\n",
                "type": "color",
                "value": "$color",
                "src": {
                  "name": "27,218,1",
                  "text": "27,216,4,35",
                  "type": "27,215,10",
                  "value": "27,218,30"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-font-family",
                "text": "The font-family of Panel Headers\n",
                "type": "String",
                "value": "$font-family",
                "src": {
                  "name": "27,168,1",
                  "text": "27,166,4,33",
                  "type": "27,165,10",
                  "value": "27,168,36"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-font-size",
                "text": "The font-size of Panel Headers\n",
                "type": "Number",
                "value": "$font-size",
                "src": {
                  "name": "27,150,1",
                  "text": "27,148,4,31",
                  "type": "27,147,10",
                  "value": "27,150,34"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-font-weight",
                "text": "The font-weight of Panel Headers\n",
                "type": "String",
                "value": "$font-weight-bold",
                "src": {
                  "name": "27,162,1",
                  "text": "27,160,4,33",
                  "type": "27,159,10",
                  "value": "27,162,36"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-glyph-color",
                "text": "The color of the Panel Header glyph icon\n",
                "type": "color",
                "value": "$panel-header-color",
                "src": {
                  "name": "27,254,1",
                  "text": "27,252,4,41",
                  "type": "27,251,10",
                  "value": "27,254,36"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-glyph-opacity",
                "text": "The opacity of the Panel Header glyph icon\n",
                "type": "Number",
                "value": ".5",
                "src": {
                  "name": "27,260,1",
                  "text": "27,258,4,43",
                  "type": "27,257,10",
                  "value": "27,260,38"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-icon-background-position",
                "text": "The background-position of  the Panel Header icon\n",
                "type": "list",
                "value": "center center",
                "src": {
                  "name": "27,248,1",
                  "text": "27,246,4,50",
                  "type": "27,245,10",
                  "value": "27,248,49"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-icon-height",
                "text": "The height of the Panel Header icon\n",
                "type": "Number",
                "value": "16px",
                "src": {
                  "name": "27,236,1",
                  "text": "27,234,4,36",
                  "type": "27,233,10",
                  "value": "27,236,36"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-icon-spacing",
                "text": "The space between the Panel Header icon and text\n",
                "type": "Number",
                "value": "4px",
                "src": {
                  "name": "27,242,1",
                  "text": "27,240,4,49",
                  "type": "27,239,10",
                  "value": "27,242,37"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-icon-width",
                "text": "The width of the Panel Header icon\n",
                "type": "Number",
                "value": "16px",
                "src": {
                  "name": "27,230,1",
                  "text": "27,228,4,35",
                  "type": "27,227,10",
                  "value": "27,230,35"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-inner-border-color",
                "text": "The inner border-color of the Panel Header\n",
                "type": "color",
                "value": "#fff",
                "src": {
                  "name": "27,206,1",
                  "text": "27,204,4,43",
                  "type": "27,203,10",
                  "value": "27,206,43"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-inner-border-width",
                "text": "The inner border-width of the Panel Header\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "27,212,1",
                  "text": "27,210,4,43",
                  "type": "27,209,10",
                  "value": "27,212,43"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-line-height",
                "text": "The line-height of Panel Headers\n",
                "type": "Number",
                "value": "16px",
                "src": {
                  "name": "27,156,1",
                  "text": "27,154,4,33",
                  "type": "27,153,10",
                  "value": "27,156,36"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-noborder-adjust",
                "text": "True to adjust the padding of borderless panel headers so that their height is the same\nas the height of bordered panels.  This is helpful when borderless and bordered panels\nare used side-by-side, as it maintains a consistent vertical alignment.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "27,268,1",
                  "text": "27,264,4,247",
                  "type": "27,263,10",
                  "value": "27,268,40"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-padding",
                "text": "The padding of Panel Headers\n",
                "type": "Number/list",
                "value": "5px",
                "src": {
                  "name": "27,144,1",
                  "text": "27,142,4,29",
                  "type": "27,141,10",
                  "value": "27,144,32"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-text-margin",
                "text": "The margin of the Panel Header's text element\n",
                "type": "Number/list",
                "value": "0",
                "src": {
                  "name": "27,186,1",
                  "text": "27,184,4,46",
                  "type": "27,183,10",
                  "value": "27,186,36"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-text-padding",
                "text": "The padding of the Panel Header's text element\n",
                "type": "Number/list",
                "value": "0",
                "src": {
                  "name": "27,180,1",
                  "text": "27,178,4,47",
                  "type": "27,177,10",
                  "value": "27,180,37"
                }
              },
              {
                "$type": "property",
                "name": "$panel-header-text-transform",
                "text": "The text-transform of Panel Headers\n",
                "type": "String",
                "value": "none",
                "src": {
                  "name": "27,174,1",
                  "text": "27,172,4,36",
                  "type": "27,171,10",
                  "value": "27,174,39"
                }
              },
              {
                "$type": "property",
                "name": "$panel-ignore-frame-padding",
                "text": "True to ignore the frame padding.  By default, the frame mixin adds extra padding when\nborder radius is larger than border width.  This is intended to prevent the content\nfrom colliding with the rounded corners of the frame.  Set this to true to prevent\nthe panel frame from adding this extra padding.\n\n**Note:** This var is not applicable to IE8 & IE9.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "27,426,1",
                  "text": "27,419,4,354",
                  "type": "27,418,10",
                  "value": "27,426,38"
                }
              },
              {
                "$type": "property",
                "name": "$panel-include-border-management-rules",
                "text": "True to include neptune style border management rules.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "27,385,1",
                  "text": "27,383,4,55",
                  "type": "27,382,10",
                  "value": "27,385,49"
                }
              },
              {
                "$type": "property",
                "name": "$panel-tool-background-image",
                "text": "The background sprite to use for Panel {@link Ext.panel.Tool}\n",
                "type": "String",
                "value": "'tools/tool-sprites'",
                "src": {
                  "name": "27,102,1",
                  "text": "27,100,4,68",
                  "type": "27,99,10",
                  "value": "27,102,39"
                }
              },
              {
                "$type": "property",
                "name": "$panel-tool-focus-outline-color",
                "text": "The color of the outline around Panel {@link Ext.panel.Tool} when focused\n",
                "type": "color",
                "value": "$base-color",
                "src": {
                  "name": "27,108,1",
                  "text": "27,106,4,80",
                  "type": "27,105,10",
                  "value": "27,108,42"
                }
              },
              {
                "$type": "property",
                "name": "$panel-tool-focus-outline-offset",
                "text": "The outline-offset of Panel {@link Ext.panel.Tool} when focused\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "27,126,1",
                  "text": "27,124,4,70",
                  "type": "27,123,10",
                  "value": "27,126,43"
                }
              },
              {
                "$type": "property",
                "name": "$panel-tool-focus-outline-style",
                "text": "The outline-style of Panel {@link Ext.panel.Tool} when focused\n",
                "type": "String",
                "value": "solid",
                "src": {
                  "name": "27,114,1",
                  "text": "27,112,4,69",
                  "type": "27,111,10",
                  "value": "27,114,42"
                }
              },
              {
                "$type": "property",
                "name": "$panel-tool-focus-outline-width",
                "text": "The outline-width of Panel {@link Ext.panel.Tool} when focused\n",
                "type": "Number",
                "value": "1px",
                "src": {
                  "name": "27,120,1",
                  "text": "27,118,4,69",
                  "type": "27,117,10",
                  "value": "27,120,42"
                }
              },
              {
                "$type": "property",
                "name": "$panel-tool-spacing",
                "text": "The space between the Panel {@link Ext.panel.Tool}\n",
                "type": "Number",
                "value": "4px",
                "src": {
                  "name": "27,96,1",
                  "text": "27,94,4,57",
                  "type": "27,93,10",
                  "value": "27,96,30"
                }
              },
              {
                "$type": "property",
                "name": "$panel-wrap-border-color",
                "text": "The color to apply to the border that wraps the body and docked items in a framed\npanel. The presence of the wrap border in a framed panel is controlled by the\n{@link #cfg!border #border} config. Only applicable when `$panel-include-border-management-rules` is\n`true`.\n",
                "type": "color",
                "value": "$panel-border-color",
                "src": {
                  "name": "27,394,1",
                  "text": "27,389,4,257",
                  "type": "27,388,10",
                  "value": "27,394,35"
                }
              },
              {
                "$type": "property",
                "name": "$panel-wrap-border-width",
                "text": "The width to apply to the border that wraps the body and docked items in a framed\npanel. The presence of the wrap border in a framed panel is controlled by the\n{@link #cfg!border #border} config. Only applicable when `$panel-include-border-management-rules` is\n`true`.\n",
                "type": "Number",
                "value": "1px",
                "src": {
                  "name": "27,403,1",
                  "text": "27,398,4,257",
                  "type": "27,397,10",
                  "value": "27,403,35"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-background-color",
                "text": "The background color of scroll indicators when touch scrolling is enabled\n",
                "type": "color",
                "value": "#000",
                "src": {
                  "name": "29,12,1",
                  "text": "29,10,4,74",
                  "type": "29,9,10",
                  "value": "29,12,45"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-border-radius",
                "text": "The border-radius of scroll indicators when touch scrolling is enabled\n",
                "type": "Number",
                "value": "3px",
                "src": {
                  "name": "29,24,1",
                  "text": "29,22,4,71",
                  "type": "29,21,10",
                  "value": "29,24,42"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-margin",
                "text": "The space between scroll indicators and the edge of their container\n",
                "type": "Number",
                "value": "2px",
                "src": {
                  "name": "29,36,1",
                  "text": "29,34,4,68",
                  "type": "29,33,10",
                  "value": "29,36,35"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-opacity",
                "text": "The opacity of scroll indicators when touch scrolling is enabled\n",
                "type": "Number",
                "value": ".5",
                "src": {
                  "name": "29,18,1",
                  "text": "29,16,4,65",
                  "type": "29,15,10",
                  "value": "29,18,36"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-size",
                "text": "The background color of scroll indicators when touch scrolling is enabled\n",
                "type": "color",
                "value": "6px",
                "src": {
                  "name": "29,30,1",
                  "text": "29,28,4,74",
                  "type": "29,27,10",
                  "value": "29,30,33"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,4,11",
          "extends": "0,3,13",
          "name": "0,2,11",
          "requires": "0,18,0,0:0,19,0,0",
          "text": "0,5,4,348"
        }
      }
    ]
  },
  "version": 1
}