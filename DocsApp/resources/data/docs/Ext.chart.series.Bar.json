{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/chart/series/Bar.js",
    "../../../ext/packages/charts/src/chart/series/Series.js",
    "../../../ext/packages/core/src/mixin/Bindable.js",
    "../../../ext/packages/charts/src/chart/series/StackedCartesian.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/packages/charts/src/chart/series/Cartesian.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "series.bar",
        "extended": "Ext.chart.series.StackedCartesian,Ext.chart.series.Cartesian,Ext.chart.series.Series,Ext.Base,Object",
        "extends": "Ext.chart.series.StackedCartesian",
        "name": "Ext.chart.series.Bar",
        "requires": "Ext.chart.series.sprite.Bar,Ext.draw.sprite.Rect",
        "text": "\nCreates a Bar or Column Chart (depending on the value of the\n{@link Ext.chart.CartesianChart#cfg!flipXY Ext.chart.CartesianChart#flipXY} config).\n\nNote: 'bar' series is meant to be used with the\n{@link Ext.chart.axis.Category} axis as its x-axis.\n\n    @example\n    Ext.create({\n       xtype: 'cartesian',\n       renderTo: document.body,\n       width: 600,\n       height: 400,\n       store: {\n           fields: ['name', 'value'],\n           data: [{\n               name: 'metric one',\n               value: 10\n           }, {\n               name: 'metric two',\n               value: 7\n           }, {\n               name: 'metric three',\n               value: 5\n           }, {\n               name: 'metric four',\n               value: 2\n           }, {\n               name: 'metric five',\n               value: 27\n           }]\n       },\n       axes: [{\n           type: 'numeric',\n           position: 'left',\n           title: {\n               text: 'Sample Values',\n               fontSize: 15\n           },\n           fields: 'value'\n       }, {\n           type: 'category',\n           position: 'bottom',\n           title: {\n               text: 'Sample Values',\n               fontSize: 15\n           },\n           fields: 'name'\n       }],\n       series: {\n           type: 'bar',\n           subStyle: {\n               fill: ['#388FAD'],\n               stroke: '#1F6D91'\n           },\n           xField: 'name',\n           yField: 'value'\n       }\n    });\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "animation",
                "text": "The series animation configuration.\n",
                "type": "Object",
                "src": {
                  "name": "1,473,26",
                  "text": "1,473,36,36",
                  "type": "1,473,18"
                }
              },
              {
                "$type": "property",
                "name": "background",
                "text": "Sets the background of the surface the series is attached.\n",
                "type": "Object",
                "src": {
                  "name": "1,419,26",
                  "text": "1,419,37,59",
                  "type": "1,419,18"
                }
              },
              {
                "$type": "property",
                "name": "bind",
                "optional": true,
                "text": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `{@link #cfg!title title}` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n",
                "type": "Object",
                "src": {
                  "name": "2,12,27",
                  "text": "2,13,12,559",
                  "type": "2,12,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "chart",
                "text": "The chart that the series is bound.\n",
                "type": "Object",
                "src": {
                  "access": "1,189,12",
                  "name": "1,190,26",
                  "text": "1,190,32,36",
                  "type": "1,190,18"
                }
              },
              {
                "$type": "property",
                "name": "colors",
                "text": "An array of color values which is used, in order of appearance, by the series. Each series\ncan request one or more colors from the array. Radar, Scatter or Line charts require just\none color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts\nand Stacked charts (like Column or Pie charts) require one color for each data category\nthey represent, so one color for each slice of a Pie chart or each segment of a Column chart.\nIt overrides the colors that are provided by the current theme.\n",
                "type": "Array",
                "src": {
                  "name": "1,272,25",
                  "text": "1,273,12,516",
                  "type": "1,272,18"
                }
              },
              {
                "$type": "property",
                "name": "controller",
                "text": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n",
                "type": "String/Object/Ext.app.ViewController",
                "src": {
                  "name": "2,45,56",
                  "text": "2,46,12,637",
                  "type": "2,45,18"
                }
              },
              {
                "$type": "property",
                "name": "defaultListenerScope",
                "text": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,84,27",
                  "text": "2,85,12,508",
                  "type": "2,84,18"
                }
              },
              {
                "$type": "property",
                "name": "fullStack",
                "optional": true,
                "text": "If `true`, the height of a stacked bar is always the full height of the chart,\nwith individual components viewed as shares of the whole determined by the\n{@link #cfg!fullStackTotal #fullStackTotal} config.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "3,25,28",
                  "text": "3,26,12,186",
                  "type": "3,25,18",
                  "value": "3,25,38"
                }
              },
              {
                "$type": "property",
                "name": "fullStackTotal",
                "optional": true,
                "text": "If the {@link #cfg!fullStack #fullStack} config is set to `true`, this will determine\nthe absolute total value of each stack.\n",
                "type": "Boolean",
                "value": "100",
                "src": {
                  "name": "3,33,28",
                  "text": "3,34,12,111",
                  "type": "3,33,18",
                  "value": "3,33,43"
                }
              },
              {
                "$type": "property",
                "name": "hidden",
                "type": "Array",
                "src": {
                  "name": "3,40,25",
                  "type": "3,40,18"
                }
              },
              {
                "$type": "property",
                "name": "highlight",
                "text": "The sprite attributes that will be applied to the highlighted items in the series.\nIf set to 'true', the default highlight style from {@link #cfg!highlightCfg #highlightCfg} will be used.\nIf the value of this config is an object, it will be merged with the {@link #cfg!highlightCfg #highlightCfg}.\nIn case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,\nprovide the 'highlightCfg' instead.\n",
                "type": "Boolean/Object",
                "src": {
                  "name": "1,446,34",
                  "text": "1,447,12,385",
                  "type": "1,446,18"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "highlightCfg",
                "text": "The default style for the highlighted item.\nUsed when {@link #cfg!highlight #highlight} config was simply set to 'true' instead of specifying a style.\n",
                "type": "Object",
                "src": {
                  "access": "1,456,12",
                  "name": "1,457,26",
                  "text": "1,458,12,136",
                  "type": "1,457,18"
                }
              },
              {
                "$type": "property",
                "name": "highlightItem",
                "text": "The item currently highlighted in the series.\n",
                "type": "Object",
                "src": {
                  "name": "1,424,26",
                  "text": "1,424,40,46",
                  "type": "1,424,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "itemInstancing",
                "text": "Sprite template used for series.\n",
                "type": "Object",
                "src": {
                  "access": "0,79,12",
                  "name": "0,80,26",
                  "text": "0,80,41,33",
                  "type": "0,80,18"
                }
              },
              {
                "$type": "property",
                "name": "label",
                "text": "Object with the following properties:\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "display",
                    "text": "\nSpecifies the presence and position of the labels. The possible values depend on the series type.\nFor Line and Scatter series: 'under' | 'over' | 'rotate'.\nFor Bar and 3D Bar series: 'insideStart' | 'insideEnd' | 'outside'.\nFor Pie series: 'outside' | 'rotate' | 'horizontal' | 'vertical'.\nArea, Radar and Candlestick series don't support labels.\nFor Area and Radar series please consider using {@link #cfg!tooltip #tooltip} instead.\n3D Pie series currently always display labels 'outside'.\nFor all series: 'none' hides the labels.\n\nDefault value: 'none'.\n",
                    "type": "String",
                    "src": {
                      "name": "1,304,32",
                      "text": "1,305,12,554",
                      "type": "1,304,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "color",
                    "text": "\nThe color of the label text.\n\nDefault value: '#000' (black).\n",
                    "type": "String",
                    "src": {
                      "name": "1,317,32",
                      "text": "1,318,12,63",
                      "type": "1,317,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "field",
                    "text": "\nThe name(s) of the field(s) to be displayed in the labels. If your chart has 3 series\nthat correspond to the fields 'a', 'b', and 'c' of your model, and you only want to\ndisplay labels for the series 'c', you must still provide an array `[null, null, 'c']`.\n\nDefault value: null.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "1,323,41",
                      "text": "1,324,12,282",
                      "type": "1,323,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "font",
                    "text": "\nThe font used for the labels.\n\nDefault value: '14px Helvetica'.\n",
                    "type": "String",
                    "src": {
                      "name": "1,331,32",
                      "text": "1,332,12,66",
                      "type": "1,331,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "orientation",
                    "text": "\nEither 'horizontal' or 'vertical'. If not set (default), the orientation is inferred\nfrom the value of the flipXY property of the series.\n\nDefault value: ''.\n",
                    "type": "String",
                    "src": {
                      "name": "1,337,32",
                      "text": "1,338,12,160",
                      "type": "1,337,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "renderer",
                    "text": "\nOptional function for formatting the label into a displayable value.\n\nThe arguments to the method are:\n\n  - *`text`*, *`sprite`*, *`config`*, *`rendererData`*, *`index`*\n\n    Label's renderer is passed the same arguments as {@link #cfg!renderer #renderer}\n    plus one extra 'text' argument which comes first.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,344,34",
                      "text": "1,345,12,298",
                      "type": "1,344,18"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The attributes that have been changed or added, or the text for the label.\nExample to enclose every other label in parentheses:\n\n     renderer: function (text) {\n         if (index % 2 == 0) {\n             return '(' + text + ')'\n         }\n     }\n\nDefault value: null.\n",
                    "type": "Object/String",
                    "src": {
                      "text": "1,355,36,75:1,356,12,195",
                      "type": "1,355,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,26",
                  "text": "1,302,12,39",
                  "type": "1,301,18"
                }
              },
              {
                "$type": "property",
                "name": "labelOverflowPadding",
                "text": "Extra distance value for which the labelOverflow listener is triggered.\n",
                "type": "Number",
                "src": {
                  "name": "1,369,26",
                  "text": "1,370,12,72",
                  "type": "1,369,18"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the {@link Ext.view.View}'s **`{@link Ext.view.View#event!itemclick Ext.view.View#itemclick}`** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "4,243,25",
                  "text": "4,244,11,1325",
                  "type": "4,243,17"
                }
              },
              {
                "$type": "property",
                "name": "marker",
                "text": "The sprite template used by marker instances on the series.\nIf the value of the marker config is set to `true` or the type\nof the sprite instance is not specified, the {@link Ext.draw.sprite.Circle}\nsprite will be used.\n\nExamples:\n\n    marker: true\n\n    marker: {\n        radius: 8\n    }\n\n    marker: {\n        type: 'arrow',\n        fx: {\n            duration: 200,\n            easing: 'backOut'\n        }\n    }\n",
                "type": "Object/Boolean",
                "src": {
                  "name": "1,382,34",
                  "text": "1,383,12,413",
                  "type": "1,382,18"
                }
              },
              {
                "$type": "property",
                "name": "markerSubStyle",
                "text": "This is cyclic used if series have multiple marker sprites.\n",
                "type": "Object",
                "src": {
                  "name": "1,407,26",
                  "text": "1,408,12,60",
                  "type": "1,407,18"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "overlaySurface",
                "text": "The surface used to render series labels.\n",
                "type": "Object",
                "src": {
                  "access": "1,435,12",
                  "name": "1,436,26",
                  "text": "1,436,41,42",
                  "type": "1,436,18"
                }
              },
              {
                "$type": "property",
                "name": "publishes",
                "since": "5.0.0",
                "text": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found in a class\nconfig block. In these situations, you may utilize {@link #method!publishState #publishState} if the property has a\nsetter method.  Let's use {@link Ext.form.Labelable#method!setFieldLabel Ext.form.Labelable#setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n",
                "type": "String/String[]/Object",
                "src": {
                  "name": "2,100,42",
                  "since": "2,179,19",
                  "text": "2,101,12,2498",
                  "type": "2,100,18"
                }
              },
              {
                "$type": "property",
                "name": "reference",
                "text": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.container.Container#cfg!referenceHolder Ext.container.Container#referenceHolder}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n",
                "type": "String",
                "src": {
                  "name": "2,190,26",
                  "text": "2,191,12,477",
                  "type": "2,190,18"
                }
              },
              {
                "$type": "property",
                "name": "renderer",
                "text": "A function that can be provided to set custom styling properties to each rendered element.\nIt receives `(sprite, config, rendererData, index)` as parameters.\n",
                "type": "Function",
                "items": [
                  {
                    "$type": "param",
                    "name": "sprite",
                    "text": "The sprite affected by the renderer. The visual attributes are in `sprite.attr`.\nThe data field is available in `sprite.getField()`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,205,28",
                      "text": "1,205,35,81:1,206,12,52",
                      "type": "1,205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The sprite configuration. It varies with the series and the type of sprite:\nfor instance, a Line chart sprite might have just the `x` and `y` properties while a Bar\nchart sprite also has `width` and `height`. A `{@link #property!type type}` might be present too. For instance to\ndraw each marker and each segment of a Line chart, the renderer is called with the\n`config.type` set to either `{@link #cfg!marker marker}` or `line`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,207,28",
                      "text": "1,207,35,76:1,208,12,311",
                      "type": "1,207,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rendererData",
                    "text": "A record with different properties depending on the type of chart.\nThe only guaranteed property is `rendererData.store`, the store used by the series.\nIn some cases, a store may not exist: for instance a Gauge chart may read its value directly\nfrom its configuration; in this case rendererData.store is null and the value is\navailable in rendererData.value.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,212,28",
                      "text": "1,212,41,67:1,213,12,291",
                      "type": "1,212,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the sprite. It is usually the index of the store record associated\nwith the sprite, in which case the record can be obtained with `store.getData().items[index]`.\nIf the chart is not associated with a store, the index represents the index of the sprite within\nthe series. For instance a Gauge chart may have as many sprites as there are sectors in the\nbackground of the gauge, plus one for the needle.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,217,28",
                      "text": "1,217,34,80:1,218,12,335",
                      "type": "1,217,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The attributes that have been changed or added. Note: it is usually possible to\nadd or modify the attributes directly into the `config` parameter and not return anything,\nbut returning an object with only those attributes that have been changed may allow for\noptimizations in the rendering of some series. Example to draw every other marker in red:\n\n     renderer: function (sprite, config, rendererData, index) {\n         if (config.type === 'marker') {\n             return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') };\n         }\n     }\n",
                    "type": "Object",
                    "src": {
                      "text": "1,223,29,80:1,224,12,467",
                      "type": "1,223,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,201,28",
                  "text": "1,202,12,159",
                  "type": "1,201,18"
                }
              },
              {
                "$type": "property",
                "name": "session",
                "optional": true,
                "text": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n",
                "type": "Boolean/Object/Ext.data.Session",
                "value": "null",
                "src": {
                  "name": "2,204,52",
                  "text": "2,205,12,531",
                  "type": "2,204,18",
                  "value": "2,204,60"
                }
              },
              {
                "$type": "property",
                "name": "showInLegend",
                "text": "Whether to show this series in the legend.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,237,27",
                  "text": "1,238,12,43",
                  "type": "1,237,18"
                }
              },
              {
                "$type": "property",
                "name": "showMarkers",
                "text": "Whether markers should be displayed at the data points along the line. If true,\nthen the {@link #cfg!marker #marker} config item will determine the markers' styling.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,375,27",
                  "text": "1,376,12,154",
                  "type": "1,375,18"
                }
              },
              {
                "$type": "property",
                "name": "splitStacks",
                "optional": true,
                "text": "`true` to stack negative/positive values in respective y-axis directions.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "3,19,28",
                  "text": "3,20,12,74",
                  "type": "3,19,18",
                  "value": "3,19,40"
                }
              },
              {
                "$type": "property",
                "name": "stacked",
                "optional": true,
                "text": "`true` to display the series in its stacked configuration.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "3,13,28",
                  "text": "3,14,12,59",
                  "type": "3,13,18",
                  "value": "3,13,36"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "store",
                "text": "The store of values used in the series.\n",
                "type": "Object",
                "src": {
                  "access": "1,295,12",
                  "name": "1,296,26",
                  "text": "1,296,32,40",
                  "type": "1,296,18"
                }
              },
              {
                "$type": "property",
                "name": "style",
                "text": "Custom style configuration for the sprite used in the series.\nIt overrides the style that is provided by the current theme.\n",
                "type": "Object",
                "src": {
                  "name": "1,249,26",
                  "text": "1,249,32,62:1,250,12,62",
                  "type": "1,249,18"
                }
              },
              {
                "$type": "property",
                "name": "subStyle",
                "text": "This is the cyclic used if the series has multiple sprites.\n",
                "type": "Object",
                "src": {
                  "name": "1,255,26",
                  "text": "1,255,35,60",
                  "type": "1,255,18"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "surface",
                "text": "The surface that the series is attached.\n",
                "type": "Object",
                "src": {
                  "access": "1,429,12",
                  "name": "1,430,26",
                  "text": "1,430,34,41",
                  "type": "1,430,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "themeStyle",
                "text": "Style configuration that is provided by the current theme.\nIt is composed of five objects:\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "style",
                    "text": "Properties common to all the series, for instance the 'lineWidth'.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,263,37",
                      "text": "1,263,43,67",
                      "type": "1,263,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "subStyle",
                    "text": "Cyclic used if the series has multiple sprites.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,264,37",
                      "text": "1,264,46,48",
                      "type": "1,264,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "label",
                    "text": "Sprite config for the labels, for instance the font and color.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,265,37",
                      "text": "1,265,43,63",
                      "type": "1,265,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "marker",
                    "text": "Sprite config for the markers, for instance the size and stroke color.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,266,37",
                      "text": "1,266,44,71",
                      "type": "1,266,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "markerSubStyle",
                    "text": "Cyclic used if series have multiple marker sprites.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,267,37",
                      "text": "1,267,52,52",
                      "type": "1,267,18"
                    }
                  }
                ],
                "src": {
                  "access": "1,260,12",
                  "name": "1,261,26",
                  "text": "1,261,37,59:1,262,12,32",
                  "type": "1,261,18"
                }
              },
              {
                "$type": "property",
                "name": "title",
                "text": "The human-readable name of the series (displayed in the legend).\n",
                "type": "String/String[]",
                "src": {
                  "name": "1,195,35",
                  "text": "1,196,12,65",
                  "type": "1,195,18"
                }
              },
              {
                "$type": "property",
                "name": "tooltip",
                "text": "Add tooltips to the visualization's markers. The config options for the\ntooltip are the same configuration used with {@link Ext.tip.ToolTip} plus a\n`{@link #cfg!renderer renderer}` config option and a `scope` for the renderer. For example:\n\n    tooltip: {\n      trackMouse: true,\n      width: 140,\n      height: 28,\n      renderer: function (toolTip, record, ctx) {\n          toolTip.setHtml(record.get('name') + ': ' + record.get('data1') + ' views');\n      }\n    }\n\nNote that tooltips are shown for series markers and won't work\nif the {@link #cfg!marker #marker} is not configured.\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "scope",
                    "text": "The scope to use when the renderer function is\ncalled.  Defaults to the Series instance.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,494,34",
                      "text": "1,494,40,47:1,495,12,42",
                      "type": "1,494,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "renderer",
                    "text": "An 'interceptor' method which can be used to\nmodify the tooltip attributes before it is shown.  The renderer function is\npassed the following params:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "toolTip",
                        "text": "The tooltip instance\n",
                        "type": "Ext.tip.ToolTip",
                        "src": {
                          "name": "1,499,52",
                          "text": "1,499,60,21",
                          "type": "1,499,18"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record instance for the\nchart item (sprite) currently targeted by the tooltip.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "1,500,51",
                          "text": "1,500,58,28:1,501,12,55",
                          "type": "1,500,18"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "ctx",
                        "text": "A data object with values relating to the\ncurrently targeted chart sprite\n",
                        "type": "Object",
                        "items": [
                          {
                            "$type": "property",
                            "name": "category",
                            "text": "The type of sprite passed to the\nrenderer function (will be \"items\", \"markers\", or \"labels\" depending on the\ntarget sprite of the tooltip)\n",
                            "type": "String",
                            "src": {
                              "name": "1,504,47",
                              "text": "1,504,56,33:1,505,12,106",
                              "type": "1,504,18"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "field",
                            "text": "The {@link #cfg!yField #yField} for the series\n",
                            "type": "String",
                            "src": {
                              "name": "1,507,47",
                              "text": "1,507,53,35",
                              "type": "1,507,18"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "index",
                            "text": "The target sprite's index within the\nseries' items\n",
                            "type": "Number",
                            "src": {
                              "name": "1,508,47",
                              "text": "1,508,53,37:1,509,12,14",
                              "type": "1,508,18"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "record",
                            "text": "The record instance for the\nchart item (sprite) currently targeted by the tooltip.\n",
                            "type": "Ext.data.Model",
                            "src": {
                              "name": "1,510,55",
                              "text": "1,510,62,28:1,511,12,55",
                              "type": "1,510,18"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "series",
                            "text": "The series instance\ncontaining the tooltip's target sprite\n",
                            "type": "Ext.chart.series.Series",
                            "src": {
                              "name": "1,512,64",
                              "text": "1,512,71,20:1,513,12,39",
                              "type": "1,512,18"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "sprite",
                            "text": "The sprite (item)\ntarget of the tooltip\n",
                            "type": "Ext.draw.sprite.Sprite",
                            "src": {
                              "name": "1,514,63",
                              "text": "1,514,70,18:1,515,12,22",
                              "type": "1,514,18"
                            }
                          }
                        ],
                        "src": {
                          "name": "1,502,43",
                          "text": "1,502,47,42:1,503,12,32",
                          "type": "1,502,18"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,496,36",
                      "text": "1,496,45,45:1,497,12,105",
                      "type": "1,496,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,478,26",
                  "text": "1,479,12,551",
                  "type": "1,478,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "triggerAfterDraw",
                "text": "Trigger drawlistener flag\n",
                "src": {
                  "access": "1,243,12",
                  "name": "1,246,0",
                  "text": "1,244,12,26"
                }
              },
              {
                "$type": "property",
                "name": "twoWayBindable",
                "text": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `value` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes #publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n",
                "type": "String/String[]/Object",
                "src": {
                  "name": "2,239,42",
                  "text": "2,240,12,402",
                  "type": "2,239,18"
                }
              },
              {
                "$type": "property",
                "name": "useDarkerStrokeColor",
                "text": "Colors for the series can be set directly through the 'colors' config, or indirectly\nwith the current theme or the 'colors' config that is set onto the chart. These colors\nare used as \"fill color\". Set this config to true, if you want a darker color for the\nstrokes. Set it to false if you want to use the same color as the fill color.\nAlternatively, you can set it to a number between 0 and 1 to control how much darker\nthe strokes should be.\nNote: this should be initial config and cannot be changed later on.\n",
                "type": "Boolean/Number",
                "src": {
                  "name": "1,283,34",
                  "text": "1,284,12,512",
                  "type": "1,283,18"
                }
              },
              {
                "$type": "property",
                "name": "viewModel",
                "text": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n",
                "type": "String/Object/Ext.app.ViewModel",
                "src": {
                  "name": "2,258,51",
                  "text": "2,259,12,690",
                  "type": "2,258,18"
                }
              },
              {
                "$type": "property",
                "name": "xAxis",
                "text": "xAxis The chart axis the series is bound to in the 'X' direction.\nNormally, this would be set automatically by the series.\nFor charts with multiple x-axes, this defines which x-axis is used by the series.\nIt refers to either axis' ID or the (zero-based) index of the axis\nin the chart's {@link Ext.chart.AbstractChart#cfg!axes Ext.chart.AbstractChart#axes} config.\n",
                "type": "Ext.chart.axis.Axis/Number/String",
                "src": {
                  "name": "5,33,0",
                  "text": "5,27,12,337",
                  "type": "5,26,18"
                }
              },
              {
                "$type": "property",
                "name": "xField",
                "text": "The field used to access the x axis value from the items from the data source.\n",
                "type": "String",
                "src": {
                  "name": "5,14,26",
                  "text": "5,15,12,79",
                  "type": "5,14,18"
                }
              },
              {
                "$type": "property",
                "name": "yAxis",
                "text": "yAxis The chart axis the series is bound to in the 'Y' direction.\nNormally, this would be set automatically by the series.\nFor charts with multiple y-axes, this defines which y-axis is used by the series.\nIt refers to either axis' ID or the (zero-based) index of the axis\nin the chart's {@link Ext.chart.AbstractChart#cfg!axes Ext.chart.AbstractChart#axes} config.\n",
                "type": "Ext.chart.axis.Axis/Number/String",
                "src": {
                  "name": "5,43,0",
                  "text": "5,37,12,337",
                  "type": "5,36,18"
                }
              },
              {
                "$type": "property",
                "name": "yField",
                "text": "The field(s) used to access the y-axis value(s) of the items from the data source.\n",
                "type": "String/String[]",
                "src": {
                  "name": "5,20,35",
                  "text": "5,21,12,83",
                  "type": "5,20,18"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "chartattached",
                "text": "Fires when the {@link Ext.chart.AbstractChart} has been attached to this series.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "1,169,41",
                      "type": "1,169,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,170,41",
                      "type": "1,170,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,167,15",
                  "text": "1,168,8,81"
                }
              },
              {
                "$type": "event",
                "name": "chartdetached",
                "text": "Fires when the {@link Ext.chart.AbstractChart} has been detached from this series.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "chart",
                    "type": "Ext.chart.AbstractChart",
                    "src": {
                      "name": "1,175,41",
                      "type": "1,175,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,176,41",
                      "type": "1,176,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,173,15",
                  "text": "1,174,8,83"
                }
              },
              {
                "$type": "event",
                "name": "itemclick",
                "text": "Fires when a click event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,141,41",
                      "type": "1,141,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "1,142,24",
                      "type": "1,142,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "1,143,23",
                      "type": "1,143,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,137,15",
                  "text": "1,138,8,164"
                }
              },
              {
                "$type": "event",
                "name": "itemdblclick",
                "text": "Fires when a double click event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,151,41",
                      "type": "1,151,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "1,152,24",
                      "type": "1,152,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "1,153,23",
                      "type": "1,153,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,147,15",
                  "text": "1,148,8,171"
                }
              },
              {
                "$type": "event",
                "name": "itemmousedown",
                "text": "Fires when a mousedown event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,111,41",
                      "type": "1,111,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "1,112,24",
                      "type": "1,112,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "1,113,23",
                      "type": "1,113,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,107,15",
                  "text": "1,108,8,168"
                }
              },
              {
                "$type": "event",
                "name": "itemmousemove",
                "text": "Fires when the mouse is moved on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,91,41",
                      "type": "1,91,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "1,92,24",
                      "type": "1,92,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "1,93,23",
                      "type": "1,93,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,87,15",
                  "text": "1,88,8,162"
                }
              },
              {
                "$type": "event",
                "name": "itemmouseout",
                "text": "Fires when the mouse exits a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,131,41",
                      "type": "1,131,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "1,132,24",
                      "type": "1,132,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "1,133,23",
                      "type": "1,133,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,127,15",
                  "text": "1,128,8,156"
                }
              },
              {
                "$type": "event",
                "name": "itemmouseover",
                "text": "Fires when the mouse enters a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,121,41",
                      "type": "1,121,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "1,122,24",
                      "type": "1,122,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "1,123,23",
                      "type": "1,123,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,117,15",
                  "text": "1,118,8,157"
                }
              },
              {
                "$type": "event",
                "name": "itemmouseup",
                "text": "Fires when a mouseup event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,101,41",
                      "type": "1,101,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "1,102,24",
                      "type": "1,102,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "1,103,23",
                      "type": "1,103,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,97,15",
                  "text": "1,98,8,166"
                }
              },
              {
                "$type": "event",
                "name": "itemtap",
                "text": "Fires when a tap event occurs on a series item.\n*Note*: This event requires the {@link Ext.chart.plugin.ItemEvents}\nplugin be added to the chart.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,161,41",
                      "type": "1,161,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Object",
                    "src": {
                      "name": "1,162,24",
                      "type": "1,162,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Event",
                    "src": {
                      "name": "1,163,23",
                      "type": "1,163,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,157,15",
                  "text": "1,158,8,162"
                }
              },
              {
                "$type": "event",
                "name": "storechange",
                "text": "Fires when the store of the series changes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "series",
                    "type": "Ext.chart.series.Series",
                    "src": {
                      "name": "1,182,41",
                      "type": "1,182,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newStore",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "1,183,32",
                      "type": "1,183,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldStore",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "1,184,32",
                      "type": "1,184,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,180,15",
                  "text": "1,181,8,44"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "4,413,27",
                      "type": "4,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,414,30,35",
                      "type": "4,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "4,412,12",
                  "name": "4,416,0",
                  "text": "4,411,12,65"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for {@link #method!onAfter #onAfter}.\n",
                "src": {
                  "name": "4,1236,0",
                  "text": "4,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for {@link #method!onBefore #onBefore}.\n",
                "src": {
                  "name": "4,1230,0",
                  "text": "4,1228,12,29"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addBindableUpdater",
                "since": "5.0.0",
                "text": "Ensures that the given property (if it is a Config System config) has a proper\n\"updater\" method on this instance to sync changes to the config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the config property.\n",
                    "type": "String",
                    "src": {
                      "name": "2,504,28",
                      "text": "2,504,37,33",
                      "type": "2,504,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,505,12",
                  "name": "2,508,0",
                  "since": "2,506,19",
                  "text": "2,502,12,144"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "6,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,118,12",
                  "name": "6,120,0",
                  "text": "6,116,12,125"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The {@link #method!on #on} method is shorthand for\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "4,835,35",
                      "text": "4,835,45,37:4,836,12,61",
                      "type": "4,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,838,38",
                      "text": "4,838,42,46:4,839,12,166",
                      "type": "4,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "4,843,29",
                      "text": "4,843,36,62:4,844,12,73",
                      "type": "4,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "4,853,36",
                          "text": "4,854,12,139",
                          "type": "4,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,857,36",
                          "text": "4,858,12,94",
                          "type": "4,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "4,861,37",
                          "text": "4,862,12,96",
                          "type": "4,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,865,36",
                          "text": "4,866,12,262",
                          "type": "4,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  {@link Ext.Function#method!requestAnimationFrame Ext.Function#requestAnimationFrame}. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,870,36",
                          "text": "4,871,12,323",
                          "type": "4,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "4,877,49",
                          "text": "4,878,12,135",
                          "type": "4,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to {@link Ext.Component}.**\n  The name of a Component property which references an {@link Ext.dom.Element}\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of {@link Ext.Component} which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "4,881,36",
                          "text": "4,882,12,781",
                          "type": "4,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "4,905,37",
                          "text": "4,906,12,295",
                          "type": "4,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopPropagation Ext.event.Event#stopPropagation} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "4,914,38",
                          "text": "4,915,12,212",
                          "type": "4,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!preventDefault Ext.event.Event#preventDefault} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "4,919,38",
                          "text": "4,920,12,210",
                          "type": "4,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopEvent Ext.event.Event#stopEvent} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "4,924,38",
                          "text": "4,925,12,200",
                          "type": "4,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "4,929,36",
                          "text": "4,930,12,179",
                          "type": "4,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `{@link #method!destroy destroy}` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using {@link #method!un #un}; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See {@link #method!un #un} for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "4,934,38",
                          "text": "4,935,12,441",
                          "type": "4,934,20",
                          "value": "4,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,942,37",
                          "text": "4,943,12,737",
                          "type": "4,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "4,954,37",
                          "text": "4,955,12,301",
                          "type": "4,954,20",
                          "value": "4,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "4,846,29",
                      "text": "4,846,38,44:4,847,12,154",
                      "type": "4,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "4,962,29",
                      "text": "4,963,12,1831",
                      "type": "4,962,20",
                      "value": "4,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `{@link #method!destroy destroy}` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "4,1021,29,54:4,1022,12,516",
                      "type": "4,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "4,1041,0",
                  "text": "4,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use `{@link #method!mon mon}` or `{@link #method!addManagedListener addManagedListener}` if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "4,456,56",
                      "text": "4,456,61,47",
                      "type": "4,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "4,457,34",
                      "text": "4,457,40,63",
                      "type": "4,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,458,36",
                      "text": "4,458,39,49:4,459,11,85",
                      "type": "4,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,461,27",
                      "text": "4,461,33,92:4,462,11,43",
                      "type": "4,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} options.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,463,27",
                      "text": "4,463,35,67:4,464,11,61",
                      "type": "4,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `{@link #method!destroy destroy}` method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "4,465,28,54:4,466,11,513",
                      "type": "4,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,484,0",
                  "text": "4,430,11,1093"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyBind",
                "since": "5.0.0",
                "items": [
                  {
                    "$type": "param",
                    "name": "binds",
                    "type": "String/Object",
                    "src": {
                      "name": "2,523,35",
                      "type": "2,523,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "currentBindings",
                    "type": "Object",
                    "src": {
                      "name": "2,524,28",
                      "type": "2,524,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "2,525,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,526,12",
                  "name": "2,529,0",
                  "since": "2,527,19"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applySession",
                "since": "5.0.0",
                "text": "Transforms a Session config to a proper instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "session",
                    "type": "Object",
                    "src": {
                      "name": "2,626,28",
                      "type": "2,626,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Session",
                    "src": {
                      "type": "2,627,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,628,12",
                  "name": "2,631,0",
                  "since": "2,629,19",
                  "text": "2,625,12,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyViewModel",
                "since": "5.0.0",
                "text": "Transforms a ViewModel config to a proper instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "viewModel",
                    "type": "String/Object/Ext.app.ViewModel",
                    "src": {
                      "name": "2,654,53",
                      "type": "2,654,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "type": "2,655,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,656,12",
                  "name": "2,659,0",
                  "since": "2,657,19",
                  "text": "2,653,12,52"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "6,1251,37",
                      "text": "6,1251,42,57:6,1252,12,67",
                      "type": "6,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "6,1253,29,48",
                      "type": "6,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,1250,12",
                  "name": "6,1255,0",
                  "text": "6,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "6,1338,37",
                      "text": "6,1338,42,57:6,1339,12,66",
                      "type": "6,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "6,1340,29,52",
                      "type": "6,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,1337,12",
                  "name": "6,1342,0",
                  "text": "6,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "4,1255,0",
                  "text": "4,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "4,1291,0",
                  "text": "4,1289,11,47"
                }
              },
              {
                "$type": "method",
                "constructor": true,
                "name": "constructor",
                "src": {
                  "constructor": "5,8,4"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "coordinateData",
                "text": "This method will return an array containing data coordinated by a specific axis.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "items",
                    "text": "Store records.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,925,23",
                      "text": "1,925,29,15",
                      "type": "1,925,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field to fetch from each record.\n",
                    "type": "String",
                    "src": {
                      "name": "1,926,24",
                      "text": "1,926,30,37",
                      "type": "1,926,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "axis",
                    "text": "The axis used to lay out the data.\n",
                    "type": "Ext.chart.axis.Axis",
                    "src": {
                      "name": "1,927,37",
                      "text": "1,927,42,35",
                      "type": "1,927,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "1,928,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,923,8",
                  "name": "1,930,0",
                  "text": "1,924,8,81"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "4,1522,27",
                      "text": "4,1522,35,55",
                      "type": "4,1522,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "4,1523,26",
                      "text": "4,1523,35,61",
                      "type": "4,1523,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "4,1524,20"
                    }
                  }
                ],
                "src": {
                  "access": "4,1520,11",
                  "name": "4,1526,0",
                  "text": "4,1521,11,103"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "6,1626,0",
                  "text": "6,1623,12,132"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "4,761,27",
                      "type": "4,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "4,762,26",
                      "type": "4,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "4,763,28",
                      "type": "4,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "4,759,11",
                  "name": "4,765,0",
                  "text": "4,758,11,24"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "4,1567,36",
                      "text": "4,1567,47,54",
                      "type": "4,1567,19"
                    }
                  }
                ],
                "src": {
                  "name": "4,1569,0",
                  "text": "4,1534,11,1138"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "findMatchingAxis",
                "text": "Given the list of axes in a certain direction and a list of series fields in that direction\nreturns the first matching axis for the series in that direction,\nor undefined if a match wasn't found.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "directionAxes",
                    "src": {
                      "name": "1,1117,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "directionFields",
                    "src": {
                      "name": "1,1117,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,1112,8",
                  "name": "1,1117,0",
                  "text": "1,1113,8,196"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #fireEventAction} instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n`{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "4,640,28",
                      "text": "4,640,38,31",
                      "type": "4,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "4,641,27",
                      "text": "4,641,32,58",
                      "type": "4,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "4,642,30",
                      "text": "4,642,33,21",
                      "type": "4,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "4,643,29",
                      "text": "4,643,36,62:4,644,12,72",
                      "type": "4,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`\n",
                    "type": "Object",
                    "src": {
                      "name": "4,645,29",
                      "text": "4,645,38,52:4,646,12,72",
                      "type": "4,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}` for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "4,647,29",
                      "text": "4,647,45,47:4,648,12,394",
                      "type": "4,647,20",
                      "value": "4,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "4,653,12",
                  "deprecatedVersion": "4,653,12",
                  "name": "4,655,0",
                  "text": "4,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}).\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "4,568,27",
                      "text": "4,568,37,31",
                      "type": "4,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "4,569,30",
                      "text": "4,569,35,54",
                      "type": "4,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,570,29,77",
                      "type": "4,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,572,0",
                  "text": "4,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "4,605,27",
                      "text": "4,605,37,31",
                      "type": "4,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "4,606,29",
                      "text": "4,606,34,53",
                      "type": "4,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,607,29,77",
                      "type": "4,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,609,0",
                  "text": "4,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "4,721,28",
                      "text": "4,721,38,31",
                      "type": "4,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "4,722,27",
                      "text": "4,722,32,58",
                      "type": "4,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,723,37",
                      "text": "4,723,40,21",
                      "type": "4,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "4,724,29",
                      "text": "4,724,36,62:4,725,12,72",
                      "type": "4,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "4,726,36",
                      "text": "4,726,44,47:4,727,12,201",
                      "type": "4,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,731,0",
                  "text": "4,714,12,409"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "4,793,41,63",
                      "type": "4,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "4,792,11",
                  "name": "4,795,0",
                  "text": "4,791,11,43"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "6,1469,29",
                      "text": "6,1469,35,40",
                      "type": "6,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "6,1470,30",
                      "text": "6,1470,42,60",
                      "type": "6,1470,20",
                      "value": "6,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "6,1471,29,27",
                      "type": "6,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "6,1473,0",
                  "text": "6,1466,12,151"
                }
              },
              {
                "$type": "method",
                "name": "getController",
                "text": "Returns the {@link Ext.app.ViewController} instance associated with this\ncomponent via the {@link #cfg!controller #controller} config or {@link #setController} method.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns this component's ViewController or\nnull if one was not configured\n",
                    "type": "Ext.app.ViewController",
                    "src": {
                      "text": "2,79,45,43:2,80,12,31",
                      "type": "2,79,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,76,20",
                  "text": "2,77,12,152"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "6,1506,12",
                  "name": "6,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "7,75,25,3",
                      "type": "7,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "7,77,0",
                  "text": "7,74,8,93"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "6,1551,29",
                      "text": "6,1551,35,37",
                      "type": "6,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "6,1552,35,48:6,1553,12,33",
                      "type": "6,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "6,1555,0",
                  "text": "6,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getItemByIndex",
                "text": "Returns a series item by index and (optional) category.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the item (matches store record index).\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1672,24",
                      "text": "1,1672,30,52",
                      "type": "1,1672,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "category",
                    "optional": true,
                    "text": "The category of item, e.g.: 'items', 'markers', 'sprites'.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1673,25",
                      "text": "1,1673,35,59",
                      "type": "1,1673,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "item\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1674,25,5",
                      "type": "1,1674,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1676,0",
                  "text": "1,1671,8,56"
                }
              },
              {
                "$type": "method",
                "name": "getItemForPoint",
                "text": "For a given x/y point relative to the main rect, find a corresponding item from this\nseries, if any.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "1,1656,24",
                      "type": "1,1656,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "1,1657,24",
                      "type": "1,1657,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "optional": true,
                    "text": "optional target to receive the result\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1658,25",
                      "text": "1,1658,33,38",
                      "type": "1,1658,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object describing the item, or null if there is no matching item. The exact contents of\nthis object will vary by series type, but should always contain at least the following:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "the record of the item.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "1,1662,40",
                          "text": "1,1662,47,24",
                          "type": "1,1662,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "point",
                        "text": "the x/y coordinates relative to the chart box of a single point\nfor this data item, which can be used as e.g. a tooltip anchor point.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,1663,31",
                          "text": "1,1663,37,64:1,1664,8,70",
                          "type": "1,1663,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "sprite",
                        "text": "the item's rendering Sprite.\n",
                        "type": "Ext.draw.sprite.Sprite",
                        "src": {
                          "name": "1,1665,48",
                          "text": "1,1665,55,29",
                          "type": "1,1665,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "subSprite",
                        "text": "the index if sprite is an instancing sprite.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,1666,32",
                          "text": "1,1666,42,45",
                          "type": "1,1666,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "1,1659,25,91:1,1660,8,89",
                      "type": "1,1659,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1668,0",
                  "text": "1,1654,8,101"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "6,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "6,1515,12",
                  "name": "6,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "4,1334,27",
                      "text": "4,1334,37,35",
                      "type": "4,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,1335,29,67",
                      "type": "4,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1337,0",
                  "text": "4,1331,11,161"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "8,100,20",
                      "text": "8,100,25,34",
                      "type": "8,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "8,101,22,57:8,102,4,15",
                      "type": "8,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "8,53,12",
                  "text": "8,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initBindable",
                "since": "5.0.0",
                "text": "This method triggers the lazy configs and must be called when it is time to\nfully boot up. The configs that must be initialized are: `{@link #cfg!bind bind}`, `{@link #cfg!publishes publishes}`,\n`{@link #cfg!session session}`, `{@link #cfg!twoWayBindable twoWayBindable}` and `{@link #cfg!viewModel viewModel}`.\n",
                "src": {
                  "access": "2,723,12",
                  "name": "2,726,0",
                  "since": "2,724,19",
                  "text": "2,720,12,199"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "6,1449,28",
                      "type": "6,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "6,1450,31,5",
                      "type": "6,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,1448,12",
                  "name": "6,1452,0",
                  "text": "6,1428,12,441"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initInheritedState",
                "text": "Called by `getInherited` to initialize the inheritedState the first time it is\nrequested.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "inheritedState",
                    "src": {
                      "name": "2,311,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,309,8",
                  "name": "2,311,0",
                  "text": "2,307,8,90"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "8,148,20",
                      "text": "8,148,30,71:8,149,4,18",
                      "type": "8,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "8,150,20",
                      "text": "8,150,27,50",
                      "type": "8,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "8,151,22,56",
                      "type": "8,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "8,106,12",
                  "text": "8,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "4,1344,29",
                      "text": "4,1344,36,40",
                      "type": "4,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,1345,30,31",
                      "type": "4,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "4,1347,0",
                  "text": "4,1343,12,57"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isSyncing",
                "text": "Checks if a particular binding is synchronizing the value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property being bound to.\n",
                    "type": "String",
                    "src": {
                      "name": "2,770,28",
                      "text": "2,770,33,41",
                      "type": "2,770,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the binding is syncing.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,771,30,34",
                      "type": "2,771,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,499,-1",
                  "name": "2,775,0",
                  "text": "2,769,12,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "6,1571,28",
                      "type": "6,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "6,1572,28",
                      "type": "6,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "6,1573,29,20",
                      "type": "6,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,1574,12",
                  "name": "6,1576,0",
                  "text": "6,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "lookupController",
                "since": "5.0.1",
                "text": "Gets the controller that controls this view. May be a controller that belongs\nto a view higher in the hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "`true` to not consider the controller directly attached\nto this view (if it exists).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,360,26",
                      "text": "2,360,42,56:2,361,8,29",
                      "type": "2,360,16",
                      "value": "2,360,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The controller. `{@link null}` if no controller is found.\n",
                    "type": "Ext.app.ViewController",
                    "src": {
                      "text": "2,362,41,50",
                      "type": "2,362,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,366,0",
                  "since": "2,364,15",
                  "text": "2,357,8,114"
                }
              },
              {
                "$type": "method",
                "name": "lookupSession",
                "since": "5.0.0",
                "text": "Returns the `{@link Ext.data.Session}` for this instance. This property may come\nfrom this instance's `{@link #cfg!session #session}` or be inherited from this object's parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` to ignore a `{@link #cfg!session session}` configured on\nthis instance and only consider an inherited session.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,373,26",
                      "text": "2,373,42,48:2,374,8,54",
                      "type": "2,373,16",
                      "value": "2,373,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Session",
                    "src": {
                      "type": "2,375,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,378,0",
                  "since": "2,376,15",
                  "text": "2,371,8,156"
                }
              },
              {
                "$type": "method",
                "name": "lookupViewModel",
                "since": "5.0.0",
                "text": "Returns the `{@link Ext.app.ViewModel}` for this instance. This property may come from this\nthis instance's `{@link #cfg!viewModel #viewModel}` or be inherited from this object's parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` to ignore a `{@link #cfg!viewModel viewModel}` configured on\nthis instance and only consider an inherited view model.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,394,26",
                      "text": "2,394,42,50:2,395,8,57",
                      "type": "2,394,16",
                      "value": "2,394,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "type": "2,396,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,399,0",
                  "since": "2,397,15",
                  "text": "2,392,8,164"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "makeBindableUpdater",
                "since": "5.0.0",
                "text": "Returns an `update` method for the given Config that will call `{@link #method!publishState #publishState}`\nto ensure two-way bindings (via `{@link #cfg!bind bind}`) as well as any `{@link #cfg!publishes publishes}` are updated.\nThis method is cached on the `cfg` instance for re-use.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cfg",
                    "type": "Ext.Config",
                    "src": {
                      "name": "2,749,32",
                      "type": "2,749,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The updater function.\n",
                    "type": "Function",
                    "src": {
                      "text": "2,750,31,22",
                      "type": "2,750,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,751,12",
                  "name": "2,754,0",
                  "since": "2,752,19",
                  "text": "2,746,12,223"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for {@link #method!addManagedListener #addManagedListener}.\n",
                "src": {
                  "inheritdoc": "4,1787,12",
                  "name": "4,1789,0",
                  "text": "4,1786,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for {@link #method!removeManagedListener #removeManagedListener}.\n",
                "src": {
                  "inheritdoc": "4,1793,12",
                  "name": "4,1795,0",
                  "text": "4,1792,12,46"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "4,1775,12",
                  "name": "4,1777,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "4,1190,44",
                      "text": "4,1190,54,37",
                      "type": "4,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,1191,37",
                      "text": "4,1191,40,30",
                      "type": "4,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1192,29",
                      "text": "4,1192,36,20",
                      "type": "4,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1193,29",
                      "text": "4,1193,38,44",
                      "type": "4,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1195,0",
                  "text": "4,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "4,1175,44",
                      "text": "4,1175,54,37",
                      "type": "4,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,1176,37",
                      "text": "4,1176,40,30",
                      "type": "4,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1177,29",
                      "text": "4,1177,36,20",
                      "type": "4,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1178,29",
                      "text": "4,1178,38,44",
                      "type": "4,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1180,0",
                  "text": "4,1170,12,183"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "8,220,20",
                      "text": "8,220,25,34",
                      "type": "8,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "8,221,22,57:8,222,4,22",
                      "type": "8,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "8,155,12",
                  "text": "8,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "provideLegendInfo",
                "text": "Provide legend information to target array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "\nThe information consists:\n",
                    "type": "Array",
                    "items": [
                      {
                        "$type": "property",
                        "name": "name",
                        "type": "String",
                        "src": {
                          "name": "1,1745,31",
                          "type": "1,1745,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "markColor",
                        "type": "String",
                        "src": {
                          "name": "1,1746,31",
                          "type": "1,1746,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "disabled",
                        "type": "Boolean",
                        "src": {
                          "name": "1,1747,32",
                          "type": "1,1747,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "series",
                        "type": "String",
                        "src": {
                          "name": "1,1748,31",
                          "type": "1,1748,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "type": "Number",
                        "src": {
                          "name": "1,1749,31",
                          "type": "1,1749,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,1742,23",
                      "text": "1,1743,8,27",
                      "type": "1,1742,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1751,0",
                  "text": "1,1740,8,45"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "publishState",
                "since": "5.0.0",
                "text": "Publish this components state to the `ViewModel`. If no arguments are given (or if\nthis is the first call), the entire state is published. This state is determined by\nthe `{@link #cfg!publishes publishes}` property.\n\nThis method is called only by component authors.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "optional": true,
                    "text": "The name of the property to update.\n",
                    "type": "String",
                    "src": {
                      "name": "2,422,25",
                      "text": "2,422,35,36",
                      "type": "2,422,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value of `property`. Only needed if `property` is given.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,423,25",
                      "text": "2,423,32,61",
                      "type": "2,423,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,424,8",
                  "name": "2,427,0",
                  "since": "2,425,15",
                  "text": "2,416,8,244"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1466,27",
                      "text": "4,1466,34,53",
                      "type": "4,1466,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "4,1467,36",
                      "text": "4,1467,43,58:4,1468,11,231",
                      "type": "4,1467,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "4,1473,28",
                      "text": "4,1473,36,60:4,1474,11,164",
                      "type": "4,1473,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the `{@link #method!destroy destroy}` method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "4,1479,28,130:4,1480,11,192",
                      "type": "4,1479,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1490,0",
                  "text": "4,1453,11,651"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for {@link #method!unAfter #unAfter}.\n",
                "src": {
                  "name": "4,1248,0",
                  "text": "4,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for {@link #method!unBefore #unBefore}.\n",
                "src": {
                  "name": "4,1242,0",
                  "text": "4,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "4,1102,28",
                      "text": "4,1102,38,51",
                      "type": "4,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "4,1103,30",
                      "text": "4,1103,33,66:4,1104,12,76",
                      "type": "4,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1106,28",
                      "text": "4,1106,34,62:4,1107,12,1017",
                      "type": "4,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1145,0",
                  "text": "4,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the {@link #method!mon #mon} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "4,526,56",
                      "text": "4,526,61,52",
                      "type": "4,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "4,527,34",
                      "text": "4,527,40,63",
                      "type": "4,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "4,528,29",
                      "text": "4,528,32,85",
                      "type": "4,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,529,27",
                      "text": "4,529,33,92:4,530,11,43",
                      "type": "4,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "4,532,0",
                  "text": "4,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1307,28",
                      "text": "4,1307,36,44",
                      "type": "4,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1308,27",
                      "text": "4,1308,43,26:4,1309,11,41",
                      "type": "4,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "4,1306,11",
                  "name": "4,1311,0",
                  "text": "4,1305,11,38"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "4,579,29",
                      "text": "4,579,48,46",
                      "type": "4,579,20",
                      "value": "4,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "4,580,29,24",
                      "type": "4,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "4,581,12",
                  "name": "4,583,0",
                  "text": "4,577,12,102"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the {@link #method!suspendEvent #suspendEvent} method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "4,1409,32",
                      "text": "4,1409,42,32",
                      "type": "4,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "4,1411,0",
                  "text": "4,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see {@link #method!suspendEvents #suspendEvents}).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See {@link #method!suspendEvents #suspendEvents}.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1431,29",
                      "text": "4,1431,43,59:4,1432,11,53",
                      "type": "4,1431,19"
                    }
                  }
                ],
                "src": {
                  "name": "4,1434,0",
                  "text": "4,1426,11,198"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "6,1478,35",
                      "text": "6,1478,40,69",
                      "type": "6,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "6,1479,29",
                      "text": "6,1479,36,41",
                      "type": "6,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "6,1480,31,5",
                      "type": "6,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "6,1482,0",
                  "text": "6,1476,12,46"
                }
              },
              {
                "$type": "method",
                "name": "setHiddenByIndex",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "type": "Number",
                    "src": {
                      "name": "1,1406,24",
                      "type": "1,1406,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1407,25",
                      "type": "1,1407,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1409,0"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.  In\nversions prior to 5.1, {@link #cfg!listeners #listeners} had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the {@link #method!on #on} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1804,28",
                      "text": "4,1804,38,14",
                      "type": "4,1804,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1806,0",
                  "text": "4,1798,12,402"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "6,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,1160,12",
                  "name": "6,1163,0",
                  "text": "6,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n{@link #method!resumeEvent #resumeEvent} will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "4,1381,32",
                      "text": "4,1381,42,33",
                      "type": "4,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "4,1383,0",
                  "text": "4,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see {@link #method!resumeEvents #resumeEvents})\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the {@link #method!resumeEvents #resumeEvents} call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1363,28",
                      "text": "4,1363,43,48:4,1364,11,81",
                      "type": "4,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "4,1366,0",
                  "text": "4,1361,11,64"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "themeColorCount",
                "text": "Returns the number of colors this series needs.\nA Pie chart needs one color per slice while a Stacked Bar chart needs one per segment.\nAn OHLC chart needs 2 colors (one for drops, one for rises), and most other charts need just 1 color.\n",
                "src": {
                  "access": "1,525,8",
                  "name": "1,530,0",
                  "text": "1,526,8,237"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "themeMarkerCount",
                "text": "Returns the number of markers this series needs.\nCurrently, only the Line, Scatter and Radar series use markers - and they need just one each.\n",
                "src": {
                  "access": "1,543,8",
                  "name": "1,547,0",
                  "text": "1,544,8,143"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "8,235,21,32",
                      "type": "8,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "8,226,12",
                  "text": "8,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`{@link #property!type type}` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "8,297,21,32",
                      "type": "8,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "8,239,12",
                  "text": "8,240,4,2445"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for {@link #method!removeListener #removeListener}.\n",
                "src": {
                  "inheritdoc": "4,1781,12",
                  "name": "4,1783,0",
                  "text": "4,1780,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "4,1218,44",
                      "text": "4,1218,54,55",
                      "type": "4,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,1219,37",
                      "text": "4,1219,40,23",
                      "type": "4,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1220,29",
                      "text": "4,1220,36,41",
                      "type": "4,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1221,29",
                      "text": "4,1221,38,22",
                      "type": "4,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1223,0",
                  "text": "4,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "4,1204,44",
                      "text": "4,1204,54,55",
                      "type": "4,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,1205,37",
                      "text": "4,1205,40,23",
                      "type": "4,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1206,29",
                      "text": "4,1206,36,41",
                      "type": "4,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1207,29",
                      "text": "4,1207,38,22",
                      "type": "4,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1209,0",
                  "text": "4,1200,12,98"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "6,1589,30",
                      "text": "6,1589,36,44",
                      "type": "6,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "6,1590,31,5",
                      "type": "6,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,1591,12",
                  "name": "6,1593,0",
                  "text": "6,1587,12,138"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateChartColors",
                "text": "When the chart's \"colors\" config changes, these colors are passed onto the series\nwhere they are used with the same priority as theme colors, i.e. they do not override\nthe series' \"colors\" config, nor the series' \"style\" config, but they do override\nthe colors from the theme's \"seriesThemes\" config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "colors",
                    "src": {
                      "name": "1,1495,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,1489,8",
                  "name": "1,1495,0",
                  "text": "1,1490,8,301"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateLegendStore",
                "text": "Updates chart's legend store when the value of the series' {@link #cfg!hidden #hidden} config\nchanges or when the {@link #method!setHiddenByIndex #setHiddenByIndex} method is called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "hidden",
                    "text": "Whether series (or its component) should be hidden or not.\n",
                    "src": {
                      "name": "1,1375,15",
                      "text": "1,1375,22,59"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "Used for stacked series.\n             If present, only the component with the specified index will change visibility.\n",
                    "src": {
                      "name": "1,1376,15",
                      "text": "1,1376,21,25:1,1377,8,93"
                    }
                  }
                ],
                "src": {
                  "access": "1,1372,8",
                  "name": "1,1379,0",
                  "text": "1,1373,8,146"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateSession",
                "text": "Updates the session config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "session",
                    "type": "Ext.data.Session",
                    "src": {
                      "name": "2,814,38",
                      "type": "2,814,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,815,12",
                  "name": "2,817,0",
                  "text": "2,813,12,28"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateViewModel",
                "text": "Updates the viewModel config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "viewModel",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "name": "2,829,39",
                      "type": "2,829,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldViewModel",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "name": "2,830,39",
                      "type": "2,830,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,831,12",
                  "name": "2,833,0",
                  "text": "2,828,12,30"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "8,340,21,50",
                      "type": "8,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "8,301,12",
                  "text": "8,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "6,1049,13",
                  "name": "6,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "6,1066,12",
                  "name": "6,1062,33",
                  "since": "6,1067,19",
                  "text": "6,1063,12,225",
                  "type": "6,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "6,1076,12",
                  "name": "6,1072,33",
                  "since": "6,1077,19",
                  "text": "6,1073,12,229",
                  "type": "6,1072,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "4,389,12",
                  "name": "4,392,0",
                  "text": "4,390,12,126"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "8,346,14",
                  "text": "8,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "defaultBindProperty",
                "optional": true,
                "text": "This property is used to determine the property of a `{@link #cfg!bind bind}` config that is just\nthe value. For example, if `defaultBindProperty=\"value\"`, then this shorthand\n`{@link #cfg!bind bind}` config:\n\n     bind: '{name}'\n\nIs equivalent to this object form:\n\n     bind: {\n         value: '{name}'\n     }\n\nThe `{@link #property!defaultBindProperty defaultBindProperty}` is set to \"value\" for form fields and to \"store\" for\ngrids and trees.\n",
                "type": "String",
                "src": {
                  "access": "2,295,8",
                  "name": "2,280,28",
                  "text": "2,281,8,373",
                  "type": "2,280,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "6,1102,12",
                  "name": "6,1100,32",
                  "text": "6,1101,12,69",
                  "type": "6,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when {@link #method!suspendEvents #suspendEvents} is called, decremented when {@link #method!resumeEvents #resumeEvents} is called.\n",
                "src": {
                  "access": "4,284,11",
                  "name": "4,287,0",
                  "text": "4,285,11,131"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "fieldCategoryX",
                "text": "Tells which store record fields should be used for a specific axis direction. E.g. for\n\n    fieldCategory<direction>: ['<fieldConfig1>', '<fieldConfig2>', ...]\n\nthe field names from the following configs will be used:\n\n    series.<fieldConfig1>Field, series.<fieldConfig2>Field, ...\n",
                "src": {
                  "access": "5,49,8",
                  "name": "5,60,0",
                  "text": "5,51,8,284"
                }
              },
              {
                "$type": "property",
                "name": "getSprites",
                "text": "Returns sprites the are used to draw this series.\n",
                "src": {
                  "name": "1,1282,0",
                  "text": "1,1280,8,50"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via {@link #observe}) or\non the {@link Ext.app.EventBus}. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "4,290,30",
                  "readonly": "4,291,11",
                  "text": "4,292,11,790",
                  "type": "4,290,22"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "6,1084,12",
                  "name": "6,1082,32",
                  "readonly": "6,1085,12",
                  "since": "6,1086,19",
                  "text": "6,1083,12,64",
                  "type": "6,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "6,1093,12",
                  "name": "6,1091,32",
                  "readonly": "6,1094,12",
                  "since": "6,1095,19",
                  "text": "6,1092,12,75",
                  "type": "6,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "6,1056,12",
                  "name": "6,1053,32",
                  "readonly": "6,1057,12",
                  "text": "6,1054,12,94",
                  "type": "6,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,278,31",
                  "text": "4,279,11,95",
                  "type": "4,278,22"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "isStoreDependantColorCount",
                "text": "Series, where the number of sprites (an so unique colors they require)\ndepends on the number of records in the store should set this to 'true'.\n",
                "src": {
                  "access": "1,535,8",
                  "name": "1,540,0",
                  "text": "1,537,8,144"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "8,46,14",
                  "text": "8,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "6,1413,12",
                  "name": "6,1379,34",
                  "text": "6,1380,12,1011",
                  "type": "6,1379,23"
                }
              },
              {
                "$type": "property",
                "name": "seriesType",
                "text": "Default series sprite type.\n",
                "type": "String",
                "src": {
                  "name": "1,75,27",
                  "text": "1,76,8,28",
                  "type": "1,75,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "type",
                "text": "The type of series. Set in subclasses.\n",
                "type": "String",
                "src": {
                  "access": "1,70,8",
                  "name": "1,68,27",
                  "text": "1,69,8,39",
                  "type": "1,68,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "validRefRe",
                "text": "Regular expression used for validating `{@link #cfg!reference reference}` values.\n",
                "type": "RegExp",
                "src": {
                  "access": "2,302,8",
                  "name": "2,304,0",
                  "text": "2,301,8,59",
                  "type": "2,300,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "6,940,28",
                      "type": "6,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "6,941,32",
                      "text": "6,941,44,49",
                      "type": "6,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "6,942,12",
                  "inheritable": "6,944,12",
                  "name": "6,946,0",
                  "static": "6,943,12",
                  "text": "6,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "6,464,28",
                      "type": "6,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "6,461,12",
                  "inheritable": "6,463,12",
                  "name": "6,466,0",
                  "static": "6,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "6,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "6,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "6,659,12",
                  "inheritable": "6,661,12",
                  "name": "6,665,0",
                  "static": "6,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "6,522,28",
                      "text": "6,522,36,34",
                      "type": "6,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "6,523,30",
                      "text": "6,523,46,39",
                      "type": "6,523,20",
                      "value": "6,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "6,524,30",
                      "text": "6,524,45,45:6,525,12,53",
                      "type": "6,524,20",
                      "value": "6,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "6,527,12",
                  "name": "6,529,0",
                  "static": "6,526,12",
                  "text": "6,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "6,450,28",
                      "type": "6,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "6,451,31,5",
                      "type": "6,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "6,453,12",
                  "name": "6,455,0",
                  "static": "6,452,12",
                  "text": "6,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "6,693,30",
                      "text": "6,693,40,33",
                      "type": "6,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "6,694,34",
                      "text": "6,694,42,35",
                      "type": "6,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "6,695,31,5",
                      "type": "6,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,698,12",
                  "inheritable": "6,697,12",
                  "name": "6,700,0",
                  "static": "6,696,12",
                  "text": "6,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "6,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,810,12",
                  "inheritable": "6,812,12",
                  "name": "6,814,0",
                  "static": "6,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "6,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,824,12",
                  "inheritable": "6,826,12",
                  "name": "6,828,0",
                  "static": "6,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "6,107,29,22",
                      "type": "6,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "6,109,12",
                  "name": "6,111,0",
                  "static": "6,108,12",
                  "text": "6,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "6,1018,35",
                      "text": "6,1018,41,63:6,1019,12,43",
                      "type": "6,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "6,1020,35",
                      "text": "6,1020,42,25",
                      "type": "6,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "6,1022,12",
                  "name": "6,1025,0",
                  "static": "6,1021,12",
                  "text": "6,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "6,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "6,347,12",
                  "inheritable": "6,349,12",
                  "name": "6,352,0",
                  "static": "6,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "6,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,968,12",
                  "inheritable": "6,970,12",
                  "name": "6,972,0",
                  "static": "6,969,12",
                  "text": "6,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "6,989,29,10",
                      "type": "6,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "6,991,12",
                  "name": "6,993,0",
                  "static": "6,990,12",
                  "text": "6,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "6,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "6,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,840,12",
                  "inheritable": "6,842,12",
                  "name": "6,844,0",
                  "static": "6,841,12",
                  "text": "6,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "6,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "6,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "6,424,12",
                  "inheritable": "6,426,12",
                  "name": "6,428,0",
                  "static": "6,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "6,762,28",
                      "text": "6,762,36,52:6,763,12,66",
                      "type": "6,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "6,764,31,11",
                      "type": "6,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "6,766,12",
                  "name": "6,768,0",
                  "static": "6,765,12",
                  "text": "6,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "6,402,12",
                  "inheritable": "6,404,12",
                  "name": "6,406,0",
                  "static": "6,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "6,395,12",
                  "inheritable": "6,397,12",
                  "name": "6,399,0",
                  "static": "6,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,68,0",
          "extends": "0,3,13",
          "name": "0,2,11",
          "requires": "0,73,0,0:0,74,0,0",
          "text": "0,4,4,1447"
        }
      }
    ]
  },
  "version": 1
}