{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/chart/theme/Base.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "mixed": "Ext.mixin.Factoryable",
        "mixins": "Ext.mixin.Factoryable",
        "name": "Ext.chart.theme.Base",
        "requires": "Ext.draw.Color",
        "text": "Abstract class that provides default styles for non-specified things.\nShould be sub-classed when creating new themes.\nFor example:\n\n    Ext.define('Ext.chart.theme.Custom', {\n        extend: 'Ext.chart.theme.Base',\n        singleton: true,\n        alias: 'chart.theme.custom',\n        config: {\n            baseColor: '#ff9f00'\n        }\n    });\n\nTheme provided values will not override the values provided in an instance config.\nHowever, if a theme provided value is an object, it will be merged with the value\nfrom the instance config, unless the theme provided object has a '$default' key\nset to 'true'.\n\nCertain chart theme configs (e.g. 'fontSize') may use the 'default' value to indicate\nthat they should inherit a value from the corresponding CSS style provided by\na framework theme. Additionally, one can use basic binary operators like multiplication,\naddition and subtraction to derive from the default value, e.g. fontSize: 'default*1.3'.\n\nImportant: the theme should not use the 'font' shorthand to specify the font of labels\nand other text elements of a chart. Instead, individual font properties should be used:\n'fontStyle', 'fontVariant', 'fontWeight', 'fontSize' and 'fontFamily'.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "axis",
                "text": "Theme defaults for the axes.\nCan apply to all axes or only axes with a specific position.\nFor example:\n\n    axis: {\n      defaults: {\n        style: {strokeStyle: 'red'}\n      },\n      left: {\n        title: {fillStyle: 'green'}\n      }\n    }\n\nThe values from the axis.defaults and axis.*position* configs (where *position*\nis a valid axis <a href='#!/api/Ext.chart.axis.Axis-cfg-position'>Ext.chart.axis.Axis#position</a>, e.g. 'bottom') will be\napplied to corresponding <a href='#!/api/Ext.chart.axis.Axis'>Ext.chart.axis.Axis</a> configs.\nE.g., the axis.defaults.label config will apply to the <a href='#!/api/Ext.chart.axis.Axis-cfg-label'>Ext.chart.axis.Axis#label</a>\nconfig of all axes, where the axis.left.titleMargin config will only apply to the\n<a href='#!/api/Ext.chart.axis.Axis-cfg-titleMargin'>Ext.chart.axis.Axis#titleMargin</a> config of all axes positioned to the left.\n",
                "type": "Object",
                "src": {
                  "name": "0,104,26",
                  "text": "0,105,12,722",
                  "type": "0,104,18"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "the <a href='#!/api/Ext.chart.AbstractChart-background'>Ext.chart.AbstractChart#background</a> config instead.\n",
                "deprecatedVersion": "Use",
                "name": "background",
                "since": "5.0.1",
                "src": {
                  "deprecatedMessage": "0,252,12",
                  "deprecatedVersion": "0,252,12",
                  "name": "0,255,0",
                  "since": "0,253,19"
                }
              },
              {
                "$type": "property",
                "name": "baseColor",
                "text": "The base color used to generate the <a href='#!/api/Ext.chart.AbstractChart-cfg-colors'>Ext.chart.AbstractChart#colors</a> of the theme.\n",
                "type": "String/Ext.draw.Color",
                "src": {
                  "name": "0,45,41",
                  "text": "0,46,12,89",
                  "type": "0,45,18"
                }
              },
              {
                "$type": "property",
                "name": "chart",
                "text": "Theme defaults for the chart.\nCan apply to all charts or just a specific type of chart.\nFor example:\n\n    chart: {\n      defaults: {\n        background: 'lightgray'\n      },\n      polar: {\n        background: 'green'\n      }\n    }\n\nThe values from the chart.defaults and chart.*type* configs (where *type* is a valid\nchart xtype, e.g. <a href='#!/api/Ext.chart.CartesianChart'>Ext.chart.CartesianChart</a> or <a href='#!/api/Ext.chart.PolarChart'>Ext.chart.PolarChart</a>)\nwill be applied to corresponding chart configs.\nE.g., the chart.defaults.background config will set the <a href='#!/api/Ext.chart.AbstractChart-cfg-background'>Ext.chart.AbstractChart#background</a>\nconfig of all charts, where the chart.cartesian.flipXY config will only set the\n<a href='#!/api/Ext.chart.CartesianChart-cfg-flipXY'>Ext.chart.CartesianChart#flipXY</a> config of all cartesian charts.\n",
                "type": "Object",
                "src": {
                  "name": "0,76,26",
                  "text": "0,77,12,720",
                  "type": "0,76,18"
                }
              },
              {
                "$type": "property",
                "name": "colors",
                "text": "\nArray of colors/gradients to be used by the theme.\nDefaults to <a href='#!/api/Ext.chart.theme.Base-colorDefaults'>colorDefaults</a>.\n",
                "type": "Array",
                "src": {
                  "name": "0,51,25",
                  "text": "0,52,12,88",
                  "type": "0,51,18"
                }
              },
              {
                "$type": "property",
                "name": "gradients",
                "text": "\nThe gradient config to be used by series' sprites. E.g.:\n\n    {\n      type: 'linear',\n      degrees: 90\n    }\n\nPlease refer to the documentation for the <a href='#!/api/Ext.draw.gradient.Linear'>Ext.draw.gradient.Linear</a>\nand <a href='#!/api/Ext.draw.gradient.Radial'>Ext.draw.gradient.Radial</a> gradients for all possible options.\nThe color <a href='#!/api/Ext.draw.gradient.Gradient-cfg-stops'>Ext.draw.gradient.Gradient#stops</a> for the gradients\nwill be generated by the theme based on the <a href='#!/api/Ext.chart.theme.Base-cfg-colors'>colors</a> config.\n",
                "type": "Object",
                "src": {
                  "name": "0,59,26",
                  "text": "0,60,12,417",
                  "type": "0,59,18"
                }
              },
              {
                "$type": "property",
                "name": "series",
                "text": "Theme defaults for the series.\nCan apply to all series or just a specific type of series.\nFor example:\n\n    series: {\n      defaults: {\n        style: {\n          lineWidth: 2\n        }\n      },\n      bar: {\n        animation: {\n          easing: 'bounceOut',\n          duration: 1000\n        }\n      }\n    }\n\nThe values from the series.defaults and series.*type* configs (where *type*\nis a valid series <a href='#!/api/Ext.chart.series.Series-property-type'>Ext.chart.series.Series#type</a>, e.g. 'line') will be\napplied to corresponding series configs.\nE.g., the series.defaults.label config will apply to the <a href='#!/api/Ext.chart.series.Series-cfg-label'>Ext.chart.series.Series#label</a>\nconfig of all series, where the series.line.step config will only apply to the\n<a href='#!/api/Ext.chart.series.Line-cfg-step'>Ext.chart.series.Line#step</a> config of <a href='#!/api/Ext.chart.series.Line'>Ext.chart.series.Line</a> series.\n",
                "type": "Object",
                "src": {
                  "name": "0,163,26",
                  "text": "0,164,12,766",
                  "type": "0,163,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "seriesThemes",
                "text": "An object with the following structure:\n{\n  fillStyle: [color, color, ...],\n  strokeStyle: [color, color, ...],\n  ...\n}\nIf missing, generated from the other configs: 'baseColor, 'gradients', 'colors'.\n",
                "src": {
                  "access": "0,230,12",
                  "name": "0,239,0",
                  "text": "0,231,12,201"
                }
              },
              {
                "$type": "property",
                "name": "sprites",
                "text": "Default style for the custom chart sprites by type.\nFor example:\n\n    sprites: {\n      text: {\n        fontWeight: 300\n      }\n    }\n\nThese sprite attribute overrides will apply to custom sprites of all charts\nspecified using the <a href='#!/api/Ext.draw.Container-cfg-sprites'>Ext.draw.Container#sprites</a> config.\nThe overrides are specified by sprite type, e.g. sprites.text config\ntells to apply given attributes to all <a href='#!/api/Ext.draw.sprite.Text'>Ext.draw.sprite.Text</a> sprites.\n",
                "type": "Object",
                "src": {
                  "name": "0,205,26",
                  "text": "0,206,12,424",
                  "type": "0,205,18"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "the <a href='#!/api/Ext.draw.Container-gradients'>Ext.draw.Container#gradients</a> config instead.\n",
                "deprecatedVersion": "Use",
                "name": "useGradients",
                "since": "5.0.1",
                "src": {
                  "deprecatedMessage": "0,246,12",
                  "deprecatedVersion": "0,246,12",
                  "name": "0,249,0",
                  "since": "0,247,19"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.chart.theme.Base-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.chart.theme.Base-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.chart.theme.Base-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.chart.theme.Base-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.chart.theme.Base-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.chart.theme.Base-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.chart.theme.Base-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.chart.theme.Base-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.chart.theme.Base-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.chart.theme.Base-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.chart.theme.Base-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.chart.theme.Base-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.chart.theme.Base-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.chart.theme.Base-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.chart.theme.Base-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.chart.theme.Base-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.chart.theme.Base-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.chart.theme.Base-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.chart.theme.Base-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "2,295,28",
                  "text": "2,296,8,128",
                  "type": "2,295,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "mixins": "0,32,0",
          "name": "0,29,0",
          "requires": "0,35,0",
          "text": "0,2,4,1197"
        }
      }
    ]
  },
  "version": 1
}