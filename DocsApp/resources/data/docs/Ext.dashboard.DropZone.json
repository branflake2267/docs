{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/dashboard/DropZone.js",
    "../../../ext/classic/classic/src/dd/DropTarget.js",
    "../../../ext/classic/classic/src/dd/DDTarget.js",
    "../../../ext/classic/classic/src/dd/DragDrop.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extends": "Ext.dd.DropTarget",
        "name": "Ext.dashboard.DropZone",
        "text": "Internal class that manages drag/drop for the `Dashboard`.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "containerScroll",
                "text": "True to register this container with the ScrollManager for auto scrolling during\ndrag operations.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,28,23",
                  "text": "1,29,8,98",
                  "type": "1,28,14"
                }
              },
              {
                "$type": "property",
                "name": "ddGroup",
                "text": "A named drag drop group to which this object belongs.  If a group is specified, then this object will only\ninteract with other drag drop objects in the same group.\n",
                "type": "String",
                "src": {
                  "name": "1,35,22",
                  "text": "1,36,8,164",
                  "type": "1,35,14"
                }
              },
              {
                "$type": "property",
                "name": "dropAllowed",
                "text": "The CSS class returned to the drag source when drop is allowed.\n",
                "type": "String",
                "src": {
                  "name": "1,44,22",
                  "text": "1,45,8,64",
                  "type": "1,44,14"
                }
              },
              {
                "$type": "property",
                "name": "dropNotAllowed",
                "text": "The CSS class returned to the drag source when drop is not allowed.\n",
                "type": "String",
                "src": {
                  "name": "1,49,22",
                  "text": "1,50,8,68",
                  "type": "1,49,14"
                }
              },
              {
                "$type": "property",
                "name": "overClass",
                "optional": true,
                "text": "The CSS class applied to the drop target element while the drag source is over it.\n",
                "type": "String",
                "value": "\"\"",
                "src": {
                  "name": "1,40,23",
                  "text": "1,41,8,83",
                  "type": "1,40,14",
                  "value": "1,40,33"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "addInvalidHandleClass",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,141,0",
                  "text": "2,138,8,68"
                }
              },
              {
                "$type": "method",
                "name": "addInvalidHandleId",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,146,0",
                  "text": "2,143,8,68"
                }
              },
              {
                "$type": "method",
                "name": "addInvalidHandleType",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,151,0",
                  "text": "2,148,8,68"
                }
              },
              {
                "$type": "method",
                "name": "addToGroup",
                "text": "Adds this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "the name of the group\n",
                    "type": "String",
                    "src": {
                      "name": "3,711,24",
                      "text": "3,711,31,22",
                      "type": "3,711,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,713,0",
                  "text": "3,708,8,149"
                }
              },
              {
                "$type": "method",
                "name": "applyConfig",
                "text": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.\n",
                "src": {
                  "name": "3,624,0",
                  "text": "3,618,8,303"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4Drag",
                "text": "Code that executes immediately before the onDrag event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "3,336,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,334,8",
                  "name": "3,336,0",
                  "text": "3,333,8,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4DragDrop",
                "text": "Code that executes immediately before the onDragDrop event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "3,390,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,388,8",
                  "name": "3,390,0",
                  "text": "3,387,8,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4DragOut",
                "text": "Code that executes immediately before the onDragOut event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "3,375,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,373,8",
                  "name": "3,375,0",
                  "text": "3,372,8,58"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4DragOver",
                "text": "Code that executes immediately before the onDragOver event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "3,359,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,357,8",
                  "name": "3,359,0",
                  "text": "3,356,8,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4EndDrag",
                "text": "Code that executes immediately before the endDrag event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "3,413,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,411,8",
                  "name": "3,413,0",
                  "text": "3,410,8,56"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4MouseDown",
                "text": "Code executed immediately before the onMouseDown event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the mousedown event\n",
                    "type": "Event",
                    "src": {
                      "name": "3,423,23",
                      "text": "3,423,25,20",
                      "type": "3,423,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,424,8",
                  "name": "3,426,0",
                  "text": "3,422,8,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4StartDrag",
                "text": "Code that executes immediately before the startDrag event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "3,322,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "3,322,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,320,8",
                  "name": "3,322,0",
                  "text": "3,319,8,58"
                }
              },
              {
                "$type": "method",
                "name": "clearConstraints",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,111,0",
                  "text": "2,108,8,68"
                }
              },
              {
                "$type": "method",
                "name": "clearTicks",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,116,0",
                  "text": "2,113,8,68"
                }
              },
              {
                "$type": "method",
                "name": "constrainTo",
                "text": "Initializes the drag drop object's constraints to restrict movement to a certain element.\n\nUsage:\n\n    var dd = new Ext.dd.DDProxy(\"dragDiv1\", \"proxytest\",\n                   { dragElId: \"existingProxyDiv\" });\n    dd.startDrag = function(){\n        this.constrainTo(\"parent-id\");\n    };\n\nOr you can initalize it using the <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> object:\n\n    Ext.get(\"dragDiv1\").initDDProxy(\"proxytest\", {dragElId: \"existingProxyDiv\"}, {\n        startDrag : function(){\n            this.constrainTo(\"parent-id\");\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "text": "The element or element ID to constrain to.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "3,477,52",
                      "text": "3,477,64,43",
                      "type": "3,477,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "pad",
                    "text": "(optional) Pad provides a way to specify \"padding\" of the constraints,\nand can be either a number for symmetrical padding (4 would be equal to `{left:4, right:4, top:4, bottom:4}`) or\nan object containing the sides to pad. For example: `{right:10, bottom:10}`\n",
                    "type": "Object/Number",
                    "src": {
                      "name": "3,478,31",
                      "text": "3,478,35,71:3,479,8,189",
                      "type": "3,478,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "inContent",
                    "text": "(optional) Constrain the draggable in the content box of the element (inside padding and borders)\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,481,25",
                      "text": "3,481,35,98",
                      "type": "3,481,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,483,0",
                  "text": "3,459,8,532"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new DropTarget.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The container element or ID of it.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "1,11,52",
                      "text": "1,11,55,35",
                      "type": "1,11,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,12,24",
                      "type": "1,12,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,14,0",
                  "text": "1,10,8,24"
                }
              },
              {
                "$type": "method",
                "name": "endDrag",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,51,0",
                  "text": "2,48,8,68"
                }
              },
              {
                "$type": "method",
                "name": "getDragEl",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,36,0",
                  "text": "2,33,8,68"
                }
              },
              {
                "$type": "method",
                "name": "getEl",
                "text": "Returns a reference to the linked element\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the html element\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "3,530,30,17",
                      "type": "3,530,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,532,0",
                  "text": "3,529,8,42"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTick",
                "text": "Normally the drag element is moved pixel by pixel, but we can specify\nthat it move a number of pixels at a time.  This method resolves the\nlocation when we have it set up like this.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "val",
                    "text": "where we want to place the object\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1094,24",
                      "text": "3,1094,28,34",
                      "type": "3,1094,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "tickArray",
                    "text": "sorted array of valid points\n",
                    "type": "Number[]",
                    "src": {
                      "name": "3,1095,26",
                      "text": "3,1095,36,29",
                      "type": "3,1095,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the closest tick\n",
                    "type": "Number",
                    "src": {
                      "text": "3,1096,25,17",
                      "type": "3,1096,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,1097,8",
                  "name": "3,1099,0",
                  "text": "3,1091,8,182"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleMouseDown",
                "text": "Called when this object is clicked\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Event",
                    "src": {
                      "name": "3,806,23",
                      "type": "3,806,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "the clicked dd object (this dd obj)\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "3,807,33",
                      "text": "3,807,37,36",
                      "type": "3,807,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,808,8",
                  "name": "3,810,0",
                  "text": "3,805,8,35"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleOnAvailable",
                "text": "Executed when the linked element is available\n",
                "src": {
                  "access": "3,636,8",
                  "name": "3,638,0",
                  "text": "3,635,8,46"
                }
              },
              {
                "$type": "method",
                "name": "init",
                "text": "Sets up the DragDrop object.  Must be called in the constructor of any\nExt.dd.DragDrop subclass\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the linked element\n",
                    "type": "String",
                    "src": {
                      "name": "3,553,24",
                      "text": "3,553,27,29",
                      "type": "3,553,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "the group of related items\n",
                    "type": "String",
                    "src": {
                      "name": "3,554,24",
                      "text": "3,554,31,27",
                      "type": "3,554,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "configuration attributes\n",
                    "type": "Object",
                    "src": {
                      "name": "3,555,24",
                      "text": "3,555,31,25",
                      "type": "3,555,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,557,0",
                  "text": "3,551,8,96"
                }
              },
              {
                "$type": "method",
                "name": "initTarget",
                "text": "Initializes Targeting functionality only... the object does not\nget a mousedown handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the linked element\n",
                    "type": "String",
                    "src": {
                      "name": "3,575,24",
                      "text": "3,575,27,29",
                      "type": "3,575,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "the group of related items\n",
                    "type": "String",
                    "src": {
                      "name": "3,576,24",
                      "text": "3,576,31,27",
                      "type": "3,576,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "configuration attributes\n",
                    "type": "Object",
                    "src": {
                      "name": "3,577,24",
                      "text": "3,577,31,25",
                      "type": "3,577,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,579,0",
                  "text": "3,573,8,89"
                }
              },
              {
                "$type": "method",
                "name": "isLocked",
                "text": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "true if this obj or all drag/drop is locked, else\nfalse\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,797,26,50:3,798,8,6",
                      "type": "3,797,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,800,0",
                  "text": "3,795,8,126"
                }
              },
              {
                "$type": "method",
                "name": "isValidHandleChild",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,41,0",
                  "text": "2,38,8,68"
                }
              },
              {
                "$type": "method",
                "name": "lock",
                "text": "Locks this instance\n",
                "src": {
                  "name": "3,178,0",
                  "text": "3,176,8,20"
                }
              },
              {
                "$type": "method",
                "name": "notifyDrop",
                "template": true,
                "text": "The function a <a href='#!/api/Ext.dd.DragSource'>Ext.dd.DragSource</a> calls once to notify this drop target that the dragged item has\nbeen dropped on it. This method removes any <a href='#!/api/Ext.dashboard.DropZone-cfg-overClass'>overClass</a> and returns false, so you must provide an\nimplementation that does something to process the drop event and returns true so that the drag source's\nrepair action does not run.\n\nYou should `callParent` from an override of this method to ensure proper cleanup is\nperformed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The drag source that was dragged over this drop target\n",
                    "type": "Ext.dd.DragSource",
                    "src": {
                      "name": "1,121,35",
                      "text": "1,121,42,55",
                      "type": "1,121,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event\n",
                    "type": "Event",
                    "src": {
                      "name": "1,122,23",
                      "text": "1,122,25,10",
                      "type": "1,122,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "An object containing arbitrary data supplied by the drag source\n",
                    "type": "Object",
                    "src": {
                      "name": "1,123,24",
                      "text": "1,123,29,64",
                      "type": "1,123,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "False if the drop was invalid.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,124,26,31",
                      "type": "1,124,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,127,0",
                  "template": "1,125,8",
                  "text": "1,113,8,432"
                }
              },
              {
                "$type": "method",
                "name": "notifyEnter",
                "template": true,
                "text": "The function a <a href='#!/api/Ext.dd.DragSource'>Ext.dd.DragSource</a> calls once to notify this drop target that the source is now over the\ntarget.  This default implementation adds the CSS class specified by overClass (if any) to the drop element\nand returns the dropAllowed config value.  This method should be overridden if drop validation is required.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The drag source that was dragged over this drop target\n",
                    "type": "Ext.dd.DragSource",
                    "src": {
                      "name": "1,68,35",
                      "text": "1,68,42,55",
                      "type": "1,68,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event\n",
                    "type": "Event",
                    "src": {
                      "name": "1,69,23",
                      "text": "1,69,25,10",
                      "type": "1,69,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "An object containing arbitrary data supplied by the drag source\n",
                    "type": "Object",
                    "src": {
                      "name": "1,70,24",
                      "text": "1,70,29,64",
                      "type": "1,70,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "status The CSS class that communicates the drop status back to the source so that the\nunderlying <a href='#!/api/Ext.dd.StatusProxy'>Ext.dd.StatusProxy</a> can be updated\n",
                    "type": "String",
                    "src": {
                      "text": "1,71,25,86:1,72,8,53",
                      "type": "1,71,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,75,0",
                  "template": "1,73,8",
                  "text": "1,65,8,327"
                }
              },
              {
                "$type": "method",
                "name": "notifyOut",
                "template": true,
                "text": "The function a <a href='#!/api/Ext.dd.DragSource'>Ext.dd.DragSource</a> calls once to notify this drop target that the source has been dragged\nout of the target without dropping. This default implementation simply removes the CSS class specified by\n<a href='#!/api/Ext.dashboard.DropZone-cfg-overClass'>overClass</a> (if any) from the drop element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The drag source that was dragged over this drop target\n",
                    "type": "Ext.dd.DragSource",
                    "src": {
                      "name": "1,101,35",
                      "text": "1,101,42,55",
                      "type": "1,101,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event\n",
                    "type": "Event",
                    "src": {
                      "name": "1,102,23",
                      "text": "1,102,25,10",
                      "type": "1,102,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "An object containing arbitrary data supplied by the drag source\n",
                    "type": "Object",
                    "src": {
                      "name": "1,103,24",
                      "text": "1,103,29,64",
                      "type": "1,103,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,0",
                  "template": "1,104,8",
                  "text": "1,98,8,262"
                }
              },
              {
                "$type": "method",
                "name": "notifyOver",
                "template": true,
                "text": "The function a <a href='#!/api/Ext.dd.DragSource'>Ext.dd.DragSource</a> calls continuously while it is being dragged over the target.\nThis method will be called on every mouse movement while the drag source is over the drop target.\nThis default implementation simply returns the dropAllowed config value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The drag source that was dragged over this drop target\n",
                    "type": "Ext.dd.DragSource",
                    "src": {
                      "name": "1,86,35",
                      "text": "1,86,42,55",
                      "type": "1,86,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event\n",
                    "type": "Event",
                    "src": {
                      "name": "1,87,23",
                      "text": "1,87,25,10",
                      "type": "1,87,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "An object containing arbitrary data supplied by the drag source\n",
                    "type": "Object",
                    "src": {
                      "name": "1,88,24",
                      "text": "1,88,29,64",
                      "type": "1,88,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "status The CSS class that communicates the drop status back to the source so that the\nunderlying <a href='#!/api/Ext.dd.StatusProxy'>Ext.dd.StatusProxy</a> can be updated\n",
                    "type": "String",
                    "src": {
                      "text": "1,89,25,86:1,90,8,53",
                      "type": "1,89,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,93,0",
                  "template": "1,91,8",
                  "text": "1,83,8,274"
                }
              },
              {
                "$type": "method",
                "name": "onAvailable",
                "text": "Override the onAvailable method to do what is needed after the initial\nposition was determined.\n",
                "src": {
                  "name": "3,444,0",
                  "text": "3,441,8,96"
                }
              },
              {
                "$type": "method",
                "name": "onDrag",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,56,0",
                  "text": "2,53,8,68"
                }
              },
              {
                "$type": "method",
                "name": "onDragDrop",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,61,0",
                  "text": "2,58,8,68"
                }
              },
              {
                "$type": "method",
                "name": "onDragEnter",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,66,0",
                  "text": "2,63,8,68"
                }
              },
              {
                "$type": "method",
                "name": "onDragOut",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,71,0",
                  "text": "2,68,8,68"
                }
              },
              {
                "$type": "method",
                "name": "onDragOver",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,76,0",
                  "text": "2,73,8,68"
                }
              },
              {
                "$type": "method",
                "name": "onInvalidDrop",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,81,0",
                  "text": "2,78,8,68"
                }
              },
              {
                "$type": "method",
                "name": "onMouseDown",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,86,0",
                  "text": "2,83,8,68"
                }
              },
              {
                "$type": "method",
                "name": "onMouseUp",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,91,0",
                  "text": "2,88,8,68"
                }
              },
              {
                "$type": "method",
                "name": "removeFromGroup",
                "text": "Removes this instance from the supplied interaction group\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "The group to drop\n",
                    "type": "String",
                    "src": {
                      "name": "3,720,24",
                      "text": "3,720,31,18",
                      "type": "3,720,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,722,0",
                  "text": "3,719,8,58"
                }
              },
              {
                "$type": "method",
                "name": "removeInvalidHandleClass",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,156,0",
                  "text": "2,153,8,68"
                }
              },
              {
                "$type": "method",
                "name": "removeInvalidHandleId",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,161,0",
                  "text": "2,158,8,68"
                }
              },
              {
                "$type": "method",
                "name": "removeInvalidHandleType",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,166,0",
                  "text": "2,163,8,68"
                }
              },
              {
                "$type": "method",
                "name": "resetConstraints",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,106,0",
                  "text": "2,103,8,68"
                }
              },
              {
                "$type": "method",
                "name": "setDragElId",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,126,0",
                  "text": "2,123,8,68"
                }
              },
              {
                "$type": "method",
                "name": "setHandleElId",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,131,0",
                  "text": "2,128,8,68"
                }
              },
              {
                "$type": "method",
                "name": "setInitPosition",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,121,0",
                  "text": "2,118,8,68"
                }
              },
              {
                "$type": "method",
                "name": "setOuterHandleElId",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,136,0",
                  "text": "2,133,8,68"
                }
              },
              {
                "$type": "method",
                "name": "setPadding",
                "text": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iTop",
                    "text": "Top pad\n",
                    "type": "Number",
                    "src": {
                      "name": "3,650,24",
                      "text": "3,650,29,8",
                      "type": "3,650,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iRight",
                    "text": "Right pad\n",
                    "type": "Number",
                    "src": {
                      "name": "3,651,24",
                      "text": "3,651,31,10",
                      "type": "3,651,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iBot",
                    "text": "Bot pad\n",
                    "type": "Number",
                    "src": {
                      "name": "3,652,24",
                      "text": "3,652,29,8",
                      "type": "3,652,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iLeft",
                    "text": "Left pad\n",
                    "type": "Number",
                    "src": {
                      "name": "3,653,24",
                      "text": "3,653,30,9",
                      "type": "3,653,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,655,0",
                  "text": "3,645,8,338"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setStartPosition",
                "text": "Sets the start position of the element.  This is set when the obj\nis initialized, the reset when a drag is started.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pos",
                    "text": "current position (from previous lookup)\n",
                    "src": {
                      "name": "3,696,15",
                      "text": "3,696,19,40"
                    }
                  }
                ],
                "src": {
                  "access": "3,697,8",
                  "name": "3,699,0",
                  "text": "3,694,8,116"
                }
              },
              {
                "$type": "method",
                "name": "setXConstraint",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,96,0",
                  "text": "2,93,8,68"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setXTicks",
                "text": "Creates the array of horizontal tick marks if an interval was specified\nin setXConstraint().\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iStartX",
                    "src": {
                      "name": "3,944,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iTickSize",
                    "src": {
                      "name": "3,944,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,942,8",
                  "name": "3,944,0",
                  "text": "3,940,8,93"
                }
              },
              {
                "$type": "method",
                "name": "setYConstraint",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,101,0",
                  "text": "2,98,8,68"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setYTicks",
                "text": "Creates the array of vertical tick marks if an interval was specified in\nsetYConstraint().\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iStartY",
                    "src": {
                      "name": "3,973,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iTickSize",
                    "src": {
                      "name": "3,973,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,971,8",
                  "name": "3,973,0",
                  "text": "3,969,8,91"
                }
              },
              {
                "$type": "method",
                "name": "startDrag",
                "text": "Overridden and disabled. A DDTarget does not support being dragged.\n",
                "src": {
                  "name": "2,46,0",
                  "text": "2,43,8,68"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "toString method\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "string representation of the dd obj\n",
                    "type": "String",
                    "src": {
                      "text": "3,1127,25,36",
                      "type": "3,1127,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,1129,0",
                  "text": "3,1126,8,16"
                }
              },
              {
                "$type": "method",
                "name": "unlock",
                "text": "Unlocks this instace\n",
                "src": {
                  "name": "3,192,0",
                  "text": "3,190,8,21"
                }
              },
              {
                "$type": "method",
                "name": "unreg",
                "text": "Removes all drag and drop hooks for this element\n",
                "src": {
                  "name": "3,775,0",
                  "text": "3,773,8,49"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "__ygDragDrop",
                "text": "Internal typeof flag\n",
                "src": {
                  "access": "3,221,8",
                  "name": "3,219,18",
                  "text": "3,220,8,21"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "_domRef",
                "text": "Cached reference to the linked element\n",
                "src": {
                  "access": "3,214,8",
                  "name": "3,212,18",
                  "text": "3,213,8,39"
                }
              },
              {
                "$type": "property",
                "name": "available",
                "text": "The available property is false until the linked dom element is accessible.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,301,28",
                  "text": "3,302,8,76",
                  "type": "3,301,19"
                }
              },
              {
                "$type": "property",
                "name": "config",
                "text": "Configuration attributes passed into the constructor\n",
                "type": "Object",
                "src": {
                  "name": "3,86,27",
                  "text": "3,87,8,53",
                  "type": "3,86,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "constrainX",
                "text": "Set to true when horizontal contraints are applied\n",
                "type": "Boolean",
                "src": {
                  "access": "3,228,8",
                  "name": "3,226,28",
                  "text": "3,227,8,51",
                  "type": "3,226,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "constrainY",
                "text": "Set to true when vertical contraints are applied\n",
                "type": "Boolean",
                "src": {
                  "access": "3,235,8",
                  "name": "3,233,28",
                  "text": "3,234,8,49",
                  "type": "3,233,19"
                }
              },
              {
                "$type": "property",
                "name": "defaultPadding",
                "text": "Provides default constraint padding to \"constrainTo\" elements.\n",
                "type": "Object",
                "src": {
                  "name": "3,448,27",
                  "text": "3,449,8,63",
                  "type": "3,448,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dragElId",
                "text": "The id of the element that will be dragged.  By default this is same\nas the linked element, but could be changed to another element. Ex:\nExt.dd.DDProxy\n",
                "type": "String",
                "src": {
                  "access": "3,96,8",
                  "name": "3,92,27",
                  "text": "3,93,8,152",
                  "type": "3,92,19"
                }
              },
              {
                "$type": "property",
                "name": "groups",
                "text": "The group defines a logical collection of DragDrop objects that are\nrelated.  Instances only get events when interacting with other\nDragDrop object in the same group.  This lets us define multiple\ngroups using a single DragDrop subclass if we want.\n\nAn object in the format {'group1':true, 'group2':true}\n",
                "type": "Object",
                "src": {
                  "name": "3,157,27",
                  "text": "3,158,8,305",
                  "type": "3,157,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "handleElId",
                "text": "The ID of the element that initiates the drag operation.  By default\nthis is the linked element, but could be changed to be a child of this\nelement.  This lets us do things like only starting the drag when the\nheader element within the linked html element is clicked.\n",
                "type": "String",
                "src": {
                  "access": "3,106,8",
                  "name": "3,101,27",
                  "text": "3,102,8,268",
                  "type": "3,101,19"
                }
              },
              {
                "$type": "property",
                "name": "hasOuterHandles",
                "text": "By default, drags can only be initiated if the mousedown occurs in the\nregion the linked element is.  This is done in part to work around a\nbug in some browsers that mis-report the mousedown if the previous\nmouseup happened outside of the window.  This property is set to true\nif outer handles are defined. Defaults to false.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,307,28",
                  "text": "3,308,8,326",
                  "type": "3,307,19"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "text": "The id of the element associated with this object.  This is what we\nrefer to as the \"linked element\" because the size and position of\nthis element is used to determine when the drag and drop objects have\ninteracted.\n",
                "type": "String",
                "src": {
                  "name": "3,77,27",
                  "text": "3,78,8,216",
                  "type": "3,77,19"
                }
              },
              {
                "$type": "property",
                "name": "ignoreSelf",
                "text": "Set to false to enable a DragDrop object to fire drag events while dragging\nover its own Element. Defaults to true - DragDrop objects do not by default\nfire drag events to themselves.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,70,28",
                  "text": "3,71,8,184",
                  "type": "3,70,19"
                }
              },
              {
                "$type": "property",
                "name": "invalidHandleClasses",
                "text": "An Array of CSS class names for elements to be considered in valid as drag handles.\n",
                "type": "String[]",
                "src": {
                  "name": "3,135,29",
                  "text": "3,136,8,84",
                  "type": "3,135,19"
                }
              },
              {
                "$type": "property",
                "name": "invalidHandleIds",
                "text": "An object who's property names identify the IDs of elements to be considered invalid as drag handles.\nA non-null property value identifies the ID as invalid. For example, to prevent\ndragging from being initiated on element ID \"foo\", use:\n\n    {\n        foo: true\n    }\n",
                "type": "Object",
                "src": {
                  "name": "3,123,27",
                  "text": "3,124,8,269",
                  "type": "3,123,19"
                }
              },
              {
                "$type": "property",
                "name": "invalidHandleTypes",
                "text": "An object who's property names identify HTML tags to be considered invalid as drag handles.\nA non-null property value identifies the tag as invalid. Defaults to the\nfollowing value which prevents drag operations from being initiated by `<a>` elements:\n\n    {\n        A: \"A\"\n    }\n",
                "type": "Object",
                "src": {
                  "name": "3,111,27",
                  "text": "3,112,8,280",
                  "type": "3,111,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "isNotifyTarget",
                "src": {
                  "access": "1,60,8",
                  "name": "1,62,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "isTarget",
                "src": {
                  "access": "1,55,8",
                  "name": "1,57,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "locked",
                "text": "Individual drag/drop instances can be locked.  This will prevent\nonmousedown start drag.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,171,8",
                  "name": "3,168,28",
                  "text": "3,169,8,89",
                  "type": "3,168,19"
                }
              },
              {
                "$type": "property",
                "name": "maintainOffset",
                "text": "Maintain offsets when we resetconstraints.  Set to true when you want\nthe position of the element relative to its parent to stay the same\nwhen the page changes\n",
                "type": "Boolean",
                "src": {
                  "name": "3,268,28",
                  "text": "3,269,8,160",
                  "type": "3,268,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "maxX",
                "text": "The right constraint\n",
                "type": "Number",
                "src": {
                  "access": "3,249,8",
                  "name": "3,247,27",
                  "text": "3,248,8,21",
                  "type": "3,247,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "maxY",
                "text": "The down constraint\n",
                "type": "Number",
                "src": {
                  "access": "3,263,8",
                  "name": "3,261,27",
                  "text": "3,262,8,20",
                  "type": "3,261,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "minX",
                "text": "The left constraint\n",
                "type": "Number",
                "src": {
                  "access": "3,242,8",
                  "name": "3,240,27",
                  "text": "3,241,8,20",
                  "type": "3,240,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "minY",
                "text": "The up constraint\n",
                "type": "Number",
                "src": {
                  "access": "3,256,8",
                  "name": "3,254,27",
                  "text": "3,255,8,18",
                  "type": "3,254,19"
                }
              },
              {
                "$type": "property",
                "name": "moveOnly",
                "text": "When set to true, other DD objects in cooperating DDGroups do not receive\nnotification events when this DD object is dragged over them.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,183,28",
                  "text": "3,184,8,136",
                  "type": "3,183,19"
                }
              },
              {
                "$type": "property",
                "name": "padding",
                "text": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.\nAn array containing the 4 padding values: [top, right, bottom, left]\n",
                "type": "Number[]",
                "src": {
                  "name": "3,204,29",
                  "text": "3,205,8,183",
                  "type": "3,204,19"
                }
              },
              {
                "$type": "property",
                "name": "primaryButtonOnly",
                "text": "By default the drag and drop instance will only respond to the primary\nbutton click (left button for a right-handed mouse).  Set to true to\nallow drag and drop to start with any mouse click that is propogated\nby the browser\n",
                "type": "Boolean",
                "src": {
                  "name": "3,292,28",
                  "text": "3,293,8,224",
                  "type": "3,292,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "startPageX",
                "text": "The linked element's absolute X position at the time the drag was\nstarted\n",
                "type": "Number",
                "src": {
                  "access": "3,144,8",
                  "name": "3,141,27",
                  "text": "3,142,8,74",
                  "type": "3,141,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "startPageY",
                "text": "The linked element's absolute X position at the time the drag was\nstarted\n",
                "type": "Number",
                "src": {
                  "access": "3,152,8",
                  "name": "3,149,27",
                  "text": "3,150,8,74",
                  "type": "3,149,19"
                }
              },
              {
                "$type": "property",
                "name": "xTicks",
                "text": "Array of pixel locations the element will snap to if we specified a\nhorizontal graduation/interval.  This array is generated automatically\nwhen you define a tick interval.\n",
                "type": "Number[]",
                "src": {
                  "name": "3,276,29",
                  "text": "3,277,8,172",
                  "type": "3,276,19"
                }
              },
              {
                "$type": "property",
                "name": "yTicks",
                "text": "Array of pixel locations the element will snap to if we specified a\nvertical graduation/interval.  This array is generated automatically\nwhen you define a tick interval.\n",
                "type": "Number[]",
                "src": {
                  "name": "3,284,29",
                  "text": "3,285,8,170",
                  "type": "3,284,19"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,3,4",
          "extends": "0,6,0",
          "name": "0,5,0",
          "text": "0,2,4,59"
        }
      }
    ]
  },
  "version": 1
}