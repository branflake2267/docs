{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/LocalStore.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extended": "Ext.Mixin,Object",
        "extends": "Ext.Mixin",
        "name": "Ext.data.LocalStore",
        "text": "A mixin that provides common store methods for Ext.data.Store & Ext.data.ChainedStore.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "add",
                "text": "Adds Model instance to the Store. This method accepts either:\n\n- An array of Model instances or Model configuration objects.\n- Any number of Model instance or Model configuration object arguments.\n\nThe new Model instances will be added at the end of the existing collection.\n\nSample usage:\n\n    myStore.add({some: 'data'}, {some: 'other data'});\n\nNote that if this Store is sorted, the new Model instances will be inserted\nat the correct point in the Store to maintain the sort order.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "model",
                    "text": "An array of Model instances\nor Model configuration objects, or variable number of Model instance or config arguments.\n",
                    "type": "Ext.data.Model[]/Ext.data.Model.../Object[]/Object...",
                    "src": {
                      "name": "0,46,71",
                      "text": "0,46,77,28:0,47,8,90",
                      "type": "0,46,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The model instances that were added\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,48,35,36",
                      "type": "0,48,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,50,0",
                  "text": "0,32,8,486"
                }
              },
              {
                "$type": "method",
                "name": "aggregate",
                "text": "Runs the aggregate function for all the records in the store.\n\nWhen store is filtered, only items within the filter are aggregated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to execute. The function is called with a single parameter,\nan array of records for that group.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,486,26",
                      "text": "0,486,29,73:0,487,8,36",
                      "type": "0,486,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope to execute the function in. Defaults to the store.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,488,25",
                      "text": "0,488,32,61",
                      "type": "0,488,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the group average being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,489,26",
                      "text": "0,489,35,45:0,490,8,201",
                      "type": "0,489,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field to get the value from\n",
                    "type": "String",
                    "src": {
                      "name": "0,493,24",
                      "text": "0,493,30,32",
                      "type": "0,493,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object literal with the group names and their appropriate values.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,494,25,69",
                      "type": "0,494,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,496,0",
                  "text": "0,482,8,133"
                }
              },
              {
                "$type": "method",
                "name": "average",
                "text": "Gets the average value in the store.\n\nWhen store is filtered, only items within the filter are aggregated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field in each record\n",
                    "type": "String",
                    "src": {
                      "name": "0,469,24",
                      "text": "0,469,30,25",
                      "type": "0,469,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the group average being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,470,26",
                      "text": "0,470,35,45:0,471,8,201",
                      "type": "0,470,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The average value, if no items exist, 0.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,474,25,41",
                      "type": "0,474,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,476,0",
                  "text": "0,465,8,108"
                }
              },
              {
                "$type": "method",
                "name": "collect",
                "text": "Collects unique values for a particular dataIndex from this store.\n\nNote that the `filtered` option can also be passed as a separate parameter for\ncompatibility with previous versions.\n\n    var store = Ext.create('Ext.data.Store', {\n        fields: ['name'],\n        data: [{\n            name: 'Larry'\n        }, {\n            name: 'Darryl'\n        }, {\n            name: 'Darryl'\n        }]\n    });\n\n    store.collect('name');\n    // returns [\"Larry\", \"Darryl\"]\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The property to collect\n",
                    "type": "String",
                    "src": {
                      "name": "0,179,24",
                      "text": "0,179,33,24",
                      "type": "0,179,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "includeOptions",
                    "optional": true,
                    "text": "An object which contains options which modify how the store is traversed.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "allowNull",
                        "optional": true,
                        "text": "Pass true to allow null, undefined or empty string values.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,181,41",
                          "text": "0,181,52,59",
                          "type": "0,181,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "filtered",
                        "optional": true,
                        "text": "Pass `true` to collect from all records, even ones which are filtered.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,182,41",
                          "text": "0,182,51,71",
                          "type": "0,182,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,180,25",
                      "text": "0,180,41,74",
                      "type": "0,180,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of the unique values\n",
                    "type": "Object[]",
                    "src": {
                      "text": "0,184,27,30",
                      "type": "0,184,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,186,0",
                  "text": "0,160,8,465"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "count",
                "text": "Gets the count of items in the store.\n\nWhen store is filtered, only items within the filter are counted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the count for each group being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,419,26",
                      "text": "0,419,35,45:0,420,8,208",
                      "type": "0,419,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the count\n",
                    "type": "Number",
                    "src": {
                      "text": "0,423,25,10",
                      "type": "0,423,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,425,0",
                  "text": "0,415,8,106"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createModel",
                "text": "Converts a literal to a model, if it's not a model already\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record to create\n",
                    "type": "Ext.data.Model/Object",
                    "src": {
                      "name": "0,63,39",
                      "text": "0,63,46,21",
                      "type": "0,63,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Model",
                    "src": {
                      "type": "0,64,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,62,8",
                  "name": "0,66,0",
                  "text": "0,61,8,59"
                }
              },
              {
                "$type": "method",
                "name": "each",
                "text": "Calls the specified function for each <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> in the store.\n\nWhen store is filtered, only loops over the filtered records.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call. The <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> is passed as the first parameter.\nReturning `false` aborts and exits the iteration.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,125,26",
                      "text": "0,125,29,90:0,126,8,50",
                      "type": "0,125,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the function is executed.\nDefaults to the current <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> in the iteration.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,127,25",
                      "text": "0,127,32,64:0,128,8,72",
                      "type": "0,127,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "includeOptions",
                    "optional": true,
                    "text": "An object which contains options which modify how the store is traversed.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "filtered",
                        "optional": true,
                        "text": "Pass `true` to include filtered out nodes in the iteration.\n\nNote that the `filtered` option can also be passed as a separate parameter for\ncompatibility with previous versions.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,130,41",
                          "text": "0,130,51,60:0,131,8,119",
                          "type": "0,130,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,129,25",
                      "text": "0,129,41,74",
                      "type": "0,129,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,136,0",
                  "text": "0,121,8,146"
                }
              },
              {
                "$type": "method",
                "name": "first",
                "text": "Convenience function for getting the first model instance in the store.\n\nWhen store is filtered, will return first item within the filter.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the first record being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,371,26",
                      "text": "0,371,35,45:0,372,8,200",
                      "type": "0,371,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first model instance in the store, or undefined\n",
                    "type": "Ext.data.Model/undefined",
                    "src": {
                      "text": "0,375,43,52",
                      "type": "0,375,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,377,0",
                  "text": "0,367,8,140"
                }
              },
              {
                "$type": "method",
                "name": "getById",
                "text": "Get the Record with the specified id.\n\nThis method is not affected by filtering, lookup will be performed from all records\ninside the store, filtered or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the Record to find.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,208,23",
                      "text": "0,208,26,30",
                      "type": "0,208,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Record with the passed id. Returns null if not found.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,209,33,58",
                      "type": "0,209,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,211,0",
                  "text": "0,203,8,159"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getByInternalId",
                "text": "Get the Record with the specified internalId.\n\nThis method is not affected by filtering, lookup will be performed from all records\ninside the store, filtered or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "internalId",
                    "text": "The id of the Record to find.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,227,23",
                      "text": "0,227,34,30",
                      "type": "0,227,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Record with the passed internalId. Returns null if not found.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,228,33,66",
                      "type": "0,228,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,221,8",
                  "name": "0,230,0",
                  "text": "0,222,8,167"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getDataSource",
                "text": "Returns the complete unfiltered collection.\n",
                "src": {
                  "access": "0,253,8",
                  "name": "0,255,0",
                  "text": "0,252,8,44"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.data.LocalStore-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "indexOf",
                "text": "Get the index of the record within the store.\n\nWhen store is filtered, records outside of filter will not be found.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The Ext.data.Model object to find.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,265,32",
                      "text": "0,265,39,35",
                      "type": "0,265,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of the passed Record. Returns -1 if not found.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,266,25,57",
                      "type": "0,266,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,268,0",
                  "text": "0,261,8,117"
                }
              },
              {
                "$type": "method",
                "name": "indexOfId",
                "text": "Get the index within the store of the Record with the passed id.\n\nLike #indexOf, this method is effected by filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the Record to find.\n",
                    "type": "String",
                    "src": {
                      "name": "0,277,24",
                      "text": "0,277,27,30",
                      "type": "0,277,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of the Record. Returns -1 if not found.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,278,25,50",
                      "type": "0,278,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,280,0",
                  "text": "0,273,8,120"
                }
              },
              {
                "$type": "method",
                "name": "insert",
                "text": "Inserts Model instances into the Store at the given index and fires the add event.\nSee also <a href='#!/api/Ext.data.LocalStore-method-add'>method-add</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The start index at which to insert the passed Records.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,288,24",
                      "text": "0,288,30,55",
                      "type": "0,288,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "An <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> instance, the\ndata needed to populate an instance or an array of either of these.\n",
                    "type": "Ext.data.Model/Ext.data.Model[]/Object/Object[]",
                    "src": {
                      "name": "0,289,65",
                      "text": "0,289,73,34:0,290,8,69",
                      "type": "0,289,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "records The added records\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,292,35,26",
                      "type": "0,292,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,294,0",
                  "text": "0,285,8,114"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.data.LocalStore-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "last",
                "text": "Convenience function for getting the last model instance in the store.\n\nWhen store is filtered, will return last item within the filter.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the last record being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,386,26",
                      "text": "0,386,35,45:0,387,8,199",
                      "type": "0,386,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The last model instance in the store, or undefined\n",
                    "type": "Ext.data.Model/undefined",
                    "src": {
                      "text": "0,390,43,51",
                      "type": "0,390,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,392,0",
                  "text": "0,382,8,138"
                }
              },
              {
                "$type": "method",
                "name": "max",
                "text": "Gets the maximum value in the store.\n\nWhen store is filtered, only items within the filter are aggregated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field in each record\n",
                    "type": "String",
                    "src": {
                      "name": "0,452,24",
                      "text": "0,452,30,25",
                      "type": "0,452,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the maximum in the group being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,453,26",
                      "text": "0,453,35,45:0,454,8,208",
                      "type": "0,453,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The maximum value, if no items exist, undefined.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,457,25,49",
                      "type": "0,457,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,459,0",
                  "text": "0,448,8,108"
                }
              },
              {
                "$type": "method",
                "name": "min",
                "text": "Gets the minimum value in the store.\n\nWhen store is filtered, only items within the filter are aggregated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field in each record\n",
                    "type": "String",
                    "src": {
                      "name": "0,435,24",
                      "text": "0,435,30,25",
                      "type": "0,435,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the minimum in the group being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,436,26",
                      "text": "0,436,35,45:0,437,8,208",
                      "type": "0,436,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The minimum value, if no items exist, undefined.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,440,25,49",
                      "type": "0,440,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,442,0",
                  "text": "0,431,8,108"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.data.LocalStore-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.data.LocalStore-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "query",
                "text": "Query all the cached records in this Store by name/value pair.\nThe parameters will be used to generated a filter function that is given\nto the queryBy method.\n\nThis method complements queryBy by generating the query function automatically.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The property to create the filter function for\n",
                    "type": "String",
                    "src": {
                      "name": "0,351,24",
                      "text": "0,351,33,47",
                      "type": "0,351,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The string/regex to compare the property value to\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "0,352,31",
                      "text": "0,352,37,50",
                      "type": "0,352,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "optional": true,
                    "text": "True to match any part of the string, not just the\nbeginning.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,353,26",
                      "text": "0,353,42,51:0,354,8,11",
                      "type": "0,353,16",
                      "value": "0,353,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "optional": true,
                    "text": "`true` to create a case-sensitive regex.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,355,26",
                      "text": "0,355,47,41",
                      "type": "0,355,16",
                      "value": "0,355,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "exactMatch",
                    "optional": true,
                    "text": "True to force exact match (^ and $ characters\nadded to the regex). Ignored if `anyMatch` is `true`.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,356,26",
                      "text": "0,356,44,46:0,357,8,54",
                      "type": "0,356,16",
                      "value": "0,356,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "0,358,38,20",
                      "type": "0,358,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,360,0",
                  "text": "0,342,8,358"
                }
              },
              {
                "$type": "method",
                "name": "queryBy",
                "text": "Query all the cached records in this Store using a filtering function. The specified function\nwill be called with each record in this Store. If the function returns `true` the record is\nincluded in the results.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called. It will be passed the following parameters:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record to test for filtering. Access field values\n using <a href='#!/api/Ext.data.Model-method-get'>Ext.data.Model#get</a>.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "0,328,36",
                          "text": "0,328,43,54:0,329,8,35",
                          "type": "0,328,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "id",
                        "text": "The ID of the Record passed.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,330,28",
                          "text": "0,330,31,29",
                          "type": "0,330,17"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,327,26",
                      "text": "0,327,29,71",
                      "type": "0,327,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed\nDefaults to this Store.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,331,25",
                      "text": "0,331,32,61:0,332,8,24",
                      "type": "0,331,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "0,333,38,20",
                      "type": "0,333,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,335,0",
                  "text": "0,320,8,329"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queryRecords",
                "text": "Query all the cached records in this Store by field.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field from each record to use.\n",
                    "type": "String",
                    "src": {
                      "name": "0,606,24",
                      "text": "0,606,30,35",
                      "type": "0,606,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to match.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,607,24",
                      "text": "0,607,30,20",
                      "type": "0,607,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,608,35,21",
                      "type": "0,608,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,610,8",
                  "name": "0,612,0",
                  "text": "0,601,8,171"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queryRecordsBy",
                "text": "Query all the cached records in this Store using a filtering function. The specified function\nwill be called with each record in this Store. If the function returns `true` the record is\nincluded in the results.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called. It will be passed the following parameters:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record to test for filtering.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "0,576,37",
                          "text": "0,576,44,34",
                          "type": "0,576,18"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,575,26",
                      "text": "0,575,29,71",
                      "type": "0,575,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed\nDefaults to this Store.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,577,25",
                      "text": "0,577,32,61:0,578,8,24",
                      "type": "0,577,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,579,35,21",
                      "type": "0,579,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,581,8",
                  "name": "0,583,0",
                  "text": "0,568,8,329"
                }
              },
              {
                "$type": "method",
                "name": "sum",
                "text": "Sums the value of `field` for each <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> in store\nand returns the result.\n\nWhen store is filtered, only sums items within the filter.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "A field in each record\n",
                    "type": "String",
                    "src": {
                      "name": "0,402,24",
                      "text": "0,402,30,23",
                      "type": "0,402,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the sum for that group being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,403,26",
                      "text": "0,403,35,45:0,404,8,206",
                      "type": "0,403,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The sum\n",
                    "type": "Number",
                    "src": {
                      "text": "0,407,25,8",
                      "type": "0,407,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,409,0",
                  "text": "0,397,8,159"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.data.LocalStore-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.data.LocalStore-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.data.LocalStore-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.data.LocalStore-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.data.LocalStore-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.data.LocalStore-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.data.LocalStore-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.data.LocalStore-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.data.LocalStore-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.data.LocalStore-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.data.LocalStore-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.data.LocalStore-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.data.LocalStore-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.data.LocalStore-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.data.LocalStore-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,3,4",
          "extends": "0,6,0",
          "name": "0,5,0",
          "text": "0,2,4,87"
        }
      }
    ]
  },
  "version": 1
}