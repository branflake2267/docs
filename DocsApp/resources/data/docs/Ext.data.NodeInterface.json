{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/NodeInterface.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Ext.Base,Object",
        "extends": "Ext.Base",
        "name": "Ext.data.NodeInterface",
        "requires": "Ext.data.field.Boolean,Ext.data.field.Integer,Ext.data.field.String,Ext.data.writer.Json,Ext.mixin.Observable",
        "text": "This class is used as a set of methods that are applied to the prototype of a\n{@link Ext.data.Model} to decorate it with a Node API. This means that models\nused in conjunction with a tree will have all of the tree related methods available\non the model. In general, this class will not be used directly by the developer.\n\nThis class also creates extra {@link Ext.data.field.Field Ext.data.Field} on the model, if they do\nnot exist, to help maintain the tree state and UI. These fields are documented as\nconfig options.\n\nThe data fields used to render a tree node are: {@link #cfg!text #text}, {@link #cfg!leaf #leaf},\n{@link #cfg!children #children}, and {@link #cfg!expanded #expanded}.  Once a node is loaded to the tree store\nyou can use {@link Ext.data.Model#method!get Ext.data.Model#get} to fetch the value of a given field\nname (provided there is not a convenience accessor on the Node for that field).\n\n    @example\n    Ext.tip.QuickTipManager.init(); // not required when using Ext.application()\n\n    var root = {\n        expanded: true,\n        children: [{\n            text: \"Leaf node (<i>no folder/arrow icon</i>)\",\n            leaf: true,\n            qtitle: 'Sample Tip Title',\n            qtip: 'Tip body'\n        }, {\n            text: \"Parent node expanded\",\n            expanded: true,\n            children: [{\n                text: \"Expanded leaf node 1\",\n                leaf: true\n            }, {\n                text: \"Expanded leaf node 2\",\n                leaf: true\n            }]\n        }, {\n            text: \"Parent node collapsed\",\n            children: [{\n                text: \"Collapsed leaf node 1\",\n                leaf: true\n            }, {\n                text: \"Collapsed leaf node 2\",\n                leaf: true\n            }]\n        }]\n    };\n\n    var tree = Ext.create('Ext.tree.Panel', {\n        title: 'TreePanel',\n        width: 260,\n        height: 200,\n        root: root,\n        rootVisible: false,\n        renderTo: document.body,\n        bbar: ['The first node ', {\n            text: 'is a leaf?',\n            handler: function () {\n                var firstChild = tree.getRootNode().getChildAt(0);\n                Ext.Msg.alert('Is Leaf?', firstChild.isLeaf());\n            }\n        }, {\n            text: 'has text?',\n            handler: function () {\n                var firstChild = tree.getRootNode().getChildAt(0);\n                Ext.Msg.alert('Has Text:', firstChild.get('text'));\n            }\n        }]\n    });\n\nThe following configs have methods used to set the value / state of the node at\nruntime:\n\n**{@link #cfg!children #children} / {@link #cfg!leaf #leaf}**\n\n - {@link #method!appendChild #appendChild}\n - {@link #method!hasChildNodes #hasChildNodes}\n - {@link #method!insertBefore #insertBefore}\n - {@link #method!insertChild #insertChild}\n - {@link #method!remove #method-remove}\n - {@link #method!removeAll #removeAll}\n - {@link #method!removeChild #removeChild}\n - {@link #method!replaceChild #replaceChild}\n\n**{@link #cfg!expanded #expanded}**\n\n - {@link #method!expand #method-expand}\n - {@link #method!expandChildren #expandChildren}\n - {@link #method!collapse #method-collapse}\n - {@link #method!collapseChildren #collapseChildren}\n\nThe remaining configs may be set using {@link Ext.data.Model#method!set Ext.data.Model#method-set}.\n\n    node.set('text', 'Changed Text'); // example showing how to change the node label\n\nThe {@link #cfg!qtip #qtip}, {@link #cfg!qtitle #qtitle}, and {@link #cfg!qshowDelay #qshowDelay} use QuickTips and\nrequires initializing {@link Ext.tip.QuickTipManager} unless the application is\ncreated using {@link Ext#method!application Ext#method-application}.\n\n    Ext.tip.QuickTipManager.init();\n\nFor additional information and examples see the description for\n{@link Ext.tree.Panel}.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "allowDrag",
                "optional": true,
                "text": "Set to false to deny dragging of this node.\n\nApplicable when using the {@link Ext.tree.plugin.TreeViewDragDrop} plugin.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,171,24",
                  "text": "0,172,8,137",
                  "type": "0,171,14",
                  "value": "0,171,34"
                }
              },
              {
                "$type": "property",
                "name": "allowDrop",
                "optional": true,
                "text": "Set to false to deny dropping on this node.\n\nApplicable when using the {@link Ext.tree.plugin.TreeViewDragDrop} plugin.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,163,24",
                  "text": "0,164,8,137",
                  "type": "0,163,14",
                  "value": "0,163,34"
                }
              },
              {
                "$type": "property",
                "name": "checked",
                "optional": true,
                "text": "Set to true or false to show a checkbox alongside this node.\n\nTo fetch an array of checked nodes use {@link Ext.tree.Panel#method!getChecked Ext.tree.Panel#method-getChecked}.\n",
                "type": "Boolean",
                "value": "null",
                "src": {
                  "name": "0,131,24",
                  "text": "0,132,8,156",
                  "type": "0,131,14",
                  "value": "0,131,32"
                }
              },
              {
                "$type": "property",
                "name": "children",
                "text": "Array of child nodes.\n\n**Note:** By default the child nodes root is `{@link #cfg!children children}`, but can be set using the\nreader {@link Ext.data.reader.Reader#cfg!rootProperty Ext.data.reader.Reader#cfg-rootProperty} config on the\n{@link Ext.data.TreeStore} {@link Ext.data.TreeStore#cfg!proxy Ext.data.TreeStore#cfg-proxy}.\n",
                "type": "Ext.data.NodeInterface[]",
                "src": {
                  "name": "0,224,40",
                  "text": "0,225,8,270",
                  "type": "0,224,14"
                }
              },
              {
                "$type": "property",
                "name": "cls",
                "text": "CSS class to apply to this node.\n",
                "type": "String",
                "src": {
                  "name": "0,147,22",
                  "text": "0,148,8,33",
                  "type": "0,147,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "depth",
                "text": "The number of parents this node has. A root node has depth 0, a child of it depth 1, and so on...\n\nSee {@link #method!getDepth #getDepth}.\n",
                "type": "Number",
                "src": {
                  "access": "0,291,8",
                  "name": "0,290,22",
                  "text": "0,292,8,122",
                  "type": "0,290,14"
                }
              },
              {
                "$type": "property",
                "name": "expandable",
                "optional": true,
                "text": "False to prevent expanding/collapsing of this node.\n\nSee also: {@link #method!isExpandable #isExpandable}.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,124,24",
                  "text": "0,125,8,86",
                  "type": "0,124,14",
                  "value": "0,124,35"
                }
              },
              {
                "$type": "property",
                "name": "expanded",
                "optional": true,
                "text": "True if the node is expanded.\n\nWhen the tree is asynchronously remote loaded, expanding a collapsed node loads\nthe children of that node (if the node has not already been loaded previously).\n\nSee also: {@link #method!isExpanded #isExpanded}.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,114,24",
                  "text": "0,115,8,223",
                  "type": "0,114,14",
                  "value": "0,114,33"
                }
              },
              {
                "$type": "property",
                "name": "href",
                "text": "A URL for a link that's created when this config is specified.\n\nSee also {@link #cfg!hrefTarget #hrefTarget}.\n",
                "type": "String",
                "src": {
                  "name": "0,179,22",
                  "text": "0,180,8,94",
                  "type": "0,179,14"
                }
              },
              {
                "$type": "property",
                "name": "hrefTarget",
                "text": "Target for link. Only applicable when {@link #cfg!href #href} is also specified.\n",
                "type": "String",
                "src": {
                  "name": "0,186,22",
                  "text": "0,187,8,71",
                  "type": "0,186,14"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.panel.Header#icon",
                "name": "icon",
                "type": "String",
                "src": {
                  "inheritdoc": "0,159,8",
                  "name": "0,158,22",
                  "type": "0,158,14"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.panel.Header#iconCls",
                "localDoc": "Use {@link #icon} to set the icon src path directly.\n",
                "name": "iconCls",
                "type": "String",
                "src": {
                  "inheritdoc": "0,153,8",
                  "localDoc": "0,154,18",
                  "name": "0,152,22",
                  "type": "0,152,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "index",
                "text": "The position of the node inside its parent. When parent has 4 children and the node is third amongst them,\nindex will be 2.\n\nSee {@link #method!indexOf #indexOf} and {@link #method!indexOfId #indexOfId}.\n",
                "type": "Number",
                "src": {
                  "access": "0,282,8",
                  "name": "0,281,22",
                  "text": "0,283,8,170",
                  "type": "0,281,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "isFirst",
                "text": "True if this is the first node.\n\nSee {@link #method!isFirst #method-isFirst}.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,266,8",
                  "name": "0,265,23",
                  "text": "0,267,8,62",
                  "type": "0,265,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "isLast",
                "text": "True if this is the last node.\n\nSee {@link #method!isLast #method-isLast}.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,258,8",
                  "name": "0,257,23",
                  "text": "0,259,8,60",
                  "type": "0,257,14"
                }
              },
              {
                "$type": "property",
                "name": "leaf",
                "optional": true,
                "text": "Set to true to indicate that this child can have no children. The expand icon/arrow will then not be\nrendered for this node.\n\nSee also: {@link #method!isLeaf #isLeaf}.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,139,24",
                  "text": "0,140,8,153",
                  "type": "0,139,14",
                  "value": "0,139,29"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "loaded",
                "optional": true,
                "text": "True if the node has finished loading.\n\nSee {@link #method!isLoaded #isLoaded}.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "access": "0,234,8",
                  "name": "0,233,24",
                  "text": "0,235,8,63",
                  "type": "0,233,14",
                  "value": "0,233,31"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "loading",
                "optional": true,
                "text": "True if the node is currently loading.\n\nSee {@link #method!isLoading #isLoading}.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "access": "0,242,8",
                  "name": "0,241,24",
                  "text": "0,243,8,64",
                  "type": "0,241,14",
                  "value": "0,241,32"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "parentId",
                "text": "ID of parent node.\n\nSee {@link #property!parentNode #parentNode}.\n",
                "type": "String",
                "src": {
                  "access": "0,274,8",
                  "name": "0,273,22",
                  "text": "0,275,8,45",
                  "type": "0,273,14"
                }
              },
              {
                "$type": "property",
                "name": "qshowDelay",
                "text": "Tooltip showDelay.\n\nSee also {@link #cfg!qtip #qtip}.\nSee also {@link #cfg!qtitle #qtitle}.\n",
                "type": "Number",
                "src": {
                  "name": "0,207,22",
                  "text": "0,208,8,70",
                  "type": "0,207,14"
                }
              },
              {
                "$type": "property",
                "name": "qtip",
                "text": "Tooltip text to show on this node.\n\nSee also {@link #cfg!qtitle #qtitle}.\nSee also {@link #cfg!qshowDelay #qshowDelay}.\n",
                "type": "String",
                "src": {
                  "name": "0,191,22",
                  "text": "0,192,8,92",
                  "type": "0,191,14"
                }
              },
              {
                "$type": "property",
                "name": "qtitle",
                "text": "Tooltip title.\n\nSee also {@link #cfg!qtip #qtip}.\nSee also {@link #cfg!qshowDelay #qshowDelay}.\n",
                "type": "String",
                "src": {
                  "name": "0,199,22",
                  "text": "0,200,8,70",
                  "type": "0,199,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "root",
                "text": "True if this is the root node.\n\nSee {@link #method!isRoot #isRoot}.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,250,8",
                  "name": "0,249,23",
                  "text": "0,251,8,53",
                  "type": "0,249,14"
                }
              },
              {
                "$type": "property",
                "name": "text",
                "text": "The text to show on node label (_html tags are accepted_).\nThe default text for the root node is `ROOT`.  All other nodes default to ''.\n\n**Note:** By default the node label is `{@link #cfg!text text}`, but can be set using the tree's\n{@link Ext.tree.Panel#cfg!displayField Ext.tree.Panel#cfg-displayField} config.\n",
                "type": "String",
                "src": {
                  "name": "0,215,22",
                  "text": "0,216,8,278",
                  "type": "0,215,14"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "append",
                "text": "Fires when a new child node is appended\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,437,56",
                      "text": "0,437,61,10",
                      "type": "0,437,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The newly appended node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,438,56",
                      "text": "0,438,61,24",
                      "type": "0,438,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the newly appended node\n",
                    "type": "Number",
                    "src": {
                      "name": "0,439,40",
                      "text": "0,439,46,37",
                      "type": "0,439,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,435,31",
                  "text": "0,436,24,40"
                }
              },
              {
                "$type": "event",
                "name": "beforeappend",
                "text": "Fires before a new child is appended, return false to cancel the append.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,472,56",
                      "text": "0,472,61,10",
                      "type": "0,472,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The child node to be appended\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,473,56",
                      "text": "0,473,61,30",
                      "type": "0,473,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,470,31",
                  "text": "0,471,24,73"
                }
              },
              {
                "$type": "event",
                "name": "beforecollapse",
                "text": "Fires before this node is collapsed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The collapsing node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,517,56",
                      "text": "0,517,61,20",
                      "type": "0,517,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,515,31",
                  "text": "0,516,24,37"
                }
              },
              {
                "$type": "event",
                "name": "beforeexpand",
                "text": "Fires before this node is expanded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The expanding node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,512,56",
                      "text": "0,512,61,19",
                      "type": "0,512,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,510,31",
                  "text": "0,511,24,36"
                }
              },
              {
                "$type": "event",
                "name": "beforeinsert",
                "text": "Fires before a new child is inserted, return false to cancel the insert.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,495,56",
                      "text": "0,495,61,10",
                      "type": "0,495,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The child node to be inserted\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,496,56",
                      "text": "0,496,61,30",
                      "type": "0,496,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "refNode",
                    "text": "The child node the node is being inserted before\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,497,56",
                      "text": "0,497,64,49",
                      "type": "0,497,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,493,31",
                  "text": "0,494,24,73"
                }
              },
              {
                "$type": "event",
                "name": "beforemove",
                "text": "Fires before this node is moved to a new location in the tree. Return false to cancel the move.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,487,56",
                      "text": "0,487,61,10",
                      "type": "0,487,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldParent",
                    "text": "The parent of this node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,488,56",
                      "text": "0,488,66,24",
                      "type": "0,488,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newParent",
                    "text": "The new parent this node is moving to\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,489,56",
                      "text": "0,489,66,38",
                      "type": "0,489,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index it is being moved to\n",
                    "type": "Number",
                    "src": {
                      "name": "0,490,40",
                      "text": "0,490,46,31",
                      "type": "0,490,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,485,31",
                  "text": "0,486,24,96"
                }
              },
              {
                "$type": "event",
                "name": "beforeremove",
                "text": "Fires before a child is removed, return false to cancel the remove.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,478,56",
                      "text": "0,478,61,10",
                      "type": "0,478,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The child node to be removed\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,479,56",
                      "text": "0,479,61,29",
                      "type": "0,479,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isMove",
                    "text": "`true` if the child node is being removed so it can be moved to another position in the tree.\n(a side effect of calling {@link Ext.data.NodeInterface#method!appendChild Ext.data.NodeInterface#appendChild} or\n{@link Ext.data.NodeInterface#method!insertBefore Ext.data.NodeInterface#insertBefore} with a node that already has a parentNode)\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,480,41",
                      "text": "0,480,48,94:0,481,24,184",
                      "type": "0,480,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,476,31",
                  "text": "0,477,24,68"
                }
              },
              {
                "$type": "event",
                "name": "collapse",
                "text": "Fires when this node is collapsed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The collapsing node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,507,56",
                      "text": "0,507,61,20",
                      "type": "0,507,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,505,31",
                  "text": "0,506,24,35"
                }
              },
              {
                "$type": "event",
                "name": "expand",
                "text": "Fires when this node is expanded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The expanding node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,502,56",
                      "text": "0,502,61,19",
                      "type": "0,502,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,500,31",
                  "text": "0,501,24,34"
                }
              },
              {
                "$type": "event",
                "name": "insert",
                "text": "Fires when a new child node is inserted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,465,56",
                      "text": "0,465,61,10",
                      "type": "0,465,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The child node inserted\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,466,56",
                      "text": "0,466,61,24",
                      "type": "0,466,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "refNode",
                    "text": "The child node the node was inserted before\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,467,56",
                      "text": "0,467,64,44",
                      "type": "0,467,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,463,31",
                  "text": "0,464,24,41"
                }
              },
              {
                "$type": "event",
                "name": "move",
                "text": "Fires when this node is moved to a new location in the tree\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,457,56",
                      "text": "0,457,61,10",
                      "type": "0,457,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldParent",
                    "text": "The old parent of this node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,458,56",
                      "text": "0,458,66,28",
                      "type": "0,458,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newParent",
                    "text": "The new parent of this node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,459,56",
                      "text": "0,459,66,28",
                      "type": "0,459,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index it was moved to\n",
                    "type": "Number",
                    "src": {
                      "name": "0,460,40",
                      "text": "0,460,46,26",
                      "type": "0,460,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,455,31",
                  "text": "0,456,24,60"
                }
              },
              {
                "$type": "event",
                "name": "remove",
                "text": "Fires when a child node is removed\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,444,56",
                      "text": "0,444,61,10",
                      "type": "0,444,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The removed node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,445,56",
                      "text": "0,445,61,17",
                      "type": "0,445,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isMove",
                    "text": "`true` if the child node is being removed so it can be moved to another position in the tree.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,446,41",
                      "text": "0,446,48,94",
                      "type": "0,446,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "context",
                    "text": "An object providing information about where the removed node came from. It contains the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "parentNode",
                        "text": "The node from which the removed node was removed.\n",
                        "type": "Ext.data.NodeInterface",
                        "src": {
                          "name": "0,448,64",
                          "text": "0,448,75,50",
                          "type": "0,448,32"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "previousSibling",
                        "text": "The removed node's former previous sibling.\n",
                        "type": "Ext.data.NodeInterface",
                        "src": {
                          "name": "0,449,64",
                          "text": "0,449,80,44",
                          "type": "0,449,32"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "nextSibling",
                        "text": "The removed node's former next sibling.\n(a side effect of calling {@link Ext.data.NodeInterface#method!appendChild Ext.data.NodeInterface#appendChild} or\n{@link Ext.data.NodeInterface#method!insertBefore Ext.data.NodeInterface#insertBefore} with a node that already has a parentNode)\n",
                        "type": "Ext.data.NodeInterface",
                        "src": {
                          "name": "0,450,64",
                          "text": "0,450,76,40:0,451,24,184",
                          "type": "0,450,32"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,447,40",
                      "text": "0,447,48,110",
                      "type": "0,447,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,442,31",
                  "text": "0,443,24,35"
                }
              },
              {
                "$type": "event",
                "name": "sort",
                "text": "Fires when this node's childNodes are sorted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This node.\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,522,56",
                      "text": "0,522,61,11",
                      "type": "0,522,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "childNodes",
                    "text": "The childNodes of this node.\n",
                    "type": "Ext.data.NodeInterface[]",
                    "src": {
                      "name": "0,523,58",
                      "text": "0,523,69,29",
                      "type": "0,523,32"
                    }
                  }
                ],
                "src": {
                  "name": "0,520,31",
                  "text": "0,521,24,46"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "1,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,118,12",
                  "name": "1,120,0",
                  "text": "1,116,12,125"
                }
              },
              {
                "$type": "method",
                "name": "appendChild",
                "text": "Inserts node(s) as the last child node of this node.\n\nIf the node was previously a child node of another parent node, it will be removed from that node first.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node or Array of nodes to append\n",
                    "type": "Ext.data.NodeInterface/Ext.data.NodeInterface[]/Object",
                    "src": {
                      "name": "0,765,84",
                      "text": "0,765,89,37",
                      "type": "0,765,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "suppressEvents",
                    "optional": true,
                    "text": "True to suppress firing of\nevents.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,766,38",
                      "text": "0,766,60,27:0,767,20,8",
                      "type": "0,766,28",
                      "value": "0,766,53"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "commit",
                    "optional": true,
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,768,38",
                      "type": "0,768,28",
                      "value": "0,768,45"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The appended node if single append, or null if an array was passed\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,769,53,67",
                      "type": "0,769,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,771,0",
                  "text": "0,761,20,160"
                }
              },
              {
                "$type": "method",
                "name": "bubble",
                "text": "Bubbles up the tree from this node, calling the specified function with each node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe bubble is stopped.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call\n",
                    "type": "Function",
                    "src": {
                      "name": "0,1559,38",
                      "text": "0,1559,41,21",
                      "type": "0,1559,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed. Defaults to the current Node.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1560,37",
                      "text": "0,1560,44,92",
                      "type": "0,1560,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "optional": true,
                    "text": "The args to call the function with. Defaults to passing the current Node.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1561,36",
                      "text": "0,1561,42,74",
                      "type": "0,1561,28"
                    }
                  }
                ],
                "src": {
                  "name": "0,1563,0",
                  "text": "0,1556,20,227"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1251,37",
                      "text": "1,1251,42,57:1,1252,12,67",
                      "type": "1,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1253,29,48",
                      "type": "1,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1250,12",
                  "name": "1,1255,0",
                  "text": "1,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1338,37",
                      "text": "1,1338,42,57:1,1339,12,66",
                      "type": "1,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1340,29,52",
                      "type": "1,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1337,12",
                  "name": "1,1342,0",
                  "text": "1,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "cascadeBy",
                "text": "Cascades down the tree from this node, calling the specified functions with each node. The arguments to the function\nwill be the args provided or the current node. If the `before` function returns false at any point,\nthe cascade is stopped on that branch.\n\nNote that the 3 argument form passing `fn, scope, args` is still supported. The `fn` function is as before, called\n*before* cascading down into child nodes. If it returns `false`, the child nodes are not traversed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "spec",
                    "text": "An object containing before and after functions, scope and an argument list.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "before",
                        "optional": true,
                        "text": "A function to call on a node *before* cascading down into child nodes.\nIf it returns `false`, the child nodes are not traversed.\n",
                        "type": "Function",
                        "src": {
                          "name": "0,1591,44",
                          "text": "0,1591,52,71:0,1592,20,58",
                          "type": "0,1591,28"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "after",
                        "optional": true,
                        "text": "A function to call on a node *after* cascading down into child nodes.\n",
                        "type": "Function",
                        "src": {
                          "name": "0,1593,44",
                          "text": "0,1593,51,70",
                          "type": "0,1593,28"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "scope",
                        "optional": true,
                        "text": "The scope (this reference) in which the functions are executed. Defaults to the current Node.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,1594,42",
                          "text": "0,1594,49,94",
                          "type": "0,1594,28"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "The args to call the function with. Defaults to passing the current Node.\n",
                        "type": "Array",
                        "src": {
                          "name": "0,1595,41",
                          "text": "0,1595,47,74",
                          "type": "0,1595,28"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,1590,36",
                      "text": "0,1590,41,77",
                      "type": "0,1590,28"
                    }
                  }
                ],
                "src": {
                  "name": "0,1597,0",
                  "text": "0,1583,20,473"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "clear",
                "text": "Clears the node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "erase",
                    "optional": true,
                    "text": "True to erase the node using the configured\nproxy.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1112,38",
                      "text": "0,1112,51,44:0,1113,20,7",
                      "type": "0,1112,28",
                      "value": "0,1112,44"
                    }
                  }
                ],
                "src": {
                  "access": "0,1111,20",
                  "name": "0,1115,0",
                  "text": "0,1110,20,17"
                }
              },
              {
                "$type": "method",
                "name": "collapse",
                "text": "Collapse this node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "True to recursively collapse all the children\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2035,38",
                      "text": "0,2035,55,46",
                      "type": "0,2035,28",
                      "value": "0,2035,48"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "The function to execute once the collapse completes\n",
                    "type": "Function",
                    "src": {
                      "name": "0,2036,39",
                      "text": "0,2036,49,52",
                      "type": "0,2036,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope to run the callback in\n",
                    "type": "Object",
                    "src": {
                      "name": "0,2037,37",
                      "text": "0,2037,44,33",
                      "type": "0,2037,28"
                    }
                  }
                ],
                "src": {
                  "name": "0,2039,0",
                  "text": "0,2034,20,20"
                }
              },
              {
                "$type": "method",
                "name": "collapseChildren",
                "text": "Collapse all the children of this node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "True to recursively collapse all the children\n",
                    "type": "Function",
                    "value": "false",
                    "src": {
                      "name": "0,2149,39",
                      "text": "0,2149,56,46",
                      "type": "0,2149,28",
                      "value": "0,2149,49"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "The function to execute once all the children are collapsed\n",
                    "type": "Function",
                    "src": {
                      "name": "0,2150,39",
                      "text": "0,2150,49,60",
                      "type": "0,2150,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope to run the callback in\n",
                    "type": "Object",
                    "src": {
                      "name": "0,2151,37",
                      "text": "0,2151,44,33",
                      "type": "0,2151,28"
                    }
                  }
                ],
                "src": {
                  "name": "0,2153,0",
                  "text": "0,2148,20,40"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,40,21",
                      "text": "2,40,28,19",
                      "type": "2,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "2,38,12",
                  "text": "2,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "text": "Returns true if this node is an ancestor (at any point) of the passed node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,1688,52",
                      "type": "0,1688,28"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,1689,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1691,0",
                  "text": "0,1687,20,76"
                }
              },
              {
                "$type": "method",
                "name": "copy",
                "text": "Creates a copy (clone) of this Node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "optional": true,
                    "text": "A new id, defaults to this Node's id.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1089,37",
                      "text": "0,1089,41,38",
                      "type": "0,1089,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "True to recursively copy all child Nodes into the new Node.\nFalse to copy without child Nodes.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1090,38",
                      "text": "0,1090,50,60:0,1091,20,35",
                      "type": "0,1090,28",
                      "value": "0,1090,43"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A copy of this Node.\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,1092,53,21",
                      "type": "0,1092,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1094,0",
                  "text": "0,1088,20,37"
                }
              },
              {
                "$type": "method",
                "name": "createNode",
                "text": "Ensures that the passed object is an instance of a Record with the NodeInterface applied\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "type": "0,530,29"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "src": {
                      "name": "0,532,0"
                    }
                  }
                ],
                "src": {
                  "name": "0,532,0",
                  "text": "0,529,20,89"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "1,1626,0",
                  "text": "1,1623,12,132"
                }
              },
              {
                "$type": "method",
                "name": "eachChild",
                "text": "Iterates the child nodes of this node, calling the specified function\nwith each node. The arguments to the function will be the args\nprovided or the current node. If the function returns false at any\npoint, the iteration stops.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call\n",
                    "type": "Function",
                    "src": {
                      "name": "0,1626,38",
                      "text": "0,1626,41,21",
                      "type": "0,1626,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (_this_ reference) in which the\nfunction is executed. Defaults to the Node on which eachChild is\ncalled.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1627,37",
                      "text": "0,1627,44,42:0,1628,20,73",
                      "type": "0,1627,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "optional": true,
                    "text": "The args to call the function with. Defaults to\npassing the current Node.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1630,36",
                      "text": "0,1630,42,48:0,1631,20,26",
                      "type": "0,1630,28"
                    }
                  }
                ],
                "src": {
                  "name": "0,1633,0",
                  "text": "0,1622,20,228"
                }
              },
              {
                "$type": "method",
                "name": "erase",
                "text": "Destroys the node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "src": {
                      "name": "0,1178,0"
                    }
                  }
                ],
                "src": {
                  "name": "0,1178,0",
                  "text": "0,1176,20,19"
                }
              },
              {
                "$type": "method",
                "name": "expand",
                "text": "Expand this node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "True to recursively expand all the children\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1835,38",
                      "text": "0,1835,55,44",
                      "type": "0,1835,28",
                      "value": "0,1835,48"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "The function to execute once the expand completes\n",
                    "type": "Function",
                    "src": {
                      "name": "0,1836,39",
                      "text": "0,1836,49,50",
                      "type": "0,1836,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope to run the callback in\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1837,37",
                      "text": "0,1837,44,33",
                      "type": "0,1837,28"
                    }
                  }
                ],
                "src": {
                  "name": "0,1839,0",
                  "text": "0,1834,20,18"
                }
              },
              {
                "$type": "method",
                "name": "expandChildren",
                "text": "Expand all the children of this node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "True to recursively expand all the children\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1989,38",
                      "text": "0,1989,55,44",
                      "type": "0,1989,28",
                      "value": "0,1989,48"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "The function to execute once all the children are expanded\n",
                    "type": "Function",
                    "src": {
                      "name": "0,1990,39",
                      "text": "0,1990,49,59",
                      "type": "0,1990,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope to run the callback in\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1991,37",
                      "text": "0,1991,44,33",
                      "type": "0,1991,28"
                    }
                  }
                ],
                "src": {
                  "name": "0,1993,0",
                  "text": "0,1988,20,38"
                }
              },
              {
                "$type": "method",
                "name": "findChild",
                "text": "Finds the first child that has the attribute with the specified value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "attribute",
                    "text": "The attribute name\n",
                    "type": "String",
                    "src": {
                      "name": "0,1647,36",
                      "text": "0,1647,46,19",
                      "type": "0,1647,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to search for\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1648,36",
                      "text": "0,1648,42,24",
                      "type": "0,1648,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "True to search through nodes deeper than the immediate children\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1649,38",
                      "text": "0,1649,50,64",
                      "type": "0,1649,28",
                      "value": "0,1649,43"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The found child or null if none was found\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,1650,53,42",
                      "type": "0,1650,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1652,0",
                  "text": "0,1646,20,71"
                }
              },
              {
                "$type": "method",
                "name": "findChildBy",
                "text": "Finds the first child by a custom function. The child matches if the function passed returns true.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "A function which must return true if the passed Node is the required Node.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,1660,38",
                      "text": "0,1660,41,75",
                      "type": "0,1660,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed. Defaults to the Node being tested.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1661,37",
                      "text": "0,1661,44,97",
                      "type": "0,1661,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "True to search through nodes deeper than the immediate children\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1662,38",
                      "text": "0,1662,50,64",
                      "type": "0,1662,28",
                      "value": "0,1662,43"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The found child or null if none was found\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,1663,53,42",
                      "type": "0,1663,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1665,0",
                  "text": "0,1659,20,99"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto {@link Ext.mixin.Observable#method!addListener Ext.mixin.Observable#addListener}).\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link Ext.mixin.Observable#method!enableBubble Ext.mixin.Observable#enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2194,35",
                      "text": "0,2194,45,31",
                      "type": "0,2194,27"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "0,2195,38",
                      "text": "0,2195,43,54",
                      "type": "0,2195,27"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,2196,37,77",
                      "type": "0,2196,28"
                    }
                  }
                ],
                "src": {
                  "name": "0,2198,0",
                  "text": "0,2188,19,344"
                }
              },
              {
                "$type": "method",
                "name": "getChildAt",
                "text": "Returns the child node at the specified index.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "type": "Number",
                    "src": {
                      "name": "0,1479,36",
                      "type": "0,1479,28"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "type": "0,1480,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1482,0",
                  "text": "0,1478,20,47"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1469,29",
                      "text": "1,1469,35,40",
                      "type": "1,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1470,30",
                      "text": "1,1470,42,60",
                      "type": "1,1470,20",
                      "value": "1,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1471,29,27",
                      "type": "1,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1473,0",
                  "text": "1,1466,12,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "1,1506,12",
                  "name": "1,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getDepth",
                "text": "Returns depth of this node (the root node has a depth of 0)\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,1549,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1551,0",
                  "text": "0,1548,20,60"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1551,29",
                      "text": "1,1551,35,37",
                      "type": "1,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "1,1552,35,48:1,1553,12,33",
                      "type": "1,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1555,0",
                  "text": "1,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getOwnerTree",
                "text": "Returns the tree this node is in.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The tree panel which owns this node.\n",
                    "type": "Ext.tree.Panel",
                    "src": {
                      "text": "0,927,44,37",
                      "type": "0,927,28"
                    }
                  }
                ],
                "src": {
                  "name": "0,929,0",
                  "text": "0,926,19,34"
                }
              },
              {
                "$type": "method",
                "name": "getPath",
                "text": "Gets the hierarchical path from the root of the current node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "optional": true,
                    "text": "The field to construct the path from. Defaults to the model idProperty.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1529,37",
                      "text": "0,1529,44,72",
                      "type": "0,1529,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "separator",
                    "optional": true,
                    "text": "A separator to use.\n",
                    "type": "String",
                    "value": "'/'",
                    "src": {
                      "name": "0,1530,37",
                      "text": "0,1530,52,20",
                      "type": "0,1530,28",
                      "value": "0,1530,47"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The node path\n",
                    "type": "String",
                    "src": {
                      "text": "0,1531,37,14",
                      "type": "0,1531,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1533,0",
                  "text": "0,1528,20,62"
                }
              },
              {
                "$type": "method",
                "name": "getTreeStore",
                "text": "Returns the {@link Ext.data.TreeStore} which owns this node.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The TreeStore which owns this node.\n",
                    "type": "Ext.data.TreeStore",
                    "src": {
                      "text": "0,938,49,36",
                      "type": "0,938,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,940,0",
                  "text": "0,937,20,61"
                }
              },
              {
                "$type": "method",
                "name": "hasChildNodes",
                "text": "Returns true if this node has one or more child nodes, else false.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,733,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,735,0",
                  "text": "0,732,20,67"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,1515,12",
                  "name": "1,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "indexOf",
                "text": "Returns the index of a child node\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,1502,52",
                      "type": "0,1502,28"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of the node or -1 if it was not found\n",
                    "type": "Number",
                    "src": {
                      "text": "0,1503,37,48",
                      "type": "0,1503,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1505,0",
                  "text": "0,1501,20,34"
                }
              },
              {
                "$type": "method",
                "name": "indexOfId",
                "text": "Returns the index of a child node that matches the id\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the node to find\n",
                    "type": "String",
                    "src": {
                      "name": "0,1511,36",
                      "text": "0,1511,39,27",
                      "type": "0,1511,28"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of the node or -1 if it was not found\n",
                    "type": "Number",
                    "src": {
                      "text": "0,1512,37,48",
                      "type": "0,1512,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1514,0",
                  "text": "0,1510,20,54"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,1449,28",
                      "type": "1,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1450,31,5",
                      "type": "1,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1448,12",
                  "name": "1,1452,0",
                  "text": "1,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "insertBefore",
                "text": "Inserts the first node before the second node in this nodes childNodes collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node to insert\n",
                    "type": "Ext.data.NodeInterface/Ext.data.NodeInterface[]/Object",
                    "src": {
                      "name": "0,1206,84",
                      "text": "0,1206,89,19",
                      "type": "0,1206,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "refNode",
                    "text": "The node to insert before (if null the node is appended)\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,1207,52",
                      "text": "0,1207,60,57",
                      "type": "0,1207,28"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The inserted node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,1208,53,18",
                      "type": "0,1208,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1210,0",
                  "text": "0,1205,20,83"
                }
              },
              {
                "$type": "method",
                "name": "insertChild",
                "text": "Inserts a node into this node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The zero-based index to insert the node at\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1335,36",
                      "text": "0,1335,42,43",
                      "type": "0,1335,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node to insert\n",
                    "type": "Ext.data.NodeInterface/Object",
                    "src": {
                      "name": "0,1336,59",
                      "text": "0,1336,64,19",
                      "type": "0,1336,28"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The node you just inserted\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,1337,53,27",
                      "type": "0,1337,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1339,0",
                  "text": "0,1334,20,31"
                }
              },
              {
                "$type": "method",
                "name": "isAncestor",
                "text": "Returns true if the passed node is an ancestor (at any point) of this node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,1697,52",
                      "type": "0,1697,28"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,1698,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1700,0",
                  "text": "0,1696,20,76"
                }
              },
              {
                "$type": "method",
                "name": "isBranchLoaded",
                "text": "Returns true if this node is a branch node, and the entire branch is fully loaded.\n\nUsing this method, it is possible to ascertain whether an\n`expandAll()` call (_classic toolkit TreePanel method_) will have\naccess to all descendant nodes without incurring a store load.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,1783,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1785,0",
                  "text": "0,1778,20,271"
                }
              },
              {
                "$type": "method",
                "name": "isExpandable",
                "text": "Returns true if this node has one or more child nodes, or if the <tt>expandable</tt>\nnode attribute is explicitly specified as true, otherwise returns false.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,742,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,744,0",
                  "text": "0,740,20,158"
                }
              },
              {
                "$type": "method",
                "name": "isExpanded",
                "text": "Returns `true` if this node is expanded.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,1763,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1765,0",
                  "text": "0,1762,20,41"
                }
              },
              {
                "$type": "method",
                "name": "isFirst",
                "text": "Returns true if this node is the first child of its parent\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,725,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,727,0",
                  "text": "0,724,20,59"
                }
              },
              {
                "$type": "method",
                "name": "isLast",
                "text": "Returns true if this node is the last child of its parent\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,717,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,719,0",
                  "text": "0,716,20,58"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isLastVisible",
                "text": "Used by {@link Ext.tree.Column#initTemplateRendererData} to determine whether a node is the last *visible*\nsibling.\n",
                "src": {
                  "access": "0,1350,20",
                  "name": "0,1355,0",
                  "text": "0,1351,20,117"
                }
              },
              {
                "$type": "method",
                "name": "isLeaf",
                "text": "Returns true if this node is a leaf\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,584,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,586,0",
                  "text": "0,583,20,36"
                }
              },
              {
                "$type": "method",
                "name": "isLoaded",
                "text": "Returns true if this node is loaded\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,1771,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1773,0",
                  "text": "0,1770,20,36"
                }
              },
              {
                "$type": "method",
                "name": "isLoading",
                "text": "Returns true if this node is loading\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,1801,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1803,0",
                  "text": "0,1800,20,37"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isRoot",
                "text": "Returns true if this node is the root node\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,1809,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1811,0",
                  "text": "0,1808,20,43"
                }
              },
              {
                "$type": "method",
                "name": "isVisible",
                "text": "Returns true if this node is visible. Note that visibility refers to\nthe structure of the tree, the {@link Ext.tree.Panel#cfg!rootVisible Ext.tree.Panel#rootVisible}\nconfiguration is not taken into account here. If this method is called\non the root node, it will always be visible.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,1820,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1822,0",
                  "text": "0,1816,20,251"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "1,1571,28",
                      "type": "1,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "1,1572,28",
                      "type": "1,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1573,29,20",
                      "type": "1,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1574,12",
                  "name": "1,1576,0",
                  "text": "1,1569,12,140"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onChildNodesAvailable",
                "text": "Called as a callback from the beforeexpand listener fired by {@link #method!expand #method-expand} when the child nodes have been loaded and appended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "records",
                    "src": {
                      "name": "0,1917,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "recursive",
                    "src": {
                      "name": "0,1917,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "src": {
                      "name": "0,1917,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "0,1917,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1914,20",
                  "name": "0,1917,0",
                  "text": "0,1915,20,136"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "remove",
                "text": "Removes this node from its parent.\n\n**If** the node is not phantom (only added in the client side), then it may be marked for removal.\n\nIf the owning {@link Ext.data.TreeStore} is set to {@link Ext.data.ProxyStore#cfg!trackRemoved Ext.data.ProxyStore#trackRemoved}\nthen the node will be added to the stack of nodes due to be removed the next time the store is synced with the server.\n\nIf the owning {@link Ext.data.TreeStore} is set to {@link Ext.data.ProxyStore#cfg!autoSync Ext.data.ProxyStore#autoSync}\nthen the synchronize request will be initiated immediately.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "erase",
                    "optional": true,
                    "text": "True to erase the node using the configured proxy. This is only needed when the\nowning {@link Ext.data.TreeStore} is not taking care of synchronization operations.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1386,38",
                      "text": "0,1386,51,80:0,1387,20,96",
                      "type": "0,1386,28",
                      "value": "0,1386,44"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,1389,53,5",
                      "type": "0,1389,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1391,0",
                  "text": "0,1376,20,550"
                }
              },
              {
                "$type": "method",
                "name": "removeAll",
                "text": "Removes all child nodes from this node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "erase",
                    "optional": true,
                    "text": "True to erase the node using the configured\nproxy.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1406,38",
                      "text": "0,1406,51,44:0,1407,20,7",
                      "type": "0,1406,28",
                      "value": "0,1406,44"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,1408,53,5",
                      "type": "0,1408,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1411,0",
                  "text": "0,1405,20,40"
                }
              },
              {
                "$type": "method",
                "name": "removeChild",
                "text": "Removes a child node from this node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node to remove\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,951,52",
                      "text": "0,951,57,19",
                      "type": "0,951,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "erase",
                    "optional": true,
                    "text": "True to erase the record using the\nconfigured proxy.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,952,38",
                      "text": "0,952,51,35:0,953,20,18",
                      "type": "0,952,28",
                      "value": "0,952,44"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The removed node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,954,53,17",
                      "type": "0,954,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,956,0",
                  "text": "0,950,20,37"
                }
              },
              {
                "$type": "method",
                "name": "replaceChild",
                "text": "Replaces one child node in this node with another.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newChild",
                    "text": "The replacement node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,1488,52",
                      "text": "0,1488,61,21",
                      "type": "0,1488,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldChild",
                    "text": "The node to replace\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,1489,52",
                      "text": "0,1489,61,20",
                      "type": "0,1489,28"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The replaced node\n",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "text": "0,1490,53,18",
                      "type": "0,1490,29"
                    }
                  }
                ],
                "src": {
                  "name": "0,1492,0",
                  "text": "0,1487,20,51"
                }
              },
              {
                "$type": "method",
                "name": "serialize",
                "text": "Creates an object representation of this node including its children.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "writerParam",
                    "src": {
                      "name": "0,2239,0"
                    }
                  }
                ],
                "src": {
                  "name": "0,2239,0",
                  "text": "0,2237,20,70"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setCollapsed",
                "text": "Sets the node into the collapsed state without affecting the UI.\n\nThis is called when a node is collapsed with the recursive flag. All the descendant\nnodes will have been removed from the store, but descendant non-leaf nodes still\nneed to be set to the collapsed state without affecting the UI.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "recursive",
                    "src": {
                      "name": "0,2123,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,2115,20",
                  "name": "0,2123,0",
                  "text": "0,2117,20,295"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1478,35",
                      "text": "1,1478,40,69",
                      "type": "1,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1479,29",
                      "text": "1,1479,36,41",
                      "type": "1,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1480,31,5",
                      "type": "1,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1482,0",
                  "text": "1,1476,12,46"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setFirstChild",
                "text": "Sets the first child of this node\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,593,52",
                      "type": "0,593,28"
                    }
                  }
                ],
                "src": {
                  "access": "0,592,20",
                  "name": "0,595,0",
                  "text": "0,591,20,34"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setLastChild",
                "text": "Sets the last child of this node\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "Ext.data.NodeInterface",
                    "src": {
                      "name": "0,602,52",
                      "type": "0,602,28"
                    }
                  }
                ],
                "src": {
                  "access": "0,601,20",
                  "name": "0,604,0",
                  "text": "0,600,20,33"
                }
              },
              {
                "$type": "method",
                "name": "sort",
                "text": "Sorts this nodes children using the supplied sort function.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sortFn",
                    "optional": true,
                    "text": "A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order.\n\nIt omitted, the node is sorted according to the existing sorters in the owning {@link Ext.data.TreeStore}.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,1713,39",
                      "text": "0,1713,47,96:0,1714,20,118",
                      "type": "0,1713,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "recursive",
                    "optional": true,
                    "text": "True to apply this sort recursively\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1716,38",
                      "text": "0,1716,55,36",
                      "type": "0,1716,28",
                      "value": "0,1716,48"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "suppressEvent",
                    "optional": true,
                    "text": "True to not fire a sort event.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1717,38",
                      "text": "0,1717,59,31",
                      "type": "0,1717,28",
                      "value": "0,1717,52"
                    }
                  }
                ],
                "src": {
                  "name": "0,1719,0",
                  "text": "0,1712,20,60"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "1,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1160,12",
                  "name": "1,1163,0",
                  "text": "1,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,297,21,32",
                      "type": "2,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,239,12",
                  "text": "2,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "1,1589,30",
                      "text": "1,1589,36,44",
                      "type": "1,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1590,31,5",
                      "type": "1,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1591,12",
                  "name": "1,1593,0",
                  "text": "1,1587,12,138"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "updateInfo",
                "text": "Updates general data of this node like isFirst, isLast, depth. This\nmethod is internally called after a node is moved. This shouldn't\nhave to be called by the developer unless they are creating custom\nTree plugins.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "commit",
                    "type": "Boolean",
                    "src": {
                      "name": "0,614,37",
                      "type": "0,614,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "info",
                    "text": "The info to update. May contain any of the following\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "isFirst",
                        "type": "Object",
                        "src": {
                          "name": "0,616,42",
                          "type": "0,616,29"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "isLast",
                        "type": "Object",
                        "src": {
                          "name": "0,617,42",
                          "type": "0,617,29"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "type": "Object",
                        "src": {
                          "name": "0,618,42",
                          "type": "0,618,29"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "depth",
                        "type": "Object",
                        "src": {
                          "name": "0,619,42",
                          "type": "0,619,29"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "parentId",
                        "type": "Object",
                        "src": {
                          "name": "0,620,42",
                          "type": "0,620,29"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,615,36",
                      "text": "0,615,41,53",
                      "type": "0,615,28"
                    }
                  }
                ],
                "src": {
                  "access": "0,613,20",
                  "name": "0,622,0",
                  "text": "0,609,20,215"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "1,1049,13",
                  "name": "1,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1066,12",
                  "name": "1,1062,33",
                  "since": "1,1067,19",
                  "text": "1,1063,12,225",
                  "type": "1,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1076,12",
                  "name": "1,1072,33",
                  "since": "1,1077,19",
                  "text": "1,1073,12,229",
                  "type": "1,1072,23"
                }
              },
              {
                "$type": "property",
                "name": "childNodes",
                "text": "An array of this nodes children.  Array will be empty if this node has no children.\n",
                "type": "Ext.data.NodeInterface[]",
                "src": {
                  "name": "0,323,45",
                  "text": "0,324,8,84",
                  "type": "0,323,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1102,12",
                  "name": "1,1100,32",
                  "text": "1,1101,12,69",
                  "type": "1,1100,23"
                }
              },
              {
                "$type": "property",
                "name": "firstChild",
                "text": "A reference to this node's first child node. `{@link null}` if this node has no children.\n",
                "type": "Ext.data.NodeInterface",
                "src": {
                  "name": "0,318,43",
                  "text": "0,319,8,82",
                  "type": "0,318,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1084,12",
                  "name": "1,1082,32",
                  "readonly": "1,1085,12",
                  "since": "1,1086,19",
                  "text": "1,1083,12,64",
                  "type": "1,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1093,12",
                  "name": "1,1091,32",
                  "readonly": "1,1094,12",
                  "since": "1,1095,19",
                  "text": "1,1092,12,75",
                  "type": "1,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1056,12",
                  "name": "1,1053,32",
                  "readonly": "1,1057,12",
                  "text": "1,1054,12,94",
                  "type": "1,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "isNode",
                "text": "`true` in this class to identify an object as an instantiated Node, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,413,40",
                  "text": "0,414,20,89",
                  "type": "0,413,31"
                }
              },
              {
                "$type": "property",
                "name": "lastChild",
                "text": "A reference to this node's last child node. `{@link null}` if this node has no children.\n",
                "type": "Ext.data.NodeInterface",
                "src": {
                  "name": "0,313,43",
                  "text": "0,314,8,81",
                  "type": "0,313,19"
                }
              },
              {
                "$type": "property",
                "name": "nextSibling",
                "text": "A reference to this node's next sibling node. `{@link null}` if this node does not have a next sibling.\n",
                "type": "Ext.data.NodeInterface",
                "src": {
                  "name": "0,298,43",
                  "text": "0,299,8,96",
                  "type": "0,298,19"
                }
              },
              {
                "$type": "property",
                "name": "parentNode",
                "text": "A reference to this node's parent node. `{@link null}` if this node is the root node.\n",
                "type": "Ext.data.NodeInterface",
                "src": {
                  "name": "0,308,43",
                  "text": "0,309,8,78",
                  "type": "0,308,19"
                }
              },
              {
                "$type": "property",
                "name": "previousSibling",
                "text": "A reference to this node's previous sibling node. `{@link null}` if this node does not have a previous sibling.\n",
                "type": "Ext.data.NodeInterface",
                "src": {
                  "name": "0,303,43",
                  "text": "0,304,8,104",
                  "type": "0,303,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "1,1413,12",
                  "name": "1,1379,34",
                  "text": "1,1380,12,1011",
                  "type": "1,1379,23"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,940,28",
                      "type": "1,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "1,941,32",
                      "text": "1,941,44,49",
                      "type": "1,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,942,12",
                  "inheritable": "1,944,12",
                  "name": "1,946,0",
                  "static": "1,943,12",
                  "text": "1,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,464,28",
                      "type": "1,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,461,12",
                  "inheritable": "1,463,12",
                  "name": "1,466,0",
                  "static": "1,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "1,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,659,12",
                  "inheritable": "1,661,12",
                  "name": "1,665,0",
                  "static": "1,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,522,28",
                      "text": "1,522,36,34",
                      "type": "1,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,523,30",
                      "text": "1,523,46,39",
                      "type": "1,523,20",
                      "value": "1,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,524,30",
                      "text": "1,524,45,45:1,525,12,53",
                      "type": "1,524,20",
                      "value": "1,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,527,12",
                  "name": "1,529,0",
                  "static": "1,526,12",
                  "text": "1,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,450,28",
                      "type": "1,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,451,31,5",
                      "type": "1,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,453,12",
                  "name": "1,455,0",
                  "static": "1,452,12",
                  "text": "1,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "1,693,30",
                      "text": "1,693,40,33",
                      "type": "1,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "1,694,34",
                      "text": "1,694,42,35",
                      "type": "1,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,695,31,5",
                      "type": "1,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,698,12",
                  "inheritable": "1,697,12",
                  "name": "1,700,0",
                  "static": "1,696,12",
                  "text": "1,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,810,12",
                  "inheritable": "1,812,12",
                  "name": "1,814,0",
                  "static": "1,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,824,12",
                  "inheritable": "1,826,12",
                  "name": "1,828,0",
                  "static": "1,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,107,29,22",
                      "type": "1,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,109,12",
                  "name": "1,111,0",
                  "static": "1,108,12",
                  "text": "1,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1018,35",
                      "text": "1,1018,41,63:1,1019,12,43",
                      "type": "1,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1020,35",
                      "text": "1,1020,42,25",
                      "type": "1,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,1022,12",
                  "name": "1,1025,0",
                  "static": "1,1021,12",
                  "text": "1,998,12,456"
                }
              },
              {
                "$type": "method",
                "name": "decorate",
                "static": true,
                "text": "This method allows you to decorate a Model's class to implement the NodeInterface.\nThis adds a set of methods, new events, new properties and new fields on every Record.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "model",
                    "text": "The Model class or an instance of the Model class you want to\ndecorate the prototype of.\n",
                    "type": "Ext.Class/Ext.data.Model",
                    "src": {
                      "name": "0,331,46",
                      "text": "0,331,52,62:0,332,12,27",
                      "type": "0,331,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,335,0",
                  "static": "0,333,12",
                  "text": "0,329,12,170"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,347,12",
                  "inheritable": "1,349,12",
                  "name": "1,352,0",
                  "static": "1,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "1,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,968,12",
                  "inheritable": "1,970,12",
                  "name": "1,972,0",
                  "static": "1,969,12",
                  "text": "1,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "1,989,29,10",
                      "type": "1,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,991,12",
                  "name": "1,993,0",
                  "static": "1,990,12",
                  "text": "1,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "1,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,840,12",
                  "inheritable": "1,842,12",
                  "name": "1,844,0",
                  "static": "1,841,12",
                  "text": "1,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "1,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "1,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,424,12",
                  "inheritable": "1,426,12",
                  "name": "1,428,0",
                  "static": "1,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,762,28",
                      "text": "1,762,36,52:1,763,12,66",
                      "type": "1,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,764,31,11",
                      "type": "1,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,766,12",
                  "name": "1,768,0",
                  "static": "1,765,12",
                  "text": "1,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "1,402,12",
                  "inheritable": "1,404,12",
                  "name": "1,406,0",
                  "static": "1,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "1,395,12",
                  "inheritable": "1,397,12",
                  "name": "1,399,0",
                  "static": "1,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "extends": "0,104,0",
          "name": "0,104,0",
          "requires": "0,106,0,0:0,107,0,0:0,108,0,0:0,109,0,0:0,110,0,0",
          "text": "0,2,4,3362"
        }
      }
    ]
  },
  "version": 1
}