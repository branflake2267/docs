{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/Session.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.data.Session",
        "requires": "Ext.data.schema.Schema,Ext.data.Batch,Ext.data.matrix.Matrix,Ext.data.session.ChangesVisitor,Ext.data.session.ChildChangesVisitor,Ext.data.session.BatchVisitor",
        "since": "5.0.0",
        "text": "This class manages models and their associations. Instances of `Session` are typically\nassociated with some `Component` (perhaps the Viewport or a Window) and then used by\ntheir <a href='#!/api/Ext.app.ViewModel'>Ext.app.ViewModel</a> to enable data binding.\n\nThe primary job of a Session is to manage a collection of records of many different\ntypes and their associations. This often starts by loading records when requested (via\nbind - see below) and culminates when it is time to save to the server.\n\nBecause the Session tracks all records it loads, it ensures that for any given type of\nmodel, only one record exists with a given `id`. This means that all edits of that\nrecord are properly targeted at that one instance.\n\nSimilarly, when associations are loaded, the <a href='#!/api/Ext.data.Store'>Ext.data.Store</a> created to hold the\nassociated records is tracked by the Session. So all requests for the \"OrderItems\" of\na particular Order id will result in the same Store. Adding and removing items from\nthat Order then is sure to remain consistent.\n\n# Data\n\nSince the Session is managing all this data, there are several methods it provides\nto give convenient access to that data. The most important of these is <a href='#!/api/Ext.data.Session-method-update'>update</a> and\n<a href='#!/api/Ext.data.Session-method-getChanges'>getChanges</a>.\n\nThe <a href='#!/api/Ext.data.Session-method-update'>update</a> and <a href='#!/api/Ext.data.Session-method-getChanges'>getChanges</a> methods both operate on object that contains a summary\nof records and associations and different CRUD operations.\n\n## Saving\n\nThere are two basic ways to save the contents of a Session: <a href='#!/api/Ext.data.Session-method-getChanges'>getChanges</a> and\n<a href='#!/api/Ext.data.Session-method-getSaveBatch'>getSaveBatch</a>. We've already seen <a href='#!/api/Ext.data.Session-method-getChanges'>getChanges</a>. The data contained in the CRUD object\ncan be translated into whatever shape is needed by the server.\n\nTo leverage the <a href='#!/api/Ext.data.Model-cfg-proxy'>Ext.data.Model#proxy</a> facilities defined by each Model\nclass, there is the <a href='#!/api/Ext.data.Session-method-getSaveBatch'>getSaveBatch</a> method. That method returns an <a href='#!/api/Ext.data.Batch'>Ext.data.Batch</a>\nobject populated with the necessary `create`, <a href='#!/api/Ext.data.Session-method-update'>update</a> and `destory` operations to\nsave all of the changes in the Session.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "autoDestroy",
                "since": "5.0.1",
                "text": "`true` to automatically destroy this session when a component it is attached\nto is destroyed. This should be set to false if the session is intended to be\nused across multiple root level components.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,66,27",
                  "since": "0,71,19",
                  "text": "0,67,12,200",
                  "type": "0,66,18"
                }
              },
              {
                "$type": "property",
                "name": "parent",
                "text": "The parent session for this session.\n",
                "type": "Ext.data.Session",
                "src": {
                  "name": "0,60,36",
                  "text": "0,61,12,37",
                  "type": "0,60,18"
                }
              },
              {
                "$type": "property",
                "name": "schema",
                "type": "String/Ext.data.schema.Schema",
                "src": {
                  "name": "0,55,49",
                  "type": "0,55,18"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "add",
                "text": "Add a record instance to this session. Called by model.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,553,36",
                      "text": "0,553,43,12",
                      "type": "0,553,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,555,12",
                  "name": "0,557,0",
                  "text": "0,552,12,56"
                }
              },
              {
                "$type": "method",
                "name": "adopt",
                "text": "Adds an existing record instance to the session. The record\nmay not belong to another session. The record cannot be a phantom record, instead\nuse <a href='#!/api/Ext.data.Session-method-createRecord'>createRecord</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record to adopt.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,175,32",
                      "text": "0,175,39,21",
                      "type": "0,175,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,177,0",
                  "text": "0,172,8,169"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterErase",
                "text": "Template method, will be called by Model after a record is dropped.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,580,36",
                      "text": "0,580,43,12",
                      "type": "0,580,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,582,12",
                  "name": "0,584,0",
                  "text": "0,579,12,68"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applySchema",
                "items": [
                  {
                    "$type": "param",
                    "name": "schema",
                    "src": {
                      "name": "0,591,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,589,12",
                  "name": "0,591,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "checkModelType",
                "text": "Checks if the model type being referenced is valid for this session. That includes checking\nif the model name is correct & is one used in this <a href='#!/api/Ext.data.Session-cfg-schema'>schema</a> for this session. Will raise\nan exception if the model type is not correct.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The model name or model type.\n",
                    "type": "String/Ext.Class",
                    "src": {
                      "name": "0,600,38",
                      "text": "0,600,43,30",
                      "type": "0,600,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,602,12",
                  "name": "0,604,0",
                  "text": "0,597,12,235"
                }
              },
              {
                "$type": "method",
                "name": "commit",
                "since": "5.1.0",
                "text": "Marks the session as \"clean\" by calling <a href='#!/api/Ext.data.Model-method-commit'>Ext.data.Model#commit</a> on each record\nthat is known to the session.\n\n- Phantom records will no longer be phantom.\n- Modified records will no longer be dirty.\n- Dropped records will be erased.\n",
                "src": {
                  "name": "0,209,0",
                  "since": "0,207,15",
                  "text": "0,200,8,240"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createEntities",
                "text": "Process a create block of entities from the <a href='#!/api/Ext.data.Session-method-update'>update</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,619,31",
                      "text": "0,619,42,17",
                      "type": "0,619,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "items",
                    "text": "The data objects to create.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "0,620,30",
                      "text": "0,620,36,28",
                      "type": "0,620,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,622,12",
                  "name": "0,624,0",
                  "text": "0,618,12,68"
                }
              },
              {
                "$type": "method",
                "name": "createRecord",
                "text": "Creates a new record and tracks it in this session.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "type",
                    "text": "The `entityName` or the actual class of record to create.\n",
                    "type": "String/Ext.Class",
                    "src": {
                      "name": "0,232,34",
                      "text": "0,232,39,58",
                      "type": "0,232,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "data",
                    "optional": true,
                    "text": "The data for the record.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,233,25",
                      "text": "0,233,31,25",
                      "type": "0,233,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new record.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,234,33,16",
                      "type": "0,234,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,236,0",
                  "text": "0,230,8,53"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "dropEntities",
                "text": "Process a drop block for entities from the <a href='#!/api/Ext.data.Session-method-update'>update</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,645,31",
                      "text": "0,645,42,17",
                      "type": "0,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ids",
                    "text": "The identifiers of the items to drop.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "0,646,30",
                      "text": "0,646,34,38",
                      "type": "0,646,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,648,12",
                  "name": "0,650,0",
                  "text": "0,644,12,67"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "evict",
                "text": "Remove a record and any references from the session.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,675,36",
                      "text": "0,675,43,11",
                      "type": "0,675,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,677,12",
                  "name": "0,679,0",
                  "text": "0,674,12,53"
                }
              },
              {
                "$type": "method",
                "name": "getChanges",
                "text": "Returns an object describing all of the modified fields, created or dropped records\nand many-to-many association changes maintained by this session.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "An object in the CRUD format (see the intro docs). <a href='#!/api/null'>null</a> if there are no changes.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,259,25,83",
                      "type": "0,259,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,261,0",
                  "text": "0,256,8,150"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getChangesForParent",
                "text": "The same functionality as <a href='#!/api/Ext.data.Session-method-getChanges'>getChanges</a>, however we also take into account our\nparent session.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "An object in the CRUD format (see the intro docs). <a href='#!/api/null'>null</a> if there are no changes.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,271,25,83",
                      "type": "0,271,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,273,8",
                  "name": "0,275,0",
                  "text": "0,268,8,102"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getEntityList",
                "text": "Transforms a list of ids into a list of records for a particular type.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,692,31",
                      "text": "0,692,42,17",
                      "type": "0,692,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ids",
                    "text": "The ids to transform.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "0,693,30",
                      "text": "0,693,34,22",
                      "type": "0,693,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The models corresponding to the ids.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,694,39,37",
                      "type": "0,694,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,549,-1",
                  "name": "0,696,0",
                  "text": "0,691,12,71"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getEntry",
                "text": "Return an entry for the data property for a particular type/id.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "type",
                    "text": "The entity name or model type.\n",
                    "type": "String/Ext.Class",
                    "src": {
                      "name": "0,719,38",
                      "text": "0,719,43,31",
                      "type": "0,719,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the record\n",
                    "type": "Object",
                    "src": {
                      "name": "0,720,28",
                      "text": "0,720,31,21",
                      "type": "0,720,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The data entry.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,721,29,16",
                      "type": "0,721,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,723,12",
                  "name": "0,725,0",
                  "text": "0,718,12,64"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getModelIdentifier",
                "text": "Gets a user friendly identifier for a Model.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,816,31",
                      "text": "0,816,42,17",
                      "type": "0,816,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the entity.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,817,28",
                      "text": "0,817,31,22",
                      "type": "0,817,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The identifier.\n",
                    "type": "String",
                    "src": {
                      "text": "0,818,29,16",
                      "type": "0,818,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,549,-1",
                  "name": "0,820,0",
                  "text": "0,815,12,45"
                }
              },
              {
                "$type": "method",
                "name": "getRecord",
                "text": "Get a cached record from the session. If the record does not exist, it will\nbe created. If the `autoLoad` parameter is not set to `false`, the record will\nbe loaded via the <a href='#!/api/Ext.data.Model-cfg-proxy'>Ext.data.Model#proxy</a> of the Model.\n\nIf this session is configured with a <a href='#!/api/Ext.data.Session-cfg-parent'>parent</a> session, a *copy* of any existing record\nin the <a href='#!/api/Ext.data.Session-cfg-parent'>parent</a> will be adopted into this session. If the <a href='#!/api/Ext.data.Session-cfg-parent'>parent</a> does not contain the record,\nthe record will be created and *not* inserted into the parent.\n\nSee also <a href='#!/api/Ext.data.Session-method-peekRecord'>peekRecord</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "type",
                    "text": "The `entityName` or the actual class of record to create.\nThis may also be a record instance, where the type and id will be inferred from the record. If the record is\nnot attached to a session, it will be adopted. If it exists in a parent, an appropriate copy will be made as\ndescribed.\n",
                    "type": "String/Ext.Class/Ext.data.Model",
                    "src": {
                      "name": "0,292,49",
                      "text": "0,292,54,58:0,293,8,229",
                      "type": "0,292,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the record.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,296,24",
                      "text": "0,296,27,22",
                      "type": "0,296,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "autoLoad",
                    "optional": true,
                    "text": "`false` to prevent the record from being loaded if\nit does not exist. If this parameter is an object, it will be passed to the <a href='#!/api/Ext.data.Model-load'>Ext.data.Model#load</a> call.\n",
                    "type": "Boolean/Object",
                    "value": "true",
                    "src": {
                      "name": "0,297,33",
                      "text": "0,297,48,51:0,298,8,110",
                      "type": "0,297,16",
                      "value": "0,297,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The record.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,299,33,12",
                      "type": "0,299,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,301,0",
                  "text": "0,282,8,510"
                }
              },
              {
                "$type": "method",
                "name": "getSaveBatch",
                "text": "Returns an <a href='#!/api/Ext.data.Batch'>Ext.data.Batch</a> containing the <a href='#!/api/Ext.data.operation.Operation'>Ext.data.operation.Operation</a> instances\nthat are needed to save all of the changes in this session. This sorting is based\non operation type, associations and foreign keys. Generally speaking the operations\nin the batch can be committed to a server sequentially and the server will never be\nsent a request with an invalid (client-generated) id in a foreign key field.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sort",
                    "optional": true,
                    "text": "Pass `false` to disable the batch operation sort.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,353,26",
                      "text": "0,353,37,50",
                      "type": "0,353,16",
                      "value": "0,353,31"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Batch",
                    "src": {
                      "type": "0,354,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,356,0",
                  "text": "0,347,8,412"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.data.Session-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.data.Session-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onInvalidAssociationEntity",
                "template": true,
                "text": "Triggered when an associated item from <a href='#!/api/Ext.data.Session-method-update'>update</a> references a record\nthat does not exist in the session.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,367,27",
                      "text": "0,367,38,17",
                      "type": "0,367,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the model.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,368,24",
                      "text": "0,368,27,21",
                      "type": "0,368,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,370,8",
                  "name": "0,373,0",
                  "template": "0,371,8",
                  "text": "0,365,8,111"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onInvalidEntityCreate",
                "template": true,
                "text": "Triggered when an drop block from <a href='#!/api/Ext.data.Session-method-update'>update</a> tries to create a record\nthat already exists.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,380,27",
                      "text": "0,380,38,17",
                      "type": "0,380,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the model.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,381,24",
                      "text": "0,381,27,21",
                      "type": "0,381,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,383,8",
                  "name": "0,386,0",
                  "template": "0,384,8",
                  "text": "0,378,8,96"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onInvalidEntityDrop",
                "template": true,
                "text": "Triggered when an drop block from <a href='#!/api/Ext.data.Session-method-update'>update</a> references a record\nthat does not exist in the session.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,393,27",
                      "text": "0,393,38,17",
                      "type": "0,393,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the model.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,394,24",
                      "text": "0,394,27,21",
                      "type": "0,394,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,396,8",
                  "name": "0,399,0",
                  "template": "0,397,8",
                  "text": "0,391,8,106"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onInvalidEntityRead",
                "template": true,
                "text": "Triggered when an drop block from <a href='#!/api/Ext.data.Session-method-update'>update</a> tries to create a record\nthat already exists.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,406,27",
                      "text": "0,406,38,17",
                      "type": "0,406,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the model.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,407,24",
                      "text": "0,407,27,21",
                      "type": "0,407,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,409,8",
                  "name": "0,412,0",
                  "template": "0,410,8",
                  "text": "0,404,8,96"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onInvalidEntityUpdate",
                "template": true,
                "text": "Triggered when an update block from <a href='#!/api/Ext.data.Session-method-update'>update</a> references a record\nthat does not exist in the session.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,419,27",
                      "text": "0,419,38,17",
                      "type": "0,419,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the model.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,420,24",
                      "text": "0,420,27,21",
                      "type": "0,420,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dropped",
                    "text": "`true` if the record was dropped.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,421,25",
                      "text": "0,421,33,34",
                      "type": "0,421,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,423,8",
                  "name": "0,426,0",
                  "template": "0,424,8",
                  "text": "0,417,8,108"
                }
              },
              {
                "$type": "method",
                "name": "peekRecord",
                "text": "Gets an existing record from the session. The record will *not* be created if it does\nnot exist.\n\nSee also: <a href='#!/api/Ext.data.Session-method-getRecord'>getRecord</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "type",
                    "text": "The `entityName` or the actual class of record to create.\n",
                    "type": "String/Ext.Class",
                    "src": {
                      "name": "0,440,34",
                      "text": "0,440,39,58",
                      "type": "0,440,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the record.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,441,24",
                      "text": "0,441,27,22",
                      "type": "0,441,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "`true` to consult\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,442,26",
                      "text": "0,442,38,18",
                      "type": "0,442,16",
                      "value": "0,442,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The record, <a href='#!/api/null'>null</a> if it does not exist.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,443,33,41",
                      "type": "0,443,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,445,0",
                  "text": "0,435,8,129"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.data.Session-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.data.Session-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "readEntities",
                "text": "Process a read block of entities from the <a href='#!/api/Ext.data.Session-method-update'>update</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,914,31",
                      "text": "0,914,42,17",
                      "type": "0,914,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "items",
                    "text": "The data objects to read.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "0,915,30",
                      "text": "0,915,36,26",
                      "type": "0,915,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,917,12",
                  "name": "0,919,0",
                  "text": "0,913,12,66"
                }
              },
              {
                "$type": "method",
                "name": "save",
                "text": "Save any changes in this session to a <a href='#!/api/Ext.data.Session-cfg-parent'>parent</a> session.\n",
                "src": {
                  "name": "0,469,0",
                  "text": "0,467,8,63"
                }
              },
              {
                "$type": "method",
                "name": "spawn",
                "text": "Create a child session with this session as the <a href='#!/api/Ext.data.Session-cfg-parent'>parent</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The copied session.\n",
                    "type": "Ext.data.Session",
                    "src": {
                      "text": "0,482,35,20",
                      "type": "0,482,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,484,0",
                  "text": "0,481,8,65"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.data.Session-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.data.Session-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.data.Session-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.data.Session-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "update",
                "text": "Complete a bulk update for this session.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "Data in the CRUD format (see the intro docs).\n",
                    "type": "Object",
                    "src": {
                      "name": "0,493,24",
                      "text": "0,493,29,46",
                      "type": "0,493,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,495,0",
                  "text": "0,492,8,41"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateEntities",
                "text": "Process an update block for entities from the <a href='#!/api/Ext.data.Session-method-update'>update</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "entityType",
                    "text": "The entity type.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "0,997,31",
                      "text": "0,997,42,17",
                      "type": "0,997,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "items",
                    "text": "The data objects to update.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "0,998,30",
                      "text": "0,998,36,28",
                      "type": "0,998,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,1000,12",
                  "name": "0,1002,0",
                  "text": "0,996,12,70"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.data.Session-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.data.Session-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.data.Session-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.data.Session-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.data.Session-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.data.Session-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.data.Session-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.data.Session-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.data.Session-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.data.Session-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "visitData",
                "text": "Walks the internal data tracked by this session and calls methods on the provided\n`visitor` object. The visitor can then accumulate whatever data it finds important.\nThe visitor object can provide a number of methods, but all are optional.\n\nThis method does not enumerate associations since these can be traversed given the\nrecords that are enumerated. For many-to-many associations, however, this method\ndoes enumerate the changes because these changes are not \"owned\" by either side of\nsuch associations.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "visitor",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "onCleanRecord",
                        "optional": true,
                        "text": "This method is called to describe a record\nthat is known but unchanged.\n",
                        "type": "Function",
                        "items": [
                          {
                            "$type": "property",
                            "name": "record",
                            "text": "The unmodified record.\n",
                            "type": "Ext.data.Model",
                            "src": {
                              "name": "0,1065,58",
                              "text": "0,1065,65,23",
                              "type": "0,1065,20"
                            }
                          }
                        ],
                        "src": {
                          "name": "0,1063,39",
                          "text": "0,1063,54,43:0,1064,12,29",
                          "type": "0,1063,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onDirtyRecord",
                        "optional": true,
                        "text": "This method is called to describe a record\nthat has either been created, dropped or modified.\n",
                        "type": "Function",
                        "items": [
                          {
                            "$type": "property",
                            "name": "record",
                            "text": "The modified record.\n",
                            "type": "Ext.data.Model",
                            "src": {
                              "name": "0,1068,58",
                              "text": "0,1068,65,21",
                              "type": "0,1068,20"
                            }
                          }
                        ],
                        "src": {
                          "name": "0,1066,39",
                          "text": "0,1066,54,43:0,1067,12,51",
                          "type": "0,1066,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onMatrixChange",
                        "optional": true,
                        "text": "This method is called to describe a\nchange in a many-to-many association (a \"matrix\").\n",
                        "type": "Function",
                        "items": [
                          {
                            "$type": "property",
                            "name": "association",
                            "text": "The object\ndescribing the many-to-many (\"matrix\") association.\n",
                            "type": "Ext.data.schema.Association",
                            "src": {
                              "name": "0,1071,72",
                              "text": "0,1071,84,11:0,1072,12,52",
                              "type": "0,1071,20"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "leftId",
                            "text": "The `idProperty` of the record on the\n\"left\" of the association.\n",
                            "type": "Mixed",
                            "src": {
                              "name": "0,1073,50",
                              "text": "0,1073,57,38:0,1074,12,27",
                              "type": "0,1073,20"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "rightId",
                            "text": "The `idProperty` of the record on the\n\"right\" of the association.\n",
                            "type": "Mixed",
                            "src": {
                              "name": "0,1075,50",
                              "text": "0,1075,58,38:0,1076,12,28",
                              "type": "0,1075,20"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "state",
                            "text": "A negative number if the two records\nare being disassociated or a positive number if they are being associated. For\nexample, when adding User 10 to Group 20, this would be 1. When removing the User\nthis argument would be -1.\n",
                            "type": "Number",
                            "src": {
                              "name": "0,1077,51",
                              "text": "0,1077,57,37:0,1078,12,188",
                              "type": "0,1077,20"
                            }
                          }
                        ],
                        "src": {
                          "name": "0,1069,39",
                          "text": "0,1069,55,36:0,1070,12,51",
                          "type": "0,1069,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,1062,28",
                      "type": "0,1062,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The visitor instance\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1081,29,21",
                      "type": "0,1081,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,549,-1",
                  "name": "0,1083,0",
                  "text": "0,1053,12,508"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.data.Session-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,41,0",
          "requires": "0,43,0,0:0,44,0,0:0,45,0,0:0,46,0,0:0,47,0,0:0,48,0,0",
          "since": "0,39,11",
          "text": "0,2,4,1875"
        }
      }
    ]
  },
  "version": 1
}