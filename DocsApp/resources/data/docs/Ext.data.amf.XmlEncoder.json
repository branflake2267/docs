{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/amf/src/data/amf/XmlEncoder.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.data.amf.XmlEncoder",
        "text": "This class serializes data in the Action Message Format XML (AMFX) format.\nIt can write simple and complex objects, to be used in conjunction with an\nAMFX-compliant server.\nTo create an encoded XMl, first construct an Encoder:\n\n    var encoder = Ext.create('Ext.data.amf.XmlEncoder');\n\nThen use the writer methods to out data to the :\n\n    encoder.writeObject(1);\n    encoder.writeObject({a: \"b\"});\n\nAnd access the data through the #bytes property:\n    encoder.body;\n\nYou can also reset the class to start a new body:\n\n    encoder.clear();\n\nCurrent limitations:\nAMF3 format (format:3)\n- Each object is written out explicitly, not using the reference tables\n  supported by the AMFX format. This means the function does NOT support\n  circular reference objects.\n- Objects that aren't Arrays, Dates, Strings, Document (XML) or primitive\n  values will be written out as anonymous objects with dynamic data.\n- If the object has a $flexType field, that field will be used in signifying\n  the object-type as an attribute, instead of being passed as data.\n- There's no JavaScript equivalent to the ByteArray type in ActionScript,\n  hence data will never be searialized as ByteArrays by the writeObject\n  function. A writeByteArray method is provided for writing out ByteArray objects.\n\nFor more information on working with AMF data please refer to the\n[AMF Guide](#/guide/amf).\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "clear",
                "text": "Clears the accumulated data, starting with an empty string\n",
                "src": {
                  "name": "0,105,0",
                  "text": "0,103,8,59"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new encoder.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "Configuration options\n",
                    "type": "Object",
                    "src": {
                      "name": "0,95,24",
                      "text": "0,95,31,22",
                      "type": "0,95,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,97,0",
                  "text": "0,94,8,21"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "convertXmlToString",
                "text": "Converts an XML Document object to a string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xml",
                    "text": "XML document to convert (typically Document object)\n",
                    "type": "Object",
                    "src": {
                      "name": "0,527,24",
                      "text": "0,527,28,52",
                      "type": "0,527,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A string representing the document\n",
                    "type": "String",
                    "src": {
                      "text": "0,528,25,35",
                      "type": "0,528,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,529,8",
                  "name": "0,531,0",
                  "text": "0,526,8,45"
                }
              },
              {
                "$type": "method",
                "name": "encodeAmfxRemotingPacket",
                "text": "Encodes an AMFX remoting message with the AMFX envelope.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "message",
                    "text": "the message to pass on to serialize.\n",
                    "type": "Ext.data.amf.RemotingMessage",
                    "src": {
                      "name": "0,507,46",
                      "text": "0,507,54,37",
                      "type": "0,507,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,509,0",
                  "text": "0,506,8,57"
                }
              },
              {
                "$type": "method",
                "name": "encodeArray",
                "text": "Encodes an array, marking it as an ECMA array if it has associative (non-ordinal) indices\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "the array to encode\n",
                    "type": "Array",
                    "src": {
                      "name": "0,278,23",
                      "text": "0,278,29,20",
                      "type": "0,278,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,280,0",
                  "text": "0,277,8,90"
                }
              },
              {
                "$type": "method",
                "name": "encodeBoolean",
                "text": "Returns an encoded boolean\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "val",
                    "text": "a boolean value\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,139,25",
                      "text": "0,139,29,16",
                      "type": "0,139,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,141,0",
                  "text": "0,138,8,27"
                }
              },
              {
                "$type": "method",
                "name": "encodeByteArray",
                "text": "Encodes a byte arrat in AMFX format\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "the byte array to encode\n",
                    "type": "Array",
                    "src": {
                      "name": "0,403,23",
                      "text": "0,403,29,25",
                      "type": "0,403,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,405,0",
                  "text": "0,402,8,36"
                }
              },
              {
                "$type": "method",
                "name": "encodeDate",
                "text": "Encode a date\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "date",
                    "text": "the date to encode\n",
                    "type": "Date",
                    "src": {
                      "name": "0,250,22",
                      "text": "0,250,27,19",
                      "type": "0,250,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,252,0",
                  "text": "0,249,8,14"
                }
              },
              {
                "$type": "method",
                "name": "encodeDouble",
                "text": "Returns an encoded double\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "num",
                    "text": "the double to encode\n",
                    "type": "Number",
                    "src": {
                      "name": "0,200,24",
                      "text": "0,200,28,21",
                      "type": "0,200,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,202,0",
                  "text": "0,199,8,26"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "encodeEcmaElement",
                "text": "Encodes one ECMA array element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "the name of the element\n",
                    "type": "String",
                    "src": {
                      "name": "0,267,24",
                      "text": "0,267,28,24",
                      "type": "0,267,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "the value of the element\n",
                    "type": "Object",
                    "src": {
                      "name": "0,268,24",
                      "text": "0,268,30,25",
                      "type": "0,268,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the encoded key-value pair\n",
                    "type": "String",
                    "src": {
                      "text": "0,269,25,27",
                      "type": "0,269,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,265,8",
                  "name": "0,271,0",
                  "text": "0,266,8,31"
                }
              },
              {
                "$type": "method",
                "name": "encodeGenericObject",
                "text": "Encodes a generic object into AMFX format. If a <tt>$flexType</tt> member is defined, list that as the object type.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "text": "the object to encode\n",
                    "type": "Object",
                    "src": {
                      "name": "0,360,24",
                      "text": "0,360,28,21",
                      "type": "0,360,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the encoded text\n",
                    "type": "String",
                    "src": {
                      "text": "0,361,25,17",
                      "type": "0,361,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,363,0",
                  "text": "0,359,8,116"
                }
              },
              {
                "$type": "method",
                "name": "encodeInt",
                "text": "Returns an encoded int\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "num",
                    "text": "the integer to encode\n",
                    "type": "Number",
                    "src": {
                      "name": "0,184,24",
                      "text": "0,184,28,22",
                      "type": "0,184,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,186,0",
                  "text": "0,183,8,23"
                }
              },
              {
                "$type": "method",
                "name": "encodeNull",
                "text": "Returns the encoding for null\n",
                "src": {
                  "name": "0,126,0",
                  "text": "0,124,8,30"
                }
              },
              {
                "$type": "method",
                "name": "encodeNumber",
                "text": "Returns an encoded number. Decides wheter to use int or double encoding.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "num",
                    "text": "the number to encode\n",
                    "type": "Number",
                    "src": {
                      "name": "0,216,24",
                      "text": "0,216,28,21",
                      "type": "0,216,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,218,0",
                  "text": "0,215,8,73"
                }
              },
              {
                "$type": "method",
                "name": "encodeObject",
                "text": "encode the appropriate data item. Supported types:\n- undefined\n- null\n- boolean\n- integer\n- double\n- UTF-8 string\n- XML Document (identified by being instaneof Document. Can be generated with: new DOMParser()).parseFromString(xml, \"text/xml\");\n- Date\n- Array\n- Generic object\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "A primitive or object to write to the stream\n",
                    "type": "Object",
                    "src": {
                      "name": "0,451,24",
                      "text": "0,451,29,45",
                      "type": "0,451,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the encoded object in AMFX format\n",
                    "type": "String",
                    "src": {
                      "text": "0,452,25,34",
                      "type": "0,452,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,454,0",
                  "text": "0,440,8,276"
                }
              },
              {
                "$type": "method",
                "name": "encodeString",
                "text": "Returns an encoded string\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "str",
                    "text": "the string to encode\n",
                    "type": "String",
                    "src": {
                      "name": "0,162,24",
                      "text": "0,162,28,21",
                      "type": "0,162,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,164,0",
                  "text": "0,161,8,26"
                }
              },
              {
                "$type": "method",
                "name": "encodeUndefined",
                "text": "Returns the encoding for undefined (which is the same as the encoding for null)\n",
                "src": {
                  "name": "0,112,0",
                  "text": "0,110,8,80"
                }
              },
              {
                "$type": "method",
                "name": "encodeXml",
                "text": "Encodes an xml document into a CDATA section\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xml",
                    "text": "an XML document or element (Document type in some browsers)\n",
                    "type": "XMLElement/HTMLElement",
                    "src": {
                      "name": "0,343,40",
                      "text": "0,343,44,60",
                      "type": "0,343,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,345,0",
                  "text": "0,342,8,45"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.data.amf.XmlEncoder-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.data.amf.XmlEncoder-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isXmlDocument",
                "text": "Tries to determine if an object is an XML document\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "to identify\n",
                    "type": "Object",
                    "src": {
                      "name": "0,545,24",
                      "text": "0,545,29,12",
                      "type": "0,545,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if it's an XML document, false otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,546,26,46",
                      "type": "0,546,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,548,0",
                  "text": "0,544,8,51"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.data.amf.XmlEncoder-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.data.amf.XmlEncoder-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.data.amf.XmlEncoder-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.data.amf.XmlEncoder-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.data.amf.XmlEncoder-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.data.amf.XmlEncoder-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.data.amf.XmlEncoder-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.data.amf.XmlEncoder-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.data.amf.XmlEncoder-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.data.amf.XmlEncoder-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.data.amf.XmlEncoder-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.data.amf.XmlEncoder-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.data.amf.XmlEncoder-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.data.amf.XmlEncoder-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.data.amf.XmlEncoder-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.data.amf.XmlEncoder-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write",
                "text": "Appends a string to the body of the message\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "str",
                    "text": "the string to append\n",
                    "type": "String",
                    "src": {
                      "name": "0,565,24",
                      "text": "0,565,28,21",
                      "type": "0,565,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,566,8",
                  "name": "0,568,0",
                  "text": "0,564,8,44"
                }
              },
              {
                "$type": "method",
                "name": "writeAmfxRemotingPacket",
                "text": "Writes an AMFX remoting message with the AMFX envelope to the string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "message",
                    "text": "the message to pass on to serialize.\n",
                    "type": "Ext.data.amf.RemotingMessage",
                    "src": {
                      "name": "0,519,46",
                      "text": "0,519,54,37",
                      "type": "0,519,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,521,0",
                  "text": "0,518,8,70"
                }
              },
              {
                "$type": "method",
                "name": "writeArray",
                "text": "Writes an array to the string, marking it as an ECMA array if it has associative (non-ordinal) indices\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "the array to encode\n",
                    "type": "Array",
                    "src": {
                      "name": "0,335,23",
                      "text": "0,335,29,20",
                      "type": "0,335,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,337,0",
                  "text": "0,334,8,103"
                }
              },
              {
                "$type": "method",
                "name": "writeBoolean",
                "text": "Writes a boolean value to the string\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "val",
                    "text": "a boolean value\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,153,25",
                      "text": "0,153,29,16",
                      "type": "0,153,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,155,0",
                  "text": "0,152,8,37"
                }
              },
              {
                "$type": "method",
                "name": "writeByteArray",
                "text": "Writes an AMFX byte array to the string. This is for convenience only and is not called automatically by writeObject.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "array",
                    "text": "the byte array to encode\n",
                    "type": "Array",
                    "src": {
                      "name": "0,433,23",
                      "text": "0,433,29,25",
                      "type": "0,433,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,435,0",
                  "text": "0,432,8,118"
                }
              },
              {
                "$type": "method",
                "name": "writeDate",
                "text": "Write a date to the string\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "date",
                    "text": "the date to encode\n",
                    "type": "Date",
                    "src": {
                      "name": "0,258,22",
                      "text": "0,258,27,19",
                      "type": "0,258,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,260,0",
                  "text": "0,257,8,27"
                }
              },
              {
                "$type": "method",
                "name": "writeDouble",
                "text": "Writes a double tag with the content.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "num",
                    "text": "the double to encode\n",
                    "type": "Number",
                    "src": {
                      "name": "0,208,24",
                      "text": "0,208,28,21",
                      "type": "0,208,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,210,0",
                  "text": "0,207,8,38"
                }
              },
              {
                "$type": "method",
                "name": "writeGenericObject",
                "text": "Writes a generic object to the string. If a <tt>$flexType</tt> member is defined, list that as the object type.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "text": "the object to encode\n",
                    "type": "Object",
                    "src": {
                      "name": "0,395,24",
                      "text": "0,395,28,21",
                      "type": "0,395,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,397,0",
                  "text": "0,394,8,112"
                }
              },
              {
                "$type": "method",
                "name": "writeInt",
                "text": "Writes a int tag with the content.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "num",
                    "text": "the integer to encode\n",
                    "type": "Number",
                    "src": {
                      "name": "0,192,24",
                      "text": "0,192,28,22",
                      "type": "0,192,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,194,0",
                  "text": "0,191,8,35"
                }
              },
              {
                "$type": "method",
                "name": "writeNull",
                "text": "Writes the null value to the string\n",
                "src": {
                  "name": "0,133,0",
                  "text": "0,131,8,36"
                }
              },
              {
                "$type": "method",
                "name": "writeNumber",
                "text": "Writes a number, deciding if to use int or double as the tag\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "num",
                    "text": "the number to encode\n",
                    "type": "Number",
                    "src": {
                      "name": "0,242,24",
                      "text": "0,242,28,21",
                      "type": "0,242,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,244,0",
                  "text": "0,241,8,61"
                }
              },
              {
                "$type": "method",
                "name": "writeObject",
                "text": "Writes the appropriate data item to the string. Supported types:\n- undefined\n- null\n- boolean\n- integer\n- double\n- UTF-8 string\n- XML Document (identified by being instaneof Document. Can be generated with: new DOMParser()).parseFromString(xml, \"text/xml\");\n- Date\n- Array\n- Generic object\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "A primitive or object to write to the stream\n",
                    "type": "Object",
                    "src": {
                      "name": "0,499,24",
                      "text": "0,499,29,45",
                      "type": "0,499,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,501,0",
                  "text": "0,488,8,290"
                }
              },
              {
                "$type": "method",
                "name": "writeString",
                "text": "Writes a string tag with the string content.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "str",
                    "text": "the string to encode\n",
                    "type": "String",
                    "src": {
                      "name": "0,176,24",
                      "text": "0,176,28,21",
                      "type": "0,176,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,178,0",
                  "text": "0,175,8,45"
                }
              },
              {
                "$type": "method",
                "name": "writeUndefined",
                "text": "Writes the undefined value to the string\n",
                "src": {
                  "name": "0,119,0",
                  "text": "0,117,8,41"
                }
              },
              {
                "$type": "method",
                "name": "writeXml",
                "text": "Write an XML document to the string\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xml",
                    "text": "an XML document or element (Document type in some browsers)\n",
                    "type": "XMLElement/HTMLElement",
                    "src": {
                      "name": "0,352,40",
                      "text": "0,352,44,60",
                      "type": "0,352,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,354,0",
                  "text": "0,351,8,36"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "body",
                "text": "The output string\n",
                "type": "String",
                "src": {
                  "name": "0,45,27",
                  "text": "0,45,32,18",
                  "type": "0,45,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.data.amf.XmlEncoder-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "name": "generateFlexUID",
                "static": true,
                "text": "Utility function to generate a flex-friendly UID\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "used in the first 8 chars of the id. If not provided, a random number will be used.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,52,28",
                      "text": "0,52,31,84",
                      "type": "0,52,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "a string-encoded opaque UID\n",
                    "type": "String",
                    "src": {
                      "text": "0,53,29,28",
                      "type": "0,53,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,55,0",
                  "static": "0,48,-1",
                  "text": "0,51,12,49"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,3,11",
          "text": "0,4,4,1370"
        }
      }
    ]
  },
  "version": 1
}