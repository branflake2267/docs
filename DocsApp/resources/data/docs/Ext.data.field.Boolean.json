{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/field/Boolean.js",
    "../../../ext/packages/core/src/data/field/Field.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "data.field.bool,data.field.boolean",
        "extended": "Ext.data.field.Field,Ext.Base,Object",
        "extends": "Ext.data.field.Field",
        "name": "Ext.data.field.Boolean",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "allowBlank",
                "text": "\nUsed for validating a {@link Ext.data.Model}. Defaults to true. An empty value here will cause\n{@link Ext.data.Model}.{@link Ext.data.Model#method!isValid Ext.data.Model#isValid} to evaluate to false.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,280,8",
                  "name": "1,279,23",
                  "text": "1,281,8,186",
                  "type": "1,279,14"
                }
              },
              {
                "$type": "property",
                "name": "allowNull",
                "text": "\nUse when converting received data into a {@link Ext.data.field.Integer},\n{@link Ext.data.field.Number}, {@link Ext.data.field.Boolean}\nor {@link Ext.data.field.String} type. If the value cannot be\nparsed, `{@link null}` will be used if allowNull is true, otherwise a default value for that type will be used:\n\n- for `int` and `float` - `0`.\n- for `string` - `\"\"`.\n- for `bool` - `false`.\n\nNote that when parsing of {@link Ext.data.field.Date} type fails, the value will\nbe `{@link null}` regardless of this setting.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,288,23",
                  "text": "1,289,8,538",
                  "type": "1,288,14"
                }
              },
              {
                "$type": "property",
                "name": "calculate",
                "text": "This config defines a simple field calculation function. A calculate method only\nhas access to the record data and should return the value of the calculated field.\nWhen provided in this way, the `{@link #cfg!depends depends}` config is automatically determined by\nparsing the `{@link #cfg!calculate calculate}` function. For example:\n\n     fields: [{\n         name: 'firstName',\n         type: 'string'\n     },{\n         name: 'lastName',\n         type: 'string'\n     },{\n         name: 'fullName',\n         calculate: function (data) {\n             return data.firstName + ' ' + data.lastName;\n         }\n     }]\n\nThe above 'fullName' field is equivalent to:\n\n     {\n         name: 'fullName',\n         convert: function (v, rec) {\n             return rec.get('firstName') + ' ' + rec.get('lastName');\n         },\n         depends: ['firstName', 'lastName']\n     }\n\nThe restrictions on form for a `{@link #cfg!calculate calculate}` method are that the accesses to field\nvalues must match the following regular expression (case insensitive):\n\n     data.([a-z_][a-z0-9_]*)\n     // where 'data' is the param passed to the calculate method\n\nThe only advantage of a `{@link #cfg!calculate calculate}` method over a `convert` method is automatic\ndetermination of `{@link #cfg!depends depends}`.\n\n**Note:** The use of calculate and {@link #method!convert #method-convert} are exclusive.  The\ncalculate method will override the convert method if both are configured.\n",
                "type": "Function",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "An object with all values for each field in the parent\nmodel.  See {@link Ext.data.Model#method!getData Ext.data.Model#getData}.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,346,24",
                      "text": "1,346,29,55:1,347,8,52",
                      "type": "1,346,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "value The value of the calculated field\n",
                    "type": "Mixed",
                    "src": {
                      "text": "1,348,24,40",
                      "type": "1,348,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,305,24",
                  "text": "1,306,8,1334",
                  "type": "1,305,14"
                }
              },
              {
                "$type": "property",
                "name": "convert",
                "text": "If specified this config overrides the `{@link #method!convert #method-convert}` method. See\nalso `{@link #cfg!calculate #cfg-calculate}` for simple field calculations.\n\n**Note:** The use of {@link #cfg!calculate #calculate} and convert are exclusive.  The calculate\nmethod will override the convert method if both are configured.\n",
                "type": "Function",
                "src": {
                  "name": "1,352,24",
                  "text": "1,353,8,303",
                  "type": "1,352,14"
                }
              },
              {
                "$type": "property",
                "name": "critical",
                "text": "A critical field is a field that must always be sent to the server even if it has\nnot changed. The most common example of such a field is the \"id\" of a record (see\n`{@link Ext.data.Model#cfg!idProperty Ext.data.Model#idProperty}` but the `{@link Ext.data.Model#cfg!versionProperty Ext.data.Model#versionProperty}`\nis similarly a `{@link #cfg!critical critical}` field.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,361,23",
                  "text": "1,362,8,282",
                  "type": "1,361,14"
                }
              },
              {
                "$type": "property",
                "name": "defaultValue",
                "optional": true,
                "text": "\nThe default value used when the creating an instance from a raw data object,\nand the property referenced by the `{@link Ext.data.field.Field#cfg!mapping Ext.data.field.Field#mapping}`\ndoes not exist in that data object.\n\nThe value `{@link undefined}` prevents defaulting in a value.\n",
                "type": "Object",
                "value": "undefined",
                "src": {
                  "name": "1,377,23",
                  "text": "1,378,8,251",
                  "type": "1,377,14",
                  "value": "1,377,36"
                }
              },
              {
                "$type": "property",
                "name": "depends",
                "optional": true,
                "text": "The field name or names within the {@link Ext.data.Model} on which the value\nof this field depends, and from which a new value may be calculated. These values\nare the values used by the `convert` method. If you do not have a `convert` method\nthen this config should not be specified.\n\nBefore using this config you should consider if using a `{@link #cfg!calculate calculate}` method instead\nof a `convert` method would be simpler.\n\nWhenever any of the named fields are set using the {@link Ext.data.Model#method!set Ext.data.Model#set}\nmethod, this fields will have its `convert` method called passing the\n{@link Ext.data.Model} so that the dependent value can be calculated from\nall fields which it needs.\n\nFor example, to display a person's full name, using two separate `firstName` and\n`lastName` fields, configure the name field like this:\n\n    {\n        name: 'name',\n\n        // Will be called whenever forename or surname fields are set\n        convert: function (v, rec) {\n            return rec.get('firstName') + ' ' + rec.get('lastName');\n        },\n\n        depends: [ 'firstName', 'lastName' ],\n\n        // It should not be returned to the server - it's not a database field\n        persist: false\n    }\n\nNote that if you do not want the calculated field to be part of the field set sent\nback to the server when the store is synchronized, you should configure the field\nwith `{@link #cfg!persist persist}` set to `false`.\n",
                "type": "String/String[]",
                "src": {
                  "name": "1,432,32",
                  "text": "1,433,8,1382",
                  "type": "1,432,14"
                }
              },
              {
                "$type": "property",
                "name": "mapping",
                "text": "\n(Optional) A path expression for use by the {@link Ext.data.reader.Reader} implementation that is creating the\n{@link Ext.data.Model} to extract the Field value from the data object. If the path expression is the same\nas the field name, the mapping may be omitted. A function may be passed to do complex data extraction. The examples\nbelow are simple just to demonstrate the capability, typically, a function would not be used to extract such\nsimple data.\n\nThe form of the mapping expression depends on the Reader being used.\n\n- {@link Ext.data.reader.Json}\n\n  The mapping is a string containing the javascript expression to reference the data from an element of the data\n  item's {@link Ext.data.reader.Json#cfg!rootProperty Ext.data.reader.Json#cfg-rootProperty} Array. Defaults to the field name. If a function is passed,\n  a single argument is received which contains the raw json object:\n\n      // Server returns [{\"name\": \"Foo\", \"age\": 1}, {\"name\": \"Bar\", \"age\": 2}]\n      mapping: function(data) {\n          return data.name;\n      }\n\n- {@link Ext.data.reader.Xml}\n\n  The mapping is an {@link Ext.dom.Query Ext.DomQuery} path to the data item relative to the DOM element that represents the\n  {@link Ext.data.reader.Xml#cfg!record Ext.data.reader.Xml#record}. Defaults to the field name. If a function is passed, a single argument\n  is received which contains the record node:\n\n      // Server returns <Root><Person><Name>Foo</Name><Age>1</Age></Person><Person><Name>Bar</Name><Age>2</Age></Person></Root>\n      mapping: function(data) {\n          return data.firstChild.textContent;\n      }\n\n- {@link Ext.data.reader.Array}\n\n  The mapping is a number indicating the Array index of the field's value. Defaults to the field specification's\n  Array position. If a function is passed, a single argument is received which contains the child array.\n\n      // Server returns [[\"Foo\", 1], [\"Bar\", 2]]\n      mapping: function(data) {\n          return data[0];\n      }\n\nIf a more complex value extraction strategy is required, then configure the Field with a {@link #cfg!convert #cfg-convert}\nfunction. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to\nreturn the desired data.\n",
                "type": "String/Number/Function",
                "src": {
                  "name": "1,479,38",
                  "text": "1,480,8,2158",
                  "type": "1,479,14"
                }
              },
              {
                "$type": "property",
                "name": "name",
                "text": "\nThe name by which the field is referenced within the Model. This is referenced by,\nfor example, the `dataIndex` property in column definition objects passed to\n{@link Ext.grid.property.HeaderContainer}.\n\nNote: In the simplest case, if no properties other than `{@link #cfg!name name}` are required, a\nfield definition may consist of just a String for the field name.\n",
                "type": "String",
                "src": {
                  "name": "1,528,22",
                  "text": "1,529,8,350",
                  "type": "1,528,14"
                }
              },
              {
                "$type": "property",
                "name": "persist",
                "optional": true,
                "text": "\nFalse to exclude this field from the {@link Ext.data.Model#property!modified Ext.data.Model#modified} fields in a\nrecord. This will also exclude the field from being written using a\n{@link Ext.data.writer.Writer}. This option is useful when fields are used to keep\nstate on the client but do not need to be persisted to the server.\n\nDefaults to `false` for `{@link #property!calculated calculated}` fields and `true` otherwise.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,547,24",
                  "text": "1,548,8,367",
                  "type": "1,547,14"
                }
              },
              {
                "$type": "property",
                "name": "reference",
                "optional": true,
                "text": "The {@link Ext.data.Model#property!entityName Ext.data.Model#entityName} of the entity referenced by this field.\nIn most databases, this relationship is represented by a \"foreign key\". That is, a\nvalue for such a field matches the value of the {@link Ext.data.Model#cfg!idProperty Ext.data.Model#idProperty}\nfor an entity of this type.\n\n     Ext.define('MyApp.models.Organization', {\n         extend: 'Ext.data.Model',\n         ...\n     });\n\n     Ext.define('MyApp.models.User', {\n         extend: 'Ext.data.Model',\n\n         fields: [\n             { name: 'organizationId', reference: 'Organization' }\n         ],\n         ...\n     });\n\nIf a `{@link #cfg!reference reference}` is not nullable, set the {@link Ext.data.field.Field#cfg!allowBlank Ext.data.field.Field#allowBlank} property\nto false.\n\n     Ext.define('MyApp.models.User', {\n         extend: 'Ext.data.Model',\n\n         fields: [\n             { name: 'organizationId', reference: 'Organization', allowBlank: false }\n         ],\n         ...\n     });\n\nIf the name of the generated {@link Ext.data.schema.Association} or other aspects\nneed to be specified, the `{@link #cfg!reference reference}` can be an object. The following usage shows\nwhat would be generated by default given the above examples using the string form.\n\n     Ext.define('MyApp.models.User', {\n         extend: 'Ext.data.Model',\n\n         fields: [{\n             name: 'organizationId',\n             reference: {\n                 type: 'Organization',\n                 association: 'UsersByOrganization',\n                 role: 'organization',\n                 inverse: 'users'\n             }\n         }],\n         ...\n     });\n\nFinally, a `{@link #cfg!reference reference}` can also describe ownership between the entities. By default,\nno ownership relationship is assumed. If, however, the User entities are owned by\ntheir Organization, we could say this:\n\n     Ext.define('MyApp.models.User', {\n         extend: 'Ext.data.Model',\n\n         fields: [{\n             name: 'organizationId',\n             reference: {\n                 parent: 'Organization' // Organization is the parent of User\n             }\n         }],\n         ...\n     });\n",
                "type": "String/Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "type",
                    "text": "The type which this field references. This is the value set by the string form of\n`{@link #cfg!reference reference}`. If the referenced entity has an ownership relationship this field\nshould be omitted and `reference.parent` or `reference.child` should be specified\ninstead.\n",
                    "type": "String",
                    "src": {
                      "name": "1,626,32",
                      "text": "1,627,8,253",
                      "type": "1,626,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "association",
                    "optional": true,
                    "text": "The name of the association. By default, the name of the association is the\ncapitalized `inverse` plus \"By\" plus the capitalized `role`.\n",
                    "type": "String",
                    "src": {
                      "name": "1,632,33",
                      "text": "1,633,8,138",
                      "type": "1,632,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "child",
                    "optional": true,
                    "text": "Set this property instead of `reference.type` to indicate that the referenced entity\nis an owned child of this entity. That is, the `{@link #cfg!reference reference}` entity should be deleted\nwhen this entity is deleted.\n",
                    "type": "String",
                    "src": {
                      "name": "1,636,33",
                      "text": "1,637,8,199",
                      "type": "1,636,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "parent",
                    "optional": true,
                    "text": "Set this property instead of `reference.type` to indicate that the referenced entity\nis the owning parent of this entity. That is, this entity should be deleted when the\n`{@link #cfg!reference reference}` entity is deleted.\n",
                    "type": "String",
                    "src": {
                      "name": "1,641,33",
                      "text": "1,642,8,202",
                      "type": "1,641,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "role",
                    "optional": true,
                    "text": "The name of the role played by the referenced entity. By default, this is the field\nname (minus its \"Id\" suffix if present).\n",
                    "type": "String",
                    "src": {
                      "name": "1,646,33",
                      "text": "1,647,8,126",
                      "type": "1,646,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "inverse",
                    "optional": true,
                    "text": "The name of the inverse role (of this entity with respect to the `{@link #cfg!reference reference}`\nentity). By default, this is the {@link Ext.util.Inflector#method!pluralize Ext.util.Inflector#pluralize}\nname of this entity, unless this `{@link #cfg!reference reference}` is `{@link #cfg!unique unique}`, in which case the default\nname is the {@link Ext.util.Inflector#method!singularize Ext.util.Inflector#singularize} name of this entity.\n\nThis config may also be an object containing a role, getter, or setter.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,650,40",
                      "text": "1,651,8,400",
                      "type": "1,650,14"
                    }
                  }
                ],
                "src": {
                  "name": "1,559,30",
                  "text": "1,560,8,2026",
                  "type": "1,559,14"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "#method-serialize",
                "name": "serialize",
                "type": "Function",
                "src": {
                  "inheritdoc": "1,662,8",
                  "name": "1,661,24",
                  "type": "1,661,14"
                }
              },
              {
                "$type": "property",
                "name": "sortType",
                "text": "\nA function which converts a Field's value to a comparable value in order to ensure\ncorrect sort ordering.\n\nPredefined functions are provided in {@link Ext.data.SortTypes}. A custom sort example:\n\n    // current sort     after sort we want\n    // +-+------+          +-+------+\n    // |1|First |          |1|First |\n    // |2|Last  |          |3|Second|\n    // |3|Second|          |2|Last  |\n    // +-+------+          +-+------+\n\n    sortType: function(value) {\n       switch (value.toLowerCase()) // native toLowerCase():\n       {\n          case 'first': return 1;\n          case 'second': return 2;\n          default: return 3;\n       }\n    }\n\nMay also be set to a String value, corresponding to one of the named sort types in\n{@link Ext.data.SortTypes}.\n",
                "type": "Function/String",
                "src": {
                  "name": "1,666,31",
                  "text": "1,667,8,758",
                  "type": "1,666,14"
                }
              },
              {
                "$type": "property",
                "name": "unique",
                "optional": true,
                "text": "`true` if the value of this field is unique amongst all instances. When used with a\n`{@link #cfg!reference reference}` this describes a \"one-to-one\" relationship. It is almost always the case\nthat a `{@link #cfg!unique unique}` field cannot also be {@link #cfg!allowBlank #allowBlank}.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,694,24",
                  "text": "1,695,8,236",
                  "type": "1,694,14",
                  "value": "1,694,31"
                }
              },
              {
                "$type": "property",
                "name": "validators",
                "text": "An array of {@link Ext.data.validator.Validator} for this field. These\n`{@link #cfg!validators validators}` will only be passed a field value to validate.\n",
                "type": "Object[]",
                "src": {
                  "name": "1,702,24",
                  "text": "1,703,8,142",
                  "type": "1,702,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "2,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,118,12",
                  "name": "2,120,0",
                  "text": "2,116,12,125"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "2,1251,37",
                      "text": "2,1251,42,57:2,1252,12,67",
                      "type": "2,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1253,29,48",
                      "type": "2,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1250,12",
                  "name": "2,1255,0",
                  "text": "2,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "2,1338,37",
                      "text": "2,1338,42,57:2,1339,12,66",
                      "type": "2,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1340,29,52",
                      "type": "2,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1337,12",
                  "name": "2,1342,0",
                  "text": "2,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "collate",
                "text": "Compares two values to retrieve their relative position in sort order, taking into account\nany {@link #cfg!sortType #sortType}. Also see {@link #method!compare #compare}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value1",
                    "text": "The first value.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,912,24",
                      "text": "1,912,31,17",
                      "type": "1,912,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value2",
                    "text": "The second value.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,913,24",
                      "text": "1,913,31,18",
                      "type": "1,913,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`-1` if `value1` is less than `value2`. `1` if `value1` is greater than `value2`.\n`0` otherwise.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,914,25,82:1,915,8,15",
                      "type": "1,914,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,917,0",
                  "text": "1,910,8,141"
                }
              },
              {
                "$type": "method",
                "name": "compare",
                "text": "Compares two values to retrieve their relative position in sort order. Also see\n{@link #method!collate #collate}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value1",
                    "text": "The first value.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,933,24",
                      "text": "1,933,31,17",
                      "type": "1,933,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value2",
                    "text": "The second value.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,934,24",
                      "text": "1,934,31,18",
                      "type": "1,934,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`-1` if `value1` is less than `value2`. `1` if `value1` is greater than `value2`.\n`0` otherwise.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,935,25,82:1,936,8,15",
                      "type": "1,935,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,938,0",
                  "text": "1,931,8,98"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,40,21",
                      "text": "3,40,28,19",
                      "type": "3,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "3,38,12",
                  "text": "3,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "convert",
                "text": "A function which converts the value provided by the Reader into the value that will\nbe stored in the record. This method can be overridden by a derived class or set as\na `{@link #cfg!convert #cfg-convert}` config.\n\nIf configured as `{@link null}`, then no conversion will be applied to the raw data property\nwhen this Field is read. This will increase performance. but you must ensure that\nthe data is of the correct type and does not *need* converting.\n\nExample of convert functions:\n\n    function fullName(v, record){\n        return record.data.last + ', ' + record.data.first;\n    }\n\n    function location(v, record){\n        return !record.data.city ? '' : (record.data.city + ', ' + record.data.state);\n    }\n\n    Ext.define('Dude', {\n        extend: 'Ext.data.Model',\n        fields: [\n            {name: 'fullname',  convert: fullName},\n            {name: 'firstname', mapping: 'name.first'},\n            {name: 'lastname',  mapping: 'name.last'},\n            {name: 'city', defaultValue: 'unknown'},\n            'state',\n            {name: 'location',  convert: location}\n        ]\n    });\n\n    // create the data store\n    var store = Ext.create('Ext.data.Store', {\n        model: 'Dude',\n        proxy: {\n            type: 'memory',\n            reader: {\n                type: 'json',\n                rootProperty: 'daRoot',\n                totalProperty: 'total'\n            }\n        }\n    });\n\n    var myData = [\n        { key: 1,\n          name: { first: 'Fat',    last:  'Albert' }\n          // notice no city, state provided in data object\n        },\n        { key: 2,\n          name: { first: 'Barney', last:  'Rubble' },\n          city: 'Bedrock', state: 'Stoneridge'\n        },\n        { key: 3,\n          name: { first: 'Cliff',  last:  'Claven' },\n          city: 'Boston',  state: 'MA'\n        }\n    ];\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The data value as read by the Reader, if undefined will use\nthe configured `{@link #cfg!defaultValue defaultValue}`.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "1,1014,23",
                      "text": "1,1014,29,60:1,1015,8,31",
                      "type": "1,1014,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The data object containing the Model as read so far\nby the Reader. Note that the Model may not be fully populated at this point as the\nfields are read in the order that they are defined.\n{@link Ext.data.Model#cfg!fields Ext.data.Model#cfg-fields} array.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "1,1016,32",
                      "text": "1,1016,39,52:1,1017,8,183",
                      "type": "1,1016,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The converted value for storage in the record.\n",
                    "type": "Mixed",
                    "src": {
                      "text": "1,1020,24,47",
                      "type": "1,1020,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1022,0",
                  "text": "1,955,8,1813"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "2,1626,0",
                  "text": "2,1623,12,132"
                }
              },
              {
                "$type": "method",
                "name": "getAllowBlank",
                "text": "Gets allowBlank for this field. See {@link #cfg!allowBlank #allowBlank}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "allowBlank\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1105,26,11",
                      "type": "1,1105,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1107,0",
                  "text": "1,1104,8,57"
                }
              },
              {
                "$type": "method",
                "name": "getAllowNull",
                "text": "Gets allowNull for this field. See {@link #cfg!allowNull #allowNull}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "allowNull\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1113,26,10",
                      "type": "1,1113,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1115,0",
                  "text": "1,1112,8,55"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1469,29",
                      "text": "2,1469,35,40",
                      "type": "2,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,1470,30",
                      "text": "2,1470,42,60",
                      "type": "2,1470,20",
                      "value": "2,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1471,29,27",
                      "type": "2,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1473,0",
                  "text": "2,1466,12,151"
                }
              },
              {
                "$type": "method",
                "name": "getConvert",
                "text": "Gets converter for this field. See {@link #method!convert #method-convert}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "convert\n",
                    "type": "Function",
                    "src": {
                      "text": "1,1121,27,8",
                      "type": "1,1121,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1123,0",
                  "text": "1,1120,8,60"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "2,1506,12",
                  "name": "2,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getDefaultValue",
                "text": "Gets the defaultValue for this field. See {@link #cfg!defaultValue #defaultValue}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "defaultValue\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1129,25,13",
                      "type": "1,1129,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1131,0",
                  "text": "1,1128,8,65"
                }
              },
              {
                "$type": "method",
                "name": "getDepends",
                "text": "Gets the depends for this field. See {@link #cfg!depends #depends}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "depends\n",
                    "type": "String[]",
                    "src": {
                      "text": "1,1137,27,8",
                      "type": "1,1137,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1139,0",
                  "text": "1,1136,8,55"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1551,29",
                      "text": "2,1551,35,37",
                      "type": "2,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `{@link #cfg!name name}` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "2,1552,35,48:2,1553,12,33",
                      "type": "2,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1555,0",
                  "text": "2,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getMapping",
                "text": "Get the mapping for this field. See {@link #cfg!mapping #mapping}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "mapping\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1145,25,8",
                      "type": "1,1145,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1147,0",
                  "text": "1,1144,8,54"
                }
              },
              {
                "$type": "method",
                "name": "getName",
                "text": "Gets the name for this field. See {@link #cfg!name #name}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "name\n",
                    "type": "String",
                    "src": {
                      "text": "1,1097,25,5",
                      "type": "1,1097,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1099,0",
                  "text": "1,1096,8,49"
                }
              },
              {
                "$type": "method",
                "name": "getPersist",
                "text": "Gets the persist for this field. See {@link #cfg!persist #persist}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "persist\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1162,26,8",
                      "type": "1,1162,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1164,0",
                  "text": "1,1161,8,55"
                }
              },
              {
                "$type": "method",
                "name": "getSortType",
                "text": "Gets the sortType for this field. See {@link #cfg!sortType #sortType}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "sortType\n",
                    "type": "Function",
                    "src": {
                      "text": "1,1170,27,9",
                      "type": "1,1170,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1172,0",
                  "text": "1,1169,8,57"
                }
              },
              {
                "$type": "method",
                "name": "getType",
                "text": "Gets a string representation of the type of this field.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "type\n",
                    "type": "String",
                    "src": {
                      "text": "1,1178,25,5",
                      "type": "1,1178,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1180,0",
                  "text": "1,1177,8,56"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "2,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,1515,12",
                  "name": "2,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasMapping",
                "text": "Checks if this field has a mapping applied.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if this field has a mapping.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1153,26,36",
                      "type": "1,1153,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1155,0",
                  "text": "1,1152,8,44"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,100,20",
                      "text": "3,100,25,34",
                      "type": "3,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,101,22,57:3,102,4,15",
                      "type": "3,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,53,12",
                  "text": "3,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "2,1449,28",
                      "type": "2,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,1450,31,5",
                      "type": "2,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1448,12",
                  "name": "2,1452,0",
                  "text": "2,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "isEqual",
                "text": "Tests whether two values are equal based on this field type.\nThis uses the {@link #method!compare #compare} method to determine equality, so\nthis method should generally not be overridden.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value1",
                    "text": "The first value.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,946,24",
                      "text": "1,946,31,17",
                      "type": "1,946,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value2",
                    "text": "The second value.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,947,24",
                      "text": "1,947,31,18",
                      "type": "1,947,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the values are equal.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,948,26,32",
                      "type": "1,948,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,950,0",
                  "text": "1,943,8,173"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "3,148,20",
                      "text": "3,148,30,71:3,149,4,18",
                      "type": "3,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "3,150,20",
                      "text": "3,150,27,50",
                      "type": "3,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,151,22,56",
                      "type": "3,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,106,12",
                  "text": "3,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "2,1571,28",
                      "type": "2,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "2,1572,28",
                      "type": "2,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1573,29,20",
                      "type": "2,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1574,12",
                  "name": "2,1576,0",
                  "text": "2,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,220,20",
                      "text": "3,220,25,34",
                      "type": "3,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,221,22,57:3,222,4,22",
                      "type": "3,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,155,12",
                  "text": "3,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "serialize",
                "text": "A function which converts the Model's value for this Field into a form which can be used by whatever {@link Ext.data.writer.Writer}\nis being used to sync data with the server.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The Field's value - the value to be serialized.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "1,1029,23",
                      "text": "1,1029,29,48",
                      "type": "1,1029,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record being serialized.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "1,1030,32",
                      "text": "1,1030,39,29",
                      "type": "1,1030,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The string that represents the Field's value.\n",
                    "type": "String",
                    "src": {
                      "text": "1,1031,25,46",
                      "type": "1,1031,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1033,0",
                  "text": "1,1025,8,184"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "2,1478,35",
                      "text": "2,1478,40,69",
                      "type": "2,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1479,29",
                      "text": "2,1479,36,41",
                      "type": "2,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,1480,31,5",
                      "type": "2,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1482,0",
                  "text": "2,1476,12,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "2,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1160,12",
                  "name": "2,1163,0",
                  "text": "2,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "3,235,21,32",
                      "type": "3,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,226,12",
                  "text": "3,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "3,297,21,32",
                      "type": "3,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,239,12",
                  "text": "3,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "2,1589,30",
                      "text": "2,1589,36,44",
                      "type": "2,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,1590,31,5",
                      "type": "2,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,1591,12",
                  "name": "2,1593,0",
                  "text": "2,1587,12,138"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "validate",
                "since": "5.0.0",
                "template": true,
                "text": "Validates the passed value for this field.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to validate.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1038,24",
                      "text": "1,1038,30,23",
                      "type": "1,1038,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "separator",
                    "optional": true,
                    "text": "This string is passed if the caller wants all validation\nmessages concatenated with this string between each. This can be handled as a\n\"falsy\" value because concatenating with no separator is seldom desirable.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1040,25",
                      "text": "1,1040,36,57:1,1041,8,154",
                      "type": "1,1040,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "errors",
                    "optional": true,
                    "text": "This parameter is passed if the caller\nwants all validation results individually added to the collection.\n",
                    "type": "Ext.data.ErrorCollection",
                    "src": {
                      "name": "1,1044,43",
                      "text": "1,1044,51,39:1,1045,8,68",
                      "type": "1,1044,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the value is valid. A string may be returned if\nthe value is not valid, to indicate an error message. Any other non `true` value\nindicates the value is not valid. This method is not implemented by default,\nsubclasses may override it to provide an implementation.\n",
                    "type": "Boolean/String",
                    "src": {
                      "text": "1,1047,33,58:1,1048,8,216",
                      "type": "1,1047,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,1052,8",
                  "name": "1,1056,0",
                  "since": "1,1054,15",
                  "template": "1,1053,8",
                  "text": "1,1036,8,44"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,340,21,50",
                      "type": "3,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,301,12",
                  "text": "3,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "2,1049,13",
                  "name": "2,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1066,12",
                  "name": "2,1062,33",
                  "since": "2,1067,19",
                  "text": "2,1063,12,225",
                  "type": "2,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1076,12",
                  "name": "2,1072,33",
                  "since": "2,1077,19",
                  "text": "2,1073,12,229",
                  "type": "2,1072,23"
                }
              },
              {
                "$type": "property",
                "name": "calculated",
                "readonly": true,
                "text": "This property is `true` if this field has a `{@link #cfg!calculate #cfg-calculate}`\nmethod or a `{@link #method!convert #method-convert}` method that operates on the entire\nrecord as opposed to just the data value. This property is determined from the\n`length` of the `{@link #method!convert #method-convert}` function which means this is\n*not* calculated:\n\n     convert: function (value) {\n         return ...\n     }\n\nWhile this *is* calculated:\n\n     convert: function (value, record) {\n         return ...\n     }\n\n**NOTE:** It is recommended for such fields to use `{@link #cfg!calculate #cfg-calculate}`\nor explicitly specify the fields used by `{@link #method!convert #method-convert}` using\n`{@link #cfg!depends #cfg-depends}`.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,726,28",
                  "readonly": "1,747,8",
                  "text": "1,727,8,696",
                  "type": "1,726,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "3,346,14",
                  "text": "3,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "defaultInvalidMessage",
                "since": "5.0.0",
                "text": "The default message to present for an invalid field.\n",
                "type": "String",
                "src": {
                  "name": "1,370,27",
                  "since": "1,372,15",
                  "text": "1,371,8,53",
                  "type": "1,370,19"
                }
              },
              {
                "$type": "property",
                "name": "definedBy",
                "text": "The class (derived from {@link Ext.data.Model}) that defined this field.\n\n     Ext.define('MyApp.models.Foo', {\n         extend: 'Ext.data.Model',\n\n         fields: [\n             { name: 'bar' }\n         ],\n         ...\n     });\n\n     var barField = MyApp.models.Foo.getField('bar');\n\n     alert(barField.definedBy === MyApp.models.Foo); // alerts 'true'\n\nWhen a field is inherited, this value will reference the class that originally\ndefined the field.\n\n     Ext.define('MyApp.models.Base', {\n         extend: 'Ext.data.Model',\n\n         fields: [\n             { name: 'foo' }\n         ],\n         ...\n     });\n\n     Ext.define('MyApp.models.Derived', {\n         extend: 'MyApp.models.Base',\n\n         fields: [\n             { name: 'bar' }\n         ],\n         ...\n     });\n\n     var fooField = MyApp.models.Derived.getField('foo');\n\n     alert(fooField.definedBy === MyApp.models.Base); // alerts 'true'\n",
                "type": "Ext.Class",
                "src": {
                  "name": "1,388,30",
                  "text": "1,389,8,908",
                  "type": "1,388,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dependents",
                "readonly": true,
                "text": "This array tracks the fields that have indicated this field in their `{@link #cfg!depends depends}`\nlist. If no fields depend on this field, this will be `{@link null}`.\n",
                "type": "Ext.data.field.Field[]",
                "src": {
                  "access": "1,474,8",
                  "name": "1,470,43",
                  "readonly": "1,473,8",
                  "text": "1,471,8,141",
                  "type": "1,470,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1102,12",
                  "name": "2,1100,32",
                  "text": "2,1101,12,69",
                  "type": "2,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "evil",
                "readonly": true,
                "text": "This flag is set to true for fields that have `convert` methods which take the 2nd\nargument (the record) and do not specify a `{@link #cfg!depends depends}` set. Good fields indicate the\nfields on which they depend (if any).\n",
                "type": "Boolean",
                "src": {
                  "access": "1,756,8",
                  "name": "1,752,28",
                  "readonly": "1,757,8",
                  "text": "1,753,8,204",
                  "type": "1,752,19"
                }
              },
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created `{@link Ext.Factory}`.\n",
                "type": "Object",
                "src": {
                  "name": "4,295,28",
                  "text": "4,296,8,128",
                  "type": "4,295,19"
                }
              },
              {
                "$type": "property",
                "name": "identifier",
                "readonly": true,
                "text": "This property is set to `true` if this is an {@link Ext.data.Model#cfg!idProperty Ext.data.Model#idProperty}\nfield.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,762,28",
                  "readonly": "1,765,8",
                  "text": "1,763,8,89",
                  "type": "1,762,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1084,12",
                  "name": "2,1082,32",
                  "readonly": "2,1085,12",
                  "since": "2,1086,19",
                  "text": "2,1083,12,64",
                  "type": "2,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1093,12",
                  "name": "2,1091,32",
                  "readonly": "2,1094,12",
                  "since": "2,1095,19",
                  "text": "2,1092,12,75",
                  "type": "2,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "2,1056,12",
                  "name": "2,1053,32",
                  "readonly": "2,1057,12",
                  "text": "2,1054,12,94",
                  "type": "2,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "ordinal",
                "text": "\nThe position of this field in the {@link Ext.data.Model} in which it was defined.\n",
                "type": "Number",
                "src": {
                  "name": "1,540,27",
                  "text": "1,541,8,83",
                  "type": "1,540,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "3,46,14",
                  "text": "3,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "rank",
                "readonly": true,
                "text": "This is a 1-based value that describes the dependency order of this field. This is\ninitialized to `{@link null}` (falsey) so we can cheaply topo-sort the fields of a class.\n",
                "type": "Number",
                "src": {
                  "access": "1,711,8",
                  "name": "1,708,27",
                  "readonly": "1,712,8",
                  "text": "1,709,8,165",
                  "type": "1,708,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "2,1413,12",
                  "name": "2,1379,34",
                  "text": "2,1380,12,1011",
                  "type": "2,1379,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "stripRe",
                "readonly": true,
                "text": "A regular expression for stripping non-numeric characters from a numeric value.\nThis should be overridden for localization.\n",
                "type": "RegExp",
                "src": {
                  "access": "1,721,8",
                  "name": "1,717,27",
                  "readonly": "1,720,8",
                  "text": "1,718,8,124",
                  "type": "1,717,19"
                }
              },
              {
                "$type": "property",
                "name": "trueRe",
                "optional": true,
                "text": "Values matching this regular expression are considered `true`.\n",
                "src": {
                  "name": "0,14,19",
                  "text": "0,15,8,63"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "2,940,28",
                      "type": "2,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "2,941,32",
                      "text": "2,941,44,49",
                      "type": "2,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,942,12",
                  "inheritable": "2,944,12",
                  "name": "2,946,0",
                  "static": "2,943,12",
                  "text": "2,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "2,464,28",
                      "type": "2,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,461,12",
                  "inheritable": "2,463,12",
                  "name": "2,466,0",
                  "static": "2,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "2,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "2,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,659,12",
                  "inheritable": "2,661,12",
                  "name": "2,665,0",
                  "static": "2,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,522,28",
                      "text": "2,522,36,34",
                      "type": "2,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,523,30",
                      "text": "2,523,46,39",
                      "type": "2,523,20",
                      "value": "2,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "2,524,30",
                      "text": "2,524,45,45:2,525,12,53",
                      "type": "2,524,20",
                      "value": "2,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,527,12",
                  "name": "2,529,0",
                  "static": "2,526,12",
                  "text": "2,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "2,450,28",
                      "type": "2,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,451,31,5",
                      "type": "2,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,453,12",
                  "name": "2,455,0",
                  "static": "2,452,12",
                  "text": "2,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "2,693,30",
                      "text": "2,693,40,33",
                      "type": "2,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "2,694,34",
                      "text": "2,694,42,35",
                      "type": "2,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,695,31,5",
                      "type": "2,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,698,12",
                  "inheritable": "2,697,12",
                  "name": "2,700,0",
                  "static": "2,696,12",
                  "text": "2,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "2,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,810,12",
                  "inheritable": "2,812,12",
                  "name": "2,814,0",
                  "static": "2,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "2,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,824,12",
                  "inheritable": "2,826,12",
                  "name": "2,828,0",
                  "static": "2,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,107,29,22",
                      "type": "2,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,109,12",
                  "name": "2,111,0",
                  "static": "2,108,12",
                  "text": "2,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "2,1018,35",
                      "text": "2,1018,41,63:2,1019,12,43",
                      "type": "2,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "2,1020,35",
                      "text": "2,1020,42,25",
                      "type": "2,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,1022,12",
                  "name": "2,1025,0",
                  "static": "2,1021,12",
                  "text": "2,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "2,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,347,12",
                  "inheritable": "2,349,12",
                  "name": "2,352,0",
                  "static": "2,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "2,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,968,12",
                  "inheritable": "2,970,12",
                  "name": "2,972,0",
                  "static": "2,969,12",
                  "text": "2,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "2,989,29,10",
                      "type": "2,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,991,12",
                  "name": "2,993,0",
                  "static": "2,990,12",
                  "text": "2,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "2,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "2,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,840,12",
                  "inheritable": "2,842,12",
                  "name": "2,844,0",
                  "static": "2,841,12",
                  "text": "2,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "2,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "2,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,424,12",
                  "inheritable": "2,426,12",
                  "name": "2,428,0",
                  "static": "2,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,762,28",
                      "text": "2,762,36,52:2,763,12,66",
                      "type": "2,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "2,764,31,11",
                      "type": "2,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "2,766,12",
                  "name": "2,768,0",
                  "static": "2,765,12",
                  "text": "2,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "2,402,12",
                  "inheritable": "2,404,12",
                  "name": "2,406,0",
                  "static": "2,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "2,395,12",
                  "inheritable": "2,397,12",
                  "name": "2,399,0",
                  "static": "2,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,7,0,0:0,8,0,0",
          "extends": "0,4,0",
          "name": "0,3,0"
        }
      }
    ]
  },
  "version": 1
}