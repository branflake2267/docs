{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/field/Field.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "data.field.auto",
        "alternateClassNames": "Ext.data.Field",
        "extended": "Object",
        "extends": "Object",
        "mixed": "Ext.mixin.Factoryable",
        "mixins": "Ext.mixin.Factoryable",
        "name": "Ext.data.field.Field",
        "requires": "Ext.data.SortTypes,Ext.data.validator.Validator",
        "text": "Fields are used to define the members of a Model. They aren't instantiated directly;\ninstead, when we create a class that extends <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, it automatically\ncreates Field instances for each field configured in a <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>.\nFor example, we might set up a model like this:\n\n    Ext.define('User', {\n        extend: 'Ext.data.Model',\n        fields: [\n            'name', 'email',\n            { name: 'age', type: 'int' },\n            { name: 'gender', type: 'string', defaultValue: 'Unknown' }\n        ]\n    });\n\nFour fields will have been created for the User Model - name, email, age and gender.\nNote that we specified a couple of different formats here; if we only pass in the string\nname of the field (as with name and email), the field is set up with the 'auto' type.\nIt's as if we'd done this instead:\n\n    Ext.define('User', {\n        extend: 'Ext.data.Model',\n        fields: [\n            { name: 'name', type: 'auto' },\n            { name: 'email', type: 'auto' },\n            { name: 'age', type: 'int' },\n            { name: 'gender', type: 'string', defaultValue: 'Unknown' }\n        ]\n    });\n\n# Field Types\n\nFields come in various types. When declaring a field, the `type` property is used to\nspecify the type of `Field` derived class used to manage values.\n\nThe predefined set of types are:\n\n - <a href='#!/api/Ext.data.field.Field'>Ext.data.field.Field</a> (Default, implies no conversion)\n - <a href='#!/api/Ext.data.field.String'>Ext.data.field.String</a>\n - <a href='#!/api/Ext.data.field.Integer'>Ext.data.field.Integer</a>\n - <a href='#!/api/Ext.data.field.Number'>Ext.data.field.Number</a>\n - <a href='#!/api/Ext.data.field.Boolean'>Ext.data.field.Boolean</a>\n - <a href='#!/api/Ext.data.field.Date'>Ext.data.field.Date</a>\n\n# Conversion\n\nWhen reading fields it is often necessary to convert the values received before using\nthem or storing them in records. To handle these cases there is the\n<a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> method. This method is passed the received value (as\nwell as the current record instance, but see below) and it returns the value to carry\nforward.\n\nFor `auto` fields there is no <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> method. This is for\nefficiency. For other field types, there are often `convert` methods. You can provide\na <a href='#!/api/Ext.data.field.Field-cfg-convert'>cfg-convert</a> config when the field is defined like this:\n\n     {\n         name: 'timestamp',\n\n         convert: function (value) {\n             return new Date(value);\n         }\n     }\n\nWhile this can be convenient, see below for details on defining Custom Types as that is\noften a better practice and avoids repeating these functions.\n\nNote that when a <a href='#!/api/Ext.data.field.Field-cfg-defaultValue'>defaultValue</a> is specified, it will also be passed through to\n`convert` (either to the <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> method or to the\n<a href='#!/api/Ext.data.field.Field-cfg-convert'>cfg-convert</a> config)`.\n\n## Calculated Values\n\nIn some cases fields are the result of a calculation from other fields. Historically\nthis was a second role for <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> but that has some short\ncomings. The simpler solution is the <a href='#!/api/Ext.data.field.Field-cfg-calculate'>cfg-calculate</a> config.\n\nValues produced by <a href='#!/api/Ext.data.field.Field-cfg-calculate'>cfg-calculate</a> and <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a>\nare stored in the record as with any other field. In fact, if we define a calculated\n\"firstName\" field and log out all of the data, we'll see this:\n\n    var ed = Ext.create('User', { name: 'Ed Spencer' });\n\n    console.log(ed.data);\n\n    //outputs this:\n    {\n        age: 0,\n        email: \"\",\n        firstName: \"Ed\",  // calculated field\n        gender: \"Unknown\",\n        name: \"Ed Spencer\"\n    }\n\n### Using <a href='#!/api/Ext.data.field.Field-cfg-calculate'>calculate</a>\n\n     {\n         name: 'firstName',\n\n         calculate: function (data) {\n             return data.name.split(' ')[0];\n         }\n     }\n\nUsing <a href='#!/api/Ext.data.field.Field-cfg-calculate'>cfg-calculate</a> is the simplest and safest way to define a\ncalculated field. The most important part of this is that, internally, the code of the\nsupplied function is parsed to extract its dependencies. In this case, the \"name\" field\nis the only dependency. This means that \"firstName\" will only need to be recalculated\nwhen \"name\" is modified.\n\n**Note:** Fields used by the calculate method must be explicitly defined in the\n<a href='#!/api/Ext.data.Model-cfg-fields'>Ext.data.Model#cfg-fields</a> of the model.\n\n### Using `convert`\n\nFollowing is the equivalent technique using <a href='#!/api/Ext.data.field.Field-cfg-convert'>cfg-convert</a>\n\n     {\n         name: 'firstName',\n\n         convert: function (value, record) {\n             return record.get('name').split(' ')[0];\n         },\n\n         depends: [ 'name' ]\n     }\n\nWhen a <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> function accepts a 2nd argument (a reference to\nthe record), it is considered a calculated field. If a <a href='#!/api/Ext.data.field.Field-cfg-depends'>cfg-depends</a>\nconfig is not provided then this field's dependencies are unknown. In this case, the\n<a href='#!/api/Ext.data.field.Field-cfg-depends'>cfg-depends</a> are provided as would be automatically determined with\nthe <a href='#!/api/Ext.data.field.Field-cfg-calculate'>cfg-calculate</a> config.\n\n### Updating\n\nFields modified with the <a href='#!/api/Ext.data.Model-method-set'>Ext.data.Model#set</a> method will have their stored\nvalue set using the convert / calculate method when present.\n\nFor example:\n\n    Ext.define('MyApp.model.Employee', {\n        extend: 'Ext.data.Model',\n        fields: [{\n            name: 'salary',\n            convert: function (val) {\n                var startingBonus = val * .1;\n                return val + startingBonus;\n            }\n        }],\n        convertOnSet: false\n    });\n\n    var tina = Ext.create('MyApp.model.Employee', {\n        salary: 50000\n    });\n\n    console.log(tina.get('salary')); // logs 55000\n\n    tina.set('salary', 60000);\n    console.log(tina.get('salary')); // logs 60000\n\nThis default behavior can be disabled by setting the Model's\n<a href='#!/api/Ext.data.Model-cfg-convertOnSet'>Ext.data.Model#cfg-convertOnSet</a> config to `false`.\n\n**Note:** convertOnSet `false` only prevents the convert / calculate call when the\nset `fieldName` param matches the field's <a href='#!/api/Ext.data.field.Field-cfg-name'>name</a>.  See\n<a href='#!/api/Ext.data.Model-cfg-convertOnSet'>Ext.data.Model#convertOnSet</a> for additional details.\n\n### Dependencies\n\nWhen a field's <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> method processes values from the record\n(vs. just the field's value), it is best to also provide a <a href='#!/api/Ext.data.field.Field-cfg-depends'>depends</a> config as shown\nabove. Fields that provide a <a href='#!/api/Ext.data.field.Field-cfg-calculate'>cfg-calculate</a> method must follow the\nproper form for using fields so that dependencies can be extracted.\n\nCalculated fields are processed after other fields based on their dependencies. Fields\nwith <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> methods that use the provided record that do *not*\nspecify a <a href='#!/api/Ext.data.field.Field-cfg-depends'>cfg-depends</a> config are processed as a group after all other\nfields since such converters can rely on anything in the record. The order of processing\nthese fields with respect to each other is unspecified and should not be relied upon.\n\n# Serialization\n\nTo handle the inverse scenario of `convert` there is the `serialize` method. This\nmethod is called to produce the value to send to a server based on the internal value\nas would be returned from `convert`. In most cases, these methods should \"round trip\"\na value:\n\n     assertEqual(value, field.serialize(field.convert(value)));\n\nBy default, only <a href='#!/api/Ext.data.field.Date'>Ext.data.field.Date</a> fields have a `serialize` method.\nOther types simply send their value unmodified.\n\n# Custom Types\n\nDevelopers may create their own application-specific data types by deriving from this\nclass. This is typically much better than applying multiple configuration values on\nfield instances as these often become repetitive.\n\nTo illustrate, we define a \"time\" field type that stores a time-of-day represented as a\nnumber of minutes since Midnight.\n\n     Ext.define('App.field.Time', {\n         extend: 'Ext.data.field.Field',\n\n         alias: 'data.field.time',\n\n         timeFormat: 'g:i',\n\n         convert: function (value) {\n             if (value && Ext.isString(value)) {\n                 var date = Ext.Date.parse(value, this.timeFormat);\n                 if (!date) {\n                     return null;\n                 }\n                 return (date.getHours() - 1) * 60 + date.getMinutes();\n             }\n             return value;\n         }\n     });\n\n## Validation\n\nCustom field types can override the <a href='#!/api/Ext.data.field.Field-method-validate'>method-validate</a> method or\nprovide a set of <a href='#!/api/Ext.data.field.Field-cfg-validators'>cfg-validators</a>.\n\n     Ext.define('App.field.PhoneNumber', {\n         extend: 'Ext.data.field.Field',\n\n         alias: 'data.field.phonenumber',\n\n         // Match U.S. phone numbers for example purposes\n         validators: {\n             type: 'format',\n             matcher: /\\d{3}\\-\\d{3}\\-\\d{4}/\n         }\n     });\n\nOnce the class is defined, fields can be declared using the new type (based on its\n`alias`) like so:\n\n     Ext.define('App.model.PhoneCall', {\n         fields: [\n             { name: 'startTime', type: 'time' },\n             { name: 'phoneNumber', type: 'phonenumber' }\n         ]\n     });\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "allowBlank",
                "text": "\nUsed for validating a <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>. Defaults to true. An empty value here will cause\n<a href='#!/api/Ext.data.Model'>Ext.data.Model</a>.<a href='#!/api/Ext.data.Model-method-isValid'>Ext.data.Model#isValid</a> to evaluate to false.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,283,8",
                  "name": "0,282,23",
                  "text": "0,284,8,186",
                  "type": "0,282,14"
                }
              },
              {
                "$type": "property",
                "name": "allowNull",
                "text": "\nUse when converting received data into a <a href='#!/api/Ext.data.field.Integer'>Ext.data.field.Integer</a>,\n<a href='#!/api/Ext.data.field.Number'>Ext.data.field.Number</a>, <a href='#!/api/Ext.data.field.Boolean'>Ext.data.field.Boolean</a>\nor <a href='#!/api/Ext.data.field.String'>Ext.data.field.String</a> type. If the value cannot be\nparsed, <a href='#!/api/null'>null</a> will be used if allowNull is true, otherwise a default value for that type will be used:\n\n- for `int` and `float` - `0`.\n- for `string` - `\"\"`.\n- for `bool` - `false`.\n\nNote that when parsing of <a href='#!/api/Ext.data.field.Date'>Ext.data.field.Date</a> type fails, the value will\nbe <a href='#!/api/null'>null</a> regardless of this setting.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,291,23",
                  "text": "0,292,8,538",
                  "type": "0,291,14"
                }
              },
              {
                "$type": "property",
                "name": "calculate",
                "text": "This config defines a simple field calculation function. A calculate method only\nhas access to the record data and should return the value of the calculated field.\nWhen provided in this way, the <a href='#!/api/Ext.data.field.Field-cfg-depends'>depends</a> config is automatically determined by\nparsing the <a href='#!/api/Ext.data.field.Field-cfg-calculate'>calculate</a> function. For example:\n\n     fields: [{\n         name: 'firstName',\n         type: 'string'\n     },{\n         name: 'lastName',\n         type: 'string'\n     },{\n         name: 'fullName',\n         calculate: function (data) {\n             return data.firstName + ' ' + data.lastName;\n         }\n     }]\n\nThe above 'fullName' field is equivalent to:\n\n     {\n         name: 'fullName',\n         convert: function (v, rec) {\n             return rec.get('firstName') + ' ' + rec.get('lastName');\n         },\n         depends: ['firstName', 'lastName']\n     }\n\nThe restrictions on form for a <a href='#!/api/Ext.data.field.Field-cfg-calculate'>calculate</a> method are that the accesses to field\nvalues must match the following regular expression (case insensitive):\n\n     data.([a-z_][a-z0-9_]*)\n     // where 'data' is the param passed to the calculate method\n\nThe only advantage of a <a href='#!/api/Ext.data.field.Field-cfg-calculate'>calculate</a> method over a `convert` method is automatic\ndetermination of <a href='#!/api/Ext.data.field.Field-cfg-depends'>depends</a>.\n\n**Note:** The use of calculate and <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> are exclusive.  The\ncalculate method will override the convert method if both are configured.\n\n**Note:** Fields used by the calculate method must be explicitly defined in the\n<a href='#!/api/Ext.data.Model-cfg-fields'>Ext.data.Model#cfg-fields</a> of the model.\n",
                "type": "Function",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "An object with all values for each field in the parent\nmodel.  See <a href='#!/api/Ext.data.Model-method-getData'>Ext.data.Model#getData</a>.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,352,24",
                      "text": "0,352,29,55:0,353,8,52",
                      "type": "0,352,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "value The value of the calculated field\n",
                    "type": "Mixed",
                    "src": {
                      "text": "0,354,24,40",
                      "type": "0,354,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,308,24",
                  "text": "0,309,8,1471",
                  "type": "0,308,14"
                }
              },
              {
                "$type": "property",
                "name": "convert",
                "text": "If specified this config overrides the <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> method. See\nalso <a href='#!/api/Ext.data.field.Field-cfg-calculate'>cfg-calculate</a> for simple field calculations.\n\n**Note:** The use of <a href='#!/api/Ext.data.field.Field-cfg-calculate'>calculate</a> and convert are exclusive.  The calculate\nmethod will override the convert method if both are configured.\n",
                "type": "Function",
                "src": {
                  "name": "0,358,24",
                  "text": "0,359,8,303",
                  "type": "0,358,14"
                }
              },
              {
                "$type": "property",
                "name": "critical",
                "text": "A critical field is a field that must always be sent to the server even if it has\nnot changed. The most common example of such a field is the \"id\" of a record (see\n<a href='#!/api/Ext.data.Model-cfg-idProperty'>Ext.data.Model#idProperty</a> but the <a href='#!/api/Ext.data.Model-cfg-versionProperty'>Ext.data.Model#versionProperty</a>\nis similarly a <a href='#!/api/Ext.data.field.Field-cfg-critical'>critical</a> field.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,367,23",
                  "text": "0,368,8,282",
                  "type": "0,367,14"
                }
              },
              {
                "$type": "property",
                "name": "defaultValue",
                "optional": true,
                "text": "\nThe default value used when the creating an instance from a raw data object,\nand the property referenced by the <a href='#!/api/Ext.data.field.Field-cfg-mapping'>Ext.data.field.Field#mapping</a>\ndoes not exist in that data object.\n\nThe value <a href='#!/api/undefined'>undefined</a> prevents defaulting in a value.\n",
                "type": "Object",
                "value": "undefined",
                "src": {
                  "name": "0,383,23",
                  "text": "0,384,8,251",
                  "type": "0,383,14",
                  "value": "0,383,36"
                }
              },
              {
                "$type": "property",
                "name": "depends",
                "optional": true,
                "text": "The field name or names within the <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> on which the value\nof this field depends, and from which a new value may be calculated. These values\nare the values used by the `convert` method. If you do not have a `convert` method\nthen this config should not be specified.\n\nBefore using this config you should consider if using a <a href='#!/api/Ext.data.field.Field-cfg-calculate'>calculate</a> method instead\nof a `convert` method would be simpler.\n\nWhenever any of the named fields are set using the <a href='#!/api/Ext.data.Model-method-set'>Ext.data.Model#set</a>\nmethod, this fields will have its `convert` method called passing the\n<a href='#!/api/Ext.data.Model'>Ext.data.Model</a> so that the dependent value can be calculated from\nall fields which it needs.\n\nFor example, to display a person's full name, using two separate `firstName` and\n`lastName` fields, configure the name field like this:\n\n    {\n        name: 'name',\n\n        // Will be called whenever forename or surname fields are set\n        convert: function (v, rec) {\n            return rec.get('firstName') + ' ' + rec.get('lastName');\n        },\n\n        depends: [ 'firstName', 'lastName' ],\n\n        // It should not be returned to the server - it's not a database field\n        persist: false\n    }\n\nNote that if you do not want the calculated field to be part of the field set sent\nback to the server when the store is synchronized, you should configure the field\nwith <a href='#!/api/Ext.data.field.Field-cfg-persist'>persist</a> set to `false`.\n",
                "type": "String/String[]",
                "src": {
                  "name": "0,438,32",
                  "text": "0,439,8,1382",
                  "type": "0,438,14"
                }
              },
              {
                "$type": "property",
                "name": "mapping",
                "text": "\n(Optional) A path expression for use by the <a href='#!/api/Ext.data.reader.Reader'>Ext.data.reader.Reader</a> implementation that is creating the\n<a href='#!/api/Ext.data.Model'>Ext.data.Model</a> to extract the Field value from the data object. If the path expression is the same\nas the field name, the mapping may be omitted. A function may be passed to do complex data extraction. The examples\nbelow are simple just to demonstrate the capability, typically, a function would not be used to extract such\nsimple data.\n\nThe form of the mapping expression depends on the Reader being used.\n\n- <a href='#!/api/Ext.data.reader.Json'>Ext.data.reader.Json</a>\n\n  The mapping is a string containing the javascript expression to reference the data from an element of the data\n  item's <a href='#!/api/Ext.data.reader.Json-cfg-rootProperty'>Ext.data.reader.Json#cfg-rootProperty</a> Array. Defaults to the field name. If a function is passed,\n  a single argument is received which contains the raw json object:\n\n      // Server returns [{\"name\": \"Foo\", \"age\": 1}, {\"name\": \"Bar\", \"age\": 2}]\n      mapping: function(data) {\n          return data.name;\n      }\n\n- <a href='#!/api/Ext.data.reader.Xml'>Ext.data.reader.Xml</a>\n\n  The mapping is an <a href='#!/api/Ext.dom.Query'>Ext.DomQuery</a> path to the data item relative to the DOM element that represents the\n  <a href='#!/api/Ext.data.reader.Xml-cfg-record'>Ext.data.reader.Xml#record</a>. Defaults to the field name. If a function is passed, a single argument\n  is received which contains the record node:\n\n      // Server returns <Root><Person><Name>Foo</Name><Age>1</Age></Person><Person><Name>Bar</Name><Age>2</Age></Person></Root>\n      mapping: function(data) {\n          return data.firstChild.textContent;\n      }\n\n- <a href='#!/api/Ext.data.reader.Array'>Ext.data.reader.Array</a>\n\n  The mapping is a number indicating the Array index of the field's value. Defaults to the field specification's\n  Array position. If a function is passed, a single argument is received which contains the child array.\n\n      // Server returns [[\"Foo\", 1], [\"Bar\", 2]]\n      mapping: function(data) {\n          return data[0];\n      }\n\nIf a more complex value extraction strategy is required, then configure the Field with a <a href='#!/api/Ext.data.field.Field-cfg-convert'>cfg-convert</a>\nfunction. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to\nreturn the desired data.\n",
                "type": "String/Number/Function",
                "src": {
                  "name": "0,485,38",
                  "text": "0,486,8,2158",
                  "type": "0,485,14"
                }
              },
              {
                "$type": "property",
                "name": "name",
                "text": "\nThe name by which the field is referenced within the Model. This is referenced by,\nfor example, the `dataIndex` property in column definition objects passed to\n<a href='#!/api/Ext.grid.property.HeaderContainer'>Ext.grid.property.HeaderContainer</a>.\n\nNote: In the simplest case, if no properties other than <a href='#!/api/Ext.data.field.Field-cfg-name'>name</a> are required, a\nfield definition may consist of just a String for the field name.\n",
                "type": "String",
                "src": {
                  "name": "0,534,22",
                  "text": "0,535,8,350",
                  "type": "0,534,14"
                }
              },
              {
                "$type": "property",
                "name": "persist",
                "optional": true,
                "text": "\nFalse to exclude this field from the <a href='#!/api/Ext.data.Model-property-modified'>Ext.data.Model#modified</a> fields in a\nrecord. This will also exclude the field from being written using a\n<a href='#!/api/Ext.data.writer.Writer'>Ext.data.writer.Writer</a>. This option is useful when fields are used to keep\nstate on the client but do not need to be persisted to the server.\n\nDefaults to `false` for <a href='#!/api/Ext.data.field.Field-property-calculated'>calculated</a> fields and `true` otherwise.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,553,24",
                  "text": "0,554,8,367",
                  "type": "0,553,14"
                }
              },
              {
                "$type": "property",
                "name": "reference",
                "optional": true,
                "text": "The <a href='#!/api/Ext.data.Model-property-entityName'>Ext.data.Model#entityName</a> of the entity referenced by this field.\nIn most databases, this relationship is represented by a \"foreign key\". That is, a\nvalue for such a field matches the value of the <a href='#!/api/Ext.data.Model-cfg-idProperty'>Ext.data.Model#idProperty</a>\nfor an entity of this type.\n\n     Ext.define('MyApp.models.Organization', {\n         extend: 'Ext.data.Model',\n         ...\n     });\n\n     Ext.define('MyApp.models.User', {\n         extend: 'Ext.data.Model',\n\n         fields: [\n             { name: 'organizationId', reference: 'Organization' }\n         ],\n         ...\n     });\n\nIf a <a href='#!/api/Ext.data.field.Field-cfg-reference'>reference</a> is not nullable, set the <a href='#!/api/Ext.data.field.Field-cfg-allowBlank'>Ext.data.field.Field#allowBlank</a> property\nto false.\n\n     Ext.define('MyApp.models.User', {\n         extend: 'Ext.data.Model',\n\n         fields: [\n             { name: 'organizationId', reference: 'Organization', allowBlank: false }\n         ],\n         ...\n     });\n\nIf the name of the generated <a href='#!/api/Ext.data.schema.Association'>Ext.data.schema.Association</a> or other aspects\nneed to be specified, the <a href='#!/api/Ext.data.field.Field-cfg-reference'>reference</a> can be an object. The following usage shows\nwhat would be generated by default given the above examples using the string form.\n\n     Ext.define('MyApp.models.User', {\n         extend: 'Ext.data.Model',\n\n         fields: [{\n             name: 'organizationId',\n             reference: {\n                 type: 'Organization',\n                 association: 'UsersByOrganization',\n                 role: 'organization',\n                 inverse: 'users'\n             }\n         }],\n         ...\n     });\n\nFinally, a <a href='#!/api/Ext.data.field.Field-cfg-reference'>reference</a> can also describe ownership between the entities. By default,\nno ownership relationship is assumed. If, however, the User entities are owned by\ntheir Organization, we could say this:\n\n     Ext.define('MyApp.models.User', {\n         extend: 'Ext.data.Model',\n\n         fields: [{\n             name: 'organizationId',\n             reference: {\n                 parent: 'Organization' // Organization is the parent of User\n             }\n         }],\n         ...\n     });\n",
                "type": "String/Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "type",
                    "text": "The type which this field references. This is the value set by the string form of\n<a href='#!/api/Ext.data.field.Field-cfg-reference'>reference</a>. If the referenced entity has an ownership relationship this field\nshould be omitted and `reference.parent` or `reference.child` should be specified\ninstead.\n",
                    "type": "String",
                    "src": {
                      "name": "0,632,32",
                      "text": "0,633,8,253",
                      "type": "0,632,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "association",
                    "optional": true,
                    "text": "The name of the association. By default, the name of the association is the\ncapitalized `inverse` plus \"By\" plus the capitalized `role`.\n",
                    "type": "String",
                    "src": {
                      "name": "0,638,33",
                      "text": "0,639,8,138",
                      "type": "0,638,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "child",
                    "optional": true,
                    "text": "Set this property instead of `reference.type` to indicate that the referenced entity\nis an owned child of this entity. That is, the <a href='#!/api/Ext.data.field.Field-cfg-reference'>reference</a> entity should be deleted\nwhen this entity is deleted.\n",
                    "type": "String",
                    "src": {
                      "name": "0,642,33",
                      "text": "0,643,8,199",
                      "type": "0,642,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "parent",
                    "optional": true,
                    "text": "Set this property instead of `reference.type` to indicate that the referenced entity\nis the owning parent of this entity. That is, this entity should be deleted when the\n<a href='#!/api/Ext.data.field.Field-cfg-reference'>reference</a> entity is deleted.\n",
                    "type": "String",
                    "src": {
                      "name": "0,647,33",
                      "text": "0,648,8,202",
                      "type": "0,647,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "role",
                    "optional": true,
                    "text": "The name of the role played by the referenced entity. By default, this is the field\nname (minus its \"Id\" suffix if present).\n",
                    "type": "String",
                    "src": {
                      "name": "0,652,33",
                      "text": "0,653,8,126",
                      "type": "0,652,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "inverse",
                    "optional": true,
                    "text": "The name of the inverse role (of this entity with respect to the <a href='#!/api/Ext.data.field.Field-cfg-reference'>reference</a>\nentity). By default, this is the <a href='#!/api/Ext.util.Inflector-method-pluralize'>Ext.util.Inflector#pluralize</a>\nname of this entity, unless this <a href='#!/api/Ext.data.field.Field-cfg-reference'>reference</a> is <a href='#!/api/Ext.data.field.Field-cfg-unique'>unique</a>, in which case the default\nname is the <a href='#!/api/Ext.util.Inflector-method-singularize'>Ext.util.Inflector#singularize</a> name of this entity.\n\nThis config may also be an object containing a role, getter, or setter.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "0,656,40",
                      "text": "0,657,8,400",
                      "type": "0,656,14"
                    }
                  }
                ],
                "src": {
                  "name": "0,565,30",
                  "text": "0,566,8,2026",
                  "type": "0,565,14"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "#method-serialize",
                "name": "serialize",
                "type": "Function",
                "src": {
                  "inheritdoc": "0,668,8",
                  "name": "0,667,24",
                  "type": "0,667,14"
                }
              },
              {
                "$type": "property",
                "name": "sortType",
                "text": "\nA function which converts a Field's value to a comparable value in order to ensure\ncorrect sort ordering.\n\nPredefined functions are provided in <a href='#!/api/Ext.data.SortTypes'>Ext.data.SortTypes</a>. A custom sort example:\n\n    // current sort     after sort we want\n    // +-+------+          +-+------+\n    // |1|First |          |1|First |\n    // |2|Last  |          |3|Second|\n    // |3|Second|          |2|Last  |\n    // +-+------+          +-+------+\n\n    sortType: function(value) {\n       switch (value.toLowerCase()) // native toLowerCase():\n       {\n          case 'first': return 1;\n          case 'second': return 2;\n          default: return 3;\n       }\n    }\n\nMay also be set to a String value, corresponding to one of the named sort types in\n<a href='#!/api/Ext.data.SortTypes'>Ext.data.SortTypes</a>.\n",
                "type": "Function/String",
                "src": {
                  "name": "0,672,31",
                  "text": "0,673,8,758",
                  "type": "0,672,14"
                }
              },
              {
                "$type": "property",
                "name": "unique",
                "optional": true,
                "text": "`true` if the value of this field is unique amongst all instances. When used with a\n<a href='#!/api/Ext.data.field.Field-cfg-reference'>reference</a> this describes a \"one-to-one\" relationship. It is almost always the case\nthat a <a href='#!/api/Ext.data.field.Field-cfg-unique'>unique</a> field cannot also be <a href='#!/api/Ext.data.field.Field-cfg-allowBlank'>allowBlank</a>.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,700,24",
                  "text": "0,701,8,236",
                  "type": "0,700,14",
                  "value": "0,700,31"
                }
              },
              {
                "$type": "property",
                "name": "validators",
                "text": "An array of <a href='#!/api/Ext.data.validator.Validator'>Ext.data.validator.Validator</a> for this field. These\n<a href='#!/api/Ext.data.field.Field-cfg-validators'>validators</a> will only be passed a field value to validate.\n",
                "type": "Object[]",
                "src": {
                  "name": "0,708,24",
                  "text": "0,709,8,142",
                  "type": "0,708,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "collate",
                "text": "Compares two values to retrieve their relative position in sort order, taking into account\nany <a href='#!/api/Ext.data.field.Field-cfg-sortType'>sortType</a>. Also see <a href='#!/api/Ext.data.field.Field-method-compare'>compare</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value1",
                    "text": "The first value.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,918,24",
                      "text": "0,918,31,17",
                      "type": "0,918,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value2",
                    "text": "The second value.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,919,24",
                      "text": "0,919,31,18",
                      "type": "0,919,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`-1` if `value1` is less than `value2`. `1` if `value1` is greater than `value2`.\n`0` otherwise.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,920,25,82:0,921,8,15",
                      "type": "0,920,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,923,0",
                  "text": "0,916,8,141"
                }
              },
              {
                "$type": "method",
                "name": "compare",
                "text": "Compares two values to retrieve their relative position in sort order. Also see\n<a href='#!/api/Ext.data.field.Field-method-collate'>collate</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value1",
                    "text": "The first value.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,939,24",
                      "text": "0,939,31,17",
                      "type": "0,939,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value2",
                    "text": "The second value.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,940,24",
                      "text": "0,940,31,18",
                      "type": "0,940,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`-1` if `value1` is less than `value2`. `1` if `value1` is greater than `value2`.\n`0` otherwise.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,941,25,82:0,942,8,15",
                      "type": "0,941,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,944,0",
                  "text": "0,937,8,98"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "convert",
                "text": "A function which converts the value provided by the Reader into the value that will\nbe stored in the record. This method can be overridden by a derived class or set as\na <a href='#!/api/Ext.data.field.Field-cfg-convert'>cfg-convert</a> config.\n\nIf configured as <a href='#!/api/null'>null</a>, then no conversion will be applied to the raw data property\nwhen this Field is read. This will increase performance. but you must ensure that\nthe data is of the correct type and does not *need* converting.\n\nExample of convert functions:\n\n    function fullName(v, record){\n        return record.data.last + ', ' + record.data.first;\n    }\n\n    function location(v, record){\n        return !record.data.city ? '' : (record.data.city + ', ' + record.data.state);\n    }\n\n    Ext.define('Dude', {\n        extend: 'Ext.data.Model',\n        fields: [\n            {name: 'fullname',  convert: fullName},\n            {name: 'firstname', mapping: 'name.first'},\n            {name: 'lastname',  mapping: 'name.last'},\n            {name: 'city', defaultValue: 'unknown'},\n            'state',\n            {name: 'location',  convert: location}\n        ]\n    });\n\n    // create the data store\n    var store = Ext.create('Ext.data.Store', {\n        model: 'Dude',\n        proxy: {\n            type: 'memory',\n            reader: {\n                type: 'json',\n                rootProperty: 'daRoot',\n                totalProperty: 'total'\n            }\n        }\n    });\n\n    var myData = [\n        { key: 1,\n          name: { first: 'Fat',    last:  'Albert' }\n          // notice no city, state provided in data object\n        },\n        { key: 2,\n          name: { first: 'Barney', last:  'Rubble' },\n          city: 'Bedrock', state: 'Stoneridge'\n        },\n        { key: 3,\n          name: { first: 'Cliff',  last:  'Claven' },\n          city: 'Boston',  state: 'MA'\n        }\n    ];\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The data value as read by the Reader, if undefined will use\nthe configured <a href='#!/api/Ext.data.field.Field-cfg-defaultValue'>defaultValue</a>.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,1020,23",
                      "text": "0,1020,29,60:0,1021,8,31",
                      "type": "0,1020,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The data object containing the Model as read so far\nby the Reader. Note that the Model may not be fully populated at this point as the\nfields are read in the order that they are defined.\n<a href='#!/api/Ext.data.Model-cfg-fields'>Ext.data.Model#cfg-fields</a> array.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,1022,32",
                      "text": "0,1022,39,52:0,1023,8,183",
                      "type": "0,1022,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The converted value for storage in the record.\n",
                    "type": "Mixed",
                    "src": {
                      "text": "0,1026,24,47",
                      "type": "0,1026,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1028,0",
                  "text": "0,961,8,1813"
                }
              },
              {
                "$type": "method",
                "name": "getAllowBlank",
                "text": "Gets allowBlank for this field. See <a href='#!/api/Ext.data.field.Field-cfg-allowBlank'>allowBlank</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "allowBlank\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1111,26,11",
                      "type": "0,1111,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1113,0",
                  "text": "0,1110,8,57"
                }
              },
              {
                "$type": "method",
                "name": "getAllowNull",
                "text": "Gets allowNull for this field. See <a href='#!/api/Ext.data.field.Field-cfg-allowNull'>allowNull</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "allowNull\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1119,26,10",
                      "type": "0,1119,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1121,0",
                  "text": "0,1118,8,55"
                }
              },
              {
                "$type": "method",
                "name": "getConvert",
                "text": "Gets converter for this field. See <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "convert\n",
                    "type": "Function",
                    "src": {
                      "text": "0,1127,27,8",
                      "type": "0,1127,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1129,0",
                  "text": "0,1126,8,60"
                }
              },
              {
                "$type": "method",
                "name": "getDefaultValue",
                "text": "Gets the defaultValue for this field. See <a href='#!/api/Ext.data.field.Field-cfg-defaultValue'>defaultValue</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "defaultValue\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1135,25,13",
                      "type": "0,1135,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1137,0",
                  "text": "0,1134,8,65"
                }
              },
              {
                "$type": "method",
                "name": "getDepends",
                "text": "Gets the depends for this field. See <a href='#!/api/Ext.data.field.Field-cfg-depends'>depends</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "depends\n",
                    "type": "String[]",
                    "src": {
                      "text": "0,1143,27,8",
                      "type": "0,1143,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1145,0",
                  "text": "0,1142,8,55"
                }
              },
              {
                "$type": "method",
                "name": "getMapping",
                "text": "Get the mapping for this field. See <a href='#!/api/Ext.data.field.Field-cfg-mapping'>mapping</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "mapping\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1151,25,8",
                      "type": "0,1151,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1153,0",
                  "text": "0,1150,8,54"
                }
              },
              {
                "$type": "method",
                "name": "getName",
                "text": "Gets the name for this field. See <a href='#!/api/Ext.data.field.Field-cfg-name'>name</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "name\n",
                    "type": "String",
                    "src": {
                      "text": "0,1103,25,5",
                      "type": "0,1103,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1105,0",
                  "text": "0,1102,8,49"
                }
              },
              {
                "$type": "method",
                "name": "getPersist",
                "text": "Gets the persist for this field. See <a href='#!/api/Ext.data.field.Field-cfg-persist'>persist</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "persist\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1168,26,8",
                      "type": "0,1168,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1170,0",
                  "text": "0,1167,8,55"
                }
              },
              {
                "$type": "method",
                "name": "getSortType",
                "text": "Gets the sortType for this field. See <a href='#!/api/Ext.data.field.Field-cfg-sortType'>sortType</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "sortType\n",
                    "type": "Function",
                    "src": {
                      "text": "0,1176,27,9",
                      "type": "0,1176,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1178,0",
                  "text": "0,1175,8,57"
                }
              },
              {
                "$type": "method",
                "name": "getType",
                "text": "Gets a string representation of the type of this field.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "type\n",
                    "type": "String",
                    "src": {
                      "text": "0,1184,25,5",
                      "type": "0,1184,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1186,0",
                  "text": "0,1183,8,56"
                }
              },
              {
                "$type": "method",
                "name": "hasMapping",
                "text": "Checks if this field has a mapping applied.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if this field has a mapping.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1159,26,36",
                      "type": "0,1159,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1161,0",
                  "text": "0,1158,8,44"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.data.field.Field-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isEqual",
                "text": "Tests whether two values are equal based on this field type.\nThis uses the <a href='#!/api/Ext.data.field.Field-method-compare'>compare</a> method to determine equality, so\nthis method should generally not be overridden.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value1",
                    "text": "The first value.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,952,24",
                      "text": "0,952,31,17",
                      "type": "0,952,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value2",
                    "text": "The second value.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,953,24",
                      "text": "0,953,31,18",
                      "type": "0,953,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the values are equal.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,954,26,32",
                      "type": "0,954,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,956,0",
                  "text": "0,949,8,173"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.data.field.Field-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.data.field.Field-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.data.field.Field-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "serialize",
                "text": "A function which converts the Model's value for this Field into a form which can be used by whatever <a href='#!/api/Ext.data.writer.Writer'>Ext.data.writer.Writer</a>\nis being used to sync data with the server.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The Field's value - the value to be serialized.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,1035,23",
                      "text": "0,1035,29,48",
                      "type": "0,1035,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record being serialized.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,1036,32",
                      "text": "0,1036,39,29",
                      "type": "0,1036,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The string that represents the Field's value.\n",
                    "type": "String",
                    "src": {
                      "text": "0,1037,25,46",
                      "type": "0,1037,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1039,0",
                  "text": "0,1031,8,184"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.data.field.Field-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.data.field.Field-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.data.field.Field-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.data.field.Field-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "validate",
                "since": "5.0.0",
                "template": true,
                "text": "Validates the passed value for this field.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to validate.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1044,24",
                      "text": "0,1044,30,23",
                      "type": "0,1044,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "separator",
                    "optional": true,
                    "text": "This string is passed if the caller wants all validation\nmessages concatenated with this string between each. This can be handled as a\n\"falsy\" value because concatenating with no separator is seldom desirable.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1046,25",
                      "text": "0,1046,36,57:0,1047,8,154",
                      "type": "0,1046,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "errors",
                    "optional": true,
                    "text": "This parameter is passed if the caller\nwants all validation results individually added to the collection.\n",
                    "type": "Ext.data.ErrorCollection",
                    "src": {
                      "name": "0,1050,43",
                      "text": "0,1050,51,39:0,1051,8,68",
                      "type": "0,1050,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the value is valid. A string may be returned if\nthe value is not valid, to indicate an error message. Any other non `true` value\nindicates the value is not valid. This method is not implemented by default,\nsubclasses may override it to provide an implementation.\n",
                    "type": "Boolean/String",
                    "src": {
                      "text": "0,1053,33,58:0,1054,8,216",
                      "type": "0,1053,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,1058,8",
                  "name": "0,1062,0",
                  "since": "0,1060,15",
                  "template": "0,1059,8",
                  "text": "0,1042,8,44"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.data.field.Field-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.data.field.Field-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.data.field.Field-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.data.field.Field-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.data.field.Field-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.data.field.Field-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.data.field.Field-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.data.field.Field-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.data.field.Field-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.data.field.Field-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "calculated",
                "readonly": true,
                "text": "This property is `true` if this field has a <a href='#!/api/Ext.data.field.Field-cfg-calculate'>cfg-calculate</a>\nmethod or a <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> method that operates on the entire\nrecord as opposed to just the data value. This property is determined from the\n`length` of the <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> function which means this is\n*not* calculated:\n\n     convert: function (value) {\n         return ...\n     }\n\nWhile this *is* calculated:\n\n     convert: function (value, record) {\n         return ...\n     }\n\n**NOTE:** It is recommended for such fields to use <a href='#!/api/Ext.data.field.Field-cfg-calculate'>cfg-calculate</a>\nor explicitly specify the fields used by <a href='#!/api/Ext.data.field.Field-method-convert'>method-convert</a> using\n<a href='#!/api/Ext.data.field.Field-cfg-depends'>cfg-depends</a>.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,732,28",
                  "readonly": "0,753,8",
                  "text": "0,733,8,696",
                  "type": "0,732,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.data.field.Field-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "defaultInvalidMessage",
                "since": "5.0.0",
                "text": "The default message to present for an invalid field.\n",
                "type": "String",
                "src": {
                  "name": "0,376,27",
                  "since": "0,378,15",
                  "text": "0,377,8,53",
                  "type": "0,376,19"
                }
              },
              {
                "$type": "property",
                "name": "definedBy",
                "text": "The class (derived from <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>) that defined this field.\n\n     Ext.define('MyApp.models.Foo', {\n         extend: 'Ext.data.Model',\n\n         fields: [\n             { name: 'bar' }\n         ],\n         ...\n     });\n\n     var barField = MyApp.models.Foo.getField('bar');\n\n     alert(barField.definedBy === MyApp.models.Foo); // alerts 'true'\n\nWhen a field is inherited, this value will reference the class that originally\ndefined the field.\n\n     Ext.define('MyApp.models.Base', {\n         extend: 'Ext.data.Model',\n\n         fields: [\n             { name: 'foo' }\n         ],\n         ...\n     });\n\n     Ext.define('MyApp.models.Derived', {\n         extend: 'MyApp.models.Base',\n\n         fields: [\n             { name: 'bar' }\n         ],\n         ...\n     });\n\n     var fooField = MyApp.models.Derived.getField('foo');\n\n     alert(fooField.definedBy === MyApp.models.Base); // alerts 'true'\n",
                "type": "Ext.Class",
                "src": {
                  "name": "0,394,30",
                  "text": "0,395,8,908",
                  "type": "0,394,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dependents",
                "readonly": true,
                "text": "This array tracks the fields that have indicated this field in their <a href='#!/api/Ext.data.field.Field-cfg-depends'>depends</a>\nlist. If no fields depend on this field, this will be <a href='#!/api/null'>null</a>.\n",
                "type": "Ext.data.field.Field[]",
                "src": {
                  "access": "0,480,8",
                  "name": "0,476,43",
                  "readonly": "0,479,8",
                  "text": "0,477,8,141",
                  "type": "0,476,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "evil",
                "readonly": true,
                "text": "This flag is set to true for fields that have `convert` methods which take the 2nd\nargument (the record) and do not specify a <a href='#!/api/Ext.data.field.Field-cfg-depends'>depends</a> set. Good fields indicate the\nfields on which they depend (if any).\n",
                "type": "Boolean",
                "src": {
                  "access": "0,762,8",
                  "name": "0,758,28",
                  "readonly": "0,763,8",
                  "text": "0,759,8,204",
                  "type": "0,758,19"
                }
              },
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "2,295,28",
                  "text": "2,296,8,128",
                  "type": "2,295,19"
                }
              },
              {
                "$type": "property",
                "name": "identifier",
                "readonly": true,
                "text": "This property is set to `true` if this is an <a href='#!/api/Ext.data.Model-cfg-idProperty'>Ext.data.Model#idProperty</a>\nfield.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,768,28",
                  "readonly": "0,771,8",
                  "text": "0,769,8,89",
                  "type": "0,768,19"
                }
              },
              {
                "$type": "property",
                "name": "ordinal",
                "text": "\nThe position of this field in the <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> in which it was defined.\n",
                "type": "Number",
                "src": {
                  "name": "0,546,27",
                  "text": "0,547,8,83",
                  "type": "0,546,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "rank",
                "readonly": true,
                "text": "This is a 1-based value that describes the dependency order of this field. This is\ninitialized to <a href='#!/api/null'>null</a> (falsey) so we can cheaply topo-sort the fields of a class.\n",
                "type": "Number",
                "src": {
                  "access": "0,717,8",
                  "name": "0,714,27",
                  "readonly": "0,718,8",
                  "text": "0,715,8,165",
                  "type": "0,714,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "stripRe",
                "readonly": true,
                "text": "A regular expression for stripping non-numeric characters from a numeric value.\nThis should be overridden for localization.\n",
                "type": "RegExp",
                "src": {
                  "access": "0,727,8",
                  "name": "0,723,27",
                  "readonly": "0,726,8",
                  "text": "0,724,8,124",
                  "type": "0,723,19"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,261,0",
          "alternateClassNames": "0,259,0",
          "mixins": "0,251,0",
          "name": "0,249,0",
          "requires": "0,255,0,0:0,256,0,0",
          "text": "0,2,4,8737"
        }
      }
    ]
  },
  "version": 1
}