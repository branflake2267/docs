{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/identifier/Generator.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "data.identifier.default",
        "mixins": "Ext.mixin.Factoryable",
        "name": "Ext.data.identifier.Generator",
        "text": "This class is a base for all id generators. It also provides lookup of id generators by\ntheir id.\n\nGenerally, id generators are used to generate a primary key for new model instances. There\nare different approaches to solving this problem, so this mechanism has both simple use\ncases and is open to custom implementations. A <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> requests id generation\nusing the <a href='#!/api/Ext.data.Model-cfg-identifier'>Ext.data.Model#identifier</a> property.\n\nThe following types of `identifiers` are provided:\n\n  * <a href='#!/api/Ext.data.identifier.Sequential'>Ext.data.identifier.Sequential</a>\n  * <a href='#!/api/Ext.data.identifier.Negative'>Ext.data.identifier.Negative</a>\n  * <a href='#!/api/Ext.data.identifier.Uuid'>Ext.data.identifier.Uuid</a>\n\nIn most cases (other than `uuid`), the server is the only party that can generate\nauthoritative id values. This means that any id generated by an `identifier` should be\nconsider \"provisional\" and must eventually be reconciled with the server. This makes a\n`uuid` very attractive as an `identifier` because they are designed to be generated in\na distributed manner and therefore never require reconciliation.\n\nIt is common for id values to be generated as increasing integer values (1, 2, etc.) by\nthe server when records are inserted. A <a href='#!/api/Ext.data.identifier.Negative'>Ext.data.identifier.Negative</a>\n`identifier` may be useful as it generates client-side values of -1, -2, etc.. These\nvalues are of the same data type (integer) and so can typically be read by servers\nusing typed languages (such as Java or C#) and easily recognized as provisional.\n\nIn the end, the choice of `identifier` strategy requires agreement between client and\nserver.\n\n# Identity, Type and Shared Generators\n\nIt is often desirable to share Generators to ensure uniqueness or common configuration.\nThis is done by giving Generator instances an id property by which they can be looked\nup using the <a href='#!/api/Ext.Factory-dataIdentifier'>dataIdentifier</a> method. To configure two <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> classes\nto share one <a href='#!/api/Ext.data.identifier.Sequential'>Ext.data.identifier.Sequential</a> id generator, you simply\nassign them the same id:\n\n    Ext.define('MyApp.data.MyModelA', {\n        extend: 'Ext.data.Model',\n        identifier: {\n            type: 'sequential',\n            id: 'foo'\n        }\n    });\n\n    Ext.define('MyApp.data.MyModelB', {\n        extend: 'Ext.data.Model',\n        identifier: {\n            type: 'sequential',\n            id: 'foo'\n        }\n    });\n\nTo make this as simple as possible for generator types that are shared by many (or all)\nModels, the Generator types (such as 'sequential' or 'uuid') are also reserved as\ngenerator ids. This is used by the <a href='#!/api/Ext.data.identifier.Uuid'>Ext.data.identifier.Uuid</a> which has an id equal\nto its type ('uuid'). In other words, the following Models share the same generator:\n\n    Ext.define('MyApp.data.MyModelX', {\n        extend: 'Ext.data.Model',\n        identifier: 'uuid'\n    });\n\n    Ext.define('MyApp.data.MyModelY', {\n        extend: 'Ext.data.Model',\n        identifier: 'uuid'\n    });\n\nThis can be overridden (by specifying the id explicitly), but there is no particularly\ngood reason to do so for this generator type.\n\n# Creating Custom Generators\n\nAn id generator should derive from this class and implement the <a href='#!/api/Ext.data.identifier.Generator-method-generate'>generate</a> method.\n\nTo register an id generator type, a derived class should provide an `alias` like so:\n\n    Ext.define('MyApp.data.identifier.Custom', {\n        extend: 'Ext.data.identifier.Generator',\n        alias: 'data.identifier.custom',\n        config: {\n            configProp: 42 // some config property w/default value\n        }\n\n        generate: function () {\n            return ... // a new id\n        }\n    });\n\nUsing the custom id generator is then straightforward:\n\n    Ext.define('MyApp.data.MyModel', {\n        extend: 'Ext.data.Model',\n        identifier: 'custom'\n    });\n    // or...\n\n    Ext.define('MyApp.data.MyModel', {\n        extend: 'Ext.data.Model',\n        identifier: {\n            type: 'custom',\n            configProp: value\n        }\n    });\n\nIt is not recommended to mix shared generators with generator configuration. This leads\nto unpredictable results unless all configurations match (which is also redundant). In\nsuch cases, a custom generator with a default id is the best approach.\n\n    Ext.define('MyApp.data.identifier.Custom', {\n        extend: 'Ext.data.identifier.Sequential',\n        alias: 'data.identifier.custom',\n\n        config: {\n            id: 'custom',\n            prefix: 'ID_',\n            seed: 1000\n        }\n    });\n\n    Ext.define('MyApp.data.MyModelX', {\n        extend: 'Ext.data.Model',\n        identifier: 'custom'\n    });\n\n    Ext.define('MyApp.data.MyModelY', {\n        extend: 'Ext.data.Model',\n        identifier: 'custom'\n    });\n\n    // the above models share a generator that produces ID_1000, ID_1001, etc..\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "id",
                "text": "The id for this generator.\n",
                "type": "String",
                "src": {
                  "name": "0,156,26",
                  "text": "0,157,12,27",
                  "type": "0,156,18"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "clone",
                "text": "Create a copy of this identifier.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The clone\n",
                    "type": "Ext.data.identifier.Generator",
                    "src": {
                      "text": "0,192,52,10",
                      "type": "0,192,21"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "0,194,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,191,12",
                  "name": "0,194,0",
                  "text": "0,190,12,34"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Initializes a new instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "(optional) Configuration object to be applied to the new instance.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,164,24",
                      "text": "0,164,31,67",
                      "type": "0,164,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,166,0",
                  "text": "0,163,8,28"
                }
              },
              {
                "$type": "method",
                "abstract": true,
                "name": "generate",
                "text": "Generates and returns the next id. This method must be implemented by the derived\nclass.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The next id.\n",
                    "type": "Number/String",
                    "src": {
                      "text": "0,183,32,13",
                      "type": "0,183,17"
                    }
                  }
                ],
                "src": {
                  "abstract": "0,185,8",
                  "name": "0,184,16",
                  "text": "0,180,8,90"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "1,295,28",
                  "text": "1,296,8,128",
                  "type": "1,295,19"
                }
              },
              {
                "$type": "property",
                "name": "isGenerator",
                "text": "`true` in this class to identify an object as an instantiated IdGenerator, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,149,28",
                  "text": "0,150,8,96",
                  "type": "0,149,19"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "all",
                "static": true,
                "text": "This object is keyed by id to lookup instances.\n",
                "type": "Object",
                "src": {
                  "access": "0,204,16",
                  "name": "0,202,35",
                  "static": "0,205,16",
                  "text": "0,203,16,48",
                  "type": "0,202,27"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,142,0",
          "mixins": "0,139,0",
          "name": "0,135,0",
          "text": "0,2,4,4738"
        }
      }
    ]
  },
  "version": 1
}