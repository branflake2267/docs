{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/dd/DragDropManager.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Ext.dd.DragDropMgr,Ext.dd.DDM",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.dd.DragDropManager",
        "requires": "Ext.util.Region",
        "singleton": true,
        "text": "DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window.  Generally, you will not call\nthis class directly, but it does have helper methods that could\nbe useful in your DragDrop implementations.\n",
        "uses": "Ext.tip.QuickTipManager",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_execOnAll",
                "text": "Runs method on all drag and drop objects\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sMethod",
                    "src": {
                      "name": "0,156,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "0,156,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,154,8",
                  "name": "0,156,0",
                  "text": "0,153,8,41"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_onResize",
                "text": "Reset constraints on all drag and drop objs\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,225,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,223,8",
                  "name": "0,225,0",
                  "text": "0,222,8,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_onUnload",
                "text": "unload event handler\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,1168,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "me",
                    "src": {
                      "name": "0,1168,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1166,8",
                  "name": "0,1168,0",
                  "text": "0,1165,8,21"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_remove",
                "text": "Unregisters a drag and drop item.  This is executed in\nDragDrop.unreg, use that method instead of calling this directly.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "src": {
                      "name": "0,336,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "clearGroup",
                    "src": {
                      "name": "0,336,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,334,8",
                  "name": "0,336,0",
                  "text": "0,332,8,121"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addListeners",
                "text": "Drag and drop initialization.  Sets up the global event handlers\n",
                "src": {
                  "access": "0,178,8",
                  "name": "0,180,0",
                  "text": "0,177,8,65"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "byZIndex",
                "text": "Utility method to pass to <a href='#!/api/Ext.Array-method-sort'>Ext.Array#sort</a> when sorting potential drop targets by z-index.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "d1",
                    "src": {
                      "name": "0,956,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "d2",
                    "src": {
                      "name": "0,956,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,953,8",
                  "name": "0,956,0",
                  "text": "0,954,8,97"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "elementFromPoint",
                "text": "Wrap document.elementFromPoint.\n\nThis is because in RTL mode we need to reverse any RTLification of the X coordinate\nbecause document.elementFromPoint uses LTR.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "0,919,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "0,919,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,913,8",
                  "name": "0,919,0",
                  "text": "0,914,8,161"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fireEvents",
                "text": "Iterates over all of the DragDrop elements to find ones we are\nhovering over or dropping on\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,702,23",
                      "text": "0,702,25,10",
                      "type": "0,702,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isDrop",
                    "text": "is this a drop op or a mouseover op?\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,703,25",
                      "text": "0,703,32,37",
                      "type": "0,703,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,704,8",
                  "name": "0,706,0",
                  "text": "0,700,8,92"
                }
              },
              {
                "$type": "method",
                "name": "getBestMatch",
                "text": "Helper function for getting the best match from the list of drag\nand drop objects returned by the drag and drop events when we are\nin INTERSECT mode.  It returns either the first object that the\ncursor is over, or the object that has the greatest overlap with\nthe dragged element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dds",
                    "text": "The array of drag and drop objects\ntargeted\n",
                    "type": "Ext.dd.DragDrop[]",
                    "src": {
                      "name": "0,966,36",
                      "text": "0,966,40,35:0,967,8,9",
                      "type": "0,966,17"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The best single match\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "text": "0,968,34,22",
                      "type": "0,968,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,970,0",
                  "text": "0,961,8,281"
                }
              },
              {
                "$type": "method",
                "name": "getCss",
                "text": "Returns the style property for the DOM element (i.e.,\ndocument.getElById(id).style)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the elment to get\n",
                    "type": "String",
                    "src": {
                      "name": "0,1235,24",
                      "text": "0,1235,27,28",
                      "type": "0,1235,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The style property of the element\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1236,25,34",
                      "type": "0,1236,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1238,0",
                  "text": "0,1233,8,84"
                }
              },
              {
                "$type": "method",
                "name": "getDDById",
                "text": "Returns the DragDrop instance for a given id\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the DragDrop object\n",
                    "type": "String",
                    "src": {
                      "name": "0,463,24",
                      "text": "0,463,27,30",
                      "type": "0,463,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the drag drop object, null if it is not found\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "text": "0,464,34,46",
                      "type": "0,464,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,466,0",
                  "text": "0,462,8,45"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Ext.lib.Ext.getDom instead\n",
                "deprecatedVersion": "use",
                "name": "getElement",
                "text": "Returns the actual DOM element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the elment to get\n",
                    "type": "String",
                    "src": {
                      "name": "0,1224,24",
                      "text": "0,1224,27,28",
                      "type": "0,1224,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The element\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1225,25,12",
                      "type": "0,1225,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "0,1226,8",
                  "deprecatedVersion": "0,1226,8",
                  "name": "0,1228,0",
                  "text": "0,1223,8,31"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "deprecatedMessage": "wrapper isn't that useful\n",
                "deprecatedVersion": "This",
                "name": "getElWrapper",
                "text": "Get the wrapper for the DOM element specified\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the element to get\n",
                    "type": "String",
                    "src": {
                      "name": "0,1208,24",
                      "text": "0,1208,27,29",
                      "type": "0,1208,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the wrapped element\n",
                    "type": "Ext.dd.DragDropManager.ElementWrapper",
                    "src": {
                      "text": "0,1209,56,20",
                      "type": "0,1209,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,1210,8",
                  "deprecatedMessage": "0,1211,8",
                  "deprecatedVersion": "0,1211,8",
                  "name": "0,1213,0",
                  "text": "0,1207,8,46"
                }
              },
              {
                "$type": "method",
                "name": "getLocation",
                "text": "Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "the drag and drop object to get the location for.\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,1062,33",
                      "text": "0,1062,37,50",
                      "type": "0,1062,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "a Region object representing the total area\nthe element occupies, including any padding\nthe instance is configured for.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "0,1063,34,44:0,1064,8,76",
                      "type": "0,1063,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1067,0",
                  "text": "0,1060,8,122"
                }
              },
              {
                "$type": "method",
                "name": "getRelated",
                "text": "Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p_oDD",
                    "text": "the obj to get related data for\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,394,33",
                      "text": "0,394,39,32",
                      "type": "0,394,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bTargetsOnly",
                    "text": "if true, only return targetable objs\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,395,25",
                      "text": "0,395,38,37",
                      "type": "0,395,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the related instances\n",
                    "type": "Ext.dd.DragDrop[]",
                    "src": {
                      "text": "0,396,36,22",
                      "type": "0,396,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,398,0",
                  "text": "0,392,8,94"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getZIndex",
                "text": "Collects the z-index of the passed element, looking up the parentNode axis to find an absolutely positioned ancestor\nwhich is able to yield a z-index. If found to be not absolutely positionedm returns -1.\n\nThis is used when sorting potential drop targets into z-index order so that only the topmost receives `over` and `drop` events.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The z-index of the element, or of its topmost absolutely positioned ancestor. Returns -1 if the element is not\nabsolutely positioned.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,934,25,111:0,935,8,23",
                      "type": "0,934,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "element",
                    "src": {
                      "name": "0,937,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,928,8",
                  "name": "0,937,0",
                  "text": "0,929,8,335"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleMouseDown",
                "text": "Fired after a registered DragDrop object gets the mousedown event.\nSets up the events required to track the object being dragged\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,480,23",
                      "text": "0,480,25,10",
                      "type": "0,480,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "the DragDrop object being dragged\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,481,33",
                      "text": "0,481,37,34",
                      "type": "0,481,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,482,8",
                  "name": "0,484,0",
                  "text": "0,478,8,129"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleMouseMove",
                "text": "Internal function to handle the mousemove event.  Will be invoked\nfrom the context of the html element.\n\nTODO: figure out what we can do about mouse events lost when the\nuser drags objects beyond the window boundary.  Currently we can\ndetect this in internet explorer by verifying that the mouse is\ndown during the mousemove event.  Firefox doesn't give us the\nbutton state on the mousemove event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,659,23",
                      "text": "0,659,25,10",
                      "type": "0,659,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,660,8",
                  "name": "0,662,0",
                  "text": "0,650,8,399"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleMouseUp",
                "text": "Internal function to handle the mouseup event.  Will be invoked\nfrom the context of the document.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,565,23",
                      "text": "0,565,25,10",
                      "type": "0,565,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,566,8",
                  "name": "0,568,0",
                  "text": "0,563,8,98"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.dd.DragDropManager-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "init",
                "text": "Called the first time an element is registered.\n",
                "src": {
                  "access": "0,106,8",
                  "name": "0,108,0",
                  "text": "0,105,8,48"
                }
              },
              {
                "$type": "method",
                "name": "isDragDrop",
                "text": "Utility function to determine if a given element has been\nregistered as a drag drop item.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the element id to check\n",
                    "type": "String",
                    "src": {
                      "name": "0,383,24",
                      "text": "0,383,27,24",
                      "type": "0,383,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if this element is a DragDrop item,\nfalse otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,384,26,41:0,385,8,16",
                      "type": "0,384,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,387,0",
                  "text": "0,381,8,90"
                }
              },
              {
                "$type": "method",
                "name": "isHandle",
                "text": "Utility function to determine if a given element has been\nregistered as a drag drop handle for the given Drag Drop object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the element id to check\n",
                    "type": "String",
                    "src": {
                      "name": "0,452,24",
                      "text": "0,452,27,24",
                      "type": "0,452,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if this element is a DragDrop handle, false\notherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,453,26,49:0,454,8,10",
                      "type": "0,453,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,456,0",
                  "text": "0,450,8,123"
                }
              },
              {
                "$type": "method",
                "name": "isLegalTarget",
                "text": "Returns true if the specified dd target is a legal target for\nthe specifice drag obj\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "the drag obj\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,419,33",
                      "text": "0,419,37,13",
                      "type": "0,419,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oTargetDD",
                    "text": "the target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,420,33",
                      "text": "0,420,43,11",
                      "type": "0,420,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if the target is a legal target for the\ndd obj\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,421,26,45:0,422,8,7",
                      "type": "0,421,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,424,0",
                  "text": "0,417,8,85"
                }
              },
              {
                "$type": "method",
                "name": "isLocked",
                "text": "Is drag and drop locked?\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "True if drag and drop is locked, false otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,241,26,50",
                      "type": "0,241,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,243,0",
                  "text": "0,240,8,25"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isOverTarget",
                "text": "Checks the cursor location to see if it over the target\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pt",
                    "text": "The point to evaluate\n",
                    "type": "Ext.util.Point",
                    "src": {
                      "name": "0,1103,32",
                      "text": "0,1103,35,22",
                      "type": "0,1103,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oTarget",
                    "text": "the DragDrop object we are inspecting\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,1104,33",
                      "text": "0,1104,41,38",
                      "type": "0,1104,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if the mouse is over the target\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1105,26,37",
                      "type": "0,1105,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,1106,8",
                  "name": "0,1108,0",
                  "text": "0,1102,8,56"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.dd.DragDropManager-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isTypeOfDD",
                "text": "My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof\nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "The object to evaluate\n",
                    "type": "Object",
                    "src": {
                      "name": "0,442,24",
                      "text": "0,442,28,23",
                      "type": "0,442,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if typeof oDD = DragDrop\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,443,26,30",
                      "type": "0,443,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,445,0",
                  "text": "0,437,8,296"
                }
              },
              {
                "$type": "method",
                "name": "lock",
                "text": "Lock all drag and drop functionality\n",
                "src": {
                  "name": "0,232,0",
                  "text": "0,230,8,37"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.dd.DragDropManager-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.dd.DragDropManager-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "refreshCache",
                "text": "Refreshes the cache of the top-left and bottom-right points of the\ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical\nusage is:\n\n    Ext.dd.DragDropManager.refreshCache(ddinstance.groups);\n\nAlternatively:\n\n    Ext.dd.DragDropManager.refreshCache({group1:true, group2:true});\n\nTODO: this really should be an indexed array.  Alternatively this\nmethod could accept both.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "groups",
                    "text": "an associative array of groups to refresh\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1021,24",
                      "text": "0,1021,31,42",
                      "type": "0,1021,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,1023,0",
                  "text": "0,1007,8,447"
                }
              },
              {
                "$type": "method",
                "name": "regDragDrop",
                "text": "Each DragDrop instance must be registered with the DragDropManager.\nThis is executed in DragDrop.init()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "the DragDrop object to register\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,303,33",
                      "text": "0,303,37,32",
                      "type": "0,303,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "the name of the group this element belongs to\n",
                    "type": "String",
                    "src": {
                      "name": "0,304,24",
                      "text": "0,304,31,46",
                      "type": "0,304,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,306,0",
                  "text": "0,301,8,104"
                }
              },
              {
                "$type": "method",
                "name": "regHandle",
                "text": "Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sDDId",
                    "text": "the DragDrop id this element is a handle for\n",
                    "type": "String",
                    "src": {
                      "name": "0,369,24",
                      "text": "0,369,30,45",
                      "type": "0,369,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sHandleId",
                    "text": "the id of the element that is the drag\nhandle\n",
                    "type": "String",
                    "src": {
                      "name": "0,370,24",
                      "text": "0,370,34,39:0,371,8,7",
                      "type": "0,370,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,373,0",
                  "text": "0,367,8,117"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeDDFromGroup",
                "text": "Removes the supplied dd instance from the supplied group. Executed\nby DragDrop.removeFromGroup, so don't call this function directly.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "src": {
                      "name": "0,320,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "src": {
                      "name": "0,320,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,318,8",
                  "name": "0,320,0",
                  "text": "0,316,8,134"
                }
              },
              {
                "$type": "method",
                "name": "startDrag",
                "text": "Fired when either the drag pixel threshold or the mousedown hold\ntime threshold has been met.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "the X position of the original mousedown\n",
                    "type": "Number",
                    "src": {
                      "name": "0,533,24",
                      "text": "0,533,26,41",
                      "type": "0,533,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "the Y position of the original mousedown\n",
                    "type": "Number",
                    "src": {
                      "name": "0,534,24",
                      "text": "0,534,26,41",
                      "type": "0,534,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,536,0",
                  "text": "0,531,8,94"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "stopDrag",
                "text": "Internal function to clean up event handlers after the drag\noperation is complete\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,616,23",
                      "text": "0,616,25,10",
                      "type": "0,616,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,617,8",
                  "name": "0,619,0",
                  "text": "0,614,8,82"
                }
              },
              {
                "$type": "method",
                "name": "stopEvent",
                "text": "Utility to stop event propagation and event default, if these\nfeatures are turned on.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event as returned by this.getEvent()\n",
                    "type": "Event",
                    "src": {
                      "name": "0,601,23",
                      "text": "0,601,25,41",
                      "type": "0,601,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,603,0",
                  "text": "0,599,8,86"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.dd.DragDropManager-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.dd.DragDropManager-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.dd.DragDropManager-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.dd.DragDropManager-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "unlock",
                "text": "Unlock all drag and drop functionality\n",
                "src": {
                  "name": "0,237,0",
                  "text": "0,235,8,39"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unregAll",
                "text": "Cleans up the drag and drop events and objects.\n",
                "src": {
                  "access": "0,1174,8",
                  "name": "0,1176,0",
                  "text": "0,1173,8,48"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.dd.DragDropManager-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.dd.DragDropManager-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.dd.DragDropManager-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.dd.DragDropManager-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.dd.DragDropManager-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.dd.DragDropManager-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.dd.DragDropManager-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.dd.DragDropManager-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.dd.DragDropManager-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.dd.DragDropManager-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              },
              {
                "$type": "method",
                "name": "verifyEl",
                "text": "This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "the element to check\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,1052,29",
                      "text": "0,1052,32,21",
                      "type": "0,1052,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if the element looks usable\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1053,26,33",
                      "type": "0,1053,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1055,0",
                  "text": "0,1049,8,169"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "clickPixelThresh",
                "text": "The number of pixels that the mouse needs to move after the\nmousedown before the drag is initiated.  Default=8;\ndefaults to the same value used in the LongPress gesture so that drag cannot be\ninitiated if there is a possible pending longpress\n",
                "type": "Number",
                "src": {
                  "name": "0,261,27",
                  "text": "0,262,8,243",
                  "type": "0,261,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "clickTimeout",
                "text": "Timeout used for the click time threshold\n",
                "type": "Object",
                "src": {
                  "access": "0,280,8",
                  "name": "0,278,27",
                  "text": "0,279,8,42",
                  "type": "0,278,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.dd.DragDropManager-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "deltaX",
                "text": "the X distance between the cursor and the object being dragged\n",
                "type": "Number",
                "src": {
                  "access": "0,61,8",
                  "name": "0,59,27",
                  "text": "0,60,8,63",
                  "type": "0,59,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "deltaY",
                "text": "the Y distance between the cursor and the object being dragged\n",
                "type": "Number",
                "src": {
                  "access": "0,68,8",
                  "name": "0,66,27",
                  "text": "0,67,8,63",
                  "type": "0,66,19"
                }
              },
              {
                "$type": "property",
                "name": "dragCls",
                "readonly": true,
                "text": "Class to add to the <a href='#!/api/Ext.dd.DragDrop-method-getDragEl'>Ext.dd.DragDrop#getDragEl</a> of a DragDrop instance.\n",
                "type": "String",
                "src": {
                  "name": "0,146,27",
                  "readonly": "0,147,8",
                  "text": "0,148,8,94",
                  "type": "0,146,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dragCurrent",
                "text": "the DragDrop object that is currently being dragged\n",
                "type": "Ext.dd.DragDrop",
                "src": {
                  "access": "0,47,8",
                  "name": "0,45,36",
                  "text": "0,46,8,52",
                  "type": "0,45,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dragOvers",
                "text": "the DragDrop object(s) that are being hovered over\n",
                "type": "Ext.dd.DragDrop[]",
                "src": {
                  "access": "0,54,8",
                  "name": "0,52,38",
                  "text": "0,53,8,51",
                  "type": "0,52,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dragThreshMet",
                "text": "Flag that indicates that either the drag pixel threshold or the\nmousdown time threshold has been met\n",
                "type": "Boolean",
                "src": {
                  "access": "0,273,8",
                  "name": "0,270,28",
                  "text": "0,271,8,101",
                  "type": "0,270,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "elementCache",
                "text": "A cache of DOM elements\n",
                "type": "Object",
                "src": {
                  "access": "0,1202,8",
                  "name": "0,1200,27",
                  "text": "0,1201,8,24",
                  "type": "0,1200,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "handleIds",
                "text": "Array of element ids defined as drag handles.  Used to determine\nif the element that generated the mousedown event is actually the\nhandle and not the html element itself.\n",
                "type": "String[]",
                "src": {
                  "access": "0,40,8",
                  "name": "0,36,29",
                  "text": "0,37,8,171",
                  "type": "0,36,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "ids",
                "text": "Two dimensional Array of registered DragDrop objects.  The first\ndimension is the DragDrop item group, the second the DragDrop\nobject.\n",
                "type": "String[]",
                "src": {
                  "access": "0,31,8",
                  "name": "0,27,29",
                  "text": "0,28,8,135",
                  "type": "0,27,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "initialized",
                "text": "Internal flag that is set to true when drag and drop has been\nintialized\n",
                "src": {
                  "access": "0,93,8",
                  "name": "0,92,18",
                  "text": "0,90,8,73"
                }
              },
              {
                "$type": "property",
                "name": "INTERSECT",
                "text": "In intersect mode, drag and drop interaction is defined by the\noverlap of two or more drag and drop objects.\n",
                "type": "Number",
                "src": {
                  "name": "0,120,27",
                  "text": "0,121,8,109",
                  "type": "0,120,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "locationCache",
                "text": "Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished.\n",
                "type": "Object",
                "src": {
                  "access": "0,249,8",
                  "name": "0,246,27",
                  "text": "0,247,8,114",
                  "type": "0,246,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "locked",
                "text": "All drag and drop can be disabled.\n",
                "src": {
                  "access": "0,100,8",
                  "name": "0,99,18",
                  "text": "0,98,8,35"
                }
              },
              {
                "$type": "property",
                "name": "mode",
                "text": "The current drag and drop mode.  Default: POINT\n",
                "type": "Number",
                "src": {
                  "name": "0,127,27",
                  "text": "0,128,8,48",
                  "type": "0,127,19"
                }
              },
              {
                "$type": "property",
                "name": "notifyOccluded",
                "optional": true,
                "text": "This config is only provided to provide old, usually unwanted drag/drop behaviour.\n\nFrom ExtJS 4.1.0 onwards, when drop targets are contained in floating, absolutely positioned elements\nsuch as in <a href='#!/api/Ext.window.Window'>Ext.window.Window</a>, which may overlap each other, `over` and `drop` events\nare only delivered to the topmost drop target at the mouse position.\n\nIf all targets below that in zIndex order should also receive notifications, set\n<a href='#!/api/Ext.dd.DragDropManager-property-notifyOccluded'>notifyOccluded</a> to `true`.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,133,29",
                  "text": "0,134,8,466",
                  "type": "0,133,19",
                  "value": "0,133,44"
                }
              },
              {
                "$type": "property",
                "name": "POINT",
                "text": "In point mode, drag and drop interaction is defined by the\nlocation of the cursor during the drag/drop\n",
                "type": "Number",
                "src": {
                  "name": "0,113,27",
                  "text": "0,114,8,103",
                  "type": "0,113,19"
                }
              },
              {
                "$type": "property",
                "name": "preventDefault",
                "text": "Flag to determine if we should prevent the default behavior of the\nevents we define. By default this is true, but this can be set to\nfalse if you need the default behavior (not recommended)\n",
                "type": "Boolean",
                "src": {
                  "name": "0,73,28",
                  "text": "0,74,8,190",
                  "type": "0,73,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "startX",
                "text": "The X position of the mousedown event stored for later use when a\ndrag threshold is met.\n",
                "type": "Number",
                "src": {
                  "access": "0,288,8",
                  "name": "0,285,27",
                  "text": "0,286,8,89",
                  "type": "0,285,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "startY",
                "text": "The Y position of the mousedown event stored for later use when a\ndrag threshold is met.\n",
                "type": "Number",
                "src": {
                  "access": "0,296,8",
                  "name": "0,293,27",
                  "text": "0,294,8,89",
                  "type": "0,293,19"
                }
              },
              {
                "$type": "property",
                "name": "stopPropagation",
                "text": "Flag to determine if we should stop the propagation of the events\nwe generate. This is true by default but you may want to set it to\nfalse if the html element contains other features that require the\nmouse click.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,81,28",
                  "text": "0,82,8,213",
                  "type": "0,81,19"
                }
              },
              {
                "$type": "property",
                "name": "useCache",
                "text": "Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a drag.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,254,28",
                  "text": "0,255,8,124",
                  "type": "0,254,19"
                }
              }
            ]
          }
        ],
        "src": {
          "alternateClassNames": "0,24,0,0:0,24,0,0",
          "name": "0,16,0",
          "requires": "0,19,0",
          "singleton": "0,17,0",
          "text": "0,11,4,243",
          "uses": "0,21,0"
        }
      }
    ]
  },
  "version": 1
}