{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/dom/Query.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Ext.DomQuery,Ext.core.DomQuery",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.dom.Query",
        "requires": "Ext.dom.Helper,Ext.util.Operators",
        "singleton": true,
        "text": "\nProvides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes\nand matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).\n\nDomQuery supports most of the [CSS3 selectors spec][1], along with some custom selectors and basic XPath.\n\nAll selectors, attribute filters and pseudos below can be combined infinitely in any order. For example\n`div.foo:nth-child(odd)[@foo=bar].bar:first` would be a perfectly valid selector. Node filters are processed\nin the order in which they appear, which allows you to optimize your queries for your document structure.\n\n## Simple Selectors\n\nFor performance reasons, some query methods accept selectors that are termed as **simple selectors**. A simple\nselector is a selector that does not include contextual information about any parent/sibling elements.\n\nSome examples of valid simple selectors:\n\n    var simple = '.foo'; // Only asking for the class name on the element\n    var simple = 'div.bar'; // Only asking for the tag/class name on the element\n    var simple = '[href];' // Asking for an attribute on the element.\n    var simple = ':not(.foo)'; // Only asking for the non-matches against the class name\n    var simple = 'span:first-child'; // Doesn't require any contextual information about the parent node\n\nSimple examples of invalid simple selectors:\n\n    var notSimple = 'div.foo div.bar'; // Requires matching a parent node by class name\n    var notSimple = 'span + div'; //  Requires matching a sibling by tag name\n\n## Element Selectors:\n\n  - **`*`** any element\n  - **`E`** an element with the tag E\n  - **`E F`** All descendent elements of E that have the tag F\n  - **`E > F`** or **E/F** all direct children elements of E that have the tag F\n  - **`E + F`** all elements with the tag F that are immediately preceded by an element with the tag E\n  - **`E ~ F`** all elements with the tag F that are preceded by a sibling element with the tag E\n\n## Attribute Selectors:\n\nThe use of `@` and quotes are optional. For example, `div[@foo='bar']` is also a valid attribute selector.\n\n  - **`E[foo]`** has an attribute \"foo\"\n  - **`E[foo=bar]`** has an attribute \"foo\" that equals \"bar\"\n  - **`E[foo^=bar]`** has an attribute \"foo\" that starts with \"bar\"\n  - **`E[foo$=bar]`** has an attribute \"foo\" that ends with \"bar\"\n  - **`E[foo*=bar]`** has an attribute \"foo\" that contains the substring \"bar\"\n  - **`E[foo%=2]`** has an attribute \"foo\" that is evenly divisible by 2\n  - **`E[foo!=bar]`** attribute \"foo\" does not equal \"bar\"\n\n## Pseudo Classes:\n\n  - **`E:first-child`** E is the first child of its parent\n  - **`E:last-child`** E is the last child of its parent\n  - **`E:nth-child(_n_)`** E is the _n_th child of its parent (1 based as per the spec)\n  - **`E:nth-child(odd)`** E is an odd child of its parent\n  - **`E:nth-child(even)`** E is an even child of its parent\n  - **`E:only-child`** E is the only child of its parent\n  - **`E:checked`** E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)\n  - **`E:first`** the first E in the resultset\n  - **`E:last`** the last E in the resultset\n  - **`E:nth(_n_)`** the _n_th E in the resultset (1 based)\n  - **`E:odd`** shortcut for :nth-child(odd)\n  - **`E:even`** shortcut for :nth-child(even)\n  - **`E:contains(foo)`** E's innerHTML contains the substring \"foo\"\n  - **`E:nodeValue(foo)`** E contains a textNode with a nodeValue that equals \"foo\"\n  - **`E:not(S)`** an E element that does not match simple selector S\n  - **`E:has(S)`** an E element that has a descendent that matches simple selector S\n  - **`E:next(S)`** an E element whose next sibling matches simple selector S\n  - **`E:prev(S)`** an E element whose previous sibling matches simple selector S\n  - **`E:any(S1|S2|S2)`** an E element which matches any of the simple selectors S1, S2 or S3\n  - **`E:visible(true)`** an E element which is deeply visible according to <a href='#!/api/Ext.dom.Element-method-isVisible'>Ext.dom.Element#isVisible</a>\n\n## CSS Value Selectors:\n\n  - **`E{display=none}`** css value \"display\" that equals \"none\"\n  - **`E{display^=none}`** css value \"display\" that starts with \"none\"\n  - **`E{display$=none}`** css value \"display\" that ends with \"none\"\n  - **`E{display*=none}`** css value \"display\" that contains the substring \"none\"\n  - **`E{display%=2}`** css value \"display\" that is evenly divisible by 2\n  - **`E{display!=none}`** css value \"display\" that does not equal \"none\"\n\n## XML Namespaces:\n  - **`ns|E`** an element with tag E and namespace prefix ns\n\n[1]: http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "compile",
                "text": "Compiles a selector/xpath query into a reusable function. The returned function\ntakes one parameter \"root\" (optional), which is the context node from where the query should start.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector/xpath query\n",
                    "type": "String",
                    "src": {
                      "name": "0,622,28",
                      "text": "0,622,37,25",
                      "type": "0,622,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "type",
                    "optional": true,
                    "text": "Either \"select\" or \"simple\" for a simple selector match\n",
                    "type": "String",
                    "value": "\"select\"",
                    "src": {
                      "name": "0,623,29",
                      "text": "0,623,44,56",
                      "type": "0,623,20",
                      "value": "0,623,34"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "0,624,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,626,0",
                  "text": "0,620,12,180"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "filter",
                "text": "Filters an array of elements to only include matches of a simple selector\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "An array of elements to filter\n",
                    "type": "HTMLElement[]",
                    "src": {
                      "name": "0,911,35",
                      "text": "0,911,38,31",
                      "type": "0,911,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The simple selector to test\n",
                    "type": "String",
                    "src": {
                      "name": "0,912,28",
                      "text": "0,912,37,28",
                      "type": "0,912,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "nonMatches",
                    "text": "If true, it returns the elements that DON'T match the selector instead of the\nones that match\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,913,29",
                      "text": "0,913,40,78:0,914,12,16",
                      "type": "0,913,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An Array of DOM elements which match the selector. If there are no matches, and empty\nArray is returned.\n",
                    "type": "HTMLElement[]",
                    "src": {
                      "text": "0,915,36,86:0,916,12,19",
                      "type": "0,915,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,918,0",
                  "text": "0,910,12,74"
                }
              },
              {
                "$type": "method",
                "name": "getNodeValue",
                "text": "Get the text value for a node, optionally replacing null with the defaultValue.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node\n",
                    "type": "Object",
                    "src": {
                      "name": "0,855,28",
                      "text": "0,855,33,9",
                      "type": "0,855,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultValue",
                    "optional": true,
                    "text": "When specified, this is return as empty value.\n",
                    "type": "String",
                    "src": {
                      "name": "0,856,29",
                      "text": "0,856,43,47",
                      "type": "0,856,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value\n",
                    "type": "String",
                    "src": {
                      "text": "0,857,29,10",
                      "type": "0,857,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,859,0",
                  "text": "0,854,12,80"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.dom.Query-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "is",
                "text": "Returns true if the passed element(s) match the passed simple selector\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "An element id, element or array of elements\n",
                    "type": "String/HTMLElement/HTMLElement[]",
                    "src": {
                      "name": "0,896,54",
                      "text": "0,896,57,44",
                      "type": "0,896,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The simple selector to test\n",
                    "type": "String",
                    "src": {
                      "name": "0,897,28",
                      "text": "0,897,37,28",
                      "type": "0,897,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,898,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,900,0",
                  "text": "0,895,12,71"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.dom.Query-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "jsSelect",
                "text": "Selects an array of DOM nodes using JavaScript-only implementation.\n\nUse <a href='#!/api/Ext.dom.Query-method-select'>select</a> to take advantage of browsers built-in support for CSS selectors.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector/xpath query (can be a comma separated list of selectors)\n",
                    "type": "String",
                    "src": {
                      "name": "0,717,28",
                      "text": "0,717,37,70",
                      "type": "0,717,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "The start of the query.\n",
                    "type": "HTMLElement/String",
                    "value": "document",
                    "src": {
                      "name": "0,718,41",
                      "text": "0,718,56,24",
                      "type": "0,718,20",
                      "value": "0,718,46"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An Array of DOM elements which match the selector. If there are\nno matches, and empty Array is returned.\n",
                    "type": "HTMLElement[]",
                    "src": {
                      "text": "0,719,36,64:0,720,12,41",
                      "type": "0,719,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,722,0",
                  "text": "0,714,12,155"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.dom.Query-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.dom.Query-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "select",
                "text": "Selects an array of DOM nodes by CSS/XPath selector.\n\nUses [document.querySelectorAll][0] if browser supports that, otherwise falls back to\n<a href='#!/api/Ext.dom.Query-method-jsSelect'>Ext.dom.Query#jsSelect</a> to do the work.\n\n[0]: https://developer.mozilla.org/en/DOM/document.querySelectorAll\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "path",
                    "text": "The selector/xpath query\n",
                    "type": "String",
                    "src": {
                      "name": "0,781,28",
                      "text": "0,781,33,25",
                      "type": "0,781,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "The start of the query.\n",
                    "type": "HTMLElement",
                    "value": "document",
                    "src": {
                      "name": "0,782,34",
                      "text": "0,782,49,24",
                      "type": "0,782,20",
                      "value": "0,782,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of DOM elements (not a NodeList as returned by `querySelectorAll`).\n",
                    "type": "HTMLElement[]",
                    "src": {
                      "text": "0,783,36,77",
                      "type": "0,783,21"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "type",
                    "optional": true,
                    "text": "Either \"select\" or \"simple\" for a simple selector match (only valid when\nused when the call is deferred to the jsSelect method)\n",
                    "type": "String",
                    "value": "\"select\"",
                    "src": {
                      "name": "0,784,29",
                      "text": "0,784,44,73:0,785,12,55",
                      "type": "0,784,20",
                      "value": "0,784,34"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "single",
                    "optional": true,
                    "text": "Pass `true` to select only the first matching node using `document.querySelector` (where available)\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,786,30",
                      "text": "0,786,38,100",
                      "type": "0,786,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,789,0",
                  "text": "0,774,12,257"
                }
              },
              {
                "$type": "method",
                "name": "selectNode",
                "text": "Selects a single element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector/xpath query\n",
                    "type": "String",
                    "src": {
                      "name": "0,822,28",
                      "text": "0,822,37,25",
                      "type": "0,822,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "The start of the query.\n",
                    "type": "HTMLElement",
                    "value": "document",
                    "src": {
                      "name": "0,823,34",
                      "text": "0,823,49,24",
                      "type": "0,823,20",
                      "value": "0,823,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The DOM element which matched the selector.\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "0,824,34,44",
                      "type": "0,824,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,826,0",
                  "text": "0,821,12,26"
                }
              },
              {
                "$type": "method",
                "name": "selectNumber",
                "text": "Selects the value of a node, parsing integers and floats.\nReturns the defaultValue, or 0 if none is specified.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector/xpath query\n",
                    "type": "String",
                    "src": {
                      "name": "0,884,28",
                      "text": "0,884,37,25",
                      "type": "0,884,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "The start of the query.\n",
                    "type": "HTMLElement",
                    "value": "document",
                    "src": {
                      "name": "0,885,34",
                      "text": "0,885,49,24",
                      "type": "0,885,20",
                      "value": "0,885,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultValue",
                    "optional": true,
                    "text": "When specified, this is return as empty value.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,886,29",
                      "text": "0,886,43,47",
                      "type": "0,886,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,887,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,889,0",
                  "text": "0,882,12,111"
                }
              },
              {
                "$type": "method",
                "name": "selectValue",
                "text": "Selects the value of a node, optionally replacing null with the defaultValue.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector/xpath query\n",
                    "type": "String",
                    "src": {
                      "name": "0,832,28",
                      "text": "0,832,37,25",
                      "type": "0,832,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "The start of the query.\n",
                    "type": "HTMLElement",
                    "value": "document",
                    "src": {
                      "name": "0,833,34",
                      "text": "0,833,49,24",
                      "type": "0,833,20",
                      "value": "0,833,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultValue",
                    "optional": true,
                    "text": "When specified, this is return as empty value.\n",
                    "type": "String",
                    "src": {
                      "name": "0,834,29",
                      "text": "0,834,43,47",
                      "type": "0,834,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,835,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,837,0",
                  "text": "0,831,12,78"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.dom.Query-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.dom.Query-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.dom.Query-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.dom.Query-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.dom.Query-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.dom.Query-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.dom.Query-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.dom.Query-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.dom.Query-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.dom.Query-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.dom.Query-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.dom.Query-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.dom.Query-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.dom.Query-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.dom.Query-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "matchers",
                "text": "Collection of matching regular expressions and code snippets.\nEach capture group within `()` will be replace the `{}` in the select\nstatement as specified by their index.\n",
                "src": {
                  "name": "0,939,0",
                  "text": "0,935,12,171"
                }
              },
              {
                "$type": "property",
                "name": "operators",
                "text": "Collection of operator comparison functions.\nThe default operators are `=`, `!=`, `^=`, `$=`, `*=`, `%=`, `|=` and `~=`.\n\nNew operators can be added as long as the match the format *c*`=` where *c*\nis any character other than space, `>`, or `<`.\n\nOperator functions are passed the following parameters:\n\n* `propValue` : The property value to test.\n* `compareTo` : The value to compare to.\n",
                "type": "Object",
                "src": {
                  "name": "0,968,31",
                  "text": "0,957,12,390",
                  "type": "0,968,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "name": "pseudos",
                "text": "Object hash of \"pseudo class\" filter functions which are used when filtering selections.\nEach function is passed two parameters:\n\n- **c** : Array\n    An Array of DOM elements to filter.\n\n- **v** : String\n    The argument (if any) supplied in the selector.\n\nA filter function returns an Array of DOM elements which conform to the pseudo class.\nIn addition to the provided pseudo classes listed above such as `first-child` and `nth-child`,\ndevelopers may add additional, custom psuedo class filters to select elements according to application-specific requirements.\n\nFor example, to filter `a` elements to only return links to __external__ resources:\n\n    Ext.DomQuery.pseudos.external = function(c, v) {\n        var r = [], ri = -1;\n        for(var i = 0, ci; ci = c[i]; i++) {\n            // Include in result set only if it's a link to an external resource\n            if (ci.hostname != location.hostname) {\n                r[++ri] = ci;\n            }\n        }\n        return r;\n    };\n\nThen external links could be gathered with the following statement:\n\n    var externalLinks = Ext.select(\"a:external\");\n",
                "src": {
                  "name": "0,1002,0",
                  "text": "0,972,12,1109"
                }
              }
            ]
          }
        ],
        "src": {
          "alternateClassNames": "0,3,24,24:0,4,24,24",
          "name": "0,2,11",
          "requires": "0,591,0,0:0,592,0,0",
          "singleton": "0,5,4",
          "text": "0,6,4,4604"
        }
      }
    ]
  },
  "version": 1
}