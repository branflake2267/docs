{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/draw/Color.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.draw.Color",
        "text": "Represents an RGB color and provides helper functions on it e.g. to get\ncolor components in HSL color space.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "lightnessFactor",
                "text": "\nThe default factor to compute the lighter or darker color.\n",
                "type": "Number",
                "src": {
                  "name": "0,21,22",
                  "text": "0,22,8,60",
                  "type": "0,21,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "constructor": true,
                "name": "constructor",
                "items": [
                  {
                    "$type": "param",
                    "name": "red",
                    "text": "Red component (0..255)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,29,24",
                      "text": "0,29,28,23",
                      "type": "0,29,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "green",
                    "text": "Green component (0..255)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,30,24",
                      "text": "0,30,30,25",
                      "type": "0,30,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "blue",
                    "text": "Blue component (0..255)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,31,24",
                      "text": "0,31,29,24",
                      "type": "0,31,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "alpha",
                    "optional": true,
                    "text": "(optional) Alpha component (0..1)\n",
                    "type": "Number",
                    "value": "1",
                    "src": {
                      "name": "0,32,25",
                      "text": "0,32,34,34",
                      "type": "0,32,16",
                      "value": "0,32,31"
                    }
                  }
                ],
                "src": {
                  "constructor": "0,28,8",
                  "name": "0,34,0"
                }
              },
              {
                "$type": "method",
                "name": "createDarker",
                "text": "Returns a new color that is darker than this color in the HSL color space.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "factor",
                    "optional": true,
                    "text": "Darker factor (0..1).\n",
                    "type": "Number",
                    "value": "0.2",
                    "src": {
                      "name": "0,261,25",
                      "text": "0,261,37,22",
                      "type": "0,261,16",
                      "value": "0,261,32"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Color",
                    "src": {
                      "type": "0,262,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,264,0",
                  "text": "0,260,8,75"
                }
              },
              {
                "$type": "method",
                "name": "createLighter",
                "text": "Returns a new color that is lighter than this color in the HSL color space.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "factor",
                    "optional": true,
                    "text": "Lighter factor (0..1).\n",
                    "type": "Number",
                    "value": "0.2",
                    "src": {
                      "name": "0,247,25",
                      "text": "0,247,37,23",
                      "type": "0,247,16",
                      "value": "0,247,32"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Color",
                    "src": {
                      "type": "0,248,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,250,0",
                  "text": "0,246,8,76"
                }
              },
              {
                "$type": "method",
                "name": "getGrayscale",
                "text": "Returns the gray value (0 to 255) of the color.\n\nThe gray value is calculated using the formula r*0.3 + g*0.59 + b*0.11.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,55,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,57,0",
                  "text": "0,51,8,122"
                }
              },
              {
                "$type": "method",
                "name": "getHSL",
                "text": "Get the equivalent HSL components of the color.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number[]",
                    "src": {
                      "type": "0,64,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,66,0",
                  "text": "0,63,8,48"
                }
              },
              {
                "$type": "method",
                "name": "getHSV",
                "text": "Get the equivalent HSV components of the color.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number[]",
                    "src": {
                      "type": "0,101,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,103,0",
                  "text": "0,100,8,48"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.draw.Color-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.draw.Color-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.draw.Color-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.draw.Color-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "setFromString",
                "text": "Parse the string and set the current color.\n\nSupported formats:\n\n+ '#rrggbb'\n+ '#rgb', 'rgb(r,g,b)'\n+ 'rgba(r,g,b,a)'\n+ supported CSS color names (e.g., 'black', 'white', etc).\n\nIf the string is not recognized, setFromString returns rgba(0,0,0,0).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "Color",
                    "text": "Color as string.\n",
                    "type": "String",
                    "src": {
                      "name": "0,347,24",
                      "text": "0,347,30,17",
                      "type": "0,347,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "src": {
                      "text": "0,348,16,5"
                    }
                  }
                ],
                "src": {
                  "name": "0,350,0",
                  "text": "0,336,8,249"
                }
              },
              {
                "$type": "method",
                "name": "setHSL",
                "text": "Set current color based on the specified HSL values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "h",
                    "text": "Hue component [0..360)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,139,24",
                      "text": "0,139,26,23",
                      "type": "0,139,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "Saturation component [0..1]\n",
                    "type": "Number",
                    "src": {
                      "name": "0,140,24",
                      "text": "0,140,26,28",
                      "type": "0,140,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "l",
                    "text": "Lightness component [0..1]\n",
                    "type": "Number",
                    "src": {
                      "name": "0,141,24",
                      "text": "0,141,26,27",
                      "type": "0,141,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Color",
                    "src": {
                      "type": "0,142,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,144,0",
                  "text": "0,137,8,54"
                }
              },
              {
                "$type": "method",
                "name": "setHSV",
                "text": "Set current color based on the specified HSV values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "h",
                    "text": "Hue component [0..360)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,194,24",
                      "text": "0,194,26,23",
                      "type": "0,194,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "Saturation component [0..1]\n",
                    "type": "Number",
                    "src": {
                      "name": "0,195,24",
                      "text": "0,195,26,28",
                      "type": "0,195,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "v",
                    "text": "Value component [0..1]\n",
                    "type": "Number",
                    "src": {
                      "name": "0,196,24",
                      "text": "0,196,26,23",
                      "type": "0,196,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Color",
                    "src": {
                      "type": "0,197,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,199,0",
                  "text": "0,192,8,54"
                }
              },
              {
                "$type": "method",
                "name": "toHex",
                "text": "Convert a color to hexadecimal format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "color",
                    "text": "The color value (i.e 'rgb(255, 255, 255)', 'color: #ffffff').\nCan also be an Array, in this case the function handles the first member.\n",
                    "type": "String/Array",
                    "src": {
                      "name": "0,307,30",
                      "text": "0,307,36,62:0,308,8,74",
                      "type": "0,307,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The color in hexadecimal format.\n",
                    "type": "String",
                    "src": {
                      "text": "0,309,25,33",
                      "type": "0,309,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,311,0",
                  "text": "0,305,8,40"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.draw.Color-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.draw.Color-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.draw.Color-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.draw.Color-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "toString() returns a color in hex format ('#rrggbb') if the alpha is 1. If the\nalpha is less than one, toString() returns the color in RGBA format ('rgba(255,0,0,0.3)').\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,275,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,277,0",
                  "text": "0,272,8,171"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.draw.Color-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.draw.Color-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.draw.Color-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.draw.Color-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.draw.Color-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.draw.Color-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.draw.Color-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.draw.Color-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.draw.Color-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.draw.Color-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.draw.Color-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "name": "create",
                "static": true,
                "text": "Convenience method for creating a color.\n\nCan be called with several different combinations of arguments:\n\n    // Ext.draw.Color is returned unchanged.\n    Ext.draw.Color.create(new Ext.draw.color(255, 0, 0, 0));\n\n    // CSS color string.\n    Ext.draw.Color.create(\"red\");\n\n    // Array of red, green, blue, alpha\n    Ext.draw.Color.create([255, 0, 0, 0]);\n\n    // Separate arguments of red, green, blue, alpha\n    Ext.draw.Color.create(255, 0, 0, 0);\n\n    // Returns black when no arguments given.\n    Ext.draw.Color.create();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "red",
                    "optional": true,
                    "text": "Red component (0..255),\nCSS color string or array of all components.\n",
                    "type": "Ext.draw.Color/String/Number[]/Number",
                    "src": {
                      "name": "0,637,60",
                      "text": "0,637,65,24:0,638,12,45",
                      "type": "0,637,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "green",
                    "optional": true,
                    "text": "Green component (0..255)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,639,29",
                      "text": "0,639,36,25",
                      "type": "0,639,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "blue",
                    "optional": true,
                    "text": "Blue component (0..255)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,640,29",
                      "text": "0,640,35,24",
                      "type": "0,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "alpha",
                    "optional": true,
                    "text": "Alpha component (0..1)\n",
                    "type": "Number",
                    "value": "1",
                    "src": {
                      "name": "0,641,29",
                      "text": "0,641,38,23",
                      "type": "0,641,20",
                      "value": "0,641,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Color",
                    "src": {
                      "type": "0,642,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,645,0",
                  "static": "0,643,12",
                  "text": "0,618,12,529"
                }
              },
              {
                "$type": "method",
                "name": "fly",
                "static": true,
                "text": "Returns a flyweight instance of Ext.draw.Color.\n\nCan be called with either a CSS color string or with separate\narguments for red, green, blue, alpha.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "red",
                    "text": "Red component (0..255) or CSS color string.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,405,35",
                      "text": "0,405,39,44",
                      "type": "0,405,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "green",
                    "optional": true,
                    "text": "Green component (0..255)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,406,29",
                      "text": "0,406,36,25",
                      "type": "0,406,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "blue",
                    "optional": true,
                    "text": "Blue component (0..255)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,407,29",
                      "text": "0,407,35,24",
                      "type": "0,407,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "alpha",
                    "optional": true,
                    "text": "Alpha component (0..1)\n",
                    "type": "Number",
                    "value": "1",
                    "src": {
                      "name": "0,408,29",
                      "text": "0,408,38,23",
                      "type": "0,408,20",
                      "value": "0,408,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Color",
                    "src": {
                      "type": "0,409,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,412,0",
                  "static": "0,410,12",
                  "text": "0,400,12,151"
                }
              },
              {
                "$type": "method",
                "name": "fromHSL",
                "static": true,
                "text": "Create a new color based on the specified HSL values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "h",
                    "text": "Hue component [0..360)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,574,28",
                      "text": "0,574,30,23",
                      "type": "0,574,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "Saturation component [0..1]\n",
                    "type": "Number",
                    "src": {
                      "name": "0,575,28",
                      "text": "0,575,30,28",
                      "type": "0,575,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "l",
                    "text": "Lightness component [0..1]\n",
                    "type": "Number",
                    "src": {
                      "name": "0,576,28",
                      "text": "0,576,30,27",
                      "type": "0,576,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Color",
                    "src": {
                      "type": "0,577,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,580,0",
                  "static": "0,578,12",
                  "text": "0,572,12,55"
                }
              },
              {
                "$type": "method",
                "name": "fromHSV",
                "static": true,
                "text": "Create a new color based on the specified HSV values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "h",
                    "text": "Hue component [0..360)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,587,28",
                      "text": "0,587,30,23",
                      "type": "0,587,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "Saturation component [0..1]\n",
                    "type": "Number",
                    "src": {
                      "name": "0,588,28",
                      "text": "0,588,30,28",
                      "type": "0,588,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "v",
                    "text": "Value component [0..1]\n",
                    "type": "Number",
                    "src": {
                      "name": "0,589,28",
                      "text": "0,589,30,23",
                      "type": "0,589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Color",
                    "src": {
                      "type": "0,590,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,593,0",
                  "static": "0,591,12",
                  "text": "0,585,12,55"
                }
              },
              {
                "$type": "method",
                "name": "fromString",
                "static": true,
                "text": "Parse the string and create a new color.\n\nSupported formats:\n\n+ '#rrggbb'\n+ '#rgb', 'rgb(r,g,b)'\n+ 'rgba(r,g,b,a)'\n+ supported CSS color names (e.g., 'black', 'white', etc).\n\nIf the string is not recognized, fromString returns rgba(0,0,0,0).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "color",
                    "text": "Color as string.\n",
                    "type": "String",
                    "src": {
                      "name": "0,609,28",
                      "text": "0,609,34,17",
                      "type": "0,609,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Color",
                    "src": {
                      "type": "0,610,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,613,0",
                  "static": "0,611,12",
                  "text": "0,598,12,243"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,5,0",
          "text": "0,2,4,109"
        }
      }
    ]
  },
  "version": 1
}