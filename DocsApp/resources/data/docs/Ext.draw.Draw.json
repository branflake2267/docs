{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/draw/Draw.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Ext.draw.Draw",
        "singleton": true,
        "text": "Utility class providing mathematics functionalities through all the draw package.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "deprecatedMessage": "use the <a href='#!/api/Ext-identityFn'>Ext#identityFn</a> instead.\nFunction that returns its first element.\n",
                "deprecatedVersion": "Please",
                "name": "reflectFn",
                "items": [
                  {
                    "$type": "param",
                    "name": "a",
                    "type": "Mixed",
                    "src": {
                      "name": "0,32,23",
                      "type": "0,32,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Mixed",
                    "src": {
                      "type": "0,33,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "0,30,8",
                  "deprecatedVersion": "0,30,8",
                  "name": "0,35,0"
                }
              },
              {
                "$type": "method",
                "name": "rad",
                "text": "Converting degrees to radians.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "degrees",
                    "type": "Number",
                    "src": {
                      "name": "0,41,24",
                      "type": "0,41,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,42,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,44,0",
                  "text": "0,40,8,31"
                }
              },
              {
                "$type": "method",
                "name": "degrees",
                "text": "Converting radians to degrees.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "radian",
                    "type": "Number",
                    "src": {
                      "name": "0,50,24",
                      "type": "0,50,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,51,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,53,0",
                  "text": "0,49,8,31"
                }
              },
              {
                "$type": "method",
                "name": "isBBoxIntersect",
                "items": [
                  {
                    "$type": "param",
                    "name": "bbox1",
                    "type": "Object",
                    "src": {
                      "name": "0,59,24",
                      "type": "0,59,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bbox2",
                    "type": "Object",
                    "src": {
                      "name": "0,60,24",
                      "type": "0,60,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "padding",
                    "optional": true,
                    "type": "Number",
                    "src": {
                      "name": "0,61,25",
                      "type": "0,61,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,62,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,64,0"
                }
              },
              {
                "$type": "method",
                "name": "isPointInBBox",
                "text": "Checks if a point is within a bounding box.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "0,72,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "0,73,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bbox",
                    "src": {
                      "name": "0,74,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,77,0",
                  "text": "0,71,8,44"
                }
              },
              {
                "$type": "method",
                "name": "spline",
                "text": "Natural cubic spline interpolation.\nThis algorithm runs in linear time.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "points",
                    "text": "Array of numbers.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,85,23",
                      "text": "0,85,30,18",
                      "type": "0,85,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,87,0",
                  "text": "0,82,8,73"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAnchors",
                "text": "Calculates bezier curve control anchor points for a particular point in a path, with a\nsmoothing curve applied. The smoothness of the curve is controlled by the 'value' parameter.\nNote that this algorithm assumes that the line being smoothed is normalized going from left\nto right; it makes special adjustments assuming this orientation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prevX",
                    "text": "X coordinate of the previous point in the path\n",
                    "type": "Number",
                    "src": {
                      "name": "0,132,24",
                      "text": "0,132,30,47",
                      "type": "0,132,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prevY",
                    "text": "Y coordinate of the previous point in the path\n",
                    "type": "Number",
                    "src": {
                      "name": "0,133,24",
                      "text": "0,133,30,47",
                      "type": "0,133,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "curX",
                    "text": "X coordinate of the current point in the path\n",
                    "type": "Number",
                    "src": {
                      "name": "0,134,24",
                      "text": "0,134,29,46",
                      "type": "0,134,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "curY",
                    "text": "Y coordinate of the current point in the path\n",
                    "type": "Number",
                    "src": {
                      "name": "0,135,24",
                      "text": "0,135,29,46",
                      "type": "0,135,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "nextX",
                    "text": "X coordinate of the next point in the path\n",
                    "type": "Number",
                    "src": {
                      "name": "0,136,24",
                      "text": "0,136,30,43",
                      "type": "0,136,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "nextY",
                    "text": "Y coordinate of the next point in the path\n",
                    "type": "Number",
                    "src": {
                      "name": "0,137,24",
                      "text": "0,137,30,43",
                      "type": "0,137,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "A value to control the smoothness of the curve; this is used to\n                divide the distance between points, so a value of 2 corresponds to\n                half the distance between points (a very smooth line) while higher values\n                result in less smooth curves. Defaults to 4.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,138,24",
                      "text": "0,138,30,64:0,139,8,234",
                      "type": "0,138,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Object containing x1, y1, x2, y2 bezier control anchor points; x1 and y1\n                 are the control point for the curve toward the previous path point, and\n                 x2 and y2 are the control point for the curve toward the next path point.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,142,25,73:0,143,8,180",
                      "type": "0,142,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,125,8",
                  "name": "0,146,0",
                  "text": "0,127,8,339"
                }
              },
              {
                "$type": "method",
                "name": "smooth",
                "text": "Given coordinates of the points, calculates coordinates of a Bezier curve that goes through them.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dataX",
                    "text": "x-coordinates of the points.\n",
                    "src": {
                      "name": "0,216,15",
                      "text": "0,216,21,29"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dataY",
                    "text": "y-coordinates of the points.\n",
                    "src": {
                      "name": "0,217,15",
                      "text": "0,217,21,29"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "A value to control the smoothness of the curve.\n",
                    "src": {
                      "name": "0,218,15",
                      "text": "0,218,21,48"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Object holding two arrays, for x and y coordinates of the curve.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,219,25,65",
                      "type": "0,219,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,221,0",
                  "text": "0,215,8,98"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beginUpdateIOS",
                "text": "Work around for iOS.\nNested 3d-transforms seems to prevent the redraw inside it until some event is fired.\n",
                "src": {
                  "access": "0,265,8",
                  "name": "0,269,0",
                  "text": "0,266,8,107"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,23,0",
          "singleton": "0,24,0",
          "text": "0,21,4,82"
        }
      }
    ]
  },
  "version": 1
}