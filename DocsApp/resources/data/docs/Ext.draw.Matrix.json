{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/draw/Matrix.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Ext.Base,Object",
        "extends": "Ext.Base",
        "name": "Ext.draw.Matrix",
        "text": "Ext.draw.Matix is a utility class used to calculate\n[affine transformation](http://en.wikipedia.org/wiki/Affine_transformation) matrix.\nThe matrix class is used to apply transformations to existing\n{@link Ext.draw.sprite.Sprite} using a number of convenience transform\nmethods.\n\nTransformations configured directly on a sprite are processed in the following order:\nscaling, rotation, and translation.  The matrix class offers additional flexibility.\nOnce a sprite is created, you can use the matrix class's transform methods as many\ntimes as needed and in any order you choose.\n\nTo demonstrate, we'll start with a simple {@link Ext.draw.sprite.Rect} sprite\nwith the intent of rotating it 180 degrees with the bottom right corner being the\ncenter of rotation.  To begin, let's look at the initial, untransformed sprite:\n\n    @example\n    var drawContainer = new Ext.draw.Container({\n        renderTo: Ext.getBody(),\n        width: 380,\n        height: 380,\n        sprites: [{\n            type: 'rect',\n            width: 100,\n            height: 100,\n            fillStyle: 'red'\n        }]\n    });\n\nNext, we'll use the {@link #method!rotate #rotate} and {@link #method!translate #translate} methods from our matrix\nclass to position the rect sprite.\n\n    @example\n    var drawContainer = new Ext.draw.Container({\n        renderTo: Ext.getBody(),\n        width: 380,\n        height: 380,\n        sprites: [{\n            type: 'rect',\n            width: 100,\n            height: 100,\n            fillStyle: 'red'\n        }]\n    });\n\n    var main = drawContainer.getSurface();\n    var rect = main.getItems()[0];\n\n    var m = new Ext.draw.Matrix().translate(100, 100).\n    rotate(Math.PI).\n    translate(-100, - 100);\n\n    rect.setTransform(m);\n    main.renderFrame();\n\nIn the previous example we perform the following steps in order to achieve our\ndesired rotated output:\n\n - translate the rect to the right and down by 100\n - rotate by 180 degrees\n - translate the rect to the right and down by 100\n\n**Note:** A couple of things to note at this stage; 1) the rotation center point is\nthe upper left corner of the sprite by default and 2) with transformations, the\nsprite itself isn't transformed, but rather the entire coordinate plane of the sprite\nis transformed.  The coordinate plane itself is translated by 100 and then rotated\n180 degrees.  And that is why in the third step we translate the sprite using\nnegative values.  Translating by -100 in the third step results in the sprite\nvisually moving to the right and down within the draw container.\n\nFortunately there is a shortcut we can apply using two optional params of the rotate\nmethod allowing us to specify the center point of rotation:\n\n    @example\n    var drawContainer = new Ext.draw.Container({\n        renderTo: Ext.getBody(),\n        width: 380,\n        height: 380,\n        sprites: [{\n            type: 'rect',\n            width: 100,\n            height: 100,\n            fillStyle: 'red'\n        }]\n    });\n\n    var main = drawContainer.getSurface();\n    var rect = main.getItems()[0];\n\n    var m = new Ext.draw.Matrix().rotate(Math.PI, 100, 100);\n\n    rect.setTransform(m);\n    main.renderFrame();\n\n\nThis class is compatible with\n[SVGMatrix](http://www.w3.org/TR/SVG11/coords.html#InterfaceSVGMatrix) except:\n\n  1. Ext.draw.Matrix is not read only\n  2. Using Number as its values rather than floats\n\nUsing this class helps to reduce the severe numeric\n[problem with HTML Canvas and SVG transformation](http://stackoverflow.com/questions/8784405/large-numbers-in-html-canvas-translate-result-in-strange-behavior)\n\nAdditionally, there's no way to get the current transformation matrix\n[in Canvas](http://stackoverflow.com/questions/7395813/html5-canvas-get-transform-matrix).\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "text": "Performs matrix multiplication. This matrix is post-multiplied by another matrix.\n\n__Note:__ The given transform will come before the current one.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matrix",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "name": "0,931,33",
                      "type": "0,931,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,932,34,5",
                      "type": "0,932,17"
                    }
                  }
                ],
                "src": {
                  "text": "0,926,8,148"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "1,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,118,12",
                  "name": "1,120,0",
                  "text": "1,116,12,125"
                }
              },
              {
                "$type": "method",
                "name": "append",
                "text": "Postpend a matrix onto the current.\n\n__Note:__ The given transform will come before the current one.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xx",
                    "text": "Coefficient from x to x.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,279,24",
                      "text": "0,279,27,25",
                      "type": "0,279,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "xy",
                    "text": "Coefficient from x to y.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,280,24",
                      "text": "0,280,27,25",
                      "type": "0,280,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "yx",
                    "text": "Coefficient from y to x.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,281,24",
                      "text": "0,281,27,25",
                      "type": "0,281,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "yy",
                    "text": "Coefficient from y to y.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,282,24",
                      "text": "0,282,27,25",
                      "type": "0,282,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dx",
                    "text": "Offset of x.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,283,24",
                      "text": "0,283,27,13",
                      "type": "0,283,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dy",
                    "text": "Offset of y.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,284,24",
                      "text": "0,284,27,13",
                      "type": "0,284,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,285,34,5",
                      "type": "0,285,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,287,0",
                  "text": "0,275,8,102"
                }
              },
              {
                "$type": "method",
                "name": "appendMatrix",
                "text": "Postpend a matrix onto the current.\n\n__Note:__ The given transform will come before the current one.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matrix",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "name": "0,310,33",
                      "type": "0,310,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,311,34,5",
                      "type": "0,311,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,313,0",
                  "text": "0,306,8,102"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1251,37",
                      "text": "1,1251,42,57:1,1252,12,67",
                      "type": "1,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1253,29,48",
                      "type": "1,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1250,12",
                  "name": "1,1255,0",
                  "text": "1,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1338,37",
                      "text": "1,1338,42,57:1,1339,12,66",
                      "type": "1,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1340,29,52",
                      "type": "1,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1337,12",
                  "name": "1,1342,0",
                  "text": "1,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "clone",
                "text": "Clone this matrix.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "type": "0,473,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,475,0",
                  "text": "0,472,8,19"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Create an affine transform matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xx",
                    "text": "Coefficient from x to x\n",
                    "type": "Number",
                    "src": {
                      "name": "0,215,24",
                      "text": "0,215,27,24",
                      "type": "0,215,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "xy",
                    "text": "Coefficient from x to y\n",
                    "type": "Number",
                    "src": {
                      "name": "0,216,24",
                      "text": "0,216,27,24",
                      "type": "0,216,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "yx",
                    "text": "Coefficient from y to x\n",
                    "type": "Number",
                    "src": {
                      "name": "0,217,24",
                      "text": "0,217,27,24",
                      "type": "0,217,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "yy",
                    "text": "Coefficient from y to y\n",
                    "type": "Number",
                    "src": {
                      "name": "0,218,24",
                      "text": "0,218,27,24",
                      "type": "0,218,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dx",
                    "text": "Offset of x\n",
                    "type": "Number",
                    "src": {
                      "name": "0,219,24",
                      "text": "0,219,27,12",
                      "type": "0,219,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dy",
                    "text": "Offset of y\n",
                    "type": "Number",
                    "src": {
                      "name": "0,220,24",
                      "text": "0,220,27,12",
                      "type": "0,220,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,222,0",
                  "text": "0,213,8,36"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "1,1626,0",
                  "text": "1,1623,12,132"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Determines if this matrix has the same values as another matrix.\n",
                "name": "equals",
                "since": "6.0.1",
                "items": [
                  {
                    "$type": "param",
                    "name": "matrix",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "name": "0,750,33",
                      "type": "0,750,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,751,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "0,747,8",
                  "name": "0,753,0",
                  "since": "0,748,15"
                }
              },
              {
                "$type": "method",
                "name": "flipX",
                "text": "Horizontally flip the matrix\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,481,34,5",
                      "type": "0,481,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,483,0",
                  "text": "0,480,8,29"
                }
              },
              {
                "$type": "method",
                "name": "flipY",
                "text": "Vertically flip the matrix\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,489,34,5",
                      "type": "0,489,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,491,0",
                  "text": "0,488,8,27"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "get",
                "items": [
                  {
                    "$type": "param",
                    "name": "i",
                    "type": "Number",
                    "src": {
                      "name": "0,612,24",
                      "type": "0,612,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "j",
                    "type": "Number",
                    "src": {
                      "name": "0,613,24",
                      "type": "0,613,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,614,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,611,8",
                  "name": "0,616,0"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1469,29",
                      "text": "1,1469,35,40",
                      "type": "1,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1470,30",
                      "text": "1,1470,42,60",
                      "type": "1,1470,20",
                      "value": "1,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1471,29,27",
                      "type": "1,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1473,0",
                  "text": "1,1466,12,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "1,1506,12",
                  "name": "1,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getDX",
                "text": "Get offset x component of the matrix.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,863,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,865,0",
                  "text": "0,862,8,38"
                }
              },
              {
                "$type": "method",
                "name": "getDY",
                "text": "Get offset y component of the matrix.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,871,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,873,0",
                  "text": "0,870,8,38"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1551,29",
                      "text": "1,1551,35,37",
                      "type": "1,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "1,1552,35,48:1,1553,12,33",
                      "type": "1,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1555,0",
                  "text": "1,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getScaleX",
                "text": "Get the x scale of the matrix.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,813,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,815,0",
                  "text": "0,812,8,31"
                }
              },
              {
                "$type": "method",
                "name": "getScaleY",
                "text": "Get the y scale of the matrix.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,822,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,824,0",
                  "text": "0,821,8,31"
                }
              },
              {
                "$type": "method",
                "name": "getXX",
                "text": "Get x-to-x component of the matrix\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,831,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,833,0",
                  "text": "0,830,8,35"
                }
              },
              {
                "$type": "method",
                "name": "getXY",
                "text": "Get x-to-y component of the matrix.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,839,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,841,0",
                  "text": "0,838,8,36"
                }
              },
              {
                "$type": "method",
                "name": "getYX",
                "text": "Get y-to-x component of the matrix.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,847,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,849,0",
                  "text": "0,846,8,36"
                }
              },
              {
                "$type": "method",
                "name": "getYY",
                "text": "Get y-to-y component of the matrix.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,855,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,857,0",
                  "text": "0,854,8,36"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,1515,12",
                  "name": "1,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,1449,28",
                      "type": "1,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1450,31,5",
                      "type": "1,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1448,12",
                  "name": "1,1452,0",
                  "text": "1,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "inverse",
                "text": "Return a new matrix represents the opposite transformation of the current one.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "optional": true,
                    "text": "A target matrix. If present, it will receive\nthe result of inversion to avoid creating a new object.\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "name": "0,343,34",
                      "text": "0,343,42,45:0,344,8,57",
                      "type": "0,343,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "type": "0,346,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,348,0",
                  "text": "0,341,8,80"
                }
              },
              {
                "$type": "method",
                "name": "isEqual",
                "text": "Determines if this matrix has the same values as another matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matrix",
                    "text": "A maxtrix or array of its elements.\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "name": "0,731,33",
                      "text": "0,731,40,36",
                      "type": "0,731,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,732,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,734,0",
                  "text": "0,730,8,65"
                }
              },
              {
                "$type": "method",
                "name": "isIdentity",
                "text": "Determines whether this matrix is an identity matrix (no transform).\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,716,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,718,0",
                  "text": "0,715,8,69"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "1,1571,28",
                      "type": "1,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "1,1572,28",
                      "type": "1,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1573,29,20",
                      "type": "1,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1574,12",
                  "name": "1,1576,0",
                  "text": "1,1569,12,140"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "precisionCompensate",
                "text": "Split Matrix to `{{devicePixelRatio,c,0},{b,devicePixelRatio,0},{0,0,1}}.{{xx,0,dx},{0,yy,dy},{0,0,1}}`\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object with b,c,d=devicePixelRatio,xx,yy,dx,dy\n",
                    "type": "Object",
                    "src": {
                      "text": "0,542,25,47",
                      "type": "0,542,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "devicePixelRatio",
                    "src": {
                      "name": "0,544,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "comp",
                    "src": {
                      "name": "0,544,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,540,8",
                  "name": "0,544,0",
                  "text": "0,541,8,104"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "precisionCompensateRect",
                "text": "Split Matrix to `{{1,c,0},{b,d,0},{0,0,1}}.{{xx,0,dx},{0,xx,dy},{0,0,1}}`\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object with b,c,d,xx,yy=xx,dx,dy\n",
                    "type": "Object",
                    "src": {
                      "text": "0,566,25,33",
                      "type": "0,566,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "devicePixelRatio",
                    "src": {
                      "name": "0,568,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "comp",
                    "src": {
                      "name": "0,568,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,564,8",
                  "name": "0,568,0",
                  "text": "0,565,8,74"
                }
              },
              {
                "$type": "method",
                "name": "prepend",
                "text": "Prepend a matrix onto the current.\n\n__Note:__ The given transform will come after the current one.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xx",
                    "text": "Coefficient from x to x.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,237,24",
                      "text": "0,237,27,25",
                      "type": "0,237,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "xy",
                    "text": "Coefficient from x to y.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,238,24",
                      "text": "0,238,27,25",
                      "type": "0,238,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "yx",
                    "text": "Coefficient from y to x.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,239,24",
                      "text": "0,239,27,25",
                      "type": "0,239,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "yy",
                    "text": "Coefficient from y to y.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,240,24",
                      "text": "0,240,27,25",
                      "type": "0,240,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dx",
                    "text": "Offset of x.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,241,24",
                      "text": "0,241,27,13",
                      "type": "0,241,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dy",
                    "text": "Offset of y.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,242,24",
                      "text": "0,242,27,13",
                      "type": "0,242,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,243,34,5",
                      "type": "0,243,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,245,0",
                  "text": "0,233,8,100"
                }
              },
              {
                "$type": "method",
                "name": "prependMatrix",
                "text": "Prepend a matrix onto the current.\n\n__Note:__ The given transform will come after the current one.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matrix",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "name": "0,267,33",
                      "type": "0,267,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,268,34,5",
                      "type": "0,268,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,270,0",
                  "text": "0,264,8,99"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "reset",
                "text": "Reset the matrix to identical.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,533,34,5",
                      "type": "0,533,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,535,0",
                  "text": "0,532,8,31"
                }
              },
              {
                "$type": "method",
                "name": "rotate",
                "text": "Rotate the matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "angle",
                    "text": "Radians to rotate\n",
                    "type": "Number",
                    "src": {
                      "name": "0,420,24",
                      "text": "0,420,30,18",
                      "type": "0,420,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rcx",
                    "text": "Center of rotation.\n",
                    "type": "Number/null",
                    "src": {
                      "name": "0,421,29",
                      "text": "0,421,33,20",
                      "type": "0,421,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rcy",
                    "text": "Center of rotation.\n",
                    "type": "Number/null",
                    "src": {
                      "name": "0,422,29",
                      "text": "0,422,33,20",
                      "type": "0,422,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prepend",
                    "optional": true,
                    "text": "If `true`, this will transformation be prepended to the matrix.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,423,26",
                      "text": "0,423,35,64",
                      "type": "0,423,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,424,34,5",
                      "type": "0,424,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,426,0",
                  "text": "0,418,8,20"
                }
              },
              {
                "$type": "method",
                "name": "rotateFromVector",
                "text": "Rotate the matrix by the angle of a vector.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,454,24",
                      "type": "0,454,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,455,24",
                      "type": "0,455,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prepend",
                    "optional": true,
                    "text": "If `true`, this will transformation be prepended to the matrix.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,456,26",
                      "text": "0,456,35,64",
                      "type": "0,456,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,457,34,5",
                      "type": "0,457,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,459,0",
                  "text": "0,452,8,45"
                }
              },
              {
                "$type": "method",
                "name": "scale",
                "text": "Scale the matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sx",
                    "type": "Number",
                    "src": {
                      "name": "0,389,24",
                      "type": "0,389,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sy",
                    "type": "Number",
                    "src": {
                      "name": "0,390,24",
                      "type": "0,390,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scx",
                    "type": "Number",
                    "src": {
                      "name": "0,391,24",
                      "type": "0,391,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scy",
                    "type": "Number",
                    "src": {
                      "name": "0,392,24",
                      "type": "0,392,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prepend",
                    "optional": true,
                    "text": "If `true`, this will transformation be prepended to the matrix.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,393,26",
                      "text": "0,393,35,64",
                      "type": "0,393,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,394,34,5",
                      "type": "0,394,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,396,0",
                  "text": "0,387,8,19"
                }
              },
              {
                "$type": "method",
                "name": "set",
                "text": "Set the elements of a Matrix\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xx",
                    "type": "Number",
                    "src": {
                      "name": "0,319,24",
                      "type": "0,319,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "xy",
                    "type": "Number",
                    "src": {
                      "name": "0,320,24",
                      "type": "0,320,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "yx",
                    "type": "Number",
                    "src": {
                      "name": "0,321,24",
                      "type": "0,321,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "yy",
                    "type": "Number",
                    "src": {
                      "name": "0,322,24",
                      "type": "0,322,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dx",
                    "type": "Number",
                    "src": {
                      "name": "0,323,24",
                      "type": "0,323,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dy",
                    "type": "Number",
                    "src": {
                      "name": "0,324,24",
                      "type": "0,324,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,325,34,5",
                      "type": "0,325,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,327,0",
                  "text": "0,318,8,29"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1478,35",
                      "text": "1,1478,40,69",
                      "type": "1,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1479,29",
                      "text": "1,1479,36,41",
                      "type": "1,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1480,31,5",
                      "type": "1,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1482,0",
                  "text": "1,1476,12,46"
                }
              },
              {
                "$type": "method",
                "name": "shearX",
                "text": "Shear the matrix along the x-axis.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "factor",
                    "text": "The horizontal shear factor.\n",
                    "src": {
                      "name": "0,515,15",
                      "text": "0,515,22,29"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,516,34,5",
                      "type": "0,516,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,518,0",
                  "text": "0,514,8,35"
                }
              },
              {
                "$type": "method",
                "name": "shearY",
                "text": "Shear the matrix along the y-axis.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "factor",
                    "text": "The vertical shear factor.\n",
                    "src": {
                      "name": "0,524,15",
                      "text": "0,524,22,27"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,525,34,5",
                      "type": "0,525,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,527,0",
                  "text": "0,523,8,35"
                }
              },
              {
                "$type": "method",
                "name": "skewX",
                "text": "Skew the matrix\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "angle",
                    "type": "Number",
                    "src": {
                      "name": "0,497,24",
                      "type": "0,497,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,498,34,5",
                      "type": "0,498,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,500,0",
                  "text": "0,496,8,16"
                }
              },
              {
                "$type": "method",
                "name": "skewY",
                "text": "Skew the matrix\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "angle",
                    "type": "Number",
                    "src": {
                      "name": "0,506,24",
                      "type": "0,506,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,507,34,5",
                      "type": "0,507,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,509,0",
                  "text": "0,505,8,16"
                }
              },
              {
                "$type": "method",
                "name": "split",
                "text": "Splits this transformation matrix into Scale, Rotate, Translate components,\nassuming it was produced by applying transformations in that order.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "0,880,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,882,0",
                  "text": "0,878,8,144"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "1,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1160,12",
                  "name": "1,1163,0",
                  "text": "1,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "toArray",
                "text": "Create an array of elements by horizontal order (xx,yx,dx,yx,yy,dy).\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "0,759,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,761,0",
                  "text": "0,758,8,69"
                }
              },
              {
                "$type": "method",
                "name": "toContext",
                "text": "Apply the matrix to a drawing context.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ctx",
                    "type": "Object",
                    "src": {
                      "name": "0,786,24",
                      "type": "0,786,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,787,34,5",
                      "type": "0,787,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,789,0",
                  "text": "0,785,8,39"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Get an array of elements.\nThe numbers are rounded to keep only 4 decimals.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "0,777,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,779,0",
                  "text": "0,775,8,75"
                }
              },
              {
                "$type": "method",
                "name": "toSvg",
                "text": "Return a string that can be used as transform attribute in SVG.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,796,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,798,0",
                  "text": "0,795,8,64"
                }
              },
              {
                "$type": "method",
                "name": "toVerticalArray",
                "text": "Create an array of elements by vertical order (xx,xy,yx,yy,dx,dy).\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Array/String",
                    "src": {
                      "type": "0,768,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,770,0",
                  "text": "0,767,8,67"
                }
              },
              {
                "$type": "method",
                "name": "transformBBox",
                "items": [
                  {
                    "$type": "param",
                    "name": "bbox",
                    "text": "Given as `{x: Number, y: Number, width: Number, height: Number}`.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,643,24",
                      "text": "0,643,29,66",
                      "type": "0,643,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "radius",
                    "optional": true,
                    "type": "Number",
                    "src": {
                      "name": "0,644,25",
                      "type": "0,644,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "optional": true,
                    "text": "Optional target object to recieve the result.\nRecommended to use it for better gc.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,645,25",
                      "text": "0,645,33,46:0,646,8,38",
                      "type": "0,645,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Object with x, y, width and height.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,648,25,36",
                      "type": "0,648,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,650,0"
                }
              },
              {
                "$type": "method",
                "name": "transformList",
                "text": "Transform a list for points.\n\n__Note:__ will change the original list but not points inside it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "list",
                    "type": "Array",
                    "src": {
                      "name": "0,694,23",
                      "type": "0,694,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "list\n",
                    "type": "Array",
                    "src": {
                      "text": "0,695,24,5",
                      "type": "0,695,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,697,0",
                  "text": "0,691,8,96"
                }
              },
              {
                "$type": "method",
                "name": "transformPoint",
                "text": "Transform a point to a new array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "point",
                    "type": "Array",
                    "src": {
                      "name": "0,622,23",
                      "type": "0,622,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "0,623,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,625,0",
                  "text": "0,621,8,34"
                }
              },
              {
                "$type": "method",
                "name": "translate",
                "text": "Translate the matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,373,24",
                      "type": "0,373,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,374,24",
                      "type": "0,374,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prepend",
                    "optional": true,
                    "text": "If `true`, this will transformation be prepended to the matrix.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,375,26",
                      "text": "0,375,35,64",
                      "type": "0,375,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "text": "0,376,34,5",
                      "type": "0,376,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,378,0",
                  "text": "0,371,8,23"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "1,1589,30",
                      "text": "1,1589,36,44",
                      "type": "1,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1590,31,5",
                      "type": "1,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1591,12",
                  "name": "1,1593,0",
                  "text": "1,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              },
              {
                "$type": "method",
                "name": "x",
                "text": "Transform point returning the x component of the result.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,589,24",
                      "type": "0,589,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,590,24",
                      "type": "0,590,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "x component of the result.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,591,25,27",
                      "type": "0,591,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,593,0",
                  "text": "0,588,8,57"
                }
              },
              {
                "$type": "method",
                "name": "y",
                "text": "Transform point returning the y component of the result.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,600,24",
                      "type": "0,600,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,601,24",
                      "type": "0,601,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "y component of the result.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,602,25,27",
                      "type": "0,602,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,604,0",
                  "text": "0,599,8,57"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "1,1049,13",
                  "name": "1,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1066,12",
                  "name": "1,1062,33",
                  "since": "1,1067,19",
                  "text": "1,1063,12,225",
                  "type": "1,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1076,12",
                  "name": "1,1072,33",
                  "since": "1,1077,19",
                  "text": "1,1073,12,229",
                  "type": "1,1072,23"
                }
              },
              {
                "$type": "property",
                "name": "a",
                "text": "Get x-to-x component of the matrix. Avoid using it for performance consideration.\nUse {@link #method!getXX #getXX} instead.\n",
                "type": "Number",
                "src": {
                  "name": "0,913,31",
                  "text": "0,913,33,82:0,914,12,28",
                  "type": "0,913,23"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1102,12",
                  "name": "1,1100,32",
                  "text": "1,1101,12,69",
                  "type": "1,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1084,12",
                  "name": "1,1082,32",
                  "readonly": "1,1085,12",
                  "since": "1,1086,19",
                  "text": "1,1083,12,64",
                  "type": "1,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1093,12",
                  "name": "1,1091,32",
                  "readonly": "1,1094,12",
                  "since": "1,1095,19",
                  "text": "1,1092,12,75",
                  "type": "1,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1056,12",
                  "name": "1,1053,32",
                  "readonly": "1,1057,12",
                  "text": "1,1054,12,94",
                  "type": "1,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "1,1413,12",
                  "name": "1,1379,34",
                  "text": "1,1380,12,1011",
                  "type": "1,1379,23"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,940,28",
                      "type": "1,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "1,941,32",
                      "text": "1,941,44,49",
                      "type": "1,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,942,12",
                  "inheritable": "1,944,12",
                  "name": "1,946,0",
                  "static": "1,943,12",
                  "text": "1,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,464,28",
                      "type": "1,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,461,12",
                  "inheritable": "1,463,12",
                  "name": "1,466,0",
                  "static": "1,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "1,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,659,12",
                  "inheritable": "1,661,12",
                  "name": "1,665,0",
                  "static": "1,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,522,28",
                      "text": "1,522,36,34",
                      "type": "1,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,523,30",
                      "text": "1,523,46,39",
                      "type": "1,523,20",
                      "value": "1,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,524,30",
                      "text": "1,524,45,45:1,525,12,53",
                      "type": "1,524,20",
                      "value": "1,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,527,12",
                  "name": "1,529,0",
                  "static": "1,526,12",
                  "text": "1,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,450,28",
                      "type": "1,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,451,31,5",
                      "type": "1,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,453,12",
                  "name": "1,455,0",
                  "static": "1,452,12",
                  "text": "1,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "1,693,30",
                      "text": "1,693,40,33",
                      "type": "1,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "1,694,34",
                      "text": "1,694,42,35",
                      "type": "1,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,695,31,5",
                      "type": "1,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,698,12",
                  "inheritable": "1,697,12",
                  "name": "1,700,0",
                  "static": "1,696,12",
                  "text": "1,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,810,12",
                  "inheritable": "1,812,12",
                  "name": "1,814,0",
                  "static": "1,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,824,12",
                  "inheritable": "1,826,12",
                  "name": "1,828,0",
                  "static": "1,825,12"
                }
              },
              {
                "$type": "method",
                "name": "create",
                "static": true,
                "text": "Create a matrix from `mat`. If `mat` is already a matrix, returns it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "mat",
                    "type": "Mixed",
                    "src": {
                      "name": "0,201,27",
                      "type": "0,201,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "type": "0,202,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,204,0",
                  "static": "0,199,12",
                  "text": "0,200,12,70"
                }
              },
              {
                "$type": "method",
                "name": "createAffineMatrixFromTwoPair",
                "static": true,
                "text": "Return the affine matrix that transform two points (x0, y0) and (x1, y1) to (x0p, y0p) and (x1p, y1p)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x0",
                    "type": "Number",
                    "src": {
                      "name": "0,116,28",
                      "type": "0,116,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y0",
                    "type": "Number",
                    "src": {
                      "name": "0,117,28",
                      "type": "0,117,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x1",
                    "type": "Number",
                    "src": {
                      "name": "0,118,28",
                      "type": "0,118,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1",
                    "type": "Number",
                    "src": {
                      "name": "0,119,28",
                      "type": "0,119,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x0p",
                    "type": "Number",
                    "src": {
                      "name": "0,120,28",
                      "type": "0,120,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y0p",
                    "type": "Number",
                    "src": {
                      "name": "0,121,28",
                      "type": "0,121,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x1p",
                    "type": "Number",
                    "src": {
                      "name": "0,122,28",
                      "type": "0,122,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1p",
                    "type": "Number",
                    "src": {
                      "name": "0,123,28",
                      "type": "0,123,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,125,0",
                  "static": "0,114,12",
                  "text": "0,115,12,102"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1018,35",
                      "text": "1,1018,41,63:1,1019,12,43",
                      "type": "1,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1020,35",
                      "text": "1,1020,42,25",
                      "type": "1,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,1022,12",
                  "name": "1,1025,0",
                  "static": "1,1021,12",
                  "text": "1,998,12,456"
                }
              },
              {
                "$type": "method",
                "name": "createPanZoomFromTwoPair",
                "static": true,
                "text": "Return the affine matrix that transform two points (x0, y0) and (x1, y1) to (x0p, y0p) and (x1p, y1p)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x0",
                    "type": "Number",
                    "src": {
                      "name": "0,142,28",
                      "type": "0,142,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y0",
                    "type": "Number",
                    "src": {
                      "name": "0,143,28",
                      "type": "0,143,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x1",
                    "type": "Number",
                    "src": {
                      "name": "0,144,28",
                      "type": "0,144,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1",
                    "type": "Number",
                    "src": {
                      "name": "0,145,28",
                      "type": "0,145,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x0p",
                    "type": "Number",
                    "src": {
                      "name": "0,146,28",
                      "type": "0,146,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y0p",
                    "type": "Number",
                    "src": {
                      "name": "0,147,28",
                      "type": "0,147,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x1p",
                    "type": "Number",
                    "src": {
                      "name": "0,148,28",
                      "type": "0,148,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1p",
                    "type": "Number",
                    "src": {
                      "name": "0,149,28",
                      "type": "0,149,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,151,0",
                  "static": "0,140,12",
                  "text": "0,141,12,102"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,347,12",
                  "inheritable": "1,349,12",
                  "name": "1,352,0",
                  "static": "1,348,12"
                }
              },
              {
                "$type": "method",
                "name": "fly",
                "static": true,
                "text": "Create a flyweight to wrap the given array.\nThe flyweight will directly refer the object and the elements can be changed by other methods.\n\nDo not hold the instance of flyweight matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "elements",
                    "type": "Array",
                    "src": {
                      "name": "0,178,27",
                      "type": "0,178,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "type": "0,179,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,181,0",
                  "static": "0,172,12",
                  "text": "0,173,12,187"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "1,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,968,12",
                  "inheritable": "1,970,12",
                  "name": "1,972,0",
                  "static": "1,969,12",
                  "text": "1,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "1,989,29,10",
                      "type": "1,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,991,12",
                  "name": "1,993,0",
                  "static": "1,990,12",
                  "text": "1,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "1,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,840,12",
                  "inheritable": "1,842,12",
                  "name": "1,844,0",
                  "static": "1,841,12",
                  "text": "1,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "1,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "1,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,424,12",
                  "inheritable": "1,426,12",
                  "name": "1,428,0",
                  "static": "1,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,762,28",
                      "text": "1,762,36,52:1,763,12,66",
                      "type": "1,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,764,31,11",
                      "type": "1,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,766,12",
                  "name": "1,768,0",
                  "static": "1,765,12",
                  "text": "1,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "1,402,12",
                  "inheritable": "1,404,12",
                  "name": "1,406,0",
                  "static": "1,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "1,395,12",
                  "inheritable": "1,397,12",
                  "name": "1,399,0",
                  "static": "1,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "extends": "0,108,0",
          "name": "0,108,0",
          "text": "0,2,4,3727"
        }
      }
    ]
  },
  "version": 1
}