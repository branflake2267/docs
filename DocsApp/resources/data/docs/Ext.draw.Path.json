{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/draw/Path.js",
    "../../../ext/packages/charts/src/draw/overrides/Path.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.draw.Path",
        "requires": "Ext.draw.Draw",
        "text": "Class representing a path.\nDesigned to be compatible with [CanvasPathMethods](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvaspathmethods)\nand will hopefully be replaced by the browsers' implementation of the Path object.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "approximateArc",
                "items": [
                  {
                    "$type": "param",
                    "name": "result",
                    "type": "Array",
                    "src": {
                      "name": "0,349,23",
                      "type": "0,349,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cx",
                    "type": "Number",
                    "src": {
                      "name": "0,350,24",
                      "type": "0,350,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cy",
                    "type": "Number",
                    "src": {
                      "name": "0,351,24",
                      "type": "0,351,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rx",
                    "type": "Number",
                    "src": {
                      "name": "0,352,24",
                      "type": "0,352,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ry",
                    "type": "Number",
                    "src": {
                      "name": "0,353,24",
                      "type": "0,353,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "phi",
                    "type": "Number",
                    "src": {
                      "name": "0,354,24",
                      "type": "0,354,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "theta1",
                    "type": "Number",
                    "src": {
                      "name": "0,355,24",
                      "type": "0,355,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "theta2",
                    "type": "Number",
                    "src": {
                      "name": "0,356,24",
                      "type": "0,356,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,357,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,348,8",
                  "name": "0,359,0"
                }
              },
              {
                "$type": "method",
                "name": "arc",
                "text": "Create an circular arc.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,316,24",
                      "type": "0,316,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,317,24",
                      "type": "0,317,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "radius",
                    "type": "Number",
                    "src": {
                      "name": "0,318,24",
                      "type": "0,318,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startAngle",
                    "type": "Number",
                    "src": {
                      "name": "0,319,24",
                      "type": "0,319,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "endAngle",
                    "type": "Number",
                    "src": {
                      "name": "0,320,24",
                      "type": "0,320,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anticlockwise",
                    "type": "Number",
                    "src": {
                      "name": "0,321,24",
                      "type": "0,321,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,323,0",
                  "text": "0,314,8,25"
                }
              },
              {
                "$type": "method",
                "name": "arcSvg",
                "text": "[http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes](http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "rx",
                    "type": "Number",
                    "src": {
                      "name": "0,415,24",
                      "type": "0,415,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ry",
                    "type": "Number",
                    "src": {
                      "name": "0,416,24",
                      "type": "0,416,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rotation",
                    "text": "Differ from svg spec, this is radian.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,417,24",
                      "text": "0,417,33,38",
                      "type": "0,417,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fA",
                    "type": "Number",
                    "src": {
                      "name": "0,418,24",
                      "type": "0,418,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fS",
                    "type": "Number",
                    "src": {
                      "name": "0,419,24",
                      "type": "0,419,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x2",
                    "type": "Number",
                    "src": {
                      "name": "0,420,24",
                      "type": "0,420,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y2",
                    "type": "Number",
                    "src": {
                      "name": "0,421,24",
                      "type": "0,421,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,423,0",
                  "text": "0,414,8,127"
                }
              },
              {
                "$type": "method",
                "name": "arcTo",
                "text": "Create a elliptic arc curve compatible with SVG's arc to instruction.\n\nThe curve start from (`x1`, `y1`) and ends at (`x2`, `y2`). The ellipse\nhas radius `rx` and `ry` and a rotation of `rotation`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x1",
                    "type": "Number",
                    "src": {
                      "name": "0,152,24",
                      "type": "0,152,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1",
                    "type": "Number",
                    "src": {
                      "name": "0,153,24",
                      "type": "0,153,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x2",
                    "type": "Number",
                    "src": {
                      "name": "0,154,24",
                      "type": "0,154,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y2",
                    "type": "Number",
                    "src": {
                      "name": "0,155,24",
                      "type": "0,155,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rx",
                    "optional": true,
                    "type": "Number",
                    "src": {
                      "name": "0,156,25",
                      "type": "0,156,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ry",
                    "optional": true,
                    "type": "Number",
                    "src": {
                      "name": "0,157,25",
                      "type": "0,157,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rotation",
                    "optional": true,
                    "type": "Number",
                    "src": {
                      "name": "0,158,25",
                      "type": "0,158,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,160,0",
                  "text": "0,148,8,198"
                }
              },
              {
                "$type": "method",
                "name": "bezierCurveTo",
                "text": "A cubic bezier curve to a position.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cx1",
                    "type": "Number",
                    "src": {
                      "name": "0,97,24",
                      "type": "0,97,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cy1",
                    "type": "Number",
                    "src": {
                      "name": "0,98,24",
                      "type": "0,98,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cx2",
                    "type": "Number",
                    "src": {
                      "name": "0,99,24",
                      "type": "0,99,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cy2",
                    "type": "Number",
                    "src": {
                      "name": "0,100,24",
                      "type": "0,100,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,101,24",
                      "type": "0,101,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,102,24",
                      "type": "0,102,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,104,0",
                  "text": "0,96,8,36"
                }
              },
              {
                "$type": "method",
                "name": "clear",
                "text": "Clear the path.\n",
                "src": {
                  "name": "0,39,0",
                  "text": "0,37,8,16"
                }
              },
              {
                "$type": "method",
                "name": "clone",
                "text": "Clone this path.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.draw.Path",
                    "src": {
                      "type": "0,688,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,690,0",
                  "text": "0,687,8,17"
                }
              },
              {
                "$type": "method",
                "name": "closePath",
                "text": "Close this path with a straight line.\n",
                "src": {
                  "name": "0,138,0",
                  "text": "0,136,8,38"
                }
              },
              {
                "$type": "method",
                "constructor": true,
                "name": "constructor",
                "text": "Create a path from pathString.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pathString",
                    "type": "String",
                    "src": {
                      "name": "0,18,24",
                      "type": "0,18,16"
                    }
                  }
                ],
                "src": {
                  "constructor": "0,17,8",
                  "name": "0,20,0",
                  "text": "0,16,8,31"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "curveDimension",
                "text": "Determine the curve\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "a",
                    "type": "Number",
                    "src": {
                      "name": "0,883,24",
                      "type": "0,883,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "b",
                    "type": "Number",
                    "src": {
                      "name": "0,884,24",
                      "type": "0,884,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "c",
                    "type": "Number",
                    "src": {
                      "name": "0,885,24",
                      "type": "0,885,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "d",
                    "type": "Number",
                    "src": {
                      "name": "0,886,24",
                      "type": "0,886,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dim",
                    "type": "Number",
                    "src": {
                      "name": "0,887,24",
                      "type": "0,887,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,881,8",
                  "name": "0,889,0",
                  "text": "0,882,8,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "dirt",
                "src": {
                  "access": "0,50,8",
                  "name": "0,52,0"
                }
              },
              {
                "$type": "method",
                "name": "ellipse",
                "text": "Create an elliptic arc.\n\nSee [the whatwg reference of ellipse](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-ellipse).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cx",
                    "type": "Number",
                    "src": {
                      "name": "0,259,24",
                      "type": "0,259,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cy",
                    "type": "Number",
                    "src": {
                      "name": "0,260,24",
                      "type": "0,260,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "radiusX",
                    "type": "Number",
                    "src": {
                      "name": "0,261,24",
                      "type": "0,261,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "radiusY",
                    "type": "Number",
                    "src": {
                      "name": "0,262,24",
                      "type": "0,262,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rotation",
                    "type": "Number",
                    "src": {
                      "name": "0,263,24",
                      "type": "0,263,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startAngle",
                    "type": "Number",
                    "src": {
                      "name": "0,264,24",
                      "type": "0,264,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "endAngle",
                    "type": "Number",
                    "src": {
                      "name": "0,265,24",
                      "type": "0,265,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anticlockwise",
                    "type": "Number",
                    "src": {
                      "name": "0,266,24",
                      "type": "0,266,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,268,0",
                  "text": "0,255,8,173"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "expandDimension",
                "text": "Expand the rect by the bbox of a bezier curve.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "type": "Object",
                    "src": {
                      "name": "0,851,24",
                      "type": "0,851,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x1",
                    "type": "Number",
                    "src": {
                      "name": "0,852,24",
                      "type": "0,852,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1",
                    "type": "Number",
                    "src": {
                      "name": "0,853,24",
                      "type": "0,853,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cx1",
                    "type": "Number",
                    "src": {
                      "name": "0,854,24",
                      "type": "0,854,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cy1",
                    "type": "Number",
                    "src": {
                      "name": "0,855,24",
                      "type": "0,855,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cx2",
                    "type": "Number",
                    "src": {
                      "name": "0,856,24",
                      "type": "0,856,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cy2",
                    "type": "Number",
                    "src": {
                      "name": "0,857,24",
                      "type": "0,857,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x2",
                    "type": "Number",
                    "src": {
                      "name": "0,858,24",
                      "type": "0,858,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y2",
                    "type": "Number",
                    "src": {
                      "name": "0,859,24",
                      "type": "0,859,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,848,8",
                  "name": "0,861,0",
                  "text": "0,849,8,48"
                }
              },
              {
                "$type": "method",
                "name": "fromStripes",
                "text": "Reconstruct path from cubic bezier curve stripes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "stripes",
                    "type": "Array",
                    "src": {
                      "name": "0,958,23",
                      "type": "0,958,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,960,0",
                  "text": "0,957,8,50"
                }
              },
              {
                "$type": "method",
                "name": "fromSvgString",
                "text": "Feed the path from svg path string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pathString",
                    "type": "String",
                    "src": {
                      "name": "0,477,24",
                      "type": "0,477,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,479,0",
                  "text": "0,476,8,36"
                }
              },
              {
                "$type": "method",
                "name": "getDimension",
                "text": "Get the bounding box of this matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "optional": true,
                    "text": "Optional object to receive the result.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,727,25",
                      "text": "0,727,33,39",
                      "type": "0,727,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Object with x, y, width and height\n",
                    "type": "Object",
                    "src": {
                      "text": "0,729,25,35",
                      "type": "0,729,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,731,0",
                  "text": "0,726,8,37"
                }
              },
              {
                "$type": "method",
                "name": "getDimensionWithTransform",
                "text": "Get the bounding box as if the path is transformed by a matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matrix",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "name": "0,784,33",
                      "type": "0,784,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "optional": true,
                    "text": "Optional object to receive the result.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,785,25",
                      "text": "0,785,33,39",
                      "type": "0,785,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with x, y, width and height.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,787,25,39",
                      "type": "0,787,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,789,0",
                  "text": "0,782,8,65"
                }
              },
              {
                "$type": "method",
                "name": "getSegmentIntersections",
                "text": "Calculates the points where the given segment intersects the path.\nIf four parameters are given then the segment is considered to be a line segment,\nwhere given parameters are the coordinates of the start and end points.\nIf eight parameters are given then the segment is considered to be\na cubic Bezier curve segment, where given parameters are the\ncoordinates of its edge points and control points.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x1",
                    "src": {
                      "name": "1,146,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1",
                    "src": {
                      "name": "1,147,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x2",
                    "src": {
                      "name": "1,148,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y2",
                    "src": {
                      "name": "1,149,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x3",
                    "src": {
                      "name": "1,150,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y3",
                    "src": {
                      "name": "1,151,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x4",
                    "src": {
                      "name": "1,152,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y4",
                    "src": {
                      "name": "1,153,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "1,154,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,157,0",
                  "text": "1,140,8,400"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.draw.Path-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "interpolate",
                "text": "Returns `a * (1 - t) ^ 3 + 3 * b (1 - t) ^ 2 * t + 3 * c (1 - t) * t ^ 3 + d * t ^ 3`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "a",
                    "type": "Number",
                    "src": {
                      "name": "0,938,24",
                      "type": "0,938,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "b",
                    "type": "Number",
                    "src": {
                      "name": "0,939,24",
                      "type": "0,939,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "c",
                    "type": "Number",
                    "src": {
                      "name": "0,940,24",
                      "type": "0,940,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "d",
                    "type": "Number",
                    "src": {
                      "name": "0,941,24",
                      "type": "0,941,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "type": "Number",
                    "src": {
                      "name": "0,942,24",
                      "type": "0,942,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,943,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,934,8",
                  "name": "0,945,0",
                  "text": "0,936,8,88"
                }
              },
              {
                "$type": "method",
                "name": "isPointInPath",
                "text": "Tests whether the given point is inside the path.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "1,17,24",
                      "type": "1,17,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "1,18,24",
                      "type": "1,18,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,19,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,22,0",
                  "text": "1,16,8,50"
                }
              },
              {
                "$type": "method",
                "name": "isPointOnPath",
                "text": "Tests whether the given point is on the path.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "1,80,24",
                      "type": "1,80,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "1,81,24",
                      "type": "1,81,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,82,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,85,0",
                  "text": "1,79,8,46"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.draw.Path-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "lineTo",
                "text": "A straight line to a position.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,77,24",
                      "type": "0,77,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,78,24",
                      "type": "0,78,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,80,0",
                  "text": "0,76,8,31"
                }
              },
              {
                "$type": "method",
                "name": "moveTo",
                "text": "Move to a position.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,58,24",
                      "type": "0,58,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,59,24",
                      "type": "0,59,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,61,0",
                  "text": "0,57,8,20"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.draw.Path-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.draw.Path-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "quadraticCurveTo",
                "text": "A quadratic bezier curve to a position.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cx",
                    "type": "Number",
                    "src": {
                      "name": "0,118,24",
                      "type": "0,118,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cy",
                    "type": "Number",
                    "src": {
                      "name": "0,119,24",
                      "type": "0,119,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,120,24",
                      "type": "0,120,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,121,24",
                      "type": "0,121,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,123,0",
                  "text": "0,117,8,40"
                }
              },
              {
                "$type": "method",
                "name": "rect",
                "text": "Draw a rectangle and close it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,330,24",
                      "type": "0,330,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,331,24",
                      "type": "0,331,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "width",
                    "type": "Number",
                    "src": {
                      "name": "0,332,24",
                      "type": "0,332,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "type": "Number",
                    "src": {
                      "name": "0,333,24",
                      "type": "0,333,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,335,0",
                  "text": "0,328,8,32"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.draw.Path-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.draw.Path-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.draw.Path-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.draw.Path-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Return an svg path string for this path.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,1053,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1055,0",
                  "text": "0,1052,8,41"
                }
              },
              {
                "$type": "method",
                "name": "toStripes",
                "text": "Convert path to bezier curve stripes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "optional": true,
                    "text": "The optional array to receive the result.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,983,24",
                      "text": "0,983,32,42",
                      "type": "0,983,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "0,984,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,986,0",
                  "text": "0,982,8,38"
                }
              },
              {
                "$type": "method",
                "name": "transform",
                "text": "Transform the current path by a matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matrix",
                    "type": "Ext.draw.Matrix",
                    "src": {
                      "name": "0,704,33",
                      "type": "0,704,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,706,0",
                  "text": "0,703,8,40"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateSvgString",
                "text": "Update cache for svg string of this path.\n",
                "src": {
                  "access": "0,1018,8",
                  "name": "0,1021,0",
                  "text": "0,1019,8,42"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.draw.Path-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.draw.Path-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.draw.Path-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.draw.Path-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.draw.Path-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.draw.Path-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.draw.Path-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.draw.Path-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.draw.Path-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.draw.Path-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.draw.Path-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,6,0",
          "requires": "0,7,0",
          "text": "0,2,4,264"
        }
      }
    ]
  },
  "version": 1
}