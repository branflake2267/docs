{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/env/Ready.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.env.Ready",
        "since": "5.0.0",
        "singleton": true,
        "text": "This class manages ready detection and handling. Direct use of this class is not\nrecommended. Instead use `Ext.onReady`:\n\n     Ext.onReady(function () {\n         // DOM and Framework are ready...\n     });\n\n## DOM Ready\n\nThe lowest-level of readiness is DOM readiness. This level implies only that the document\nbody exists. Many things require the DOM to be ready for manipulation. If that is all\nthat is required, the `Ext.onDocumentReady` method can be called to register a callback\nto be called as soon as the DOM is ready:\n\n     Ext.onDocumentReady(function () {\n         // the document body is ready\n     });\n\n## Framework Ready\n\nIn production builds of applications it is common to have all of the code loaded before\nDOM ready, so the need to wait for \"onReady\" is often confused with only that concern.\nThis is easy to understand, at least in part because historically `Ext.onReady` only\nwaited for DOM ready.\n\nWith the introduction of `{@link Ext.Loader}`, however, it became common for DOM ready to occur\nin the middle of dynamically loading code. If application code were executed at that\ntime, any use of the yet-to-be-loaded classes would throw errors. As a consequence of\nthis, the `Ext.onReady` mechanism was extended to wait for both DOM ready *and* all of\nthe required classes to be loaded.\n\nWhen the framework enters or leaves a state where it is not ready (for example, the\nfirst dynamic load is requested or last load completes), `{@link Ext.env.Ready}` is informed.\nFor example:\n\n     Ext.env.Ready.block();\n\n     //...\n\n     Ext.env.Ready.unblock();\n\nWhen there are no blocks and the DOM is ready, the Framework is ready and the \"onReady\"\ncallbacks are called.\n\nPriority can be used to control the ordering of onReady listeners, for example:\n\n    Ext.onReady(function() {\n\n    }, null, {\n        priority: 100\n    });\n\nReady listeners with higher priorities will run sooner than those with lower priorities,\nthe default priority being `0`.  Internally the framework reserves priorities of 1000\nor greater, and -1000 or lesser for onReady handlers that must run before or after\nany application code.  Applications should stick to using priorities in the -999 - 999\nrange. The following priorities are currently in use by the framework:\n\n- Element_scroll rtl override: `1001`\n- Event system initialization: `2000`\n- Ext.dom.Element: `1500`\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "bind",
                "text": "Binds the appropriate browser event for checking if the DOM has loaded.\n",
                "src": {
                  "access": "0,162,8",
                  "name": "0,164,0",
                  "text": "0,161,8,72"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fireReady",
                "text": "This method starts the process of firing the ready event. This may be delayed based\non the `{@link #property!delay delay}` property.\n",
                "src": {
                  "access": "0,195,8",
                  "name": "0,197,0",
                  "text": "0,193,8,109"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleReady",
                "text": "This method iterates over the `{@link #property!listeners listeners}` and invokes them. This advances the\n`{@link #property!state state}` from 1 to 2 and ensure the proper subset of `{@link #property!listeners listeners}` are invoked.\n",
                "src": {
                  "access": "0,228,8",
                  "name": "0,230,0",
                  "text": "0,226,8,155"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleReadySoon",
                "text": "This method is called to schedule a call to `{@link #method!handleReady handleReady}` using a `setTimeout`. It\nensures that only one timer is pending.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "delay",
                    "optional": true,
                    "text": "If passed, this overrides the `{@link #property!delay delay}` property.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,245,25",
                      "text": "0,245,32,48",
                      "type": "0,245,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,246,8",
                  "name": "0,248,0",
                  "text": "0,243,8,123"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "invoke",
                "text": "This method invokes the given `listener` instance based on its options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listener",
                    "type": "Object",
                    "src": {
                      "name": "0,261,24",
                      "type": "0,261,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,263,0",
                  "text": "0,260,8,72"
                }
              },
              {
                "$type": "method",
                "name": "invokeAll",
                "text": "Invokes as many listeners as are appropriate given the current state. This should\nonly be called when DOM ready is achieved. The remaining business of `{@link #property!blocks blocks}` is\nhandled here.\n",
                "src": {
                  "name": "0,282,0",
                  "text": "0,278,8,177"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "makeListener",
                "text": "This method wraps the given listener pieces in a proper object for the `{@link #property!listeners listeners}`\narray and `{@link #method!invoke invoke}` methods.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method to call.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,332,26",
                      "text": "0,332,29,20",
                      "type": "0,332,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the `fn` executes.\nDefaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,333,25",
                      "text": "0,333,32,57:0,334,8,32",
                      "type": "0,333,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object with extra options.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "delay",
                        "optional": true,
                        "text": "A number of milliseconds to delay.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "0,336,33",
                          "text": "0,336,42,35",
                          "type": "0,336,16",
                          "value": "0,336,39"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "Relative priority of this callback. A larger\nnumber will result in the callback being sorted before the others.  Priorities\n1000 or greater and -1000 or lesser are reserved for internal framework use only.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "0,337,33",
                          "text": "0,337,45,45:0,338,8,161",
                          "type": "0,337,16",
                          "value": "0,337,42"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "dom",
                        "optional": true,
                        "text": "Pass `true` to only wait for DOM ready, `false`\nmeans full Framework and DOM readiness.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "0,340,34",
                          "text": "0,340,45,48:0,341,8,40",
                          "type": "0,340,16",
                          "value": "0,340,38"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,335,25",
                      "text": "0,335,34,30",
                      "type": "0,335,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The listener instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,342,25,23",
                      "type": "0,342,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,343,8",
                  "name": "0,345,0",
                  "text": "0,330,8,111"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "on",
                "text": "Adds a listener to be notified when the document is ready (before onload and before\nimages are loaded).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method to call.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,364,26",
                      "text": "0,364,29,20",
                      "type": "0,364,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the `fn` executes.\nDefaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,365,25",
                      "text": "0,365,32,57:0,366,8,32",
                      "type": "0,365,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object with extra options.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "delay",
                        "optional": true,
                        "text": "A number of milliseconds to delay.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "0,368,33",
                          "text": "0,368,42,35",
                          "type": "0,368,16",
                          "value": "0,368,39"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "Relative priority of this callback. A larger\nnumber will result in the callback being sorted before the others.  Priorities\n1000 or greater and -1000 or lesser are reserved for internal framework use only.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "0,369,33",
                          "text": "0,369,45,45:0,370,8,161",
                          "type": "0,369,16",
                          "value": "0,369,42"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "dom",
                        "optional": true,
                        "text": "Pass `true` to only wait for DOM ready, `false`\nmeans full Framework and DOM readiness.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "0,372,34",
                          "text": "0,372,45,48:0,373,8,40",
                          "type": "0,372,16",
                          "value": "0,372,38"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,367,25",
                      "text": "0,367,34,30",
                      "type": "0,367,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,374,8",
                  "name": "0,376,0",
                  "text": "0,361,8,105"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onReadyEvent",
                "text": "This is a generic event handler method attached to all of the various events that\nmay indicate ready state. The first call to this method indicates ready state has\nbeen achieved.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ev",
                    "optional": true,
                    "text": "The event instance.\n",
                    "type": "Event",
                    "src": {
                      "name": "0,406,24",
                      "text": "0,406,28,20",
                      "type": "0,406,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,407,8",
                  "name": "0,409,0",
                  "text": "0,403,8,179"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onReadyStateChange",
                "text": "This event handler is called when the readyState changes.\n",
                "src": {
                  "access": "0,601,16",
                  "name": "0,603,0",
                  "text": "0,600,16,58"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "pollScroll",
                "text": "This strategy has minimal benefits for Sencha solutions that build\nthemselves (ie. minimal initial page markup). However, progressively-enhanced\npages (with image content and/or embedded frames) will benefit the most\nfrom it. Browser timer resolution is too poor to ensure a doScroll check\nmore than once on a page loaded with minimal assets (the readystatechange\nevent 'complete' usually beats the doScroll timer on a 'lightly-loaded'\ninitial document).\n",
                "src": {
                  "access": "0,527,16",
                  "name": "0,529,0",
                  "text": "0,520,16,455"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "sortFn",
                "text": "Sorts the `{@link #property!listeners listeners}` array by `phase` and `priority` such that the first listener\nto fire can be determined using `pop` on the `{@link #property!listeners listeners}` array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "a",
                    "src": {
                      "name": "0,443,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "b",
                    "src": {
                      "name": "0,443,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,441,8",
                  "name": "0,443,0",
                  "text": "0,439,8,147"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unbind",
                "text": "This method is called to remove all event listeners that may have been set up to\ndetect ready state.\n",
                "src": {
                  "access": "0,469,8",
                  "name": "0,471,0",
                  "text": "0,467,8,101"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "blocks",
                "text": "The number of Framework readiness blocks.\n",
                "type": "Number",
                "src": {
                  "access": "0,77,8",
                  "name": "0,76,27",
                  "text": "0,76,34,42",
                  "type": "0,76,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "bound",
                "text": "This property stores the state of event listeners bound\nto the document or window to detect ready state.\n",
                "type": "Number",
                "src": {
                  "access": "0,84,8",
                  "name": "0,82,27",
                  "text": "0,82,33,56:0,83,8,49",
                  "type": "0,82,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "delay",
                "optional": true,
                "text": "This allows the DOM listener thread to complete (usually desirable with mobWebkit,\nGecko) before firing the entire onReady chain (high stack load on Loader). For mobile\ndevices when running from Home Screen, the splash screen will not disappear until\nall external resource requests finish. This delay clears the splash screen.\n",
                "type": "Number",
                "value": "1",
                "src": {
                  "access": "0,94,8",
                  "name": "0,89,28",
                  "text": "0,90,8,327",
                  "type": "0,89,19",
                  "value": "0,89,34"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "events",
                "text": "An array of events that have triggered ready state. This\nis for diagnostic purposes only and is only available in debug builds.\nAn array\n",
                "type": "Event[]",
                "src": {
                  "access": "0,103,8",
                  "name": "0,100,28",
                  "text": "0,100,35,57:0,101,8,80",
                  "type": "0,100,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "firing",
                "text": "This property is `true` when we currently calling the\nlisteners.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,111,8",
                  "name": "0,109,28",
                  "text": "0,109,35,54:0,110,8,11",
                  "type": "0,109,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "generation",
                "text": "A counter of the number of mutations of `{@link #property!listeners listeners}`.\n",
                "type": "Number",
                "src": {
                  "access": "0,117,8",
                  "name": "0,116,27",
                  "text": "0,116,38,53",
                  "type": "0,116,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "listeners",
                "text": "The set of listeners waiting for ready.\n",
                "type": "Object[]",
                "src": {
                  "access": "0,123,8",
                  "name": "0,122,29",
                  "text": "0,122,39,40",
                  "type": "0,122,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "nextId",
                "text": "A counter so we can assign listeners an `id` to keep\nthem in FIFO order.\n",
                "type": "Number",
                "src": {
                  "access": "0,130,8",
                  "name": "0,128,27",
                  "text": "0,128,34,53:0,129,8,20",
                  "type": "0,128,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "readyStatesRe",
                "src": {
                  "access": "0,515,16",
                  "name": "0,517,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "scrollTimer",
                "text": "Timer for doScroll polling\n",
                "src": {
                  "access": "0,510,16",
                  "name": "0,512,0",
                  "text": "0,509,16,27"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "sortGeneration",
                "text": "A captured value of `{@link #property!generation generation}` that indicates\nwhen the `{@link #property!listeners listeners}` were last sorted.\n",
                "type": "Number",
                "src": {
                  "access": "0,137,8",
                  "name": "0,135,27",
                  "text": "0,135,42,48:0,136,8,39",
                  "type": "0,135,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "state",
                "text": "Holds the current ready state as managed by this class. The values possible are:\n\n  * 0 - Not ready.\n  * 1 - Ready detected but listeners are not yet notified.\n  * 2 - Ready detected and listeners are notified. See also `{@link #property!firing firing}`.\n",
                "type": "Number",
                "src": {
                  "access": "0,149,8",
                  "name": "0,142,27",
                  "text": "0,143,8,231",
                  "type": "0,142,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "timer",
                "text": "The handle from `setTimeout` for the delayed notification\nof ready.\n",
                "type": "Object",
                "src": {
                  "access": "0,156,8",
                  "name": "0,154,27",
                  "text": "0,154,33,58:0,155,8,10",
                  "type": "0,154,19"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,66,4",
          "name": "0,64,11",
          "since": "0,67,11",
          "singleton": "0,65,4",
          "text": "0,2,4,2344"
        }
      }
    ]
  },
  "version": 1
}