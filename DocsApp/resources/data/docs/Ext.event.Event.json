{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/event/Event.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../ext/classic/classic/overrides/event/Event.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/event/gesture/Rotate.js",
    "../../../ext/packages/core/src/event/gesture/Swipe.js",
    "../../../ext/packages/core/src/event/gesture/Pinch.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Ext.EventObjectImpl",
        "extended": "Ext.Base,Object",
        "extends": "Ext.Base",
        "name": "Ext.event.Event",
        "requires": "Ext.util.Point",
        "text": "Just as {@link Ext.dom.Element} wraps around a native DOM node, {@link Ext.event.Event} wraps the browser's native\nevent-object normalizing cross-browser differences such as mechanisms to stop event-propagation along with a method\nto prevent default actions from taking place.\n\nHere is a simple example of how you use it:\n\n    @example preview\n    var container = Ext.create('Ext.Container', {\n        layout: 'fit',\n        renderTo: Ext.getBody(),\n        items: [{\n            id: 'logger',\n            styleHtmlContent: true,\n            html: 'Click somewhere!',\n            padding: 5\n        }]\n    });\n\n    container.getEl().on({\n        click: function(e, node) {\n            var string = '';\n\n            string += 'You clicked at: <strong>{ x: ' + e.pageX + ', y: ' + e.pageY + ' }</strong> <i>(e.pageX & e.pageY)</i>';\n            string += '<hr />';\n            string += 'The HTMLElement you clicked has the className of: <strong>' + e.target.className + '</strong> <i>(e.target)</i>';\n            string += '<hr />';\n            string += 'The HTMLElement which has the listener has a className of: <strong>' + e.currentTarget.className + '</strong> <i>(e.currentTarget)</i>';\n\n            Ext.getCmp('logger').setHtml(string);\n        }\n    });\n\n## Recognizers\n\nExt JS includes many default event recognizers to know when a user interacts with the application.\n\nFor a full list of default recognizers, and more information, please view the {@link Ext.event.gesture.Recognizer} documentation.\n\nThis class also provides a set of constants for use with key events.  These are useful\nfor determining if a specific key was pressed, and are available both on instances,\nand as static properties of the class.  The following two statements are equivalent:\n\n    if (e.getKey() === Ext.event.Event.TAB) {\n        // tab key was pressed\n    }\n\n    if (e.getKey() === e.TAB) {\n        // tab key was pressed\n    }\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "1,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,118,12",
                  "name": "1,120,0",
                  "text": "1,116,12,125"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1251,37",
                      "text": "1,1251,42,57:1,1252,12,67",
                      "type": "1,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1253,29,48",
                      "type": "1,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1250,12",
                  "name": "1,1255,0",
                  "text": "1,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1338,37",
                      "text": "1,1338,42,57:1,1339,12,66",
                      "type": "1,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1340,29,52",
                      "type": "1,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1337,12",
                  "name": "1,1342,0",
                  "text": "1,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "chain",
                "text": "Creates a new Event object that is prototype-chained to this event.  Useful for\ncreating identical events so that certain properties can be changed without\naffecting the original event.  For example, translated events have their \"type\"\ncorrected in this manner.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "props",
                    "text": "properties to set on the chained event\n",
                    "type": "Object",
                    "src": {
                      "name": "0,297,24",
                      "text": "0,297,30,39",
                      "type": "0,297,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,298,8",
                  "name": "0,300,0",
                  "text": "0,293,8,262"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "clone",
                "text": "Clones this event.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The cloned copy\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "text": "2,319,46,16",
                      "type": "2,319,29"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "2,320,20",
                  "name": "2,316,28",
                  "text": "2,318,20,19"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,40,21",
                      "text": "3,40,28,19",
                      "type": "3,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "3,38,12",
                  "text": "3,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "correctWheelDelta",
                "text": "Correctly scales a given wheel delta.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "delta",
                    "text": "The delta value.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,308,24",
                      "text": "0,308,30,17",
                      "type": "0,308,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,309,8",
                  "name": "0,311,0",
                  "text": "0,307,8,38"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "1,1626,0",
                  "text": "1,1623,12,132"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritdoc": "Ext.event.Event#static-enableIEAsync",
                "name": "enableIEAsync",
                "items": [
                  {
                    "$type": "param",
                    "name": "browserEvent",
                    "src": {
                      "name": "2,399,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,397,16",
                  "inheritdoc": "2,396,16",
                  "name": "2,399,0"
                }
              },
              {
                "$type": "method",
                "name": "getCharCode",
                "text": "Gets the character code for the event.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,324,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,326,0",
                  "text": "0,323,8,39"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1469,29",
                      "text": "1,1469,35,40",
                      "type": "1,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1470,30",
                      "text": "1,1470,42,60",
                      "type": "1,1470,20",
                      "value": "1,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1471,29,27",
                      "type": "1,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1473,0",
                  "text": "1,1466,12,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "1,1506,12",
                  "name": "1,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1551,29",
                      "text": "1,1551,35,37",
                      "type": "1,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "1,1552,35,48:1,1553,12,33",
                      "type": "1,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1555,0",
                  "text": "1,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getKey",
                "text": "Returns a normalized keyCode for the event.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The key code\n",
                    "type": "Number",
                    "src": {
                      "text": "0,332,25,13",
                      "type": "0,332,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,334,0",
                  "text": "0,331,8,44"
                }
              },
              {
                "$type": "method",
                "name": "getKeyName",
                "text": "Returns the name of the keyCode for the event.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The key name\n",
                    "type": "String",
                    "src": {
                      "text": "0,340,25,13",
                      "type": "0,340,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,342,0",
                  "text": "0,339,8,47"
                }
              },
              {
                "$type": "method",
                "name": "getPoint",
                "text": "Returns a point object that consists of the object coordinates.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "point\n",
                    "type": "Ext.util.Point",
                    "src": {
                      "text": "0,348,33,6",
                      "type": "0,348,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,350,0",
                  "text": "0,347,8,64"
                }
              },
              {
                "$type": "method",
                "name": "getRelatedTarget",
                "text": "Gets the related target.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A simple selector to filter the target or look for an\nancestor of the target. See {@link Ext.dom.Query} for information about simple\nselectors.\n",
                    "type": "String",
                    "src": {
                      "name": "0,357,25",
                      "text": "0,357,35,54:0,358,8,90",
                      "type": "0,357,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "maxDepth",
                    "optional": true,
                    "text": "The max depth to search as a number or\nelement (defaults to 10 || document.body).\n",
                    "type": "Number/HTMLElement",
                    "src": {
                      "name": "0,360,37",
                      "text": "0,360,47,39:0,361,8,43",
                      "type": "0,360,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnEl",
                    "optional": true,
                    "text": "`true` to return a Ext.Element object instead of DOM\nnode.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,362,26",
                      "text": "0,362,36,53:0,363,8,6",
                      "type": "0,362,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "HTMLElement",
                    "src": {
                      "type": "0,364,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,366,0",
                  "text": "0,356,8,25"
                }
              },
              {
                "$type": "method",
                "name": "getTarget",
                "text": "Gets the target for the event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "(optional) A simple selector to filter the target or look\nfor an ancestor of the target\n",
                    "type": "String",
                    "src": {
                      "name": "0,385,24",
                      "text": "0,385,33,58:0,386,8,30",
                      "type": "0,385,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "maxDepth",
                    "optional": true,
                    "text": "(optional) The max depth to\nsearch as a number or element (defaults to 10 || document.body)\n",
                    "type": "Number/Mixed",
                    "value": "10||document.body",
                    "src": {
                      "name": "0,387,31",
                      "text": "0,387,59,28:0,388,8,64",
                      "type": "0,387,16",
                      "value": "0,387,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnEl",
                    "text": "(optional) `true` to return a Ext.Element object instead\nof DOM node.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,389,25",
                      "text": "0,389,34,57:0,390,8,13",
                      "type": "0,389,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "HTMLElement",
                    "src": {
                      "type": "0,391,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,393,0",
                  "text": "0,384,8,31"
                }
              },
              {
                "$type": "method",
                "name": "getTime",
                "text": "Returns the time of the event.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Date",
                    "src": {
                      "type": "0,400,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,402,0",
                  "text": "0,399,8,31"
                }
              },
              {
                "$type": "method",
                "name": "getWheelDelta",
                "text": "Normalizes mouse wheel y-delta across browsers. To get x-delta information, use\n{@link #method!getWheelDeltas #getWheelDeltas} instead.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The mouse wheel y-delta\n",
                    "type": "Number",
                    "src": {
                      "text": "0,409,25,24",
                      "type": "0,409,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,411,0",
                  "text": "0,407,8,113"
                }
              },
              {
                "$type": "method",
                "name": "getWheelDeltas",
                "text": "Returns the mouse wheel deltas for this event.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "An object with \"x\" and \"y\" properties holding the mouse wheel deltas.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,419,25,70",
                      "type": "0,419,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,421,0",
                  "text": "0,418,8,47"
                }
              },
              {
                "$type": "method",
                "name": "getX",
                "text": "Gets the x coordinate of the event.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,458,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,460,0",
                  "text": "0,457,8,36"
                }
              },
              {
                "$type": "method",
                "name": "getXY",
                "text": "Gets the X and Y coordinates of the event.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The xy values like [x, y]\n",
                    "type": "Number[]",
                    "src": {
                      "text": "0,466,27,26",
                      "type": "0,466,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,468,0",
                  "text": "0,465,8,43"
                }
              },
              {
                "$type": "method",
                "name": "getY",
                "text": "Gets the y coordinate of the event.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,499,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,501,0",
                  "text": "0,498,8,36"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,1515,12",
                  "name": "1,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasModifier",
                "text": "Returns true if the control, meta, shift or alt key was pressed during this event.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,507,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,509,0",
                  "text": "0,506,7,83"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,100,20",
                      "text": "3,100,25,34",
                      "type": "3,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,101,22,57:3,102,4,15",
                      "type": "3,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,53,12",
                  "text": "3,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,1449,28",
                      "type": "1,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1450,31,5",
                      "type": "1,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1448,12",
                  "name": "1,1452,0",
                  "text": "1,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "injectEvent",
                "text": "Injects a DOM event using the data in this object and (optionally) a new target.\nThis is a low-level technique and not likely to be used by application code. The\ncurrently supported event types are:\n<p><b>HTMLEvents</b></p>\n<ul>\n<li>load</li>\n<li>unload</li>\n<li>select</li>\n<li>change</li>\n<li>submit</li>\n<li>reset</li>\n<li>resize</li>\n<li>scroll</li>\n</ul>\n<p><b>MouseEvents</b></p>\n<ul>\n<li>click</li>\n<li>dblclick</li>\n<li>mousedown</li>\n<li>mouseup</li>\n<li>mouseover</li>\n<li>mousemove</li>\n<li>mouseout</li>\n</ul>\n<p><b>UIEvents</b></p>\n<ul>\n<li>focusin</li>\n<li>focusout</li>\n<li>activate</li>\n<li>focus</li>\n<li>blur</li>\n</ul>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "(optional) If specified, the target for the event. This\nis likely to be used when relaying a DOM event. If not specified, {@link #method!getTarget #getTarget}\nis used to determine the target.\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "name": "2,49,41",
                      "text": "2,49,48,56:2,50,8,118",
                      "type": "2,49,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,15,16",
                  "text": "2,17,8,638"
                }
              },
              {
                "$type": "method",
                "name": "isNavKeyPress",
                "text": "Checks if the key pressed was a \"navigation\" key. A navigation key is defined by\nthese keys:\n\n - Page Up\n - Page Down\n - End\n - Home\n - Left\n - Up\n - Right\n - Down\n - Return\n - Tab\n - Esc\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "scrollableOnly",
                    "optional": true,
                    "text": "Only check navigation keys that can cause\nelement scrolling by their default action.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,530,26",
                      "text": "0,530,42,42:0,531,8,44",
                      "type": "0,530,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the press is a navigation keypress\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,533,26,45",
                      "type": "0,533,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,535,0",
                  "text": "0,515,8,189"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "3,148,20",
                      "text": "3,148,30,71:3,149,4,18",
                      "type": "3,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "3,150,20",
                      "text": "3,150,27,50",
                      "type": "3,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,151,22,56",
                      "type": "3,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,106,12",
                  "text": "3,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isSpecialKey",
                "text": "Checks if the key pressed was a \"special\" key. A special key is defined as one of\nthese keys:\n\n - Page Up\n - Page Down\n - End\n - Home\n - Left arrow\n - Up arrow\n - Right arrow\n - Down arrow\n - Return\n - Tab\n - Esc\n - Backspace\n - Delete\n - Shift\n - Ctrl\n - Alt\n - Pause\n - Caps Lock\n - Print Screen\n - Insert\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the key for this event is special\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,573,26,44",
                      "type": "0,573,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,575,0",
                  "text": "0,549,8,309"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "1,1571,28",
                      "type": "1,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "1,1572,28",
                      "type": "1,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1573,29,20",
                      "type": "1,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1574,12",
                  "name": "1,1576,0",
                  "text": "1,1569,12,140"
                }
              },
              {
                "$type": "method",
                "chainable": true,
                "name": "preventDefault",
                "text": "Prevents the browsers default handling of the event.\n",
                "src": {
                  "chainable": "0,596,8",
                  "name": "0,598,0",
                  "text": "0,595,8,53"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,220,20",
                      "text": "3,220,25,34",
                      "type": "3,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,221,22,57:3,222,4,22",
                      "type": "3,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,155,12",
                  "text": "3,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1478,35",
                      "text": "1,1478,40,69",
                      "type": "1,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1479,29",
                      "text": "1,1479,36,41",
                      "type": "1,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1480,31,5",
                      "type": "1,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1482,0",
                  "text": "1,1476,12,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "1,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1160,12",
                  "name": "1,1163,0",
                  "text": "1,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "chainable": true,
                "name": "stopEvent",
                "text": "Stop the event (`{@link #method!preventDefault #preventDefault}` and `{@link #method!stopPropagation #stopPropagation}`).\n",
                "src": {
                  "chainable": "0,621,8",
                  "name": "0,623,0",
                  "text": "0,620,8,75"
                }
              },
              {
                "$type": "method",
                "chainable": true,
                "name": "stopPropagation",
                "text": "Cancels bubbling of the event.\n",
                "src": {
                  "chainable": "0,629,8",
                  "name": "0,631,0",
                  "text": "0,628,8,31"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "3,235,21,32",
                      "type": "3,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,226,12",
                  "text": "3,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "3,297,21,32",
                      "type": "3,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,239,12",
                  "text": "3,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "1,1589,30",
                      "text": "1,1589,36,44",
                      "type": "1,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1590,31,5",
                      "type": "1,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1591,12",
                  "name": "1,1593,0",
                  "text": "1,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,340,21,50",
                      "type": "3,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,301,12",
                  "text": "3,302,4,1821"
                }
              },
              {
                "$type": "method",
                "name": "within",
                "text": "Returns true if the target of this event is a child of `el`.  Unless the allowEl\nparameter is set, it will return false if if the target is `el`.\nExample usage:\n\n    // Handle click on any child of an element\n    Ext.getBody().on('click', function(e){\n        if(e.within('some-el')){\n            alert('Clicked on a child of some-el!');\n        }\n    });\n\n    // Handle click directly on an element, ignoring clicks on child nodes\n    Ext.getBody().on('click', function(e,t){\n        if((t.id == 'some-el') && !e.within(t, true)){\n            alert('Clicked directly on some-el!');\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The id, DOM element or Ext.Element to check\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,688,52",
                      "text": "0,688,55,44",
                      "type": "0,688,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "related",
                    "optional": true,
                    "text": "`true` to test if the related target is within el instead\nof the target\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,689,26",
                      "text": "0,689,35,58:0,690,8,14",
                      "type": "0,689,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "allowEl",
                    "optional": true,
                    "text": "`true` to also check if the passed element is the target\nor related target\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,691,26",
                      "text": "0,691,35,57:0,692,8,18",
                      "type": "0,691,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,693,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,695,0",
                  "text": "0,670,8,602"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "1,1049,13",
                  "name": "1,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1066,12",
                  "name": "1,1062,33",
                  "since": "1,1067,19",
                  "text": "1,1063,12,225",
                  "type": "1,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1076,12",
                  "name": "1,1072,33",
                  "since": "1,1077,19",
                  "text": "1,1073,12,229",
                  "type": "1,1072,23"
                }
              },
              {
                "$type": "property",
                "name": "A",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,794,0",
                  "text": "0,793,13,26"
                }
              },
              {
                "$type": "property",
                "name": "ALT",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,742,0",
                  "text": "0,741,13,26"
                }
              },
              {
                "$type": "property",
                "name": "altKey",
                "text": "True if the alt key was down during the event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,119,28",
                  "text": "0,120,8,47",
                  "type": "0,119,19"
                }
              },
              {
                "$type": "property",
                "name": "angle",
                "text": "The angle of the rotation.\n\n**This is only available when the event type is `rotate`**\n",
                "type": "Number",
                "src": {
                  "name": "4,41,27",
                  "text": "4,42,8,87",
                  "type": "4,41,19"
                }
              },
              {
                "$type": "property",
                "name": "B",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,796,0",
                  "text": "0,795,13,26"
                }
              },
              {
                "$type": "property",
                "name": "BACKSPACE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,728,0",
                  "text": "0,727,13,26"
                }
              },
              {
                "$type": "property",
                "name": "browserEvent",
                "text": "The raw browser event which this object wraps.\n",
                "type": "Event",
                "src": {
                  "name": "0,128,26",
                  "text": "0,129,8,47",
                  "type": "0,128,19"
                }
              },
              {
                "$type": "property",
                "name": "button",
                "text": "Indicates which mouse button caused the event for mouse events, for example\n`mousedown`, `click`, `mouseup`:\n- `0` for left button.\n- `1` for middle button.\n- `2` for right button.\n\n*Note*: In IE8 & IE9, the `click` event does not provide the button.\n",
                "type": "Number",
                "src": {
                  "name": "0,89,27",
                  "text": "0,90,8,251",
                  "type": "0,89,19"
                }
              },
              {
                "$type": "property",
                "name": "C",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,798,0",
                  "text": "0,797,13,26"
                }
              },
              {
                "$type": "property",
                "name": "CAPS_LOCK",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,746,0",
                  "text": "0,745,13,26"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "3,346,14",
                  "text": "3,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "CONTEXT_MENU",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,846,0",
                  "text": "0,845,13,26"
                }
              },
              {
                "$type": "property",
                "name": "CTRL",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,740,0",
                  "text": "0,739,13,26"
                }
              },
              {
                "$type": "property",
                "name": "ctrlKey",
                "text": "True if the control key was down during the event.\nIn Mac this will also be true when meta key was down.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,114,28",
                  "text": "0,115,8,105",
                  "type": "0,114,19"
                }
              },
              {
                "$type": "property",
                "name": "currentTarget",
                "text": "Refers to the element the event handler was attached to, vs the `{@link #property!target target}`, which is\nthe actual element that fired the event.  For example, if the event bubbles, the\n`{@link #property!target target}` element may be a descendant of the `{@link #property!currentTarget currentTarget}`, as the event may\nhave been triggered on the `{@link #property!target target}` and then bubbled up to the `{@link #property!currentTarget currentTarget}`\nwhere it was handled.\n",
                "type": "HTMLElement",
                "src": {
                  "name": "0,74,32",
                  "text": "0,75,8,343",
                  "type": "0,74,19"
                }
              },
              {
                "$type": "property",
                "name": "D",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,800,0",
                  "text": "0,799,13,26"
                }
              },
              {
                "$type": "property",
                "name": "defaultPrevented",
                "text": "Indicates whether or not {@link #method!preventDefault #preventDefault} was called on the event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,138,0",
                  "text": "0,136,8,91",
                  "type": "0,135,19"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "use {@link #currentTarget} instead.\n",
                "deprecatedVersion": "5.0.0",
                "name": "delegatedTarget",
                "text": "Same as `{@link #property!currentTarget currentTarget}`\n",
                "type": "HTMLElement",
                "src": {
                  "deprecatedMessage": "0,85,8",
                  "deprecatedVersion": "0,85,8",
                  "name": "0,83,32",
                  "text": "0,84,8,24",
                  "type": "0,83,19"
                }
              },
              {
                "$type": "property",
                "name": "DELETE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,772,0",
                  "text": "0,771,13,26"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1102,12",
                  "name": "1,1100,32",
                  "text": "1,1101,12,69",
                  "type": "1,1100,23"
                }
              },
              {
                "$type": "property",
                "name": "direction",
                "text": "The direction of the swipe. Available options are:\n\n- up\n- down\n- left\n- right\n\n**This is only available when the event type is `swipe`**\n",
                "type": "Number",
                "src": {
                  "name": "5,22,27",
                  "text": "5,23,8,138",
                  "type": "5,22,19"
                }
              },
              {
                "$type": "property",
                "name": "distance",
                "text": "The distance of the event.\n\n**This is only available when the event type is `swipe` and `pinch`.**\n",
                "type": "Number",
                "src": {
                  "name": "0,60,27",
                  "text": "0,61,8,99",
                  "type": "0,60,19"
                }
              },
              {
                "$type": "property",
                "name": "DOWN",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,766,0",
                  "text": "0,765,13,26"
                }
              },
              {
                "$type": "property",
                "name": "duration",
                "text": "The duration of the swipe.\n\n**This is only available when the event type is `swipe`**\n",
                "type": "Number",
                "src": {
                  "name": "5,35,27",
                  "text": "5,36,8,86",
                  "type": "5,35,19"
                }
              },
              {
                "$type": "property",
                "name": "E",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,802,0",
                  "text": "0,801,13,26"
                }
              },
              {
                "$type": "property",
                "name": "EIGHT",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,790,0",
                  "text": "0,789,13,26"
                }
              },
              {
                "$type": "property",
                "name": "END",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,756,0",
                  "text": "0,755,13,26"
                }
              },
              {
                "$type": "property",
                "name": "ENTER",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,734,0",
                  "text": "0,733,13,26"
                }
              },
              {
                "$type": "property",
                "name": "ESC",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,748,0",
                  "text": "0,747,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,804,0",
                  "text": "0,803,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F1",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,878,0",
                  "text": "0,877,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F10",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,896,0",
                  "text": "0,895,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F11",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,898,0",
                  "text": "0,897,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F12",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,900,0",
                  "text": "0,899,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F2",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,880,0",
                  "text": "0,879,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F3",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,882,0",
                  "text": "0,881,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F4",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,884,0",
                  "text": "0,883,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F5",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,886,0",
                  "text": "0,885,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F6",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,888,0",
                  "text": "0,887,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F7",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,890,0",
                  "text": "0,889,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F8",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,892,0",
                  "text": "0,891,13,26"
                }
              },
              {
                "$type": "property",
                "name": "F9",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,894,0",
                  "text": "0,893,13,26"
                }
              },
              {
                "$type": "property",
                "name": "FIVE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,784,0",
                  "text": "0,783,13,26"
                }
              },
              {
                "$type": "property",
                "name": "FOUR",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,782,0",
                  "text": "0,781,13,26"
                }
              },
              {
                "$type": "property",
                "name": "G",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,806,0",
                  "text": "0,805,13,26"
                }
              },
              {
                "$type": "property",
                "name": "H",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,808,0",
                  "text": "0,807,13,26"
                }
              },
              {
                "$type": "property",
                "name": "HOME",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,758,0",
                  "text": "0,757,13,26"
                }
              },
              {
                "$type": "property",
                "name": "I",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,810,0",
                  "text": "0,809,13,26"
                }
              },
              {
                "$type": "property",
                "name": "INSERT",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,770,0",
                  "text": "0,769,13,26"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1084,12",
                  "name": "1,1082,32",
                  "readonly": "1,1085,12",
                  "since": "1,1086,19",
                  "text": "1,1083,12,64",
                  "type": "1,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1093,12",
                  "name": "1,1091,32",
                  "readonly": "1,1094,12",
                  "since": "1,1095,19",
                  "text": "1,1092,12,75",
                  "type": "1,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1056,12",
                  "name": "1,1053,32",
                  "readonly": "1,1057,12",
                  "text": "1,1054,12,94",
                  "type": "1,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "J",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,812,0",
                  "text": "0,811,13,26"
                }
              },
              {
                "$type": "property",
                "name": "K",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,814,0",
                  "text": "0,813,13,26"
                }
              },
              {
                "$type": "property",
                "name": "L",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,816,0",
                  "text": "0,815,13,26"
                }
              },
              {
                "$type": "property",
                "name": "LEFT",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,760,0",
                  "text": "0,759,13,26"
                }
              },
              {
                "$type": "property",
                "name": "M",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,818,0",
                  "text": "0,817,13,26"
                }
              },
              {
                "$type": "property",
                "name": "N",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,820,0",
                  "text": "0,819,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NINE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,792,0",
                  "text": "0,791,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_CENTER",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,732,0",
                  "text": "0,731,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_DIVISION",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,876,0",
                  "text": "0,875,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_EIGHT",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,864,0",
                  "text": "0,863,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_FIVE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,858,0",
                  "text": "0,857,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_FOUR",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,856,0",
                  "text": "0,855,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_MINUS",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,872,0",
                  "text": "0,871,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_MULTIPLY",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,868,0",
                  "text": "0,867,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_NINE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,866,0",
                  "text": "0,865,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_ONE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,850,0",
                  "text": "0,849,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_PERIOD",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,874,0",
                  "text": "0,873,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_PLUS",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,870,0",
                  "text": "0,869,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_SEVEN",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,862,0",
                  "text": "0,861,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_SIX",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,860,0",
                  "text": "0,859,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_THREE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,854,0",
                  "text": "0,853,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_TWO",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,852,0",
                  "text": "0,851,13,26"
                }
              },
              {
                "$type": "property",
                "name": "NUM_ZERO",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,848,0",
                  "text": "0,847,13,26"
                }
              },
              {
                "$type": "property",
                "name": "O",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,822,0",
                  "text": "0,821,13,26"
                }
              },
              {
                "$type": "property",
                "name": "ONE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,776,0",
                  "text": "0,775,13,26"
                }
              },
              {
                "$type": "property",
                "name": "P",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,824,0",
                  "text": "0,823,13,26"
                }
              },
              {
                "$type": "property",
                "name": "PAGE_DOWN",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,754,0",
                  "text": "0,753,13,26"
                }
              },
              {
                "$type": "property",
                "name": "PAGE_UP",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,752,0",
                  "text": "0,751,13,26"
                }
              },
              {
                "$type": "property",
                "name": "pageX",
                "text": "The browsers x coordinate of the event.\nNote: this only works in browsers that support pageX on the native browser event\nobject (pageX is not natively supported in IE9 and earlier).  In Ext JS, for a\ncross browser normalized x-coordinate use {@link #method!getX #getX}\n",
                "type": "Number",
                "src": {
                  "name": "0,100,27",
                  "text": "0,100,33,40:0,101,8,216",
                  "type": "0,100,19"
                }
              },
              {
                "$type": "property",
                "name": "pageY",
                "text": "The browsers y coordinate of the event.\nNote: this only works in browsers that support pageY on the native browser event\nobject (pageY is not natively supported in IE9 and earlier).  In Ext JS, for a\ncross browser normalized y-coordinate use {@link #method!getY #getY}\n",
                "type": "Number",
                "src": {
                  "name": "0,107,27",
                  "text": "0,107,33,40:0,108,8,216",
                  "type": "0,107,19"
                }
              },
              {
                "$type": "property",
                "name": "PAUSE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,744,0",
                  "text": "0,743,13,26"
                }
              },
              {
                "$type": "property",
                "name": "PRINT_SCREEN",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,768,0",
                  "text": "0,767,13,26"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "3,46,14",
                  "text": "3,47,4,65"
                }
              },
              {
                "$type": "property",
                "name": "Q",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,826,0",
                  "text": "0,825,13,26"
                }
              },
              {
                "$type": "property",
                "name": "R",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,828,0",
                  "text": "0,827,13,26"
                }
              },
              {
                "$type": "property",
                "name": "RETURN",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,736,0",
                  "text": "0,735,13,26"
                }
              },
              {
                "$type": "property",
                "name": "RIGHT",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,764,0",
                  "text": "0,763,13,26"
                }
              },
              {
                "$type": "property",
                "name": "rotation",
                "text": "A amount of rotation, since the start of the event.\n\n**This is only available when the event type is `rotate`**\n",
                "type": "Number",
                "src": {
                  "name": "4,49,27",
                  "text": "4,50,8,112",
                  "type": "4,49,19"
                }
              },
              {
                "$type": "property",
                "name": "S",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,830,0",
                  "text": "0,829,13,26"
                }
              },
              {
                "$type": "property",
                "name": "scale",
                "text": "The scape of a pinch event.\n\n**This is only available when the event type is `pinch`**\n",
                "type": "Number",
                "src": {
                  "name": "6,39,27",
                  "text": "6,40,8,87",
                  "type": "6,39,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "1,1413,12",
                  "name": "1,1379,34",
                  "text": "1,1380,12,1011",
                  "type": "1,1379,23"
                }
              },
              {
                "$type": "property",
                "name": "SEVEN",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,788,0",
                  "text": "0,787,13,26"
                }
              },
              {
                "$type": "property",
                "name": "SHIFT",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,738,0",
                  "text": "0,737,13,26"
                }
              },
              {
                "$type": "property",
                "name": "shiftKey",
                "text": "True if the shift key was down during the event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,123,28",
                  "text": "0,124,8,49",
                  "type": "0,123,19"
                }
              },
              {
                "$type": "property",
                "name": "SIX",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,786,0",
                  "text": "0,785,13,26"
                }
              },
              {
                "$type": "property",
                "name": "SPACE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,750,0",
                  "text": "0,749,13,26"
                }
              },
              {
                "$type": "property",
                "name": "T",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,832,0",
                  "text": "0,831,13,26"
                }
              },
              {
                "$type": "property",
                "name": "TAB",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,730,0",
                  "text": "0,729,13,26"
                }
              },
              {
                "$type": "property",
                "name": "target",
                "text": "The element that fired this event.  For the element whose handlers are currently\nbeing processed, i.e. the element that the event handler was attached to, use\n`{@link #property!currentTarget currentTarget}`\n",
                "type": "HTMLElement",
                "src": {
                  "name": "0,67,32",
                  "text": "0,68,8,175",
                  "type": "0,67,19"
                }
              },
              {
                "$type": "property",
                "name": "THREE",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,780,0",
                  "text": "0,779,13,26"
                }
              },
              {
                "$type": "property",
                "name": "TWO",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,778,0",
                  "text": "0,777,13,26"
                }
              },
              {
                "$type": "property",
                "name": "U",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,834,0",
                  "text": "0,833,13,26"
                }
              },
              {
                "$type": "property",
                "name": "UP",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,762,0",
                  "text": "0,761,13,26"
                }
              },
              {
                "$type": "property",
                "name": "V",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,836,0",
                  "text": "0,835,13,26"
                }
              },
              {
                "$type": "property",
                "name": "W",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,838,0",
                  "text": "0,837,13,26"
                }
              },
              {
                "$type": "property",
                "name": "WHEEL_SCALE",
                "text": "The mouse wheel delta scaling factor. This value depends on browser version and OS and\nattempts to produce a similar scrolling experience across all platforms and browsers.\n\nTo change this value:\n\n     Ext.event.Event.prototype.WHEEL_SCALE = 72;\n",
                "type": "Number",
                "src": {
                  "name": "0,913,0",
                  "text": "0,903,12,247",
                  "type": "0,910,18"
                }
              },
              {
                "$type": "property",
                "name": "X",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,840,0",
                  "text": "0,839,13,26"
                }
              },
              {
                "$type": "property",
                "name": "Y",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,842,0",
                  "text": "0,841,13,26"
                }
              },
              {
                "$type": "property",
                "name": "Z",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,844,0",
                  "text": "0,843,13,26"
                }
              },
              {
                "$type": "property",
                "name": "ZERO",
                "text": "Key constant @type Number\n",
                "src": {
                  "name": "0,774,0",
                  "text": "0,773,13,26"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,940,28",
                      "type": "1,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "1,941,32",
                      "text": "1,941,44,49",
                      "type": "1,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,942,12",
                  "inheritable": "1,944,12",
                  "name": "1,946,0",
                  "static": "1,943,12",
                  "text": "1,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,464,28",
                      "type": "1,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,461,12",
                  "inheritable": "1,463,12",
                  "name": "1,466,0",
                  "static": "1,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "1,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,659,12",
                  "inheritable": "1,661,12",
                  "name": "1,665,0",
                  "static": "1,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,522,28",
                      "text": "1,522,36,34",
                      "type": "1,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,523,30",
                      "text": "1,523,46,39",
                      "type": "1,523,20",
                      "value": "1,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,524,30",
                      "text": "1,524,45,45:1,525,12,53",
                      "type": "1,524,20",
                      "value": "1,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,527,12",
                  "name": "1,529,0",
                  "static": "1,526,12",
                  "text": "1,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,450,28",
                      "type": "1,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,451,31,5",
                      "type": "1,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,453,12",
                  "name": "1,455,0",
                  "static": "1,452,12",
                  "text": "1,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "1,693,30",
                      "text": "1,693,40,33",
                      "type": "1,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "1,694,34",
                      "text": "1,694,42,35",
                      "type": "1,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,695,31,5",
                      "type": "1,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,698,12",
                  "inheritable": "1,697,12",
                  "name": "1,700,0",
                  "static": "1,696,12",
                  "text": "1,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,810,12",
                  "inheritable": "1,812,12",
                  "name": "1,814,0",
                  "static": "1,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,824,12",
                  "inheritable": "1,826,12",
                  "name": "1,828,0",
                  "static": "1,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,107,29,22",
                      "type": "1,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,109,12",
                  "name": "1,111,0",
                  "static": "1,108,12",
                  "text": "1,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1018,35",
                      "text": "1,1018,41,63:1,1019,12,43",
                      "type": "1,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1020,35",
                      "text": "1,1020,42,25",
                      "type": "1,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,1022,12",
                  "name": "1,1025,0",
                  "static": "1,1021,12",
                  "text": "1,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "enableIEAsync",
                "static": true,
                "text": "When events are attached using IE's attachEvent API instead of\naddEventListener accessing any members of an event object asynchronously\nresults in \"Member not found\" error.  To work around this we fabricate\nour own event object by copying all of its members to a new object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "browserEvent",
                    "text": "The native browser event object\n",
                    "type": "Event",
                    "src": {
                      "name": "2,359,35",
                      "text": "2,359,48,32",
                      "type": "2,359,28"
                    }
                  }
                ],
                "src": {
                  "access": "2,360,20",
                  "name": "2,363,0",
                  "static": "2,361,20",
                  "text": "2,355,20,275"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,347,12",
                  "inheritable": "1,349,12",
                  "name": "1,352,0",
                  "static": "1,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "1,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,968,12",
                  "inheritable": "1,970,12",
                  "name": "1,972,0",
                  "static": "1,969,12",
                  "text": "1,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "1,989,29,10",
                      "type": "1,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,991,12",
                  "name": "1,993,0",
                  "static": "1,990,12",
                  "text": "1,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "1,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,840,12",
                  "inheritable": "1,842,12",
                  "name": "1,844,0",
                  "static": "1,841,12",
                  "text": "1,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "1,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "1,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,424,12",
                  "inheritable": "1,426,12",
                  "name": "1,428,0",
                  "static": "1,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,762,28",
                      "text": "1,762,36,52:1,763,12,66",
                      "type": "1,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,764,31,11",
                      "type": "1,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,766,12",
                  "name": "1,768,0",
                  "static": "1,765,12",
                  "text": "1,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "1,402,12",
                  "inheritable": "1,404,12",
                  "name": "1,406,0",
                  "static": "1,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "1,395,12",
                  "inheritable": "1,397,12",
                  "name": "1,399,0",
                  "static": "1,396,12"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "clickEvents",
                "static": true,
                "text": "These are tracked separately from mouseEvents because the mouseEvents map\nis used by Dom publisher to eliminate duplicate events on devices that fire\nmultiple kinds of events (mouse, touch, pointer).  Adding click events to the\nmouse events map can cause click events to be blocked from firing in some cases.\n",
                "src": {
                  "access": "0,183,12",
                  "name": "0,189,0",
                  "static": "0,141,-1",
                  "text": "0,184,12,309"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "focusEvents",
                "static": true,
                "src": {
                  "access": "0,205,12",
                  "name": "0,207,0",
                  "static": "0,141,-1"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "mouseEvents",
                "static": true,
                "src": {
                  "access": "0,170,12",
                  "name": "0,172,0",
                  "static": "0,141,-1"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "pointerEvents",
                "static": true,
                "src": {
                  "access": "0,148,12",
                  "name": "0,150,0",
                  "static": "0,141,-1"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "touchEvents",
                "static": true,
                "src": {
                  "access": "0,195,12",
                  "name": "0,197,0",
                  "static": "0,141,-1"
                }
              }
            ]
          }
        ],
        "src": {
          "alternateClassNames": "0,53,0",
          "extends": "0,52,0",
          "name": "0,52,0",
          "requires": "0,56,0",
          "text": "0,2,4,1919"
        }
      }
    ]
  },
  "version": 1
}