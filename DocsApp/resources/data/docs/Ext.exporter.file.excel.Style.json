{
  "$type": "doxi",
  "files": [
    "../../../packages/exporter/src/exporter/file/excel/Style.js",
    "../../../packages/exporter/src/exporter/file/Base.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Ext.exporter.file.Base,Object",
        "extends": "Ext.exporter.file.Base",
        "name": "Ext.exporter.file.excel.Style",
        "text": "This class defines a single style in the current workbook. This element is optional,\nbut is required to perform any custom formatting.\n\n\nA style can be either standalone or based on one other style (this is called the parent style), in which case,\nall base properties are first inherited from the parent, then the properties in the style are treated as overrides.\nParent styles must be specified before they are first referenced.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "alignment",
                "text": "\nFollowing keys are allowed on this object and are all optional:\n\n- **Horizontal** (String): specifies the left-to-right alignment of text within a cell. The Spreadsheet component\ndoes not support `CenterAcrossSelection`, `Fill`, `Justify`, `Distributed`, and `JustifyDistributed`.\nPossible values: `Automatic`, `Left`, `Center`, `Right`, `Fill`, `Justify`, `CenterAcrossSelection`, `Distributed`,\nand `JustifyDistributed`. Default is `Automatic`.\n\n- **Indent** (Integer): specifies the number of indents. This attribute is not supported by the Spreadsheet component.\nDefaults to `0`.\n\n- **ReadingOrder** (String): specifies the default right-to-left text entry mode for a cell. The Spreadsheet component\ndoes not support `Context`. Possible values: `RightToLeft`, `LeftToRight`, and `Context`. Defaults to `Context`.\n\n- **Rotate** (Double): Specifies the rotation of the text within the cell. `90` is straight up, `0` is horizontal,\nand `-90` is straight down. The Spreadsheet component does not support this attribute. Defaults to `0`.\n\n- **ShrinkToFit** (Boolean): `true` means that the text size should be shrunk so that all of the text fits within the cell.\n`false` means that the font within the cell should behave normally. The Spreadsheet component does not support this attribute.\nDefaults to `false`.\n\n- **Vertical** (String): specifies the top-to-bottom alignment of text within a cell. `Distributed` and\n`JustifyDistributed` are only legitimate values when **VerticalText** is `1`. The Spreadsheet component does\nnot support `Justify`, `Distributed`, or `JustifyDistributed`. Possible values: `Automatic`, `Top`, `Bottom`,\n`Center`, `Justify`, `Distributed`, and `JustifyDistributed`. Defaults to `Automatic`.\n\n- **VerticalText** (Boolean): `true` specifies whether the text is drawn \"downwards\", whereby each letter is drawn horizontally,\none above the other. The Spreadsheet component does not support this attribute. Defaults to `false`.\n\n- **WrapText** (Boolean): specifies whether the text in this cell should wrap at the cell boundary. `false` means that\ntext either spills or gets truncated at the cell boundary (depending on whether the adjacent cell(s) have content).\nThe Spreadsheet component does not support this attribute. Defaults to `false`.\n",
                "type": "Object",
                "src": {
                  "name": "0,56,26",
                  "text": "0,57,12,2270",
                  "type": "0,56,18"
                }
              },
              {
                "$type": "property",
                "name": "borders",
                "text": "\nArray of border objects. Following keys are allowed for border objects:\n\n- **Position** (String): Specifies which of the six possible borders this element represents. Duplicate\nborders are not permitted and are considered invalid. The Spreadsheet component does not support\n`DiagonalLeft` or `DiagonalRight`. Possible values: `Left`, `Top`, `Right`, `Bottom`, `DiagonalLeft`, and\n`DiagonalRight`\n\n- **Color** (String): Specifies the color of this border. This value can be either a 6-hexadecimal digit\nnumber in \"#rrggbb\" format or it can be any of the Microsoft® Internet Explorer named colors\n(including the named Microsoft Windows® colors). This string can also be the special value of `Automatic`.\nThis string is case insensitive.\n\n- **LineStyle** (String): Specifies the appearance of this border. The Spreadsheet component does\nnot support `SlantDashDot` and `Double`. Possible values: `None`, `Continuous`, `Dash`, `Dot`, `DashDot`,\n`DashDotDot`, `SlantDashDot`, and `Double`.\n\n- **Weight** (Number): Specifies the weight (or thickness) of this border. This measurement is specified in points,\nand the following values map to Excel: `0`—Hairline, `1`—Thin, `2`—Medium, `3`—Thick.\n",
                "type": "Object[]",
                "src": {
                  "name": "0,187,28",
                  "text": "0,188,12,1189",
                  "type": "0,187,18"
                }
              },
              {
                "$type": "property",
                "name": "font",
                "text": "Defines the font attributes to use in this style. Each attribute that is specified is\nconsidered an override from the default.\n\n\nFollowing keys are allowed on this object:\n\n- **Bold** (Boolean): Specifies the bold state of the font. If the parent style has **Bold**: `true` and the child style wants\nto override the setting, it must explicitly set the value to **Bold**: `false`. If this attribute is not specified\nwithin an element, the default is assumed. Defaults to `false`.\n\n- **Color** (String): Specifies the color of the font. This value can be either a 6-hexadecimal digit number\nin \"#rrggbb\" format or it can be any of the Internet Explorer named colors (including the named Windows colors).\nThis string can also be special value of `Automatic`. This string is case insensitive. If this attribute is not\nspecified within an element, the default is assumed. Defaults to `Automatic`.\n\n- **FontName** (String): Specifies the name of the font. This string is case insensitive. If this attribute is\nnot specified within an element, the default is assumed. Defaults to `Arial`.\n\n- **Italic** (Boolean): Similar to **Bold** in behavior, this attribute specifies the italic state of the font.\nIf this attribute is not specified within an element, the default is assumed. Defaults to `false`.\n\n- **Outline** (Boolean): Similar to **Bold** in behavior, this attribute specifies whether the font is rendered as an\noutline. This property originates in Macintosh Office, and is not used on Windows. If this attribute is not\nspecified within an element, the default is assumed. The Spreadsheet component does not support this attribute.\nDefaults to `false`.\n\n- **Shadow** (Boolean): Similar to **Bold** in behavior, this attribute specifies whether the font is shadowed.\nThis property originates in Macintosh Office, and is not used on Windows. If this attribute is not\nspecified within an element, the default is assumed. The Spreadsheet component does not support this attribute.\nDefaults to `false`.\n\n- **Size** (Number): Specifies the size of the font in points. This value must be strictly greater than 0.\nIf this attribute is not specified within an element, the default is assumed. Defaults to `10`.\n\n- **StrikeThrough** (Boolean): Similar to **Bold** in behavior, this attribute specifies the strike-through state\nof the font. If this attribute is not specified within an element, the default is assumed. The Spreadsheet\ncomponent does not support this attribute. Defaults to `false`.\n\n- **Underline** (String): Specifies the underline state of the font. If the parent style is something other than\nNone and a child style wants to override the value, it must explicitly reset the value. If this attribute is\nnot specified within an element, the default is assumed. Possible values: `None`, `Single`, `Double`,\n`SingleAccounting`, and `DoubleAccounting`. Defaults to `None`.\n\n- **VerticalAlign** (String): This attribute specifies the subscript or superscript state of the font. If this\nattribute is not specified within an element, the default is assumed. The Spreadsheet component does not\nsupport this attribute. Possible values: `None`, `Subscript`, and `Superscript`. Defaults to `None`.\n\n- **CharSet** (Number): Win32-dependent character set value. Defaults to `0`.\n\n- **Family** (String): Win32-dependent font family. Possible values: `Automatic`, `Decorative`, `Modern`,\n`Roman`, `Script`, and `Swiss`. Defaults to `Automatic`.\n",
                "type": "Object",
                "src": {
                  "name": "0,93,26",
                  "text": "0,93,31,86:0,94,12,3354",
                  "type": "0,93,18"
                }
              },
              {
                "$type": "property",
                "name": "format",
                "text": "\nA number format code in the Excel number format syntax. This can also be one of the following values:\n`General`, `General Number`, `General Date`, `Long Date`, `Medium Date`, `Short Date`, `Long Time`, `Medium Time`,\n`Short Time`, `Currency`, `Euro Currency`, `Fixed`, `Standard`, `Percent`, `Scientific`, `Yes/No`,\n`True/False`, or `On/Off`. All special values are the same as the HTML number formats, with the exception\nof `Currency` and `Euro Currency`.\n\n`Currency` is the currency format with two decimal places and red text with parenthesis for negative values.\n\n`Euro Currency` is the same as `Currency` using the Euro currency symbol instead.\n",
                "type": "String",
                "src": {
                  "name": "0,172,26",
                  "text": "0,173,12,652",
                  "type": "0,172,18"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "text": "A unique name within this XML document that identifies this style. This string can be any valid\nidentifier and there is no notion of order. The special value of \"Default\" indicates that this style\nrepresents the default formatting for this workbook.\n",
                "type": "String",
                "src": {
                  "name": "0,16,26",
                  "text": "0,17,12,251",
                  "type": "0,16,18"
                }
              },
              {
                "$type": "property",
                "name": "interior",
                "text": "Defines the fill properties to use in this style. Each attribute that is specified is\nconsidered an override from the default.\n\nFollowing keys are allowed on this object:\n\n- **Color** (String): Specifies the fill color of the cell. This value can be either a 6-hexadecimal digit\nnumber in \"#rrggbb\" format or it can be any of the Internet Explorer named colors (including the named\nWindows colors). This string can also be special value of `Automatic`. This string is case insensitive.\nIf **Pattern**: \"Solid\", this value is the fill color of the cell. Otherwise, the cell is filled with a blend of\n**Color** and **PatternColor**, with the **Pattern** attribute choosing the appearance.\n\n- **Pattern** (String): Specifies the fill pattern in the cell. The fill pattern determines how to blend the\n**Color** and **PatternColor** attributes to produce the cell's appearance. The Spreadsheet component does not\nsupport this attribute. Possible values: `None`, `Solid`, `Gray75`, `Gray50`, `Gray25`, `Gray125`, `Gray0625`,\n`HorzStripe`, `VertStripe`, `ReverseDiagStripe`, `DiagStripe`, `DiagCross`, `ThickDiagCross`,\n`ThinHorzStripe`, `ThinVertStripe`, `ThinReverseDiagStripe`, `ThinDiagStripe`, `ThinHorzCross`, and\n`ThinDiagCross`. Defaults to `None`.\n\n- **PatternColor** (String): Specifies the secondary fill color of the cell when **Pattern** does not equal `Solid`.\nThe Spreadsheet component does not support this attribute. Defaults to `Automatic`.\n",
                "type": "Object",
                "src": {
                  "name": "0,148,26",
                  "text": "0,148,35,86:0,149,12,1367",
                  "type": "0,148,18"
                }
              },
              {
                "$type": "property",
                "name": "name",
                "text": "\nThis property identifies this style as a named style that was created in Excel using the Style\ncommand (Format menu). Duplicate names are illegal.\n",
                "type": "String",
                "src": {
                  "name": "0,33,26",
                  "text": "0,34,12,149",
                  "type": "0,33,18"
                }
              },
              {
                "$type": "property",
                "name": "parentId",
                "text": "\nPresence of this element indicates that this style should first inherit it's default formatting settings\nfrom the specified parent style. Then, after the parent settings are inherited, we apply the settings in\nthis style as overrides. This attribute refers to a predefined style ID.\n",
                "type": "String",
                "src": {
                  "name": "0,24,26",
                  "text": "0,25,12,285",
                  "type": "0,24,18"
                }
              },
              {
                "$type": "property",
                "name": "protection",
                "text": "Defines the protection properties that should be used in cells referencing this style.\nThis element exists as a short-hand way to apply protection to an entire table, row, or column, by simply adding it to a style.\n\nFollowing keys are allowed on this object and are all optional:\n\n- **Protected** (Boolean): This attribute indicates whether or not this cell is protected. When the worksheet is\nunprotected, cell-level protection has no effect. When a cell is protected, it will not allow the user to\nenter information into it. Defaults to `true`.\n\n- **HideFormula** (Boolean): This attribute indicates whether or not this cell's formula should be hidden when\nworksheet protection is enabled. Defaults to `false`.\n",
                "type": "Object",
                "src": {
                  "name": "0,41,26",
                  "text": "0,41,37,87:0,42,12,627",
                  "type": "0,41,18"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "checkCollection",
                "text": "This method could be used in config appliers that need to initialize a\nCollection that has items of type className.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "src": {
                      "name": "1,44,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dataCollection",
                    "src": {
                      "name": "1,45,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "className",
                    "src": {
                      "name": "1,46,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "*",
                    "src": {
                      "type": "1,47,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,49,0",
                  "text": "1,41,8,117"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constructCollection",
                "text": "Create a new Collection with a decoder for the specified className.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "src": {
                      "name": "1,64,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Collection",
                    "src": {
                      "type": "1,65,18"
                    }
                  }
                ],
                "src": {
                  "access": "1,67,8",
                  "name": "1,69,0",
                  "text": "1,62,8,69"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,40,21",
                      "text": "2,40,28,19",
                      "type": "2,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "2,38,12",
                  "text": "2,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCollectionDecoder",
                "text": "Builds a Collection decoder for the specified className.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "src": {
                      "name": "1,78,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "1,79,18"
                    }
                  }
                ],
                "src": {
                  "access": "1,81,8",
                  "name": "1,83,0",
                  "text": "1,76,8,58"
                }
              },
              {
                "$type": "method",
                "name": "getRenderData",
                "text": "Return the data used when rendering the template\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,101,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,103,0",
                  "text": "1,99,8,50"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.exporter.file.excel.Style-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.exporter.file.excel.Style-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.exporter.file.excel.Style-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.exporter.file.excel.Style-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "render",
                "text": "Renders the content according to the template provided to the class\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "1,92,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,94,0",
                  "text": "1,90,8,69"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.exporter.file.excel.Style-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.exporter.file.excel.Style-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.exporter.file.excel.Style-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.exporter.file.excel.Style-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,297,21,32",
                      "type": "2,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,239,12",
                  "text": "2,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.exporter.file.excel.Style-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.exporter.file.excel.Style-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.exporter.file.excel.Style-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.exporter.file.excel.Style-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.exporter.file.excel.Style-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.exporter.file.excel.Style-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.exporter.file.excel.Style-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.exporter.file.excel.Style-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.exporter.file.excel.Style-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.exporter.file.excel.Style-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.exporter.file.excel.Style-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "extends": "0,12,0",
          "name": "0,11,0",
          "text": "0,2,4,431"
        }
      }
    ]
  },
  "version": 1
}