{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/form/Basic.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Ext.form.BasicForm",
        "extends": "Ext.util.Observable",
        "name": "Ext.form.Basic",
        "requires": "Ext.util.MixedCollection,Ext.form.action.Load,Ext.form.action.Submit,Ext.form.action.StandardSubmit,Ext.window.MessageBox,Ext.data.ErrorCollection,Ext.util.DelayedTask",
        "text": "Provides input field management, validation, submission, and form loading services for the collection\nof <a href='#!/api/Ext.form.field.Field'>Ext.form.field.Field</a> instances within a <a href='#!/api/Ext.container.Container'>Ext.container.Container</a>. It is recommended\nthat you use a <a href='#!/api/Ext.form.Panel'>Ext.form.Panel</a> as the form container, as that has logic to automatically\nhook up an instance of <a href='#!/api/Ext.form.Basic'>Ext.form.Basic</a> (plus other conveniences related to field configuration.)\n\n## Form Actions\n\nThe Basic class delegates the handling of form loads and submits to instances of <a href='#!/api/Ext.form.action.Action'>Ext.form.action.Action</a>.\nSee the various Action implementations for specific details of each one's functionality, as well as the\ndocumentation for <a href='#!/api/Ext.form.Basic-method-doAction'>doAction</a> which details the configuration options that can be specified in\neach action call.\n\nThe default submit Action is <a href='#!/api/Ext.form.action.Submit'>Ext.form.action.Submit</a>, which uses an Ajax request to submit the\nform's values to a configured URL. To enable normal browser submission of an Ext form, use the\n<a href='#!/api/Ext.form.Basic-cfg-standardSubmit'>standardSubmit</a> config option.\n\n## File uploads\n\nFile uploads are not performed using normal 'Ajax' techniques; see the description for\n<a href='#!/api/Ext.form.Basic-method-hasUpload'>hasUpload</a> for details. If you're using file uploads you should read the method description.\n\n## Example usage:\n\n    @example\n    Ext.create('Ext.form.Panel', {\n        title: 'Basic Form',\n        renderTo: Ext.getBody(),\n        bodyPadding: 5,\n        width: 350,\n\n        // Any configuration items here will be automatically passed along to\n        // the Ext.form.Basic instance when it gets created.\n\n        // The form will submit an AJAX request to this URL when submitted\n        url: 'save-form.php',\n\n        items: [{\n            xtype: 'textfield',\n            fieldLabel: 'Field',\n            name: 'theField'\n        }],\n\n        buttons: [{\n            text: 'Submit',\n            handler: function() {\n                // The getForm() method returns the Ext.form.Basic instance:\n                var form = this.up('form').getForm();\n                if (form.isValid()) {\n                    // Submit the Ajax request and handle the response\n                    form.submit({\n                        success: function(form, action) {\n                           Ext.Msg.alert('Success', action.result.message);\n                        },\n                        failure: function(form, action) {\n                            Ext.Msg.alert('Failed', action.result ? action.result.message : 'No response');\n                        }\n                    });\n                }\n            }\n        }]\n    });\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "api",
                "text": "If specified, load and submit actions will be handled with <a href='#!/api/Ext.form.action.DirectLoad'>Ext.form.action.DirectLoad</a>\nand <a href='#!/api/Ext.form.action.DirectSubmit'>Ext.form.action.DirectSubmit</a>.  Methods which have been imported by\n<a href='#!/api/Ext.direct.Manager'>Ext.direct.Manager</a> can be specified here to load and submit forms. API methods may also be\nspecified as strings. See <a href='#!/api/Ext.data.proxy.Direct-cfg-directFn'>Ext.data.proxy.Direct#directFn</a>.  Such as the following:\n\n    api: {\n        load: App.ss.MyProfile.load,\n        submit: App.ss.MyProfile.submit\n    }\n\nLoad actions can use <a href='#!/api/Ext.form.Basic-cfg-paramOrder'>paramOrder</a> or <a href='#!/api/Ext.form.Basic-cfg-paramsAsHash'>paramsAsHash</a> to customize how the load method\nis invoked.  Submit actions will always use a standard form submit. The `formHandler` configuration\n(see Ext.direct.RemotingProvider#action) must be set on the associated server-side method which has\nbeen imported by <a href='#!/api/Ext.direct.Manager'>Ext.direct.Manager</a>.\n",
                "type": "Object",
                "src": {
                  "name": "0,258,22",
                  "text": "0,259,8,826",
                  "type": "0,258,14"
                }
              },
              {
                "$type": "property",
                "name": "baseParams",
                "text": "Parameters to pass with all requests. e.g. baseParams: `{id: '123', foo: 'bar'}`.\n\nParameters are encoded as standard HTTP parameters using <a href='#!/api/Ext.Object-method-toQueryString'>Ext.Object#toQueryString</a>.\n",
                "type": "Object",
                "src": {
                  "name": "0,245,22",
                  "text": "0,246,8,174",
                  "type": "0,245,14"
                }
              },
              {
                "$type": "property",
                "name": "errorReader",
                "text": "An Ext.data.reader.Reader (e.g. <a href='#!/api/Ext.data.reader.Xml'>Ext.data.reader.Xml</a>) instance or\nconfiguration to be used to read field error messages returned from 'submit' actions.\nThis is optional as there is built-in support for processing JSON responses.\n\nThe Records which provide messages for the invalid Fields must use the\nField name (or id) as the Record ID, and must contain a field called 'msg'\nwhich contains the error message.\n\nThe errorReader does not have to be a full-blown implementation of a\nReader. It simply needs to implement a `read(xhr)` function\nwhich returns an Array of Records in an object with the following\nstructure:\n\n    {\n        records: recordArray\n    }\n",
                "type": "Object/Ext.data.reader.Reader",
                "src": {
                  "name": "0,219,45",
                  "text": "0,220,8,666",
                  "type": "0,219,14"
                }
              },
              {
                "$type": "property",
                "name": "jsonSubmit",
                "text": "If set to true, the field values are sent as JSON in the request body.\nAll of the field values, plus any additional params configured via <a href='#!/api/Ext.form.Basic-cfg-baseParams'>baseParams</a>\nand/or the `options` to <a href='#!/api/Ext.form.Basic-method-submit'>submit</a>, will be included in the values POSTed in the body of the request.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,329,23",
                  "text": "0,330,8,265",
                  "type": "0,329,14"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS <a href='#!/api/Ext.Component'>Ext.Component</a>**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the <a href='#!/api/Ext.view.View'>Ext.view.View</a>s **<a href='#!/api/Ext.view.View-event-itemclick'>Ext.view.View#itemclick</a>** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "1,243,25",
                  "text": "1,244,11,1325",
                  "type": "1,243,17"
                }
              },
              {
                "$type": "property",
                "name": "metadata",
                "optional": true,
                "text": "Optional metadata to pass with the actions when Ext Direct <a href='#!/api/Ext.form.Basic-cfg-api'>api</a> is used.\nSee <a href='#!/api/Ext.direct.Manager'>Ext.direct.Manager</a> for more information.\n",
                "type": "Object/Array",
                "src": {
                  "name": "0,300,29",
                  "text": "0,301,8,134",
                  "type": "0,300,14"
                }
              },
              {
                "$type": "property",
                "name": "method",
                "text": "The request method to use (GET or POST) for form actions if one isn't supplied in the action options.\n",
                "type": "String",
                "src": {
                  "name": "0,207,22",
                  "text": "0,208,8,102",
                  "type": "0,207,14"
                }
              },
              {
                "$type": "property",
                "name": "paramOrder",
                "text": "A list of params to be executed server side. Only used for the <a href='#!/api/Ext.form.Basic-cfg-api'>api</a> <a href='#!/api/Ext.form.Basic-method-load'>load</a>\nconfiguration.\n\nSpecify the params in the order in which they must be executed on the\nserver-side as either (1) an Array of String values, or (2) a String of params\ndelimited by either whitespace, comma, or pipe. For example,\nany of the following would be acceptable:\n\n    paramOrder: ['param1','param2','param3']\n    paramOrder: 'param1 param2 param3'\n    paramOrder: 'param1,param2,param3'\n    paramOrder: 'param1|param2|param'\n",
                "type": "String/String[]",
                "src": {
                  "name": "0,276,31",
                  "text": "0,277,8,513",
                  "type": "0,276,14"
                }
              },
              {
                "$type": "property",
                "name": "paramsAsHash",
                "text": "Only used for the <a href='#!/api/Ext.form.Basic-cfg-api'>api</a> <a href='#!/api/Ext.form.Basic-method-load'>load</a> configuration. If true, parameters will be sent as a\nsingle hash collection of named arguments. Providing a <a href='#!/api/Ext.form.Basic-cfg-paramOrder'>paramOrder</a> nullifies this\nconfiguration.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,292,23",
                  "text": "0,293,8,196",
                  "type": "0,292,14"
                }
              },
              {
                "$type": "property",
                "name": "reader",
                "text": "An Ext.data.reader.Reader (e.g. <a href='#!/api/Ext.data.reader.Xml'>Ext.data.reader.Xml</a>) instance or\nconfiguration to be used to read data when executing 'load' actions. This\nis optional as there is built-in support for processing JSON responses.\n",
                "type": "Object/Ext.data.reader.Reader",
                "src": {
                  "name": "0,212,45",
                  "text": "0,213,8,219",
                  "type": "0,212,14"
                }
              },
              {
                "$type": "property",
                "name": "standardSubmit",
                "text": "If set to true, a standard HTML form submit is used instead of a XHR (Ajax) style form submission.\nAll of the field values, plus any additional params configured via <a href='#!/api/Ext.form.Basic-cfg-baseParams'>baseParams</a>\nand/or the `options` to <a href='#!/api/Ext.form.Basic-method-submit'>submit</a>, will be included in the values submitted in the form.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,322,23",
                  "text": "0,323,8,281",
                  "type": "0,322,14"
                }
              },
              {
                "$type": "property",
                "name": "timeout",
                "text": "Timeout for form actions in seconds.\n",
                "type": "Number",
                "src": {
                  "name": "0,252,22",
                  "text": "0,253,8,37",
                  "type": "0,252,14"
                }
              },
              {
                "$type": "property",
                "name": "trackResetOnLoad",
                "text": "If set to true, <a href='#!/api/Ext.form.Basic-method-reset'>method-reset</a>() resets to the last loaded or\n<a href='#!/api/Ext.form.Basic-method-setValues'>Ext.form.Basic#setValues</a>() data instead of when the form was first\ncreated.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,314,23",
                  "text": "0,315,8,153",
                  "type": "0,314,14"
                }
              },
              {
                "$type": "property",
                "name": "url",
                "text": "The URL to use for form actions if one isn't supplied in the\n<a href='#!/api/Ext.form.Basic-method-doAction'>Ext.form.Basic#doAction</a> options.\n",
                "type": "String",
                "src": {
                  "name": "0,239,22",
                  "text": "0,240,8,111",
                  "type": "0,239,14"
                }
              },
              {
                "$type": "property",
                "name": "waitMsgTarget",
                "text": "By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific\nelement by passing it or its id or mask the form itself by passing in true.\n",
                "type": "String/HTMLElement/Ext.dom.Element",
                "src": {
                  "name": "0,336,50",
                  "text": "0,337,8,167",
                  "type": "0,336,14"
                }
              },
              {
                "$type": "property",
                "name": "waitTitle",
                "text": "The default title to show for the waiting message box\n",
                "type": "String",
                "src": {
                  "name": "0,307,22",
                  "text": "0,308,8,54",
                  "type": "0,307,14"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "actioncomplete",
                "text": "Fires when an action is completed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.Basic",
                    "src": {
                      "name": "0,99,32",
                      "type": "0,99,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "action",
                    "text": "The <a href='#!/api/Ext.form.action.Action'>Ext.form.action.Action</a> that completed\n",
                    "type": "Ext.form.action.Action",
                    "src": {
                      "name": "0,100,40",
                      "text": "0,100,47,50",
                      "type": "0,100,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,97,15",
                  "text": "0,98,8,35"
                }
              },
              {
                "$type": "event",
                "name": "actionfailed",
                "text": "Fires when an action fails.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.Basic",
                    "src": {
                      "name": "0,92,32",
                      "type": "0,92,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "action",
                    "text": "The <a href='#!/api/Ext.form.action.Action'>Ext.form.action.Action</a> that failed\n",
                    "type": "Ext.form.action.Action",
                    "src": {
                      "name": "0,93,40",
                      "text": "0,93,47,47",
                      "type": "0,93,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,90,15",
                  "text": "0,91,8,28"
                }
              },
              {
                "$type": "event",
                "name": "beforeaction",
                "text": "Fires before any action is performed. Return false to cancel the action.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.Basic",
                    "src": {
                      "name": "0,85,32",
                      "type": "0,85,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "action",
                    "text": "The <a href='#!/api/Ext.form.action.Action'>Ext.form.action.Action</a> to be performed\n",
                    "type": "Ext.form.action.Action",
                    "src": {
                      "name": "0,86,40",
                      "text": "0,86,47,51",
                      "type": "0,86,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,83,15",
                  "text": "0,84,8,73"
                }
              },
              {
                "$type": "event",
                "name": "dirtychange",
                "text": "Fires when the dirty state of the entire form changes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.Basic",
                    "src": {
                      "name": "0,113,32",
                      "type": "0,113,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dirty",
                    "text": "`true` if the form is now dirty, `false` if it is no longer dirty.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,114,25",
                      "text": "0,114,31,67",
                      "type": "0,114,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,111,15",
                  "text": "0,112,8,55"
                }
              },
              {
                "$type": "event",
                "access": "private",
                "name": "errorchange",
                "text": "Fires when the error of one (or more) of the fields in the form changes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.Basic",
                    "src": {
                      "name": "0,120,32",
                      "type": "0,120,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,122,8",
                  "name": "0,118,15",
                  "text": "0,119,8,73"
                }
              },
              {
                "$type": "event",
                "name": "validitychange",
                "text": "Fires when the validity of the entire form changes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.Basic",
                    "src": {
                      "name": "0,106,32",
                      "type": "0,106,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "valid",
                    "text": "`true` if the form is now valid, `false` if it is now invalid.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,107,25",
                      "text": "0,107,31,63",
                      "type": "0,107,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,104,15",
                  "text": "0,105,8,52"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "1,413,27",
                      "type": "1,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,414,30,35",
                      "type": "1,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,412,12",
                  "name": "1,416,0",
                  "text": "1,411,12,65"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for <a href='#!/api/Ext.form.Basic-method-onAfter'>onAfter</a>.\n",
                "src": {
                  "name": "1,1236,0",
                  "text": "1,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.form.Basic-method-onBefore'>onBefore</a>.\n",
                "src": {
                  "name": "1,1230,0",
                  "text": "1,1228,12,29"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The <a href='#!/api/Ext.form.Basic-method-on'>on</a> method is shorthand for\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,835,35",
                      "text": "1,835,45,37:1,836,12,61",
                      "type": "1,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,838,38",
                      "text": "1,838,42,46:1,839,12,166",
                      "type": "1,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "1,843,29",
                      "text": "1,843,36,62:1,844,12,73",
                      "type": "1,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "1,853,36",
                          "text": "1,854,12,139",
                          "type": "1,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,857,36",
                          "text": "1,858,12,94",
                          "type": "1,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,861,37",
                          "text": "1,862,12,96",
                          "type": "1,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an <a href='#!/api/Ext.util.DelayedTask'>Ext.util.DelayedTask</a> delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,865,36",
                          "text": "1,866,12,262",
                          "type": "1,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  <a href='#!/api/Ext.Function-method-requestAnimationFrame'>Ext.Function#requestAnimationFrame</a>. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,870,36",
                          "text": "1,871,12,323",
                          "type": "1,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "1,877,49",
                          "text": "1,878,12,135",
                          "type": "1,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.Component'>Ext.Component</a>.**\n  The name of a Component property which references an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of <a href='#!/api/Ext.Component'>Ext.Component</a> which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "1,881,36",
                          "text": "1,882,12,781",
                          "type": "1,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "1,905,37",
                          "text": "1,906,12,295",
                          "type": "1,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopPropagation'>Ext.event.Event#stopPropagation</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,914,38",
                          "text": "1,915,12,212",
                          "type": "1,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-preventDefault'>Ext.event.Event#preventDefault</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,919,38",
                          "text": "1,920,12,210",
                          "type": "1,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopEvent'>Ext.event.Event#stopEvent</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,924,38",
                          "text": "1,925,12,200",
                          "type": "1,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,929,36",
                          "text": "1,930,12,179",
                          "type": "1,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the <a href='#!/api/Ext.form.Basic-method-destroy'>destroy</a> method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using <a href='#!/api/Ext.form.Basic-method-un'>un</a>; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See <a href='#!/api/Ext.form.Basic-method-un'>un</a> for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "1,934,38",
                          "text": "1,935,12,441",
                          "type": "1,934,20",
                          "value": "1,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,942,37",
                          "text": "1,943,12,737",
                          "type": "1,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "1,954,37",
                          "text": "1,955,12,301",
                          "type": "1,954,20",
                          "value": "1,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,846,29",
                      "text": "1,846,38,44:1,847,12,154",
                      "type": "1,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "1,962,29",
                      "text": "1,963,12,1831",
                      "type": "1,962,20",
                      "value": "1,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the <a href='#!/api/Ext.form.Basic-method-destroy'>destroy</a> method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1021,29,54:1,1022,12,516",
                      "type": "1,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1041,0",
                  "text": "1,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use <a href='#!/api/Ext.form.Basic-method-mon'>mon</a> or <a href='#!/api/Ext.form.Basic-method-addManagedListener'>addManagedListener</a> if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "1,456,56",
                      "text": "1,456,61,47",
                      "type": "1,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "1,457,34",
                      "text": "1,457,40,63",
                      "type": "1,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,458,36",
                      "text": "1,458,39,49:1,459,11,85",
                      "type": "1,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,461,27",
                      "text": "1,461,33,92:1,462,11,43",
                      "type": "1,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> options.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,463,27",
                      "text": "1,463,35,67:1,464,11,61",
                      "type": "1,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the <a href='#!/api/Ext.form.Basic-method-destroy'>destroy</a> method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "1,465,28,54:1,466,11,513",
                      "type": "1,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,484,0",
                  "text": "1,430,11,1093"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterAction",
                "text": "Called after an action is performed via <a href='#!/api/Ext.form.Basic-method-doAction'>doAction</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "action",
                    "text": "The Action instance that was invoked\n",
                    "type": "Ext.form.action.Action",
                    "src": {
                      "name": "0,842,40",
                      "text": "0,842,47,37",
                      "type": "0,842,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "success",
                    "text": "True if the action completed successfully, false, otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,843,25",
                      "text": "0,843,33,61",
                      "type": "0,843,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,840,8",
                  "name": "0,845,0",
                  "text": "0,841,8,59"
                }
              },
              {
                "$type": "method",
                "name": "applyIfToFields",
                "text": "Calls <a href='#!/api/Ext-method-applyIf'>Ext#applyIf</a> for all field in this form with the passed object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "text": "The object to be applied\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1198,24",
                      "text": "0,1198,28,25",
                      "type": "0,1198,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,1199,33,5",
                      "type": "0,1199,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1201,0",
                  "text": "0,1197,8,89"
                }
              },
              {
                "$type": "method",
                "name": "applyToFields",
                "text": "Calls <a href='#!/api/Ext-apply'>Ext.apply</a> for all fields in this form with the passed object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "text": "The object to be applied\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1181,24",
                      "text": "0,1181,28,25",
                      "type": "0,1181,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,1182,33,5",
                      "type": "0,1182,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1184,0",
                  "text": "0,1180,8,86"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beforeAction",
                "text": "Called before an action is performed via <a href='#!/api/Ext.form.Basic-method-doAction'>doAction</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "action",
                    "text": "The Action instance that was invoked\n",
                    "type": "Ext.form.action.Action",
                    "src": {
                      "name": "0,793,40",
                      "text": "0,793,47,37",
                      "type": "0,793,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,791,8",
                  "name": "0,795,0",
                  "text": "0,792,8,60"
                }
              },
              {
                "$type": "method",
                "name": "checkDirty",
                "text": "Check whether the dirty state of the entire form has changed since it was last checked, and\nif so fire the <a href='#!/api/Ext.form.Basic-event-dirtychange'>dirtychange</a> event. This is automatically invoked\nwhen an individual field's `dirty` state changes.\n",
                "src": {
                  "name": "0,542,0",
                  "text": "0,538,8,227"
                }
              },
              {
                "$type": "method",
                "name": "checkValidity",
                "text": "Check whether the validity of the entire form has changed since it was last checked, and\nif so fire the <a href='#!/api/Ext.form.Basic-event-validitychange'>validitychange</a> event. This is automatically invoked\nwhen an individual field's validity changes.\n",
                "src": {
                  "name": "0,443,0",
                  "text": "0,439,8,225"
                }
              },
              {
                "$type": "method",
                "name": "clearInvalid",
                "text": "Clears all invalid field messages in this form.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,1134,33,5",
                      "type": "0,1134,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1136,0",
                  "text": "0,1133,8,48"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "1,1255,0",
                  "text": "1,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "1,1291,0",
                  "text": "1,1289,11,47"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new form.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "text": "The component that is the container for the form, usually a <a href='#!/api/Ext.form.Panel'>Ext.form.Panel</a>\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "0,127,41",
                      "text": "0,127,47,83",
                      "type": "0,127,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "Configuration options. These are normally specified in the config to the\n<a href='#!/api/Ext.form.Panel'>Ext.form.Panel</a> constructor, which passes them along to the BasicForm automatically.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,128,24",
                      "text": "0,128,31,73:0,129,8,92",
                      "type": "0,128,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,131,0",
                  "text": "0,126,8,18"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1522,27",
                      "text": "1,1522,35,55",
                      "type": "1,1522,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,1523,26",
                      "text": "1,1523,35,61",
                      "type": "1,1523,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "1,1524,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,1520,11",
                  "name": "1,1526,0",
                  "text": "1,1521,11,103"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "Destroys this object.\n",
                "src": {
                  "name": "0,349,0",
                  "text": "0,347,8,22"
                }
              },
              {
                "$type": "method",
                "name": "doAction",
                "text": "Performs a predefined action (an implementation of <a href='#!/api/Ext.form.action.Action'>Ext.form.action.Action</a>) to perform application-\nspecific processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "action",
                    "text": "The name of the predefined action type, or instance of <a href='#!/api/Ext.form.action.Action'>Ext.form.action.Action</a> to perform.\n",
                    "type": "String/Ext.form.action.Action",
                    "src": {
                      "name": "0,594,47",
                      "text": "0,594,54,62:0,595,8,37",
                      "type": "0,594,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "The options to pass to the <a href='#!/api/Ext.form.action.Action'>Ext.form.action.Action</a> that will get created,\nif the action argument is a String.\n\nAll of the config options listed below are supported by both the <a href='#!/api/Ext.form.action.Submit'>Ext.form.action.Submit</a> and\n<a href='#!/api/Ext.form.action.Load'>Ext.form.action.Load</a> actions unless otherwise noted (custom actions could also accept other\nconfig options):\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "url",
                        "text": "The url for the action (defaults to the form's <a href='#!/api/Ext.form.Basic-cfg-url'>url</a>.)\n",
                        "type": "String",
                        "src": {
                          "name": "0,604,32",
                          "text": "0,605,8,63",
                          "type": "0,604,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "method",
                        "text": "The form method to use (defaults to the form's method, or POST if not defined)\n",
                        "type": "String",
                        "src": {
                          "name": "0,607,32",
                          "text": "0,608,8,80",
                          "type": "0,607,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "params",
                        "text": "The params to pass (defaults to the form's baseParams, or none if not defined)\n\nParameters are encoded as standard HTTP parameters using <a href='#!/api/Ext-method-urlEncode'>Ext#urlEncode</a>.\n",
                        "type": "String/Object",
                        "src": {
                          "name": "0,610,39",
                          "text": "0,611,8,186",
                          "type": "0,610,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "headers",
                        "text": "Request headers to set for the action.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,615,32",
                          "text": "0,616,8,40",
                          "type": "0,615,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "success",
                        "text": "The callback that will be invoked after a successful response (see top of <a href='#!/api/Ext.form.action.Submit'>Ext.form.action.Submit</a>\nand <a href='#!/api/Ext.form.action.Load'>Ext.form.action.Load</a> for a description of what constitutes a successful response).\n",
                        "type": "Function",
                        "items": [
                          {
                            "$type": "property",
                            "name": "form",
                            "text": "The form that requested the action.\n",
                            "type": "Ext.form.Basic",
                            "src": {
                              "name": "0,621,48",
                              "text": "0,621,53,36",
                              "type": "0,621,16"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "action",
                            "text": "The Action object which performed the operation.\nThe action object contains these properties of interest:\n\n - <a href='#!/api/Ext.form.action.Action-property-response'>Ext.form.action.Action#response</a>\n - <a href='#!/api/Ext.form.action.Action-property-result'>Ext.form.action.Action#result</a> - interrogate for custom post-processing\n - <a href='#!/api/Ext.form.action.Action-property-type'>Ext.form.action.Action#type</a>\n",
                            "type": "Ext.form.action.Action",
                            "src": {
                              "name": "0,622,56",
                              "text": "0,622,63,49:0,623,8,244",
                              "type": "0,622,16"
                            }
                          }
                        ],
                        "src": {
                          "name": "0,618,34",
                          "text": "0,619,8,212",
                          "type": "0,618,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "failure",
                        "text": "The callback that will be invoked after a failed transaction attempt.\n",
                        "type": "Function",
                        "items": [
                          {
                            "$type": "property",
                            "name": "form",
                            "text": "The form that requested the action.\n",
                            "type": "Ext.form.Basic",
                            "src": {
                              "name": "0,631,48",
                              "text": "0,631,53,36",
                              "type": "0,631,16"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "action",
                            "text": "The Action object which performed the operation.\nThe action object contains these properties of interest:\n\n- <a href='#!/api/Ext.form.action.Action-property-failureType'>Ext.form.action.Action#failureType</a>\n- <a href='#!/api/Ext.form.action.Action-property-response'>Ext.form.action.Action#response</a>\n- <a href='#!/api/Ext.form.action.Action-property-result'>Ext.form.action.Action#result</a> - interrogate for custom post-processing\n- <a href='#!/api/Ext.form.action.Action-property-type'>Ext.form.action.Action#type</a>\n",
                            "type": "Ext.form.action.Action",
                            "src": {
                              "name": "0,632,56",
                              "text": "0,632,63,49:0,633,8,298",
                              "type": "0,632,16"
                            }
                          }
                        ],
                        "src": {
                          "name": "0,629,34",
                          "text": "0,630,8,70",
                          "type": "0,629,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "The scope in which to call the callback functions (The this reference for the callback functions).\n",
                        "type": "Object",
                        "src": {
                          "name": "0,640,32",
                          "text": "0,641,8,100",
                          "type": "0,640,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "clientValidation",
                        "text": "Submit Action only. Determines whether a Form's fields are validated in a final call to <a href='#!/api/Ext.form.Basic-method-isValid'>Ext.form.Basic#isValid</a> prior to submission. Set to false to prevent this. If undefined, pre-submission\nfield validation is performed.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,643,33",
                          "text": "0,644,8,239",
                          "type": "0,643,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,597,25",
                      "text": "0,597,34,81:0,598,8,267",
                      "type": "0,597,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,648,33,5",
                      "type": "0,648,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,650,0",
                  "text": "0,591,8,129"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "1,761,27",
                      "type": "1,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "1,762,26",
                      "type": "1,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "1,763,28",
                      "type": "1,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,759,11",
                  "name": "1,765,0",
                  "text": "1,758,11,24"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "1,1567,36",
                      "text": "1,1567,47,54",
                      "type": "1,1567,19"
                    }
                  }
                ],
                "src": {
                  "name": "1,1569,0",
                  "text": "1,1534,11,1138"
                }
              },
              {
                "$type": "method",
                "name": "findField",
                "text": "Find a specific <a href='#!/api/Ext.form.field.Field'>Ext.form.field.Field</a> in this form by id or name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The value to search for (specify either a <a href='#!/api/Ext.Component-cfg-id'>Ext.Component#id</a> or\n<a href='#!/api/Ext.form.field.Field-method-getName'>Ext.form.field.Field#getName</a>).\n",
                    "type": "String",
                    "src": {
                      "name": "0,877,24",
                      "text": "0,877,27,73:0,878,8,58",
                      "type": "0,877,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first matching field, or <a href='#!/api/null'>null</a> if none was found.\n",
                    "type": "Ext.form.field.Field",
                    "src": {
                      "text": "0,879,39,55",
                      "type": "0,879,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,881,0",
                  "text": "0,876,8,73"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use <a href='#!/api/Ext.form.Basic-fireEventAction'>fireEventAction</a> instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "1,640,28",
                      "text": "1,640,38,31",
                      "type": "1,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,641,27",
                      "text": "1,641,32,58",
                      "type": "1,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,642,30",
                      "text": "1,642,33,21",
                      "type": "1,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "1,643,29",
                      "text": "1,643,36,62:1,644,12,72",
                      "type": "1,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "1,645,29",
                      "text": "1,645,38,52:1,646,12,72",
                      "type": "1,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "1,647,29",
                      "text": "1,647,45,47:1,648,12,394",
                      "type": "1,647,20",
                      "value": "1,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "1,653,12",
                  "deprecatedVersion": "1,653,12",
                  "name": "1,655,0",
                  "text": "1,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>).\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.form.Basic-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "1,568,27",
                      "text": "1,568,37,31",
                      "type": "1,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "1,569,30",
                      "text": "1,569,35,54",
                      "type": "1,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,570,29,77",
                      "type": "1,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,572,0",
                  "text": "1,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.form.Basic-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "1,605,27",
                      "text": "1,605,37,31",
                      "type": "1,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "1,606,29",
                      "text": "1,606,34,53",
                      "type": "1,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,607,29,77",
                      "type": "1,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,609,0",
                  "text": "1,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "1,721,28",
                      "text": "1,721,38,31",
                      "type": "1,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,722,27",
                      "text": "1,722,32,58",
                      "type": "1,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,723,37",
                      "text": "1,723,40,21",
                      "type": "1,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "1,724,29",
                      "text": "1,724,36,62:1,725,12,72",
                      "type": "1,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "1,726,36",
                      "text": "1,726,44,47:1,727,12,201",
                      "type": "1,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,731,0",
                  "text": "1,714,12,409"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBoundItems",
                "text": "Finds and returns the set of all items bound to fields inside this form\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The set of all bound form field items\n",
                    "type": "Ext.util.MixedCollection",
                    "src": {
                      "text": "0,393,43,38",
                      "type": "0,393,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,391,8",
                  "name": "0,395,0",
                  "text": "0,392,8,72"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "1,793,41,63",
                      "type": "1,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,792,11",
                  "name": "1,795,0",
                  "text": "1,791,11,43"
                }
              },
              {
                "$type": "method",
                "name": "getFieldValues",
                "text": "Retrieves the fields in the form as a set of key/value pairs, using their\n<a href='#!/api/Ext.form.field.Field-method-getModelData'>Ext.form.field.Field#getModelData</a> method to collect the values.\nIf multiple fields return values under the same name those values will be combined into an Array.\nThis is similar to <a href='#!/api/Ext.form.Basic-method-getValues'>getValues</a> except that this method collects type-specific data values\n(e.g. Date objects for date fields) while getValues returns only String values for submission.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dirtyOnly",
                    "optional": true,
                    "text": "If true, only fields that are dirty will be included in the result.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1125,26",
                      "text": "0,1125,43,68",
                      "type": "0,1125,16",
                      "value": "0,1125,36"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "0,1126,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1128,0",
                  "text": "0,1119,8,452"
                }
              },
              {
                "$type": "method",
                "name": "getFields",
                "text": "Return all the <a href='#!/api/Ext.form.field.Field'>Ext.form.field.Field</a> components in the owner container.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Collection of the Field objects\n",
                    "type": "Ext.util.MixedCollection",
                    "src": {
                      "text": "0,384,43,32",
                      "type": "0,384,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,386,0",
                  "text": "0,383,8,79"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "2,75,25,3",
                      "type": "2,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,77,0",
                  "text": "2,74,8,93"
                }
              },
              {
                "$type": "method",
                "name": "getRecord",
                "text": "Returns the last Ext.data.Model instance that was loaded via <a href='#!/api/Ext.form.Basic-method-loadRecord'>loadRecord</a>\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The record\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,784,33,11",
                      "type": "0,784,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,786,0",
                  "text": "0,783,8,81"
                }
              },
              {
                "$type": "method",
                "name": "getValues",
                "text": "Retrieves the fields in the form as a set of key/value pairs, using their\n<a href='#!/api/Ext.form.field.Field-method-getSubmitData'>Ext.form.field.Field#getSubmitData</a> method to collect the values.\nIf multiple fields return values under the same name those values will be combined into an Array.\nThis is similar to <a href='#!/api/Ext.form.Basic-method-getFieldValues'>Ext.form.Basic#getFieldValues</a> except that this method\ncollects only String values for submission, while getFieldValues collects type-specific data\nvalues (e.g. Date objects for date fields.)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "asString",
                    "optional": true,
                    "text": "If true, will return the key/value collection as a single\nURL-encoded param string.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1057,26",
                      "text": "0,1057,42,58:0,1058,8,26",
                      "type": "0,1057,16",
                      "value": "0,1057,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dirtyOnly",
                    "optional": true,
                    "text": "If true, only fields that are dirty will be included in the result.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1059,26",
                      "text": "0,1059,43,68",
                      "type": "0,1059,16",
                      "value": "0,1059,36"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "includeEmptyText",
                    "optional": true,
                    "text": "If true, the configured emptyText of empty fields will be used.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1060,26",
                      "text": "0,1060,50,64",
                      "type": "0,1060,16",
                      "value": "0,1060,43"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "useDataValues",
                    "optional": true,
                    "text": "If true, the <a href='#!/api/Ext.form.field.Field-method-getModelData'>Ext.form.field.Field#getModelData</a>\nmethod is used to retrieve values from fields, otherwise the <a href='#!/api/Ext.form.field.Field-method-getSubmitData'>Ext.form.field.Field#getSubmitData</a>\nmethod is used.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1061,26",
                      "text": "0,1061,47,68:0,1062,8,134",
                      "type": "0,1061,16",
                      "value": "0,1061,40"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String/Object",
                    "src": {
                      "type": "0,1064,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1066,0",
                  "text": "0,1050,8,495"
                }
              },
              {
                "$type": "method",
                "name": "hasInvalidField",
                "text": "Returns true if the form contains any invalid fields. No fields will be marked as invalid\nas a result of calling this; to trigger marking of fields use <a href='#!/api/Ext.form.Basic-method-isValid'>isValid</a> instead.\n",
                "src": {
                  "name": "0,410,0",
                  "text": "0,407,8,178"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "1,1334,27",
                      "text": "1,1334,37,35",
                      "type": "1,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1335,29,67",
                      "type": "1,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1337,0",
                  "text": "1,1331,11,161"
                }
              },
              {
                "$type": "method",
                "name": "hasUpload",
                "text": "Returns `true` if the form contains a file upload field. This is used to determine the method for submitting the\nform: File uploads are not performed using normal 'Ajax' techniques, that is they are **not** performed using\nXMLHttpRequests. Instead a hidden `<form>` element containing all the fields is created temporarily and submitted\nwith its [target][1] set to refer to a dynamically generated, hidden `<iframe>` which is inserted into the document\nbut removed after the return data has been gathered.\n\nThe server response is parsed by the browser to create the document for the IFRAME. If the server is using JSON\nto send the return object, then the [Content-Type][2] header should be set to \"text/plain\" in order to tell the\nbrowser to insert the text unchanged into a '&lt;pre>' element in the document body from which it can be retrieved.\n\nIf the [Content-Type][2] header is sent as the default, \"text/html\", then characters which are significant to an HTML\nparser must be sent as HTML entities, so encode `\"<\"` as `\"&lt;\"`, `\"&\"` as `\"&amp;\"` etc.\n\nThe response text is retrieved from the document, and a fake XMLHttpRequest object is created containing a\nresponseText property in order to conform to the requirements of event handlers and callbacks.\n\nBe aware that file upload packets are sent with the content type [multipart/form][3] and some server technologies\n(notably JEE) may require some custom processing in order to retrieve parameter names and parameter values from\nthe packet content.\n\n[1]: http://www.w3.org/TR/REC-html40/present/frames.html#adef-target\n[2]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\n[3]: http://www.faqs.org/rfcs/rfc2388.html\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,582,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,584,0",
                  "text": "0,558,8,1690"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initialize",
                "text": "Do any post layout initialization\n",
                "src": {
                  "access": "0,198,8",
                  "name": "0,200,0",
                  "text": "0,197,8,34"
                }
              },
              {
                "$type": "method",
                "name": "isDirty",
                "text": "Returns `true` if any fields in this form have changed from their original values.\n\nNote that if this BasicForm was configured with <a href='#!/api/Ext.form.Basic-cfg-trackResetOnLoad'>Ext.form.Basic#trackResetOnLoad</a> then the Fields' *original values* are updated when the values are\nloaded by <a href='#!/api/Ext.form.Basic-method-setValues'>Ext.form.Basic#setValues</a> or <a href='#!/api/Ext.form.Basic-method-loadRecord'>loadRecord</a>. This means\nthat:\n\n- <a href='#!/api/Ext.form.Basic-cfg-trackResetOnLoad'>trackResetOnLoad</a>: `false` -> Will return `true` after calling this method.\n- <a href='#!/api/Ext.form.Basic-cfg-trackResetOnLoad'>trackResetOnLoad</a>: `true` -> Will return `false` after calling this method.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,520,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,522,0",
                  "text": "0,510,8,524"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "1,1344,29",
                      "text": "1,1344,36,40",
                      "type": "1,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1345,30,31",
                      "type": "1,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1347,0",
                  "text": "1,1343,12,57"
                }
              },
              {
                "$type": "method",
                "name": "isValid",
                "text": "Returns true if client-side validation on the form is successful. Any invalid fields will be\nmarked as invalid. If you only want to determine overall form validity without marking anything,\nuse <a href='#!/api/Ext.form.Basic-method-hasInvalidField'>hasInvalidField</a> instead.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,425,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,427,0",
                  "text": "0,422,8,228"
                }
              },
              {
                "$type": "method",
                "name": "load",
                "text": "Shortcut to <a href='#!/api/Ext.form.Basic-method-doAction'>doAction</a> a <a href='#!/api/Ext.form.action.Load'>Ext.form.action.Load</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options to pass to the action (see <a href='#!/api/Ext.form.Basic-method-doAction'>doAction</a> for details)\n",
                    "type": "Object",
                    "src": {
                      "name": "0,725,24",
                      "text": "0,725,32,70",
                      "type": "0,725,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,726,33,5",
                      "type": "0,726,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,728,0",
                  "text": "0,724,8,77"
                }
              },
              {
                "$type": "method",
                "name": "loadRecord",
                "text": "Loads an <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> into this form by calling <a href='#!/api/Ext.form.Basic-method-setValues'>setValues</a> with the\n<a href='#!/api/Ext.data.Model-method-getData'>Ext.data.Model#getData</a>. The fields in the model are mapped to\nfields in the form by matching either the <a href='#!/api/Ext.form.field.Base-cfg-name'>Ext.form.field.Base#name</a> or <a href='#!/api/Ext.Component-cfg-itemId'>Ext.Component#itemId</a>.\nSee also <a href='#!/api/Ext.form.Basic-cfg-trackResetOnLoad'>trackResetOnLoad</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record to load\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,774,32",
                      "text": "0,774,39,19",
                      "type": "0,774,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,775,33,5",
                      "type": "0,775,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,777,0",
                  "text": "0,770,8,312"
                }
              },
              {
                "$type": "method",
                "name": "markInvalid",
                "text": "This method allows you to mark one or more fields in a form as invalid along with\none or more invalid messages per field.\n\n    var formPanel = Ext.create('Ext.form.Panel', {\n        title: 'Contact Info',\n        width: 300,\n        bodyPadding: 10,\n        renderTo: Ext.getBody(),\n        items: [{\n            xtype: 'textfield',\n            name: 'name',\n            id: 'nameId',\n            fieldLabel: 'Name'\n        }, {\n            xtype: 'textfield',\n            name: 'email',\n            id: 'emailId',\n            fieldLabel: 'Email Address'\n        }],\n        bbar: [{\n            text: 'Mark both fields invalid',\n            handler: function() {\n                formPanel.getForm().markInvalid([{\n                    field: 'name',\n                    message: 'Name invalid message'\n                }, {\n                    field: 'email',\n                    message: ['First invalid message', 'Second message']\n                }]);\n            }\n        }]\n    });\n\n**Note**: this method does not cause the Field's\n<a href='#!/api/Ext.form.field.Field-method-validate'>Ext.form.field.Field#validate</a> or <a href='#!/api/Ext.form.field.Base-method-isValid'>Ext.form.field.Base#isValid</a>\nmethods to return `false` if the value does _pass_ validation.  So simply marking\na Field as invalid will not prevent submission of forms submitted with the\n<a href='#!/api/Ext.form.action.Submit-cfg-clientValidation'>Ext.form.action.Submit#clientValidation</a> option set.\n\nFor additional information on how the fields are marked invalid see field's\n<a href='#!/api/Ext.form.field.Base-method-markInvalid'>Ext.form.field.Base#markInvalid</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "errors",
                    "text": "The errors param may be in one of two forms: Object[] or Object\n\n- **Array:** An array of Objects with the following keys:\n    - _field_ (<a href='#!/api/String'>String</a>): The <a href='#!/api/Ext.form.field.Base-cfg-name'>Ext.form.field.Base#name</a> or\n<a href='#!/api/Ext.form.field.Base-cfg-id'>Ext.form.field.Base#id</a> of the form field to receive the error message\n    - _message_ (<a href='#!/api/String'>String</a>/<a href='#!/api/String'>String</a>[]): The error message or an array\nof messages\n\nExample Array syntax:\n\n    form.markInvalid([{\n        field: 'email', // the field name\n        message: 'Error message'\n    }]);\n\n- **Object:** An Object hash with key/value pairs where the key is the field name\nor field ID and the value is the message or array of messages to display.\n\nExample Object syntax:\n\n    form.markInvalid({\n        name: 'Err. message',\n        emailId: ['Error1', 'Error 2']\n    });\n",
                    "type": "Object/Object[]",
                    "src": {
                      "name": "0,931,33",
                      "text": "0,932,8,789",
                      "type": "0,931,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "basicForm The Ext.form.Basic instance\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,957,33,38",
                      "type": "0,957,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,959,0",
                  "text": "0,889,8,1468"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for <a href='#!/api/Ext.form.Basic-method-addManagedListener'>addManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "1,1787,12",
                  "name": "1,1789,0",
                  "text": "1,1786,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for <a href='#!/api/Ext.form.Basic-method-removeManagedListener'>removeManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "1,1793,12",
                  "name": "1,1795,0",
                  "text": "1,1792,12,46"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "1,1775,12",
                  "name": "1,1777,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "1,1190,44",
                      "text": "1,1190,54,37",
                      "type": "1,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,1191,37",
                      "text": "1,1191,40,30",
                      "type": "1,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1192,29",
                      "text": "1,1192,36,20",
                      "type": "1,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1193,29",
                      "text": "1,1193,38,44",
                      "type": "1,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1195,0",
                  "text": "1,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "1,1175,44",
                      "text": "1,1175,54,37",
                      "type": "1,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,1176,37",
                      "text": "1,1176,40,30",
                      "type": "1,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1177,29",
                      "text": "1,1177,36,20",
                      "type": "1,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1178,29",
                      "text": "1,1178,38,44",
                      "type": "1,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1180,0",
                  "text": "1,1170,12,183"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onValidityChange",
                "text": "Handle changes in the form's validity. If there are any sub components with\n`formBind=true` then they are enabled/disabled based on the new validity.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "valid",
                    "type": "Boolean",
                    "src": {
                      "name": "0,489,25",
                      "type": "0,489,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,486,8",
                  "name": "0,491,0",
                  "text": "0,487,8,150"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1466,27",
                      "text": "1,1466,34,53",
                      "type": "1,1466,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "1,1467,36",
                      "text": "1,1467,43,58:1,1468,11,231",
                      "type": "1,1467,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1473,28",
                      "text": "1,1473,36,60:1,1474,11,164",
                      "type": "1,1473,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the <a href='#!/api/Ext.form.Basic-method-destroy'>destroy</a> method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1479,28,130:1,1480,11,192",
                      "type": "1,1479,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1490,0",
                  "text": "1,1453,11,651"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for <a href='#!/api/Ext.form.Basic-method-unAfter'>unAfter</a>.\n",
                "src": {
                  "name": "1,1248,0",
                  "text": "1,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.form.Basic-method-unBefore'>unBefore</a>.\n",
                "src": {
                  "name": "1,1242,0",
                  "text": "1,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1102,28",
                      "text": "1,1102,38,51",
                      "type": "1,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "1,1103,30",
                      "text": "1,1103,33,66:1,1104,12,76",
                      "type": "1,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1106,28",
                      "text": "1,1106,34,62:1,1107,12,1017",
                      "type": "1,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1145,0",
                  "text": "1,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the <a href='#!/api/Ext.form.Basic-method-mon'>mon</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "1,526,56",
                      "text": "1,526,61,52",
                      "type": "1,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "1,527,34",
                      "text": "1,527,40,63",
                      "type": "1,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,528,29",
                      "text": "1,528,32,85",
                      "type": "1,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,529,27",
                      "text": "1,529,33,92:1,530,11,43",
                      "type": "1,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "1,532,0",
                  "text": "1,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1307,28",
                      "text": "1,1307,36,44",
                      "type": "1,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1308,27",
                      "text": "1,1308,43,26:1,1309,11,41",
                      "type": "1,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,1306,11",
                  "name": "1,1311,0",
                  "text": "1,1305,11,38"
                }
              },
              {
                "$type": "method",
                "name": "reset",
                "text": "Resets all fields in this form. By default, any record bound by <a href='#!/api/Ext.form.Basic-method-loadRecord'>loadRecord</a>\nwill be retained.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "resetRecord",
                    "optional": true,
                    "text": "True to unbind any record set\nby <a href='#!/api/Ext.form.Basic-method-loadRecord'>loadRecord</a>\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1155,26",
                      "text": "0,1155,45,30:0,1156,8,23",
                      "type": "0,1155,16",
                      "value": "0,1155,38"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,1157,33,5",
                      "type": "0,1157,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1159,0",
                  "text": "0,1153,8,102"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "1,579,29",
                      "text": "1,579,48,46",
                      "type": "1,579,20",
                      "value": "1,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "1,580,29,24",
                      "type": "1,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,581,12",
                  "name": "1,583,0",
                  "text": "1,577,12,102"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the <a href='#!/api/Ext.form.Basic-method-suspendEvent'>suspendEvent</a> method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "1,1409,32",
                      "text": "1,1409,42,32",
                      "type": "1,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1411,0",
                  "text": "1,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see <a href='#!/api/Ext.form.Basic-method-suspendEvents'>suspendEvents</a>).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See <a href='#!/api/Ext.form.Basic-method-suspendEvents'>suspendEvents</a>.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1431,29",
                      "text": "1,1431,43,59:1,1432,11,53",
                      "type": "1,1431,19"
                    }
                  }
                ],
                "src": {
                  "name": "1,1434,0",
                  "text": "1,1426,11,198"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.  In\nversions prior to 5.1, <a href='#!/api/Ext.form.Basic-cfg-listeners'>listeners</a> had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the <a href='#!/api/Ext.form.Basic-method-on'>on</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1804,28",
                      "text": "1,1804,38,14",
                      "type": "1,1804,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1806,0",
                  "text": "1,1798,12,402"
                }
              },
              {
                "$type": "method",
                "name": "setValues",
                "text": "Set values for fields in this form in bulk.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "values",
                    "text": "Either an array in the form:\n\n    [{id:'clientName', value:'Fred. Olsen Lines'},\n     {id:'portOfLoading', value:'FXT'},\n     {id:'portOfDischarge', value:'OSL'} ]\n\nor an object hash of the form:\n\n    {\n        clientName: 'Fred. Olsen Lines',\n        portOfLoading: 'FXT',\n        portOfDischarge: 'OSL'\n    }\n",
                    "type": "Object/Object[]",
                    "src": {
                      "name": "0,999,33",
                      "text": "0,999,40,29:0,1000,8,283",
                      "type": "0,999,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,1013,33,5",
                      "type": "0,1013,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1015,0",
                  "text": "0,997,8,45"
                }
              },
              {
                "$type": "method",
                "name": "submit",
                "text": "Shortcut to <a href='#!/api/Ext.form.Basic-method-doAction'>doAction</a> a <a href='#!/api/Ext.form.action.Submit'>Ext.form.action.Submit</a>. This will use the\n<a href='#!/api/Ext.form.action.Submit'>Ext.form.action.Submit</a> by default. If the <a href='#!/api/Ext.form.Basic-cfg-standardSubmit'>standardSubmit</a> config\nis enabled it will use a standard form element to submit, or if the <a href='#!/api/Ext.form.Basic-cfg-api'>api</a> config is present\nit will use the <a href='#!/api/Ext.form.action.DirectLoad'>Ext.form.action.DirectLoad</a>.\n\nThe following code:\n\n    myFormPanel.getForm().submit({\n        clientValidation: true,\n        url: 'updateConsignment.php',\n        params: {\n            newStatus: 'delivered'\n        },\n        success: function(form, action) {\n           Ext.Msg.alert('Success', action.result.msg);\n        },\n        failure: function(form, action) {\n            switch (action.failureType) {\n                case Ext.form.action.Action.CLIENT_INVALID:\n                    Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');\n                    break;\n                case Ext.form.action.Action.CONNECT_FAILURE:\n                    Ext.Msg.alert('Failure', 'Ajax communication failed');\n                    break;\n                case Ext.form.action.Action.SERVER_INVALID:\n                   Ext.Msg.alert('Failure', action.result.msg);\n           }\n        }\n    });\n\nwould process the following server response for a successful submission:\n\n    {\n        \"success\":true, // note this is Boolean, not string\n        \"msg\":\"Consignment updated\"\n    }\n\nand the following server response for a failed submission:\n\n    {\n        \"success\":false, // note this is Boolean, not string\n        \"msg\":\"You do not have permission to perform this operation\"\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options to pass to the action (see <a href='#!/api/Ext.form.Basic-method-doAction'>doAction</a> for details).\n",
                    "type": "Object",
                    "src": {
                      "name": "0,706,24",
                      "text": "0,706,32,71",
                      "type": "0,706,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,707,33,5",
                      "type": "0,707,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,709,0",
                  "text": "0,662,8,1660"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n<a href='#!/api/Ext.form.Basic-method-resumeEvent'>resumeEvent</a> will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "1,1381,32",
                      "text": "1,1381,42,33",
                      "type": "1,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1383,0",
                  "text": "1,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see <a href='#!/api/Ext.form.Basic-method-resumeEvents'>resumeEvents</a>)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the <a href='#!/api/Ext.form.Basic-method-resumeEvents'>resumeEvents</a> call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1363,28",
                      "text": "1,1363,43,48:1,1364,11,81",
                      "type": "1,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "1,1366,0",
                  "text": "1,1361,11,64"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for <a href='#!/api/Ext.form.Basic-method-removeListener'>removeListener</a>.\n",
                "src": {
                  "inheritdoc": "1,1781,12",
                  "name": "1,1783,0",
                  "text": "1,1780,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.form.Basic-method-removeListener'>removeListener</a> with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "1,1218,44",
                      "text": "1,1218,54,55",
                      "type": "1,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,1219,37",
                      "text": "1,1219,40,23",
                      "type": "1,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1220,29",
                      "text": "1,1220,36,41",
                      "type": "1,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1221,29",
                      "text": "1,1221,38,22",
                      "type": "1,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1223,0",
                  "text": "1,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.form.Basic-method-removeListener'>removeListener</a> with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "1,1204,44",
                      "text": "1,1204,54,55",
                      "type": "1,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,1205,37",
                      "text": "1,1205,40,23",
                      "type": "1,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1206,29",
                      "text": "1,1206,36,41",
                      "type": "1,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1207,29",
                      "text": "1,1207,38,22",
                      "type": "1,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1209,0",
                  "text": "1,1200,12,98"
                }
              },
              {
                "$type": "method",
                "name": "updateRecord",
                "text": "Persists the values in this form into the passed <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> object in a beginEdit/endEdit block.\nIf the record is not specified, it will attempt to update (if it exists) the record provided to loadRecord.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "optional": true,
                    "text": "The record to edit\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,735,33",
                      "text": "0,735,41,19",
                      "type": "0,735,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "text": "0,736,33,5",
                      "type": "0,736,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,738,0",
                  "text": "0,733,8,217"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "1,389,12",
                  "name": "1,392,0",
                  "text": "1,390,12,126"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when <a href='#!/api/Ext.form.Basic-method-suspendEvents'>suspendEvents</a> is called, decremented when <a href='#!/api/Ext.form.Basic-method-resumeEvents'>resumeEvents</a> is called.\n",
                "src": {
                  "access": "1,284,11",
                  "name": "1,287,0",
                  "text": "1,285,11,131"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via <a href='#!/api/Ext.form.Basic-observe'>observe</a>) or\non the <a href='#!/api/Ext.app.EventBus'>Ext.app.EventBus</a>. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "1,290,30",
                  "readonly": "1,291,11",
                  "text": "1,292,11,790",
                  "type": "1,290,22"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,278,31",
                  "text": "1,279,11,95",
                  "type": "1,278,22"
                }
              },
              {
                "$type": "property",
                "name": "owner",
                "text": "The container component to which this BasicForm is attached.\n",
                "type": "Ext.container.Container",
                "src": {
                  "name": "0,136,48",
                  "text": "0,137,12,61",
                  "type": "0,136,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "wasDirty",
                "src": {
                  "access": "0,342,8",
                  "name": "0,344,0"
                }
              }
            ]
          },
          {
            "$type": "static-methods"
          }
        ],
        "src": {
          "alternateClassNames": "0,66,0",
          "extends": "0,65,0",
          "name": "0,64,0",
          "requires": "0,69,0,0:0,70,0,0:0,71,0,0:0,72,0,0:0,73,0,0:0,74,0,0:0,75,0,0",
          "text": "0,2,4,2537"
        }
      }
    ]
  },
  "version": 1
}