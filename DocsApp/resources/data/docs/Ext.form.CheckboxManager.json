{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/form/CheckboxManager.js",
    "../../../ext/packages/core/src/util/MixedCollection.js",
    "../../../ext/packages/core/src/util/Sortable.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/packages/core/src/util/AbstractMixedCollection.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extended": "Ext.util.MixedCollection,Ext.util.AbstractMixedCollection,Object",
        "extends": "Ext.util.MixedCollection",
        "name": "Ext.form.CheckboxManager",
        "singleton": true,
        "text": "Private utility class for managing all <a href='#!/api/Ext.form.field.Checkbox'>Ext.form.field.Checkbox</a> fields grouped by name.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "allowFunctions",
                "text": "Configure as `true` if the <a href='#!/api/Ext.form.CheckboxManager-method-addAll'>addAll</a> function should add function references to the collection.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,36,23",
                  "text": "1,37,8,102",
                  "type": "1,36,14"
                }
              },
              {
                "$type": "property",
                "name": "defaultSortDirection",
                "text": "The default sort direction to use if one is not specified.\n",
                "type": "String",
                "src": {
                  "name": "2,35,22",
                  "text": "2,36,8,59",
                  "type": "2,35,14"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS <a href='#!/api/Ext.Component'>Ext.Component</a>**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the <a href='#!/api/Ext.view.View'>Ext.view.View</a>s **<a href='#!/api/Ext.view.View-event-itemclick'>Ext.view.View#itemclick</a>** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "3,243,25",
                  "text": "3,244,11,1325",
                  "type": "3,243,17"
                }
              },
              {
                "$type": "property",
                "name": "multiSortLimit",
                "optional": true,
                "text": "The maximum number of sorters which may be applied to this Sortable when using the \"multi\" insertion position\nwhen adding sorters.\n\nNew sorters added using the \"multi\" insertion position are inserted at the top of the sorters list becoming the\nnew primary sort key.\n\nIf the sorters collection has grown to longer then **<a href='#!/api/Ext.form.CheckboxManager-cfg-multiSortLimit'>multiSortLimit</a>**, then the it is trimmed.\n",
                "type": "Number",
                "value": "3",
                "src": {
                  "name": "2,52,23",
                  "text": "2,53,8,365",
                  "type": "2,52,14",
                  "value": "2,52,38"
                }
              },
              {
                "$type": "property",
                "name": "sorters",
                "text": "The initial set of <a href='#!/api/Ext.util.Sorter'>Ext.util.Sorter</a>.\n\n    sorters: [{\n        property: 'age',\n        direction: 'DESC'\n    }, {\n        property: 'firstName',\n        direction: 'ASC'\n    }]\n",
                "type": "Ext.util.Sorter[]/Object[]",
                "src": {
                  "name": "2,20,46",
                  "text": "2,21,12,192",
                  "type": "2,20,18"
                }
              },
              {
                "$type": "property",
                "name": "sortRoot",
                "text": "The property in each item that contains the data to sort.\n",
                "type": "String",
                "src": {
                  "name": "2,90,22",
                  "text": "2,91,8,58",
                  "type": "2,90,14"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "add",
                "since": "1.1.0",
                "text": "Fires when an item is added to the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which the item was added.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,68,28",
                      "text": "4,68,34,39",
                      "type": "4,68,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The item added.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,69,28",
                      "text": "4,69,30,16",
                      "type": "4,69,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key associated with the added item.\n",
                    "type": "String",
                    "src": {
                      "name": "4,70,28",
                      "text": "4,70,32,40",
                      "type": "4,70,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,66,19",
                  "since": "4,71,19",
                  "text": "4,67,12,47"
                }
              },
              {
                "$type": "event",
                "name": "beforesort",
                "text": "Fires before a sort occurs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "me",
                    "text": "This object.\n",
                    "type": "Ext.util.Sortable",
                    "src": {
                      "name": "2,47,35",
                      "text": "2,47,38,13",
                      "type": "2,47,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "The collection of Sorters being used to generate the comparator function.\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "name": "2,48,35",
                      "text": "2,48,43,74",
                      "type": "2,48,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,45,15",
                  "text": "2,46,8,28"
                }
              },
              {
                "$type": "event",
                "name": "clear",
                "since": "1.1.0",
                "text": "Fires when the collection is cleared.\n",
                "src": {
                  "name": "4,60,19",
                  "since": "4,62,19",
                  "text": "4,61,12,38"
                }
              },
              {
                "$type": "event",
                "name": "remove",
                "since": "1.1.0",
                "text": "Fires when an item is removed from the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The item being removed.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,86,28",
                      "text": "4,86,30,24",
                      "type": "4,86,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key associated with the removed item.\n",
                    "type": "String",
                    "src": {
                      "name": "4,87,28",
                      "text": "4,87,32,42",
                      "type": "4,87,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,84,19",
                  "since": "4,88,19",
                  "text": "4,85,12,51"
                }
              },
              {
                "$type": "event",
                "name": "replace",
                "since": "1.1.0",
                "text": "Fires when an item is replaced in the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "he key associated with the new added.\n",
                    "type": "String",
                    "src": {
                      "name": "4,77,28",
                      "text": "4,77,32,38",
                      "type": "4,77,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "old",
                    "text": "The item being replaced.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,78,28",
                      "text": "4,78,32,25",
                      "type": "4,78,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "new",
                    "text": "The new item.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,79,28",
                      "text": "4,79,32,14",
                      "type": "4,79,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,75,19",
                  "since": "4,80,19",
                  "text": "4,76,12,50"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "3,413,27",
                      "type": "3,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,414,30,35",
                      "type": "3,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,412,12",
                  "name": "3,416,0",
                  "text": "3,411,12,65"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_sort",
                "text": "Performs the actual sorting based on a direction and a sorting function. Internally,\nthis creates a temporary array of all items in the MixedCollection, sorts it and then writes\nthe sorted array data back into this.items and this.keys\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "Property to sort by ('key', 'value', or 'index')\n",
                    "type": "String",
                    "src": {
                      "name": "1,64,24",
                      "text": "1,64,33,49",
                      "type": "1,64,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dir",
                    "text": "(optional) Direction to sort 'ASC' or 'DESC'. Defaults to 'ASC'.\n",
                    "type": "String",
                    "src": {
                      "name": "1,65,24",
                      "text": "1,65,28,65",
                      "type": "1,65,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) Comparison function that defines the sort order.\nDefaults to sorting by numeric value.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,66,26",
                      "text": "1,66,29,60:1,67,8,38",
                      "type": "1,66,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,60,8",
                  "name": "1,69,0",
                  "text": "1,61,8,235"
                }
              },
              {
                "$type": "method",
                "name": "add",
                "since": "1.1.0",
                "text": "Adds an item to the collection. Fires the <a href='#!/api/Ext.form.CheckboxManager-event-add'>event-add</a> event when complete.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key to associate with the item, or the new item.\n\nIf a <a href='#!/api/Ext.form.CheckboxManager-method-getKey'>getKey</a> implementation was specified for this MixedCollection,\nor if the key of the stored items is in a property called `id`,\nthe MixedCollection will be able to *derive* the key for the new item.\nIn this case just pass the new item in this parameter.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "4,113,31",
                      "text": "4,113,35,53:4,114,8,268",
                      "type": "4,113,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "obj",
                    "optional": true,
                    "text": "The item to add.\n\nNote that when adding a value that is iterable, it must be wrapped in brackets, i.e.:\n\n    c.add([[1, 2]]);\n\nThis will be needed for any value that is iterable, i.e., an array, arguments object,\nHTML collections, etc.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,120,25",
                      "text": "4,120,30,17:4,121,8,220",
                      "type": "4,120,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item added.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,129,25,16",
                      "type": "4,129,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,132,0",
                  "since": "4,130,15",
                  "text": "4,111,8,83"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for <a href='#!/api/Ext.form.CheckboxManager-method-onAfter'>onAfter</a>.\n",
                "src": {
                  "name": "3,1236,0",
                  "text": "3,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addAll",
                "since": "1.1.0",
                "text": "Adds all elements of an Array or an Object to the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "objs",
                    "text": "An Object containing properties which will be added\nto the collection, or an Array of values, each of which are added to the collection.\nFunctions references will be added to the collection if <a href='#!/api/Ext.form.CheckboxManager-cfg-allowFunctions'>allowFunctions</a>\nhas been set to `true`.\n",
                    "type": "Object/Array",
                    "src": {
                      "name": "4,298,30",
                      "text": "4,298,35,52:4,299,8,191",
                      "type": "4,298,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,304,0",
                  "since": "4,302,15",
                  "text": "4,297,8,62"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.form.CheckboxManager-method-onBefore'>onBefore</a>.\n",
                "src": {
                  "name": "3,1230,0",
                  "text": "3,1228,12,29"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The <a href='#!/api/Ext.form.CheckboxManager-method-on'>on</a> method is shorthand for\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,835,35",
                      "text": "3,835,45,37:3,836,12,61",
                      "type": "3,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,838,38",
                      "text": "3,838,42,46:3,839,12,166",
                      "type": "3,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "3,843,29",
                      "text": "3,843,36,62:3,844,12,73",
                      "type": "3,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "3,853,36",
                          "text": "3,854,12,139",
                          "type": "3,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,857,36",
                          "text": "3,858,12,94",
                          "type": "3,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,861,37",
                          "text": "3,862,12,96",
                          "type": "3,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an <a href='#!/api/Ext.util.DelayedTask'>Ext.util.DelayedTask</a> delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,865,36",
                          "text": "3,866,12,262",
                          "type": "3,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  <a href='#!/api/Ext.Function-method-requestAnimationFrame'>Ext.Function#requestAnimationFrame</a>. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,870,36",
                          "text": "3,871,12,323",
                          "type": "3,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "3,877,49",
                          "text": "3,878,12,135",
                          "type": "3,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.Component'>Ext.Component</a>.**\n  The name of a Component property which references an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of <a href='#!/api/Ext.Component'>Ext.Component</a> which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "3,881,36",
                          "text": "3,882,12,781",
                          "type": "3,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "3,905,37",
                          "text": "3,906,12,295",
                          "type": "3,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopPropagation'>Ext.event.Event#stopPropagation</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,914,38",
                          "text": "3,915,12,212",
                          "type": "3,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-preventDefault'>Ext.event.Event#preventDefault</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,919,38",
                          "text": "3,920,12,210",
                          "type": "3,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopEvent'>Ext.event.Event#stopEvent</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,924,38",
                          "text": "3,925,12,200",
                          "type": "3,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "3,929,36",
                          "text": "3,930,12,179",
                          "type": "3,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `destroy` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using <a href='#!/api/Ext.form.CheckboxManager-method-un'>un</a>; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See <a href='#!/api/Ext.form.CheckboxManager-method-un'>un</a> for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "3,934,38",
                          "text": "3,935,12,441",
                          "type": "3,934,20",
                          "value": "3,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,942,37",
                          "text": "3,943,12,737",
                          "type": "3,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "3,954,37",
                          "text": "3,955,12,301",
                          "type": "3,954,20",
                          "value": "3,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "3,846,29",
                      "text": "3,846,38,44:3,847,12,154",
                      "type": "3,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "3,962,29",
                      "text": "3,963,12,1831",
                      "type": "3,962,20",
                      "value": "3,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1021,29,54:3,1022,12,516",
                      "type": "3,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1041,0",
                  "text": "3,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use <a href='#!/api/Ext.form.CheckboxManager-method-mon'>mon</a> or <a href='#!/api/Ext.form.CheckboxManager-method-addManagedListener'>addManagedListener</a> if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "3,456,56",
                      "text": "3,456,61,47",
                      "type": "3,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "3,457,34",
                      "text": "3,457,40,63",
                      "type": "3,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,458,36",
                      "text": "3,458,39,49:3,459,11,85",
                      "type": "3,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,461,27",
                      "text": "3,461,33,92:3,462,11,43",
                      "type": "3,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> options.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,463,27",
                      "text": "3,463,35,67:3,464,11,61",
                      "type": "3,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "3,465,28,54:3,466,11,513",
                      "type": "3,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,484,0",
                  "text": "3,430,11,1093"
                }
              },
              {
                "$type": "method",
                "name": "clear",
                "since": "1.1.0",
                "text": "Removes all items from the collection.  Fires the <a href='#!/api/Ext.form.CheckboxManager-event-clear'>event-clear</a> event when complete.\n",
                "src": {
                  "name": "4,851,0",
                  "since": "4,849,15",
                  "text": "4,848,8,92"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "3,1255,0",
                  "text": "3,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "3,1291,0",
                  "text": "3,1289,11,47"
                }
              },
              {
                "$type": "method",
                "name": "clone",
                "since": "1.1.0",
                "text": "Creates a shallow copy of this collection\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.util.MixedCollection",
                    "src": {
                      "type": "4,1169,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,1172,0",
                  "since": "4,1170,15",
                  "text": "4,1168,8,42"
                }
              },
              {
                "$type": "method",
                "name": "collect",
                "text": "Collects unique values of a particular property in this MixedCollection\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The property to collect on\n",
                    "type": "String",
                    "src": {
                      "name": "4,915,24",
                      "text": "4,915,33,27",
                      "type": "4,915,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "text": "(optional) 'root' property to extract the first argument from. This is used mainly when\nsumming fields in records, where the fields are all stored inside the 'data' object\n",
                    "type": "String",
                    "src": {
                      "name": "4,916,24",
                      "text": "4,916,29,88:4,917,8,84",
                      "type": "4,916,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "allowBlank",
                    "text": "(optional) Pass true to allow null, undefined or empty string values\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,918,25",
                      "text": "4,918,36,69",
                      "type": "4,918,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The unique values\n",
                    "type": "Array",
                    "src": {
                      "text": "4,919,24,18",
                      "type": "4,919,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,921,0",
                  "text": "4,914,8,72"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new MixedCollection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "A configuration object.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "allowFunctions",
                        "optional": true,
                        "text": "Specify `true` if the <a href='#!/api/Ext.form.CheckboxManager-method-addAll'>addAll</a>\nfunction should add function references to the collection.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "1,43,34",
                          "text": "1,43,56,38:1,44,8,59",
                          "type": "1,43,17",
                          "value": "1,43,49"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "getKey",
                        "optional": true,
                        "text": "A function that can accept an item of the type(s) stored in this MixedCollection\nand return the key value for that item.  This is used when available to look up the key on items that\nwere passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is\nequivalent to overriding the <a href='#!/api/Ext.form.CheckboxManager-method-getKey'>method-getKey</a> method.\n",
                        "type": "Function",
                        "src": {
                          "name": "1,45,35",
                          "text": "1,45,43,81:1,46,8,264",
                          "type": "1,45,17"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,42,24",
                      "text": "1,42,31,24",
                      "type": "1,42,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,50,0",
                  "text": "1,41,8,29"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "since": "1.1.0",
                "text": "Returns true if the collection contains the passed Object as an item.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The Object to look for in the collection.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,812,24",
                      "text": "4,812,26,42",
                      "type": "4,812,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the collection contains the Object as an item.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,813,26,55",
                      "type": "4,813,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,816,0",
                  "since": "4,814,15",
                  "text": "4,811,8,70"
                }
              },
              {
                "$type": "method",
                "name": "containsKey",
                "since": "1.1.0",
                "text": "Returns true if the collection contains the passed Object as a key.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key to look for in the collection.\n",
                    "type": "String",
                    "src": {
                      "name": "4,839,24",
                      "text": "4,839,28,39",
                      "type": "4,839,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the collection contains the Object as a key.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,840,26,53",
                      "type": "4,840,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,843,0",
                  "since": "4,841,15",
                  "text": "4,838,8,68"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1524,27",
                      "text": "3,1524,35,55",
                      "type": "3,1524,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,1525,26",
                      "text": "3,1525,35,61",
                      "type": "3,1525,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "3,1526,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,1522,11",
                  "name": "3,1528,0",
                  "text": "3,1523,11,103"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createValueMatcher",
                "since": "3.4.0",
                "text": "Returns a regular expression based on the given value and matching options. This is used internally for finding and filtering,\nand by Ext.data.Store#filter\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to create the regex for. This is escaped using Ext.escapeRe\n",
                    "type": "String",
                    "src": {
                      "name": "4,1143,24",
                      "text": "4,1143,30,70",
                      "type": "4,1143,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "text": "True to allow any match - no regex start/end line anchors will be added. Defaults to false\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1144,25",
                      "text": "4,1144,34,91",
                      "type": "4,1144,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "text": "True to make the regex case sensitive (adds 'i' switch to regex). Defaults to false.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1145,25",
                      "text": "4,1145,39,85",
                      "type": "4,1145,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "exactMatch",
                    "text": "True to force exact match (^ and $ characters added to the regex). Defaults to false. Ignored if anyMatch is true.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1146,25",
                      "text": "4,1146,36,115",
                      "type": "4,1146,16"
                    }
                  }
                ],
                "src": {
                  "access": "4,1142,8",
                  "name": "4,1149,0",
                  "since": "4,1147,15",
                  "text": "4,1140,8,156"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "decodeSorters",
                "text": "Normalizes an array of sorter objects, ensuring that they are all Ext.util.Sorter instances\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "The sorters array\n",
                    "type": "Object[]",
                    "src": {
                      "name": "2,274,26",
                      "text": "2,274,34,18",
                      "type": "2,274,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Array of Ext.util.Sorter objects\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "text": "2,275,36,33",
                      "type": "2,275,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,272,8",
                  "name": "2,277,0",
                  "text": "2,273,8,92"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "3,761,27",
                      "type": "3,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "3,762,26",
                      "type": "3,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "3,763,28",
                      "type": "3,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,759,11",
                  "name": "3,765,0",
                  "text": "3,758,11,24"
                }
              },
              {
                "$type": "method",
                "name": "each",
                "since": "1.1.0",
                "text": "Executes the specified function once for every item in the collection.\nThe function should return a boolean value.\nReturning false from the function will stop the iteration.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to execute for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "4,327,26",
                          "text": "4,327,31,21",
                          "type": "4,327,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "The index of item.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,328,27",
                          "text": "4,328,33,19",
                          "type": "4,328,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "len",
                        "text": "Total length of collection.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,329,27",
                          "text": "4,329,31,28",
                          "type": "4,329,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "4,326,26",
                      "text": "4,326,29,39",
                      "type": "4,326,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope (<code>this</code> reference)\nin which the function is executed. Defaults to the current item in the iteration.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,330,24",
                      "text": "4,330,30,51:4,331,8,83",
                      "type": "4,330,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,335,0",
                  "since": "4,333,15",
                  "text": "4,322,8,175"
                }
              },
              {
                "$type": "method",
                "name": "eachKey",
                "since": "1.1.0",
                "text": "Executes the specified function once for every key in the collection, passing each\nkey, and its associated item as the first two parameters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to execute for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of collection item.\n",
                        "type": "String",
                        "src": {
                          "name": "4,353,27",
                          "text": "4,353,31,28",
                          "type": "4,353,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "4,354,26",
                          "text": "4,354,31,21",
                          "type": "4,354,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "The index of item.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,355,27",
                          "text": "4,355,33,19",
                          "type": "4,355,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "len",
                        "text": "Total length of collection.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,356,27",
                          "text": "4,356,31,28",
                          "type": "4,356,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "4,352,26",
                      "text": "4,352,29,39",
                      "type": "4,352,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope (<code>this</code> reference) in which the\nfunction is executed. Defaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,357,24",
                      "text": "4,357,30,64:4,358,8,55",
                      "type": "4,357,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,362,0",
                  "since": "4,360,15",
                  "text": "4,350,8,141"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,1569,36",
                      "text": "3,1569,47,54",
                      "type": "3,1569,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,1571,0",
                  "text": "3,1536,11,1138"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "extractValues",
                "text": "Extracts all of the given property values from the items in the MC. Mainly used as a supporting method for\nfunctions like sum and collect.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The property to extract\n",
                    "type": "String",
                    "src": {
                      "name": "4,945,24",
                      "text": "4,945,33,24",
                      "type": "4,945,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "text": "(optional) 'root' property to extract the first argument from. This is used mainly when\nextracting field data from Model instances, where the fields are stored inside the 'data' object\n",
                    "type": "String",
                    "src": {
                      "name": "4,946,24",
                      "text": "4,946,29,88:4,947,8,97",
                      "type": "4,946,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The extracted values\n",
                    "type": "Array",
                    "src": {
                      "text": "4,948,24,21",
                      "type": "4,948,17"
                    }
                  }
                ],
                "src": {
                  "access": "4,942,8",
                  "name": "4,950,0",
                  "text": "4,943,8,139"
                }
              },
              {
                "$type": "method",
                "name": "filter",
                "since": "1.1.0",
                "text": "<p>Filters the objects in this collection by a set of <a href='#!/api/Ext.util.Filter'>Ext.util.Filter</a>s, or by a single\nproperty/value pair with optional parameters for substring matching and case sensitivity. See\n<a href='#!/api/Ext.util.Filter'>Ext.util.Filter</a> for an example of using Filter objects (preferred). Alternatively,\nMixedCollection can be easily filtered by property like this:</p>\n\n    //create a simple store with a few people defined\n    var people = new Ext.util.MixedCollection();\n    people.addAll([\n        {id: 1, age: 25, name: 'Ed'},\n        {id: 2, age: 24, name: 'Tommy'},\n        {id: 3, age: 24, name: 'Arne'},\n        {id: 4, age: 26, name: 'Aaron'}\n    ]);\n\n    //a new MixedCollection containing only the items where age == 24\n    var middleAged = people.filter('age', 24);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "A property on your objects, or an array of <a href='#!/api/Ext.util.Filter'>Ext.util.Filter</a> objects\n",
                    "type": "Ext.util.Filter[]/String",
                    "src": {
                      "name": "4,1028,42",
                      "text": "4,1028,51,82",
                      "type": "4,1028,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Either string that the property values\nshould start with or a RegExp to test against the property\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "4,1029,31",
                      "text": "4,1029,37,39:4,1030,8,59",
                      "type": "4,1029,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "optional": true,
                    "text": "True to match any part of the string, not just the beginning\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "4,1031,26",
                      "text": "4,1031,42,61",
                      "type": "4,1031,16",
                      "value": "4,1031,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "optional": true,
                    "text": "True for case sensitive comparison.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "4,1032,26",
                      "text": "4,1032,47,36",
                      "type": "4,1032,16",
                      "value": "4,1032,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new filtered collection\n",
                    "type": "Ext.util.MixedCollection",
                    "src": {
                      "text": "4,1033,43,28",
                      "type": "4,1033,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,1036,0",
                  "since": "4,1034,15",
                  "text": "4,1011,8,770"
                }
              },
              {
                "$type": "method",
                "name": "filterBy",
                "since": "1.1.0",
                "text": "Filter by a function. Returns a <i>new</i> collection that has been filtered.\nThe passed function will be called with each object in the collection.\nIf the function returns true, the value is included otherwise it is filtered.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "4,1062,26",
                          "text": "4,1062,31,21",
                          "type": "4,1062,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of collection item.\n",
                        "type": "String",
                        "src": {
                          "name": "4,1063,27",
                          "text": "4,1063,31,28",
                          "type": "4,1063,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "4,1061,26",
                      "text": "4,1061,29,27",
                      "type": "4,1061,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope (<code>this</code> reference) in\nwhich the function is executed. Defaults to this MixedCollection.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1064,24",
                      "text": "4,1064,30,54:4,1065,8,66",
                      "type": "4,1064,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new filtered collection\n",
                    "type": "Ext.util.MixedCollection",
                    "src": {
                      "text": "4,1066,43,28",
                      "type": "4,1066,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,1069,0",
                  "since": "4,1067,15",
                  "text": "4,1058,8,227"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use <a href='#!/api/Ext.form.CheckboxManager-findBy'>findBy</a> instead.\n",
                "deprecatedVersion": "4.0",
                "name": "find",
                "since": "1.1.0",
                "text": "Returns the first item in the collection which elicits a true return value from the passed selection function.\n",
                "src": {
                  "deprecatedMessage": "4,401,8",
                  "deprecatedVersion": "4,401,8",
                  "name": "4,404,0",
                  "since": "4,402,15",
                  "text": "4,400,8,111"
                }
              },
              {
                "$type": "method",
                "name": "findBy",
                "text": "Returns the first item in the collection which elicits a true return value from the\npassed selection function.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The selection function to execute for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "4,377,26",
                          "text": "4,377,31,21",
                          "type": "4,377,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of collection item.\n",
                        "type": "String",
                        "src": {
                          "name": "4,378,27",
                          "text": "4,378,31,28",
                          "type": "4,378,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "4,376,26",
                      "text": "4,376,29,49",
                      "type": "4,376,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope (<code>this</code> reference) in which the\nfunction is executed. Defaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,379,24",
                      "text": "4,379,30,64:4,380,8,54",
                      "type": "4,379,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first item in the collection which returned true from the selection\nfunction, or null if none was found.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,381,25,72:4,382,8,37",
                      "type": "4,381,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,384,0",
                  "text": "4,374,8,111"
                }
              },
              {
                "$type": "method",
                "name": "findIndex",
                "since": "2.3.0",
                "text": "Finds the index of the first matching object in this collection by a specific property/value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of a property on your objects.\n",
                    "type": "String",
                    "src": {
                      "name": "4,1094,24",
                      "text": "4,1094,33,40",
                      "type": "4,1094,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "A string that the property values\nshould start with or a RegExp to test against the property.\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "4,1095,31",
                      "text": "4,1095,37,34:4,1096,8,60",
                      "type": "4,1095,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "The index to start searching at.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "4,1097,25",
                      "text": "4,1097,34,33",
                      "type": "4,1097,16",
                      "value": "4,1097,31"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "optional": true,
                    "text": "True to match any part of the string, not just the beginning.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "4,1098,26",
                      "text": "4,1098,42,62",
                      "type": "4,1098,16",
                      "value": "4,1098,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "optional": true,
                    "text": "True for case sensitive comparison.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "4,1099,26",
                      "text": "4,1099,47,36",
                      "type": "4,1099,16",
                      "value": "4,1099,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1\n",
                    "type": "Number",
                    "src": {
                      "text": "4,1100,25,24",
                      "type": "4,1100,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,1103,0",
                  "since": "4,1101,15",
                  "text": "4,1093,8,94"
                }
              },
              {
                "$type": "method",
                "name": "findIndexBy",
                "since": "2.3.0",
                "text": "Find the index of the first matching object in this collection by a function.\nIf the function returns <i>true</i> it is considered a match.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "4,1117,26",
                          "text": "4,1117,31,21",
                          "type": "4,1117,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of collection item.\n",
                        "type": "String",
                        "src": {
                          "name": "4,1118,27",
                          "text": "4,1118,31,28",
                          "type": "4,1118,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "4,1116,26",
                      "text": "4,1116,29,27",
                      "type": "4,1116,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (<code>this</code> reference) in which the function is executed. Defaults to this MixedCollection.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1119,25",
                      "text": "4,1119,32,109",
                      "type": "4,1119,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "The index to start searching at.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "4,1120,25",
                      "text": "4,1120,34,33",
                      "type": "4,1120,16",
                      "value": "4,1120,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1\n",
                    "type": "Number",
                    "src": {
                      "text": "4,1121,25,24",
                      "type": "4,1121,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,1124,0",
                  "since": "4,1122,15",
                  "text": "4,1114,8,140"
                }
              },
              {
                "$type": "method",
                "name": "findInsertionIndex",
                "text": "Calculates the insertion index of the new item based upon the comparison function passed, or the current sort order.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newItem",
                    "text": "The new object to find the insertion position of.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,153,24",
                      "text": "1,153,32,50",
                      "type": "1,153,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sorterFn",
                    "optional": true,
                    "text": "The function to sort by. This is the same as the sorting function\npassed to <a href='#!/api/Ext.form.CheckboxManager-method-sortBy'>sortBy</a>. It accepts 2 items from this MixedCollection, and returns -1 0, or 1\ndepending on the relative sort positions of the 2 compared items.\n\nIf omitted, a function <a href='#!/api/Ext.form.CheckboxManager-method-generateComparator'>generateComparator</a> from the currently defined set of\n<a href='#!/api/Ext.form.CheckboxManager-cfg-sorters'>cfg-sorters</a> will be used.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,154,27",
                      "text": "1,154,37,66:1,155,8,294",
                      "type": "1,154,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The insertion point to add the new item into this MixedCollection at using <a href='#!/api/Ext.form.CheckboxManager-method-insert'>insert</a>\n",
                    "type": "Number",
                    "src": {
                      "text": "1,161,25,91",
                      "type": "1,161,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,163,0",
                  "text": "1,152,8,117"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use <a href='#!/api/Ext.form.CheckboxManager-fireEventAction'>fireEventAction</a> instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,640,28",
                      "text": "3,640,38,31",
                      "type": "3,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,641,27",
                      "text": "3,641,32,58",
                      "type": "3,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,642,30",
                      "text": "3,642,33,21",
                      "type": "3,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "3,643,29",
                      "text": "3,643,36,62:3,644,12,72",
                      "type": "3,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "3,645,29",
                      "text": "3,645,38,52:3,646,12,72",
                      "type": "3,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "3,647,29",
                      "text": "3,647,45,47:3,648,12,394",
                      "type": "3,647,20",
                      "value": "3,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "3,653,12",
                  "deprecatedVersion": "3,653,12",
                  "name": "3,655,0",
                  "text": "3,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>).\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.form.CheckboxManager-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,568,27",
                      "text": "3,568,37,31",
                      "type": "3,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "3,569,30",
                      "text": "3,569,35,54",
                      "type": "3,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,570,29,77",
                      "type": "3,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,572,0",
                  "text": "3,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.form.CheckboxManager-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,605,27",
                      "text": "3,605,37,31",
                      "type": "3,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "3,606,29",
                      "text": "3,606,34,53",
                      "type": "3,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,607,29,77",
                      "type": "3,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,609,0",
                  "text": "3,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,721,28",
                      "text": "3,721,38,31",
                      "type": "3,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,722,27",
                      "text": "3,722,32,58",
                      "type": "3,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,723,37",
                      "text": "3,723,40,21",
                      "type": "3,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "3,724,29",
                      "text": "3,724,36,62:3,725,12,72",
                      "type": "3,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "3,726,36",
                      "text": "3,726,44,47:3,727,12,201",
                      "type": "3,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,731,0",
                  "text": "3,714,12,409"
                }
              },
              {
                "$type": "method",
                "name": "first",
                "since": "1.1.0",
                "text": "Returns the first item in the collection.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the first item in the collection..\n",
                    "type": "Object",
                    "src": {
                      "text": "4,872,25,35",
                      "type": "4,872,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,875,0",
                  "since": "4,873,15",
                  "text": "4,871,8,42"
                }
              },
              {
                "$type": "method",
                "name": "generateComparator",
                "text": "Returns a comparator function which compares two items and returns -1, 0, or 1 depending\non the currently defined set of <a href='#!/api/Ext.form.CheckboxManager-cfg-sorters'>cfg-sorters</a>.\n\nIf there are no <a href='#!/api/Ext.form.CheckboxManager-cfg-sorters'>cfg-sorters</a> defined, it returns a function which returns `0` meaning\nthat no sorting will occur.\n",
                "src": {
                  "name": "2,260,0",
                  "text": "2,254,8,266"
                }
              },
              {
                "$type": "method",
                "name": "get",
                "since": "1.1.0",
                "text": "Returns the item associated with the passed key OR index.\nKey has priority over index.  This is the equivalent\nof calling <a href='#!/api/Ext.form.CheckboxManager-method-getByKey'>getByKey</a> first, then if nothing matched calling <a href='#!/api/Ext.form.CheckboxManager-method-getAt'>getAt</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key or index of the item.\n",
                    "type": "String/Number",
                    "src": {
                      "name": "4,780,31",
                      "text": "4,780,35,30",
                      "type": "4,780,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the item is found, returns the item.  If the item was not found, returns <code>undefined</code>.\nIf an item was found, but is a Class, returns <code>null</code>.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,781,25,100:4,782,8,65",
                      "type": "4,781,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,785,0",
                  "since": "4,783,15",
                  "text": "4,777,8,195"
                }
              },
              {
                "$type": "method",
                "name": "getAt",
                "text": "Returns the item at the specified index.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the item.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,794,24",
                      "text": "4,794,30,23",
                      "type": "4,794,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item at the specified index.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,795,25,33",
                      "type": "4,795,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,797,0",
                  "text": "4,793,8,41"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "3,793,41,63",
                      "type": "3,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,792,11",
                  "name": "3,795,0",
                  "text": "3,791,11,43"
                }
              },
              {
                "$type": "method",
                "name": "getByKey",
                "text": "Returns the item associated with the passed key.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key of the item.\n",
                    "type": "String/Number",
                    "src": {
                      "name": "4,803,31",
                      "text": "4,803,35,21",
                      "type": "4,803,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item associated with the passed key.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,804,25,41",
                      "type": "4,804,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,806,0",
                  "text": "4,802,8,49"
                }
              },
              {
                "$type": "method",
                "name": "getCount",
                "since": "1.1.0",
                "text": "Returns the number of items in the collection.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the number of items in the collection.\n",
                    "type": "Number",
                    "src": {
                      "text": "4,712,25,39",
                      "type": "4,712,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,715,0",
                  "since": "4,713,15",
                  "text": "4,711,8,47"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getFirstSorter",
                "text": "Gets the first sorter from the sorters collection, excluding\nany groupers that may be in place\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The sorter, null if none exist\n",
                    "type": "Ext.util.Sorter",
                    "src": {
                      "text": "2,335,34,31",
                      "type": "2,335,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,334,8",
                  "name": "2,337,0",
                  "text": "2,332,8,95"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "5,75,25,3",
                      "type": "5,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,77,0",
                  "text": "5,74,8,93"
                }
              },
              {
                "$type": "method",
                "name": "getKey",
                "since": "1.1.0",
                "template": true,
                "text": "A function which will be called, passing a newly added object\nwhen the object is added without a separate id.  The function\nshould yield the key by which that object will be indexed.\n\nIf no key is yielded, then the object will be added, but it\ncannot be accessed or removed quickly. Finding it in this\ncollection for interrogation or removal will require a linear\nscan of this collection's items.\n\nThe default implementation simply returns `item.id` but you can\nprovide your own implementation to return a different value as\nin the following examples:\n\n    // normal way\n    var mc = new Ext.util.MixedCollection();\n    mc.add(someEl.dom.id, someEl);\n    mc.add(otherEl.dom.id, otherEl);\n    //and so on\n\n    // using getKey\n    var mc = new Ext.util.MixedCollection({\n        getKey: function(el){\n            return el.dom.id;\n        }\n    });\n    mc.add(someEl);\n    mc.add(otherEl);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item for which to find the key.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,173,24",
                      "text": "4,173,29,36",
                      "type": "4,173,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The key for the passed item.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,174,25,29",
                      "type": "4,174,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,178,0",
                  "since": "4,175,15",
                  "template": "4,176,8",
                  "text": "4,145,8,889"
                }
              },
              {
                "$type": "method",
                "name": "getRange",
                "since": "1.1.0",
                "text": "Returns a range of items in this collection\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "startIndex",
                    "text": "(optional) The starting index. Defaults to 0.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,972,24",
                      "text": "4,972,35,46",
                      "type": "4,972,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "endIndex",
                    "text": "(optional) The ending index. Defaults to the last item.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,973,24",
                      "text": "4,973,33,56",
                      "type": "4,973,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of items\n",
                    "type": "Array",
                    "src": {
                      "text": "4,974,24,18",
                      "type": "4,974,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,977,0",
                  "since": "4,975,15",
                  "text": "4,971,8,44"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getSorterCount",
                "text": "Returns the number of Sorters which apply to this Sortable.\n\nMay be overridden in subclasses. <a href='#!/api/Ext.data.Store'>Ext.data.Store</a> in particlar overrides\nthis because its groupers must contribute to the sorter count so that the sort method above executes doSort.\n",
                "src": {
                  "access": "2,243,8",
                  "name": "2,249,0",
                  "text": "2,244,8,255"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "3,1334,27",
                      "text": "3,1334,37,35",
                      "type": "3,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,1335,29,67",
                      "type": "3,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1337,0",
                  "text": "3,1331,11,161"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.form.CheckboxManager-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "6,100,20",
                      "text": "6,100,25,34",
                      "type": "6,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "6,101,22,57:6,102,4,15",
                      "type": "6,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,53,12",
                  "text": "6,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasRange",
                "text": "For API parity with Store's PageMap class. Buffered rendering checks if the Store has the range\nrequired to render. The Store delegates this question to its backing data object which may be an instance\nof its private PageMap class, or a MixedCollection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "start",
                    "src": {
                      "name": "4,966,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "src": {
                      "name": "4,966,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,961,8",
                  "name": "4,966,0",
                  "text": "4,962,8,254"
                }
              },
              {
                "$type": "method",
                "name": "indexOf",
                "since": "1.1.0",
                "text": "Returns index within the collection of the passed Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The item to find the index of.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,721,24",
                      "text": "4,721,26,31",
                      "type": "4,721,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "index of the item. Returns -1 if not found.\n",
                    "type": "Number",
                    "src": {
                      "text": "4,722,25,44",
                      "type": "4,722,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,725,0",
                  "since": "4,723,15",
                  "text": "4,720,8,58"
                }
              },
              {
                "$type": "method",
                "name": "indexOfKey",
                "since": "1.1.0",
                "text": "Returns index within the collection of the passed key.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key to find the index of.\n",
                    "type": "String",
                    "src": {
                      "name": "4,749,24",
                      "text": "4,749,28,30",
                      "type": "4,749,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "index of the key.\n",
                    "type": "Number",
                    "src": {
                      "text": "4,750,25,18",
                      "type": "4,750,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,753,0",
                  "since": "4,751,15",
                  "text": "4,748,8,55"
                }
              },
              {
                "$type": "method",
                "name": "insert",
                "since": "1.1.0",
                "text": "Inserts an item at the specified index in the collection. Fires the <a href='#!/api/Ext.form.CheckboxManager-event-add'>event-add</a> event when complete.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index to insert the item at.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,414,24",
                      "text": "4,414,30,33",
                      "type": "4,414,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key to associate with the new item, or the item itself.\nMay also be an array of either to insert multiple items at once.\n",
                    "type": "String/Object/String[]/Object[]",
                    "src": {
                      "name": "4,415,49",
                      "text": "4,415,53,60:4,416,8,65",
                      "type": "4,415,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "(optional) If the second parameter was a key, the new item.\nMay also be an array to insert multiple items at once.\n",
                    "type": "Object/Object[]",
                    "src": {
                      "name": "4,417,33",
                      "text": "4,417,35,60:4,418,8,55",
                      "type": "4,417,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item inserted or an array of items inserted.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,419,25,49",
                      "type": "4,419,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,422,0",
                  "since": "4,420,15",
                  "text": "4,413,8,108"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.form.CheckboxManager-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "6,148,20",
                      "text": "6,148,30,71:6,149,4,18",
                      "type": "6,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "6,150,20",
                      "text": "6,150,27,50",
                      "type": "6,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "6,151,22,56",
                      "type": "6,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,106,12",
                  "text": "6,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "3,1344,29",
                      "text": "3,1344,36,40",
                      "type": "3,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,1345,30,31",
                      "type": "3,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1347,0",
                  "text": "3,1343,12,57"
                }
              },
              {
                "$type": "method",
                "name": "last",
                "since": "1.1.0",
                "text": "Returns the last item in the collection.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the last item in the collection..\n",
                    "type": "Object",
                    "src": {
                      "text": "4,881,25,34",
                      "type": "4,881,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,884,0",
                  "since": "4,882,15",
                  "text": "4,880,8,41"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for <a href='#!/api/Ext.form.CheckboxManager-method-addManagedListener'>addManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "3,1789,12",
                  "name": "3,1791,0",
                  "text": "3,1788,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for <a href='#!/api/Ext.form.CheckboxManager-method-removeManagedListener'>removeManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "3,1795,12",
                  "name": "3,1797,0",
                  "text": "3,1794,12,46"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "3,1777,12",
                  "name": "3,1779,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1190,44",
                      "text": "3,1190,54,37",
                      "type": "3,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1191,37",
                      "text": "3,1191,40,30",
                      "type": "3,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1192,29",
                      "text": "3,1192,36,20",
                      "type": "3,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1193,29",
                      "text": "3,1193,38,44",
                      "type": "3,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1195,0",
                  "text": "3,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1175,44",
                      "text": "3,1175,54,37",
                      "type": "3,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1176,37",
                      "text": "3,1176,40,30",
                      "type": "3,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1177,29",
                      "text": "3,1177,36,20",
                      "type": "3,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1178,29",
                      "text": "3,1178,38,44",
                      "type": "3,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1180,0",
                  "text": "3,1170,12,183"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.form.CheckboxManager-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.form.CheckboxManager-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "6,220,20",
                      "text": "6,220,25,34",
                      "type": "6,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "6,221,22,57:6,222,4,22",
                      "type": "6,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,155,12",
                  "text": "6,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1468,27",
                      "text": "3,1468,34,53",
                      "type": "3,1468,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "3,1469,36",
                      "text": "3,1469,43,58:3,1470,11,231",
                      "type": "3,1469,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1475,28",
                      "text": "3,1475,36,60:3,1476,11,164",
                      "type": "3,1475,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1481,28,130:3,1482,11,192",
                      "type": "3,1481,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1492,0",
                  "text": "3,1455,11,651"
                }
              },
              {
                "$type": "method",
                "name": "remove",
                "since": "1.1.0",
                "text": "Remove an item from the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The item to remove.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,537,24",
                      "text": "4,537,26,20",
                      "type": "4,537,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item removed or false if no item was removed.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,538,25,50",
                      "type": "4,538,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,541,0",
                  "since": "4,539,15",
                  "text": "4,536,8,36"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for <a href='#!/api/Ext.form.CheckboxManager-method-unAfter'>unAfter</a>.\n",
                "src": {
                  "name": "3,1248,0",
                  "text": "3,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeAll",
                "text": "Remove all items in the collection. Can also be used\nto remove only the items in the passed array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "items",
                    "optional": true,
                    "text": "An array of items to be removed.\n",
                    "type": "Array",
                    "src": {
                      "name": "4,566,24",
                      "text": "4,566,31,33",
                      "type": "4,566,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this object\n",
                    "type": "Ext.util.MixedCollection",
                    "src": {
                      "text": "4,567,43,12",
                      "type": "4,567,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,569,0",
                  "text": "4,564,8,99"
                }
              },
              {
                "$type": "method",
                "name": "removeAt",
                "since": "1.1.0",
                "text": "Remove an item from a specified index in the collection. Fires the <a href='#!/api/Ext.form.CheckboxManager-event-remove'>event-remove</a> event when complete.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index within the collection of the item to remove.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,595,24",
                      "text": "4,595,30,55",
                      "type": "4,595,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item removed or false if no item was removed.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,596,25,50",
                      "type": "4,596,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,599,0",
                  "since": "4,597,15",
                  "text": "4,594,8,110"
                }
              },
              {
                "$type": "method",
                "name": "removeAtKey",
                "text": "Removes an item associated with the passed key fom the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key of the item to remove. If <a href='#!/api/null'>null</a> is passed,\nall objects which yielded no key from the configured <a href='#!/api/Ext.form.CheckboxManager-method-getKey'>getKey</a> function are removed.\n",
                    "type": "String",
                    "src": {
                      "name": "4,687,24",
                      "text": "4,687,28,52:4,688,8,91",
                      "type": "4,687,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Only returned if removing at a specified key. The item removed or false if no item was removed.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,689,25,96",
                      "type": "4,689,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,691,0",
                  "text": "4,686,8,67"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.form.CheckboxManager-method-unBefore'>unBefore</a>.\n",
                "src": {
                  "name": "3,1242,0",
                  "text": "3,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1102,28",
                      "text": "3,1102,38,51",
                      "type": "3,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "3,1103,30",
                      "text": "3,1103,33,66:3,1104,12,76",
                      "type": "3,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1106,28",
                      "text": "3,1106,34,62:3,1107,12,1017",
                      "type": "3,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1145,0",
                  "text": "3,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the <a href='#!/api/Ext.form.CheckboxManager-method-mon'>mon</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "3,526,56",
                      "text": "3,526,61,52",
                      "type": "3,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "3,527,34",
                      "text": "3,527,40,63",
                      "type": "3,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,528,29",
                      "text": "3,528,32,85",
                      "type": "3,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,529,27",
                      "text": "3,529,33,92:3,530,11,43",
                      "type": "3,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,532,0",
                  "text": "3,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1307,28",
                      "text": "3,1307,36,44",
                      "type": "3,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1308,27",
                      "text": "3,1308,43,26:3,1309,11,41",
                      "type": "3,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,1306,11",
                  "name": "3,1311,0",
                  "text": "3,1305,11,38"
                }
              },
              {
                "$type": "method",
                "name": "removeRange",
                "text": "Remove a range of items starting at a specified index in the collection.\nDoes not fire the remove event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index within the collection of the item to remove.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,625,24",
                      "text": "4,625,30,55",
                      "type": "4,625,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "removeCount",
                    "optional": true,
                    "text": "The nuber of items to remove beginning at the specified index.\n",
                    "type": "Number",
                    "value": "1",
                    "src": {
                      "name": "4,626,25",
                      "text": "4,626,40,63",
                      "type": "4,626,16",
                      "value": "4,626,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The last item removed or false if no item was removed.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,627,25,55",
                      "type": "4,627,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,629,0",
                  "text": "4,623,8,105"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.AbstractMixedCollection#method-reorder",
                "name": "reorder",
                "items": [
                  {
                    "$type": "param",
                    "name": "mapping",
                    "src": {
                      "name": "1,189,0"
                    }
                  }
                ],
                "src": {
                  "inheritdoc": "1,187,8",
                  "name": "1,189,0"
                }
              },
              {
                "$type": "method",
                "name": "replace",
                "since": "1.1.0",
                "text": "Replaces an item in the collection. Fires the <a href='#!/api/Ext.form.CheckboxManager-event-replace'>event-replace</a> event when complete.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key associated with the item to replace, or the replacement item.\n\nIf you supplied a <a href='#!/api/Ext.form.CheckboxManager-method-getKey'>getKey</a> implementation for this MixedCollection, or if the key\nof your stored items is in a property called *`id`*, then the MixedCollection\nwill be able to <i>derive</i> the key of the replacement item. If you want to replace an item\nwith one having the same key value, then just pass the replacement item in this parameter.\n",
                    "type": "String",
                    "src": {
                      "name": "4,184,24",
                      "text": "4,184,28,70:4,185,8,354",
                      "type": "4,184,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "o (optional) If the first parameter passed was a key, the item to associate\nwith that key.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,191,15",
                      "text": "4,191,26,76:4,192,8,15",
                      "type": "4,191,18"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new item.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,193,25,14",
                      "type": "4,193,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,196,0",
                  "since": "4,194,15",
                  "text": "4,183,8,90"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "3,579,29",
                      "text": "3,579,48,46",
                      "type": "3,579,20",
                      "value": "3,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "3,580,29,24",
                      "type": "3,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,581,12",
                  "name": "3,583,0",
                  "text": "3,577,12,102"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the <a href='#!/api/Ext.form.CheckboxManager-method-suspendEvent'>suspendEvent</a> method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "3,1409,32",
                      "text": "3,1409,42,32",
                      "type": "3,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1411,0",
                  "text": "3,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see <a href='#!/api/Ext.form.CheckboxManager-method-suspendEvents'>suspendEvents</a>).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See <a href='#!/api/Ext.form.CheckboxManager-method-suspendEvents'>suspendEvents</a>.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1433,29",
                      "text": "3,1433,43,59:3,1434,11,53",
                      "type": "3,1433,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,1436,0",
                  "text": "3,1428,11,198"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.  In\nversions prior to 5.1, <a href='#!/api/Ext.form.CheckboxManager-cfg-listeners'>listeners</a> had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the <a href='#!/api/Ext.form.CheckboxManager-method-on'>on</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1806,28",
                      "text": "3,1806,38,14",
                      "type": "3,1806,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1808,0",
                  "text": "3,1800,12,402"
                }
              },
              {
                "$type": "method",
                "name": "sort",
                "text": "Updates the sorters collection and triggers sorting of this Sortable. Example usage:\n\n    //sort by a single field\n    myStore.sort('myField', 'DESC');\n\n    //sorting by multiple fields\n    myStore.sort([{\n        property : 'age',\n        direction: 'ASC'\n    }, {\n        property : 'name',\n        direction: 'DESC'\n    }]);\n\nClasses which use this mixin must implement a **`soSort`** method which accepts a comparator function computed from\nthe full sorter set which performs the sort in an implementation-specific way.\n\nWhen passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:\n\n    store.sort('myField');\n    store.sort('myField');\n\nIs equivalent to this code, because Store handles the toggling automatically:\n\n    store.sort('myField', 'ASC');\n    store.sort('myField', 'DESC');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "optional": true,
                    "text": "Either a string name of one of the fields in this Store's configured <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, or an array of sorter configurations.\n",
                    "type": "String/Ext.util.Sorter[]",
                    "src": {
                      "name": "2,133,43",
                      "text": "2,133,52,137",
                      "type": "2,133,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "direction",
                    "optional": true,
                    "text": "The overall direction to sort the data by.\n",
                    "type": "String",
                    "value": "\"ASC\"",
                    "src": {
                      "name": "2,134,25",
                      "text": "2,134,42,43",
                      "type": "2,134,16",
                      "value": "2,134,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "insertionPosition",
                    "optional": true,
                    "text": "Where to put the new sorter in the collection of sorters.\nThis may take the following values:\n\n* `replace` : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode\n          to programatically sort by multiple fields.\n\n* `prepend` : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer.\n\n* `multi` :  This is mainly useful for implementing intuitive \"Sort by this\" user interfaces such as the <a href='#!/api/Ext.grid.Panel'>Ext.grid.Panel</a>s column sorting UI.\n\n    This mode is only supported when passing a property name and a direction.\n\n    This means that the new sorter is becomes the primary sorter. If the sorter was **already** the primary sorter, the direction\n    of sort is toggled if no direction parameter is specified.\n\n    The number of sorters maintained is limited by the <a href='#!/api/Ext.form.CheckboxManager-cfg-multiSortLimit'>multiSortLimit</a> configuration.\n\n* `append` : This means that the new sorter becomes the last sorter.\n",
                    "type": "String",
                    "value": "\"replace\"",
                    "src": {
                      "name": "2,135,25",
                      "text": "2,135,54,58:2,136,8,977",
                      "type": "2,135,16",
                      "value": "2,135,43"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new sorters.\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "text": "2,153,36,17",
                      "type": "2,153,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,0",
                  "text": "2,106,8,837"
                }
              },
              {
                "$type": "method",
                "name": "sortBy",
                "text": "Sorts the collection by a single sorter function\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorterFn",
                    "text": "The function to sort by\n",
                    "type": "Function",
                    "src": {
                      "name": "1,116,26",
                      "text": "1,116,35,24",
                      "type": "1,116,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,118,0",
                  "text": "1,115,8,49"
                }
              },
              {
                "$type": "method",
                "name": "sortByKey",
                "text": "Sorts this collection by <b>key</b>s.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "direction",
                    "text": "(optional) 'ASC' or 'DESC'. Defaults to 'ASC'.\n",
                    "type": "String",
                    "src": {
                      "name": "1,196,24",
                      "text": "1,196,34,47",
                      "type": "1,196,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) Comparison function that defines the sort order.\nDefaults to sorting by case insensitive string.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,197,26",
                      "text": "1,197,29,60:1,198,8,48",
                      "type": "1,197,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,200,0",
                  "text": "1,195,8,38"
                }
              },
              {
                "$type": "method",
                "name": "sum",
                "text": "Collects all of the values of the given property and returns their sum\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The property to sum by\n",
                    "type": "String",
                    "src": {
                      "name": "4,890,24",
                      "text": "4,890,33,23",
                      "type": "4,890,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "'root' property to extract the first argument from. This is used mainly when\nsumming fields in records, where the fields are all stored inside the 'data' object\n",
                    "type": "String",
                    "src": {
                      "name": "4,891,25",
                      "text": "4,891,31,77:4,892,8,84",
                      "type": "4,891,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "The record index to start at\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "4,893,25",
                      "text": "4,893,34,29",
                      "type": "4,893,16",
                      "value": "4,893,31"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The record index to end at\n",
                    "type": "Number",
                    "value": "-1",
                    "src": {
                      "name": "4,894,25",
                      "text": "4,894,33,27",
                      "type": "4,894,16",
                      "value": "4,894,29"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The total\n",
                    "type": "Number",
                    "src": {
                      "text": "4,895,25,10",
                      "type": "4,895,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,897,0",
                  "text": "4,889,8,71"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n<a href='#!/api/Ext.form.CheckboxManager-method-resumeEvent'>resumeEvent</a> will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "3,1381,32",
                      "text": "3,1381,42,33",
                      "type": "3,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1383,0",
                  "text": "3,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see <a href='#!/api/Ext.form.CheckboxManager-method-resumeEvents'>resumeEvents</a>)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the <a href='#!/api/Ext.form.CheckboxManager-method-resumeEvents'>resumeEvents</a> call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1363,28",
                      "text": "3,1363,43,48:3,1364,11,81",
                      "type": "3,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,1366,0",
                  "text": "3,1361,11,64"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.form.CheckboxManager-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.form.CheckboxManager-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.form.CheckboxManager-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.form.CheckboxManager-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "6,235,21,32",
                      "type": "6,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,226,12",
                  "text": "6,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "6,297,21,32",
                      "type": "6,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,239,12",
                  "text": "6,240,4,2445"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for <a href='#!/api/Ext.form.CheckboxManager-method-removeListener'>removeListener</a>.\n",
                "src": {
                  "inheritdoc": "3,1783,12",
                  "name": "3,1785,0",
                  "text": "3,1782,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.form.CheckboxManager-method-removeListener'>removeListener</a> with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1218,44",
                      "text": "3,1218,54,55",
                      "type": "3,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1219,37",
                      "text": "3,1219,40,23",
                      "type": "3,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1220,29",
                      "text": "3,1220,36,41",
                      "type": "3,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1221,29",
                      "text": "3,1221,38,22",
                      "type": "3,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1223,0",
                  "text": "3,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.form.CheckboxManager-method-removeListener'>removeListener</a> with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1204,44",
                      "text": "3,1204,54,55",
                      "type": "3,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1205,37",
                      "text": "3,1205,40,23",
                      "type": "3,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1206,29",
                      "text": "3,1206,36,41",
                      "type": "3,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1207,29",
                      "text": "3,1207,38,22",
                      "type": "3,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1209,0",
                  "text": "3,1200,12,98"
                }
              },
              {
                "$type": "method",
                "name": "updateKey",
                "text": "Change the key for an existing item in the collection. If the old key\ndoes not exist this is a no-op.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oldKey",
                    "text": "The old key\n",
                    "type": "Object",
                    "src": {
                      "name": "4,271,24",
                      "text": "4,271,31,12",
                      "type": "4,271,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newKey",
                    "text": "The new key\n",
                    "type": "Object",
                    "src": {
                      "name": "4,272,24",
                      "text": "4,272,31,12",
                      "type": "4,272,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,274,0",
                  "text": "4,269,8,102"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.form.CheckboxManager-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.form.CheckboxManager-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.form.CheckboxManager-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.form.CheckboxManager-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.form.CheckboxManager-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.form.CheckboxManager-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.form.CheckboxManager-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.form.CheckboxManager-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.form.CheckboxManager-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.form.CheckboxManager-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "6,340,21,50",
                      "type": "6,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,301,12",
                  "text": "6,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "3,389,12",
                  "name": "3,392,0",
                  "text": "3,390,12,126"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.form.CheckboxManager-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "6,346,14",
                  "text": "6,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when <a href='#!/api/Ext.form.CheckboxManager-method-suspendEvents'>suspendEvents</a> is called, decremented when <a href='#!/api/Ext.form.CheckboxManager-method-resumeEvents'>resumeEvents</a> is called.\n",
                "src": {
                  "access": "3,284,11",
                  "name": "3,287,0",
                  "text": "3,285,11,131"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "generation",
                "text": "Mutation counter which is incremented upon add and remove.\n",
                "src": {
                  "access": "4,21,8",
                  "name": "4,23,0",
                  "text": "4,19,8,60"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via <a href='#!/api/Ext.form.CheckboxManager-observe'>observe</a>) or\non the <a href='#!/api/Ext.app.EventBus'>Ext.app.EventBus</a>. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "3,290,30",
                  "readonly": "3,291,11",
                  "text": "3,292,11,790",
                  "type": "3,290,22"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "indexGeneration",
                "text": "Mutation counter for the index map which is synchronized with the collection's mutation counter\nwhen the index map is interrogated and found to be out of sync and needed a rebuild.\n",
                "src": {
                  "access": "4,29,8",
                  "name": "4,31,0",
                  "text": "4,26,8,182"
                }
              },
              {
                "$type": "property",
                "name": "isMixedCollection",
                "text": "`true` in this class to identify an object as an instantiated MixedCollection, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,13,28",
                  "text": "4,14,8,100",
                  "type": "4,13,19"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,278,31",
                  "text": "3,279,11,95",
                  "type": "3,278,22"
                }
              },
              {
                "$type": "property",
                "name": "isSortable",
                "text": "`true` in this class to identify an object as an instantiated Sortable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,10,28",
                  "text": "2,11,8,93",
                  "type": "2,10,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "6,46,14",
                  "text": "6,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,2,4",
          "extends": "0,6,0",
          "name": "0,5,0",
          "singleton": "0,7,0",
          "text": "0,3,4,95"
        }
      }
    ]
  },
  "version": 1
}