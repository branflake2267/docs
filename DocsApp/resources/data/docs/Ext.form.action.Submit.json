{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/form/action/Submit.js",
    "../../../ext/classic/classic/src/form/action/Action.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "formaction.submit",
        "alternateClassNames": "Ext.form.Action.Submit",
        "extended": "Ext.form.action.Action,Object",
        "extends": "Ext.form.action.Action",
        "name": "Ext.form.action.Submit",
        "text": "A class which handles submission of data from <a href='#!/api/Ext.form.Basic'>Ext.form.Basic</a>s and processes the returned response.\n\nInstances of this class are only created by a <a href='#!/api/Ext.form.Basic'>Ext.form.Basic</a> when\n<a href='#!/api/Ext.form.Basic-method-submit'>Ext.form.Basic#submit</a>ting.\n\n# Response Packet Criteria\n\nA response packet may contain:\n\n  - **<a href='#!/api/Ext.form.action.Submit-cfg-success'>success</a>** property : Boolean - required.\n\n  - **`errors`** property : Object - optional, contains error messages for invalid fields.\n\n# JSON Packets\n\nBy default, response packets are assumed to be JSON, so a typical response packet may look like this:\n\n    {\n        success: false,\n        errors: {\n            clientCode: \"Client not found\",\n            portOfLoading: \"This field must not be null\"\n        }\n    }\n\nOther data may be placed into the response for processing by the <a href='#!/api/Ext.form.Basic'>Ext.form.Basic</a>s callback or event handler\nmethods. The object decoded from this JSON is available in the <a href='#!/api/Ext.form.action.Action-property-result'>Ext.form.action.Action#result</a> property.\n\nAlternatively, if an <a href='#!/api/Ext.form.Basic-cfg-errorReader'>Ext.form.Basic#errorReader</a> is specified as an\n<a href='#!/api/Ext.data.reader.Xml'>Ext.data.reader.Xml</a>:\n\n    errorReader: new Ext.data.reader.Xml({\n            record : 'field',\n            success: '@success'\n        }, [\n            'id', 'msg'\n        ]\n    )\n\nthen the results may be sent back in XML format:\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <message success=\"false\">\n    <errors>\n        <field>\n            <id>clientCode</id>\n            <msg><![CDATA[Code not found. <br /><i>This is a test validation message from the server </i>]]></msg>\n        </field>\n        <field>\n            <id>portOfLoading</id>\n            <msg><![CDATA[Port not found. <br /><i>This is a test validation message from the server </i>]]></msg>\n        </field>\n    </errors>\n    </message>\n\nOther elements may be placed into the response XML for processing by the <a href='#!/api/Ext.form.Basic'>Ext.form.Basic</a>s callback or event\nhandler methods. The XML document is available in the <a href='#!/api/Ext.form.Basic-cfg-errorReader'>Ext.form.Basic#errorReader</a>s\n<a href='#!/api/Ext.data.reader.Xml-property-xmlData'>Ext.data.reader.Xml#xmlData</a> property.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "clientValidation",
                "optional": true,
                "text": "Determines whether a Form's fields are validated in a final call to <a href='#!/api/Ext.form.Basic-method-isValid'>Ext.form.Basic#isValid</a> prior\nto submission. Pass false in the Form's submit options to prevent this.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,69,24",
                  "text": "0,70,8,185",
                  "type": "0,69,14",
                  "value": "0,69,41"
                }
              },
              {
                "$type": "property",
                "controllable": true,
                "name": "failure",
                "text": "The function to call when a failure packet was received, or when an error\noccurred in the Ajax communication.\n",
                "type": "Function/String",
                "items": [
                  {
                    "$type": "property",
                    "name": "form",
                    "text": "The form that requested the action\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "name": "1,77,38",
                      "text": "1,77,43,35",
                      "type": "1,77,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "action",
                    "text": "The Action class. If an Ajax error\noccurred, the failure type will be in <a href='#!/api/Ext.form.action.Submit-property-failureType'>failureType</a>. The <a href='#!/api/Ext.form.action.Submit-property-result'>result</a>\nproperty of this object may be examined to perform custom post-processing.\n",
                    "type": "Ext.form.action.Action",
                    "src": {
                      "name": "1,78,46",
                      "text": "1,78,53,35:1,79,8,156",
                      "type": "1,78,14"
                    }
                  }
                ],
                "src": {
                  "controllable": "1,82,8",
                  "name": "1,74,31",
                  "text": "1,75,8,110",
                  "type": "1,74,14"
                }
              },
              {
                "$type": "property",
                "name": "form",
                "text": "The <a href='#!/api/Ext.form.Basic'>Ext.form.Basic</a> instance that is invoking this Action. Required.\n",
                "type": "Ext.form.Basic",
                "src": {
                  "name": "1,17,30",
                  "text": "1,18,8,86",
                  "type": "1,17,14"
                }
              },
              {
                "$type": "property",
                "name": "headers",
                "text": "Extra headers to be sent in the AJAX request for submit and load actions.\nSee <a href='#!/api/Ext.data.proxy.Ajax-cfg-headers'>Ext.data.proxy.Ajax#headers</a>.\n\n**Note:** Headers are not sent during file upload.\n",
                "type": "Object",
                "src": {
                  "name": "1,49,22",
                  "text": "1,50,8,167",
                  "type": "1,49,14"
                }
              },
              {
                "$type": "property",
                "name": "method",
                "text": "The HTTP method to use to access the requested URL.\nDefaults to the <a href='#!/api/Ext.form.Basic-cfg-method'>Ext.form.Basic#method</a>, or 'POST' if not specified.\n",
                "type": "String",
                "src": {
                  "name": "1,35,22",
                  "text": "1,36,8,146",
                  "type": "1,35,14"
                }
              },
              {
                "$type": "property",
                "name": "params",
                "text": "Extra parameter values to pass. These are added to the Form's <a href='#!/api/Ext.form.Basic-cfg-baseParams'>Ext.form.Basic#baseParams</a> and passed to the\nspecified URL along with the Form's input fields.\n\nParameters are encoded as standard HTTP parameters using <a href='#!/api/Ext-method-urlEncode'>Ext#urlEncode</a>.\n",
                "type": "Object/String",
                "src": {
                  "name": "1,41,29",
                  "text": "1,42,8,270",
                  "type": "1,41,14"
                }
              },
              {
                "$type": "property",
                "name": "reset",
                "text": "When set to **true**, causes the Form to be <a href='#!/api/Ext.form.Basic-method-reset'>Ext.form.Basic#reset</a> on Action success. If specified,\nthis happens before the <a href='#!/api/Ext.form.action.Submit-cfg-success'>success</a> callback is called and before the Form's\n<a href='#!/api/Ext.form.Basic-event-actioncomplete'>Ext.form.Basic#actioncomplete</a> event fires.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,28,23",
                  "text": "1,29,8,260",
                  "type": "1,28,14"
                }
              },
              {
                "$type": "property",
                "name": "scope",
                "text": "The scope in which to call the configured #success and #failure callback functions\n(the `this` reference for the callback functions).\n",
                "type": "Object",
                "src": {
                  "name": "1,86,22",
                  "text": "1,87,8,134",
                  "type": "1,86,14"
                }
              },
              {
                "$type": "property",
                "name": "submitEmptyText",
                "text": "If set to true, the emptyText value will be sent with the form when it is submitted.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,104,23",
                  "text": "1,105,8,85",
                  "type": "1,104,14"
                }
              },
              {
                "$type": "property",
                "controllable": true,
                "name": "success",
                "text": "The function to call when a valid success return packet is received.\n",
                "type": "Function/String",
                "items": [
                  {
                    "$type": "property",
                    "name": "form",
                    "text": "The form that requested the action\n",
                    "type": "Ext.form.Basic",
                    "src": {
                      "name": "1,66,38",
                      "text": "1,66,43,35",
                      "type": "1,66,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "action",
                    "text": "The Action class. The <a href='#!/api/Ext.form.action.Submit-property-result'>result</a> property of this object may\nbe examined to perform custom post-processing.\n",
                    "type": "Ext.form.action.Action",
                    "src": {
                      "name": "1,67,46",
                      "text": "1,67,53,66:1,68,8,48",
                      "type": "1,67,14"
                    }
                  }
                ],
                "src": {
                  "controllable": "1,70,8",
                  "name": "1,64,31",
                  "text": "1,65,8,69",
                  "type": "1,64,14"
                }
              },
              {
                "$type": "property",
                "name": "timeout",
                "text": "The number of seconds to wait for a server response before failing with the <a href='#!/api/Ext.form.action.Submit-property-failureType'>failureType</a> as\n<a href='#!/api/Ext.form.action.Action-static-property-CONNECT_FAILURE'>Ext.form.action.Action#CONNECT_FAILURE</a>. If not specified, defaults to the configured\n<a href='#!/api/Ext.form.Basic-cfg-timeout'>Ext.form.Basic#timeout</a> of the <a href='#!/api/Ext.form.action.Submit-cfg-form'>form</a>.\n",
                "type": "Number",
                "src": {
                  "name": "1,57,22",
                  "text": "1,58,8,254",
                  "type": "1,57,14"
                }
              },
              {
                "$type": "property",
                "name": "url",
                "text": "The URL that the Action is to invoke. Will default to the <a href='#!/api/Ext.form.Basic-cfg-url'>Ext.form.Basic#url</a> configured on the\n<a href='#!/api/Ext.form.action.Submit-cfg-form'>form</a>.\n",
                "type": "String",
                "src": {
                  "name": "1,22,22",
                  "text": "1,23,8,122",
                  "type": "1,22,14"
                }
              },
              {
                "$type": "property",
                "name": "waitMsg",
                "text": "The message to be displayed by a call to <a href='#!/api/Ext.window.MessageBox-method-wait'>Ext.window.MessageBox#wait</a> during the time the action is being\nprocessed.\n",
                "type": "String",
                "src": {
                  "name": "1,92,22",
                  "text": "1,93,8,123",
                  "type": "1,92,14"
                }
              },
              {
                "$type": "property",
                "name": "waitTitle",
                "text": "The title to be displayed by a call to <a href='#!/api/Ext.window.MessageBox-method-wait'>Ext.window.MessageBox#wait</a> during the time the action is being\nprocessed.\n",
                "type": "String",
                "src": {
                  "name": "1,98,22",
                  "text": "1,99,8,121",
                  "type": "1,98,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "buildForm",
                "text": "Builds a form element containing fields corresponding to all the parameters to be\nsubmitted (everything returned by <a href='#!/api/Ext.form.action.Submit-method-getParams'>getParams</a>.\n\nNOTE: the form element is automatically added to the DOM, so any code that uses\nit must remove it from the DOM after finishing with it.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "HTMLElement",
                    "src": {
                      "type": "0,157,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,150,8",
                  "name": "0,159,0",
                  "text": "0,151,8,274"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Action.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "Config object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,169,25",
                      "text": "1,169,33,15",
                      "type": "1,169,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,171,0",
                  "text": "1,168,8,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createCallback",
                "text": "Creates a callback object.\n",
                "src": {
                  "access": "1,265,8",
                  "name": "1,268,0",
                  "text": "1,266,8,27"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doSubmit",
                "text": "Performs the submit of the form data.\n",
                "src": {
                  "access": "0,88,8",
                  "name": "0,91,0",
                  "text": "0,89,8,38"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getMethod",
                "text": "Determine the HTTP method to be used for the request.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The HTTP method\n",
                    "type": "String",
                    "src": {
                      "text": "1,248,25,16",
                      "type": "1,248,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,246,8",
                  "name": "1,250,0",
                  "text": "1,247,8,54"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getParams",
                "text": "Builds the full set of parameters from the field values plus any additional configured params.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "useModelValues",
                    "src": {
                      "name": "0,142,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,139,8",
                  "name": "0,142,0",
                  "text": "0,140,8,95"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getUrl",
                "text": "Build the URL for the AJAX request. Used by the standard AJAX submit and load actions.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The URL.\n",
                    "type": "String",
                    "src": {
                      "text": "1,239,25,9",
                      "type": "1,239,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,237,8",
                  "name": "1,241,0",
                  "text": "1,238,8,87"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleResponse",
                "items": [
                  {
                    "$type": "param",
                    "name": "response",
                    "src": {
                      "name": "0,275,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,273,8",
                  "name": "0,275,0"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.form.action.Submit-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.form.action.Submit-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onFailure",
                "text": "Handles a failure response.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "response",
                    "type": "Object",
                    "src": {
                      "name": "1,206,24",
                      "type": "1,206,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,204,8",
                  "name": "1,208,0",
                  "text": "1,205,8,28"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onSuccess",
                "items": [
                  {
                    "$type": "param",
                    "name": "response",
                    "src": {
                      "name": "0,253,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,251,8",
                  "name": "0,253,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "processResponse",
                "text": "Validates that a response contains either responseText or responseXML and invokes\n<a href='#!/api/Ext.form.action.Submit-method-handleResponse'>handleResponse</a> to build the result object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "response",
                    "text": "The raw response object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,224,24",
                      "text": "1,224,33,25",
                      "type": "1,224,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result object as built by handleResponse, or `true` if\nthe response had empty responseText and responseXML.\n",
                    "type": "Object/Boolean",
                    "src": {
                      "text": "1,225,33,59:1,226,8,53",
                      "type": "1,225,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,221,8",
                  "name": "1,228,0",
                  "text": "1,222,8,134"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.form.action.Submit-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.form.action.Submit-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "run",
                "text": "Invokes this action using the current configuration.\n",
                "src": {
                  "name": "1,187,0",
                  "text": "1,185,8,53"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.form.action.Submit-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.form.action.Submit-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.form.action.Submit-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.form.action.Submit-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n<a href='#!/api/Ext.form.action.Submit-property-type'>type</a> is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,297,21,32",
                      "type": "2,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,239,12",
                  "text": "2,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.form.action.Submit-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.form.action.Submit-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.form.action.Submit-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.form.action.Submit-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.form.action.Submit-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.form.action.Submit-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.form.action.Submit-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.form.action.Submit-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.form.action.Submit-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.form.action.Submit-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.form.action.Submit-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "failureType",
                "text": "The type of failure detected will be one of these:\n<a href='#!/api/Ext.form.action.Submit-CLIENT_INVALID'>CLIENT_INVALID</a>, <a href='#!/api/Ext.form.action.Submit-SERVER_INVALID'>SERVER_INVALID</a>, <a href='#!/api/Ext.form.action.Submit-CONNECT_FAILURE'>CONNECT_FAILURE</a>, or <a href='#!/api/Ext.form.action.Submit-LOAD_FAILURE'>LOAD_FAILURE</a>.\n\nUsage:\n\n    var fp = new Ext.form.Panel({\n    ...\n    buttons: [{\n        text: 'Save',\n        formBind: true,\n        handler: function(){\n            if(fp.getForm().isValid()){\n                fp.getForm().submit({\n                    url: 'form-submit.php',\n                    waitMsg: 'Submitting your data...',\n                    success: function(form, action){\n                        // server responded with success = true\n                        var result = action.result;\n                    },\n                    failure: function(form, action){\n                        if (action.<a href='#!/api/Ext.form.action.Submit-property-failureType'>failureType</a> === Ext.form.action.Action.CONNECT_FAILURE) {\n                            Ext.Msg.alert('Error',\n                                'Status:'+action.response.status+': '+\n                                action.response.statusText);\n                        }\n                        if (action.failureType === Ext.form.action.Action.SERVER_INVALID){\n                            // server responded with success = false\n                            Ext.Msg.alert('Invalid', action.result.errormsg);\n                        }\n                    }\n                });\n            }\n        }\n    },{\n        text: 'Reset',\n        handler: function(){\n            fp.getForm().reset();\n        }\n    }]\n",
                "type": "String",
                "src": {
                  "name": "1,115,27",
                  "text": "1,116,8,1470",
                  "type": "1,115,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              },
              {
                "$type": "property",
                "name": "response",
                "text": "The raw XMLHttpRequest object used to perform the action.\n",
                "type": "Object",
                "src": {
                  "name": "1,158,27",
                  "text": "1,159,8,58",
                  "type": "1,158,19"
                }
              },
              {
                "$type": "property",
                "name": "result",
                "text": "The decoded response object containing a boolean <a href='#!/api/Ext.form.action.Submit-cfg-success'>success</a> property and other, action-specific properties.\n",
                "type": "Object",
                "src": {
                  "name": "1,163,27",
                  "text": "1,164,8,107",
                  "type": "1,163,19"
                }
              },
              {
                "$type": "property",
                "name": "type",
                "text": "The type of action this Action instance performs. Currently only \"submit\" and \"load\" are supported.\n",
                "type": "String",
                "src": {
                  "name": "1,110,27",
                  "text": "1,111,8,100",
                  "type": "1,110,19"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,64,0",
          "alternateClassNames": "0,63,0",
          "extends": "0,62,0",
          "name": "0,61,0",
          "text": "0,2,4,2045"
        }
      }
    ]
  },
  "version": 1
}