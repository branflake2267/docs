{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/form/field/Time.js",
    "../../../ext/classic/classic/src/util/Floating.js",
    "../../../ext/classic/classic/src/form/Labelable.js",
    "../../../ext/classic/classic/src/Component.js",
    "../../../ext/classic/classic/src/form/field/Text.js",
    "../../../ext/classic/classic/src/form/field/ComboBox.js",
    "../../../ext/packages/core/src/mixin/Accessible.js",
    "../../../ext/packages/core/src/mixin/Bindable.js",
    "../../../ext/classic/classic/src/form/field/Base.js",
    "../../../ext/classic/classic/src/form/field/Picker.js",
    "../../../ext/classic/classic/src/util/KeyboardInteractive.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/classic/classic/src/util/ComponentDragger.js",
    "../../../ext/classic/classic/src/state/Stateful.js",
    "../../../ext/classic/classic/src/form/field/Field.js",
    "../../../ext/classic/classic/src/util/Focusable.js",
    "../../../ext/classic/classic/src/util/ElementContainer.js",
    "../../../ext/packages/core/src/mixin/ComponentDelegation.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../ext/packages/core/src/util/Positionable.js",
    "../../../ext/classic/classic/src/util/Renderable.js",
    "../../../ext/classic/classic/src/util/Animate.js",
    "../../../ext/classic/classic/src/util/StoreHolder.js",
    "../../../ext/packages/core/src/mixin/Inheritable.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/classic/theme-neutral/sass/var/form/field/Base.scss",
    "../../../ext/classic/theme-neutral/sass/var/grid-field.scss",
    "../../../ext/classic/theme-neutral/sass/var/scroll/Indicator.scss"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "widget.timefield",
        "alternateClassNames": "Ext.form.TimeField,Ext.form.Time",
        "extended": "Ext.form.field.ComboBox,Ext.form.field.Picker,Ext.form.field.Text,Ext.form.field.Base,Ext.Component,Ext.Base,Object",
        "extends": "Ext.form.field.ComboBox",
        "name": "Ext.form.field.Time",
        "requires": "Ext.form.field.Date,Ext.picker.Time,Ext.view.BoundListKeyNav,Ext.Date",
        "text": "Provides a time input field with a time dropdown and automatic time validation.\n\nThis field recognizes and uses JavaScript Date objects as its main {@link #cfg!value #value} type (only the time portion of the\ndate is used; the month/day/year are ignored). In addition, it recognizes string values which are parsed according to\nthe {@link #cfg!format #format} and/or {@link #cfg!altFormats #altFormats} configs. These may be reconfigured to use time formats appropriate for\nthe user's locale.\n\nThe field may be limited to a certain range of times by using the {@link #cfg!minValue #minValue} and {@link #cfg!maxValue #maxValue} configs,\nand the interval between time options in the dropdown can be changed with the {@link #cfg!increment #increment} config.\n\nExample usage:\n\n    @example\n    Ext.create('Ext.form.Panel', {\n        title: 'Time Card',\n        width: 300,\n        bodyPadding: 10,\n        renderTo: Ext.getBody(),\n        items: [{\n            xtype: 'timefield',\n            name: 'in',\n            fieldLabel: 'Time In',\n            minValue: '6:00 AM',\n            maxValue: '8:00 PM',\n            increment: 30,\n            anchor: '100%'\n        }, {\n            xtype: 'timefield',\n            name: 'out',\n            fieldLabel: 'Time Out',\n            minValue: '6:00 AM',\n            maxValue: '8:00 PM',\n            increment: 30,\n            anchor: '100%'\n       }]\n    });\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "activeCounter",
                "text": "An incrementing numeric counter indicating activation index for use by the {@link #property!zIndexManager #zIndexManager}\nto sort its stack.\n",
                "type": "Number",
                "src": {
                  "access": "1,117,12",
                  "name": "1,118,26",
                  "text": "1,118,40,98:1,119,12,19",
                  "type": "1,118,18"
                }
              },
              {
                "$type": "property",
                "name": "activeError",
                "text": "If specified, then the component will be displayed with this value as its active error when first rendered. Use\n{@link #method!setActiveError #setActiveError} or {@link #method!unsetActiveError #unsetActiveError} to change it after component creation.\n",
                "type": "String",
                "src": {
                  "name": "2,322,22",
                  "text": "2,323,8,204",
                  "type": "2,322,14"
                }
              },
              {
                "$type": "property",
                "name": "activeErrorsTpl",
                "text": "The template used to format the Array of error messages passed to {@link #method!setActiveErrors #setActiveErrors} into a single HTML\nstring. if the {@link #cfg!msgTarget #msgTarget} is title, it defaults to a list separated by new lines. Otherwise, it\nrenders each message as an item in an unordered list.\n",
                "type": "String/String[]/Ext.XTemplate",
                "src": {
                  "name": "2,117,45",
                  "text": "2,118,8,268",
                  "type": "2,117,14"
                }
              },
              {
                "$type": "property",
                "name": "afterBodyEl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\nat the end of the input containing element. If an `XTemplate` is used, the component's {@link Ext.Component#cfg!renderData Ext.Component#renderData}\nserves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "2,344,46",
                  "text": "2,345,12,233",
                  "type": "2,344,18"
                }
              },
              {
                "$type": "property",
                "name": "afterLabelTextTpl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\nafter the label text. If an `XTemplate` is used, the component's {@link Ext.Component#cfg!renderData Ext.Component#renderData}\nserves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "2,392,46",
                  "text": "2,393,12,211",
                  "type": "2,392,18"
                }
              },
              {
                "$type": "property",
                "name": "afterLabelTpl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\nafter the label element. If an `XTemplate` is used, the component's {@link Ext.Component#cfg!renderData Ext.Component#renderData}\nserves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "2,360,46",
                  "text": "2,361,12,214",
                  "type": "2,360,18"
                }
              },
              {
                "$type": "property",
                "name": "afterSubTpl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\nafter the {@link #method!getSubTplMarkup #getSubTplMarkup}. If an `XTemplate` is used, the\ncomponent's {@link Ext.Component#cfg!renderData Ext.Component#renderData} serves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "2,376,46",
                  "text": "2,377,12,239",
                  "type": "2,376,18"
                }
              },
              {
                "$type": "property",
                "name": "alignTarget",
                "optional": true,
                "text": "A Component or Element by which to position this component according to the {@link #cfg!defaultAlign #defaultAlign}.\nDefaults to the owning Container.\n\n*Only applicable if this component is {@link #cfg!floating #cfg-floating}*\n\n*Used upon first show*.\n",
                "type": "String",
                "src": {
                  "name": "3,413,23",
                  "text": "3,414,8,220",
                  "type": "3,413,14"
                }
              },
              {
                "$type": "property",
                "name": "allowBlank",
                "optional": true,
                "text": "Specify false to validate that the value's length must be > 0. If `true`, then a blank value is **always** taken to be valid regardless of any {@link #cfg!vtype #vtype}\nvalidation that may be applied.\n\nIf {@link #cfg!vtype #vtype} validation must still be applied to blank values, configure {@link #cfg!validateBlank #validateBlank} as `true`;\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "4,251,24",
                  "text": "4,252,8,303",
                  "type": "4,251,14",
                  "value": "4,251,35"
                }
              },
              {
                "$type": "property",
                "name": "allowOnlyWhitespace",
                "text": "Specify false to automatically trim the value before validating\nthe whether the value is blank. Setting this to false automatically\nsets {@link #cfg!allowBlank #allowBlank} to false.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,266,23",
                  "text": "4,267,8,167",
                  "type": "4,266,14"
                }
              },
              {
                "$type": "property",
                "name": "allQuery",
                "text": "The text query to send to the server to return all records for the list with no filtering\n",
                "type": "String",
                "src": {
                  "name": "5,327,22",
                  "text": "5,328,8,90",
                  "type": "5,327,14"
                }
              },
              {
                "$type": "property",
                "name": "altFormats",
                "text": "Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\nformat.\n",
                "type": "String",
                "src": {
                  "name": "0,111,22",
                  "text": "0,112,8,119",
                  "type": "0,111,14"
                }
              },
              {
                "$type": "property",
                "name": "alwaysOnTop",
                "optional": true,
                "text": "A flag indicating that this component should be on the top of the z-index stack for use by the {@link #property!zIndexManager #zIndexManager}\nto sort its stack.\n\nThis may be a positive number to prioritize the ordering of multiple visible always on top components.\n\nThis may be set to a *negative* number to prioritize a component to the *bottom* of the z-index stack.\n",
                "type": "Boolean/Number",
                "value": "false",
                "src": {
                  "name": "1,124,35",
                  "text": "1,124,54,118:1,125,12,227",
                  "type": "1,124,18",
                  "value": "1,124,47"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.layout.container.Anchor",
                "name": "anchor",
                "type": "String",
                "src": {
                  "inheritdoc": "3,425,8",
                  "name": "3,424,22",
                  "type": "3,424,14"
                }
              },
              {
                "$type": "property",
                "name": "animateShadow",
                "optional": true,
                "text": "`true` to animate the shadow along with the component while the component is animating.\nBy default the shadow is hidden while the component is animating\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,31,24",
                  "text": "1,32,8,153",
                  "type": "1,31,14",
                  "value": "1,31,38"
                }
              },
              {
                "$type": "property",
                "name": "anyMatch",
                "optional": true,
                "text": "Configure as `true` to allow matching of the typed characters at any position in the {@link #cfg!valueField #valueField}'s value.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "5,425,24",
                  "text": "5,426,8,114",
                  "type": "5,425,14",
                  "value": "5,425,33"
                }
              },
              {
                "$type": "property",
                "name": "ariaAttributes",
                "text": "An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as `aria-live`, `aria-flowto`, etc.\n\n**Note** that this config is only meaningful at the Component rendering time,\nand setting it after that will do nothing.\n",
                "type": "Object",
                "src": {
                  "name": "6,39,26",
                  "text": "6,39,41,47:6,40,12,280",
                  "type": "6,39,18"
                }
              },
              {
                "$type": "property",
                "name": "ariaDescribedBy",
                "optional": true,
                "text": "DOM selector for a child element that is to be used\nas description for this Component, set in `aria-describedby` attribute.\nThe selector works the same way as {@link #cfg!ariaLabelledBy #ariaLabelledBy}.\n",
                "type": "String",
                "src": {
                  "name": "6,32,23",
                  "text": "6,32,40,52:6,33,8,132",
                  "type": "6,32,14"
                }
              },
              {
                "$type": "property",
                "name": "ariaLabel",
                "optional": true,
                "text": "ARIA label for this Component. It is best to use\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} option instead, because screen readers prefer\n`aria-labelledby` attribute to `aria-label`. {@link #cfg!ariaLabel #ariaLabel} and\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} config options are mutually exclusive.\n",
                "type": "String",
                "src": {
                  "name": "6,15,23",
                  "text": "6,15,34,49:6,16,8,201",
                  "type": "6,15,14"
                }
              },
              {
                "$type": "property",
                "name": "ariaLabelledBy",
                "optional": true,
                "text": "DOM selector for a child element that is to be used\nas label for this Component, set in `aria-labelledby` attribute.\nIf the selector is by `{@link #cfg!id #id}`, the label element can be any existing element,\nnot necessarily a child of the main Component element.\n\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} and {@link #cfg!ariaLabel #ariaLabel} config options are\nmutually exclusive, and `{@link #cfg!ariaLabelledBy ariaLabelledBy}` has the higher precedence.\n",
                "type": "String",
                "src": {
                  "name": "6,22,23",
                  "text": "6,22,39,52:6,23,8,331",
                  "type": "6,22,14"
                }
              },
              {
                "$type": "property",
                "name": "autoEl",
                "since": "2.3.0",
                "text": "A tag name or {@link Ext.dom.Helper} spec used to create the {@link #method!getEl #getEl} which will\nencapsulate this Component.\n\nYou do not normally need to specify this. For the base classes {@link Ext.Component} and\n{@link Ext.container.Container}, this defaults to **'div'**. The more complex Sencha classes use a more\ncomplex DOM structure specified by their own {@link #cfg!renderTpl #renderTpl}s.\n\nThis is intended to allow the developer to create application-specific utility Components encapsulated by\ndifferent DOM elements. Example usage:\n\n    {\n        xtype: 'component',\n        autoEl: {\n            tag: 'img',\n            src: 'http://www.example.com/example.jpg'\n        }\n    }, {\n        xtype: 'component',\n        autoEl: {\n            tag: 'blockquote',\n            html: 'autoEl is cool!'\n        }\n    }, {\n        xtype: 'container',\n        autoEl: 'ul',\n        cls: 'ux-unordered-list',\n        items: {\n            xtype: 'component',\n            autoEl: 'li',\n            html: 'First list item'\n        }\n    }\n",
                "type": "String/Object",
                "src": {
                  "name": "3,429,29",
                  "since": "3,463,15",
                  "text": "3,430,8,1033",
                  "type": "3,429,14"
                }
              },
              {
                "$type": "property",
                "name": "autoFitErrors",
                "text": "Whether to adjust the component's body width to make room for 'side'\n{@link #cfg!msgTarget #msgTarget}.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,285,23",
                  "text": "2,286,8,104",
                  "type": "2,285,14"
                }
              },
              {
                "$type": "property",
                "name": "autoLoadOnValue",
                "text": "This option controls whether to *initially* load the store when a value is set so that\nthe display value can be determined from the appropriate record.\nThe store will only be loaded in a limited set of circumstances:\n- The store is not currently loading.\n- The store does not have a pending {@link Ext.data.Store#cfg!autoLoad Ext.data.Store#autoLoad}.\n- The store has not been loaded before.\n",
                "type": "Boolean",
                "src": {
                  "name": "5,390,23",
                  "text": "5,391,8,364",
                  "type": "5,390,14"
                }
              },
              {
                "$type": "property",
                "name": "autoRender",
                "text": "This config is intended mainly for non-{@link #cfg!floating #cfg-floating} Components which may or may not be shown. Instead of using\n{@link #cfg!renderTo #renderTo} in the configuration, and rendering upon construction, this allows a Component to render itself\nupon first _{@link Ext.Component#method!show Ext.Component#method-show}_. If {@link #cfg!floating #cfg-floating} is `true`, the value of this config is omitted as if it is `true`.\n\nSpecify as `true` to have this Component render to the document body upon first show.\n\nSpecify as an element, or the ID of an element to have this Component render to a specific element upon first\nshow.\n",
                "type": "Boolean/String/HTMLElement/Ext.dom.Element",
                "src": {
                  "name": "3,467,58",
                  "text": "3,468,8,583",
                  "type": "3,467,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link #scrollable} instead\n",
                "deprecatedVersion": "5.1.0",
                "name": "autoScroll",
                "optional": true,
                "text": "`true` to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary,\n`false` to clip any overflowing content.\n\nThis should not be combined with {@link #cfg!overflowX #overflowX} or  {@link #cfg!overflowY #overflowY}.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "deprecatedMessage": "3,485,8",
                  "deprecatedVersion": "3,485,8",
                  "name": "3,480,24",
                  "text": "3,481,8,232",
                  "type": "3,480,14",
                  "value": "3,480,35"
                }
              },
              {
                "$type": "property",
                "name": "autoSelect",
                "text": "`true` to automatically highlight the first result gathered by the data store in the dropdown list when it is\nopened. A false value would cause nothing in the list to be highlighted automatically, so\nthe user would have to manually highlight an item before pressing the enter or {@link #cfg!selectOnTab #selectOnTab} key to\nselect it (unless the value of ({@link #cfg!typeAhead #typeAhead}) were true), or use the mouse to select a value.\n",
                "type": "Boolean",
                "src": {
                  "name": "5,437,23",
                  "text": "5,438,8,411",
                  "type": "5,437,14"
                }
              },
              {
                "$type": "property",
                "name": "autoShow",
                "since": "2.3.0",
                "text": "`true` to automatically show the component upon creation. This config option may only be used for\n{@link #cfg!floating #cfg-floating} components or components that use {@link #cfg!autoRender #autoRender}.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,489,23",
                  "since": "3,493,15",
                  "text": "3,490,8,176",
                  "type": "3,489,14"
                }
              },
              {
                "$type": "property",
                "name": "baseBodyCls",
                "text": "The CSS class to be applied to the body content element.\n",
                "type": "String",
                "src": {
                  "name": "2,183,22",
                  "text": "2,184,8,57",
                  "type": "2,183,14"
                }
              },
              {
                "$type": "property",
                "name": "baseCls",
                "optional": true,
                "text": "The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class `x-panel-body`. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the `{@link #cfg!baseCls baseCls}` `x-panel` and use\n`{@link #cfg!componentCls componentCls}` to add specific styling for this component.\n",
                "type": "String",
                "value": "'x-component'",
                "src": {
                  "name": "3,498,23",
                  "text": "3,499,8,398",
                  "type": "3,498,14",
                  "value": "3,498,31"
                }
              },
              {
                "$type": "property",
                "name": "beforeBodyEl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\nat the beginning of the input containing element. If an `XTemplate` is used, the component's {@link Ext.Component#cfg!renderData Ext.Component#renderData}\nserves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "2,336,46",
                  "text": "2,337,12,239",
                  "type": "2,336,18"
                }
              },
              {
                "$type": "property",
                "name": "beforeLabelTextTpl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\nbefore the label text. If an `XTemplate` is used, the component's {@link Ext.Component#cfg!renderData Ext.Component#renderData}\nserves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "2,384,46",
                  "text": "2,385,12,212",
                  "type": "2,384,18"
                }
              },
              {
                "$type": "property",
                "name": "beforeLabelTpl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\nbefore the label element. If an `XTemplate` is used, the component's {@link Ext.Component#cfg!renderData Ext.Component#renderData}\nserves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "2,352,46",
                  "text": "2,353,12,215",
                  "type": "2,352,18"
                }
              },
              {
                "$type": "property",
                "name": "beforeSubTpl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\nbefore the {@link #method!getSubTplMarkup #getSubTplMarkup}. If an `XTemplate` is used, the\ncomponent's {@link Ext.Component#cfg!renderData Ext.Component#renderData} serves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "2,368,46",
                  "text": "2,369,12,240",
                  "type": "2,368,18"
                }
              },
              {
                "$type": "property",
                "name": "bind",
                "optional": true,
                "text": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `title` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n",
                "type": "Object",
                "src": {
                  "name": "7,12,27",
                  "text": "7,13,12,559",
                  "type": "7,12,18"
                }
              },
              {
                "$type": "property",
                "name": "blankText",
                "text": "The error text to display if the **{@link #cfg!allowBlank #allowBlank}** validation fails\n",
                "type": "String",
                "src": {
                  "name": "4,319,22",
                  "text": "4,320,8,74",
                  "type": "4,319,14"
                }
              },
              {
                "$type": "property",
                "name": "border",
                "text": "Specifies the border size for this component. The border can be a single numeric value to apply to all sides or it can\nbe a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).\n\nFor components that have no border by default, setting this won't make the border appear by itself.\nYou also need to specify border color and style:\n\n    border: 5,\n    style: {\n        borderColor: 'red',\n        borderStyle: 'solid'\n    }\n\nTo turn off the border, use `border: false`.\n",
                "type": "Number/String/Boolean",
                "src": {
                  "name": "3,507,37",
                  "text": "3,508,8,505",
                  "type": "3,507,14"
                }
              },
              {
                "$type": "property",
                "name": "caseSensitive",
                "optional": true,
                "text": "Configure as `true` to make the filtering match with exact case matching\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "5,431,24",
                  "text": "5,432,8,73",
                  "type": "5,431,14",
                  "value": "5,431,38"
                }
              },
              {
                "$type": "property",
                "name": "checkChangeBuffer",
                "text": "Defines a timeout in milliseconds for buffering {@link #cfg!checkChangeEvents #checkChangeEvents} that fire in rapid succession.\nDefaults to 50 milliseconds.\n",
                "type": "Number",
                "src": {
                  "name": "8,194,22",
                  "text": "8,195,8,135",
                  "type": "8,194,14"
                }
              },
              {
                "$type": "property",
                "name": "checkChangeEvents",
                "text": "A list of event names that will be listened for on the field's {@link #property!inputEl #inputEl}, which will cause\nthe field's value to be checked for changes. If a change is detected, the {@link #event!change #change} will be\nfired, followed by validation if the {@link #cfg!validateOnChange #validateOnChange} option is enabled.\n\nDefaults to ['change', 'propertychange', 'keyup'] in Internet Explorer, and ['change', 'input', 'textInput', 'keyup',\n'dragdrop'] in other browsers. This catches all the ways that field values can be changed in most supported\nbrowsers; the only known exceptions at the time of writing are:\n\n  - Safari 3.2 and older: cut/paste in textareas via the context menu, and dragging text into textareas\n  - Opera 10 and 11: dragging text into text fields and textareas, and cut via the context menu in text fields\n    and textareas\n  - Opera 9: Same as Opera 10 and 11, plus paste from context menu in text fields and textareas\n\nIf you need to guarantee on-the-fly change notifications including these edge cases, you can call the\n{@link #method!checkChange #checkChange} method on a repeating interval, e.g. using {@link Ext.util.TaskManager Ext.TaskManager}, or if the field is within\na {@link Ext.form.Panel}, you can use the FormPanel's {@link Ext.form.Panel#cfg!pollForChanges Ext.form.Panel#pollForChanges} configuration to set up\nsuch a task automatically.\n",
                "type": "String[]",
                "src": {
                  "name": "8,167,24",
                  "text": "8,168,8,1287",
                  "type": "8,167,14"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.util.ElementContainer#childEls",
                "name": "childEls",
                "type": "Object/String[]/Object[]",
                "src": {
                  "inheritdoc": "3,525,8",
                  "name": "3,524,40",
                  "type": "3,524,14"
                }
              },
              {
                "$type": "property",
                "name": "clearFilterOnBlur",
                "text": "*When {@link #cfg!queryMode #queryMode} is `'local'` only*\n\nAs text is entered, the underlying store is filtered to match the value. When this option is `true`,\nany filtering applied by this field will be cleared when focus is removed & reinstated on focus.\nIf `false`, the filters will be left in place.\n",
                "type": "Boolean",
                "src": {
                  "name": "5,479,23",
                  "text": "5,480,8,290",
                  "type": "5,479,14"
                }
              },
              {
                "$type": "property",
                "name": "cls",
                "optional": true,
                "since": "1.1.0",
                "text": "An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.\n",
                "type": "String/String[]",
                "value": "''",
                "src": {
                  "name": "3,541,32",
                  "since": "3,546,15",
                  "text": "3,542,8,281",
                  "type": "3,541,14",
                  "value": "3,541,36"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "For multiple selection use {@link Ext.form.field.Tag} or\n{@link Ext.view.MultiSelector}\n",
                "deprecatedVersion": "5.1.0",
                "name": "collapseOnSelect",
                "optional": true,
                "text": "Has no effect if {@link #cfg!multiSelect #multiSelect} is `false`\n\nConfigure as true to automatically collapse the pick list after a selection is made.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "deprecatedMessage": "5,200,8",
                  "deprecatedVersion": "5,200,8",
                  "name": "5,196,24",
                  "text": "5,197,8,135",
                  "type": "5,196,14",
                  "value": "5,196,41"
                }
              },
              {
                "$type": "property",
                "name": "columnWidth",
                "optional": true,
                "text": "Defines the column width inside {@link Ext.layout.container.Column}.\n\nThe columnWidth property is always evaluated as a percentage and must be a decimal value greater than 0 and\nless than 1 (e.g., .25).  See the description at the top of {@link Ext.layout.container.Column} for\nadditional usage details when combining width and columnWidth configs within the layout.\n",
                "type": "Number",
                "src": {
                  "name": "3,550,23",
                  "text": "3,551,8,395",
                  "type": "3,550,14"
                }
              },
              {
                "$type": "property",
                "name": "componentCls",
                "text": "CSS Class to be added to a components root level element to give distinction to it via styling.\n",
                "type": "String",
                "src": {
                  "name": "3,559,22",
                  "text": "3,560,8,96",
                  "type": "3,559,14"
                }
              },
              {
                "$type": "property",
                "name": "componentLayout",
                "text": "The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.\n\nGenerally, developers will not use this configuration as all provided Components which need their internal\nelements sizing (Such as {@link Ext.form.field.Base}) come with their own componentLayout managers.\n\nThe {@link Ext.layout.container.Auto} will be used on instances of the base Ext.Component\nclass which simply sizes the Component's encapsulating element to the height and width specified in the\n{@link #method!setSize #setSize} method.\n",
                "type": "String/Object",
                "src": {
                  "name": "3,565,29",
                  "text": "3,566,8,670",
                  "type": "3,565,14"
                }
              },
              {
                "$type": "property",
                "name": "constrain",
                "text": "True to constrain this Components within its containing element, false to allow it to fall outside of its containing\nelement. By default this Component will be rendered to `document.body`. To render and constrain this Component within\nanother element specify {@link Ext.Component#cfg!renderTo Ext.Component#renderTo}.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,38,23",
                  "text": "1,39,8,300",
                  "type": "1,38,14"
                }
              },
              {
                "$type": "property",
                "name": "constraintInsets",
                "text": "An object or a string (in TRBL order) specifying insets from the configured {@link #cfg!constrainTo #constrainTo}\nwithin which this component must be constrained when positioning or sizing.\nexample:\n\n   constraintInsets: '10 10 10 10' // Constrain with 10px insets from parent\n",
                "type": "Object/String",
                "src": {
                  "name": "3,580,29",
                  "text": "3,581,8,277",
                  "type": "3,580,14"
                }
              },
              {
                "$type": "property",
                "name": "constrainTo",
                "text": "A {@link Ext.util.Region} (or an element from which a Region measurement will be read) which is used\nto constrain the component. Only applies when the component is floating.\n",
                "type": "Ext.util.Region/Ext.dom.Element",
                "src": {
                  "name": "3,589,47",
                  "text": "3,590,8,181",
                  "type": "3,589,14"
                }
              },
              {
                "$type": "property",
                "name": "contentEl",
                "since": "3.4.0",
                "text": "Specify an existing HTML element, or the `{@link #cfg!id id}` of an existing HTML element to use as the content for this component.\n\nThis config option is used to take an existing HTML element and place it in the layout element of a new component\n(it simply moves the specified DOM element _after the Component is rendered_ to use as the content.\n\n**Notes:**\n\nThe specified HTML element is appended to the layout element of the component _after any configured\n{@link #cfg!html #html} has been inserted_, and so the document will not contain this element at the time\nthe {@link #event!render #event-render} event is fired.\n\nThe specified HTML element used will not participate in any **`{@link Ext.container.Container#cfg!layout Ext.container.Container#layout}`**\nscheme that the Component may use. It is just HTML. Layouts operate on child\n**`{@link Ext.container.Container#cfg!items Ext.container.Container#cfg-items}`**.\n\nAdd either the `x-hidden` or the `x-hidden-display` CSS class to prevent a brief flicker of the content before it\nis rendered to the panel.\n",
                "type": "String",
                "src": {
                  "name": "3,595,22",
                  "since": "3,614,15",
                  "text": "3,596,8,974",
                  "type": "3,595,14"
                }
              },
              {
                "$type": "property",
                "name": "controller",
                "text": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n",
                "type": "String/Object/Ext.app.ViewController",
                "src": {
                  "name": "7,45,56",
                  "text": "7,46,12,637",
                  "type": "7,45,18"
                }
              },
              {
                "$type": "property",
                "name": "data",
                "since": "3.4.0",
                "text": "The initial set of data to apply to the `{@link #cfg!tpl #tpl}` to update the content\narea of the Component.\n",
                "type": "Object",
                "src": {
                  "name": "3,279,26",
                  "since": "3,283,19",
                  "text": "3,280,12,101",
                  "type": "3,279,18"
                }
              },
              {
                "$type": "property",
                "name": "defaultAlign",
                "optional": true,
                "text": "The default {@link Ext.util.Positionable#method!getAlignToXY Ext.util.Positionable#getAlignToXY} anchor position value for this component\nrelative to its {@link #cfg!alignTarget #alignTarget} (which defaults to its owning Container).\n\n_Only applicable if this component is {@link #cfg!floating #cfg-floating}_\n\n*Used upon first show*.\n",
                "type": "String",
                "value": "\"c-c\"",
                "src": {
                  "name": "3,618,23",
                  "text": "3,619,8,291",
                  "type": "3,618,14",
                  "value": "3,618,36"
                }
              },
              {
                "$type": "property",
                "name": "defaultListConfig",
                "text": "Set of options that will be used as defaults for the user-configured {@link #cfg!listConfig #listConfig} object.\n",
                "type": "Object",
                "src": {
                  "name": "5,523,22",
                  "text": "5,524,8,97",
                  "type": "5,523,14"
                }
              },
              {
                "$type": "property",
                "name": "defaultListenerScope",
                "text": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n",
                "type": "Boolean",
                "src": {
                  "name": "7,84,27",
                  "text": "7,85,12,508",
                  "type": "7,84,18"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "For multiple selection use {@link Ext.form.field.Tag} or\n{@link Ext.view.MultiSelector}\n",
                "deprecatedVersion": "5.1.0",
                "name": "delimiter",
                "text": "The character(s) used to separate the {@link #cfg!displayField #displayField} of multiple selected items when\n`{@link #cfg!multiSelect #multiSelect} = true`.\n",
                "type": "String",
                "src": {
                  "deprecatedMessage": "5,153,12",
                  "deprecatedVersion": "5,153,12",
                  "name": "5,150,26",
                  "text": "5,151,12,138",
                  "type": "5,150,18"
                }
              },
              {
                "$type": "property",
                "name": "dirtyCls",
                "text": "The CSS class to use when the field value {@link #method!isDirty #isDirty}.\n",
                "type": "String",
                "src": {
                  "name": "8,161,22",
                  "text": "8,162,8,69",
                  "type": "8,161,14"
                }
              },
              {
                "$type": "property",
                "name": "disabled",
                "since": "2.3.0",
                "text": "`true` to disable the component.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,629,23",
                  "since": "3,631,15",
                  "text": "3,630,8,33",
                  "type": "3,629,14"
                }
              },
              {
                "$type": "property",
                "name": "disabledCls",
                "optional": true,
                "text": "CSS class to add when the Component is disabled.\n",
                "type": "String",
                "value": "'x-item-disabled'",
                "src": {
                  "name": "3,652,23",
                  "text": "3,653,8,49",
                  "type": "3,652,14",
                  "value": "3,652,35"
                }
              },
              {
                "$type": "property",
                "name": "disableKeyFilter",
                "optional": true,
                "text": "Specify true to disable input keystroke filtering\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "4,246,24",
                  "text": "4,247,8,50",
                  "type": "4,246,14",
                  "value": "4,246,41"
                }
              },
              {
                "$type": "property",
                "name": "displayField",
                "text": "The underlying {@link Ext.data.field.Field#cfg!name Ext.data.Field#name} to bind to this ComboBox.\n\nSee also `{@link #cfg!valueField #valueField}`.\n",
                "type": "String",
                "src": {
                  "name": "5,160,26",
                  "text": "5,161,12,118",
                  "type": "5,160,18"
                }
              },
              {
                "$type": "property",
                "name": "displayTpl",
                "optional": true,
                "text": "The template to be used to display selected records inside the text field. An array of the selected records' data\nwill be passed to the template. Defaults to:\n\n    '<tpl for=\".\">' +\n        '{[typeof values === \"string\" ? values : values[\"' + me.displayField + '\"]]}' +\n        '<tpl if=\"xindex < xcount\">' + me.delimiter + '</tpl>' +\n    '</tpl>'\n\nBy default only the immediate data of the record is passed (no associated data). The {@link #method!getRecordDisplayData #getRecordDisplayData} can\nbe overridden to extend this.\n",
                "type": "String/String[]/Ext.XTemplate",
                "src": {
                  "name": "5,134,50",
                  "text": "5,135,12,498",
                  "type": "5,134,18"
                }
              },
              {
                "$type": "property",
                "name": "dock",
                "text": "The side of the {@link Ext.panel.Panel} where this component is to be\ndocked when specified in the panel's\n{@link Ext.panel.Panel#cfg!dockedItems Ext.panel.Panel#dockedItems} config.\n\nPossible values are:\n\n - top\n - bottom\n - left\n - right\n",
                "type": "'top'/'bottom'/'left'/'right'",
                "src": {
                  "name": "3,658,45",
                  "text": "3,659,8,226",
                  "type": "3,658,14"
                }
              },
              {
                "$type": "property",
                "name": "draggable",
                "optional": true,
                "text": "Specify as true to make a {@link #cfg!floating #cfg-floating} Component draggable using the Component's encapsulating element as\nthe drag handle.\n\nThis may also be specified as a config object for the {@link Ext.util.ComponentDragger} which is\ninstantiated to perform dragging.\n\nFor example to create a Component which may only be dragged around using a certain internal element as the drag\nhandle, use the delegate option:\n\n    new Ext.Component({\n        constrain: true,\n        floating: true,\n        style: {\n            backgroundColor: '#fff',\n            border: '1px solid black'\n        },\n        html: '<h1 style=\"cursor:move\">The title</h1><p>The content</p>',\n        draggable: {\n            delegate: 'h1'\n        }\n    }).show();\n",
                "type": "Boolean/Object",
                "value": "false",
                "src": {
                  "name": "3,672,31",
                  "text": "3,673,8,751",
                  "type": "3,672,14",
                  "value": "3,672,41"
                }
              },
              {
                "$type": "property",
                "name": "editable",
                "text": "False to prevent the user from typing text directly into the field; the field can only have its value set via\nselecting a value from the picker. In this state, the picker can also be opened by clicking directly on the input\nfield itself.\n",
                "type": "Boolean",
                "src": {
                  "name": "9,29,27",
                  "text": "9,30,12,238",
                  "type": "9,29,18"
                }
              },
              {
                "$type": "property",
                "name": "emptyCls",
                "optional": true,
                "text": "The CSS class to apply to an empty field to style the **{@link #cfg!emptyText #emptyText}**.\nThis class is automatically added and removed as needed depending on the current field value.\n",
                "type": "String",
                "value": "'x-form-empty-field'",
                "src": {
                  "name": "4,384,23",
                  "text": "4,385,8,172",
                  "type": "4,384,14",
                  "value": "4,384,32"
                }
              },
              {
                "$type": "property",
                "name": "emptyText",
                "text": "The default text to place into an empty field.\n\nNote that normally this value will be submitted to the server if this field is enabled; to prevent this you can\nset the {@link Ext.form.action.Action#cfg!submitEmptyText Ext.form.action.Action#submitEmptyText} option of {@link Ext.form.Basic#method!submit Ext.form.Basic#submit} to\nfalse.\n\nAlso note that if you use {@link #cfg!inputType #inputType}:'file', {@link #cfg!emptyText #emptyText} is not supported and should be\navoided.\n\nNote that for browsers that support it, setting this property will use the HTML 5 placeholder attribute, and for\nolder browsers that don't support the HTML 5 placeholder attribute the value will be placed directly into the input\nelement itself as the raw value. This means that older browsers will obfuscate the {@link #cfg!emptyText #emptyText} value for\npassword input fields.\n",
                "type": "String",
                "src": {
                  "name": "4,365,22",
                  "text": "4,366,8,769",
                  "type": "4,365,14"
                }
              },
              {
                "$type": "property",
                "name": "enableKeyEvents",
                "optional": true,
                "text": "true to enable the proxying of key events for the HTML input field\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "4,397,24",
                  "text": "4,398,8,67",
                  "type": "4,397,14",
                  "value": "4,397,40"
                }
              },
              {
                "$type": "property",
                "name": "enableRegEx",
                "text": "*When {@link #cfg!queryMode #queryMode} is `'local'` only*\n\nSet to `true` to have the ComboBox use the typed value as a RegExp source to filter the store to get possible matches.\n",
                "type": "Boolean",
                "src": {
                  "name": "5,489,23",
                  "text": "5,490,8,164",
                  "type": "5,489,14"
                }
              },
              {
                "$type": "property",
                "name": "enforceMaxLength",
                "text": "True to set the maxLength property on the underlying input field. Defaults to false\n",
                "type": "Boolean",
                "src": {
                  "name": "4,291,23",
                  "text": "4,292,8,84",
                  "type": "4,291,14"
                }
              },
              {
                "$type": "property",
                "name": "errorMsgCls",
                "text": "The CSS class to be applied to the error message element.\n",
                "type": "String",
                "src": {
                  "name": "2,172,22",
                  "text": "2,173,8,58",
                  "type": "2,172,14"
                }
              },
              {
                "$type": "property",
                "name": "fieldBodyCls",
                "text": "An extra CSS class to be applied to the body content element in addition to {@link #cfg!baseBodyCls #baseBodyCls}.\n",
                "type": "String",
                "src": {
                  "name": "2,195,22",
                  "text": "2,196,8,98",
                  "type": "2,195,14"
                }
              },
              {
                "$type": "property",
                "name": "fieldCls",
                "optional": true,
                "text": "The default CSS class for the field input\n",
                "type": "String",
                "value": "'x-form-field'",
                "src": {
                  "name": "8,142,23",
                  "text": "8,143,8,42",
                  "type": "8,142,14",
                  "value": "8,142,32"
                }
              },
              {
                "$type": "property",
                "name": "fieldLabel",
                "text": "The label for the field. It gets appended with the {@link #cfg!labelSeparator #labelSeparator}, and its position and sizing is\ndetermined by the {@link #cfg!labelAlign #labelAlign} and {@link #cfg!labelWidth #labelWidth} configs.\n",
                "type": "String",
                "src": {
                  "name": "2,207,22",
                  "text": "2,208,8,178",
                  "type": "2,207,14"
                }
              },
              {
                "$type": "property",
                "name": "fieldStyle",
                "text": "Optional CSS style(s) to be applied to the {@link #property!inputEl #inputEl}. Should be a valid argument to\n{@link Ext.dom.Element#method!applyStyles Ext.dom.Element#applyStyles}. Defaults to undefined. See also the {@link #method!setFieldStyle #setFieldStyle} method for changing\nthe style after initialization.\n",
                "type": "String",
                "src": {
                  "name": "8,148,22",
                  "text": "8,149,8,259",
                  "type": "8,148,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "fieldSubTpl",
                "text": "The content of the field body is defined by this config option.\n",
                "type": "Ext.XTemplate",
                "src": {
                  "access": "8,51,8",
                  "name": "8,49,29",
                  "text": "8,50,8,64",
                  "type": "8,49,14"
                }
              },
              {
                "$type": "property",
                "name": "fixed",
                "optional": true,
                "text": "Configure as `true` to have this Component fixed at its `X, Y` coordinates in the browser viewport, immune\nto scrolling the document.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,46,24",
                  "text": "1,47,8,134",
                  "type": "1,46,14",
                  "value": "1,46,30"
                }
              },
              {
                "$type": "property",
                "name": "flex",
                "text": "Flex may be applied to **child items** of a box layout ({@link Ext.layout.container.VBox} or\n{@link Ext.layout.container.HBox}). Each child item with a flex property will\nfill space (horizontally in `hbox`, vertically in `vbox`) according to that item's\n**relative** flex value compared to the sum of all items with a flex value specified.\n\nAny child items that have either a `{@link #cfg!flex flex}` of `0` or `{@link undefined}`\nwill not be 'flexed' (the initial size will not be changed).\n",
                "type": "Number",
                "src": {
                  "name": "3,698,22",
                  "text": "3,699,8,476",
                  "type": "3,698,14"
                }
              },
              {
                "$type": "property",
                "name": "floating",
                "text": "Specify as true to float the Component outside of the document flow using CSS absolute positioning.\n\nComponents such as {@link Ext.window.Window}s and {@link Ext.menu.Menu}s are floating by default.\n\nFloating Components that are programmatically {@link Ext.Component#method!render Ext.Component#method-render} will register\nthemselves with the global {@link Ext.WindowManager}\n\n### Floating Components as child items of a Container\n\nA floating Component may be used as a child item of a Container. This just allows the floating Component to seek\na ZIndexManager by examining the ownerCt chain.\n\nWhen configured as floating, Components acquire, at render time, a {@link Ext.ZIndexManager} which\nmanages a stack of related floating Components. The ZIndexManager sorts its stack according to\nan incrementing access counter and the {@link Ext.util.Floating#cfg!alwaysOnTop Ext.util.Floating#alwaysOnTop} config when the Component's {@link #method!toFront #toFront} method is called.\n\nThe ZIndexManager is found by traversing up the {@link #property!ownerCt #ownerCt} chain to find an ancestor which itself is\nfloating. This is so that descendant floating Components of floating _Containers_ (Such as a ComboBox dropdown\nwithin a Window) can have its zIndex managed relative to any siblings, but always **above** that floating\nancestor Container.\n\nIf no floating ancestor is found, a floating Component registers itself with the default {@link Ext.WindowManager}.\n\nFloating components _do not participate in the Container's layout_. Because of this, they are not rendered until\nyou explicitly {@link #method!show #method-show} them.\n\nAfter rendering, the ownerCt reference is deleted, and the {@link #property!floatParent #floatParent} property is set to the found\nfloating ancestor Container. If no floating ancestor Container was found the {@link #property!floatParent #floatParent} property will\nnot be set.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,709,23",
                  "text": "3,710,8,1828",
                  "type": "3,709,14"
                }
              },
              {
                "$type": "property",
                "name": "focusCls",
                "optional": true,
                "text": "The CSS class to use when the field receives focus\n",
                "type": "String",
                "value": "'x-form-focus'",
                "src": {
                  "name": "8,155,23",
                  "text": "8,156,8,51",
                  "type": "8,155,14",
                  "value": "8,155,32"
                }
              },
              {
                "$type": "property",
                "name": "focusOnToFront",
                "text": "Specifies whether the floated component should be automatically {@link Ext.Component#method!focus Ext.Component#method-focus} when\nit is {@link #method!toFront #toFront}.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,10,23",
                  "text": "1,11,8,157",
                  "type": "1,10,14"
                }
              },
              {
                "$type": "property",
                "name": "forceSelection",
                "text": "`true` to restrict the selected value to one of the values in the list, `false` to allow the user to set\narbitrary text into the field.\n",
                "type": "Boolean",
                "src": {
                  "name": "5,465,23",
                  "text": "5,466,8,136",
                  "type": "5,465,14"
                }
              },
              {
                "$type": "property",
                "name": "format",
                "optional": true,
                "text": "The default time format string which can be overridden for localization support.\nThe format must be valid according to {@link Ext.Date#method!parse Ext.Date#parse}.\n\nDefaults to `'g:i A'`, e.g., `'3:15 PM'`. For 24-hour time format try `'H:i'` instead.\n",
                "type": "String",
                "value": "undefined",
                "src": {
                  "name": "0,90,23",
                  "text": "0,91,8,231",
                  "type": "0,90,14",
                  "value": "0,90,30"
                }
              },
              {
                "$type": "property",
                "name": "formatText",
                "text": "The format text to be announced by screen readers when the field is focused.\n",
                "type": "String",
                "src": {
                  "name": "0,121,22",
                  "text": "0,122,8,77",
                  "type": "0,121,14"
                }
              },
              {
                "$type": "property",
                "name": "formBind",
                "optional": true,
                "text": "When inside FormPanel, any component configured with `formBind: true` will\nbe enabled/disabled depending on the validity state of the form.\nSee {@link Ext.form.Panel} for more information and example.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "3,744,24",
                  "text": "3,745,8,201",
                  "type": "3,744,14",
                  "value": "3,744,33"
                }
              },
              {
                "$type": "property",
                "name": "formItemCls",
                "text": "A CSS class to be applied to the outermost element to denote that it is participating in the form field layout.\n",
                "type": "String",
                "src": {
                  "name": "2,145,22",
                  "text": "2,146,8,112",
                  "type": "2,145,14"
                }
              },
              {
                "$type": "property",
                "name": "frame",
                "text": "Specify as `true` to have the Component inject framing elements within the Component at render time to provide a\ngraphical rounded frame around the Component content.\n\nThis is only necessary when running on outdated, or non standard-compliant browsers such as Microsoft's Internet\nExplorer prior to version 9 which do not support rounded corners natively.\n\nThe extra space taken up by this framing is available from the read only property {@link #property!frameSize #frameSize}.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,751,23",
                  "text": "3,752,8,459",
                  "type": "3,751,14"
                }
              },
              {
                "$type": "property",
                "name": "grow",
                "optional": true,
                "text": "true if this field should automatically grow and shrink to its content\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "4,207,24",
                  "text": "4,208,8,71",
                  "type": "4,207,14",
                  "value": "4,207,29"
                }
              },
              {
                "$type": "property",
                "name": "growAppend",
                "text": "A string that will be appended to the field's current value for the purposes of calculating the target field\nsize. Only used when the {@link #cfg!grow #grow} config is true. Defaults to a single capital \"W\" (the widest character in\ncommon fonts) to leave enough space for the next typed character and avoid the field value shifting before the\nwidth is adjusted.\n",
                "type": "String",
                "src": {
                  "name": "4,225,22",
                  "text": "4,226,8,352",
                  "type": "4,225,14"
                }
              },
              {
                "$type": "property",
                "name": "growMax",
                "text": "The maximum width to allow when `{@link #cfg!grow #grow} = true`\n",
                "type": "Number",
                "src": {
                  "name": "4,218,22",
                  "text": "4,219,8,55",
                  "type": "4,218,14"
                }
              },
              {
                "$type": "property",
                "name": "growMin",
                "text": "The minimum width to allow when `{@link #cfg!grow #grow} = true`\n",
                "type": "Number",
                "src": {
                  "name": "4,212,22",
                  "text": "4,213,8,55",
                  "type": "4,212,14"
                }
              },
              {
                "$type": "property",
                "name": "growToLongestValue",
                "text": "`false` to not allow the component to resize itself when its data changes\n(and its {@link #cfg!grow #grow} property is `true`)\n",
                "type": "Boolean",
                "src": {
                  "name": "5,472,23",
                  "text": "5,473,8,117",
                  "type": "5,472,14"
                }
              },
              {
                "$type": "property",
                "name": "height",
                "text": "The height of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.\n",
                "type": "Number/String",
                "src": {
                  "name": "3,762,29",
                  "text": "3,763,8,149",
                  "type": "3,762,14"
                }
              },
              {
                "$type": "property",
                "name": "hidden",
                "since": "2.3.0",
                "text": "`true` to hide the component.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,768,23",
                  "since": "3,770,15",
                  "text": "3,769,8,30",
                  "type": "3,768,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "hiddenDataCls",
                "text": "CSS class used to find the {@link #property!hiddenDataEl #hiddenDataEl}\n",
                "type": "String",
                "src": {
                  "access": "5,211,8",
                  "name": "5,215,0",
                  "text": "5,213,8,49",
                  "type": "5,212,14"
                }
              },
              {
                "$type": "property",
                "name": "hiddenName",
                "optional": true,
                "text": "The name of an underlying hidden field which will be synchronized with the underlying value of the combo.\nThis option is useful if the combo is part of a form element doing a regular form post. The hidden field\nwill not be created unless a hiddenName is specified.\n",
                "type": "String",
                "value": "\"\"",
                "src": {
                  "name": "5,179,23",
                  "text": "5,180,8,265",
                  "type": "5,179,14",
                  "value": "5,179,34"
                }
              },
              {
                "$type": "property",
                "name": "hideEmptyLabel",
                "text": "When set to true, the label element ({@link #cfg!fieldLabel #fieldLabel} and {@link #cfg!labelSeparator #labelSeparator}) will be automatically\nhidden if the {@link #cfg!fieldLabel #fieldLabel} is empty. Setting this to false will cause the empty label element to be\nrendered and space to be reserved for it; this is useful if you want a field without a label to line up with\nother labeled fields in the same form.\n\nIf you wish to unconditionall hide the label even if a non-empty fieldLabel is configured, then set the\n{@link #cfg!hideLabel #hideLabel} config to true.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,267,23",
                  "text": "2,268,8,503",
                  "type": "2,267,14"
                }
              },
              {
                "$type": "property",
                "name": "hideLabel",
                "text": "Set to true to completely hide the label element ({@link #cfg!fieldLabel #fieldLabel} and {@link #cfg!labelSeparator #labelSeparator}). Also see\n{@link #cfg!hideEmptyLabel #hideEmptyLabel}, which controls whether space will be reserved for an empty fieldLabel.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,260,23",
                  "text": "2,261,8,205",
                  "type": "2,260,14"
                }
              },
              {
                "$type": "property",
                "name": "hideMode",
                "since": "1.1.0",
                "text": "A String which specifies how this Component's encapsulating DOM element will be hidden. Values may be:\n\n  - `'display'` : The Component will be hidden using the `display: none` style.\n  - `'visibility'` : The Component will be hidden using the `visibility: hidden` style.\n  - `'offsets'` : The Component will be hidden by absolutely positioning it out of the visible area of the document.\n    This is useful when a hidden Component must maintain measurable dimensions. Hiding using `display` results in a\n    Component having zero dimensions.\n",
                "type": "String",
                "src": {
                  "name": "3,775,22",
                  "since": "3,784,15",
                  "text": "3,776,8,544",
                  "type": "3,775,14"
                }
              },
              {
                "$type": "property",
                "name": "hideTrigger",
                "text": "`true` to hide all triggers\n",
                "type": "Boolean",
                "src": {
                  "name": "4,118,27",
                  "text": "4,119,12,28",
                  "type": "4,118,18"
                }
              },
              {
                "$type": "property",
                "name": "html",
                "optional": true,
                "since": "3.4.0",
                "text": "An HTML fragment, or a {@link Ext.dom.Helper} specification to use as the layout element content.\nThe HTML content is added after the component is rendered, so the document will not contain this HTML at the time\nthe {@link #event!render #event-render} event is fired. This content is inserted into the body _before_ any configured {@link #cfg!contentEl #contentEl}\nis appended.\n",
                "type": "String/Object",
                "value": "''",
                "src": {
                  "name": "3,789,30",
                  "since": "3,795,15",
                  "text": "3,790,8,360",
                  "type": "3,789,14",
                  "value": "3,789,35"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "since": "1.1.0",
                "text": "The **unique** id of this component instance.\n\nUse of this config should be considered carefully as this value must be unique across\nall existing components. Components created with an `{@link #cfg!id id}` may be accessed globally\nusing {@link Ext#getCmp Ext.getCmp}.\n\nInstead of using assigned ids, consider a {@link #cfg!reference #reference} config and a {@link #cfg!controller #cfg-controller}\nto respond to events and perform processing upon this Component.\n\nAlternatively, {@link #cfg!itemId #itemId} and {@link Ext.ComponentQuery} can be\nused to perform selector-based searching for Components analogous to DOM querying.\nThe {@link Ext.container.Container} class contains several helpful\n{@link Ext.container.Container#method!down Ext.container.Container#down} to query its descendant\nComponents by selector.\n\nNote that this `{@link #cfg!id id}` will also be used as the element id for the containing HTML\nelement that is rendered to the page for this component. This allows you to write\nid-based CSS rules to style the specific instance of this component uniquely, and\nalso to select sub-elements using this component's `{@link #cfg!id id}` as the parent.\n\nDefaults to an {@link #method!getId #getId}.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed by\n(optional) additional letters, underscores, digits or hyphens.\n",
                "type": "String",
                "src": {
                  "name": "3,799,22",
                  "since": "3,825,15",
                  "text": "3,800,8,1290",
                  "type": "3,799,14"
                }
              },
              {
                "$type": "property",
                "name": "increment",
                "optional": true,
                "text": "The number of minutes between each time value in the list.\n\nNote that this only affects the *list of suggested times.*\n\nTo enforce that only times on the list are valid, use {@link #cfg!snapToIncrement #snapToIncrement}. That will coerce\nany typed values to the nearest increment point upon blur.\n",
                "type": "Number",
                "value": "15",
                "src": {
                  "name": "0,129,23",
                  "text": "0,130,8,276",
                  "type": "0,129,14",
                  "value": "0,129,33"
                }
              },
              {
                "$type": "property",
                "name": "inputAttrTpl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\ninside the input element (as attributes). If an `XTemplate` is used, the component's\n{@link #method!getSubTplData #getSubTplData} serves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "8,79,46",
                  "text": "8,80,12,221",
                  "type": "8,79,18"
                }
              },
              {
                "$type": "property",
                "name": "inputId",
                "text": "The id that will be given to the generated input DOM element. Defaults to an automatically generated id. If you\nconfigure this manually, you must make sure it is unique in the document.\n",
                "type": "String",
                "src": {
                  "name": "8,215,22",
                  "text": "8,216,8,186",
                  "type": "8,215,14"
                }
              },
              {
                "$type": "property",
                "name": "inputType",
                "text": "The type attribute for input fields -- e.g. radio, text, password, file. The extended types\nsupported by HTML5 inputs (url, email, etc.) may also be used, though using them will cause older browsers to\nfall back to 'text'.\n\nThe type 'password' must be used to render that field type currently -- there is no separate Ext component for\nthat. You can use {@link Ext.form.field.File} which creates a custom-rendered file upload field, but if you want\na plain unstyled file input you can use a Base with inputType:'file'.\n",
                "type": "String",
                "src": {
                  "name": "8,103,22",
                  "text": "8,104,8,518",
                  "type": "8,103,14"
                }
              },
              {
                "$type": "property",
                "name": "inputWrapCls",
                "text": "The CSS class that is added to the element wrapping the input element\n",
                "type": "String",
                "src": {
                  "name": "4,446,0",
                  "text": "4,444,8,70",
                  "type": "4,443,14"
                }
              },
              {
                "$type": "property",
                "name": "invalidCls",
                "text": "The CSS class to use when marking the component invalid.\n",
                "type": "String",
                "src": {
                  "name": "2,201,22",
                  "text": "2,202,8,57",
                  "type": "2,201,14"
                }
              },
              {
                "$type": "property",
                "name": "invalidText",
                "text": "The error text to display when the time in the field is invalid.\n",
                "type": "String",
                "src": {
                  "name": "0,82,22",
                  "text": "0,83,8,65",
                  "type": "0,82,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "isTextInput",
                "since": "5.0.1",
                "text": "`true` if this field renders as a text input.\n",
                "type": "Boolean",
                "src": {
                  "access": "8,118,8",
                  "name": "8,115,23",
                  "since": "8,119,15",
                  "text": "8,116,8,47",
                  "type": "8,115,14"
                }
              },
              {
                "$type": "property",
                "name": "itemId",
                "since": "3.4.0",
                "text": "The **unique** id of this component instance within its container. See also the\n{@link #cfg!reference #reference} config.\n\nAn `{@link #cfg!itemId itemId}` can be used as an alternative way to get a reference to a component when no object reference is\navailable. Instead of using an `{@link #cfg!id #id}` with {@link Ext#getCmp getCmp}, use\n`{@link #cfg!itemId itemId}` with {@link Ext.container.Container#method!getComponent Ext.container.Container#getComponent} which will\nretrieve `{@link #cfg!itemId itemId}`'s or {@link #cfg!id #id}'s. Since `{@link #cfg!itemId itemId}`'s are an index to the container's\ninternal collection, the `{@link #cfg!itemId itemId}` is scoped locally to the container -- avoiding\npotential conflicts with {@link Ext.ComponentManager} which requires a **unique**\n`{@link #cfg!id #id}` values.\n\n    var c = new Ext.panel.Panel({ //\n        height: 300,\n        renderTo: document.body,\n        layout: 'auto',\n        items: [{\n            itemId: 'p1',\n            title: 'Panel 1',\n            height: 150\n        },{\n            itemId: 'p2',\n            title: 'Panel 2',\n            height: 150\n        }]\n    });\n\n    p1 = c.getComponent('p1'); // not the same as Ext.getCmp()\n    console.log(p1);\n    p2 = p1.ownerCt.getComponent('p2'); // reference via a sibling\n    console.log(p2);\n\nAlso see {@link #cfg!id #id}, `{@link Ext.container.Container#method!query Ext.container.Container#query}`, `{@link Ext.container.Container#method!down Ext.container.Container#down}` and\n`{@link Ext.container.Container#method!child Ext.container.Container#child}`.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed by\n(optional) additional letters, underscores, digits or hyphens.\n\n**Note**: to access the container of an item see {@link #property!ownerCt #ownerCt}.\n",
                "type": "String",
                "src": {
                  "name": "3,829,22",
                  "since": "3,869,15",
                  "text": "3,830,8,1513",
                  "type": "3,829,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "keyHandlers",
                "text": "Handlers for keydown events.\n\nThis object's keys correspond to keyboard key names in\n{@link Ext.event.Event}, with values defined as method\nnames that should be executed when a keydown event occurs\nfor the specified key name.\nFor example:\n\n     Ext.define('MyButton', {\n         extend: 'Ext.button.Button',\n\n         config: {\n             keyHandlers: {\n                 ENTER: 'onEnterKey'\n             }\n         },\n\n         onEnterKey: function(event) {\n             ...\n         }\n     });\n",
                "type": "Object",
                "src": {
                  "access": "10,36,12",
                  "name": "10,14,26",
                  "text": "10,14,38,29:10,15,12,469",
                  "type": "10,14,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "labelableRenderTpl",
                "text": "The rendering template for the field decorations. Component classes using this mixin\nshould include logic to use this as their {@link Ext.Component#cfg!renderTpl Ext.Component#renderTpl},\nand implement the {@link #method!getSubTplMarkup #getSubTplMarkup} method to generate the field body content.\n",
                "type": "String/String[]/Ext.XTemplate",
                "src": {
                  "access": "2,72,8",
                  "name": "2,68,45",
                  "text": "2,69,8,256",
                  "type": "2,68,14"
                }
              },
              {
                "$type": "property",
                "name": "labelAlign",
                "text": "Controls the position and alignment of the {@link #cfg!fieldLabel #fieldLabel}. Valid values are:\n\n  - \"left\" (the default) - The label is positioned to the left of the field, with its text aligned to the left.\n    Its width is determined by the {@link #cfg!labelWidth #labelWidth} config.\n  - \"top\" - The label is positioned above the field.\n  - \"right\" - The label is positioned to the left of the field, with its text aligned to the right.\n    Its width is determined by the {@link #cfg!labelWidth #labelWidth} config.\n",
                "type": "String",
                "src": {
                  "name": "2,214,22",
                  "text": "2,215,8,474",
                  "type": "2,214,14"
                }
              },
              {
                "$type": "property",
                "name": "labelAttrTpl",
                "text": "An optional string or `XTemplate` configuration to insert in the field markup\ninside the label element (as attributes). If an `XTemplate` is used, the component's\n{@link Ext.Component#cfg!renderData Ext.Component#renderData} serves as the context.\n",
                "type": "String/Array/Ext.XTemplate",
                "src": {
                  "name": "2,400,46",
                  "text": "2,401,12,231",
                  "type": "2,400,18"
                }
              },
              {
                "$type": "property",
                "name": "labelCls",
                "text": "The CSS class to be applied to the label element. This (single) CSS class is used to formulate the renderSelector\nand drives the field layout where it is concatenated with a hyphen ('-') and {@link #cfg!labelAlign #labelAlign}. To add\nadditional classes, use {@link #cfg!labelClsExtra #labelClsExtra}.\n",
                "type": "String",
                "src": {
                  "name": "2,151,22",
                  "text": "2,152,8,267",
                  "type": "2,151,14"
                }
              },
              {
                "$type": "property",
                "name": "labelClsExtra",
                "text": "An optional string of one or more additional CSS classes to add to the label element. Defaults to empty.\n",
                "type": "String",
                "src": {
                  "name": "2,167,22",
                  "text": "2,168,8,105",
                  "type": "2,167,14"
                }
              },
              {
                "$type": "property",
                "name": "labelPad",
                "text": "The amount of space in pixels between the {@link #cfg!fieldLabel #fieldLabel} and the field body.\nThis defaults to `5` for compatibility with Ext JS 4, however, as of Ext JS 5\nthe space between the label and the body can optionally be determined by the theme\nusing the {@link #var!$form-label-horizontal-spacing #$form-label-horizontal-spacing} (for side-aligned labels) and\n{@link #var!$form-label-vertical-spacing #$form-label-vertical-spacing} (for top-aligned labels) SASS variables.\nIn order for the stylesheet values as to take effect, you must use a labelPad value\nof `{@link null}`.\n",
                "type": "Number",
                "src": {
                  "name": "2,233,22",
                  "text": "2,234,8,497",
                  "type": "2,233,14"
                }
              },
              {
                "$type": "property",
                "name": "labelSeparator",
                "text": "Character(s) to be inserted at the end of the {@link #cfg!fieldLabel #fieldLabel}.\n\nSet to empty string to hide the separator completely.\n",
                "type": "String",
                "src": {
                  "name": "2,246,22",
                  "text": "2,247,8,133",
                  "type": "2,246,14"
                }
              },
              {
                "$type": "property",
                "name": "labelStyle",
                "text": "A CSS style specification string to apply directly to this field's label.\n",
                "type": "String",
                "src": {
                  "name": "2,255,22",
                  "text": "2,256,8,74",
                  "type": "2,255,14"
                }
              },
              {
                "$type": "property",
                "name": "labelWidth",
                "text": "The width of the {@link #cfg!fieldLabel #fieldLabel} in pixels. Only applicable if {@link #cfg!labelAlign #labelAlign}\nis set to \"left\" or \"right\".\n",
                "type": "Number",
                "src": {
                  "name": "2,226,22",
                  "text": "2,227,8,116",
                  "type": "2,226,14"
                }
              },
              {
                "$type": "property",
                "name": "liquidLayout",
                "text": "Components that achieve their internal layout results using solely CSS with no JS\nintervention must set this to true.  This allows the component to opt out of the\nlayout run when used inside certain container layouts such as {@link Ext.layout.container.Form} and {@link Ext.layout.container.Auto}\nresulting in a performance gain. The following components currently use liquid\nlayout (`liquidLayout: true`):\n\n- All Form Fields (subclasses of {@link Ext.form.field.Base})\n- {@link Ext.button.Button}\n\nIt is important to keep in mind that components using liquidLayout do not fire\nthe following events:\n\n- {@link #event!resize #event-resize}\n- {@link #event!boxready #event-boxready}\n\nIn addition liquidLayout components do not call the following template methods:\n\n- {@link #method!afterComponentLayout #afterComponentLayout}\n- {@link #method!onBoxReady #onBoxReady}\n- {@link #method!onResize #onResize}\n\nAny component that needs to fire these events or to have these methods called during\nits life cycle needs to set `{@link #cfg!liquidLayout liquidLayout}` to `false`.  The following example\ndemonstrates how to enable the resize event for a\n{@link Ext.form.field.TextArea}:\n\n    @example\n    var win = Ext.create({\n            xtype: 'window',\n            title: 'Resize This Window!',\n            height: 100,\n            width: 200,\n            layout: 'anchor',\n            items: [{\n                xtype: 'textarea',\n                anchor: '0 0',\n                liquidLayout: false // allows the textarea to fire \"resize\"\n            }]\n        }),\n        textfield = win.items.getAt(0);\n\n    win.show();\n\n    textfield.on('resize', function(textfield, width, height) {\n        Ext.Msg.alert('Text Field Resized', 'width: ' + width + ', height: ' + height);\n    });\n\nUse caution when setting `{@link #cfg!liquidLayout liquidLayout}` to `false` as it carries a performance penalty\nsince it means the layout system must perform expensive DOM reads to determine the\nComponent's size.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1593,0",
                  "text": "3,1541,8,1868",
                  "type": "3,1540,14"
                }
              },
              {
                "$type": "property",
                "name": "listConfig",
                "text": "An optional set of configuration properties that will be passed to the {@link Ext.view.BoundList}'s constructor.\nAny configuration that is valid for BoundList can be included. Some of the more useful ones are:\n\n  - {@link Ext.view.BoundList#cfg!cls Ext.view.BoundList#cls} - defaults to empty\n  - {@link Ext.view.BoundList#cfg!emptyText Ext.view.BoundList#emptyText} - defaults to empty string\n  - {@link Ext.view.BoundList#cfg!itemSelector Ext.view.BoundList#itemSelector} - defaults to the value defined in BoundList\n  - {@link Ext.view.BoundList#cfg!loadingText Ext.view.BoundList#loadingText} - defaults to `'Loading...'`\n  - {@link Ext.view.BoundList#cfg!minWidth Ext.view.BoundList#minWidth} - defaults to `70`\n  - {@link Ext.view.BoundList#cfg!maxWidth Ext.view.BoundList#maxWidth} - defaults to `{@link undefined}`\n  - {@link Ext.view.BoundList#cfg!maxHeight Ext.view.BoundList#maxHeight} - defaults to `300`\n  - {@link Ext.view.BoundList#cfg!resizable Ext.view.BoundList#resizable} - defaults to `false`\n  - {@link Ext.view.BoundList#cfg!shadow Ext.view.BoundList#shadow} - defaults to `'sides'`\n  - {@link Ext.view.BoundList#cfg!width Ext.view.BoundList#width} - defaults to `{@link undefined}` (automatically set to the width of the ComboBox\n    field if {@link #cfg!matchFieldWidth #matchFieldWidth} is true)\n  - {@link Ext.view.BoundList#method!getInnerTpl Ext.view.BoundList#getInnerTpl} A function which returns a template string which renders\n    the ComboBox's {@link #cfg!displayField #displayField} value in the dropdown. This defaults to just outputting the raw value,\n    but may use any {@link Ext.XTemplate} methods to produce output.\n\n    The running template is configured with some extra properties that provide some context:\n        - field {@link Ext.form.field.ComboBox} This combobox\n        - store {@link Ext.data.Store} This combobox's data store\n",
                "type": "Object",
                "src": {
                  "name": "5,549,22",
                  "text": "5,550,8,1594",
                  "type": "5,549,14"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the {@link Ext.view.View}'s **`{@link Ext.view.View#event!itemclick Ext.view.View#itemclick}`** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "11,243,25",
                  "text": "11,244,11,1325",
                  "type": "11,243,17"
                }
              },
              {
                "$type": "property",
                "name": "liveDrag",
                "optional": true,
                "text": "True to drag the component itself.  Else a lightweight version of the component\nwill be shown (_using the component's ghost() method_).\n\n**Note:** This config is only relevant when used with dragging implemented via\n{@link Ext.util.ComponentDragger}.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "12,37,24",
                  "text": "12,39,8,251",
                  "type": "12,37,14",
                  "value": "12,37,33"
                }
              },
              {
                "$type": "property",
                "name": "loader",
                "text": "A configuration object or an instance of a {@link Ext.ComponentLoader} to load remote content\nfor this Component.\n\n    Ext.create('Ext.Component', {\n        loader: {\n            url: 'content.html',\n            autoLoad: true\n        },\n        renderTo: Ext.getBody()\n    });\n",
                "type": "Ext.ComponentLoader/Object",
                "src": {
                  "name": "3,873,42",
                  "text": "3,874,8,278",
                  "type": "3,873,14"
                }
              },
              {
                "$type": "property",
                "name": "margin",
                "text": "Specifies the margin for this component. The margin can be a single numeric value to apply to all sides or it can\nbe a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).\n",
                "type": "Number/String",
                "src": {
                  "name": "3,887,29",
                  "text": "3,888,8,212",
                  "type": "3,887,14"
                }
              },
              {
                "$type": "property",
                "name": "maskElement",
                "optional": true,
                "text": "Related to the {@link #cfg!childEls #cfg-childEls} configuration which specifies named properties which correspond to component sub-elements.\n\nThe name of the element property in this component to mask when masked by a LoadMask.\n\nDefaults to `{@link null}` to indicate that Components cannot by default contain a LoadMask, and that any LoadMask should be rendered into the document body.\n\nFor example, Panels use `\"el\"` to indicate that the whole panel should be masked. This could be configured to be\n`\"body\"` so that only the body is masked and toolbars and the header are still mouse-accessible.\n",
                "type": "String",
                "value": "null",
                "src": {
                  "name": "3,893,23",
                  "text": "3,894,8,577",
                  "type": "3,893,14",
                  "value": "3,893,35"
                }
              },
              {
                "$type": "property",
                "name": "maskRe",
                "text": "An input mask regular expression that will be used to filter keystrokes (character being\ntyped) that do not match.\nNote: It does not filter characters already in the input.\n",
                "type": "RegExp",
                "src": {
                  "name": "4,240,22",
                  "text": "4,240,29,89:4,241,8,84",
                  "type": "4,240,14"
                }
              },
              {
                "$type": "property",
                "name": "matchFieldWidth",
                "text": "Whether the picker dropdown's width should be explicitly set to match the width of the field. Defaults to true.\n",
                "type": "Boolean",
                "src": {
                  "name": "9,44,23",
                  "text": "9,45,8,112",
                  "type": "9,44,14"
                }
              },
              {
                "$type": "property",
                "name": "maxHeight",
                "text": "The maximum value in pixels which this Component will set its height to.\n\n**Warning:** This will override any size management applied by layout managers.\n",
                "type": "Number",
                "src": {
                  "name": "3,358,26",
                  "text": "3,359,12,154",
                  "type": "3,358,18"
                }
              },
              {
                "$type": "property",
                "name": "maxLength",
                "text": "Maximum input field length allowed by validation. This behavior is intended to\nprovide instant feedback to the user by improving usability to allow pasting and editing or overtyping and back\ntracking. To restrict the maximum number of characters that can be entered into the field use the\n**{@link Ext.form.field.Text#cfg!enforceMaxLength Ext.form.field.Text#enforceMaxLength}** option.\n\nDefaults to Number.MAX_VALUE.\n",
                "type": "Number",
                "src": {
                  "name": "4,280,22",
                  "text": "4,281,8,394",
                  "type": "4,280,14"
                }
              },
              {
                "$type": "property",
                "name": "maxLengthText",
                "text": "Error text to display if the **{@link #cfg!maxLength #maxLength}** validation fails\n",
                "type": "String",
                "src": {
                  "name": "4,305,22",
                  "text": "4,306,8,84",
                  "type": "4,305,14"
                }
              },
              {
                "$type": "property",
                "name": "maxText",
                "text": "The error text to display when the entered time is after {@link #cfg!maxValue #maxValue}.\n",
                "type": "String",
                "src": {
                  "name": "0,74,22",
                  "text": "0,75,8,76",
                  "type": "0,74,14"
                }
              },
              {
                "$type": "property",
                "name": "maxValue",
                "text": "The maximum allowed time. Can be either a Javascript date object with a valid time value or a string time in a\nvalid format -- see {@link #cfg!format #format} and {@link #cfg!altFormats #altFormats}.\n",
                "type": "Date/String",
                "src": {
                  "name": "0,59,27",
                  "text": "0,60,8,172",
                  "type": "0,59,14"
                }
              },
              {
                "$type": "property",
                "name": "maxWidth",
                "text": "The maximum value in pixels which this Component will set its width to.\n\n**Warning:** This will override any size management applied by layout managers.\n",
                "type": "Number",
                "src": {
                  "name": "3,366,26",
                  "text": "3,367,12,153",
                  "type": "3,366,18"
                }
              },
              {
                "$type": "property",
                "name": "minChars",
                "text": "The minimum number of characters the user must type before autocomplete and {@link #cfg!typeAhead #typeAhead} activate.\n\nDefaults to `4` if `{@link #cfg!queryMode #queryMode} = 'remote'` or `0` if `{@link #cfg!queryMode #queryMode} = 'local'`,\ndoes not apply if `{@link Ext.form.field.Trigger#cfg!editable Ext.form.field.Trigger#editable} = false`.\n",
                "type": "Number",
                "src": {
                  "name": "5,417,22",
                  "text": "5,418,8,277",
                  "type": "5,417,14"
                }
              },
              {
                "$type": "property",
                "name": "minHeight",
                "text": "The minimum value in pixels which this Component will set its height to.\n\n**Warning:** This will override any size management applied by layout managers.\n",
                "type": "Number",
                "src": {
                  "name": "3,374,26",
                  "text": "3,375,12,154",
                  "type": "3,374,18"
                }
              },
              {
                "$type": "property",
                "name": "minLength",
                "text": "Minimum input field length required\n",
                "type": "Number",
                "src": {
                  "name": "4,274,22",
                  "text": "4,275,8,36",
                  "type": "4,274,14"
                }
              },
              {
                "$type": "property",
                "name": "minLengthText",
                "text": "Error text to display if the **{@link #cfg!minLength #minLength}** validation fails.\n",
                "type": "String",
                "src": {
                  "name": "4,297,22",
                  "text": "4,298,8,85",
                  "type": "4,297,14"
                }
              },
              {
                "$type": "property",
                "name": "minText",
                "text": "The error text to display when the entered time is before {@link #cfg!minValue #minValue}.\n",
                "type": "String",
                "src": {
                  "name": "0,66,22",
                  "text": "0,67,8,77",
                  "type": "0,66,14"
                }
              },
              {
                "$type": "property",
                "name": "minValue",
                "text": "The minimum allowed time. Can be either a Javascript date object with a valid time value or a string time in a\nvalid format -- see {@link #cfg!format #format} and {@link #cfg!altFormats #altFormats}.\n",
                "type": "Date/String",
                "src": {
                  "name": "0,53,27",
                  "text": "0,54,8,172",
                  "type": "0,53,14"
                }
              },
              {
                "$type": "property",
                "name": "minWidth",
                "text": "The minimum value in pixels which this Component will set its width to.\n\n**Warning:** This will override any size management applied by layout managers.\n",
                "type": "Number",
                "src": {
                  "name": "3,382,26",
                  "text": "3,383,12,153",
                  "type": "3,382,18"
                }
              },
              {
                "$type": "property",
                "name": "modal",
                "optional": true,
                "text": "True to make the floated component modal and mask everything behind it when displayed, false to display it without\nrestricting access to other UI elements.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,17,24",
                  "text": "1,18,8,156",
                  "type": "1,17,14",
                  "value": "1,17,30"
                }
              },
              {
                "$type": "property",
                "name": "modelValidation",
                "text": "This config enables binding to your `{@link Ext.data.Model#cfg!validators Ext.data.Model#validators}`. This\nis only processed by form fields (e.g., `{@link Ext.form.field.Text}`) at present, but\nthis setting is inherited and so can be set on a parent container.\n\nWhen set to `true` by a component or not set by a component but inherited from\nan ancestor container, `{@link Ext.data.Validation}` records are used to automatically\nbind validation results for any form field to which a `{@link #cfg!value value}` is bound.\n\nWhile this config can be set arbitrarily high in the component hierarchy, doing\nso can create a lot overhead if most of your form fields do not actually rely on\n`validators` in your data model.\n\nUsing this setting for a form that is bound to an `{@link Ext.data.Model}` might look\nlike this:\n\n     {\n         xtype: 'panel',\n         modelValidation: true,\n         items: [{\n             xtype: 'textfield',\n             bind: '{theUser.firstName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.lastName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.phoneNumber}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.email}'\n         }]\n     }\n\nThe above is equivalent to the following manual binding of validation:\n\n     {\n         xtype: 'panel',\n         items: [{\n             xtype: 'textfield',\n             bind: {\n                 value:      '{theUser.firstName}'\n                 validation: '{theUser.validation.firstName}'\n             }\n         },{\n             xtype: 'textfield',\n             bind: {\n                 value:      '{theUser.lastName}'\n                 validation: '{theUser.validation.lastName}'\n             }\n         },{\n             xtype: 'textfield',\n             bind: {\n                 value:      '{theUser.phoneNumber}'\n                 validation: '{theUser.validation.phoneNumber}'\n             }\n         },{\n             xtype: 'textfield',\n             bind: {\n                 value:      '{theUser.email}'\n                 validation: '{theUser.validation.email}'\n             }\n         }]\n     }\n\nNotice that \"validation\" is a pseudo-association defined for all entities. See\n`{@link Ext.data.Model#method!getValidation Ext.data.Model#getValidation}` for further details.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,288,27",
                  "text": "3,289,12,2219",
                  "type": "3,288,18"
                }
              },
              {
                "$type": "property",
                "name": "msgTarget",
                "text": "The location where the error message text should display. Must be one of the following values:\n\n  - `qtip` Display a quick tip containing the message when the user hovers over the field.\n    This is the default.\n\n    **{@link Ext.tip.QuickTipManager#method!init Ext.tip.QuickTipManager#init} must have been called for this setting to work.**\n\n  - `title` Display the message in a default browser title attribute popup.\n  - `under` Add a block div beneath the field containing the error message.\n  - `side` Add an error icon to the right of the field, displaying the message in a popup on hover.\n  - `none` Don't display any error message. This might be useful if you are implementing custom error display.\n  - `[element id]` Add the error message directly to the innerHTML of the specified element.\n",
                "type": "String",
                "src": {
                  "name": "2,292,22",
                  "text": "2,293,8,763",
                  "type": "2,292,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link Ext.form.field.Tag} or {@link Ext.view.MultiSelector}\n",
                "deprecatedVersion": "5.1.0",
                "name": "multiSelect",
                "text": "If set to `true`, allows the combo field to hold more than one value at a time, and allows selecting multiple\nitems from the dropdown list. The combo's text field will show all selected values separated by the\n{@link #cfg!delimiter #delimiter}.\n",
                "type": "Boolean",
                "src": {
                  "deprecatedMessage": "5,292,8",
                  "deprecatedVersion": "5,292,8",
                  "name": "5,288,23",
                  "text": "5,289,8,230",
                  "type": "5,288,14"
                }
              },
              {
                "$type": "property",
                "name": "name",
                "text": "The name of the field. This is used as the parameter name when including the field value\nin a {@link Ext.form.Basic#method!submit Ext.form.Basic#submit}. If no name is configured, it falls back to the {@link #cfg!inputId #inputId}.\nTo prevent the field from being included in the form submit, set {@link #cfg!submitValue #submitValue} to false.\n",
                "type": "String",
                "src": {
                  "name": "8,96,22",
                  "text": "8,97,8,300",
                  "type": "8,96,14"
                }
              },
              {
                "$type": "property",
                "name": "openCls",
                "optional": true,
                "text": "A class to be added to the field's {@link #property!bodyEl #bodyEl} element when the picker is opened.\n",
                "type": "String",
                "value": "'x-pickerfield-open'",
                "src": {
                  "name": "9,62,23",
                  "text": "9,63,8,86",
                  "type": "9,62,14",
                  "value": "9,62,31"
                }
              },
              {
                "$type": "property",
                "name": "overCls",
                "optional": true,
                "since": "2.3.0",
                "text": "An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element,\nand removed when the mouse moves out. This can be useful for adding customized 'active' or 'hover' styles to the\ncomponent or any of its children using standard CSS rules.\n",
                "type": "String",
                "value": "''",
                "src": {
                  "name": "3,906,23",
                  "since": "3,911,15",
                  "text": "3,907,8,287",
                  "type": "3,906,14",
                  "value": "3,906,31"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link #scrollable} instead\n",
                "deprecatedVersion": "5.1.0",
                "name": "overflowX",
                "text": "Possible values are:\n\n - `'auto'` to enable automatic horizontal scrollbar (Style overflow-x: 'auto').\n - `'scroll'` to always enable horizontal scrollbar (Style overflow-x: 'scroll').\n\nThe default is overflow-x: 'hidden'. This should not be combined with {@link #cfg!autoScroll #autoScroll}.\n",
                "type": "String",
                "src": {
                  "deprecatedMessage": "3,922,8",
                  "deprecatedVersion": "3,922,8",
                  "name": "3,915,22",
                  "text": "3,916,8,277",
                  "type": "3,915,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link #scrollable} instead\n",
                "deprecatedVersion": "5.1.0",
                "name": "overflowY",
                "text": "Possible values are:\n\n - `'auto'` to enable automatic vertical scrollbar (Style overflow-y: 'auto').\n - `'scroll'` to always enable vertical scrollbar (Style overflow-y: 'scroll').\n\nThe default is overflow-y: 'hidden'. This should not be combined with {@link #cfg!autoScroll #autoScroll}.\n",
                "type": "String",
                "src": {
                  "deprecatedMessage": "3,933,8",
                  "deprecatedVersion": "3,933,8",
                  "name": "3,926,22",
                  "text": "3,927,8,273",
                  "type": "3,926,14"
                }
              },
              {
                "$type": "property",
                "name": "padding",
                "text": "Specifies the padding for this component. The padding can be a single numeric value to apply to all sides or it\ncan be a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).\n",
                "type": "Number/String",
                "src": {
                  "name": "3,937,29",
                  "text": "3,938,8,214",
                  "type": "3,937,14"
                }
              },
              {
                "$type": "property",
                "name": "pageSize",
                "text": "If greater than `0`, a {@link Ext.toolbar.Paging} is displayed in the footer of the dropdown list and the\n{@link #method!doQuery #doQuery} will execute with page start and {@link Ext.view.BoundList#cfg!pageSize Ext.view.BoundList#pageSize}\nparameters. Only applies when `{@link #cfg!queryMode #queryMode} = 'remote'`.\n",
                "type": "Number",
                "src": {
                  "name": "5,401,22",
                  "text": "5,402,8,276",
                  "type": "5,401,14"
                }
              },
              {
                "$type": "property",
                "name": "pickerAlign",
                "text": "The {@link Ext.util.Positionable#method!alignTo Ext.util.Positionable#alignTo} with which to align the picker. Defaults to \"tl-bl?\"\n",
                "type": "String",
                "src": {
                  "name": "9,50,22",
                  "text": "9,51,8,114",
                  "type": "9,50,14"
                }
              },
              {
                "$type": "property",
                "name": "pickerMaxHeight",
                "text": "The maximum height of the {@link Ext.picker.Time} dropdown.\n",
                "type": "Number",
                "src": {
                  "name": "0,140,22",
                  "text": "0,141,8,60",
                  "type": "0,140,14"
                }
              },
              {
                "$type": "property",
                "name": "pickerOffset",
                "text": "An offset [x,y] to use in addition to the {@link #cfg!pickerAlign #pickerAlign} when positioning the picker.\nDefaults to undefined.\n",
                "type": "Number[]",
                "src": {
                  "name": "9,56,24",
                  "text": "9,57,8,115",
                  "type": "9,56,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "For multiple selection use {@link Ext.form.field.Tag} or\n{@link Ext.view.MultiSelector}\n",
                "deprecatedVersion": "5.1.0",
                "name": "pinList",
                "optional": true,
                "text": "Has no effect if {@link #cfg!multiSelect #multiSelect} is `false`\n\nConfigure as `false` to automatically collapse the pick list after a selection is made.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "deprecatedMessage": "5,191,8",
                  "deprecatedVersion": "5,191,8",
                  "name": "5,187,24",
                  "text": "5,188,8,138",
                  "type": "5,187,14",
                  "value": "5,187,32"
                }
              },
              {
                "$type": "property",
                "name": "plugins",
                "since": "2.3.0",
                "text": "An array of plugins to be added to this component. Can also be just a single plugin instead of array.\n\nPlugins provide custom functionality for a component. The only requirement for\na valid plugin is that it contain an `init` method that accepts a reference of type Ext.Component. When a component\nis created, if any plugins are available, the component will call the init method on each plugin, passing a\nreference to itself. Each plugin can then call methods or respond to events on the component as needed to provide\nits functionality.\n\nPlugins can be added to component by either directly referencing the plugin instance:\n\n    plugins: [Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit: 1})],\n\nBy using config object with ptype:\n\n    plugins: {ptype: 'cellediting', clicksToEdit: 1},\n\nOr with just a ptype:\n\n    plugins: ['cellediting', 'gridviewdragdrop'],\n\nSee {@link Ext.enums.Plugin} for list of all ptypes.\n",
                "type": "Ext.plugin.Abstract[]/Ext.plugin.Abstract/Object[]/Object/Ext.enums.Plugin[]/Ext.enums.Plugin",
                "src": {
                  "name": "3,943,109",
                  "since": "3,966,15",
                  "text": "3,944,8,924",
                  "type": "3,943,14"
                }
              },
              {
                "$type": "property",
                "name": "preventMark",
                "text": "true to disable displaying any {@link #method!setActiveError #setActiveError} set on this object.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,279,23",
                  "text": "2,280,8,89",
                  "type": "2,279,14"
                }
              },
              {
                "$type": "property",
                "name": "publishes",
                "since": "5.0.0",
                "text": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found in a class\nconfig block. In these situations, you may utilize {@link #method!publishState #publishState} if the property has a\nsetter method.  Let's use {@link Ext.form.Labelable#method!setFieldLabel Ext.form.Labelable#setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n",
                "type": "String/String[]/Object",
                "src": {
                  "name": "7,100,42",
                  "since": "7,179,19",
                  "text": "7,101,12,2498",
                  "type": "7,100,18"
                }
              },
              {
                "$type": "property",
                "name": "queryCaching",
                "optional": true,
                "text": "When true, this prevents the combo from re-querying (either locally or remotely) when the current query\nis the same as the previous query.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "5,383,24",
                  "text": "5,384,8,139",
                  "type": "5,383,14",
                  "value": "5,383,37"
                }
              },
              {
                "$type": "property",
                "name": "queryDelay",
                "text": "The length of time in milliseconds to delay between the start of typing and sending the query to filter the\ndropdown list.\n\nDefaults to `500` if `{@link #cfg!queryMode #queryMode} = 'remote'` or `10` if `{@link #cfg!queryMode #queryMode} = 'local'`\n",
                "type": "Number",
                "src": {
                  "name": "5,409,22",
                  "text": "5,410,8,219",
                  "type": "5,409,14"
                }
              },
              {
                "$type": "property",
                "name": "queryMode",
                "text": "The mode in which the ComboBox uses the configured Store. Acceptable values are:\n\n  - **`'remote'`** :\n\n    In `queryMode: 'remote'`, the ComboBox loads its Store dynamically based upon user interaction.\n\n    This is typically used for \"autocomplete\" type inputs, and after the user finishes typing, the Store is {@link Ext.data.Store#method!load Ext.data.Store#method-load}ed.\n\n    A parameter containing the typed string is sent in the load request. The default parameter name for the input\n    string is `query`, but this can be configured using the {@link #cfg!queryParam #queryParam} config.\n\n    In `queryMode: 'remote'`, the Store may be configured with `{@link Ext.data.Store#cfg!remoteFilter Ext.data.Store#remoteFilter}:\n    true`, and further filters may be _programatically_ added to the Store which are then passed with every load\n    request which allows the server to further refine the returned dataset.\n\n    Typically, in an autocomplete situation, {@link #cfg!hideTrigger #hideTrigger} is configured `true` because it has no meaning for\n    autocomplete.\n\n  - **`'local'`** :\n\n    ComboBox loads local data\n\n        var combo = new Ext.form.field.ComboBox({\n            renderTo: document.body,\n            queryMode: 'local',\n            store: new Ext.data.ArrayStore({\n                id: 0,\n                fields: [\n                    'myId',  // numeric value is the key\n                    'displayText'\n                ],\n                data: [[1, 'item1'], [2, 'item2']]  // data is local\n            }),\n            valueField: 'myId',\n            displayField: 'displayText',\n            triggerAction: 'all'\n        });\n",
                "type": "String",
                "src": {
                  "name": "5,340,22",
                  "text": "5,341,8,1582",
                  "type": "5,340,14"
                }
              },
              {
                "$type": "property",
                "name": "queryParam",
                "text": "Name of the parameter used by the Store to pass the typed string when the ComboBox is configured with\n`{@link #cfg!queryMode #queryMode}: 'remote'`. If explicitly set to a falsy value it will not be sent.\n",
                "type": "String",
                "src": {
                  "name": "5,333,22",
                  "text": "5,334,8,190",
                  "type": "5,333,14"
                }
              },
              {
                "$type": "property",
                "name": "readOnly",
                "text": "`true` to prevent the user from changing the field, and hide all triggers.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,418,23",
                  "text": "4,419,8,75",
                  "type": "4,418,14"
                }
              },
              {
                "$type": "property",
                "name": "readOnlyCls",
                "text": "The CSS class applied to the component's main element when it is {@link #cfg!readOnly #readOnly}.\n",
                "type": "String",
                "src": {
                  "name": "8,209,22",
                  "text": "8,210,8,84",
                  "type": "8,209,14"
                }
              },
              {
                "$type": "property",
                "name": "reference",
                "text": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.container.Container#cfg!referenceHolder Ext.container.Container#referenceHolder}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n",
                "type": "String",
                "src": {
                  "name": "7,190,26",
                  "text": "7,191,12,477",
                  "type": "7,190,18"
                }
              },
              {
                "$type": "property",
                "name": "regex",
                "text": "A JavaScript RegExp object to be tested against the field value during validation.\nIf the test fails, the field will be marked invalid using\neither **{@link #cfg!regexText #regexText}** or **{@link #cfg!invalidText #invalidText}**.\n",
                "type": "RegExp",
                "src": {
                  "name": "4,352,22",
                  "text": "4,353,8,200",
                  "type": "4,352,14"
                }
              },
              {
                "$type": "property",
                "name": "regexText",
                "text": "The error text to display if **{@link #cfg!regex #regex}** is used and the test fails during validation\n",
                "type": "String",
                "src": {
                  "name": "4,359,22",
                  "text": "4,360,8,93",
                  "type": "4,359,14"
                }
              },
              {
                "$type": "property",
                "name": "region",
                "optional": true,
                "text": "Defines the region inside {@link Ext.layout.container.Border}.\n\nPossible values:\n\n- north - Positions component at top.\n- south - Positions component at bottom.\n- east - Positions component at right.\n- west - Positions component at left.\n- center - Positions component at the remaining space.\n  There **must** be a component with `region: \"center\"` in every border layout.\n",
                "type": "\"north\"/\"south\"/\"east\"/\"west\"/\"center\"",
                "value": "undefined",
                "src": {
                  "name": "3,970,55",
                  "text": "3,971,8,387",
                  "type": "3,970,14",
                  "value": "3,970,62"
                }
              },
              {
                "$type": "property",
                "name": "renderData",
                "text": "\nThe data used by {@link #cfg!renderTpl #renderTpl} in addition to the following property values of the component:\n\n- id\n- ui\n- uiCls\n- baseCls\n- componentCls\n- frame\n\nSee {@link #cfg!renderSelectors #renderSelectors} and {@link #cfg!childEls #cfg-childEls} for usage examples.\n",
                "type": "Object",
                "src": {
                  "name": "3,984,22",
                  "text": "3,985,8,228",
                  "type": "3,984,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use {@link #cfg-childEls} instead.\n",
                "deprecatedVersion": "5.0",
                "name": "renderSelectors",
                "text": "An object containing properties specifying CSS selectors which identify child elements\ncreated by the render process.\n\nAfter the Component's internal structure is rendered according to the {@link #cfg!renderTpl #renderTpl}, this object is iterated through,\nand the found Elements are added as properties to the Component using the `renderSelector` property name.\n\nFor example, a Component which renders a title and description into its element:\n\n     Ext.create('Ext.Component', {\n         renderTo: Ext.getBody(),\n         renderTpl: [\n             '<h1 class=\"title\">{title}</h1>',\n             '<p>{desc}</p>'\n         ],\n         renderData: {\n             title: \"Error\",\n             desc: \"Something went wrong\"\n         },\n         renderSelectors: {\n             titleEl: 'h1.title',\n             descEl: 'p'\n         },\n         listeners: {\n             afterrender: function(cmp){\n                 // After rendering the component will have a titleEl and descEl properties\n                 cmp.titleEl.setStyle({color: \"red\"});\n             }\n         }\n     });\n\nThe use of `{@link #cfg!renderSelectors renderSelectors}` is deprecated (for performance reasons). The above\ncode should be refactored into something like this:\n\n     Ext.create('Ext.Component', {\n         renderTo: Ext.getBody(),\n         renderTpl: [\n             '<h1 class=\"title\" id=\"{id}-titleEl\" data-ref=\"titleEl\">{title}</h1>',\n             '<p id=\"{id}-descEl\" data-ref=\"descEl\">{desc}</p>'\n         ],\n         renderData: {\n             title: \"Error\",\n             desc: \"Something went wrong\"\n         },\n         childEls: [\n             'titleEl',\n             'descEl'\n         ]\n     });\n\nTo use `{@link #cfg!childEls childEls}` yet retain the use of selectors (which remains as expensive as\n`{@link #cfg!renderSelectors renderSelectors}`):\n\n     Ext.create('Ext.Component', {\n         renderTo: Ext.getBody(),\n         renderTpl: [\n             '<h1 class=\"title\">{title}</h1>',\n             '<p>{desc}</p>'\n         ],\n         renderData: {\n             title: \"Error\",\n             desc: \"Something went wrong\"\n         },\n         childEls: {\n             titleEl: { selectNode: 'h1.title' },\n             descEl: { selectNode: 'p' }\n         }\n     });\n",
                "type": "Object",
                "src": {
                  "deprecatedMessage": "3,1068,8",
                  "deprecatedVersion": "3,1068,8",
                  "name": "3,999,22",
                  "text": "3,1000,8,2159",
                  "type": "3,999,14"
                }
              },
              {
                "$type": "property",
                "name": "renderTo",
                "since": "2.3.0",
                "text": "Specify the `{@link #cfg!id id}` of the element, a DOM element or an existing Element that this component will be rendered into.\n\n**Notes:**\n\nDo *not* use this option if the Component is to be a child item of a {@link Ext.container.Container}.\nIt is the responsibility of the {@link Ext.container.Container}'s\n{@link Ext.container.Container#cfg!layout Ext.container.Container#layout} to render and manage its child items.\n\nWhen using this config, a call to `render()` is not required.\n\nSee also: {@link #method!render #method-render}.\n",
                "type": "String/HTMLElement/Ext.dom.Element",
                "src": {
                  "name": "3,1072,50",
                  "since": "3,1085,15",
                  "text": "3,1073,8,505",
                  "type": "3,1072,14"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "renderTpl",
                "text": "An {@link Ext.XTemplate} used to create the internal structure inside this Component's encapsulating\n{@link #method!getEl #getEl}.\n\nYou do not normally need to specify this. For the base classes {@link Ext.Component} and\n{@link Ext.container.Container}, this defaults to **`{@link null}`** which means that they will be initially rendered\nwith no internal structure; they render their {@link #method!getEl #getEl} empty. The more specialized\nclasses with complex DOM structures provide their own template definitions.\n\nThis is intended to allow the developer to create application-specific utility Components with customized\ninternal structure.\n\nUpon rendering, any created child elements may be automatically imported into object properties using the\n{@link #cfg!renderSelectors #renderSelectors} and {@link #cfg!childEls #cfg-childEls} options.\n",
                "type": "Ext.XTemplate/String/String[]",
                "src": {
                  "access": "3,1103,8",
                  "name": "3,1089,45",
                  "text": "3,1090,8,802",
                  "type": "3,1089,14"
                }
              },
              {
                "$type": "property",
                "name": "repeatTriggerClick",
                "text": "`true` to attach a {@link Ext.util.ClickRepeater} to the trigger(s).\nClick repeating behavior can also be configured on the individual {@link #cfg!triggers #triggers} config.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,409,23",
                  "text": "4,410,8,271",
                  "type": "4,409,14"
                }
              },
              {
                "$type": "property",
                "name": "requiredCls",
                "optional": true,
                "text": "The CSS class to apply to a required field, i.e. a field where **{@link #cfg!allowBlank #allowBlank}** is false.\n",
                "type": "String",
                "value": "'x-form-required-field'",
                "src": {
                  "name": "4,391,23",
                  "text": "4,392,8,97",
                  "type": "4,391,14",
                  "value": "4,391,35"
                }
              },
              {
                "$type": "property",
                "name": "resizable",
                "text": "Specify as `true` to apply a {@link Ext.resizer.Resizer} to this Component after rendering.\n\nMay also be specified as a config object to be passed to the constructor of {@link Ext.resizer.Resizer}\nto override any defaults. By default the Component passes its minimum and maximum size, and uses\n`{@link Ext.resizer.Resizer#cfg!dynamic Ext.resizer.Resizer#dynamic}: false`\n",
                "type": "Boolean/Object",
                "src": {
                  "name": "3,1114,30",
                  "text": "3,1115,8,355",
                  "type": "3,1114,14"
                }
              },
              {
                "$type": "property",
                "name": "resizeHandles",
                "text": "A valid {@link Ext.resizer.Resizer} handles config string. Only applies when resizable = true.\n",
                "type": "String",
                "src": {
                  "name": "3,1123,22",
                  "text": "3,1124,8,95",
                  "type": "3,1123,14"
                }
              },
              {
                "$type": "property",
                "name": "saveDelay",
                "text": "A buffer to be applied if many state events are fired within a short period.\n",
                "type": "Number",
                "src": {
                  "name": "13,88,22",
                  "text": "13,89,8,77",
                  "type": "13,88,14"
                }
              },
              {
                "$type": "property",
                "name": "scrollable",
                "text": "Configuration options to make this Component scrollable. Acceptable values are:\n\n- `true` to enable auto scrolling.\n- `false` (or `{@link null}`) to disable scrolling - this is the default.\n- `x` or `horizontal` to enable horizontal scrolling only\n- `y` or `vertical` to enable vertical scrolling only\n\nAlso accepts a configuration object for a `{@link Ext.scroll.Scroller}` if\nif advanced configuration is needed.\n\nThe getter for this config returns the {@link Ext.scroll.Scroller}\ninstance.  You can use the Scroller API to read or manipulate the scroll position:\n\n    // scrolls the component to 5 on the x axis and 10 on the y axis\n    component.getScrollable().scrollTo(5, 10);\n",
                "type": "Boolean/String/Object",
                "src": {
                  "name": "3,390,41",
                  "text": "3,391,12,684",
                  "type": "3,390,18"
                }
              },
              {
                "$type": "property",
                "name": "selection",
                "text": "The selected model. Typically used with {@link #cfg!bind #bind}.\n",
                "type": "Ext.data.Model",
                "src": {
                  "name": "5,120,34",
                  "text": "5,121,12,63",
                  "type": "5,120,18"
                }
              },
              {
                "$type": "property",
                "name": "selectOnFocus",
                "optional": true,
                "text": "`true` to automatically select any existing field text when the field receives input\nfocus. Only applies when {@link #cfg!editable #editable} = true\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "4,312,24",
                  "text": "4,313,8,144",
                  "type": "4,312,14",
                  "value": "4,312,38"
                }
              },
              {
                "$type": "property",
                "name": "selectOnTab",
                "text": "Whether the Tab key should select the currently highlighted item.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,146,23",
                  "text": "0,147,8,66",
                  "type": "0,146,14"
                }
              },
              {
                "$type": "property",
                "name": "session",
                "optional": true,
                "text": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n",
                "type": "Boolean/Object/Ext.data.Session",
                "value": "null",
                "src": {
                  "name": "7,204,52",
                  "text": "7,205,12,531",
                  "type": "7,204,18",
                  "value": "7,204,60"
                }
              },
              {
                "$type": "property",
                "name": "shadow",
                "text": "Specifies whether the floating component should be given a shadow. Set to true to automatically create an\n{@link Ext.dom.Shadow Ext.Shadow}, or a string indicating the shadow's display {@link Ext.dom.Shadow#cfg!mode Ext.Shadow#mode}. Set to false to\ndisable the shadow.\n",
                "type": "String/Boolean",
                "src": {
                  "name": "1,23,30",
                  "text": "1,24,8,231",
                  "type": "1,23,14"
                }
              },
              {
                "$type": "property",
                "name": "shadowOffset",
                "text": "Number of pixels to offset the shadow.\n",
                "type": "Number",
                "src": {
                  "name": "1,52,22",
                  "text": "1,53,8,39",
                  "type": "1,52,14"
                }
              },
              {
                "$type": "property",
                "name": "shim",
                "text": "`true` to enable an iframe shim for this Component to keep\nwindowed objects from showing through.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,57,23",
                  "text": "1,57,28,59:1,58,8,39",
                  "type": "1,57,14"
                }
              },
              {
                "$type": "property",
                "localDoc": "##Non-Panel Components\n\nThe shrinkWrap config is a class-level config and should be used when defining a\nsubclass.\nIt is not intended to be set as a config on instances of a given component.\n\nFor non-Panel components, shrinkWrap is a descriptive config only.  It should be\nset when defining your own custom class including the DOM elements used to\nconstruct the component.  The shrinkWrap property does not itself apply styling on\nthe component elements.  Rather, it should describe the CSS styling you've applied\nto your custom component (_refer to the numeric matrix above_).\n\nWhen a component is owned by a container the layout of that container will inspect\nthe component's shrinkWrap property during layout.  The layout then uses the\ncontent-wrapping policy described by shrinkWrap to correctly size and position the\ncontainer's child items.\n",
                "name": "shrinkWrap",
                "optional": true,
                "text": "\nThe possible values for shrinkWrap are:\n\n  - 0 (or `false`): Neither width nor height depend on content.\n  - 1: Width depends on content (shrink wraps), but height does not.\n  - 2: Height depends on content (shrink wraps), but width does not.\n  - 3 (or `true`): Both width and height depend on content (shrink wrap).\n\nIn CSS terms, shrink-wrap width is analogous to an inline-block element as opposed\nto a block-level element.\n",
                "type": "Boolean/Number",
                "value": "2",
                "src": {
                  "localDoc": "3,1141,18",
                  "name": "3,1129,31",
                  "text": "3,1130,8,429",
                  "type": "3,1129,14",
                  "value": "3,1129,42"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "{@link #width} instead.\n",
                "deprecatedVersion": "use",
                "name": "size",
                "text": "An initial value for the 'size' attribute on the text input element. This is only\nused if the field has no configured {@link #cfg!width #width} and is not given a width by its\ncontainer's layout. Defaults to 20.\n",
                "type": "Number",
                "src": {
                  "deprecatedMessage": "4,203,8",
                  "deprecatedVersion": "4,203,8",
                  "name": "4,199,22",
                  "text": "4,200,8,201",
                  "type": "4,199,14"
                }
              },
              {
                "$type": "property",
                "name": "snapToIncrement",
                "optional": true,
                "text": "Specify as `true` to enforce that only values on the {@link #cfg!increment #increment} boundary are accepted.\n\nTyped values will be coerced to the nearest {@link #cfg!increment #increment} point on blur.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,152,24",
                  "text": "0,153,8,174",
                  "type": "0,152,14",
                  "value": "0,152,40"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.state.Stateful#cfg-stateEvents",
                "localDoc": "By default the following stateEvents are added:\n\n - {@link #event-resize} - _(added by Ext.Component)_\n - {@link #event-change}\n",
                "name": "stateEvents",
                "src": {
                  "inheritdoc": "4,424,8",
                  "localDoc": "4,425,18",
                  "name": "4,423,13"
                }
              },
              {
                "$type": "property",
                "name": "stateful",
                "text": "A flag which causes the object to attempt to restore the state of\ninternal properties from a saved state on startup. The object must have\na {@link #cfg!stateId #stateId} for state to be managed.\n\nAuto-generated ids are not guaranteed to be stable across page loads and\ncannot be relied upon to save and restore the same state for a object.\n\nFor state saving to work, the state manager's provider must have been\nset to an implementation of {@link Ext.state.Provider} which overrides the\n{@link Ext.state.Provider#method!set Ext.state.Provider#set} and {@link Ext.state.Provider#method!get Ext.state.Provider#get}\nmethods to save and recall name/value pairs. A built-in implementation,\n{@link Ext.state.CookieProvider} is available.\n\nTo set the state provider for the current page:\n\n   Ext.state.Manager.setProvider(new Ext.state.CookieProvider({\n       expires: new Date(new Date().getTime()+(1000*60*60*24*7)), //7 days from now\n   }));\n\nA stateful object attempts to save state when one of the events\nlisted in the {@link #cfg!stateEvents #stateEvents} configuration fires.\n\nTo save state, a stateful object first serializes its state by\ncalling *{@link #method!getState #getState}*.\n\nThe Component base class implements {@link #method!getState #getState} to save its width and height within the state\nonly if they were initially configured, and have changed from the configured value.\n\nThe Panel class saves its collapsed state in addition to that.\n\nThe Grid class saves its column state and store state (sorters and filters and grouper) in addition to its superclass state.\n\nIf there is more application state to be save, the developer must provide an implementation which\nfirst calls the superclass method to inherit the above behaviour, and then injects new properties\ninto the returned object.\n\nThe value yielded by getState is passed to {@link Ext.state.Manager#method!set Ext.state.Manager#set}\nwhich uses the configured {@link Ext.state.Provider} to save the object\nkeyed by the {@link #cfg!stateId #stateId}.\n\nDuring construction, a stateful object attempts to *restore* its state by calling\n{@link Ext.state.Manager#method!get Ext.state.Manager#get} passing the {@link #cfg!stateId #stateId}\n\nThe resulting object is passed to {@link #method!applyState #applyState}*. The default implementation of\n{@link #method!applyState #applyState} simply copies properties into the object, but a developer may\noverride this to support restoration of more complex application state.\n\nYou can perform extra processing on state save and restore by attaching\nhandlers to the {@link #event!beforestaterestore #beforestaterestore}, {@link #event!staterestore #staterestore},\n{@link #event!beforestatesave #beforestatesave} and {@link #event!statesave #statesave} events.\n",
                "type": "Boolean",
                "src": {
                  "name": "13,15,23",
                  "text": "13,16,8,2441",
                  "type": "13,15,14"
                }
              },
              {
                "$type": "property",
                "name": "stateId",
                "text": "The unique id for this object to use for state management purposes.\n\nSee {@link #cfg!stateful #stateful} for an explanation of saving and restoring state.\n",
                "type": "String",
                "src": {
                  "name": "13,70,22",
                  "text": "13,71,8,141",
                  "type": "13,70,14"
                }
              },
              {
                "$type": "property",
                "name": "store",
                "text": "(required)\nThe data source to which the combo / tagfield is bound. Acceptable values for this\nproperty are:\n\n  - **any {@link Ext.data.Store} class / subclass**\n  - **an {@link Ext.data.Store#cfg!storeId Ext.data.Store#storeId}**\n  - **an Array** : Arrays will be converted to a {@link Ext.data.Store} internally,\n    automatically generating {@link Ext.data.field.Field#cfg!name Ext.data.Field#name} to work with all\n    data components.\n\n    - **1-dimensional array** : (e.g., `['Foo','Bar']`)\n\n      A 1-dimensional array will automatically be expanded (each array item will be\n      used for both the combo {@link #cfg!valueField #valueField} and {@link #cfg!displayField #displayField})\n\n    - **2-dimensional array** : (e.g., `[['f','Foo'],['b','Bar']]`)\n\n      For a multi-dimensional array, the value in index 0 of each item will be assumed\n      to be the combo {@link #cfg!valueField #valueField}, while the value at index 1 is assumed to be\n      the combo {@link #cfg!displayField #displayField}.\n  - **a {@link Ext.data.Store} config object**.  When passing a config you can\n    specify the store type by alias.  Passing a config object with a store type will\n    dynamically create a new store of that type when the combo / tagfield is\n    instantiated.\n\n    Ext.define('MyApp.store.States', {\n        extend: 'Ext.data.Store',\n        alias: 'store.states',\n        fields: ['name']\n    });\n\n    Ext.create({\n        xtype: 'combobox',\n        renderTo: document.body,\n        store: {\n            type: 'states',\n            data: [{\n                name: 'California'\n            }]\n        },\n        queryMode: 'local',\n        displayField: 'name',\n        valueField: 'name'\n    });\n\nSee also {@link #cfg!queryMode #queryMode}.\n",
                "type": "Ext.data.Store/String/Array/Object",
                "src": {
                  "name": "5,239,50",
                  "text": "5,239,56,11:5,240,8,1636",
                  "type": "5,239,14"
                }
              },
              {
                "$type": "property",
                "name": "stripCharsRe",
                "text": "A JavaScript RegExp object used to strip unwanted content from the value\nduring input. If `{@link #cfg!stripCharsRe stripCharsRe}` is specified,\nevery *character sequence* matching `{@link #cfg!stripCharsRe stripCharsRe}` will be removed.\n",
                "type": "RegExp",
                "src": {
                  "name": "4,192,22",
                  "text": "4,193,8,187",
                  "type": "4,192,14"
                }
              },
              {
                "$type": "property",
                "name": "style",
                "since": "1.1.0",
                "text": "A custom style specification to be applied to this component's Element. Should be a valid argument to\n{@link Ext.dom.Element#method!applyStyles Ext.dom.Element#applyStyles}.\n\n    new Ext.panel.Panel({\n        title: 'Some Title',\n        renderTo: Ext.getBody(),\n        width: 400, height: 300,\n        layout: 'form',\n        items: [{\n            xtype: 'textarea',\n            style: {\n                width: '95%',\n                marginBottom: '10px'\n            }\n        },\n        new Ext.button.Button({\n            text: 'Send',\n            minWidth: '100',\n            style: {\n                marginBottom: '10px'\n            }\n        })\n        ]\n    });\n",
                "type": "String/Object",
                "src": {
                  "name": "3,1169,29",
                  "since": "3,1195,15",
                  "text": "3,1170,8,636",
                  "type": "3,1169,14"
                }
              },
              {
                "$type": "property",
                "name": "submitFormat",
                "optional": true,
                "text": "The date format string which will be submitted to the server. The format must be valid according to\n{@link Ext.Date#method!parse Ext.Date#parse}.\n\nDefaults to {@link #cfg!format #format}.\n",
                "type": "String",
                "value": "undefined",
                "src": {
                  "name": "0,101,23",
                  "text": "0,102,8,154",
                  "type": "0,101,14",
                  "value": "0,101,36"
                }
              },
              {
                "$type": "property",
                "name": "submitValue",
                "text": "Setting this to false will prevent the field from being {@link Ext.form.Basic#method!submit Ext.form.Basic#submit} even when it is\nnot disabled.\n",
                "type": "Boolean",
                "src": {
                  "name": "14,66,23",
                  "text": "14,67,8,126",
                  "type": "14,66,14"
                }
              },
              {
                "$type": "property",
                "name": "tabIndex",
                "text": "\nSets a DOM tabIndex for this field. tabIndex may be set to `-1` in order to remove\nthe field from the tab rotation.\n\n**Note:** tabIndex only applies to fields that are rendered.  It does not effect\nfields built via applyTo\n",
                "type": "Number",
                "src": {
                  "name": "8,124,22",
                  "text": "8,125,8,224",
                  "type": "8,124,14"
                }
              },
              {
                "$type": "property",
                "name": "toFrontOnShow",
                "text": "True to automatically call {@link #method!toFront #toFront} when the {@link #method!show #method-show} method is called on an already visible,\nfloating component.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1199,23",
                  "text": "3,1200,8,134",
                  "type": "3,1199,14"
                }
              },
              {
                "$type": "property",
                "name": "tpl",
                "since": "3.4.0",
                "text": "An {@link Ext.Template}, {@link Ext.XTemplate} or an array of strings to form an Ext.XTemplate. Used in\nconjunction with the `{@link #cfg!data #data}` and `{@link #cfg!tplWriteMode #tplWriteMode}` configurations.\n",
                "type": "Ext.XTemplate/Ext.Template/String/String[]",
                "src": {
                  "name": "3,1206,58",
                  "since": "3,1210,15",
                  "text": "3,1207,8,186",
                  "type": "3,1206,14"
                }
              },
              {
                "$type": "property",
                "name": "tplWriteMode",
                "since": "3.4.0",
                "text": "The Ext.(X)Template method to use when updating the content area of the Component.\nSee `{@link Ext.XTemplate#method!overwrite Ext.XTemplate#overwrite}` for information on default mode.\n",
                "type": "String",
                "src": {
                  "name": "3,1223,22",
                  "since": "3,1227,15",
                  "text": "3,1224,8,155",
                  "type": "3,1223,14"
                }
              },
              {
                "$type": "property",
                "name": "transform",
                "text": "The id, DOM node or {@link Ext.dom.Element} of an existing HTML `<select>` element to convert into a ComboBox. The\ntarget select's options will be used to build the options in the ComboBox dropdown; a configured {@link #cfg!store #store}\nwill take precedence over this.\n",
                "type": "String/HTMLElement/Ext.dom.Element",
                "src": {
                  "name": "5,534,50",
                  "text": "5,535,8,259",
                  "type": "5,534,14"
                }
              },
              {
                "$type": "property",
                "name": "transformInPlace",
                "text": "`true` to automatically render this combo box in place of the select element that is being\n{@link #cfg!transform #transform}. If `false`, this combo will be rendered using the normal rendering,\neither as part of a layout, or using {@link #cfg!renderTo #renderTo} or {@link #method!render #method-render}.\n",
                "type": "Boolean",
                "src": {
                  "name": "5,541,23",
                  "text": "5,542,8,273",
                  "type": "5,541,14"
                }
              },
              {
                "$type": "property",
                "name": "triggerAction",
                "text": "The action to execute when the trigger is clicked.\n\n  - **`'all'`** :\n\n    {@link #method!doQuery #doQuery} specified by the `{@link #cfg!allQuery #allQuery}` config option\n\n  - **`'last'`** :\n\n    {@link #method!doQuery #doQuery} using the `{@link #property!lastQuery #lastQuery}`.\n\n  - **`'query'`** :\n\n    {@link #method!doQuery #doQuery} using the {@link Ext.form.field.Base#method!getRawValue Ext.form.field.Base#getRawValue}.\n\nSee also `{@link #cfg!queryParam #queryParam}`.\n",
                "type": "String",
                "src": {
                  "name": "5,307,22",
                  "text": "5,308,8,413",
                  "type": "5,307,14"
                }
              },
              {
                "$type": "property",
                "name": "triggerCls",
                "optional": true,
                "text": "An additional CSS class used to style the trigger button. The trigger will always get the {@link Ext.form.trigger.Trigger#property!baseCls Ext.form.trigger.Trigger#baseCls}\nby default and triggerCls will be **appended** if specified.\n",
                "type": "String",
                "value": "'x-form-time-trigger'",
                "src": {
                  "name": "0,46,23",
                  "text": "0,47,8,192",
                  "type": "0,46,14",
                  "value": "0,46,34"
                }
              },
              {
                "$type": "property",
                "name": "triggers",
                "text": "{@link Ext.form.trigger.Trigger} to use in this field.  The keys in\nthis object are unique identifiers for the triggers. The values in this object\nare {@link Ext.form.trigger.Trigger} configuration objects.\n\n    Ext.create('Ext.form.field.Text', {\n        renderTo: document.body,\n        fieldLabel: 'My Custom Field',\n        triggers: {\n            foo: {\n                cls: 'my-foo-trigger',\n                handler: function() {\n                    console.log('foo trigger clicked');\n                }\n            },\n            bar: {\n                cls: 'my-bar-trigger',\n                handler: function() {\n                    console.log('bar trigger clicked');\n                }\n            }\n        }\n    });\n\nThe weight value may be a negative value in order to position custom triggers\nahead of default triggers like that of ComboBox.\n\n    Ext.create('Ext.form.field.ComboBox', {\n        renderTo: Ext.getBody(),\n        fieldLabel: 'My Custom Field',\n        triggers: {\n            foo: {\n                cls: 'my-foo-trigger',\n                weight: -2, // negative to place before default triggers\n                handler: function() {\n                    console.log('foo trigger clicked');\n                }\n            },\n            bar: {\n                cls: 'my-bar-trigger',\n                weight: -1,\n                handler: function() {\n                    console.log('bar trigger clicked');\n                }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "4,125,26",
                  "text": "4,126,12,1497",
                  "type": "4,125,18"
                }
              },
              {
                "$type": "property",
                "name": "triggerWrapCls",
                "text": "The CSS class that is added to the div wrapping the input element and trigger button(s).\n",
                "type": "String",
                "src": {
                  "name": "4,435,0",
                  "text": "4,433,8,89",
                  "type": "4,432,14"
                }
              },
              {
                "$type": "property",
                "name": "twoWayBindable",
                "text": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `{@link #cfg!value value}` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes #publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n",
                "type": "String/String[]/Object",
                "src": {
                  "name": "7,239,42",
                  "text": "7,240,12,402",
                  "type": "7,239,18"
                }
              },
              {
                "$type": "property",
                "name": "typeAhead",
                "text": "`true` to populate and autoselect the remainder of the text being typed after a configurable delay\n({@link #cfg!typeAheadDelay #typeAheadDelay}) if it matches a known value.\n",
                "type": "Boolean",
                "src": {
                  "name": "5,446,23",
                  "text": "5,447,8,154",
                  "type": "5,446,14"
                }
              },
              {
                "$type": "property",
                "name": "typeAheadDelay",
                "text": "The length of time in milliseconds to wait until the typeahead text is displayed if `{@link #cfg!typeAhead #typeAhead} = true`\n",
                "type": "Number",
                "src": {
                  "name": "5,453,22",
                  "text": "5,454,8,112",
                  "type": "5,453,14"
                }
              },
              {
                "$type": "property",
                "name": "ui",
                "text": "A UI style for a component.\n",
                "type": "String",
                "src": {
                  "name": "3,1232,22",
                  "text": "3,1233,8,28",
                  "type": "3,1232,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "uiCls",
                "text": "An array of of `classNames` which are currently applied to this component.\n",
                "type": "String[]",
                "src": {
                  "access": "3,1240,8",
                  "name": "3,1238,24",
                  "text": "3,1239,8,75",
                  "type": "3,1238,14"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "name": "userCls",
                "text": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n",
                "type": "String/String[]",
                "src": {
                  "accessor": "3,1257,8",
                  "name": "3,1245,31",
                  "text": "3,1246,8,277",
                  "type": "3,1245,14"
                }
              },
              {
                "$type": "property",
                "name": "validateBlank",
                "optional": true,
                "text": "Specify as `true` to modify the behaviour of {@link #cfg!allowBlank #allowBlank} so that blank values are not passed as valid, but are subject to any configure {@link #cfg!vtype #vtype} validation.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "4,260,24",
                  "text": "4,261,8,171",
                  "type": "4,260,14",
                  "value": "4,260,38"
                }
              },
              {
                "$type": "property",
                "name": "validateOnBlur",
                "text": "Whether the field should validate when it loses focus. This will cause fields to be validated\nas the user steps through the fields in the form regardless of whether they are making changes to those fields\nalong the way. See also {@link #cfg!validateOnChange #validateOnChange}.\n",
                "type": "Boolean",
                "src": {
                  "name": "8,221,23",
                  "text": "8,222,8,256",
                  "type": "8,221,14"
                }
              },
              {
                "$type": "property",
                "name": "validateOnChange",
                "text": "Specifies whether this field should be validated immediately whenever a change in its value is detected.\nIf the validation results in a change in the field's validity, a {@link #event!validitychange #validitychange} event will be\nfired. This allows the field to show feedback about the validity of its contents immediately as the user is\ntyping.\n\nWhen set to false, feedback will not be immediate. However the form will still be validated before submitting if\nthe clientValidation option to {@link Ext.form.Basic#method!doAction Ext.form.Basic#doAction} is enabled, or if the field or form are validated\nmanually.\n\nSee also {@link Ext.form.field.Base#cfg!checkChangeEvents Ext.form.field.Base#checkChangeEvents} for controlling how changes to the field's value are\ndetected.\n",
                "type": "Boolean",
                "src": {
                  "name": "14,73,23",
                  "text": "14,74,8,680",
                  "type": "14,73,14"
                }
              },
              {
                "$type": "property",
                "name": "validation",
                "text": "This property, when a `{@link String}`, contributes its value to the error state of this\ninstance as reported by `{@link #method!getErrors getErrors}`.\n",
                "type": "Boolean/String",
                "src": {
                  "name": "14,30,34",
                  "text": "14,31,12,118",
                  "type": "14,30,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "validationField",
                "text": "When binding is used with a model, this maps to the underlying {@link Ext.data.field.Field} if\nit is available. This can be used to validate the value against the model field without needing\nto push the value back into the model.\n",
                "type": "Ext.data.field.Field",
                "src": {
                  "access": "14,42,12",
                  "name": "14,37,34",
                  "text": "14,38,12,231",
                  "type": "14,37,18"
                }
              },
              {
                "$type": "property",
                "name": "validator",
                "text": "A custom validation function to be called during field validation ({@link #method!getErrors #getErrors}).\nIf specified, this function will be called first, allowing the developer to override the default validation\nprocess.\n\n    Ext.create('Ext.form.field.Text', {\n        renderTo: document.body,\n        name: 'phone',\n        fieldLabel: 'Phone Number',\n        validator: function (val) {\n            // remove non-numeric characters\n            var tn = val.replace(/[^0-9]/g,''),\n                errMsg = \"Must be a 10 digit telephone number\";\n            // if the numeric value is not 10 digits return an error message\n            return (tn.length === 10) ? true : errMsg;\n        }\n    });\n",
                "type": "Function",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The current field value\n",
                    "type": "Object",
                    "src": {
                      "name": "4,344,24",
                      "text": "4,344,30,24",
                      "type": "4,344,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "response\n\n - True if the value is valid\n - An error message if the value is invalid\n",
                    "type": "Boolean/String",
                    "src": {
                      "text": "4,345,33,9:4,346,8,75",
                      "type": "4,345,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,326,24",
                  "text": "4,327,8,682",
                  "type": "4,326,14"
                }
              },
              {
                "$type": "property",
                "name": "value",
                "text": "A value to initialize this field with.\n",
                "type": "Object",
                "src": {
                  "name": "14,48,22",
                  "text": "14,49,8,39",
                  "type": "14,48,14"
                }
              },
              {
                "$type": "property",
                "name": "valueField",
                "text": "(required)\nThe underlying {@link Ext.data.field.Field#cfg!name Ext.data.Field#name} to bind to this ComboBox.\n\n**Note**: use of a `{@link #cfg!valueField valueField}` requires the user to make a selection in order for a value to be mapped. See also\n`{@link #cfg!displayField #displayField}`.\n\nDefaults to match the value of the {@link #cfg!displayField #displayField} config.\n",
                "type": "String",
                "src": {
                  "name": "5,297,22",
                  "text": "5,297,33,11:5,298,8,291",
                  "type": "5,297,14"
                }
              },
              {
                "$type": "property",
                "name": "valueNotFoundText",
                "optional": true,
                "text": "When using a name/value combo, if the value passed to setValue is not found in the store, valueNotFoundText will\nbe displayed as the field text if defined. If this default text is used, it means there\nis no value set and no validation will occur on this field.\n",
                "type": "String",
                "src": {
                  "name": "5,126,27",
                  "text": "5,127,12,261",
                  "type": "5,126,18"
                }
              },
              {
                "$type": "property",
                "inheritdoc": true,
                "name": "valuePublishEvent",
                "src": {
                  "inheritdoc": "0,161,8",
                  "name": "0,163,0"
                }
              },
              {
                "$type": "property",
                "name": "viewModel",
                "text": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n",
                "type": "String/Object/Ext.app.ViewModel",
                "src": {
                  "name": "7,258,51",
                  "text": "7,259,12,690",
                  "type": "7,258,18"
                }
              },
              {
                "$type": "property",
                "name": "vtype",
                "text": "A validation type name as defined in {@link Ext.form.field.VTypes}\n",
                "type": "String",
                "src": {
                  "name": "4,235,22",
                  "text": "4,236,8,67",
                  "type": "4,235,14"
                }
              },
              {
                "$type": "property",
                "name": "vtypeText",
                "text": "A custom error message to display in place of the default message provided for the **`{@link #cfg!vtype #vtype}`** currently\nset for this field. **Note**: only applies if **`{@link #cfg!vtype #vtype}`** is set, else ignored.\n",
                "type": "String",
                "src": {
                  "name": "4,186,22",
                  "text": "4,187,8,203",
                  "type": "4,186,14"
                }
              },
              {
                "$type": "property",
                "name": "weight",
                "optional": true,
                "text": "A value to control how Components are laid out in a {@link Ext.layout.container.Border} layout or as docked items.\n\nIn a Border layout, this can control how the regions (not the center) region lay out if the west or east take full height\nor if the north or south region take full width. Also look at the {@link Ext.layout.container.Border#cfg!regionWeights Ext.layout.container.Border#regionWeights} on the Border layout. An example to show how you can\ntake control of this is:\n\n    Ext.create('Ext.container.Viewport', {\n        layout      : 'border',\n        defaultType : 'panel',\n        items       : [\n            {\n                region : 'north',\n                title  : 'North',\n                height : 100\n            },\n            {\n                region : 'south',\n                title  : 'South',\n                height : 100,\n                weight : -25\n            },\n            {\n                region : 'west',\n                title  : 'West',\n                width  : 200,\n                weight : 15\n            },\n            {\n                region : 'east',\n                title  : 'East',\n                width  : 200\n            },\n            {\n                region : 'center',\n                title  : 'center'\n            }\n        ]\n    });\n\nIf docked items, the weight will order how the items are laid out. Here is an example to put a {@link Ext.toolbar.Toolbar} above\na {@link Ext.panel.Panel}'s header:\n\n    Ext.create('Ext.panel.Panel', {\n        renderTo    : document.body,\n        width       : 300,\n        height      : 300,\n        title       : 'Panel',\n        html        : 'Panel Body',\n        dockedItems : [\n            {\n                xtype : 'toolbar',\n                items : [\n                    {\n                        text : 'Save'\n                    }\n                ]\n            },\n            {\n                xtype  : 'toolbar',\n                weight : -10,\n                items  : [\n                    {\n                        text : 'Remove'\n                    }\n                ]\n            }\n        ]\n    });\n",
                "type": "Number",
                "src": {
                  "name": "3,1262,23",
                  "text": "3,1263,8,2060",
                  "type": "3,1262,14"
                }
              },
              {
                "$type": "property",
                "name": "width",
                "text": "The width of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.\n",
                "type": "Number/String",
                "src": {
                  "name": "3,1335,29",
                  "text": "3,1336,8,148",
                  "type": "3,1335,14"
                }
              },
              {
                "$type": "property",
                "name": "xtype",
                "since": "2.3.0",
                "text": "**Note:** Only applies to {@link Ext.Component} derived classes when used as\na config in {@link Ext#method!define Ext#define}.\n\nThis property provides a shorter alternative to creating objects than using a full\nclass name. Using `{@link #cfg!xtype xtype}` is the most common way to define component instances,\nespecially in a container. For example, the items in a form containing text fields\ncould be created explicitly like so:\n\n     items: [\n         Ext.create('Ext.form.field.Text', {\n             fieldLabel: 'Foo'\n         }),\n         Ext.create('Ext.form.field.Text', {\n             fieldLabel: 'Bar'\n         }),\n         Ext.create('Ext.form.field.Number', {\n             fieldLabel: 'Num'\n         })\n     ]\n\nBut by using `{@link #cfg!xtype xtype}`, the above becomes:\n\n     items: [\n         {\n             xtype: 'textfield',\n             fieldLabel: 'Foo'\n         },\n         {\n             xtype: 'textfield',\n             fieldLabel: 'Bar'\n         },\n         {\n             xtype: 'numberfield',\n             fieldLabel: 'Num'\n         }\n     ]\n\nWhen the `{@link #cfg!xtype xtype}` is common to many items, {@link Ext.container.Container#cfg!defaultType Ext.container.Container#defaultType}\nis another way to specify the `{@link #cfg!xtype xtype}` for all items that don't have an explicit `{@link #cfg!xtype xtype}`:\n\n     defaultType: 'textfield',\n     items: [\n         { fieldLabel: 'Foo' },\n         { fieldLabel: 'Bar' },\n         { fieldLabel: 'Num', xtype: 'numberfield' }\n     ]\n\nEach member of the `items` array is now just a \"configuration object\". These objects\nare used to create and configure component instances. A configuration object can be\nmanually used to instantiate a component using {@link Ext#method!widget Ext#widget}:\n\n     var text1 = Ext.create('Ext.form.field.Text', {\n         fieldLabel: 'Foo'\n     });\n\n     // or alternatively:\n\n     var text1 = Ext.widget({\n         xtype: 'textfield',\n         fieldLabel: 'Foo'\n     });\n\nThis conversion of configuration objects into instantiated components is done when\na container is created as part of its {Ext.container.AbstractContainer#initComponent}\nprocess. As part of the same process, the `items` array is converted from its raw\narray form into a {@link Ext.util.MixedCollection} instance.\n\nYou can define your own `{@link #cfg!xtype xtype}` on a custom {@link Ext.Component} by specifying\nthe `{@link #cfg!xtype xtype}` property in {@link Ext#method!define Ext#define}. For example:\n\n    Ext.define('MyApp.PressMeButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'pressmebutton',\n        text: 'Press Me'\n    });\n\nCare should be taken when naming an `{@link #cfg!xtype xtype}` in a custom component because there is\na single, shared scope for all xtypes. Third part components should consider using\na prefix to avoid collisions.\n\n    Ext.define('Foo.form.CoolButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'ux-coolbutton',\n        text: 'Cool!'\n    });\n\nSee {@link Ext.enums.Widget} for list of all available xtypes.\n",
                "type": "Ext.enums.Widget",
                "src": {
                  "name": "3,1341,32",
                  "since": "3,1430,15",
                  "text": "3,1342,8,2822",
                  "type": "3,1341,14"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "activate",
                "text": "Fires after a Component has been visually activated.\n\n**Note** This event is only fired if this Component is a child of a {@link Ext.container.Container}\nthat uses {@link Ext.layout.container.Card} as it's layout or this Component is a floating Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1820,31",
                      "type": "3,1820,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1815,15",
                  "text": "3,1816,8,256"
                }
              },
              {
                "$type": "event",
                "name": "added",
                "since": "3.4.0",
                "text": "Fires after a Component had been added to a Container.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1845,31",
                      "type": "3,1845,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "container",
                    "text": "Parent Container\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "3,1846,41",
                      "text": "3,1846,51,17",
                      "type": "3,1846,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "pos",
                    "text": "position of Component\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1847,24",
                      "text": "3,1847,28,22",
                      "type": "3,1847,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1843,15",
                  "since": "3,1848,15",
                  "text": "3,1844,8,55"
                }
              },
              {
                "$type": "event",
                "name": "afterlayoutanimation",
                "since": "6.0.0",
                "text": "This event first after a component's layout has been updated by a layout that\nincluded animation (e.g., a {@link Ext.panel.Panel} in an\n{@link Ext.layout.container.Accordion} layout).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1800,31",
                      "type": "3,1800,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1796,15",
                  "since": "3,1801,15",
                  "text": "3,1797,8,200"
                }
              },
              {
                "$type": "event",
                "name": "afterrender",
                "since": "3.4.0",
                "text": "Fires after the component rendering is finished.\n\nThe `{@link #event!afterrender afterrender}` event is fired after this Component has been {@link #property!rendered #rendered}, been post-processed by any\n`{@link #method!afterRender afterRender}` method defined for the Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1925,31",
                      "type": "3,1925,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1920,15",
                  "since": "3,1926,15",
                  "text": "3,1921,8,207"
                }
              },
              {
                "$type": "event",
                "name": "autosize",
                "text": "Fires when the **{@link #method!autoSize #autoSize}** function is triggered and the field is resized according to the\n{@link #cfg!grow #grow}/{@link #cfg!growMin #growMin}/{@link #cfg!growMax #growMax} configs as a result. This event provides a hook for the\ndeveloper to apply additional logic at runtime to resize the field if needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This text field\n",
                    "type": "Ext.form.field.Text",
                    "src": {
                      "name": "4,498,37",
                      "text": "4,498,42,16",
                      "type": "4,498,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new field width\n",
                    "type": "Number",
                    "src": {
                      "name": "4,499,24",
                      "text": "4,499,30,20",
                      "type": "4,499,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,494,15",
                  "text": "4,495,8,283"
                }
              },
              {
                "$type": "event",
                "name": "beforeactivate",
                "text": "Fires before a Component has been visually activated. Returning `false` from an event listener can prevent\nthe activate from occurring.\n\n**Note** This event is only fired if this Component is a child of a {@link Ext.container.Container}\nthat uses {@link Ext.layout.container.Card} as it's layout.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1811,31",
                      "type": "3,1811,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1805,15",
                  "text": "3,1806,8,297"
                }
              },
              {
                "$type": "event",
                "name": "beforedeactivate",
                "text": "Fires before a Component has been visually deactivated. Returning `false` from an event listener can\nprevent the deactivate from occurring.\n\n**Note** This event is only fired if this Component is a child of a {@link Ext.container.Container}\nthat uses {@link Ext.layout.container.Card} as it's layout.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1830,31",
                      "type": "3,1830,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1824,15",
                  "text": "3,1825,8,301"
                }
              },
              {
                "$type": "event",
                "name": "beforedeselect",
                "text": "Fires before the deselected item is removed from the collection\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "combo",
                    "text": "This combo box\n",
                    "type": "Ext.form.field.ComboBox",
                    "src": {
                      "name": "5,639,41",
                      "text": "5,639,47,15",
                      "type": "5,639,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The deselected record\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "5,640,33",
                      "text": "5,640,40,22",
                      "type": "5,640,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the deselected record\n",
                    "type": "Number",
                    "src": {
                      "name": "5,641,24",
                      "text": "5,641,30,35",
                      "type": "5,641,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,637,15",
                  "text": "5,638,8,64"
                }
              },
              {
                "$type": "event",
                "name": "beforedestroy",
                "since": "1.1.0",
                "text": "Fires before the component is {@link #method!destroy #method-destroy}ed. Return `false` from an event handler to stop the\n{@link #method!destroy #method-destroy}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1944,31",
                      "type": "3,1944,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1941,15",
                  "since": "3,1945,15",
                  "text": "3,1942,8,131"
                }
              },
              {
                "$type": "event",
                "name": "beforehide",
                "since": "1.1.0",
                "text": "Fires before the component is hidden when calling the {@link Ext.Component#method!hide Ext.Component#method-hide} method. Return `false` from an event\nhandler to stop the hide.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1884,31",
                      "type": "3,1884,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1881,15",
                  "since": "3,1885,15",
                  "text": "3,1882,8,156"
                }
              },
              {
                "$type": "event",
                "name": "beforequery",
                "text": "Fires before all queries are processed. Return false to cancel the query or set the queryPlan's cancel\nproperty to true.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queryPlan",
                    "text": "An object containing details about the query to be executed.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "combo",
                        "text": "A reference to this ComboBox.\n",
                        "type": "Ext.form.field.ComboBox",
                        "src": {
                          "name": "5,612,51",
                          "text": "5,612,57,30",
                          "type": "5,612,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "query",
                        "text": "The query value to be used to match against the ComboBox's {@link #cfg!valueField #valueField}.\n",
                        "type": "String",
                        "src": {
                          "name": "5,613,34",
                          "text": "5,613,40,80",
                          "type": "5,613,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "forceAll",
                        "text": "If `true`, causes the query to be executed even if the minChars threshold is not met.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "5,614,35",
                          "text": "5,614,44,86",
                          "type": "5,614,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "cancel",
                        "text": "A boolean value which, if set to `true` upon return, causes the query not to be executed.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "5,615,35",
                          "text": "5,615,42,90",
                          "type": "5,615,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "rawQuery",
                        "text": "If `true` indicates that the raw input field value is being used, and upon store load,\n",
                        "type": "Boolean",
                        "src": {
                          "name": "5,616,35",
                          "text": "5,616,44,87",
                          "type": "5,616,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "5,611,24",
                      "text": "5,611,34,61",
                      "type": "5,611,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,607,15",
                  "text": "5,608,8,122"
                }
              },
              {
                "$type": "event",
                "name": "beforerender",
                "since": "1.1.0",
                "text": "Fires before the component is {@link #property!rendered #rendered}. Return `false` from an event handler to stop the\n{@link #method!render #method-render}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1908,31",
                      "type": "3,1908,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1905,15",
                  "since": "3,1909,15",
                  "text": "3,1906,8,122"
                }
              },
              {
                "$type": "event",
                "name": "beforeselect",
                "text": "Fires before the selected item is added to the collection\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "combo",
                    "text": "This combo box\n",
                    "type": "Ext.form.field.ComboBox",
                    "src": {
                      "name": "5,631,41",
                      "text": "5,631,47,15",
                      "type": "5,631,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The selected record\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "5,632,33",
                      "text": "5,632,40,20",
                      "type": "5,632,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the selected record\n",
                    "type": "Number",
                    "src": {
                      "name": "5,633,24",
                      "text": "5,633,30,33",
                      "type": "5,633,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,629,15",
                  "text": "5,630,8,58"
                }
              },
              {
                "$type": "event",
                "name": "beforeshow",
                "since": "1.1.0",
                "text": "Fires before the component is shown when calling the {@link Ext.Component#method!show Ext.Component#method-show} method. Return `false` from an event\nhandler to stop the show.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1869,31",
                      "type": "3,1869,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1866,15",
                  "since": "3,1870,15",
                  "text": "3,1867,8,155"
                }
              },
              {
                "$type": "event",
                "name": "beforestaterestore",
                "text": "Fires before the state of the object is restored. Return false from an event handler to stop the restore.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.state.Stateful",
                    "src": {
                      "name": "13,96,36",
                      "type": "13,96,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The hash of state values returned from the StateProvider. If this\nevent is not vetoed, then the state object is passed to *`{@link #method!applyState applyState}`*. By default,\nthat simply copies property values into this object. The method maybe overriden to\nprovide custom state restoration.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,97,24",
                      "text": "13,97,30,66:13,98,8,201",
                      "type": "13,97,16"
                    }
                  }
                ],
                "src": {
                  "name": "13,94,15",
                  "text": "13,95,8,106"
                }
              },
              {
                "$type": "event",
                "name": "beforestatesave",
                "text": "Fires before the state of the object is saved to the configured state provider. Return false to stop the save.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.state.Stateful",
                    "src": {
                      "name": "13,115,36",
                      "type": "13,115,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The hash of state values. This is determined by calling\n*`getState()`* on the object. This method must be provided by the\ndeveloper to return whatever representation of state is required, by default, Ext.state.Stateful\nhas a null implementation.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,116,24",
                      "text": "13,116,30,56:13,117,8,190",
                      "type": "13,116,16"
                    }
                  }
                ],
                "src": {
                  "name": "13,113,15",
                  "text": "13,114,8,111"
                }
              },
              {
                "$type": "event",
                "name": "blur",
                "text": "Fires when this Component loses focus.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "15,53,31",
                      "type": "15,53,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The blur event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "15,54,33",
                      "text": "15,54,39,16",
                      "type": "15,54,16"
                    }
                  }
                ],
                "src": {
                  "name": "15,51,15",
                  "text": "15,52,8,39"
                }
              },
              {
                "$type": "event",
                "name": "boxready",
                "text": "Fires *one time* - after the component has been laid out for the first time at its initial size.\n\nThis event does not fire on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1935,31",
                      "type": "3,1935,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The initial width.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1936,24",
                      "text": "3,1936,30,19",
                      "type": "3,1936,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The initial height.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1937,24",
                      "text": "3,1937,31,20",
                      "type": "3,1937,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1930,15",
                  "text": "3,1931,8,256"
                }
              },
              {
                "$type": "event",
                "name": "change",
                "text": "Fires when the value of a field is changed. The value of a field is\nchecked for changes when the field's {@link #method!setValue #setValue} method\nis called and when any of the events listed in\n{@link Ext.form.field.Base#cfg!checkChangeEvents Ext.form.field.Base#checkChangeEvents} are fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.field.Field",
                    "src": {
                      "name": "14,114,38",
                      "type": "14,114,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newValue",
                    "text": "The new value\n",
                    "type": "Object",
                    "src": {
                      "name": "14,115,24",
                      "text": "14,115,33,14",
                      "type": "14,115,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldValue",
                    "text": "The original value\n",
                    "type": "Object",
                    "src": {
                      "name": "14,116,24",
                      "text": "14,116,33,19",
                      "type": "14,116,16"
                    }
                  }
                ],
                "src": {
                  "name": "14,109,15",
                  "text": "14,110,8,252"
                }
              },
              {
                "$type": "event",
                "name": "collapse",
                "text": "Fires when the field's picker is collapsed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "This field instance\n",
                    "type": "Ext.form.field.Picker",
                    "src": {
                      "name": "9,88,39",
                      "text": "9,88,45,20",
                      "type": "9,88,16"
                    }
                  }
                ],
                "src": {
                  "name": "9,86,15",
                  "text": "9,87,8,44"
                }
              },
              {
                "$type": "event",
                "name": "deactivate",
                "text": "Fires after a Component has been visually deactivated.\n\n**Note** This event is only fired if this Component is a child of a {@link Ext.container.Container}\nthat uses {@link Ext.layout.container.Card} as it's layout or this Component is a floating Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1839,31",
                      "type": "3,1839,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1834,15",
                  "text": "3,1835,8,258"
                }
              },
              {
                "$type": "event",
                "name": "destroy",
                "since": "1.1.0",
                "text": "Fires after the component is {@link #method!destroy #method-destroy}ed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1951,31",
                      "type": "3,1951,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1949,15",
                  "since": "3,1952,15",
                  "text": "3,1950,8,56"
                }
              },
              {
                "$type": "event",
                "name": "dirtychange",
                "text": "Fires when a change in the field's {@link #method!isDirty #isDirty} state is detected.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.field.Field",
                    "src": {
                      "name": "14,129,38",
                      "type": "14,129,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isDirty",
                    "text": "Whether or not the field is now dirty\n",
                    "type": "Boolean",
                    "src": {
                      "name": "14,130,25",
                      "text": "14,130,33,38",
                      "type": "14,130,16"
                    }
                  }
                ],
                "src": {
                  "name": "14,127,15",
                  "text": "14,128,8,71"
                }
              },
              {
                "$type": "event",
                "name": "disable",
                "since": "1.1.0",
                "text": "Fires after the component is disabled.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1854,31",
                      "type": "3,1854,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1852,15",
                  "since": "3,1855,15",
                  "text": "3,1853,8,39"
                }
              },
              {
                "$type": "event",
                "name": "enable",
                "since": "1.1.0",
                "text": "Fires after the component is enabled.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1861,31",
                      "type": "3,1861,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1859,15",
                  "since": "3,1862,15",
                  "text": "3,1860,8,38"
                }
              },
              {
                "$type": "event",
                "name": "errorchange",
                "text": "Fires when the active error message is changed via {@link #method!setActiveError #setActiveError}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.Labelable",
                    "src": {
                      "name": "2,461,36",
                      "type": "2,461,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "error",
                    "text": "The active error message\n",
                    "type": "String",
                    "src": {
                      "name": "2,462,24",
                      "text": "2,462,30,25",
                      "type": "2,462,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,459,15",
                  "text": "2,460,8,76"
                }
              },
              {
                "$type": "event",
                "name": "expand",
                "text": "Fires when the field's picker is expanded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "This field instance\n",
                    "type": "Ext.form.field.Picker",
                    "src": {
                      "name": "9,82,39",
                      "text": "9,82,45,20",
                      "type": "9,82,16"
                    }
                  }
                ],
                "src": {
                  "name": "9,80,15",
                  "text": "9,81,8,43"
                }
              },
              {
                "$type": "event",
                "name": "focus",
                "text": "Fires when this Component receives focus.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "15,46,31",
                      "type": "15,46,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The focus event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "15,47,33",
                      "text": "15,47,39,17",
                      "type": "15,47,16"
                    }
                  }
                ],
                "src": {
                  "name": "15,44,15",
                  "text": "15,45,8,42"
                }
              },
              {
                "$type": "event",
                "name": "focusenter",
                "text": "Fires when focus enters this Component's hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "15,60,31",
                      "type": "15,60,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The focusenter event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "15,61,33",
                      "text": "15,61,39,22",
                      "type": "15,61,16"
                    }
                  }
                ],
                "src": {
                  "name": "15,58,15",
                  "text": "15,59,8,52"
                }
              },
              {
                "$type": "event",
                "name": "focusleave",
                "text": "Fires when focus leaves this Component's hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "15,67,31",
                      "type": "15,67,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The focusleave event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "15,68,33",
                      "text": "15,68,39,22",
                      "type": "15,68,16"
                    }
                  }
                ],
                "src": {
                  "name": "15,65,15",
                  "text": "15,66,8,52"
                }
              },
              {
                "$type": "event",
                "name": "hide",
                "since": "1.1.0",
                "text": "Fires after the component is hidden. Fires after the component is hidden when calling the {@link Ext.Component#method!hide Ext.Component#method-hide}\nmethod.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1892,31",
                      "type": "3,1892,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1889,15",
                  "since": "3,1893,15",
                  "text": "3,1890,8,137"
                }
              },
              {
                "$type": "event",
                "name": "keydown",
                "text": "Keydown input field event. This event only fires if **{@link #cfg!enableKeyEvents #enableKeyEvents}** is set to true.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This text field\n",
                    "type": "Ext.form.field.Text",
                    "src": {
                      "name": "4,505,37",
                      "text": "4,505,42,16",
                      "type": "4,505,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "4,506,33",
                      "type": "4,506,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,503,15",
                  "text": "4,504,8,97"
                }
              },
              {
                "$type": "event",
                "name": "keypress",
                "text": "Keypress input field event. This event only fires if **{@link #cfg!enableKeyEvents #enableKeyEvents}** is set to true.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This text field\n",
                    "type": "Ext.form.field.Text",
                    "src": {
                      "name": "4,519,37",
                      "text": "4,519,42,16",
                      "type": "4,519,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "4,520,33",
                      "type": "4,520,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,517,15",
                  "text": "4,518,8,98"
                }
              },
              {
                "$type": "event",
                "name": "keyup",
                "text": "Keyup input field event. This event only fires if **{@link #cfg!enableKeyEvents #enableKeyEvents}** is set to true.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "This text field\n",
                    "type": "Ext.form.field.Text",
                    "src": {
                      "name": "4,512,37",
                      "text": "4,512,42,16",
                      "type": "4,512,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "4,513,33",
                      "type": "4,513,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,510,15",
                  "text": "4,511,8,95"
                }
              },
              {
                "$type": "event",
                "name": "move",
                "text": "Fires after the component is moved.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1972,31",
                      "type": "3,1972,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new x position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1973,24",
                      "text": "3,1973,26,20",
                      "type": "3,1973,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The new y position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1974,24",
                      "text": "3,1974,26,20",
                      "type": "3,1974,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1970,15",
                  "text": "3,1971,8,36"
                }
              },
              {
                "$type": "event",
                "name": "removed",
                "since": "3.4.0",
                "text": "Fires when a component is removed from an Ext.container.Container\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1899,31",
                      "type": "3,1899,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ownerCt",
                    "text": "Container which holds the component\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "3,1900,41",
                      "text": "3,1900,49,36",
                      "type": "3,1900,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1897,15",
                  "since": "3,1901,15",
                  "text": "3,1898,8,66"
                }
              },
              {
                "$type": "event",
                "name": "render",
                "since": "1.1.0",
                "text": "Fires after the component markup is {@link #property!rendered #rendered}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1915,31",
                      "type": "3,1915,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1913,15",
                  "since": "3,1916,15",
                  "text": "3,1914,8,55"
                }
              },
              {
                "$type": "event",
                "name": "resize",
                "text": "Fires after the component is resized. Note that this does *not* fire when the component is first laid out at its initial\nsize. To hook that point in the life cycle, use the {@link #event!boxready #boxready} event.\n\nThis event does not fire on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1962,31",
                      "type": "3,1962,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width that was set.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1963,24",
                      "text": "3,1963,30,28",
                      "type": "3,1963,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height that was set.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1964,24",
                      "text": "3,1964,31,29",
                      "type": "3,1964,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldWidth",
                    "text": "The previous width.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1965,24",
                      "text": "3,1965,33,20",
                      "type": "3,1965,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldHeight",
                    "text": "The previous height.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,1966,24",
                      "text": "3,1966,34,21",
                      "type": "3,1966,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1956,15",
                  "text": "3,1957,8,357"
                }
              },
              {
                "$type": "event",
                "name": "select",
                "text": "Fires when at least one list item is selected.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "combo",
                    "text": "This combo box\n",
                    "type": "Ext.form.field.ComboBox",
                    "src": {
                      "name": "5,622,41",
                      "text": "5,622,47,15",
                      "type": "5,622,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "With {@link #cfg!multiSelect #multiSelect}\n`false`, the value will be a single record. With {@link #cfg!multiSelect #multiSelect} `true`, the\nvalue will be an array of records.\n",
                    "type": "Ext.data.Model/Ext.data.Model[]",
                    "src": {
                      "name": "5,623,49",
                      "text": "5,623,56,26:5,624,8,117",
                      "type": "5,623,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,620,15",
                  "text": "5,621,8,47"
                }
              },
              {
                "$type": "event",
                "name": "show",
                "since": "1.1.0",
                "text": "Fires after the component is shown when calling the {@link Ext.Component#method!show Ext.Component#method-show} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,1876,31",
                      "type": "3,1876,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1874,15",
                  "since": "3,1877,15",
                  "text": "3,1875,8,99"
                }
              },
              {
                "$type": "event",
                "name": "specialkey",
                "text": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. To handle other keys\nsee {@link Ext.util.KeyMap}. You can check {@link Ext.event.Event#method!getKey Ext.event.Event#getKey} to determine which key was\npressed. For example:\n\n    var form = new Ext.form.Panel({\n        ...\n        items: [{\n                fieldLabel: 'Field 1',\n                name: 'field1',\n                allowBlank: false\n            },{\n                fieldLabel: 'Field 2',\n                name: 'field2',\n                listeners: {\n                    specialkey: function(field, e){\n                        // e.HOME, e.END, e.PAGE_UP, e.PAGE_DOWN,\n                        // e.TAB, e.ESC, arrow keys: e.LEFT, e.RIGHT, e.UP, e.DOWN\n                        if (e.getKey() == e.ENTER) {\n                            var form = field.up('form').getForm();\n                            form.submit();\n                        }\n                    }\n                }\n            }\n        ],\n        ...\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.field.Base",
                    "src": {
                      "name": "8,285,37",
                      "type": "8,285,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "8,286,33",
                      "text": "8,286,35,17",
                      "type": "8,286,16"
                    }
                  }
                ],
                "src": {
                  "name": "8,256,15",
                  "text": "8,257,8,993"
                }
              },
              {
                "$type": "event",
                "name": "staterestore",
                "text": "Fires after the state of the object is restored.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.state.Stateful",
                    "src": {
                      "name": "13,106,36",
                      "type": "13,106,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The hash of state values returned from the StateProvider. This is passed\nto *`{@link #method!applyState applyState}`*. By default, that simply copies property values into this\nobject. The method maybe overridden to provide custom state restoration.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,107,24",
                      "text": "13,107,30,73:13,108,8,149",
                      "type": "13,107,16"
                    }
                  }
                ],
                "src": {
                  "name": "13,104,15",
                  "text": "13,105,8,49"
                }
              },
              {
                "$type": "event",
                "name": "statesave",
                "text": "Fires after the state of the object is saved to the configured state provider.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.state.Stateful",
                    "src": {
                      "name": "13,125,36",
                      "type": "13,125,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The hash of state values. This is determined by calling\n*`getState()`* on the object. This method must be provided by the\ndeveloper to return whatever representation of state is required, by default, Ext.state.Stateful\nhas a null implementation.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,126,24",
                      "text": "13,126,30,56:13,127,8,190",
                      "type": "13,126,16"
                    }
                  }
                ],
                "src": {
                  "name": "13,123,15",
                  "text": "13,124,8,79"
                }
              },
              {
                "$type": "event",
                "name": "validitychange",
                "text": "Fires when a change in the field's validity is detected.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.field.Field",
                    "src": {
                      "name": "14,122,38",
                      "type": "14,122,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isValid",
                    "text": "Whether or not the field is now valid\n",
                    "type": "Boolean",
                    "src": {
                      "name": "14,123,25",
                      "text": "14,123,33,38",
                      "type": "14,123,16"
                    }
                  }
                ],
                "src": {
                  "name": "14,120,15",
                  "text": "14,121,8,57"
                }
              },
              {
                "$type": "event",
                "name": "writeablechange",
                "text": "Fires when this field changes its read-only status.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.form.field.Base",
                    "src": {
                      "name": "8,292,37",
                      "type": "8,292,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "Read",
                    "text": "only flag\n",
                    "type": "Boolean",
                    "src": {
                      "name": "8,293,25",
                      "text": "8,293,30,10",
                      "type": "8,293,16"
                    }
                  }
                ],
                "src": {
                  "name": "8,290,15",
                  "text": "8,291,8,52"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "11,413,27",
                      "type": "11,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "11,414,30,35",
                      "type": "11,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "11,412,12",
                  "name": "11,416,0",
                  "text": "11,411,12,65"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for {@link #method!onAfter #onAfter}.\n",
                "src": {
                  "name": "11,1236,0",
                  "text": "11,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for {@link #method!onBefore #onBefore}.\n",
                "src": {
                  "name": "11,1230,0",
                  "text": "11,1228,12,29"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addBindableUpdater",
                "since": "5.0.0",
                "text": "Ensures that the given property (if it is a Config System config) has a proper\n\"updater\" method on this instance to sync changes to the config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the config property.\n",
                    "type": "String",
                    "src": {
                      "name": "7,504,28",
                      "text": "7,504,37,33",
                      "type": "7,504,20"
                    }
                  }
                ],
                "src": {
                  "access": "7,505,12",
                  "name": "7,508,0",
                  "since": "7,506,19",
                  "text": "7,502,12,144"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addChildEl",
                "since": "6.0.0",
                "text": "Add a childEl specific to this instance. This must be called before render.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "childEl",
                    "src": {
                      "name": "16,231,19"
                    }
                  }
                ],
                "src": {
                  "access": "16,232,12",
                  "name": "16,235,0",
                  "since": "16,233,19",
                  "text": "16,230,12,76"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #addCls} instead.\n",
                "deprecatedVersion": "4.1",
                "inheritdoc": "Ext.Component#addCls",
                "name": "addClass",
                "since": "2.3.0",
                "src": {
                  "deprecatedMessage": "3,6483,20",
                  "deprecatedVersion": "3,6483,20",
                  "inheritdoc": "3,6482,20",
                  "name": "3,6481,28",
                  "since": "3,6484,27"
                }
              },
              {
                "$type": "method",
                "name": "addCls",
                "text": "Adds a CSS class to the top level element representing this component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "The CSS class name to add.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,2160,33",
                      "text": "3,2160,37,27",
                      "type": "3,2160,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the Component to allow method chaining.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,2161,32,48",
                      "type": "3,2161,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,2163,0",
                  "text": "3,2159,8,71"
                }
              },
              {
                "$type": "method",
                "name": "addClsWithUI",
                "text": "Adds a `{@link #cfg!cls cls}` to the `{@link #cfg!uiCls uiCls}` array, which will also call {@link #method!addUIClsToElement #addUIClsToElement} and adds to all elements of this\ncomponent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "classes",
                    "text": "A string or an array of strings to add to the `{@link #cfg!uiCls uiCls}`.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,2174,33",
                      "text": "3,2174,41,55",
                      "type": "3,2174,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "skip",
                    "optional": true,
                    "text": "`true` to skip adding it to the class and do it later (via the return).\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,2175,26",
                      "text": "3,2175,32,72",
                      "type": "3,2175,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,2177,0",
                  "text": "3,2172,8,127"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDelegatedListener",
                "text": "Adds a listeners with the \"delegate\" event option.  Users should not invoke this\nmethod directly.  Use the \"delegate\" event option of\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "17,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "17,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "17,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "src": {
                      "name": "17,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "src": {
                      "name": "17,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caller",
                    "src": {
                      "name": "17,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "manager",
                    "src": {
                      "name": "17,19,0"
                    }
                  }
                ],
                "src": {
                  "access": "17,14,12",
                  "name": "17,19,0",
                  "text": "17,15,12,195"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "18,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "18,118,12",
                  "name": "18,120,0",
                  "text": "18,116,12,125"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The {@link #method!on #on} method is shorthand for\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "11,835,35",
                      "text": "11,835,45,37:11,836,12,61",
                      "type": "11,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "11,838,38",
                      "text": "11,838,42,46:11,839,12,166",
                      "type": "11,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "11,843,29",
                      "text": "11,843,36,62:11,844,12,73",
                      "type": "11,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "11,853,36",
                          "text": "11,854,12,139",
                          "type": "11,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "11,857,36",
                          "text": "11,858,12,94",
                          "type": "11,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "11,861,37",
                          "text": "11,862,12,96",
                          "type": "11,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "11,865,36",
                          "text": "11,866,12,262",
                          "type": "11,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  {@link Ext.Function#method!requestAnimationFrame Ext.Function#requestAnimationFrame}. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "11,870,36",
                          "text": "11,871,12,323",
                          "type": "11,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "11,877,49",
                          "text": "11,878,12,135",
                          "type": "11,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to {@link Ext.Component}.**\n  The name of a Component property which references an {@link Ext.dom.Element}\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of {@link Ext.Component} which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "11,881,36",
                          "text": "11,882,12,781",
                          "type": "11,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "11,905,37",
                          "text": "11,906,12,295",
                          "type": "11,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopPropagation Ext.event.Event#stopPropagation} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "11,914,38",
                          "text": "11,915,12,212",
                          "type": "11,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!preventDefault Ext.event.Event#preventDefault} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "11,919,38",
                          "text": "11,920,12,210",
                          "type": "11,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopEvent Ext.event.Event#stopEvent} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "11,924,38",
                          "text": "11,925,12,200",
                          "type": "11,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "11,929,36",
                          "text": "11,930,12,179",
                          "type": "11,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `destroy` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using {@link #method!un #un}; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See {@link #method!un #un} for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "11,934,38",
                          "text": "11,935,12,441",
                          "type": "11,934,20",
                          "value": "11,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "11,942,37",
                          "text": "11,943,12,737",
                          "type": "11,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "11,954,37",
                          "text": "11,955,12,301",
                          "type": "11,954,20",
                          "value": "11,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "11,846,29",
                      "text": "11,846,38,44:11,847,12,154",
                      "type": "11,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "11,962,29",
                      "text": "11,963,12,1831",
                      "type": "11,962,20",
                      "value": "11,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "11,1021,29,54:11,1022,12,516",
                      "type": "11,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "11,1041,0",
                  "text": "11,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use `{@link #method!mon mon}` or `{@link #method!addManagedListener addManagedListener}` if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "11,456,56",
                      "text": "11,456,61,47",
                      "type": "11,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "11,457,34",
                      "text": "11,457,40,63",
                      "type": "11,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "11,458,36",
                      "text": "11,458,39,49:11,459,11,85",
                      "type": "11,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,461,27",
                      "text": "11,461,33,92:11,462,11,43",
                      "type": "11,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} options.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,463,27",
                      "text": "11,463,35,67:11,464,11,61",
                      "type": "11,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "11,465,28,54:11,466,11,513",
                      "type": "11,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,484,0",
                  "text": "11,430,11,1093"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addPlugin",
                "text": "Adds a plugin. May be called at any time in the component's life cycle.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "plugin",
                    "src": {
                      "name": "3,2266,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,2263,8",
                  "name": "3,2266,0",
                  "text": "3,2264,8,72"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "addPropertyToState",
                "text": "Save a property to the given state object if it is not its default or configured\nvalue.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The state object.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,2285,24",
                      "text": "3,2285,30,18",
                      "type": "3,2285,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "propName",
                    "text": "The name of the property on this object to save.\n",
                    "type": "String",
                    "src": {
                      "name": "3,2286,24",
                      "text": "3,2286,33,49",
                      "type": "3,2286,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value of the state property (defaults to `this[propName]`).\n",
                    "type": "String",
                    "src": {
                      "name": "3,2287,25",
                      "text": "3,2287,32,64",
                      "type": "3,2287,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The state object or a new object if state was `{@link null}` and the property\nwas saved.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,2288,25,70:3,2289,8,11",
                      "type": "3,2288,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,2290,8",
                  "name": "3,2292,0",
                  "text": "3,2282,8,89"
                }
              },
              {
                "$type": "method",
                "name": "addStateEvents",
                "text": "Add events that will trigger the state to be saved. If the first argument is an\narray, each element of that array is the name of a state event. Otherwise, each\nargument passed to this method is the name of a state event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "The event name or an array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "13,150,33",
                      "text": "13,150,40,43",
                      "type": "13,150,16"
                    }
                  }
                ],
                "src": {
                  "name": "13,152,0",
                  "text": "13,146,8,222"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "addUIClsToElement",
                "text": "Method which adds a specified UI + `{@link #cfg!uiCls uiCls}` to the components element. Can be overridden\nto add the UI to more than just the component's element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "uiCls",
                    "text": "The UI class to add to the element.\n",
                    "type": "String",
                    "src": {
                      "name": "3,2316,24",
                      "text": "3,2316,30,36",
                      "type": "3,2316,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2317,8",
                  "name": "3,2319,0",
                  "text": "3,2314,8,145"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addUIToElement",
                "text": "Method which adds a specified UI to the components element.\n",
                "src": {
                  "access": "3,5797,12",
                  "name": "3,5799,0",
                  "text": "3,5796,12,60"
                }
              },
              {
                "$type": "method",
                "name": "addValue",
                "text": "Adds a value or values to the current value of the field\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value or values to add to the current value, see {@link #method!setValue #setValue}\n",
                    "type": "Mixed",
                    "src": {
                      "name": "5,1836,23",
                      "text": "5,1836,29,71",
                      "type": "5,1836,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,1838,0",
                  "text": "5,1835,8,57"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "adjustForConstraints",
                "items": [
                  {
                    "$type": "param",
                    "name": "xy",
                    "src": {
                      "name": "19,175,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "parent",
                    "src": {
                      "name": "19,175,0"
                    }
                  }
                ],
                "src": {
                  "access": "19,173,8",
                  "name": "19,175,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "adjustPosition",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "3,2378,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "3,2378,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,2376,8",
                  "name": "3,2378,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterClassMixedIn",
                "text": "Called after the mixin is applied. We need to see if `{@link #cfg!childEls childEls}` were used by\nthe `targetClass` and apply them to the config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetClass",
                    "type": "Ext.Class",
                    "src": {
                      "name": "16,253,31",
                      "type": "16,253,20"
                    }
                  }
                ],
                "src": {
                  "access": "16,254,12",
                  "name": "16,256,0",
                  "text": "16,251,12,125"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterComponentLayout",
                "template": true,
                "text": "Called by the layout system after the Component has been laid out.\n\nThis method is not called on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The width that was set\n",
                    "type": "Number",
                    "src": {
                      "name": "3,2218,24",
                      "text": "3,2218,30,23",
                      "type": "3,2218,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The height that was set\n",
                    "type": "Number",
                    "src": {
                      "name": "3,2219,24",
                      "text": "3,2219,31,24",
                      "type": "3,2219,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldWidth",
                    "text": "The old width, or `{@link undefined}` if this was the initial layout.\n",
                    "type": "Number/undefined",
                    "src": {
                      "name": "3,2220,34",
                      "text": "3,2220,43,62",
                      "type": "3,2220,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldHeight",
                    "text": "The old height, or `{@link undefined}` if this was the initial layout.\n",
                    "type": "Number/undefined",
                    "src": {
                      "name": "3,2221,34",
                      "text": "3,2221,44,63",
                      "type": "3,2221,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2224,8",
                  "name": "3,2226,0",
                  "template": "3,2223,8",
                  "text": "3,2213,8,228"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterHide",
                "template": true,
                "text": "Invoked after the Component has been hidden.\n\nGets passed the same `callback` and `scope` parameters that #onHide received.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,2400,27",
                      "type": "3,2400,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,2401,25",
                      "type": "3,2401,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2404,8",
                  "name": "3,2406,0",
                  "template": "3,2403,8",
                  "text": "3,2396,8,125"
                }
              },
              {
                "$type": "method",
                "name": "afterQuery",
                "template": true,
                "text": "A method called when the filtering caused by the {@link #method!doQuery #doQuery} call is complete and the store has been\neither filtered locally (if {@link #cfg!queryMode #queryMode} is `\"local\"`), or has been loaded using the specified filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queryPlan",
                    "text": "An object containing details about the query was executed.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "query",
                        "text": "The query value to be used to match against the ComboBox's {@link #cfg!valueField #valueField}.\n",
                        "type": "String",
                        "src": {
                          "name": "5,1381,34",
                          "text": "5,1381,40,80",
                          "type": "5,1381,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "forceAll",
                        "text": "If `true`, causes the query to be executed even if the minChars threshold is not met.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "5,1382,35",
                          "text": "5,1382,44,86",
                          "type": "5,1382,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "cancel",
                        "text": "A boolean value which, if set to `true` upon return, causes the query not to be executed.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "5,1383,35",
                          "text": "5,1383,42,90",
                          "type": "5,1383,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "rawQuery",
                        "text": "If `true` indicates that the raw input field value is being used, and upon store load,\nthe input field value should **not** be overwritten.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "5,1384,35",
                          "text": "5,1384,44,87:5,1385,8,53",
                          "type": "5,1384,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "5,1380,24",
                      "text": "5,1380,34,59",
                      "type": "5,1380,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,1387,0",
                  "template": "5,1376,8",
                  "text": "5,1377,8,219"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterRender",
                "template": true,
                "text": "Allows additional behavior after rendering is complete. At this stage, the\n{@link Ext.Component} {@link Ext.Component#method!getEl Ext.Component#getEl} will have\nbeen styled according to the configuration, will have had any configured CSS\nclass names added, and will be in the configured visibility and configured enable\nstate.\n\n**Note:** If the Component has a {@link Ext.Component#cfg!controller Ext.Component#controller}\nand the controller has an {@link Ext.app.ViewController#method!afterRender Ext.app.ViewController#afterRender}\nmethod it will be called passing the Component as the single param.\n",
                "src": {
                  "access": "20,279,8",
                  "name": "20,281,0",
                  "template": "20,278,8",
                  "text": "20,268,8,553"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterSetPosition",
                "template": true,
                "text": "Template method called after a Component has been positioned.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "3,2430,24",
                      "type": "3,2430,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "3,2431,24",
                      "type": "3,2431,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2434,8",
                  "name": "3,2436,0",
                  "template": "3,2433,8",
                  "text": "3,2428,8,63"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterShow",
                "template": true,
                "text": "Invoked after the Component is shown (after #onShow is called).\n\nGets passed the same parameters as #show.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "type": "String/Ext.dom.Element",
                    "src": {
                      "name": "3,2449,41",
                      "type": "3,2449,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,2450,27",
                      "type": "3,2450,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,2451,25",
                      "type": "3,2451,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2454,8",
                  "name": "3,2456,0",
                  "template": "3,2453,8",
                  "text": "3,2445,8,108"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "alignPicker",
                "text": "Aligns the picker to the input element\n",
                "src": {
                  "access": "9,265,8",
                  "name": "9,267,0",
                  "text": "9,264,8,39"
                }
              },
              {
                "$type": "method",
                "name": "alignTo",
                "text": "Aligns the element with another element relative to the specified anchor points. If\nthe other element is the document it aligns it to the viewport. The position\nparameter is optional, and can be specified in any one of the following formats:\n\n- **Blank**: Defaults to aligning the element's top-left corner to the target's\n  bottom-left corner (\"tl-bl\").\n- **One anchor (deprecated)**: The passed anchor position is used as the target\n  element's anchor point.  The element being aligned will position its top-left\n  corner (tl) to that point. *This method has been deprecated in favor of the newer\n  two anchor syntax below*.\n- **Two anchors**: If two values from the table below are passed separated by a dash,\n  the first value is used as the element's anchor point, and the second value is\n  used as the target's anchor point.\n\nIn addition to the anchor points, the position parameter also supports the \"?\"\ncharacter. If \"?\" is passed at the end of the position string, the element will\nattempt to align as specified, but the position will be adjusted to constrain to\nthe viewport if necessary. Note that the element being aligned might be swapped to\nalign to a different position than that specified in order to enforce the viewport\nconstraints. Following are all of the supported anchor positions:\n\n<pre>\nValue  Description\n-----  -----------------------------\ntl     The top left corner (default)\nt      The center of the top edge\ntr     The top right corner\nl      The center of the left edge\nc      In the center of the element\nr      The center of the right edge\nbl     The bottom left corner\nb      The center of the bottom edge\nbr     The bottom right corner\n</pre>\n\nExample Usage:\n\n    // align el to other-el using the default positioning\n    // (\"tl-bl\", non-constrained)\n    el.alignTo(\"other-el\");\n\n    // align the top left corner of el with the top right corner of other-el\n    // (constrained to viewport)\n    el.alignTo(\"other-el\", \"tr?\");\n\n    // align the bottom right corner of el with the center left edge of other-el\n    el.alignTo(\"other-el\", \"br-l?\");\n\n    // align the center of el with the bottom left corner of other-el and\n    // adjust the x position by -6 pixels (and the y position by 0)\n    el.alignTo(\"other-el\", \"c-bl\", [-6, 0]);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "text": "The Positionable,\nHTMLElement, or id of the element to align to.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String",
                    "src": {
                      "name": "19,237,58",
                      "text": "19,237,66,18:19,238,8,47",
                      "type": "19,237,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "The position to align to\n",
                    "type": "String",
                    "value": "\"tl-bl?\"",
                    "src": {
                      "name": "19,239,25",
                      "text": "19,239,44,25",
                      "type": "19,239,16",
                      "value": "19,239,34"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "offsets",
                    "optional": true,
                    "text": "Offset the positioning by [x, y]\nElement animation config object\n",
                    "type": "Number[]",
                    "src": {
                      "name": "19,240,27",
                      "text": "19,240,36,33:19,241,8,32",
                      "type": "19,240,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "19,242,40,5",
                      "type": "19,242,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,244,0",
                  "text": "19,185,8,2269"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "anim",
                "text": "Process the passed fx configuration.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "21,286,0"
                    }
                  }
                ],
                "src": {
                  "access": "21,283,8",
                  "name": "21,286,0",
                  "text": "21,284,8,37"
                }
              },
              {
                "$type": "method",
                "name": "animate",
                "text": "Performs custom animation on this object.\n\nThis method is applicable to both the {@link Ext.Component} class and the {@link Ext.draw.sprite.Sprite}\nclass. It performs animated transitions of certain properties of this object over a specified timeline.\n\n### Animating a {@link Ext.Component}\n\nWhen animating a Component, the following properties may be specified in `from`, `to`, and `keyframe` objects:\n\n  - `x` - The Component's page X position in pixels.\n\n  - `y` - The Component's page Y position in pixels\n\n  - `left` - The Component's `left` value in pixels.\n\n  - `top` - The Component's `top` value in pixels.\n\n  - `{@link #cfg!width width}` - The Component's `{@link #cfg!width width}` value in pixels.\n\n  - `{@link #cfg!height height}` - The Component's `{@link #cfg!height height}` value in pixels.\n\n  - `dynamic` - Specify as true to update the Component's layout (if it is a Container) at every frame of the animation.\n    *Use sparingly as laying out on every intermediate size change is an expensive operation.*\n\nFor example, to animate a Window to a new size, ensuring that its internal layout and any shadow is correct:\n\n    myWindow = Ext.create('Ext.window.Window', {\n        title: 'Test Component animation',\n        width: 500,\n        height: 300,\n        layout: {\n            type: 'hbox',\n            align: 'stretch'\n        },\n        items: [{\n            title: 'Left: 33%',\n            margin: '5 0 5 5',\n            flex: 1\n        }, {\n            title: 'Left: 66%',\n            margin: '5 5 5 5',\n            flex: 2\n        }]\n    });\n    myWindow.show();\n    myWindow.header.el.on('click', function() {\n        myWindow.animate({\n            to: {\n                width: (myWindow.getWidth() == 500) ? 700 : 500,\n                height: (myWindow.getHeight() == 300) ? 400 : 300\n            }\n        });\n    });\n\nFor performance reasons, by default, the internal layout is only updated when the Window reaches its final `\"to\"`\nsize. If dynamic updating of the Window's child Components is required, then configure the animation with\n`dynamic: true` and the two child items will maintain their proportions during the animation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "Configuration for {@link Ext.fx.Anim}.\nNote that the {@link Ext.fx.Anim#cfg!to Ext.fx.Anim#to} config is required.\n",
                    "type": "Object",
                    "src": {
                      "name": "21,269,24",
                      "text": "21,269,31,39:21,270,8,60",
                      "type": "21,269,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Object",
                    "src": {
                      "text": "21,271,25,5",
                      "type": "21,271,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,273,0",
                  "text": "21,211,8,2113"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyBind",
                "since": "5.0.0",
                "items": [
                  {
                    "$type": "param",
                    "name": "binds",
                    "type": "String/Object",
                    "src": {
                      "name": "7,523,35",
                      "type": "7,523,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "currentBindings",
                    "type": "Object",
                    "src": {
                      "name": "7,524,28",
                      "type": "7,524,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "7,525,21"
                    }
                  }
                ],
                "src": {
                  "access": "7,526,12",
                  "name": "7,529,0",
                  "since": "7,527,19"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyRenderSelectors",
                "text": "Sets references to elements inside the component. This applies {@link Ext.Component#cfg!renderSelectors Ext.Component#cfg-renderSelectors}\nas well as {@link Ext.Component#cfg!childEls Ext.Component#cfg-childEls}.\n",
                "src": {
                  "access": "20,865,12",
                  "name": "20,867,0",
                  "text": "20,863,12,177"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applySession",
                "since": "5.0.0",
                "text": "Transforms a Session config to a proper instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "session",
                    "type": "Object",
                    "src": {
                      "name": "7,626,28",
                      "type": "7,626,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Session",
                    "src": {
                      "type": "7,627,21"
                    }
                  }
                ],
                "src": {
                  "access": "7,628,12",
                  "name": "7,631,0",
                  "since": "7,629,19",
                  "text": "7,625,12,50"
                }
              },
              {
                "$type": "method",
                "name": "applyState",
                "text": "Applies the state to the object. This should be overridden in subclasses to do\nmore complex state operations. By default it applies the state properties onto\nthe current object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The state\n",
                    "type": "Object",
                    "src": {
                      "name": "13,258,24",
                      "text": "13,258,30,10",
                      "type": "13,258,16"
                    }
                  }
                ],
                "src": {
                  "name": "13,260,0",
                  "text": "13,255,8,178"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyViewModel",
                "since": "5.0.0",
                "text": "Transforms a ViewModel config to a proper instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "viewModel",
                    "type": "String/Object/Ext.app.ViewModel",
                    "src": {
                      "name": "7,654,53",
                      "type": "7,654,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "type": "7,655,21"
                    }
                  }
                ],
                "src": {
                  "access": "7,656,12",
                  "name": "7,659,0",
                  "since": "7,657,19",
                  "text": "7,653,12,52"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "assertValue",
                "src": {
                  "access": "5,871,8",
                  "name": "5,873,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "attachChildEls",
                "text": "Sets references to elements inside the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "src": {
                      "name": "16,274,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "16,274,0"
                    }
                  }
                ],
                "src": {
                  "access": "16,272,12",
                  "name": "16,274,0",
                  "text": "16,271,12,50"
                }
              },
              {
                "$type": "method",
                "name": "autoSize",
                "text": "Automatically grows the field to accommodate the width of the text up to the maximum\nfield width allowed. This only takes effect if {@link #cfg!grow #grow} = true, and fires the\n{@link #event!autosize #autosize} event if the width changes.\n",
                "src": {
                  "name": "4,1293,0",
                  "text": "4,1289,8,214"
                }
              },
              {
                "$type": "method",
                "name": "batchChanges",
                "text": "A utility for grouping a set of modifications which may trigger value changes into a single transaction, to\nprevent excessive firing of {@link #event!change #change} events. This is useful for instance if the field has sub-fields which\nare being updated as a group; you don't want the container field to check its own changed state for each subfield\nchange.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call with change checks suspended.\n",
                    "type": "Function",
                    "src": {
                      "name": "14,522,26",
                      "text": "14,522,29,51",
                      "type": "14,522,16"
                    }
                  }
                ],
                "src": {
                  "name": "14,524,0",
                  "text": "14,518,8,344"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeBlur",
                "text": "Template method to do any pre-blur processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "15,310,33",
                      "text": "15,310,35,17",
                      "type": "15,310,16"
                    }
                  }
                ],
                "src": {
                  "access": "15,309,8",
                  "name": "15,312,0",
                  "text": "15,308,8,47"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeComponentLayout",
                "template": true,
                "text": "Occurs before `{@link #cfg!componentLayout componentLayout}` is run. Returning `false` from this method will prevent the `{@link #cfg!componentLayout componentLayout}` from\nbeing executed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "adjWidth",
                    "text": "The box-adjusted width that was set.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,2700,24",
                      "text": "3,2700,33,37",
                      "type": "3,2700,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "adjHeight",
                    "text": "The box-adjusted height that was set.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,2701,24",
                      "text": "3,2701,34,38",
                      "type": "3,2701,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2704,8",
                  "name": "3,2706,0",
                  "template": "3,2703,8",
                  "text": "3,2697,8,132"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeDestroy",
                "template": true,
                "text": "Invoked before the Component is destroyed.\n",
                "src": {
                  "access": "3,2715,8",
                  "name": "3,2717,0",
                  "template": "3,2714,8",
                  "text": "3,2711,8,44"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeFocus",
                "text": "Template method to do any pre-focus processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "15,364,33",
                      "text": "15,364,35,17",
                      "type": "15,364,16"
                    }
                  }
                ],
                "src": {
                  "access": "15,363,8",
                  "name": "15,366,0",
                  "text": "15,362,8,48"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeLayout",
                "template": true,
                "text": "Occurs before componentLayout is run. In previous releases, this method could\nreturn `false` to prevent its layout but that is not supported in Ext JS 4.1 or\nhigher. This method is simply a notification of the impending layout to give the\ncomponent a chance to adjust the DOM. Ideally, DOM reads should be avoided at this\ntime to reduce expensive document reflows.\n",
                "src": {
                  "access": "3,2727,8",
                  "name": "3,2729,0",
                  "template": "3,2726,8",
                  "text": "3,2720,8,366"
                }
              },
              {
                "$type": "method",
                "name": "beforeQuery",
                "template": true,
                "text": "A method which may modify aspects of how the store is to be filtered (if {@link #cfg!queryMode #queryMode} is `\"local\"`)\nof loaded (if {@link #cfg!queryMode #queryMode} is `\"remote\"`).\n\nThis is called by the {@link #doQuery method, and may be overridden in subclasses to modify\nthe default behaviour.\n\nThis method is passed an object containing information about the upcoming query operation which it may modify\nbefore returning.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queryPlan",
                    "text": "An object containing details about the query to be executed.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "query",
                        "text": "The query value to be used to match against the ComboBox's {@link #cfg!valueField #valueField}.\n",
                        "type": "String",
                        "src": {
                          "name": "5,1279,34",
                          "text": "5,1279,40,80",
                          "type": "5,1279,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "lastQuery",
                        "text": "The query value used the last time a store query was made.\n",
                        "type": "String",
                        "src": {
                          "name": "5,1280,34",
                          "text": "5,1280,44,59",
                          "type": "5,1280,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "forceAll",
                        "text": "If `true`, causes the query to be executed even if the minChars threshold is not met.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "5,1281,35",
                          "text": "5,1281,44,86",
                          "type": "5,1281,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "cancel",
                        "text": "A boolean value which, if set to `true` upon return, causes the query not to be executed.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "5,1282,35",
                          "text": "5,1282,42,90",
                          "type": "5,1282,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "rawQuery",
                        "text": "If `true` indicates that the raw input field value is being used, and upon store load,\nthe input field value should **not** be overwritten.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "5,1283,35",
                          "text": "5,1283,44,87:5,1284,8,54",
                          "type": "5,1283,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "5,1278,24",
                      "text": "5,1278,34,61",
                      "type": "5,1278,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,1287,0",
                  "template": "5,1268,8",
                  "text": "5,1269,8,401"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeRender",
                "template": true,
                "text": "Allows additional behavior before rendering.\n\n**Note:** If the Component has a {@link Ext.Component#cfg!controller Ext.Component#controller}\nand the controller has a {@link Ext.app.ViewController#method!beforeRender Ext.app.ViewController#beforeRender}\nmethod it will be called passing the Component as the single param.\n",
                "src": {
                  "access": "20,398,8",
                  "name": "20,400,0",
                  "template": "20,397,8",
                  "text": "20,391,8,278"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beforeSetPosition",
                "text": "Template method called before a Component is positioned.\n\nEnsures that the position is adjusted so that the Component is constrained if so configured.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "3,2741,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "3,2741,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "src": {
                      "name": "3,2741,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,2736,8",
                  "name": "3,2741,0",
                  "text": "3,2737,8,151"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeShow",
                "template": true,
                "text": "Invoked before the Component is shown.\n",
                "src": {
                  "access": "3,2799,8",
                  "name": "3,2801,0",
                  "template": "3,2798,8",
                  "text": "3,2795,8,40"
                }
              },
              {
                "$type": "method",
                "name": "bindStore",
                "text": "Binds a store to this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "optional": true,
                    "text": "The store to bind or ID of the store.\nWhen no store given (or when `{@link null}` or `{@link undefined}` passed), unbinds the existing store.\n",
                    "type": "Ext.data.AbstractStore/String",
                    "src": {
                      "name": "5,1080,48",
                      "text": "5,1080,55,38:5,1081,8,88",
                      "type": "5,1080,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "preventFilter",
                    "optional": true,
                    "text": "`true` to prevent any active filter from being activated\non the newly bound store. This is only valid when used with {@link #cfg!queryMode #queryMode} `'local'`.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "5,1082,26",
                      "text": "5,1082,41,57:5,1083,8,90",
                      "type": "5,1082,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,1085,0",
                  "text": "5,1079,8,32"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "bindStoreListeners",
                "text": "Binds listeners for this component to the store. By default it will add\nanything bound by the getStoreListeners method, however it can be overridden\nin a subclass to provide any more complicated handling.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store to bind to\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "name": "22,93,40",
                      "text": "22,93,46,21",
                      "type": "22,93,16"
                    }
                  }
                ],
                "src": {
                  "access": "22,92,8",
                  "name": "22,95,0",
                  "text": "22,89,8,205"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "blur",
                "src": {
                  "access": "15,792,12",
                  "name": "15,794,0"
                }
              },
              {
                "$type": "method",
                "name": "bubble",
                "text": "Bubbles up the component/container hierarchy, calling the specified function with each component. The scope\n(*this*) of function call will be the scope provided or the current component. The arguments to the function will\nbe the args provided or the current component. If the function returns false at any point, the bubble is stopped.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call\n",
                    "type": "Function",
                    "src": {
                      "name": "3,2808,26",
                      "text": "3,2808,29,21",
                      "type": "3,2808,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope of the function. Defaults to current node.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,2809,25",
                      "text": "3,2809,32,53",
                      "type": "3,2809,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "optional": true,
                    "text": "The args to call the function with. Defaults to passing the current component.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,2810,24",
                      "text": "3,2810,30,79",
                      "type": "3,2810,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,2811,32,5",
                      "type": "3,2811,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,2813,0",
                  "text": "3,2804,8,337"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "cacheRefEls",
                "text": "Ensures that all elements with \"data-ref\" attributes get loaded into the cache.\nThis really helps on IE8 where `getElementById` is a search not a lookup. By\npopulating our cache with one search of the DOM we then have random access to\nthe elements as we do our `{@link #cfg!childEls childEls}` wire up.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "src": {
                      "name": "20,898,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,896,12",
                  "name": "20,898,0",
                  "text": "20,892,12,281"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "calculateAnchorXY",
                "text": "Calculates x,y coordinates specified by the anchor position on the element, adding\nextraX and extraY values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "optional": true,
                    "text": "The specified anchor position.\nSee {@link #method!alignTo #alignTo} for details on supported anchor positions.\n",
                    "type": "String",
                    "value": "'tl'",
                    "src": {
                      "name": "19,255,25",
                      "text": "19,255,38,31:19,256,8,64",
                      "type": "19,255,16",
                      "value": "19,255,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraX",
                    "optional": true,
                    "text": "value to be added to the x coordinate\n",
                    "type": "Number",
                    "src": {
                      "name": "19,257,25",
                      "text": "19,257,33,38",
                      "type": "19,257,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraY",
                    "optional": true,
                    "text": "value to be added to the y coordinate\n",
                    "type": "Number",
                    "src": {
                      "name": "19,258,25",
                      "text": "19,258,33,38",
                      "type": "19,258,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "optional": true,
                    "text": "An object containing the size to use for calculating anchor\nposition {width: (target width), height: (target height)} (defaults to the\nelement's current size)\n",
                    "type": "Object",
                    "src": {
                      "name": "19,259,25",
                      "text": "19,259,31,60:19,260,8,99",
                      "type": "19,259,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y] An array containing the element's x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "19,262,27,61",
                      "type": "19,262,17"
                    }
                  }
                ],
                "src": {
                  "access": "19,263,8",
                  "name": "19,265,0",
                  "text": "19,253,8,109"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "calculateConstrainedPosition",
                "text": "Calculates the new [x,y] position to move this Positionable into a constrain region.\n\nBy default, this Positionable is constrained to be within the container it was added to, or the element it was\nrendered to.\n\nPriority is given to constraining the top and left within the constraint.\n\nAn alternative constraint may be passed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "optional": true,
                    "text": "The Element or {@link Ext.util.Region}\ninto which this Component is to be constrained. Defaults to the element into which this Positionable\nwas rendered, or this Component's {@link Ext.Component#constrainTo.\n",
                    "type": "String/HTMLElement/Ext.dom.Element/Ext.util.Region",
                    "src": {
                      "name": "19,533,69",
                      "text": "19,533,82,46:19,534,8,169",
                      "type": "19,533,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedPosition",
                    "optional": true,
                    "text": "A proposed `[X, Y]` position to test for validity\nand to coerce into constraints instead of using this Positionable's current position.\n",
                    "type": "Number[]",
                    "src": {
                      "name": "19,536,27",
                      "text": "19,536,45,50:19,537,8,86",
                      "type": "19,536,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "The proposedPosition is local *(relative to floatParent if a floating Component)*\n",
                    "type": "Boolean",
                    "src": {
                      "name": "19,538,26",
                      "text": "19,538,33,82",
                      "type": "19,538,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedSize",
                    "optional": true,
                    "text": "A proposed `[width, height]` size to use when calculating\nconstraints instead of using this Positionable's current size.\n",
                    "type": "Number[]",
                    "src": {
                      "name": "19,539,27",
                      "text": "19,539,41,58:19,540,8,63",
                      "type": "19,539,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**If** the element *needs* to be translated, the new `[X, Y]` position within\nconstraints if possible, giving priority to keeping the top and left edge in the constrain region.\nOtherwise, `false`.\n",
                    "type": "Number[]",
                    "src": {
                      "text": "19,541,27,78:19,542,8,119",
                      "type": "19,541,17"
                    }
                  }
                ],
                "src": {
                  "access": "19,544,8",
                  "name": "19,546,0",
                  "text": "19,525,8,327"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "18,1251,37",
                      "text": "18,1251,42,57:18,1252,12,67",
                      "type": "18,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "18,1253,29,48",
                      "type": "18,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "18,1250,12",
                  "name": "18,1255,0",
                  "text": "18,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "18,1338,37",
                      "text": "18,1338,42,57:18,1339,12,66",
                      "type": "18,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "18,1340,29,52",
                      "type": "18,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "18,1337,12",
                  "name": "18,1342,0",
                  "text": "18,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "cancelFocus",
                "text": "Cancel any deferred focus on this component\n",
                "src": {
                  "access": "15,296,8",
                  "name": "15,298,0",
                  "text": "15,295,8,44"
                }
              },
              {
                "$type": "method",
                "name": "center",
                "text": "Center this Component in its container.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "1,516,32,5",
                      "type": "1,516,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,518,0",
                  "text": "1,515,8,40"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "changeConstraint",
                "items": [
                  {
                    "$type": "param",
                    "name": "newValue",
                    "src": {
                      "name": "3,5826,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldValue",
                    "src": {
                      "name": "3,5826,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "constrainMethod",
                    "src": {
                      "name": "3,5826,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "styleName",
                    "src": {
                      "name": "3,5826,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sizeName",
                    "src": {
                      "name": "3,5826,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,5824,12",
                  "name": "3,5826,0"
                }
              },
              {
                "$type": "method",
                "name": "checkChange",
                "text": "Checks whether the value of the field has changed since the last time it was checked.\nIf the value has changed, it:\n\n1. Fires the {@link #event!change #change},\n2. Performs validation if the {@link #cfg!validateOnChange #validateOnChange} config is enabled, firing the\n   {@link #event!validitychange #validitychange} if the validity has changed, and\n3. Checks the {@link #method!isDirty #isDirty} of the field and fires the {@link #event!dirtychange #dirtychange}\n   if it has changed.\n",
                "src": {
                  "name": "14,349,0",
                  "text": "14,340,8,458"
                }
              },
              {
                "$type": "method",
                "name": "checkDirty",
                "text": "Checks the {@link #method!isDirty #isDirty} state of the field and if it has changed since the last time it was checked,\nfires the {@link #event!dirtychange #dirtychange} event.\n",
                "src": {
                  "name": "14,421,0",
                  "text": "14,418,8,143"
                }
              },
              {
                "$type": "method",
                "name": "cleanupField",
                "text": "Cleans up values initialized by this Field mixin on the current instance.\nComponents using this mixin should call this method before being destroyed.\n",
                "src": {
                  "name": "14,196,0",
                  "text": "14,193,8,150"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "clearDelegatedListeners",
                "text": "Clears all listeners that were attached using the \"delegate\" event option.\nUsers should not invoke this method directly.  It is called automatically as\npart of normal {@link Ext.util.Observable#method!clearListeners Ext.util.Observable#clearListeners}\nprocessing.\n",
                "src": {
                  "access": "17,59,12",
                  "name": "17,65,0",
                  "text": "17,60,12,237"
                }
              },
              {
                "$type": "method",
                "name": "clearInvalid",
                "text": "Clear any invalid styles/messages for this field.\n\n**Note**: this method does not cause the Field's {@link #method!validate #validate} or {@link #method!isValid #isValid} methods to return `true`\nif the value does not _pass_ validation. So simply clearing a field's errors will not necessarily allow\nsubmission of forms submitted with the {@link Ext.form.action.Submit#cfg!clientValidation Ext.form.action.Submit#clientValidation} option set.\n",
                "src": {
                  "name": "8,877,0",
                  "text": "8,871,8,366"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "11,1255,0",
                  "text": "11,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "11,1291,0",
                  "text": "11,1289,11,47"
                }
              },
              {
                "$type": "method",
                "name": "clearValue",
                "text": "Clears any value currently set in the ComboBox.\n",
                "src": {
                  "name": "5,2226,0",
                  "text": "5,2224,8,48"
                }
              },
              {
                "$type": "method",
                "name": "cloneConfig",
                "text": "Clone the current component using the original config values passed into this instance by default.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "overrides",
                    "text": "A new config containing any properties to override in the cloned version.\nAn id property can be passed on this object, otherwise one will be generated to avoid duplicates.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,2832,24",
                      "text": "3,2832,34,74:3,2833,8,98",
                      "type": "3,2832,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "clone The cloned copy of this component\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,2834,32,40",
                      "type": "3,2834,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,2836,0",
                  "text": "3,2831,8,99"
                }
              },
              {
                "$type": "method",
                "name": "collapse",
                "text": "Collapses this field's picker dropdown.\n",
                "src": {
                  "name": "9,300,0",
                  "text": "9,298,8,40"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "collapseIf",
                "text": "Runs on touchstart of doc to check to see if we should collapse the picker.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "9,335,0"
                    }
                  }
                ],
                "src": {
                  "access": "9,332,8",
                  "name": "9,335,0",
                  "text": "9,333,8,76"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constrainBox",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "src": {
                      "name": "19,866,0"
                    }
                  }
                ],
                "src": {
                  "access": "19,864,8",
                  "name": "19,866,0"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The configuration options may be specified as either:\n\n- **an element** : it is set as the internal element and its id used as the component id\n- **a string** : it is assumed to be the id of an existing element and is used as the component id\n- **anything else** : it is assumed to be a standard config object and is applied to the component\n",
                    "type": "Ext.dom.Element/String/Object",
                    "src": {
                      "name": "3,1984,47",
                      "text": "3,1984,54,54:3,1985,8,288",
                      "type": "3,1984,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1990,0",
                  "text": "3,1983,8,23"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constructPlugin",
                "items": [
                  {
                    "$type": "param",
                    "name": "ptype",
                    "text": "string or config object containing a ptype property.\n\nConstructs a plugin according to the passed config object/ptype string.\n\nEnsures that the constructed plugin always has a `cmp` reference back to this component.\nThe setting up of this is done in PluginManager. The PluginManager ensures that a reference to this\ncomponent is passed to the constructor. It also ensures that the plugin's `setCmp` method (if any) is called.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,5849,35",
                      "text": "3,5849,41,53:3,5850,12,373",
                      "type": "3,5849,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,5856,12",
                  "name": "3,5858,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constructPlugins",
                "text": "Returns an array of fully constructed plugin instances. This converts any configs into their\nappropriate instances.\n\nIt does not mutate the plugins array. It creates a new array.\n",
                "src": {
                  "access": "3,5877,12",
                  "name": "3,5879,0",
                  "text": "3,5873,12,179"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createPicker",
                "text": "Creates the {@link Ext.picker.Time}\n",
                "src": {
                  "access": "0,436,8",
                  "name": "0,439,0",
                  "text": "0,437,8,36"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "11,1522,27",
                      "text": "11,1522,35,55",
                      "type": "11,1522,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "11,1523,26",
                      "text": "11,1523,35,61",
                      "type": "11,1523,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "11,1524,20"
                    }
                  }
                ],
                "src": {
                  "access": "11,1520,11",
                  "name": "11,1526,0",
                  "text": "11,1521,11,103"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "since": "1.1.0",
                "text": "Destroys the Component. This method must not be overridden.\nTo add extra functionality to destruction time in a subclass, implement the\ntemplate method {@link #method!beforeDestroy #beforeDestroy} or {@link #method!onDestroy #onDestroy}. And do not forget to\n`callParent()` in your implementation.\n",
                "src": {
                  "name": "3,2857,0",
                  "since": "3,2855,15",
                  "text": "3,2851,8,258"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "didValueChange",
                "text": "Checks if the value has changed. Allows subclasses to override for\nany more complex logic.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newVal",
                    "src": {
                      "name": "14,370,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldVal",
                    "src": {
                      "name": "14,370,0"
                    }
                  }
                ],
                "src": {
                  "access": "14,366,8",
                  "name": "14,370,0",
                  "text": "14,367,8,91"
                }
              },
              {
                "$type": "method",
                "name": "disable",
                "since": "1.1.0",
                "text": "Disable the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "silent",
                    "optional": true,
                    "text": "Passing `true` will suppress the `disable` event from being fired.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,2948,26",
                      "text": "3,2948,40,67",
                      "type": "3,2948,16",
                      "value": "3,2948,33"
                    }
                  }
                ],
                "src": {
                  "name": "3,2951,0",
                  "since": "3,2949,15",
                  "text": "3,2947,8,23"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doAlign",
                "text": "Performs the alignment on the picker using the class defaults\n",
                "src": {
                  "access": "9,279,8",
                  "name": "9,281,0",
                  "text": "9,278,8,62"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doApplyRenderTpl",
                "text": "Called from the selected frame generation template to insert this Component's inner structure inside the framing structure.\n\nWhen framing is used, a selected frame generation template is used as the primary template of the #getElConfig instead\nof the configured {@link Ext.Component#cfg!renderTpl Ext.Component#renderTpl}. The renderTpl is invoked by this method which is injected into the framing template.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "out",
                    "src": {
                      "name": "20,464,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "values",
                    "src": {
                      "name": "20,464,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,458,8",
                  "name": "20,464,0",
                  "text": "20,459,8,390"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doAutoRender",
                "text": "Handles autoRender.\nFloating Components may have an ownerCt. If they are asking to be constrained, constrain them within that\nownerCt, and have their z-index managed locally. Floating Components are always rendered to document.body\n",
                "src": {
                  "access": "20,920,12",
                  "name": "20,922,0",
                  "text": "20,917,12,232"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doAutoSelect",
                "text": "If the autoSelect config is true, and the picker is open, highlights the first item.\n",
                "src": {
                  "access": "5,1438,8",
                  "name": "5,1441,0",
                  "text": "5,1439,8,85"
                }
              },
              {
                "$type": "method",
                "name": "doConstrain",
                "text": "Moves this floating Component into a constrain region.\n\nBy default, this Component is constrained to be within the container it was added to, or the element it was\nrendered to.\n\nAn alternative constraint may be passed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "optional": true,
                    "text": "The Element or {@link Ext.util.Region}\ninto which this Component is to be constrained. Defaults to the element into which this floating Component\nwas rendered.\n",
                    "type": "String/HTMLElement/Ext.dom.Element/Ext.util.Region",
                    "src": {
                      "name": "1,399,69",
                      "text": "1,399,82,46:1,400,8,121",
                      "type": "1,399,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,403,0",
                  "text": "1,393,8,219"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireDelegatedEvent",
                "text": "Fires a delegated event.  Users should not invoke this method directly.  It\nis called automatically by the framework as needed (see the \"delegate\" event\noption of {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} for more\ndetails.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "17,88,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "17,88,0"
                    }
                  }
                ],
                "src": {
                  "access": "17,82,12",
                  "name": "17,88,0",
                  "text": "17,83,12,233"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "11,761,27",
                      "type": "11,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "11,762,26",
                      "type": "11,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "11,763,28",
                      "type": "11,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "11,759,11",
                  "name": "11,765,0",
                  "text": "11,758,11,24"
                }
              },
              {
                "$type": "method",
                "name": "doQuery",
                "text": "Executes a query to filter the dropdown list. Fires the {@link #event!beforequery #beforequery} event prior to performing the query\nallowing the query action to be canceled if needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queryString",
                    "text": "The string to use to filter available items by matching against the configured {@link #cfg!valueField #valueField}.\n",
                    "type": "String",
                    "src": {
                      "name": "5,1210,24",
                      "text": "5,1210,36,100",
                      "type": "5,1210,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "forceAll",
                    "optional": true,
                    "text": "`true` to force the query to execute even if there are currently fewer characters in\nthe field than the minimum specified by the `{@link #cfg!minChars #minChars}` config option. It also clears any filter\npreviously saved in the current store.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "5,1211,26",
                      "text": "5,1211,42,85:5,1212,8,144",
                      "type": "5,1211,16",
                      "value": "5,1211,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rawQuery",
                    "optional": true,
                    "text": "Pass as true if the raw typed value is being used as the query string. This causes the\nresulting store load to leave the raw value undisturbed.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "5,1214,26",
                      "text": "5,1214,42,87:5,1215,8,57",
                      "type": "5,1214,16",
                      "value": "5,1214,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if the query was permitted to run, false if it was cancelled by a {@link #event!beforequery #beforequery}\nhandler.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "5,1216,26,92:5,1217,8,9",
                      "type": "5,1216,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,1219,0",
                  "text": "5,1207,8,166"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doRawQuery",
                "text": "Execute the query with the raw contents within the textfield.\n",
                "src": {
                  "access": "5,1191,8",
                  "name": "5,1194,0",
                  "text": "5,1192,8,62"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doSetValue",
                "text": "Sets or adds a value/values\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "src": {
                      "name": "5,1884,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "add",
                    "src": {
                      "name": "5,1884,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,1881,8",
                  "name": "5,1884,0",
                  "text": "5,1882,8,28"
                }
              },
              {
                "$type": "method",
                "name": "enable",
                "since": "1.1.0",
                "text": "Enable the component\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "silent",
                    "optional": true,
                    "text": "Passing `true` will suppress the `enable` event from being fired.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,3006,26",
                      "text": "3,3006,40,66",
                      "type": "3,3006,16",
                      "value": "3,3006,33"
                    }
                  }
                ],
                "src": {
                  "name": "3,3009,0",
                  "since": "3,3007,15",
                  "text": "3,3005,8,21"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "11,1567,36",
                      "text": "11,1567,47,54",
                      "type": "11,1567,19"
                    }
                  }
                ],
                "src": {
                  "name": "11,1569,0",
                  "text": "11,1534,11,1138"
                }
              },
              {
                "$type": "method",
                "name": "ensureAttachedToBody",
                "text": "Ensures that this component is attached to `document.body`. If the component was\nrendered to {@link Ext#method!getDetachedBody Ext#getDetachedBody}, then it will be appended to `document.body`.\nAny configured position is also restored.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "runLayout",
                    "optional": true,
                    "text": "True to run the component's layout.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "20,837,26",
                      "text": "20,837,43,36",
                      "type": "20,837,16",
                      "value": "20,837,36"
                    }
                  }
                ],
                "src": {
                  "name": "20,839,0",
                  "text": "20,834,8,209"
                }
              },
              {
                "$type": "method",
                "name": "expand",
                "text": "Expands this field's picker dropdown.\n",
                "src": {
                  "name": "9,207,0",
                  "text": "9,205,8,38"
                }
              },
              {
                "$type": "method",
                "name": "extractFileInput",
                "text": "Only relevant if the instance's {@link #method!isFileUpload #isFileUpload} method returns true. Returns a reference to the file input\nDOM element holding the user's selected file. The input will be appended into the submission form and will not be\nreturned, so this method should also create a replacement.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "HTMLElement",
                    "src": {
                      "type": "14,553,17"
                    }
                  }
                ],
                "src": {
                  "name": "14,555,0",
                  "text": "14,550,8,286"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "filterKeys",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "4,1081,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,1079,8",
                  "name": "4,1081,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "findFocusTarget",
                "text": "Finds an alternate Component to focus if this Component is disabled while focused, or\nfocused while disabled, or otherwise unable to focus.\n\nIn both cases, focus must not be lost to document.body, but must move to an intuitively\nconnectible Component, either a sibling, or uncle or nephew.\n\nThis is both for the convenience of keyboard users, and also for when focus is tracked\nwithin a Component tree such as for ComboBoxes and their dropdowns.\n\nFor example, a ComboBox with a PagingToolbar in is BoundList. If the \"Next Page\"\nbutton is hit, the LoadMask shows and focuses, the next page is the last page, so\nthe \"Next Page\" button is disabled. When the LoadMask hides, it attempt to focus the\nlast focused Component which is the disabled \"Next Page\" button. In this situation,\nfocus should move to a sibling within the PagingToolbar.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A closely related focusable Component to which focus can move.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "15,636,36,63",
                      "type": "15,636,21"
                    }
                  }
                ],
                "src": {
                  "access": "15,637,12",
                  "name": "15,639,0",
                  "text": "15,621,12,837"
                }
              },
              {
                "$type": "method",
                "name": "findParentBy",
                "text": "Find a container above this component at any level by a custom function. If the passed function returns true, the\ncontainer will be returned.\n\nSee also the {@link Ext.Component#method!up Ext.Component#up} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The custom function to call with the arguments (container, this component).\n",
                    "type": "Function",
                    "src": {
                      "name": "3,3059,26",
                      "text": "3,3059,29,76",
                      "type": "3,3059,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first Container for which the custom function returns true\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "text": "3,3060,42,63",
                      "type": "3,3060,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3062,0",
                  "text": "3,3054,8,193"
                }
              },
              {
                "$type": "method",
                "name": "findParentByType",
                "text": "Find a container above this component at any level by xtype or class\n\nSee also the {@link Ext.Component#method!up Ext.Component#up} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xtype",
                    "text": "The xtype string for a component, or the class of the component directly\n",
                    "type": "String/Ext.Class",
                    "src": {
                      "name": "3,3077,34",
                      "text": "3,3077,40,73",
                      "type": "3,3077,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first Container which matches the given xtype or class\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "text": "3,3078,42,59",
                      "type": "3,3078,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3080,0",
                  "text": "3,3073,8,120"
                }
              },
              {
                "$type": "method",
                "name": "findPlugin",
                "text": "Retrieves plugin from this component's collection by its `ptype`.\n\n    var grid = Ext.create('Ext.grid.Panel', {\n        store: {\n            fields: ['name'],\n            data: [{\n                name: 'Scott Pilgrim'\n            }]\n        },\n        columns: [{\n            header: 'Name',\n            dataIndex: 'name',\n            editor: 'textfield',\n            flex: 1\n        }],\n        selType: 'cellmodel',\n        plugins: {\n            ptype: 'cellediting',\n            clicksToEdit: 1,\n            pluginId: 'myplugin'\n        },\n        height: 200,\n        width: 400,\n        renderTo: Ext.getBody()\n    });\n\n    grid.findPlugin('cellediting');  // the cellediting plugin\n\n**Note:** See also {@link #method!getPlugin #getPlugin}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ptype",
                    "text": "The Plugin's `ptype` as specified by the class's\n{@link Ext.Class#cfg!alias Ext.Class#cfg-alias} configuration.\n",
                    "type": "String",
                    "src": {
                      "name": "3,3120,24",
                      "text": "3,3120,30,49:3,3121,8,49",
                      "type": "3,3120,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "plugin instance or `{@link undefined}` if not found\n",
                    "type": "Ext.plugin.Abstract",
                    "src": {
                      "text": "3,3122,38,44",
                      "type": "3,3122,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3124,0",
                  "text": "3,3090,8,730"
                }
              },
              {
                "$type": "method",
                "name": "findRecord",
                "text": "Finds the record by searching for a specific field/value combination.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The name of the field to test.\n",
                    "type": "String",
                    "src": {
                      "name": "5,1788,24",
                      "text": "5,1788,30,31",
                      "type": "5,1788,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to match the field against.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,1789,24",
                      "text": "5,1789,30,38",
                      "type": "5,1789,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched record or false.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "5,1790,33,29",
                      "type": "5,1790,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,1792,0",
                  "text": "5,1787,8,70"
                }
              },
              {
                "$type": "method",
                "name": "findRecordByDisplay",
                "text": "Finds the record by searching values in the {@link #cfg!displayField #displayField}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to match the field against.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,1820,24",
                      "text": "5,1820,30,38",
                      "type": "5,1820,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched record or `false`.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "5,1821,33,31",
                      "type": "5,1821,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,1823,0",
                  "text": "5,1819,8,67"
                }
              },
              {
                "$type": "method",
                "name": "findRecordByValue",
                "text": "Finds the record by searching values in the {@link #cfg!valueField #valueField}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to match the field against.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "0,469,31",
                      "text": "0,469,37,38",
                      "type": "0,469,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched record or false.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,470,33,29",
                      "type": "0,470,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,472,0",
                  "text": "0,468,8,65"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "finishRender",
                "text": "This method visits the rendered component tree in a \"top-down\" order. That is, this\ncode runs on a parent component before running on a child. This method calls the\n{@link #method!onRender #onRender} method of each component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "containerIdx",
                    "text": "The index into the Container items of this Component.\n",
                    "type": "Number",
                    "src": {
                      "name": "20,1008,28",
                      "text": "20,1008,41,54",
                      "type": "20,1008,20"
                    }
                  }
                ],
                "src": {
                  "access": "20,1010,12",
                  "name": "20,1012,0",
                  "text": "20,1005,12,209"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #fireEventAction} instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n`{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "11,640,28",
                      "text": "11,640,38,31",
                      "type": "11,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "11,641,27",
                      "text": "11,641,32,58",
                      "type": "11,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "11,642,30",
                      "text": "11,642,33,21",
                      "type": "11,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "11,643,29",
                      "text": "11,643,36,62:11,644,12,72",
                      "type": "11,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`\n",
                    "type": "Object",
                    "src": {
                      "name": "11,645,29",
                      "text": "11,645,38,52:11,646,12,72",
                      "type": "11,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}` for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "11,647,29",
                      "text": "11,647,45,47:11,648,12,394",
                      "type": "11,647,20",
                      "value": "11,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "11,653,12",
                  "deprecatedVersion": "11,653,12",
                  "name": "11,655,0",
                  "text": "11,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}).\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "11,568,27",
                      "text": "11,568,37,31",
                      "type": "11,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "11,569,30",
                      "text": "11,569,35,54",
                      "type": "11,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "11,570,29,77",
                      "type": "11,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,572,0",
                  "text": "11,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "11,605,27",
                      "text": "11,605,37,31",
                      "type": "11,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "11,606,29",
                      "text": "11,606,34,53",
                      "type": "11,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "11,607,29,77",
                      "type": "11,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,609,0",
                  "text": "11,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "11,721,28",
                      "text": "11,721,38,31",
                      "type": "11,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "11,722,27",
                      "text": "11,722,32,58",
                      "type": "11,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "11,723,37",
                      "text": "11,723,40,21",
                      "type": "11,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "11,724,29",
                      "text": "11,724,36,62:11,725,12,72",
                      "type": "11,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "11,726,36",
                      "text": "11,726,44,47:11,727,12,201",
                      "type": "11,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,731,0",
                  "text": "11,714,12,409"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fireHierarchyEvent",
                "since": "4.2.0",
                "text": "This method fires an event on `{@link Ext.GlobalEvents}` allowing interested parties to know\nof certain critical events for this component. This is done globally because the\n(few) listeners can immediately receive the event rather than bubbling the event\nonly to reach the top and have no listeners.\n\nThe main usage for these events is to do with floating components. For example, the\nload mask is a floating component. The component it is masking may be inside several\ncontainers. As such, they need to know when component is hidden, either directly, or\nvia a parent container being hidden. To do this they subscribe to these events and\nfilter out the appropriate container.\n\nThis functionality is contained in Component (as opposed to Container) because a\nComponent can be the ownerCt for a floating component (loadmask), and the loadmask\nneeds to know when its owner is shown/hidden so that its hidden state can be\nsynchronized.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The event name.\n",
                    "type": "String",
                    "src": {
                      "name": "3,5986,28",
                      "text": "3,5986,38,16",
                      "type": "3,5986,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,5988,12",
                  "name": "3,5990,0",
                  "since": "3,5987,19",
                  "text": "3,5970,12,925"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fireKey",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "8,712,0"
                    }
                  }
                ],
                "src": {
                  "access": "8,710,8",
                  "name": "8,712,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fitContainer",
                "items": [
                  {
                    "$type": "param",
                    "name": "animate",
                    "src": {
                      "name": "1,545,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,543,8",
                  "name": "1,545,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fixReference",
                "text": "Sets up a reference on our current reference holder.\n",
                "src": {
                  "access": "23,335,12",
                  "name": "23,337,0",
                  "text": "23,333,12,54"
                }
              },
              {
                "$type": "method",
                "name": "focus",
                "text": "Try to focus this component.\n\nIf this component is disabled, a close relation will be targeted for focus instead\nto keep focus localized for keyboard users.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selectText",
                    "optional": true,
                    "text": "If applicable, `true` to also select all the text in this component, or an array consisting of start and end (defaults to start) position of selection.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "15,202,24",
                      "text": "15,202,36,152",
                      "type": "15,202,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "delay",
                    "optional": true,
                    "text": "Delay the focus this number of milliseconds (true for 10 milliseconds).\n",
                    "type": "Boolean/Number",
                    "src": {
                      "name": "15,203,33",
                      "text": "15,203,40,72",
                      "type": "15,203,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "Only needed if the `delay` parameter is used. A function to call upon focus.\n",
                    "type": "Function",
                    "src": {
                      "name": "15,204,27",
                      "text": "15,204,37,77",
                      "type": "15,204,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "Only needed if the `delay` parameter is used. The scope (`this` reference) in which to execute the callback.\n",
                    "type": "Function",
                    "src": {
                      "name": "15,205,27",
                      "text": "15,205,34,109",
                      "type": "15,205,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The focused Component. Usually `this` Component. Some Containers may\ndelegate focus to a descendant Component ({@link Ext.window.Window}s can do this through their\n{@link Ext.window.Window#cfg!defaultFocus Ext.window.Window#defaultFocus} config option. If this component is disabled, a closely\nrelated component will be focused and that will be returned.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "15,206,32,69:15,207,8,271",
                      "type": "15,206,17"
                    }
                  }
                ],
                "src": {
                  "name": "15,211,0",
                  "text": "15,198,8,157"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #updateLayout} instead.\n",
                "deprecatedVersion": "4.1",
                "inheritdoc": "Ext.Component#updateLayout",
                "name": "forceComponentLayout",
                "src": {
                  "deprecatedMessage": "3,6510,20",
                  "deprecatedVersion": "3,6510,20",
                  "inheritdoc": "3,6509,20",
                  "name": "3,6508,28"
                }
              },
              {
                "$type": "method",
                "name": "getActiveAnimation",
                "text": "Returns the current animation if this object has any effects actively running or queued, else returns false.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Anim if element has active effects, else false\n",
                    "type": "Ext.fx.Anim/Boolean",
                    "src": {
                      "text": "21,368,38,47",
                      "type": "21,368,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,370,0",
                  "text": "21,367,8,109"
                }
              },
              {
                "$type": "method",
                "name": "getActiveError",
                "text": "Gets the active error message for this component, if any. This does not trigger validation on its own, it merely\nreturns any message that the component may already hold.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The active error message on the component; if there is no error, an empty string is returned.\n",
                    "type": "String",
                    "src": {
                      "text": "2,779,25,94",
                      "type": "2,779,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,781,0",
                  "text": "2,777,8,170"
                }
              },
              {
                "$type": "method",
                "name": "getActiveErrors",
                "text": "Gets an Array of any active error messages currently applied to the field. This does not trigger validation on\nits own, it merely returns any messages that the component may already hold.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The active error messages on the component; if there are no errors, an empty Array is\nreturned.\n",
                    "type": "String[]",
                    "src": {
                      "text": "2,809,27,86:2,810,8,10",
                      "type": "2,809,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,812,0",
                  "text": "2,807,8,188"
                }
              },
              {
                "$type": "method",
                "name": "getAlignToXY",
                "text": "Gets the x,y coordinates to align this element with another element. See\n{@link #method!alignTo #alignTo} for more info on the supported position values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "text": "The Positionable,\nHTMLElement, or id of the element to align to.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String",
                    "src": {
                      "name": "19,319,58",
                      "text": "19,319,66,18:19,320,8,47",
                      "type": "19,319,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "The position to align to\n",
                    "type": "String",
                    "value": "\"tl-bl?\"",
                    "src": {
                      "name": "19,321,25",
                      "text": "19,321,44,25",
                      "type": "19,321,16",
                      "value": "19,321,34"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "offsets",
                    "optional": true,
                    "text": "Offset the positioning by [x, y]\n",
                    "type": "Number[]",
                    "src": {
                      "name": "19,322,27",
                      "text": "19,322,36,33",
                      "type": "19,322,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y]\n",
                    "type": "Number[]",
                    "src": {
                      "text": "19,323,27,7",
                      "type": "19,323,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,325,0",
                  "text": "19,317,8,138"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAnchorToXY",
                "text": "Gets the x,y coordinates of an element specified by the anchor position on the\nelement.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "19,25,33",
                      "text": "19,25,36,12",
                      "type": "19,25,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anchor",
                    "optional": true,
                    "text": "The specified anchor position.\nSee {@link #method!alignTo #alignTo} for details on supported anchor positions.\n",
                    "type": "String",
                    "value": "'tl'",
                    "src": {
                      "name": "19,26,25",
                      "text": "19,26,38,31:19,27,8,64",
                      "type": "19,26,16",
                      "value": "19,26,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "True to get the local (element top/left-relative) anchor\nposition instead of page coordinates\n",
                    "type": "Boolean",
                    "src": {
                      "name": "19,28,26",
                      "text": "19,28,33,57:19,29,8,37",
                      "type": "19,28,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "optional": true,
                    "text": "An object containing the size to use for calculating anchor\nposition {width: (target width), height: (target height)} (defaults to the\nelement's current size)\n",
                    "type": "Object",
                    "src": {
                      "name": "19,30,25",
                      "text": "19,30,31,60:19,31,8,99",
                      "type": "19,30,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y] An array containing the element's x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "19,33,27,61",
                      "type": "19,33,17"
                    }
                  }
                ],
                "src": {
                  "access": "19,34,8",
                  "name": "19,36,0",
                  "text": "19,23,8,88"
                }
              },
              {
                "$type": "method",
                "name": "getAnchorXY",
                "text": "Gets the x,y coordinates specified by the anchor position on the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "optional": true,
                    "text": "The specified anchor position.\nSee {@link #method!alignTo #alignTo} for details on supported anchor positions.\n",
                    "type": "String",
                    "value": "'tl'",
                    "src": {
                      "name": "19,448,25",
                      "text": "19,448,38,31:19,449,8,64",
                      "type": "19,448,16",
                      "value": "19,448,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "True to get the local (element top/left-relative) anchor\nposition instead of page coordinates\n",
                    "type": "Boolean",
                    "src": {
                      "name": "19,450,26",
                      "text": "19,450,33,57:19,451,8,37",
                      "type": "19,450,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "optional": true,
                    "text": "An object containing the size to use for calculating anchor\nposition {width: (target width), height: (target height)} (defaults to the\nelement's current size)\n",
                    "type": "Object",
                    "src": {
                      "name": "19,452,25",
                      "text": "19,452,31,60:19,453,8,99",
                      "type": "19,452,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y] An array containing the element's x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "19,455,27,61",
                      "type": "19,455,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,457,0",
                  "text": "19,447,8,74"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAnimationProps",
                "text": "Get animation properties\n",
                "src": {
                  "access": "21,306,8",
                  "name": "21,309,0",
                  "text": "21,307,8,25"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAriaLabelEl",
                "text": "Find component(s) that label or describe this component,\nand return the id(s) of their ariaEl elements.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "reference",
                    "optional": true,
                    "text": "Component reference,\nor array of component references, or a function that should return\nthe proper attribute string. The function will be called in the\ncontext of the labelled component.\n",
                    "type": "Function/String/String[]",
                    "src": {
                      "name": "6,72,47",
                      "text": "6,72,58,21:6,73,12,167",
                      "type": "6,72,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Element id string, or null\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "6,77,34,27",
                      "type": "6,77,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,78,12",
                  "name": "6,80,0",
                  "text": "6,69,12,105"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAutoId",
                "src": {
                  "access": "3,6003,12",
                  "name": "3,6005,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBorderPadding",
                "text": "Returns the size of the element's borders and padding.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "an object with the following numeric properties\n- beforeX\n- afterX\n- beforeY\n- afterY\n",
                    "type": "Object",
                    "src": {
                      "text": "19,42,25,48:19,43,8,38",
                      "type": "19,42,17"
                    }
                  }
                ],
                "src": {
                  "access": "19,47,8",
                  "name": "19,49,0",
                  "text": "19,41,8,55"
                }
              },
              {
                "$type": "method",
                "name": "getBox",
                "text": "Return an object defining the area of this Element which can be passed to\n{@link #method!setBox #setBox} to set another Element's size/location to match this element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "contentBox",
                    "optional": true,
                    "text": "If true a box for the content of the element is\nreturned.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "19,474,26",
                      "text": "19,474,38,48:19,475,8,10",
                      "type": "19,474,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "If true the element's left and top relative to its\n`offsetParent` are returned instead of page x/y.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "19,476,26",
                      "text": "19,476,33,51:19,477,8,49",
                      "type": "19,476,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object in the format\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "x",
                        "text": "The element's X position.\n",
                        "type": "Number",
                        "src": {
                          "name": "19,479,32",
                          "text": "19,479,34,26",
                          "type": "19,479,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "y",
                        "text": "The element's Y position.\n",
                        "type": "Number",
                        "src": {
                          "name": "19,480,32",
                          "text": "19,480,34,26",
                          "type": "19,480,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "width",
                        "text": "The element's width.\n",
                        "type": "Number",
                        "src": {
                          "name": "19,481,32",
                          "text": "19,481,38,21",
                          "type": "19,481,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "text": "The element's height.\n",
                        "type": "Number",
                        "src": {
                          "name": "19,482,32",
                          "text": "19,482,39,22",
                          "type": "19,482,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "bottom",
                        "text": "The element's lower bound.\n",
                        "type": "Number",
                        "src": {
                          "name": "19,483,32",
                          "text": "19,483,39,27",
                          "type": "19,483,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "right",
                        "text": "The element's rightmost bound.\n\nThe returned object may also be addressed as an Array where index 0 contains the X\nposition and index 1 contains the Y position. The result may also be used for\n{@link #method!setXY #setXY}\n",
                        "type": "Number",
                        "src": {
                          "name": "19,484,32",
                          "text": "19,484,38,31:19,485,8,177",
                          "type": "19,484,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "19,478,25,24",
                      "type": "19,478,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,490,0",
                  "text": "19,471,8,153"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "11,793,41,63",
                      "type": "11,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "11,792,11",
                  "name": "11,795,0",
                  "text": "11,791,11,43"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getBubbleTarget",
                "text": "Implements an upward event bubbling policy. By default a Component bubbles events up to its {@link #method!getRefOwner #getRefOwner}.\n\nComponent subclasses may implement a different bubbling strategy by overriding this method.\n",
                "src": {
                  "access": "3,3144,8",
                  "name": "3,3149,0",
                  "text": "3,3145,8,223"
                }
              },
              {
                "$type": "method",
                "name": "getClientRegion",
                "text": "Returns a region object that defines the client area of this element.\n\nThat is, the area *within* any scrollbars.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A Region containing \"top, left, bottom, right\" properties.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "19,735,34,59",
                      "type": "19,735,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,737,0",
                  "text": "19,732,8,114"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "18,1469,29",
                      "text": "18,1469,35,40",
                      "type": "18,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "18,1470,30",
                      "text": "18,1470,42,60",
                      "type": "18,1470,20",
                      "value": "18,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "18,1471,29,27",
                      "type": "18,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "18,1473,0",
                  "text": "18,1466,12,151"
                }
              },
              {
                "$type": "method",
                "name": "getConstrainRegion",
                "text": "Returns the content region of this element for purposes of constraining floating\nchildren.  That is the region within the borders and scrollbars, but not within the padding.\n",
                "src": {
                  "name": "19,596,0",
                  "text": "19,593,8,174"
                }
              },
              {
                "$type": "method",
                "name": "getConstrainVector",
                "text": "Returns the `[X, Y]` vector by which this Positionable's element must be translated to make a best\nattempt to constrain within the passed constraint. Returns `false` if the element\ndoes not need to be moved.\n\nPriority is given to constraining the top and left within the constraint.\n\nThe constraint may either be an existing element into which the element is to be\nconstrained, or a {@link Ext.util.Region} into which this element is to be\nconstrained.\n\nBy default, any extra shadow around the element is **not** included in the constrain calculations - the edges\nof the element are used as the element bounds. To constrain the shadow within the constrain region, set the\n`constrainShadow` property on this element to `true`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "optional": true,
                    "text": "The\nPositionable, HTMLElement, element id, or Region into which the element is to be\nconstrained.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String/Ext.util.Region",
                    "src": {
                      "name": "19,637,75",
                      "text": "19,637,88,4:19,638,8,94",
                      "type": "19,637,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedPosition",
                    "optional": true,
                    "text": "A proposed `[X, Y]` position to test for validity\nand to produce a vector for instead of using the element's current position\n",
                    "type": "Number[]",
                    "src": {
                      "name": "19,640,27",
                      "text": "19,640,45,50:19,641,8,76",
                      "type": "19,640,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedSize",
                    "optional": true,
                    "text": "A proposed `[width, height]` size to constrain\ninstead of using the element's current size\n",
                    "type": "Number[]",
                    "src": {
                      "name": "19,642,27",
                      "text": "19,642,41,47:19,643,8,44",
                      "type": "19,642,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**If** the element *needs* to be translated, an `[X, Y]`\nvector by which this element must be translated. Otherwise, `false`.\n",
                    "type": "Number[]/Boolean",
                    "src": {
                      "text": "19,644,35,57:19,645,8,69",
                      "type": "19,644,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,647,0",
                  "text": "19,623,8,734"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getContentTarget",
                "src": {
                  "access": "3,6011,12",
                  "name": "3,6013,0"
                }
              },
              {
                "$type": "method",
                "name": "getController",
                "text": "Returns the {@link Ext.app.ViewController} instance associated with this\ncomponent via the {@link #cfg!controller #controller} config or {@link #setController} method.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns this component's ViewController or\nnull if one was not configured\n",
                    "type": "Ext.app.ViewController",
                    "src": {
                      "text": "7,79,45,43:7,80,12,31",
                      "type": "7,79,21"
                    }
                  }
                ],
                "src": {
                  "name": "7,76,20",
                  "text": "7,77,12,152"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "18,1506,12",
                  "name": "18,1508,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getDisplayValue",
                "text": "Generates the string value to be displayed in the text field for the currently stored value\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "tplData",
                    "src": {
                      "name": "5,2135,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,2132,8",
                  "name": "5,2135,0",
                  "text": "5,2133,8,92"
                }
              },
              {
                "$type": "method",
                "name": "getEl",
                "since": "1.1.0",
                "text": "Retrieves the top level element representing this component.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "3,3164,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3167,0",
                  "since": "3,3165,15",
                  "text": "3,3163,8,61"
                }
              },
              {
                "$type": "method",
                "name": "getEmptyText",
                "text": "Returns the value of this field's {@link #cfg!emptyText #cfg-emptyText}\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The value of this field's emptyText\n",
                    "type": "String",
                    "src": {
                      "text": "4,963,25,36",
                      "type": "4,963,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,965,0",
                  "text": "4,962,8,57"
                }
              },
              {
                "$type": "method",
                "name": "getErrors",
                "text": "Runs all of Time's validations and returns an array of any errors. Note that this first runs Text's validations,\nso the returned array is an amalgamation of all field errors. The additional validation checks are testing that\nthe time format is valid, that the chosen time is within the {@link #cfg!minValue #minValue} and {@link #cfg!maxValue #maxValue} constraints\nset.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to get errors for (defaults to the current field value)\n",
                    "type": "Object",
                    "src": {
                      "name": "0,313,25",
                      "text": "0,313,32,66",
                      "type": "0,313,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "All validation errors for this field\n",
                    "type": "String[]",
                    "src": {
                      "text": "0,314,27,37",
                      "type": "0,314,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,316,0",
                  "text": "0,309,8,343"
                }
              },
              {
                "$type": "method",
                "name": "getFieldLabel",
                "template": true,
                "text": "Returns the label for the field. Defaults to simply returning the {@link #cfg!fieldLabel #fieldLabel} config. Can be overridden\nto provide a custom generated label.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The configured field label, or empty string if not defined\n",
                    "type": "String",
                    "src": {
                      "text": "2,523,25,59",
                      "type": "2,523,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,525,0",
                  "template": "2,522,8",
                  "text": "2,520,8,149"
                }
              },
              {
                "$type": "method",
                "name": "getFilters",
                "text": "Returns the `{@link Ext.util.FilterCollection}`. Unless `autoCreate` is explicitly passed\nas `false` this collection will be automatically created if it does not yet exist.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "autoCreate",
                    "optional": true,
                    "text": "Pass `false` to disable auto-creation of the collection.\n",
                    "value": "true",
                    "src": {
                      "name": "5,798,16",
                      "text": "5,798,33,57",
                      "value": "5,798,27"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The collection of filters.\n",
                    "type": "Ext.util.FilterCollection",
                    "src": {
                      "text": "5,799,44,27",
                      "type": "5,799,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,801,0",
                  "text": "5,796,8,165"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getFocusClsEl",
                "text": "Returns the focus styling holder element associated with this Focusable.\nBy default it is the same element as {@link #method!getFocusEl #getFocusEl}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The focus styling element.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "15,93,30,27",
                      "type": "15,93,17"
                    }
                  }
                ],
                "src": {
                  "access": "15,94,8",
                  "name": "15,96,0",
                  "text": "15,90,8,143"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getFocusEl",
                "text": "Returns the focus holder element associated with this Focusable. At the\nlevel of the Focusable base, this function returns `this.el` (or for Widgets,\n`this.element`).\n\nSubclasses with embedded focusable elements (such as Window, Field and Button)\nshould override this for use by {@link Ext.util.Focusable#method!focus Ext.util.Focusable#method-focus}\nmethod.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "15,109,17"
                    }
                  }
                ],
                "src": {
                  "access": "15,110,8",
                  "name": "15,112,0",
                  "text": "15,101,8,334"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getFocusTask",
                "src": {
                  "access": "15,699,12",
                  "name": "15,701,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getFrameInfo",
                "text": "On render, reads an encoded style attribute, \"filter\" from the style of this Component's element.\nThis information is memoized based upon the CSS class name of this Component's element.\nBecause child Components are rendered as textual HTML as part of the topmost Container, a dummy div is inserted\ninto the document to receive the document element's CSS class name, and therefore style attributes.\n",
                "src": {
                  "access": "20,1172,12",
                  "name": "20,1178,0",
                  "text": "20,1173,12,398"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getFrameTpl",
                "items": [
                  {
                    "$type": "param",
                    "name": "table",
                    "src": {
                      "name": "20,1315,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,1313,12",
                  "name": "20,1315,0"
                }
              },
              {
                "$type": "method",
                "name": "getHeight",
                "text": "Gets the current height of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "3,3173,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3175,0",
                  "text": "3,3172,8,63"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the `{@link #cfg!id id}` of this component. Will auto-generate an `{@link #cfg!id id}` if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "3,3211,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3213,0",
                  "text": "3,3210,8,98"
                }
              },
              {
                "$type": "method",
                "name": "getInherited",
                "since": "5.0.0",
                "text": "This method returns an object containing the inherited properties for this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "inner",
                    "optional": true,
                    "text": "Pass `true` to return `inheritedStateInner` instead\nof the normal `inheritedState` object. This is only needed internally and should\nnot be passed by user code.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "23,88,26",
                      "text": "23,88,39,52:23,89,8,110",
                      "type": "23,88,16",
                      "value": "23,88,32"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `inheritedState` object containing inherited properties.\n",
                    "type": "Object",
                    "src": {
                      "text": "23,92,25,61",
                      "type": "23,92,17"
                    }
                  }
                ],
                "src": {
                  "name": "23,95,0",
                  "since": "23,93,15",
                  "text": "23,86,8,86"
                }
              },
              {
                "$type": "method",
                "name": "getInheritedConfig",
                "since": "5.0.0",
                "text": "This method returns the value of a config property that may be inherited from some\nancestor.\n\nIn some cases, a config may be explicitly set on a component with the intent of\n*only* being presented to its children while that component should act upon the\ninherited value (see `referenceHolder` for example). In these cases the `skipThis`\nparameter should be specified as `true`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the config property to return.\n",
                    "type": "String",
                    "src": {
                      "name": "23,152,24",
                      "text": "23,152,33,43",
                      "type": "23,152,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` if the property should be ignored if\nfound on this instance. In other words, `true` means the property must be inherited\nand not explicitly set on this instance.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "23,153,26",
                      "text": "23,153,42,49:23,154,8,125",
                      "type": "23,153,16",
                      "value": "23,153,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value of the requested `property`.\n",
                    "type": "Mixed",
                    "src": {
                      "text": "23,156,24,39",
                      "type": "23,156,17"
                    }
                  }
                ],
                "src": {
                  "name": "23,159,0",
                  "since": "23,157,15",
                  "text": "23,144,8,379"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "18,1551,29",
                      "text": "18,1551,35,37",
                      "type": "18,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `{@link #cfg!name name}` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "18,1552,35,48:18,1553,12,33",
                      "type": "18,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "18,1555,0",
                  "text": "18,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getInputId",
                "text": "Returns the input id for this field. If none was specified via the {@link #cfg!inputId #inputId} config, then an id will be\nautomatically generated.\n",
                "src": {
                  "name": "8,332,0",
                  "text": "8,329,8,136"
                }
              },
              {
                "$type": "method",
                "name": "getInsertPosition",
                "text": "This function takes the position argument passed to onRender and returns a\nDOM element that you can use in the insertBefore.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "position",
                    "text": "Index, element id or element you want\nto put this component before.\n",
                    "type": "String/Number/Ext.dom.Element/HTMLElement",
                    "src": {
                      "name": "20,564,59",
                      "text": "20,564,68,38:20,565,8,30",
                      "type": "20,564,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "DOM element that you can use in the insertBefore\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "20,566,30,49",
                      "type": "20,566,17"
                    }
                  }
                ],
                "src": {
                  "name": "20,568,0",
                  "text": "20,562,8,125"
                }
              },
              {
                "$type": "method",
                "name": "getItemId",
                "text": "Returns the value of {@link #cfg!itemId #itemId} assigned to this component, or when that\nis not set, returns the value of {@link #cfg!id #id}.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "3,3234,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3236,0",
                  "text": "3,3232,8,124"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getLabelableRenderData",
                "text": "Generates the arguments for the field decorations {@link #cfg!labelableRenderTpl #labelableRenderTpl}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "optional object to use as the base data object.  If provided,\nthis method will add properties to the base object instead of creating a new one.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,618,24",
                      "text": "2,618,29,62:2,619,8,82",
                      "type": "2,618,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The template arguments\n",
                    "type": "Object",
                    "src": {
                      "text": "2,620,25,23",
                      "type": "2,620,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,621,8",
                  "name": "2,623,0",
                  "text": "2,616,8,98"
                }
              },
              {
                "$type": "method",
                "name": "getLoader",
                "text": "Gets the {@link Ext.ComponentLoader} for this Component.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The loader instance, null if it doesn't exist.\n",
                    "type": "Ext.ComponentLoader",
                    "src": {
                      "text": "3,3242,38,47",
                      "type": "3,3242,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3244,0",
                  "text": "3,3241,8,57"
                }
              },
              {
                "$type": "method",
                "name": "getLocalX",
                "text": "Returns the x coordinate of this element reletive to its `offsetParent`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The local x coordinate\n",
                    "type": "Number",
                    "src": {
                      "text": "19,55,25,23",
                      "type": "19,55,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,57,0",
                  "text": "19,54,8,73"
                }
              },
              {
                "$type": "method",
                "name": "getLocalXY",
                "text": "Returns the x and y coordinates of this element relative to its `offsetParent`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The local XY position of the element\n",
                    "type": "Number[]",
                    "src": {
                      "text": "19,63,27,37",
                      "type": "19,63,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,65,0",
                  "text": "19,62,8,80"
                }
              },
              {
                "$type": "method",
                "name": "getLocalY",
                "text": "Returns the y coordinate of this element reletive to its `offsetParent`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The local y coordinate\n",
                    "type": "Number",
                    "src": {
                      "text": "19,71,25,23",
                      "type": "19,71,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,73,0",
                  "text": "19,70,8,73"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getMaskTarget",
                "text": "Returns the element which is masked by the {@link #method!mask #mask} method, or into which the {@link #method!setLoading #setLoading} is rendered into.\n\nThe default implementation uses the {@link #cfg!maskElement #maskElement} configuration to access the Component's child element by name. By default, {@link #cfg!maskElement #maskElement}\nis `{@link null}` which means that `{@link null}` is returned from this method indicating that the mask needs to be rendered into the document because\ncomponent structure should not be contaminated by mask elements.\n\nSome subclasses may override this method if they have knowledge about external structures where a mask could usefully be rendered.\n\nFor example a {@link Ext.view.Table} will request that its owning {@link Ext.panel.Table} be masked. The\nGridPanel will have its own implementation of `{@link #method!getMaskTarget getMaskTarget}` which will return the element dictated by its own {@link #cfg!maskElement #maskElement}\nPanels use `\"el\"` as their {@link #cfg!maskElement #maskElement} by default, but that could be overridden to be `\"body\"` to leave toolbars and the header\nmouse-accessible.\n",
                "src": {
                  "access": "3,3263,8",
                  "name": "3,3278,0",
                  "text": "3,3264,8,1030"
                }
              },
              {
                "$type": "method",
                "name": "getModelData",
                "text": "Returns the value(s) that should be saved to the {@link Ext.data.Model} instance for this field, when {@link Ext.form.Basic#method!updateRecord Ext.form.Basic#updateRecord} is called. Typically this will be an object with a single name-value pair, the name\nbeing this field's {@link #getName name} and the value being its current data value. More advanced field\nimplementations may return more than one name-value pair. The returned values will be saved to the corresponding\nfield names in the Model.\n\nNote that the values returned from this method are not guaranteed to have been successfully {@link #method!validate #validate}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A mapping of submit parameter names to values; each value should be a string, or an array of\nstrings if that particular name has multiple values. It can also return null if there are no parameters to be\nsubmitted.\n",
                    "type": "Object",
                    "src": {
                      "text": "14,292,25,93:14,293,8,121",
                      "type": "14,292,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "includeEmptyText",
                    "src": {
                      "name": "14,296,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isSubmitting",
                    "src": {
                      "name": "14,296,0"
                    }
                  }
                ],
                "src": {
                  "name": "14,296,0",
                  "text": "14,283,8,589"
                }
              },
              {
                "$type": "method",
                "name": "getName",
                "text": "Returns the {@link Ext.form.field.Field#cfg!name Ext.form.field.Field#name} attribute of the field. This is used as the parameter name\nwhen including the field value in a {@link Ext.form.Basic#method!submit Ext.form.Basic#submit}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "name The field {@link Ext.form.field.Field#cfg!name Ext.form.field.Field#name}\n",
                    "type": "String",
                    "src": {
                      "text": "14,210,25,54",
                      "type": "14,210,17"
                    }
                  }
                ],
                "src": {
                  "name": "14,212,0",
                  "text": "14,208,8,191"
                }
              },
              {
                "$type": "method",
                "name": "getOffsetsTo",
                "text": "Returns the offsets of this element from the passed element. The element must both\nbe part of the DOM tree and not have display:none to have page coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "offsetsTo",
                    "text": "The Positionable,\nHTMLElement, or element id to get get the offsets from.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String",
                    "src": {
                      "name": "19,712,59",
                      "text": "19,712,69,18:19,713,9,56",
                      "type": "19,712,17"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The XY page offsets (e.g. `[100, -200]`)\n",
                    "type": "Number[]",
                    "src": {
                      "text": "19,714,28,41",
                      "type": "19,714,18"
                    }
                  }
                ],
                "src": {
                  "name": "19,716,0",
                  "text": "19,710,9,159"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getOverflowEl",
                "text": "Get an el for overflowing, defaults to the target el\n",
                "src": {
                  "access": "3,6023,12",
                  "name": "3,6025,0",
                  "text": "3,6022,12,53"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getOverflowStyle",
                "text": "Returns the CSS style object which will set the Component's scroll styles.\nThis must be applied to the {@link #method!getTargetEl #getTargetEl}.\n",
                "src": {
                  "access": "3,6030,12",
                  "name": "3,6034,0",
                  "text": "3,6031,12,140"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getParams",
                "items": [
                  {
                    "$type": "param",
                    "name": "queryString",
                    "src": {
                      "name": "5,1427,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,1425,8",
                  "name": "5,1427,0"
                }
              },
              {
                "$type": "method",
                "name": "getPicker",
                "text": "Returns a reference to the picker component for this field, creating it if necessary by\ncalling {@link #method!createPicker #createPicker}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The picker component\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "9,348,32,21",
                      "type": "9,348,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,350,0",
                  "text": "9,346,8,119"
                }
              },
              {
                "$type": "method",
                "name": "getPlugin",
                "text": "Retrieves a plugin from this component's collection by its `pluginId`.\n\n    var grid = Ext.create('Ext.grid.Panel', {\n        store: {\n            fields: ['name'],\n            data: [{\n                name: 'Scott Pilgrim'\n            }]\n        },\n        columns: [{\n            header: 'Name',\n            dataIndex: 'name',\n            editor: 'textfield',\n            flex: 1\n        }],\n        selType: 'cellmodel',\n        plugins: {\n            ptype: 'cellediting',\n            clicksToEdit: 1,\n            pluginId: 'myplugin'\n        },\n        height: 200,\n        width: 400,\n        renderTo: Ext.getBody()\n    });\n\n    grid.getPlugin('myplugin');  // the cellediting plugin\n\n**Note:** See also {@link #method!findPlugin #findPlugin}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pluginId",
                    "text": "The `pluginId` set on the plugin config object\n",
                    "type": "String",
                    "src": {
                      "name": "3,3313,24",
                      "text": "3,3313,33,47",
                      "type": "3,3313,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "plugin instance or `{@link null}` if not found\n",
                    "type": "Ext.plugin.Abstract",
                    "src": {
                      "text": "3,3314,38,39",
                      "type": "3,3314,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3316,0",
                  "text": "3,3283,8,732"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getPlugins",
                "text": "Returns an array of current fully constructed plugin instances.\n",
                "src": {
                  "access": "3,6064,12",
                  "name": "3,6066,0",
                  "text": "3,6063,12,64"
                }
              },
              {
                "$type": "method",
                "name": "getPosition",
                "text": "Gets the current XY position of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "If true the element's left and top are returned instead of page XY.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,3331,26",
                      "text": "3,3331,39,68",
                      "type": "3,3331,16",
                      "value": "3,3331,32"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The XY position of the element (e.g., [100, 200])\n",
                    "type": "Number[]",
                    "src": {
                      "text": "3,3332,27,50",
                      "type": "3,3332,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3334,0",
                  "text": "3,3330,8,68"
                }
              },
              {
                "$type": "method",
                "name": "getRawValue",
                "text": "Returns the raw String value of the field, without performing any normalization, conversion, or validation. Gets\nthe current value of the input element if the field has been rendered, ignoring the value if it is the\n{@link #cfg!emptyText #emptyText}. To get a normalized and converted value see {@link #method!getValue #getValue}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The raw String value of the field\n",
                    "type": "String",
                    "src": {
                      "text": "4,1113,25,34",
                      "type": "4,1113,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,1115,0",
                  "text": "4,1110,8,299"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getRecordDisplayData",
                "text": "Gets data for each record to be used for constructing the display value with\nthe {@link #cfg!displayTpl #displayTpl}. This may be overridden to provide access to associated records.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "5,2143,32",
                      "text": "5,2143,39,12",
                      "type": "5,2143,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The data to be passed for each record to the {@link #cfg!displayTpl #displayTpl}.\n",
                    "type": "Object",
                    "src": {
                      "text": "5,2144,25,66",
                      "type": "5,2144,17"
                    }
                  }
                ],
                "src": {
                  "access": "5,2146,8",
                  "name": "5,2148,0",
                  "text": "5,2141,8,166"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getRefItems",
                "text": "The CQ interface. Allow drilling down into the picker when it exists.\nImportant for determining whether an event took place in the bounds of some\nhigher level containing component. See AbstractComponent#owns\n",
                "src": {
                  "access": "9,373,8",
                  "name": "9,378,0",
                  "text": "9,374,8,208"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getRefOwner",
                "text": "Used by {@link Ext.ComponentQuery}, and the {@link Ext.Component#method!up Ext.Component#up}\nmethod to find the owning Component in the linkage hierarchy.\n\nBy default this returns the Container which contains this Component.\n\nThis may be overridden by Component authors who implement ownership hierarchies\nwhich are not based upon ownerCt, such as BoundLists being owned by Fields or Menus\nbeing owned by Buttons.\n",
                "src": {
                  "access": "23,285,8",
                  "name": "23,287,0",
                  "text": "23,277,8,408"
                }
              },
              {
                "$type": "method",
                "name": "getRegion",
                "text": "Returns a region object that defines the area of this element.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A Region containing \"top, left, bottom, right\" properties.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "19,724,34,59",
                      "type": "19,724,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,726,0",
                  "text": "19,723,8,63"
                }
              },
              {
                "$type": "method",
                "name": "getScrollX",
                "text": "Returns the \"x\" scroll position for this component.  Only applicable for\n{@link #cfg!scrollable #scrollable} components\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "3,3359,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3361,0",
                  "text": "3,3357,8,104"
                }
              },
              {
                "$type": "method",
                "name": "getScrollY",
                "text": "Returns the \"y\" scroll position for this component.  Only applicable for\n{@link #cfg!scrollable #scrollable} components\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "3,3369,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3371,0",
                  "text": "3,3367,8,104"
                }
              },
              {
                "$type": "method",
                "name": "getSelection",
                "text": "Returns the combobox's selection.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The selected record\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "5,1650,33,20",
                      "type": "5,1650,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,1652,0",
                  "text": "5,1649,8,34"
                }
              },
              {
                "$type": "method",
                "name": "getSize",
                "text": "Gets the current size of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "contentSize",
                    "optional": true,
                    "text": "true to get the width/size minus borders and padding\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,3378,26",
                      "text": "3,3378,39,53",
                      "type": "3,3378,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object containing the element's size:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "type": "Number",
                        "src": {
                          "name": "3,3380,32",
                          "type": "3,3380,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "type": "Number",
                        "src": {
                          "name": "3,3381,32",
                          "type": "3,3381,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "3,3379,25,41",
                      "type": "3,3379,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3383,0",
                  "text": "3,3377,8,61"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getSizeModel",
                "text": "Returns an object that describes how this component's width and height are managed.\nAll of these objects are shared and should not be modified.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The size model for this component.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "text": "The {@link Ext.layout.SizeModel}\nfor the width.\n",
                        "type": "Ext.layout.SizeModel",
                        "src": {
                          "name": "3,3392,46",
                          "text": "3,3392,52,44:3,3393,8,15",
                          "type": "3,3392,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "text": "The {@link Ext.layout.SizeModel}\nfor the height.\n",
                        "type": "Ext.layout.SizeModel",
                        "src": {
                          "name": "3,3394,46",
                          "text": "3,3394,53,44:3,3395,8,16",
                          "type": "3,3394,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "3,3391,25,35",
                      "type": "3,3391,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ownerCtSizeModel",
                    "src": {
                      "name": "3,3398,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,3396,8",
                  "name": "3,3398,0",
                  "text": "3,3388,8,145"
                }
              },
              {
                "$type": "method",
                "name": "getState",
                "text": "The supplied default state gathering method for the Component class.\n\nThis method returns dimension settings such as `{@link #cfg!flex flex}`, `{@link #cfg!anchor anchor}`, `{@link #cfg!width width}` and `{@link #cfg!height height}` along with `collapsed`\nstate.\n\nSubclasses which implement more complex state should call the superclass's implementation, and apply their state\nto the result if this basic state is to be saved.\n\nNote that Component state will only be saved if the Component has a {@link #cfg!stateId #stateId} and there as a StateProvider\nconfigured for the document.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "3,3527,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3529,0",
                  "text": "3,3516,8,495"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getStateId",
                "text": "Gets the state id for this object.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The 'stateId' or the implicit 'id' specified by component configuration.\n",
                    "type": "String",
                    "src": {
                      "text": "13,268,25,73",
                      "type": "13,268,17"
                    }
                  }
                ],
                "src": {
                  "access": "13,269,8",
                  "name": "13,271,0",
                  "text": "13,267,8,35"
                }
              },
              {
                "$type": "method",
                "name": "getStore",
                "text": "Gets the current store instance.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The store, null if one does not exist.\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "text": "22,58,41,39",
                      "type": "22,58,17"
                    }
                  }
                ],
                "src": {
                  "name": "22,60,0",
                  "text": "22,57,8,33"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getStoreListeners",
                "text": "Gets the listeners to bind to a new store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The Store which is being bound to for which a listeners object should be returned.\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "22,113,32",
                      "text": "22,113,38,83",
                      "type": "22,113,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The listeners to be bound to the store in object literal form. The scope\nmay be omitted, it is assumed to be the current instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "22,114,25,73:22,115,8,58",
                      "type": "22,114,17"
                    }
                  }
                ],
                "src": {
                  "access": "22,112,8",
                  "name": "22,117,0",
                  "text": "22,111,8,43"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getStyleProxy",
                "text": "Returns an offscreen div with the same class name as the element this is being rendered.\nThis is because child item rendering takes place in a detached div which, being not\npart of the document, has no styling.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "src": {
                      "name": "20,1295,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,1290,12",
                  "name": "20,1295,0",
                  "text": "20,1291,12,211"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getSubmitData",
                "text": "Private override to use getSubmitValue() as a convenience\n",
                "src": {
                  "access": "8,470,8",
                  "name": "8,473,0",
                  "text": "8,471,8,58"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getSubmitValue",
                "src": {
                  "access": "0,425,8",
                  "name": "0,427,0"
                }
              },
              {
                "$type": "method",
                "name": "getSubTplData",
                "template": true,
                "text": "Creates and returns the data object to be used when rendering the {@link #cfg!fieldSubTpl #fieldSubTpl}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The template data\n",
                    "type": "Object",
                    "src": {
                      "text": "8,338,25,18",
                      "type": "8,338,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fieldData",
                    "src": {
                      "name": "8,341,0"
                    }
                  }
                ],
                "src": {
                  "name": "8,341,0",
                  "template": "8,339,8",
                  "text": "8,337,8,88"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getSubTplMarkup",
                "text": "Gets the markup to be inserted into the outer template's bodyEl. For fields this is the actual input element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fieldData",
                    "src": {
                      "name": "8,402,0"
                    }
                  }
                ],
                "src": {
                  "access": "8,400,8",
                  "name": "8,402,0",
                  "text": "8,399,8,110"
                }
              },
              {
                "$type": "method",
                "name": "getTabIndex",
                "text": "Return the actual tabIndex for this Focusable.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "tabIndex attribute value\n",
                    "type": "Number",
                    "src": {
                      "text": "15,418,25,25",
                      "type": "15,418,17"
                    }
                  }
                ],
                "src": {
                  "name": "15,420,0",
                  "text": "15,416,8,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTargetEl",
                "text": "This is used to determine where to insert the 'html', 'contentEl' and 'items' in this component.\n",
                "src": {
                  "access": "3,6093,12",
                  "name": "3,6095,0",
                  "text": "3,6092,12,97"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTdCls",
                "text": "Needed for when widget is rendered into a grid cell. The class to add to the cell element.\n",
                "src": {
                  "access": "3,6100,12",
                  "name": "3,6103,0",
                  "text": "3,6101,12,91"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTdType",
                "src": {
                  "access": "4,1339,12",
                  "name": "4,1341,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTpl",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "3,6122,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6120,12",
                  "name": "3,6122,0"
                }
              },
              {
                "$type": "method",
                "name": "getTrigger",
                "text": "Returns the trigger with the given id\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "type": "String",
                    "src": {
                      "name": "4,796,24",
                      "type": "4,796,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.form.trigger.Trigger",
                    "src": {
                      "type": "4,797,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,799,0",
                  "text": "4,795,8,38"
                }
              },
              {
                "$type": "method",
                "name": "getValue",
                "text": "Returns the current data value of the field. The type of value returned is particular to the type of the\nparticular field (e.g. a Date object for {@link Ext.form.field.Date}), as the result of calling {@link #method!rawToValue #rawToValue} on\nthe field's {@link #method!processRawValue #processRawValue} String value. To return the raw String value, see {@link #method!getRawValue #getRawValue}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "value The field value\n",
                    "type": "Object",
                    "src": {
                      "text": "8,609,25,22",
                      "type": "8,609,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,611,0",
                  "text": "8,606,8,343"
                }
              },
              {
                "$type": "method",
                "name": "getViewRegion",
                "text": "Returns the **content** region of this element. That is the region within the borders\nand padding.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A Region containing \"top, left, bottom, right\" member data.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "19,768,34,60",
                      "type": "19,768,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,770,0",
                  "text": "19,766,8,99"
                }
              },
              {
                "$type": "method",
                "name": "getWidth",
                "text": "Gets the current width of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "3,3565,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3567,0",
                  "text": "3,3564,8,62"
                }
              },
              {
                "$type": "method",
                "name": "getX",
                "text": "Gets the current X position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The X position of the element\n",
                    "type": "Number",
                    "src": {
                      "text": "19,79,25,30",
                      "type": "19,79,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,81,0",
                  "text": "19,78,8,74"
                }
              },
              {
                "$type": "method",
                "name": "getXType",
                "text": "Gets the xtype for this component as registered with {@link Ext.ComponentManager}. For a list of all available\nxtypes, see the {@link Ext.Component} header. Example usage:\n\n    var t = new Ext.form.field.Text();\n    alert(t.getXType());  // alerts 'textfield'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The xtype\n",
                    "type": "String",
                    "src": {
                      "text": "3,3578,25,10",
                      "type": "3,3578,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3580,0",
                  "text": "3,3572,8,261"
                }
              },
              {
                "$type": "method",
                "name": "getXTypes",
                "since": "2.3.0",
                "text": "Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all available xtypes, see the\n{@link Ext.Component} header.\n\n**If using your own subclasses, be aware that a Component must register its own xtype to participate in\ndetermination of inherited xtypes.**\n\nExample usage:\n\n    @example\n    var t = new Ext.form.field.Text();\n    alert(t.getXTypes());  // alerts 'component/field/textfield'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The xtype hierarchy string\n",
                    "type": "String",
                    "src": {
                      "text": "3,3597,25,27",
                      "type": "3,3597,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3601,0",
                  "since": "3,3599,15",
                  "text": "3,3585,8,421"
                }
              },
              {
                "$type": "method",
                "name": "getXY",
                "text": "Gets the current position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The XY position of the element\n",
                    "type": "Number[]",
                    "src": {
                      "text": "19,87,27,31",
                      "type": "19,87,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,89,0",
                  "text": "19,86,8,72"
                }
              },
              {
                "$type": "method",
                "name": "getY",
                "text": "Gets the current Y position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The Y position of the element\n",
                    "type": "Number",
                    "src": {
                      "text": "19,95,25,30",
                      "type": "19,95,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,97,0",
                  "text": "19,94,8,74"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleBlurEvent",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "15,734,0"
                    }
                  }
                ],
                "src": {
                  "access": "15,732,12",
                  "name": "15,734,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleFocusEvent",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "15,712,0"
                    }
                  }
                ],
                "src": {
                  "access": "15,710,12",
                  "name": "15,712,0"
                }
              },
              {
                "$type": "method",
                "name": "hasActiveError",
                "text": "Tells whether the field currently has an active error message. This does not trigger validation on its own, it\nmerely looks for any message that the component may already hold.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "2,788,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,790,0",
                  "text": "2,786,8,177"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Replaced by {@link #getActiveAnimation}\n",
                "deprecatedVersion": "4.0",
                "inheritdoc": "Ext.util.Animate#getActiveAnimation",
                "name": "hasActiveFx",
                "src": {
                  "deprecatedMessage": "21,360,8",
                  "deprecatedVersion": "21,360,8",
                  "inheritdoc": "21,361,8",
                  "name": "21,364,0"
                }
              },
              {
                "$type": "method",
                "name": "hasCls",
                "text": "Checks if the specified CSS class exists on this element's DOM node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The CSS class to check for.\n",
                    "type": "String",
                    "src": {
                      "name": "3,3628,24",
                      "text": "3,3628,34,28",
                      "type": "3,3628,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the class exists, else `false`.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3629,26,42",
                      "type": "3,3629,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3632,0",
                  "text": "3,3627,8,69"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "18,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "18,1515,12",
                  "name": "18,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "11,1334,27",
                      "text": "11,1334,37,35",
                      "type": "11,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "11,1335,29,67",
                      "type": "11,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,1337,0",
                  "text": "11,1331,11,161"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "24,100,20",
                      "text": "24,100,25,34",
                      "type": "24,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "24,101,22,57:24,102,4,15",
                      "type": "24,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "24,53,12",
                  "text": "24,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "hasUICls",
                "text": "Checks if there is currently a specified `{@link #cfg!uiCls uiCls}`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "The `{@link #cfg!cls cls}` to check.\n",
                    "type": "String",
                    "src": {
                      "name": "3,3639,24",
                      "text": "3,3639,28,20",
                      "type": "3,3639,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,3641,0",
                  "text": "3,3638,8,50"
                }
              },
              {
                "$type": "method",
                "name": "hasVisibleLabel",
                "text": "Checks if the field has a visible label\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "True if the field has a visible label\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,748,26,38",
                      "type": "2,748,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,750,0",
                  "text": "2,747,8,40"
                }
              },
              {
                "$type": "method",
                "name": "hide",
                "text": "Hides this Component, setting it to invisible using the configured {@link #cfg!hideMode #hideMode}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "text": "**only valid for {@link #cfg!floating #cfg-floating} Components\nsuch as {@link Ext.window.Window}s or {@link Ext.tip.ToolTip}s, or regular Components which have\nbeen configured with `floating: true`.**. The target to which the Component should animate while hiding.\n",
                    "type": "String/Ext.dom.Element/Ext.Component",
                    "value": "null",
                    "src": {
                      "name": "3,3650,55",
                      "text": "3,3650,75,50:3,3651,8,217",
                      "type": "3,3650,16",
                      "value": "3,3650,69"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "A callback function to call after the Component is hidden.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,3653,27",
                      "text": "3,3653,37,59",
                      "type": "3,3653,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the callback is executed.\nDefaults to this Component.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,3654,25",
                      "text": "3,3654,32,64:3,3655,8,28",
                      "type": "3,3654,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,3656,32,5",
                      "type": "3,3656,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3658,0",
                  "text": "3,3649,8,86"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initBindable",
                "since": "5.0.0",
                "text": "This method triggers the lazy configs and must be called when it is time to\nfully boot up. The configs that must be initialized are: `{@link #cfg!bind bind}`, `{@link #cfg!publishes publishes}`,\n`{@link #cfg!session session}`, `{@link #cfg!twoWayBindable twoWayBindable}` and `{@link #cfg!viewModel viewModel}`.\n",
                "src": {
                  "access": "7,723,12",
                  "name": "7,726,0",
                  "since": "7,724,19",
                  "text": "7,720,12,199"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initComponent",
                "since": "1.1.0",
                "template": true,
                "text": "The initComponent template method is an important initialization step for a Component. It is intended to be\nimplemented by each subclass of Ext.Component to provide any needed constructor logic. The\ninitComponent method of the class being created is called first, with each initComponent method\nup the hierarchy to Ext.Component being called thereafter. This makes it easy to implement and,\nif needed, override the constructor logic of the Component at any step in the hierarchy.\n\nThe initComponent method **must** contain a call to {@link Ext.Base#callParent callParent} in order\nto ensure that the parent class' initComponent method is also called.\n\nAll config options passed to the constructor are applied to `this` before initComponent is called,\nso you can simply access them with `this.someOption`.\n\nThe following example demonstrates using a dynamic string for the text of a button at the time of\ninstantiation of the class.\n\n    Ext.define('DynamicButtonText', {\n        extend: 'Ext.button.Button',\n\n        initComponent: function() {\n            this.text = new Date();\n            this.renderTo = Ext.getBody();\n            this.callParent();\n        }\n    });\n\n    Ext.onReady(function() {\n        Ext.create('DynamicButtonText');\n    });\n",
                "src": {
                  "access": "3,3715,8",
                  "name": "3,3718,0",
                  "since": "3,3716,15",
                  "template": "3,3714,8",
                  "text": "3,3685,8,1253"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "18,1449,28",
                      "type": "18,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "18,1450,31,5",
                      "type": "18,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "18,1448,12",
                  "name": "18,1452,0",
                  "text": "18,1428,12,441"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initDefaultName",
                "src": {
                  "access": "8,317,8",
                  "name": "8,319,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initEvents",
                "text": "Initialize any events on this component\n",
                "src": {
                  "access": "3,3749,8",
                  "name": "3,3751,0",
                  "text": "3,3748,8,40"
                }
              },
              {
                "$type": "method",
                "name": "initField",
                "text": "Initializes this Field mixin on the current instance. Components using this mixin should call this method during\ntheir own initialization process.\n",
                "src": {
                  "name": "14,137,0",
                  "text": "14,134,8,147"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initFocusableElement",
                "text": "Sets up the focus listener on this Component's {@link #method!getFocusEl #getFocusEl} if it has one.\n\nForm Components which must implicitly participate in tabbing order usually have a naturally\nfocusable element as their {@link #method!getFocusEl #getFocusEl}, and it is the DOM event of that\nreceiving focus which drives the Component's `{@link #method!onFocus onFocus}` handling, and the DOM event of it\nbeing blurred which drives the `{@link #method!onBlur onBlur}` handling.\n",
                "src": {
                  "access": "15,669,12",
                  "name": "15,671,0",
                  "text": "15,663,12,410"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initFocusableEvents",
                "text": "Template method to do any event listener initialization for a Focusable.\nThis generally happens after the focusEl is available.\n",
                "src": {
                  "access": "15,81,8",
                  "name": "15,83,0",
                  "text": "15,79,8,128"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initInheritedState",
                "text": "Called by `{@link #method!getInherited getInherited}` to initialize the inheritedState the first time it is\nrequested.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "inheritedState",
                    "src": {
                      "name": "3,3184,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,3182,8",
                  "name": "3,3184,0",
                  "text": "3,3180,8,90"
                }
              },
              {
                "$type": "method",
                "name": "initLabelable",
                "text": "Performs initialization of this mixin. Component classes using this mixin should call this method during their\nown initialization.\n",
                "src": {
                  "name": "2,469,0",
                  "text": "2,466,8,131"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initPadding",
                "text": "Initializes padding by applying it to the target element, or if the layout manages\npadding ensures that the padding on the target element is \"0\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetEl",
                    "src": {
                      "name": "3,6184,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6182,12",
                  "name": "3,6184,0",
                  "text": "3,6180,12,146"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initPlugin",
                "items": [
                  {
                    "$type": "param",
                    "name": "plugin",
                    "src": {
                      "name": "3,6209,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6207,12",
                  "name": "3,6209,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initRenderData",
                "text": "Initialized the renderData to be used when rendering the renderTpl.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object with keys and values that are going to be applied to the renderTpl\n",
                    "type": "Object",
                    "src": {
                      "text": "20,613,25,74",
                      "type": "20,613,17"
                    }
                  }
                ],
                "src": {
                  "access": "20,614,8",
                  "name": "20,616,0",
                  "text": "20,612,8,68"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initRenderTpl",
                "text": "Initializes the renderTpl.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The renderTpl XTemplate instance.\n",
                    "type": "Ext.XTemplate",
                    "src": {
                      "text": "20,1393,36,34",
                      "type": "20,1393,21"
                    }
                  }
                ],
                "src": {
                  "access": "20,1394,12",
                  "name": "20,1396,0",
                  "text": "20,1392,12,27"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initState",
                "text": "Initializes the state of the object upon construction.\n",
                "src": {
                  "access": "13,278,8",
                  "name": "13,280,0",
                  "text": "13,277,8,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initStyles",
                "text": "Applies padding, margin, border, top, left, height, and width configs to the\nappropriate elements.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetEl",
                    "src": {
                      "name": "3,6233,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6231,12",
                  "name": "3,6233,0",
                  "text": "3,6229,12,99"
                }
              },
              {
                "$type": "method",
                "name": "initValue",
                "text": "Initializes the field's value based on the initial config.\n",
                "src": {
                  "name": "14,173,0",
                  "text": "14,171,8,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "invalidateInheritedState",
                "since": "5.0.0",
                "text": "This method marks the current inherited state as invalid. The next time a call is\nmade to `{@link #method!getInherited getInherited}` the objects will be recreated and initialized.\n",
                "src": {
                  "access": "23,310,8",
                  "name": "23,313,0",
                  "since": "23,311,15",
                  "text": "23,308,8,152"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "invokeTriggers",
                "text": "Invokes a method on all triggers.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "methodName",
                    "type": "String",
                    "src": {
                      "name": "4,775,24",
                      "type": "4,775,16"
                    }
                  }
                ],
                "src": {
                  "access": "4,776,8",
                  "name": "4,778,0",
                  "text": "4,774,8,34"
                }
              },
              {
                "$type": "method",
                "name": "is",
                "text": "Tests whether this Component matches a {@link Ext.ComponentQuery}\nselector string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector string to test against.\n",
                    "type": "String",
                    "src": {
                      "name": "3,3778,24",
                      "text": "3,3778,33,37",
                      "type": "3,3778,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this Component matches the selector.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3779,26,47",
                      "type": "3,3779,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3781,0",
                  "text": "3,3776,8,98"
                }
              },
              {
                "$type": "method",
                "name": "isAncestor",
                "text": "Determines whether **this Component** is an ancestor of the passed Component.\nThis will return `true` if the passed Component is anywhere within the subtree\nbeneath this Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "possibleDescendant",
                    "text": "The Component to test for presence\nwithin this Component's subtree.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,3804,31",
                      "text": "3,3804,50,35:3,3805,8,33",
                      "type": "3,3804,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,3807,0",
                  "text": "3,3801,8,181"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isBlurring",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "15,772,0"
                    }
                  }
                ],
                "src": {
                  "access": "15,770,12",
                  "name": "15,772,0"
                }
              },
              {
                "$type": "method",
                "name": "isDescendantOf",
                "text": "Determines whether this component is the descendant of a passed component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ancestor",
                    "text": "A Component which may contain this Component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,3787,31",
                      "text": "3,3787,40,46",
                      "type": "3,3787,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the component is the descendant of the passed component, otherwise `false`.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3788,26,86",
                      "type": "3,3788,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3790,0",
                  "text": "3,3786,8,75"
                }
              },
              {
                "$type": "method",
                "name": "isDirty",
                "text": "Returns true if the value of this Field has been changed from its {@link #property!originalValue #originalValue}.\nWill always return false if the field is disabled.\n\nNote that if the owning {@link Ext.form.Basic} was configured with\n{@link Ext.form.Basic#cfg!trackResetOnLoad Ext.form.Basic#trackResetOnLoad} then the {@link #property!originalValue #originalValue} is updated when\nthe values are loaded by {@link Ext.form.Basic}.{@link Ext.form.Basic#method!setValues Ext.form.Basic#setValues}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "True if this field has been changed from its original value (and is not disabled),\nfalse otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "14,409,26,83:14,410,8,17",
                      "type": "14,409,17"
                    }
                  }
                ],
                "src": {
                  "name": "14,412,0",
                  "text": "14,403,8,411"
                }
              },
              {
                "$type": "method",
                "name": "isDisabled",
                "text": "Method to determine whether this Component is currently disabled.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the disabled state of this Component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3818,26,38",
                      "type": "3,3818,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3820,0",
                  "text": "3,3817,8,66"
                }
              },
              {
                "$type": "method",
                "name": "isDraggable",
                "text": "Method to determine whether this Component is draggable.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the draggable state of this component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3826,26,39",
                      "type": "3,3826,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3828,0",
                  "text": "3,3825,8,57"
                }
              },
              {
                "$type": "method",
                "name": "isDroppable",
                "text": "Method to determine whether this Component is droppable.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the droppable state of this component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3834,26,39",
                      "type": "3,3834,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3836,0",
                  "text": "3,3833,8,57"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isEqual",
                "items": [
                  {
                    "$type": "param",
                    "name": "v1",
                    "src": {
                      "name": "0,225,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "v2",
                    "src": {
                      "name": "0,225,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,223,8",
                  "name": "0,225,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isEqualAsString",
                "text": "Returns whether two values are logically equal.\nSimilar to {@link #method!isEqual #isEqual}, however null or undefined values will be treated as empty strings.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value1",
                    "text": "The first value to compare\n",
                    "type": "Object",
                    "src": {
                      "name": "14,252,24",
                      "text": "14,252,31,27",
                      "type": "14,252,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value2",
                    "text": "The second value to compare\n",
                    "type": "Object",
                    "src": {
                      "name": "14,253,24",
                      "text": "14,253,31,28",
                      "type": "14,253,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the values are equal, false if inequal.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "14,254,26,48",
                      "type": "14,254,17"
                    }
                  }
                ],
                "src": {
                  "access": "14,251,8",
                  "name": "14,256,0",
                  "text": "14,249,8,144"
                }
              },
              {
                "$type": "method",
                "name": "isFileUpload",
                "text": "Returns whether this Field is a file upload field; if it returns true, forms will use special techniques for\n{@link Ext.form.Basic#method!submit Ext.form.Basic#submit} via AJAX. See {@link Ext.form.Basic#method!hasUpload Ext.form.Basic#hasUpload} for details. If\nthis returns true, the {@link #method!extractFileInput #extractFileInput} method must also be implemented to return the corresponding file\ninput element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "14,543,17"
                    }
                  }
                ],
                "src": {
                  "name": "14,545,0",
                  "text": "14,539,8,351"
                }
              },
              {
                "$type": "method",
                "name": "isFloating",
                "text": "Method to determine whether this Component is floating.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the floating state of this component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3842,26,38",
                      "type": "3,3842,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3844,0",
                  "text": "3,3841,8,56"
                }
              },
              {
                "$type": "method",
                "name": "isFocusable",
                "text": "Determine if this Focusable can receive focus at this time.\n\nNote that Containers can be non-focusable themselves while delegating\nfocus treatment to a child Component; see\n{@link Ext.container.Container} for more information.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "Optionally determine if the container itself\nis focusable, or if container's focus is delegated to a child component\nand that child is focusable.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "15,156,26",
                      "text": "15,156,38,45:15,157,8,102",
                      "type": "15,156,16",
                      "value": "15,156,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if component is focusable, false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "15,160,26,46",
                      "type": "15,160,17"
                    }
                  }
                ],
                "src": {
                  "name": "15,162,0",
                  "text": "15,150,8,242"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isFocusing",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "15,750,0"
                    }
                  }
                ],
                "src": {
                  "access": "15,748,12",
                  "name": "15,750,0"
                }
              },
              {
                "$type": "method",
                "name": "isHidden",
                "text": "Method to determine whether this Component is currently set to hidden.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the hidden state of this Component.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3850,26,36",
                      "type": "3,3850,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3852,0",
                  "text": "3,3849,8,71"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isLayoutChild",
                "text": "Checks if this component will be contained by the passed component as part of its\nlayout run. If `true`, then the layout on `this` can be skipped because it will be\nencompassed when the layout for `comp` runs. Typical cases where this may be be `false`\nis when asking about floaters nested in containers.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "comp",
                    "text": "The potential owner.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,3897,31",
                      "text": "3,3897,36,21",
                      "type": "3,3897,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this component is a layout child of `comp`.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3898,26,54",
                      "type": "3,3898,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,3900,8",
                  "name": "3,3902,0",
                  "text": "3,3893,8,305"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "isLayoutRoot",
                "text": "Determines whether this Component is the root of a layout. This returns `true` if\nthis component can run its layout without assistance from or impact on its owner.\nIf this component cannot run its layout given these restrictions, `false` is returned\nand its owner will be considered as the next candidate for the layout root.\n\nSetting the {@link #property!_isLayoutRoot #_isLayoutRoot} property to `true` causes this method to always\nreturn `true`. This may be useful when updating a layout of a Container which shrink\nwraps content, and you know that it will not change size, and so can safely be the\ntopmost participant in the layout run.\n",
                "src": {
                  "access": "3,3916,8",
                  "name": "3,3918,0",
                  "text": "3,3907,8,617"
                }
              },
              {
                "$type": "method",
                "name": "isLayoutSuspended",
                "text": "Returns `true` if layout is suspended for this component. This can come from direct\nsuspension of this component's layout activity ({@link Ext.container.Container#cfg!suspendLayout Ext.Container#suspendLayout}) or if one\nof this component's containers is suspended.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` layout of this component is suspended.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3938,26,46",
                      "type": "3,3938,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3940,0",
                  "text": "3,3934,8,225"
                }
              },
              {
                "$type": "method",
                "name": "isMasked",
                "text": "Returns masked state for this Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "True to look up this Component's parent masked state.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,4023,26",
                      "text": "3,4023,38,54",
                      "type": "3,4023,16",
                      "value": "3,4023,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if masked, false otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,4025,26,33",
                      "type": "3,4025,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4027,0",
                  "text": "3,4021,8,42"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "24,148,20",
                      "text": "24,148,30,71:24,149,4,18",
                      "type": "24,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "24,150,20",
                      "text": "24,150,27,50",
                      "type": "24,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "24,151,22,56",
                      "type": "24,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "24,106,12",
                  "text": "24,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "11,1344,29",
                      "text": "11,1344,36,40",
                      "type": "11,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "11,1345,30,31",
                      "type": "11,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "11,1347,0",
                  "text": "11,1343,12,57"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isSyncing",
                "text": "Checks if a particular binding is synchronizing the value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property being bound to.\n",
                    "type": "String",
                    "src": {
                      "name": "7,770,28",
                      "text": "7,770,33,41",
                      "type": "7,770,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the binding is syncing.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "7,771,30,34",
                      "type": "7,771,21"
                    }
                  }
                ],
                "src": {
                  "access": "7,499,-1",
                  "name": "7,775,0",
                  "text": "7,769,12,59"
                }
              },
              {
                "$type": "method",
                "name": "isValid",
                "text": "Returns whether or not the field value is currently valid by {@link #method!getErrors #getErrors} the\n{@link #method!processRawValue #processRawValue} of the field. **Note**: {@link #cfg!disabled #disabled} fields are\nalways treated as valid.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "True if the value is valid, else false\n",
                    "type": "Boolean",
                    "src": {
                      "text": "8,813,26,39",
                      "type": "8,813,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,815,0",
                  "text": "8,809,8,219"
                }
              },
              {
                "$type": "method",
                "name": "isVisible",
                "since": "1.1.0",
                "text": "Returns `true` if this component is visible.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "Pass `true` to interrogate the visibility status of all parent Containers to\ndetermine whether this Component is truly visible to the user.\n\nGenerally, to determine whether a Component is hidden, the no argument form is needed. For example when creating\ndynamically laid out UIs in a hidden Container before showing them.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,3968,26",
                      "text": "3,3968,38,77:3,3969,8,246",
                      "type": "3,3968,16",
                      "value": "3,3968,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this component is visible, `false` otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,3974,26,56",
                      "type": "3,3974,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,3978,0",
                  "since": "3,3976,15",
                  "text": "3,3966,8,46"
                }
              },
              {
                "$type": "method",
                "name": "isXType",
                "since": "2.3.0",
                "text": "Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended\nfrom the xtype (default) or whether it is directly of the xtype specified (`shallow = true`).\n\n**If using your own subclasses, be aware that a Component must register its own xtype to participate in\ndetermination of inherited xtypes.**\n\nFor a list of all available xtypes, see the {@link Ext.Component} header.\n\nExample usage:\n\n    @example\n    var t = new Ext.form.field.Text();\n    var isText = t.isXType('textfield');        // true\n    var isBoxSubclass = t.isXType('field');       // true, descended from Ext.form.field.Base\n    var isBoxInstance = t.isXType('field', true); // false, not a direct Ext.form.field.Base instance\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xtype",
                    "text": "The xtype to check for this Component\n",
                    "type": "String",
                    "src": {
                      "name": "3,4008,24",
                      "text": "3,4008,30,38",
                      "type": "3,4008,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "shallow",
                    "optional": true,
                    "text": "`true` to check whether this Component is directly of the specified xtype, `false` to\ncheck whether this Component is descended from the xtype.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,4009,26",
                      "text": "3,4009,41,86:3,4010,8,58",
                      "type": "3,4009,16",
                      "value": "3,4009,34"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this component descends from the specified xtype, `false` otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,4011,26,79",
                      "type": "3,4011,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4015,0",
                  "since": "3,4013,15",
                  "text": "3,3992,8,743"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "18,1571,28",
                      "type": "18,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "18,1572,28",
                      "type": "18,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `{@link #cfg!value value}` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "18,1573,29,20",
                      "type": "18,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "18,1574,12",
                  "name": "18,1576,0",
                  "text": "18,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "lookupController",
                "since": "5.0.1",
                "text": "Gets the controller that controls this view. May be a controller that belongs\nto a view higher in the hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "`true` to not consider the controller directly attached\nto this view (if it exists).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "7,360,26",
                      "text": "7,360,42,56:7,361,8,29",
                      "type": "7,360,16",
                      "value": "7,360,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The controller. `{@link null}` if no controller is found.\n",
                    "type": "Ext.app.ViewController",
                    "src": {
                      "text": "7,362,41,50",
                      "type": "7,362,17"
                    }
                  }
                ],
                "src": {
                  "name": "7,366,0",
                  "since": "7,364,15",
                  "text": "7,357,8,114"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "lookupReferenceHolder",
                "since": "5.0.0",
                "text": "Gets the Controller or Component that is used as the reference holder for this view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "`false` to return this as the reference holder if\nthis instance has set `referenceHolder`. Unlike `{@link #method!getInheritedConfig getInheritedConfig}` this method\ndefaults to `true` because it is possible that a `{@link #cfg!reference reference}` property set by the\nowner of a component that is also a `referenceHolder` itself. In this case, the\n`{@link #cfg!reference reference}` connects not to this component but to the parent referenceHolder.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "23,261,26",
                      "text": "23,261,41,50:23,262,8,321",
                      "type": "23,261,16",
                      "value": "23,261,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The reference holder.\n",
                    "type": "Ext.app.ViewController/Ext.container.Container",
                    "src": {
                      "text": "23,267,65,22",
                      "type": "23,267,17"
                    }
                  }
                ],
                "src": {
                  "access": "23,269,8",
                  "name": "23,272,0",
                  "since": "23,270,15",
                  "text": "23,259,8,86"
                }
              },
              {
                "$type": "method",
                "name": "lookupSession",
                "since": "5.0.0",
                "text": "Returns the `{@link Ext.data.Session}` for this instance. This property may come\nfrom this instance's `{@link #cfg!session #session}` or be inherited from this object's parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` to ignore a `{@link #cfg!session session}` configured on\nthis instance and only consider an inherited session.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "7,373,26",
                      "text": "7,373,42,48:7,374,8,54",
                      "type": "7,373,16",
                      "value": "7,373,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Session",
                    "src": {
                      "type": "7,375,17"
                    }
                  }
                ],
                "src": {
                  "name": "7,378,0",
                  "since": "7,376,15",
                  "text": "7,371,8,156"
                }
              },
              {
                "$type": "method",
                "name": "lookupViewModel",
                "since": "5.0.0",
                "text": "Returns the `{@link Ext.app.ViewModel}` for this instance. This property may come from this\nthis instance's `{@link #cfg!viewModel #viewModel}` or be inherited from this object's parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` to ignore a `{@link #cfg!viewModel viewModel}` configured on\nthis instance and only consider an inherited view model.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "7,394,26",
                      "text": "7,394,42,50:7,395,8,57",
                      "type": "7,394,16",
                      "value": "7,394,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "type": "7,396,17"
                    }
                  }
                ],
                "src": {
                  "name": "7,399,0",
                  "since": "7,397,15",
                  "text": "7,392,8,164"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "makeBindableUpdater",
                "since": "5.0.0",
                "text": "Returns an `{@link #method!update update}` method for the given Config that will call `{@link #method!publishState #publishState}`\nto ensure two-way bindings (via `{@link #cfg!bind bind}`) as well as any `{@link #cfg!publishes publishes}` are updated.\nThis method is cached on the `cfg` instance for re-use.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cfg",
                    "type": "Ext.Config",
                    "src": {
                      "name": "7,749,32",
                      "type": "7,749,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The updater function.\n",
                    "type": "Function",
                    "src": {
                      "text": "7,750,31,22",
                      "type": "7,750,21"
                    }
                  }
                ],
                "src": {
                  "access": "7,751,12",
                  "name": "7,754,0",
                  "since": "7,752,19",
                  "text": "7,746,12,223"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.form.field.Field#markInvalid",
                "name": "markInvalid",
                "items": [
                  {
                    "$type": "param",
                    "name": "errors",
                    "src": {
                      "name": "8,852,0"
                    }
                  }
                ],
                "src": {
                  "inheritdoc": "8,850,8",
                  "name": "8,852,0"
                }
              },
              {
                "$type": "method",
                "name": "mask",
                "text": "Masks this component with a semi-opaque layer and makes the contents unavailable to clicks.\n\nSee {@link #method!unmask #unmask}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "msg",
                    "optional": true,
                    "text": "A message to show in the center of the mask layer.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4064,25",
                      "text": "3,4064,30,51",
                      "type": "3,4064,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "msgCls",
                    "optional": true,
                    "text": "A CSS class name to use on the message element in the center of the layer.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4065,25",
                      "text": "3,4065,33,75",
                      "type": "3,4065,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4067,0",
                  "text": "3,4060,8,115"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for {@link #method!addManagedListener #addManagedListener}.\n",
                "src": {
                  "inheritdoc": "11,1787,12",
                  "name": "11,1789,0",
                  "text": "11,1786,12,43"
                }
              },
              {
                "$type": "method",
                "name": "move",
                "text": "Move the element relative to its current position.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "direction",
                    "text": "Possible values are:\n\n- `\"l\"` (or `\"left\"`)\n- `\"r\"` (or `\"right\"`)\n- `\"t\"` (or `\"top\"`, or `\"up\"`)\n- `\"b\"` (or `\"bottom\"`, or `\"down\"`)\n",
                    "type": "String",
                    "src": {
                      "name": "19,798,24",
                      "text": "19,798,34,21:19,799,8,116",
                      "type": "19,798,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "distance",
                    "text": "How far to move the element in pixels\n",
                    "type": "Number",
                    "src": {
                      "name": "19,805,24",
                      "text": "19,805,33,38",
                      "type": "19,805,16"
                    }
                  }
                ],
                "src": {
                  "name": "19,807,0",
                  "text": "19,797,8,51"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for {@link #method!removeManagedListener #removeManagedListener}.\n",
                "src": {
                  "inheritdoc": "11,1793,12",
                  "name": "11,1795,0",
                  "text": "11,1792,12,46"
                }
              },
              {
                "$type": "method",
                "name": "nextNode",
                "text": "Returns the next node in the Component tree in tree traversal order.\n\nNote that this is not limited to siblings, and if invoked upon a node with no matching siblings, will walk the\ntree to attempt to find a match. Contrast with {@link #method!nextSibling #nextSibling}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to filter the following nodes.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4088,25",
                      "text": "3,4088,35,84",
                      "type": "3,4088,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The next node (or the next node which matches the selector).\nReturns `{@link null}` if there is no matching node.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4089,32,61:3,4090,8,45",
                      "type": "3,4089,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4092,0",
                  "text": "3,4084,8,250"
                }
              },
              {
                "$type": "method",
                "name": "nextSibling",
                "text": "Returns the next sibling of this Component.\n\nOptionally selects the next sibling which matches the passed {@link Ext.ComponentQuery} selector.\n\nMay also be referred to as **`next()`**\n\nNote that this is limited to siblings, and if no siblings of the item match, `{@link null}` is returned. Contrast with\n{@link #method!nextNode #nextNode}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to filter the following items.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4130,25",
                      "text": "3,4130,35,84",
                      "type": "3,4130,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The next sibling (or the next sibling which matches the selector).\nReturns `{@link null}` if there is no matching sibling.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4131,32,67:3,4132,8,48",
                      "type": "3,4131,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4134,0",
                  "text": "3,4122,8,329"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "11,1775,12",
                  "name": "11,1777,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onAdded",
                "since": "3.4.0",
                "template": true,
                "text": "Method to manage awareness of when components are added to their\nrespective Container, firing an #added event. References are\nestablished at add time rather than at render time.\n\nAllows addition of behavior when a Component is added to a\nContainer. At this stage, the Component is in the parent\nContainer's collection of child items. After calling the\nsuperclass's `{@link #method!onAdded onAdded}`, the `{@link #property!ownerCt ownerCt}` reference will be present,\nand if configured with a ref, the `refOwner` will be set.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "container",
                    "text": "Container which holds the component.\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "name": "3,4167,41",
                      "text": "3,4167,51,37",
                      "type": "3,4167,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "pos",
                    "text": "Position at which the component was added.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4168,24",
                      "text": "3,4168,28,43",
                      "type": "3,4168,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "instanced",
                    "text": "`false` if this component was instanced by the parent\ncontainer. `true` if the instance already existed when it was passed to the container.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,4169,25",
                      "text": "3,4169,35,54:3,4170,8,88",
                      "type": "3,4169,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4173,8",
                  "name": "3,4176,0",
                  "since": "3,4174,15",
                  "template": "3,4172,8",
                  "text": "3,4157,8,476"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "11,1190,44",
                      "text": "11,1190,54,37",
                      "type": "11,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "11,1191,37",
                      "text": "11,1191,40,30",
                      "type": "11,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1192,29",
                      "text": "11,1192,36,20",
                      "type": "11,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1193,29",
                      "text": "11,1193,38,44",
                      "type": "11,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,1195,0",
                  "text": "11,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "11,1175,44",
                      "text": "11,1175,54,37",
                      "type": "11,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "11,1176,37",
                      "text": "11,1176,40,30",
                      "type": "11,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1177,29",
                      "text": "11,1177,36,20",
                      "type": "11,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1178,29",
                      "text": "11,1178,38,44",
                      "type": "11,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,1180,0",
                  "text": "11,1170,12,183"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onBindStore",
                "text": "Template method, it is called when a new store is bound\nto the current instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store being bound\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "name": "22,134,40",
                      "text": "22,134,46,22",
                      "type": "22,134,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "initial",
                    "text": "True if this store is being bound as initialization of the instance.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "22,135,25",
                      "text": "22,135,33,69",
                      "type": "22,135,16"
                    }
                  }
                ],
                "src": {
                  "access": "22,133,8",
                  "name": "22,137,0",
                  "text": "22,131,8,81"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onBlur",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "4,1062,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,1060,8",
                  "name": "4,1062,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onBoxReady",
                "template": true,
                "text": "Invoked when this component has first achieved size. Occurs after the\n{@link #cfg!componentLayout #componentLayout} has completed its initial run.\n\nThis method is not called on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n\n**Note:** If the Component has a {@link Ext.Component#cfg!controller Ext.Component#controller}\nand the controller has a {@link Ext.app.ViewController#method!boxReady Ext.app.ViewController#boxReady} method\nit will be called passing the Component as the single param.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The width of this component\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4244,24",
                      "text": "3,4244,30,28",
                      "type": "3,4244,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The height of this component\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4245,24",
                      "text": "3,4245,31,29",
                      "type": "3,4245,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4248,8",
                  "name": "3,4250,0",
                  "template": "3,4247,8",
                  "text": "3,4234,8,511"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onChange",
                "text": "If grow=true, invoke the autoSize method when the field's value is changed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newVal",
                    "src": {
                      "name": "4,595,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldVal",
                    "src": {
                      "name": "4,595,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,592,8",
                  "name": "4,595,0",
                  "text": "4,593,8,76"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollapse",
                "text": "Disables the key navs for the BoundList when it is collapsed.\n",
                "src": {
                  "access": "5,1753,8",
                  "name": "5,1756,0",
                  "text": "5,1754,8,62"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onDestroy",
                "template": true,
                "text": "Allows addition of behavior to the destroy operation.\nAfter calling the superclass's onDestroy, the Component will be destroyed.\n",
                "src": {
                  "access": "3,4295,8",
                  "name": "3,4297,0",
                  "template": "3,4294,8",
                  "text": "3,4291,8,130"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onDirtyChange",
                "text": "Called when the field's dirty state changes. Adds/removes the {@link #cfg!dirtyCls #dirtyCls} on the main element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isDirty",
                    "type": "Boolean",
                    "src": {
                      "name": "8,796,25",
                      "type": "8,796,16"
                    }
                  }
                ],
                "src": {
                  "access": "8,794,8",
                  "name": "8,798,0",
                  "text": "8,795,8,101"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onDisable",
                "template": true,
                "text": "Allows addition of behavior to the disable operation.\nAfter calling the superclass's `{@link #method!onDisable onDisable}`, the Component will be disabled.\n",
                "src": {
                  "access": "3,4335,8",
                  "name": "3,4337,0",
                  "template": "3,4334,8",
                  "text": "3,4331,8,131"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onEnable",
                "template": true,
                "text": "Allows addition of behavior to the enable operation.\nAfter calling the superclass's `{@link #method!onEnable onEnable}`, the Component will be enabled.\n",
                "src": {
                  "access": "3,4369,8",
                  "name": "3,4371,0",
                  "template": "3,4368,8",
                  "text": "3,4365,8,128"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onEsc",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "9,167,0"
                    }
                  }
                ],
                "src": {
                  "access": "9,165,8",
                  "name": "9,167,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onExpand",
                "text": "Enables the key navs for the BoundList when it is expanded.\n",
                "src": {
                  "access": "5,1741,8",
                  "name": "5,1744,0",
                  "text": "5,1742,8,60"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onFieldMutation",
                "text": "Called when some event (See the checkChangeEvents property) mutates the input field.\nWe react to changes.\n\nSubclasses may provide an inplementation which may perform other tasks (eg ComboBox value matching)\nbefore calling the checkChange method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "8,751,0"
                    }
                  }
                ],
                "src": {
                  "access": "8,744,8",
                  "name": "8,751,0",
                  "text": "8,745,8,246"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onFocus",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "15,371,0"
                    }
                  }
                ],
                "src": {
                  "access": "15,369,8",
                  "name": "15,371,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onFocusEnter",
                "template": true,
                "text": "Called when focus enters this Component's hierarchy\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "event",
                        "text": "The underlying DOM event.\n",
                        "type": "Ext.event.Event",
                        "src": {
                          "name": "15,501,35",
                          "text": "15,501,41,26",
                          "type": "15,501,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "The element gaining focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "15,502,31",
                          "text": "15,502,38,27",
                          "type": "15,502,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "relatedTarget",
                        "text": "The element losing focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "15,503,31",
                          "text": "15,503,45,26",
                          "type": "15,503,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "toComponent",
                        "text": "The Component gaining focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "15,504,33",
                          "text": "15,504,45,29",
                          "type": "15,504,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "fromComponent",
                        "text": "The Component losing focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "15,505,33",
                          "text": "15,505,47,28",
                          "type": "15,505,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "15,500,24",
                      "type": "15,500,16"
                    }
                  }
                ],
                "src": {
                  "access": "15,498,8",
                  "name": "15,507,0",
                  "template": "15,497,8",
                  "text": "15,499,8,52"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onFocusLeave",
                "template": true,
                "text": "Called when focus exits from this Component's hierarchy\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "items": [
                      {
                        "$type": "property",
                        "name": "event",
                        "text": "The underlying DOM event.\n",
                        "type": "Ext.event.Event",
                        "src": {
                          "name": "15,529,35",
                          "text": "15,529,41,26",
                          "type": "15,529,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "The element gaining focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "15,530,31",
                          "text": "15,530,38,27",
                          "type": "15,530,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "relatedTarget",
                        "text": "The element losing focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "15,531,31",
                          "text": "15,531,45,26",
                          "type": "15,531,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "toComponent",
                        "text": "The Component gaining focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "15,532,33",
                          "text": "15,532,45,29",
                          "type": "15,532,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "fromComponent",
                        "text": "The Component losing focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "15,533,33",
                          "text": "15,533,47,28",
                          "type": "15,533,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "15,528,33",
                      "type": "15,528,16"
                    }
                  }
                ],
                "src": {
                  "access": "15,526,8",
                  "name": "15,535,0",
                  "template": "15,525,8",
                  "text": "15,527,8,56"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onHide",
                "template": true,
                "text": "Allows addition of behavior to the hide operation. After\ncalling the superclass's onHide, the Component will be hidden.\n\nGets passed the same parameters as #hide.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "type": "String/Ext.dom.Element/Ext.Component",
                    "src": {
                      "name": "3,4409,55",
                      "type": "3,4409,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,4410,27",
                      "type": "3,4410,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,4411,25",
                      "type": "3,4411,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4414,8",
                  "name": "3,4416,0",
                  "template": "3,4413,8",
                  "text": "3,4404,8,164"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onInheritedAdd",
                "text": "Called when this Inheritable is added to a parent\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "instanced",
                    "type": "Boolean",
                    "src": {
                      "name": "23,351,29",
                      "type": "23,351,20"
                    }
                  }
                ],
                "src": {
                  "access": "23,330,-1",
                  "name": "23,353,0",
                  "text": "23,350,12,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onInheritedRemove",
                "text": "Called when this inheritable is removed from a parent\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "destroying",
                    "text": "`true` if this item will be destroyed by it's container\n",
                    "type": "Boolean",
                    "src": {
                      "name": "23,369,29",
                      "text": "23,369,40,56",
                      "type": "23,369,20"
                    }
                  }
                ],
                "src": {
                  "access": "23,330,-1",
                  "name": "23,371,0",
                  "text": "23,368,12,54"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onMouseDown",
                "text": "Mousedown brings to front, and programmatically grabs focus\nunless the mousedown was on a focusable element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,283,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,279,8",
                  "name": "1,283,0",
                  "text": "1,280,8,108"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onPosition",
                "template": true,
                "text": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new x position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4470,24",
                      "text": "3,4470,26,20",
                      "type": "3,4470,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The new y position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4471,24",
                      "text": "3,4471,26,20",
                      "type": "3,4471,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4474,8",
                  "name": "3,4476,0",
                  "template": "3,4473,8",
                  "text": "3,4467,8,165"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onRemoved",
                "since": "3.4.0",
                "template": true,
                "text": "Method to manage awareness of when components are removed from their\nrespective Container, firing a #removed event. References are properly\ncleaned up after removing a component from its owning container.\n\nAllows addition of behavior when a Component is removed from\nits parent Container. At this stage, the Component has been\nremoved from its parent Container's collection of child items,\nbut has not been destroyed (It will be destroyed if the parent\nContainer's `autoDestroy` is `true`, or if the remove call was\npassed a truthy second parameter). After calling the\nsuperclass's `{@link #method!onRemoved onRemoved}`, the `{@link #property!ownerCt ownerCt}` and the `refOwner` will not\nbe present.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "destroying",
                    "text": "Will be passed as `true` if the Container performing the remove operation will delete this\nComponent upon remove.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,4205,25",
                      "text": "3,4205,36,91:3,4206,8,24",
                      "type": "3,4205,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4209,8",
                  "name": "3,4212,0",
                  "since": "3,4210,15",
                  "template": "3,4208,8",
                  "text": "3,4193,8,649"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onRender",
                "template": true,
                "text": "Template method called when this Component's DOM structure is created.\n\nAt this point, this Component's (and all descendants') DOM structure *exists* but it has not\nbeen layed out (positioned and sized).\n\nSubclasses which override this to gain access to the structure at render time should\ncall the parent class's method before attempting to access any child elements of the Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "parentNode",
                    "text": "The parent Element in which this Component's encapsulating element is contained.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "20,679,33",
                      "text": "20,679,44,81",
                      "type": "20,679,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "containerIdx",
                    "text": "The index within the parent Container's child collection of this Component.\n",
                    "type": "Number",
                    "src": {
                      "name": "20,680,24",
                      "text": "20,680,37,76",
                      "type": "20,680,16"
                    }
                  }
                ],
                "src": {
                  "access": "20,683,8",
                  "name": "20,685,0",
                  "template": "20,682,8",
                  "text": "20,671,8,387"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onResize",
                "template": true,
                "text": "Called when the component is resized.\n\nThis method is not called on components that use {@link #cfg!liquidLayout #liquidLayout}, such as\n{@link Ext.button.Button} and {@link Ext.form.field.Base}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "src": {
                      "name": "3,4488,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "src": {
                      "name": "3,4488,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldWidth",
                    "src": {
                      "name": "3,4488,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldHeight",
                    "src": {
                      "name": "3,4488,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,4486,8",
                  "name": "3,4488,0",
                  "template": "3,4485,8",
                  "text": "3,4479,8,199"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onScrollEnd",
                "template": true,
                "text": "Invoked when a scroll operation is completed via this component's {@link #cfg!scrollable #scrollable}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The current x position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4522,24",
                      "text": "3,4522,26,23",
                      "type": "3,4522,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The current y position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4523,24",
                      "text": "3,4523,26,23",
                      "type": "3,4523,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4525,8",
                  "name": "3,4521,16",
                  "template": "3,4524,8",
                  "text": "3,4520,8,96"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onScrollMove",
                "template": true,
                "text": "Invoked when this component is scrolled via its {@link #cfg!scrollable #scrollable}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The current x position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4513,24",
                      "text": "3,4513,26,23",
                      "type": "3,4513,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The current y position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4514,24",
                      "text": "3,4514,26,23",
                      "type": "3,4514,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4516,8",
                  "name": "3,4512,16",
                  "template": "3,4515,8",
                  "text": "3,4511,8,78"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onScrollStart",
                "template": true,
                "text": "Invoked when a scroll is initiated on this component via its {@link #cfg!scrollable #scrollable}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The current x position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4504,24",
                      "text": "3,4504,26,23",
                      "type": "3,4504,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The current y position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4505,24",
                      "text": "3,4505,26,23",
                      "type": "3,4505,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4507,8",
                  "name": "3,4503,16",
                  "template": "3,4506,8",
                  "text": "3,4502,8,91"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onShow",
                "template": true,
                "text": "Allows addition of behavior to the show operation. After\ncalling the superclass's onShow, the Component will be visible.\n\nOverride in subclasses where more complex behaviour is needed.\n\nGets passed the same parameters as #show.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "type": "String/Ext.dom.Element",
                    "src": {
                      "name": "3,4536,41",
                      "type": "3,4536,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,4537,27",
                      "type": "3,4537,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,4538,25",
                      "type": "3,4538,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4541,8",
                  "name": "3,4543,0",
                  "template": "3,4540,8",
                  "text": "3,4529,8,229"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onShowComplete",
                "template": true,
                "text": "Invoked after the #afterShow method is complete.\n\nGets passed the same `callback` and `scope` parameters that #afterShow received.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "type": "Function",
                    "src": {
                      "name": "3,4570,27",
                      "type": "3,4570,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "3,4571,25",
                      "type": "3,4571,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4574,8",
                  "name": "3,4576,0",
                  "template": "3,4573,8",
                  "text": "3,4566,8,132"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onStateChange",
                "text": "This method is called when any of the {@link #cfg!stateEvents #stateEvents} are fired.\n",
                "src": {
                  "access": "13,175,8",
                  "name": "13,177,0",
                  "text": "13,174,8,70"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onTriggerClick",
                "text": "Handles the trigger click; by default toggles between expanding and collapsing the picker component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "9,396,0"
                    }
                  }
                ],
                "src": {
                  "access": "9,394,8",
                  "name": "9,396,0",
                  "text": "9,393,8,101"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onUnbindStore",
                "text": "Template method, it is called when an existing store is unbound\nfrom the current instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store being unbound\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "name": "22,124,40",
                      "text": "22,124,46,24",
                      "type": "22,124,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "initial",
                    "text": "True if this store is being bound as initialization of the instance.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "22,125,25",
                      "text": "22,125,33,69",
                      "type": "22,125,16"
                    }
                  }
                ],
                "src": {
                  "access": "22,123,8",
                  "name": "22,127,0",
                  "text": "22,121,8,91"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "owns",
                "text": "Returns `true` if the passed element is within the container tree of this component.\n\nFor example if a menu's submenu contains an {@link Ext.form.field.Date}, that top level\nmenu owns the elements of the date picker. Using this method, you can tell if an event took place\nwithin a certain component tree.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "src": {
                      "name": "3,6329,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6322,12",
                  "name": "3,6329,0",
                  "text": "3,6323,12,305"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "parseDate",
                "text": "Parses an input value into a valid Date object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "String/Date",
                    "src": {
                      "name": "0,376,29",
                      "type": "0,376,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,374,8",
                  "name": "0,378,0",
                  "text": "0,375,8,48"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "postBlur",
                "text": "Template method to do any post-blur processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "15,356,33",
                      "text": "15,356,35,17",
                      "type": "15,356,16"
                    }
                  }
                ],
                "src": {
                  "access": "15,355,8",
                  "name": "15,358,0",
                  "text": "15,354,8,48"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "postFocus",
                "text": "Template method to do any post-focus processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "15,411,33",
                      "text": "15,411,35,17",
                      "type": "15,411,16"
                    }
                  }
                ],
                "src": {
                  "access": "15,410,8",
                  "name": "15,413,0",
                  "text": "15,409,8,49"
                }
              },
              {
                "$type": "method",
                "name": "previousNode",
                "text": "Returns the previous node in the Component tree in tree traversal order.\n\nNote that this is not limited to siblings, and if invoked upon a node with no matching siblings, will walk the\ntree in reverse order to attempt to find a match. Contrast with {@link #method!previousSibling #previousSibling}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to filter the preceding nodes.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4601,25",
                      "text": "3,4601,35,84",
                      "type": "3,4601,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The previous node (or the previous node which matches the selector).\nReturns `{@link null}` if there is no matching node.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4602,32,69:3,4603,8,45",
                      "type": "3,4602,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4605,0",
                  "text": "3,4597,8,275"
                }
              },
              {
                "$type": "method",
                "name": "previousSibling",
                "text": "Returns the previous sibling of this Component.\n\nOptionally selects the previous sibling which matches the passed {@link Ext.ComponentQuery}\nselector.\n\nMay also be referred to as **`prev()`**\n\nNote that this is limited to siblings, and if no siblings of the item match, `{@link null}` is returned. Contrast with\n{@link #method!previousNode #previousNode}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A {@link Ext.ComponentQuery} selector to filter the preceding items.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4645,25",
                      "text": "3,4645,35,84",
                      "type": "3,4645,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The previous sibling (or the previous sibling which matches the selector).\nReturns `{@link null}` if there is no matching sibling.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4646,32,75:3,4647,8,48",
                      "type": "3,4646,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4649,0",
                  "text": "3,4636,8,341"
                }
              },
              {
                "$type": "method",
                "name": "processRawValue",
                "text": "Performs any necessary manipulation of a raw String value to prepare it for conversion and/or\n{@link #method!validate #validate}. For text fields this applies the configured {@link #cfg!stripCharsRe #stripCharsRe}\nto the raw value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The unprocessed string value\n",
                    "type": "String",
                    "src": {
                      "name": "4,872,24",
                      "text": "4,872,30,29",
                      "type": "4,872,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The processed string value\n",
                    "type": "String",
                    "src": {
                      "text": "4,873,25,27",
                      "type": "4,873,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,875,0",
                  "text": "4,869,8,208"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "24,220,20",
                      "text": "24,220,25,34",
                      "type": "24,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "24,221,22,57:24,222,4,22",
                      "type": "24,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "24,155,12",
                  "text": "24,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "publishState",
                "since": "5.0.0",
                "text": "Publish this components state to the `ViewModel`. If no arguments are given (or if\nthis is the first call), the entire state is published. This state is determined by\nthe `{@link #cfg!publishes publishes}` property.\n\nThis method is called only by component authors.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "optional": true,
                    "text": "The name of the property to update.\n",
                    "type": "String",
                    "src": {
                      "name": "7,422,25",
                      "text": "7,422,35,36",
                      "type": "7,422,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value of `property`. Only needed if `property` is given.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,423,25",
                      "text": "7,423,32,61",
                      "type": "7,423,16"
                    }
                  }
                ],
                "src": {
                  "access": "7,424,8",
                  "name": "7,427,0",
                  "since": "7,425,15",
                  "text": "7,416,8,244"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "publishValue",
                "text": "Publish the value of this field.\n",
                "src": {
                  "access": "14,392,8",
                  "name": "14,394,0",
                  "text": "14,390,8,34"
                }
              },
              {
                "$type": "method",
                "name": "rawToValue",
                "text": "Converts a raw input field value into a mixed-type value that is suitable for this particular field type. This\nallows controlling the normalization and conversion of user-entered values into field-type-appropriate values,\ne.g. a Date object for {@link Ext.form.field.Date}, and is invoked by {@link #method!getValue #getValue}.\n\nIt is up to individual implementations to decide how to handle raw values that cannot be successfully converted\nto the desired object type.\n\nSee {@link #method!valueToRaw #valueToRaw} for the opposite conversion.\n\nThe base implementation does no conversion, returning the raw value untouched.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "rawValue",
                    "type": "Object",
                    "src": {
                      "name": "8,588,24",
                      "type": "8,588,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The converted value.\n",
                    "type": "Object",
                    "src": {
                      "text": "8,589,25,21",
                      "type": "8,589,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,592,0",
                  "text": "8,577,8,587"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "refreshScroll",
                "text": "Implementation which updates the scroll range of a touch scroller.\nSubclasses may change implementation.\n",
                "src": {
                  "access": "3,6358,12",
                  "name": "3,6362,0",
                  "text": "3,6359,12,105"
                }
              },
              {
                "$type": "method",
                "name": "registerFloatingItem",
                "text": "Called by Component#doAutoRender\n\nRegister a Container configured `floating: true` with this Component's {@link Ext.ZIndexManager}.\n\nComponents added in this way will not participate in any layout, but will be rendered\nupon first show in the way that {@link Ext.window.Window}s are.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cmp",
                    "src": {
                      "name": "3,4679,0"
                    }
                  }
                ],
                "src": {
                  "name": "3,4679,0",
                  "text": "3,4672,8,304"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1466,27",
                      "text": "11,1466,34,53",
                      "type": "11,1466,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "11,1467,36",
                      "text": "11,1467,43,58:11,1468,11,231",
                      "type": "11,1467,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "11,1473,28",
                      "text": "11,1473,36,60:11,1474,11,164",
                      "type": "11,1473,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "11,1479,28,130:11,1480,11,192",
                      "type": "11,1479,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,1490,0",
                  "text": "11,1453,11,651"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for {@link #method!unAfter #unAfter}.\n",
                "src": {
                  "name": "11,1248,0",
                  "text": "11,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for {@link #method!unBefore #unBefore}.\n",
                "src": {
                  "name": "11,1242,0",
                  "text": "11,1240,12,29"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #addCls} instead.\n",
                "deprecatedVersion": "4.1",
                "inheritdoc": "Ext.Component#removeCls",
                "name": "removeClass",
                "since": "2.3.0",
                "src": {
                  "deprecatedMessage": "3,6502,20",
                  "deprecatedVersion": "3,6502,20",
                  "inheritdoc": "3,6501,20",
                  "name": "3,6500,28",
                  "since": "3,6503,27"
                }
              },
              {
                "$type": "method",
                "name": "removeCls",
                "text": "Removes a CSS class from the top level element representing this component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "The CSS class name to remove.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,4689,33",
                      "text": "3,4689,37,30",
                      "type": "3,4689,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the Component to allow method chaining.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4690,32,48",
                      "type": "3,4690,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4692,0",
                  "text": "3,4688,8,76"
                }
              },
              {
                "$type": "method",
                "name": "removeClsWithUI",
                "text": "Removes a `{@link #cfg!cls cls}` to the `{@link #cfg!uiCls uiCls}` array, which will also call {@link #method!removeUIClsFromElement #removeUIClsFromElement} and removes it from all\nelements of this component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "A string or an array of strings to remove to the `{@link #cfg!uiCls uiCls}`.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,4703,33",
                      "text": "3,4703,37,58",
                      "type": "3,4703,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4705,0",
                  "text": "3,4701,8,143"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeDelegatedListener",
                "text": "Removes delegated listeners for a given eventName, function, and scope.\nUsers should not invoke this method directly.  It is called automatically by\nthe framework as part of {@link #method!removeListener #removeListener} processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "17,129,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "17,129,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "17,129,0"
                    }
                  }
                ],
                "src": {
                  "access": "17,124,12",
                  "name": "17,129,0",
                  "text": "17,125,12,210"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "11,1102,28",
                      "text": "11,1102,38,51",
                      "type": "11,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "11,1103,30",
                      "text": "11,1103,33,66:11,1104,12,76",
                      "type": "11,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1106,28",
                      "text": "11,1106,34,62:11,1107,12,1017",
                      "type": "11,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,1145,0",
                  "text": "11,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the {@link #method!mon #mon} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "11,526,56",
                      "text": "11,526,61,52",
                      "type": "11,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "11,527,34",
                      "text": "11,527,40,63",
                      "type": "11,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "11,528,29",
                      "text": "11,528,32,85",
                      "type": "11,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,529,27",
                      "text": "11,529,33,92:11,530,11,43",
                      "type": "11,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "11,532,0",
                  "text": "11,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "11,1307,28",
                      "text": "11,1307,36,44",
                      "type": "11,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1308,27",
                      "text": "11,1308,43,26:11,1309,11,41",
                      "type": "11,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "11,1306,11",
                  "name": "11,1311,0",
                  "text": "11,1305,11,38"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "removeUIClsFromElement",
                "text": "Method which removes a specified UI + `{@link #cfg!uiCls uiCls}` from the components element. The `{@link #cfg!cls cls}`\nwhich is added to the element will be: `this.baseCls + '-' + ui + uiCls`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "uiCls",
                    "text": "The UI class to remove from the element.\n",
                    "type": "String",
                    "src": {
                      "name": "3,2347,24",
                      "text": "3,2347,30,41",
                      "type": "3,2347,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,2348,8",
                  "name": "3,2350,0",
                  "text": "3,2345,8,159"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeUIFromElement",
                "text": "Method which removes a specified UI from the components element.\n",
                "src": {
                  "access": "3,6400,12",
                  "name": "3,6402,0",
                  "text": "3,6399,12,65"
                }
              },
              {
                "$type": "method",
                "name": "render",
                "text": "Renders the Component into the passed HTML element.\n\n**If you are using a {@link Ext.container.Container} object to house this\nComponent, then do not use the render method.**\n\nA Container's child Components are rendered by that Container's\n{@link Ext.container.Container#cfg!layout Ext.container.Container#layout} manager when the Container is first rendered.\n\nWhen creating complex UIs, it is important to remember that sizing and positioning\nof child items is the responsibility of the Container's {@link Ext.container.Container#cfg!layout Ext.container.Container#layout}\nmanager.  If you expect child items to be sized in response to user interactions, you must\nconfigure the Container with a layout manager which creates and manages the type of layout you\nhave in mind.\n\n**Omitting the Container's {@link Ext.container.Container#cfg!layout Ext.Container#layout} config means that a basic\nlayout manager is used which does nothing but render child components sequentially into the\nContainer. No sizing or positioning will be performed in this situation.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "container",
                    "optional": true,
                    "text": "The element this Component should be\nrendered into. If it is being created from existing markup, this should be omitted.\n",
                    "type": "Ext.dom.Element/HTMLElement/String",
                    "src": {
                      "name": "20,758,53",
                      "text": "20,758,64,37:20,759,8,84",
                      "type": "20,758,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "The element ID or DOM node index within the container **before**\nwhich this component will be inserted (defaults to appending to the end of the container)\n",
                    "type": "String/Number",
                    "src": {
                      "name": "20,760,32",
                      "text": "20,760,42,65:20,761,8,90",
                      "type": "20,760,16"
                    }
                  }
                ],
                "src": {
                  "name": "20,763,0",
                  "text": "20,740,8,986"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "renderActiveError",
                "text": "Overrides the method from the Ext.form.Labelable mixin to also add the invalidCls to the inputEl,\nas that is required for proper styling in IE with nested fields (due to lack of child selector)\n",
                "src": {
                  "access": "8,917,8",
                  "name": "8,921,0",
                  "text": "8,918,8,194"
                }
              },
              {
                "$type": "method",
                "name": "reset",
                "text": "Resets the current field value to the originally-loaded value and clears any validation messages.\nAlso adds **{@link #cfg!emptyText #emptyText}** and **{@link #cfg!emptyCls #emptyCls}** if the original value was blank.\n",
                "src": {
                  "name": "4,929,0",
                  "text": "4,926,8,190"
                }
              },
              {
                "$type": "method",
                "name": "resetOriginalValue",
                "text": "Resets the field's {@link #property!originalValue #originalValue} property so it matches the current {@link #method!getValue #getValue}. This is\ncalled by {@link Ext.form.Basic}.{@link Ext.form.Basic#method!setValues Ext.form.Basic#setValues} if the form's\n{@link Ext.form.Basic#cfg!trackResetOnLoad Ext.form.Basic#trackResetOnLoad} property is set to true.\n",
                "src": {
                  "name": "14,334,0",
                  "text": "14,330,8,282"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "since": "5.0.0",
                "text": "Gets the Controller or Component that is used as the event root for this view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "23,185,25",
                      "text": "23,185,44,46",
                      "type": "23,185,16",
                      "value": "23,185,38"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default listener scope.\n",
                    "type": "Ext.app.ViewController/Ext.container.Container",
                    "src": {
                      "text": "23,186,65,28",
                      "type": "23,186,17"
                    }
                  }
                ],
                "src": {
                  "access": "23,188,8",
                  "name": "23,191,0",
                  "since": "23,189,15",
                  "text": "23,183,8,80"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveSatelliteListenerScope",
                "since": "5.1.1",
                "text": "Returns the default listener scope for a \"satellite\" of this component.\nUsed for resolving scope for observable objects that are not part of the normal\nContainer/Component hierarchy (for example, plugins)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "satellite",
                    "type": "Ext.mixin.Observable",
                    "src": {
                      "name": "23,227,38",
                      "type": "23,227,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "23,228,25",
                      "type": "23,228,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The listener scope\n",
                    "type": "Object",
                    "src": {
                      "text": "23,229,25,19",
                      "type": "23,229,17"
                    }
                  }
                ],
                "src": {
                  "access": "23,230,8",
                  "name": "23,233,0",
                  "since": "23,231,15",
                  "text": "23,223,8,206"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the {@link #method!suspendEvent #suspendEvent} method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "11,1409,32",
                      "text": "11,1409,42,32",
                      "type": "11,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "11,1411,0",
                  "text": "11,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see {@link #method!suspendEvents #suspendEvents}).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See {@link #method!suspendEvents #suspendEvents}.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "11,1431,29",
                      "text": "11,1431,43,59:11,1432,11,53",
                      "type": "11,1431,19"
                    }
                  }
                ],
                "src": {
                  "name": "11,1434,0",
                  "text": "11,1426,11,198"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "reverseTranslateXY",
                "text": "Converts local coordinates into page-level coordinates\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xy",
                    "text": "The local x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "name": "19,943,26",
                      "text": "19,943,29,30",
                      "type": "19,943,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The translated coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "19,944,27,27",
                      "type": "19,944,17"
                    }
                  }
                ],
                "src": {
                  "access": "19,945,8",
                  "name": "19,947,0",
                  "text": "19,942,8,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "revertFocus",
                "text": "Returns focus to the cached previously focused Component or element.\n\nUsually called by onHide.\n",
                "src": {
                  "access": "15,550,12",
                  "name": "15,552,0",
                  "text": "15,546,12,97"
                }
              },
              {
                "$type": "method",
                "name": "savePropsToState",
                "text": "Gathers additional named properties of the instance and adds their current values\nto the passed state object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "propNames",
                    "text": "The name (or array of names) of the property to save.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "13,349,33",
                      "text": "13,349,43,54",
                      "type": "13,349,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The state object in to which to save the property values.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,350,24",
                      "text": "13,350,30,58",
                      "type": "13,350,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "state\n",
                    "type": "Object",
                    "src": {
                      "text": "13,351,25,6",
                      "type": "13,351,17"
                    }
                  }
                ],
                "src": {
                  "name": "13,353,0",
                  "text": "13,347,8,110"
                }
              },
              {
                "$type": "method",
                "name": "savePropToState",
                "text": "Conditionally saves a single property from this object to the given state object.\nThe idea is to only save state which has changed from the initial state so that\ncurrent software settings do not override future software settings. Only those\nvalues that are user-changed state should be saved.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "propName",
                    "text": "The name of the property to save.\n",
                    "type": "String",
                    "src": {
                      "name": "13,325,24",
                      "text": "13,325,33,34",
                      "type": "13,325,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The state object in to which to save the property.\n",
                    "type": "Object",
                    "src": {
                      "name": "13,326,24",
                      "text": "13,326,30,51",
                      "type": "13,326,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "stateName",
                    "text": "(optional) The name to use for the property in state.\n",
                    "type": "String",
                    "src": {
                      "name": "13,327,24",
                      "text": "13,327,34,54",
                      "type": "13,327,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the property was saved, false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "13,328,26,46",
                      "type": "13,328,17"
                    }
                  }
                ],
                "src": {
                  "name": "13,330,0",
                  "text": "13,320,8,294"
                }
              },
              {
                "$type": "method",
                "name": "saveState",
                "text": "Saves the state of the object to the persistence store.\n",
                "src": {
                  "name": "13,209,0",
                  "text": "13,207,8,56"
                }
              },
              {
                "$type": "method",
                "name": "scrollBy",
                "text": "Scrolls this Component by the passed delta values, optionally animating.\n\nAll of the following are equivalent:\n\n     comp.scrollBy(10, 10, true);\n     comp.scrollBy([10, 10], true);\n     comp.scrollBy({ x: 10, y: 10 }, true);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deltaX",
                    "text": "Either the x delta, an Array specifying x and y deltas or\nan object with \"x\" and \"y\" properties.\n",
                    "type": "Number/Number[]/Object",
                    "src": {
                      "name": "3,4768,40",
                      "text": "3,4768,47,58:3,4769,8,39",
                      "type": "3,4768,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deltaY",
                    "text": "Either the y delta, or an animate flag or config object.\n",
                    "type": "Number/Boolean/Object",
                    "src": {
                      "name": "3,4770,39",
                      "text": "3,4770,46,57",
                      "type": "3,4770,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "text": "Animate flag/config object if the delta values were passed separately.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,4771,32",
                      "text": "3,4771,40,71",
                      "type": "3,4771,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4773,0",
                  "text": "3,4760,8,227"
                }
              },
              {
                "$type": "method",
                "name": "scrollTo",
                "text": "Scrolls this component to the specified `x` and `y` coordinates.  Only applicable\nfor {@link #cfg!scrollable #scrollable} components.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "3,4784,24",
                      "type": "3,4784,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "3,4785,24",
                      "type": "3,4785,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard Element\nanimation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,4786,33",
                      "text": "3,4786,42,53:3,4787,8,24",
                      "type": "3,4786,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4789,0",
                  "text": "3,4782,8,118"
                }
              },
              {
                "$type": "method",
                "name": "select",
                "text": "Selects an item by a {@link Ext.data.Model}, or by a key value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "r",
                    "type": "Object",
                    "src": {
                      "name": "5,1768,24",
                      "type": "5,1768,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,1770,0",
                  "text": "5,1767,8,70"
                }
              },
              {
                "$type": "method",
                "name": "selectText",
                "text": "Selects text in this field\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "The index where the selection should start\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "4,1256,25",
                      "text": "4,1256,34,43",
                      "type": "4,1256,16",
                      "value": "4,1256,31"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index where the selection should end (defaults to the text length)\n",
                    "type": "Number",
                    "src": {
                      "name": "4,1257,25",
                      "text": "4,1257,30,71",
                      "type": "4,1257,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,1259,0",
                  "text": "4,1255,8,27"
                }
              },
              {
                "$type": "method",
                "name": "sequenceFx",
                "text": "Ensures that all effects queued after sequenceFx is called on this object are run in sequence. This is the\nopposite of {@link #method!syncFx #syncFx}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Object",
                    "src": {
                      "text": "21,350,25,5",
                      "type": "21,350,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,352,0",
                  "text": "21,348,8,136"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setActive",
                "text": "This method is called internally by {@link Ext.ZIndexManager} to signal that a floating Component has either been\nmoved to the top of its zIndex stack, or pushed from the top of its zIndex stack.\n\nIf a _Window_ is superceded by another Window, deactivating it hides its shadow.\n\nThis method also fires the {@link Ext.Component#event!activate Ext.Component#activate} or\n{@link Ext.Component#event!deactivate Ext.Component#deactivate} event depending on which action occurred.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "active",
                    "optional": true,
                    "text": "True to activate the Component, false to deactivate it.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,472,26",
                      "text": "1,472,40,56",
                      "type": "1,472,16",
                      "value": "1,472,33"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "doFocus",
                    "optional": true,
                    "text": "When activating, set to true to focus the component;\nwhen deactivating, set to false to avoid returning focus to previous element.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,473,26",
                      "text": "1,473,35,53:1,474,8,79",
                      "type": "1,473,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,463,8",
                  "name": "1,477,0",
                  "text": "1,464,8,436"
                }
              },
              {
                "$type": "method",
                "name": "setActiveError",
                "text": "Sets the active error message to the given string. This replaces the entire error message contents with the given\nstring. Also see {@link #method!setActiveErrors #setActiveErrors} which accepts an Array of messages and formats them according to the\n{@link #cfg!activeErrorsTpl #activeErrorsTpl}. Note that this only updates the error message element's text and attributes, you'll\nhave to call doComponentLayout to actually update the field's layout to match. If the field extends {@link Ext.form.field.Base} you should call {@link Ext.form.field.Base#method!markInvalid Ext.form.field.Base#markInvalid} instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "msg",
                    "text": "The error message\n",
                    "type": "String",
                    "src": {
                      "name": "2,800,24",
                      "text": "2,800,28,18",
                      "type": "2,800,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,802,0",
                  "text": "2,795,8,540"
                }
              },
              {
                "$type": "method",
                "name": "setActiveErrors",
                "text": "Set the active error message to an Array of error messages. The messages are formatted into a single message\nstring using the {@link #cfg!activeErrorsTpl #activeErrorsTpl}. Also see {@link #method!setActiveError #setActiveError} which allows setting the entire error\ncontents with a single string. Note that this only updates the error message element's text and attributes,\nyou'll have to call doComponentLayout to actually update the field's layout to match. If the field extends\n{@link Ext.form.field.Base} you should call {@link Ext.form.field.Base#method!markInvalid Ext.form.field.Base#markInvalid} instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "errors",
                    "text": "The error messages\n",
                    "type": "String[]",
                    "src": {
                      "name": "2,822,26",
                      "text": "2,822,33,19",
                      "type": "2,822,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,824,0",
                  "text": "2,817,8,543"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #setScrollable} instead\n",
                "deprecatedVersion": "5.0.0",
                "name": "setAutoScroll",
                "text": "Sets the overflow on the content element of the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "scroll",
                    "text": "True to allow the Component to auto scroll.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,4799,25",
                      "text": "3,4799,32,44",
                      "type": "3,4799,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4800,32,5",
                      "type": "3,4800,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "3,4801,8",
                  "deprecatedVersion": "3,4801,8",
                  "name": "3,4803,0",
                  "text": "3,4798,8,59"
                }
              },
              {
                "$type": "method",
                "name": "setBorder",
                "items": [
                  {
                    "$type": "param",
                    "name": "border",
                    "text": "The border, see {@link #cfg!border #border}. If a falsey value is passed\nthe border will be removed.\n",
                    "type": "String/Number",
                    "src": {
                      "name": "3,4810,31",
                      "text": "3,4810,38,61:3,4811,8,28",
                      "type": "3,4810,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4813,0"
                }
              },
              {
                "$type": "method",
                "name": "setBox",
                "text": "Sets the element's box.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "text": "The box to fill {x, y, width, height}\n",
                    "type": "Object",
                    "src": {
                      "name": "19,835,24",
                      "text": "19,835,28,38",
                      "type": "19,835,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "19,836,40,5",
                      "type": "19,836,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,838,0",
                  "text": "19,834,8,24"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setComponentLayout",
                "items": [
                  {
                    "$type": "param",
                    "name": "layout",
                    "src": {
                      "name": "3,6429,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,6427,12",
                  "name": "3,6429,0"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "18,1478,35",
                      "text": "18,1478,40,69",
                      "type": "18,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "18,1479,29",
                      "text": "18,1479,36,41",
                      "type": "18,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "18,1480,31,5",
                      "type": "18,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "18,1482,0",
                  "text": "18,1476,12,46"
                }
              },
              {
                "$type": "method",
                "name": "setDisabled",
                "text": "Enable or disable the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "disabled",
                    "text": "`true` to disable.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,4860,25",
                      "text": "3,4860,34,19",
                      "type": "3,4860,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4862,0",
                  "text": "3,4859,8,33"
                }
              },
              {
                "$type": "method",
                "name": "setDock",
                "text": "Sets the dock position of this component in its parent panel. Note that this only has effect if this item is part\nof the `dockedItems` collection of a parent that has a DockLayout (note that any Panel has a DockLayout by default)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dock",
                    "text": "The dock position.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,4840,24",
                      "text": "3,4840,29,19",
                      "type": "3,4840,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4841,32,5",
                      "type": "3,4841,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4843,0",
                  "text": "3,4838,8,230"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #setDock} instead.\n",
                "deprecatedVersion": "5.0",
                "inheritdoc": "Ext.Component#setDock",
                "name": "setDocked",
                "src": {
                  "deprecatedMessage": "3,6517,20",
                  "deprecatedVersion": "3,6517,20",
                  "inheritdoc": "3,6516,20",
                  "name": "3,6515,28"
                }
              },
              {
                "$type": "method",
                "name": "setEmptyText",
                "text": "Sets the default text to place into an empty field\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The {@link #cfg!emptyText #cfg-emptyText} value for this field\n",
                    "type": "String",
                    "src": {
                      "name": "4,971,24",
                      "text": "4,971,30,48",
                      "type": "4,971,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.field.Text",
                    "src": {
                      "text": "4,972,38,5",
                      "type": "4,972,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,974,0",
                  "text": "4,970,8,51"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setError",
                "text": "Set the current error state\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "error",
                    "text": "The error message to set\n",
                    "type": "String",
                    "src": {
                      "name": "8,899,24",
                      "text": "8,899,30,25",
                      "type": "8,899,16"
                    }
                  }
                ],
                "src": {
                  "access": "8,898,8",
                  "name": "8,901,0",
                  "text": "8,897,8,28"
                }
              },
              {
                "$type": "method",
                "name": "setFieldDefaults",
                "text": "Applies a set of default configuration values to this Labelable instance. For each of the properties in the given\nobject, check if this component hasOwnProperty that config; if not then it's inheriting a default value from its\nprototype and we should apply the default value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaults",
                    "text": "The defaults to apply to the object.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,991,24",
                      "text": "2,991,33,37",
                      "type": "2,991,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,993,0",
                  "text": "2,988,8,276"
                }
              },
              {
                "$type": "method",
                "name": "setFieldLabel",
                "text": "Set the label of this field.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "label",
                    "text": "The new label. The {@link #cfg!labelSeparator #labelSeparator} will be automatically appended to the label\nstring.\n",
                    "type": "String",
                    "src": {
                      "name": "2,531,24",
                      "text": "2,531,30,87:2,532,8,8",
                      "type": "2,531,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,534,0",
                  "text": "2,530,8,29"
                }
              },
              {
                "$type": "method",
                "name": "setFieldStyle",
                "text": "Set the {@link #cfg!fieldStyle #fieldStyle} of the {@link #property!inputEl #inputEl}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "style",
                    "text": "The style(s) to apply. Should be a valid argument to {@link Ext.dom.Element#method!applyStyles Ext.dom.Element#applyStyles}.\n",
                    "type": "String/Object/Function",
                    "src": {
                      "name": "8,428,40",
                      "text": "8,428,46,60:8,429,8,30",
                      "type": "8,428,16"
                    }
                  }
                ],
                "src": {
                  "name": "8,431,0",
                  "text": "8,427,8,83"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setFlex",
                "text": "Sets the flex property of this component. Only applicable when this component is\nan item of a box layout\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "flex",
                    "type": "Number",
                    "src": {
                      "name": "3,4870,24",
                      "type": "3,4870,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4869,8",
                  "name": "3,4872,0",
                  "text": "3,4867,8,105"
                }
              },
              {
                "$type": "method",
                "name": "setHeight",
                "text": "Sets the height of the component. This method fires the {@link #event!resize #resize} event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height to set. This may be one of:\n\n  - A Number specifying the new height in pixels.\n  - A String used to set the CSS height style.\n  - `{@link undefined}` to leave the height unchanged.\n  - `{@link null}` to clear the height.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,4879,24",
                      "text": "3,4879,31,43:3,4880,8,178",
                      "type": "3,4879,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4886,32,5",
                      "type": "3,4886,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4888,0",
                  "text": "3,4877,8,80"
                }
              },
              {
                "$type": "method",
                "name": "setHidden",
                "text": "Sets the hidden state of this component. This is basically the same as\n`{@link #method!setVisible #setVisible}` but the boolean parameter has the opposite meaning.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "hidden",
                    "type": "Boolean",
                    "src": {
                      "name": "3,5302,25",
                      "type": "3,5302,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.Component",
                    "src": {
                      "type": "3,5303,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5305,0",
                  "text": "3,5300,8,145"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setHiddenValue",
                "text": "Set the value of {@link #property!hiddenDataEl #hiddenDataEl}\nDynamically adds and removes input[type=hidden] elements\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "values",
                    "src": {
                      "name": "5,2093,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,2089,8",
                  "name": "5,2093,0",
                  "text": "5,2090,8,96"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setLimit",
                "text": "Updates either the min or max value. Converts the user's value into a Date object whose\nyear/month/day is set to the {@link #property!initDate #initDate} so that only the time fields are significant.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "src": {
                      "name": "0,278,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isMin",
                    "src": {
                      "name": "0,278,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,274,8",
                  "name": "0,278,0",
                  "text": "0,275,8,181"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.  In\nversions prior to 5.1, {@link #cfg!listeners #listeners} had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the {@link #method!on #on} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1804,28",
                      "text": "11,1804,38,14",
                      "type": "11,1804,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,1806,0",
                  "text": "11,1798,12,402"
                }
              },
              {
                "$type": "method",
                "name": "setLoading",
                "text": "This method allows you to show or hide a LoadMask on top of this component.\n\nThe mask will be rendered into the element returned by {@link #method!getMaskTarget #getMaskTarget} which for most Components is the Component's\nelement. See {@link #method!getMaskTarget #getMaskTarget} and {@link #cfg!maskElement #maskElement}.\n\nMost Components will return `{@link null}` indicating that their LoadMask cannot reside inside their element, but must\nbe rendered into the document body.\n\n{@link Ext.view.Table} however will direct a LoadMask to be rendered into the owning {@link Ext.panel.Table}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "load",
                    "text": "True to show the default LoadMask, a config object that will be passed to the\nLoadMask constructor, or a message String to show. False to hide the current LoadMask.\n",
                    "type": "Boolean/Object/String",
                    "src": {
                      "name": "3,4903,39",
                      "text": "3,4903,44,78:3,4904,8,87",
                      "type": "3,4903,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The LoadMask instance that has just been shown.\n",
                    "type": "Ext.LoadMask",
                    "src": {
                      "text": "3,4905,31,48",
                      "type": "3,4905,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,4907,0",
                  "text": "3,4893,8,543"
                }
              },
              {
                "$type": "method",
                "name": "setLocalX",
                "text": "Sets the local x coordinate of this element using CSS style. When used on an\nabsolute positioned element this method is symmetrical with {@link #method!getLocalX #getLocalX}, but\nmay not be symmetrical when used on a relatively positioned element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The x coordinate. A value of `{@link null}` sets the left style to 'auto'.\n",
                    "type": "Number",
                    "src": {
                      "name": "19,105,24",
                      "text": "19,105,26,67",
                      "type": "19,105,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "19,106,40,5",
                      "type": "19,106,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,108,0",
                  "text": "19,102,8,230"
                }
              },
              {
                "$type": "method",
                "name": "setLocalXY",
                "text": "Sets the local x and y coordinates of this element using CSS style. When used on an\nabsolute positioned element this method is symmetrical with {@link #method!getLocalXY #getLocalXY}, but\nmay not be symmetrical when used on a relatively positioned element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The x coordinate or an array containing [x, y]. A value of\n`{@link null}` sets the left style to 'auto'\n",
                    "type": "Number/Array",
                    "src": {
                      "name": "19,116,30",
                      "text": "19,116,32,59:19,117,8,37",
                      "type": "19,116,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The y coordinate, required if x is not an array. A value of\n`{@link null}` sets the top style to 'auto'\n",
                    "type": "Number",
                    "src": {
                      "name": "19,118,25",
                      "text": "19,118,28,60:19,119,8,36",
                      "type": "19,118,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "19,120,40,5",
                      "type": "19,120,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,122,0",
                  "text": "19,113,8,238"
                }
              },
              {
                "$type": "method",
                "name": "setLocalY",
                "text": "Sets the local y coordinate of this element using CSS style. When used on an\nabsolute positioned element this method is symmetrical with {@link #method!getLocalY #getLocalY}, but\nmay not be symmetrical when used on a relatively positioned element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The y coordinate. A value of `{@link null}` sets the top style to 'auto'.\n",
                    "type": "Number",
                    "src": {
                      "name": "19,130,24",
                      "text": "19,130,26,66",
                      "type": "19,130,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "19,131,40,5",
                      "type": "19,131,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,133,0",
                  "text": "19,127,8,230"
                }
              },
              {
                "$type": "method",
                "name": "setMargin",
                "text": "Sets the margin on the target element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "margin",
                    "text": "The margin to set. See the {@link #cfg!margin #margin} config.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "3,4955,31",
                      "text": "3,4955,38,51",
                      "type": "3,4955,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,4957,0",
                  "text": "3,4954,8,39"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setMasked",
                "text": "Set masked state for this Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isMasked",
                    "text": "True if masked, false otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,4037,25",
                      "text": "3,4037,34,33",
                      "type": "3,4037,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,4038,8",
                  "name": "3,4040,0",
                  "text": "3,4035,8,38"
                }
              },
              {
                "$type": "method",
                "name": "setMaxValue",
                "text": "Replaces any existing {@link #cfg!maxValue #maxValue} with the new time and refreshes the picker's range.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The maximum time that can be selected\n",
                    "type": "Date/String",
                    "src": {
                      "name": "0,262,29",
                      "text": "0,262,35,38",
                      "type": "0,262,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,264,0",
                  "text": "0,261,8,92"
                }
              },
              {
                "$type": "method",
                "name": "setMinValue",
                "text": "Replaces any existing {@link #cfg!minValue #minValue} with the new time and refreshes the picker's range.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The minimum time that can be selected\n",
                    "type": "Date/String",
                    "src": {
                      "name": "0,249,29",
                      "text": "0,249,35,38",
                      "type": "0,249,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,251,0",
                  "text": "0,248,8,92"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #setScrollable} instead\n",
                "deprecatedVersion": "5.0.0",
                "name": "setOverflowXY",
                "text": "Sets the overflow x/y on the content element of the component. The x/y overflow\nvalues can be any valid CSS overflow (e.g., 'auto' or 'scroll'). By default, the\nvalue is 'hidden'.  Passing `{@link undefined}` will preserve the current value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "overflowX",
                    "text": "The overflow-x value.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4988,24",
                      "text": "3,4988,34,22",
                      "type": "3,4988,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "overflowY",
                    "text": "The overflow-y value.\n",
                    "type": "String",
                    "src": {
                      "name": "3,4989,24",
                      "text": "3,4989,34,22",
                      "type": "3,4989,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,4990,32,5",
                      "type": "3,4990,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "3,4991,8",
                  "deprecatedVersion": "3,4991,8",
                  "name": "3,4993,0",
                  "text": "3,4984,8,235"
                }
              },
              {
                "$type": "method",
                "name": "setPagePosition",
                "text": "Sets the page XY position of the component. To set the left and top instead, use {@link #method!setPosition #setPosition}.\nThis method fires the {@link #event!move #event-move} event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new x position or an array of `[x,y]`.\n",
                    "type": "Number/Number[]",
                    "src": {
                      "name": "3,5005,33",
                      "text": "3,5005,35,43",
                      "type": "3,5005,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The new y position.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,5006,25",
                      "text": "3,5006,28,20",
                      "type": "3,5006,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "True to animate the Component into its new position. You may also pass an\nanimation configuration.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5007,33",
                      "text": "3,5007,42,74:3,5008,8,25",
                      "type": "3,5007,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5009,32,5",
                      "type": "3,5009,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5011,0",
                  "text": "3,5003,8,152"
                }
              },
              {
                "$type": "method",
                "name": "setPosition",
                "text": "Sets the left and top of the component. To set the page XY position instead, use {@link Ext.Component#method!setPagePosition Ext.Component#setPagePosition}. This\nmethod fires the {@link #event!move #event-move} event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new left, an array of `[x,y]`, or animation config object containing `x` and `y` properties.\n",
                    "type": "Number/Number[]/Object",
                    "src": {
                      "name": "3,5053,40",
                      "text": "3,5053,42,97",
                      "type": "3,5053,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The new top.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,5054,25",
                      "text": "3,5054,28,13",
                      "type": "3,5054,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "If `true`, the Component is _animated_ into its new position. You may also pass an\nanimation configuration.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5055,33",
                      "text": "3,5055,42,83:3,5056,8,25",
                      "type": "3,5055,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5057,32,5",
                      "type": "3,5057,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5059,0",
                  "text": "3,5051,8,185"
                }
              },
              {
                "$type": "method",
                "name": "setRawValue",
                "text": "Sets the field's raw value directly, bypassing {@link #method!valueToRaw #valueToRaw}, change detection, and\nvalidation. To set the value with these additional inspections see {@link #method!setValue #setValue}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to set\n",
                    "type": "Object",
                    "src": {
                      "name": "8,516,24",
                      "text": "8,516,30,17",
                      "type": "8,516,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "value The field value that is set\n",
                    "type": "Object",
                    "src": {
                      "text": "8,517,25,34",
                      "type": "8,517,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,519,0",
                  "text": "8,514,8,193"
                }
              },
              {
                "$type": "method",
                "name": "setReadOnly",
                "text": "Sets the read-only state of this field.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "readOnly",
                    "text": "True to prevent the user changing the field and explicitly\nhide the trigger(s). Setting this to true will supersede settings editable and\nhideTrigger. Setting this to false will defer back to {@link #cfg!editable #editable} and {@link #cfg!hideTrigger #hideTrigger}.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,813,25",
                      "text": "4,813,34,59:4,814,8,198",
                      "type": "4,813,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,817,0",
                  "text": "4,812,8,40"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setReadOnlyAttr",
                "text": "Sets the readonly attribute of the input element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "readOnly",
                    "src": {
                      "name": "4,852,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,849,8",
                  "name": "4,852,0",
                  "text": "4,850,8,49"
                }
              },
              {
                "$type": "method",
                "name": "setScrollX",
                "text": "Sets the \"x\" scroll position for this component.  Only applicable for\n{@link #cfg!scrollable #scrollable} components\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "3,5099,24",
                      "type": "3,5099,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard Element\nanimation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5100,33",
                      "text": "3,5100,42,53:3,5101,8,24",
                      "type": "3,5100,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,5103,0",
                  "text": "3,5097,8,101"
                }
              },
              {
                "$type": "method",
                "name": "setScrollY",
                "text": "Sets the \"y\" scroll position for this component.  Only applicable for\n{@link #cfg!scrollable #scrollable} components\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "3,5114,24",
                      "type": "3,5114,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard Element\nanimation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5115,33",
                      "text": "3,5115,42,53:3,5116,8,24",
                      "type": "3,5115,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,5118,0",
                  "text": "3,5112,8,101"
                }
              },
              {
                "$type": "method",
                "name": "setSize",
                "text": "Sets the width and height of this Component. This method fires the {@link #event!resize #resize} event. This method can accept\neither width and height as separate arguments, or you can pass a size object like `{width:10, height:20}`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width to set. This may be one of:\n\n  - A Number specifying the new width in pixels.\n  - A String used to set the CSS width style.\n  - A size object in the format `{width: widthValue, height: heightValue}`.\n  - `{@link undefined}` to leave the width unchanged.\n",
                    "type": "Number/String/Object",
                    "src": {
                      "name": "3,5130,38",
                      "text": "3,5130,44,42:3,5131,8,219",
                      "type": "3,5130,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height to set (not required if a size object is passed as the first arg).\nThis may be one of:\n\n  - A Number specifying the new height in pixels.\n  - A String used to set the CSS height style. Animation may **not** be used.\n  - `{@link undefined}` to leave the height unchanged.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "3,5137,31",
                      "text": "3,5137,38,82:3,5138,8,197",
                      "type": "3,5137,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5144,32,5",
                      "type": "3,5144,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5146,0",
                  "text": "3,5127,8,221"
                }
              },
              {
                "$type": "method",
                "name": "setStore",
                "since": "5.0.0",
                "text": "Sets the store to the specified store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "src": {
                      "name": "22,66,15"
                    }
                  }
                ],
                "src": {
                  "name": "22,69,0",
                  "since": "22,67,15",
                  "text": "22,65,8,39"
                }
              },
              {
                "$type": "method",
                "name": "setStyle",
                "text": "Sets the style for this Component's primary element.\n\nStyles should be a valid DOM element style property.\n[Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)\n(_along with the supported CSS version for each_)\n\n    var name = Ext.create({\n        xtype: 'component',\n        renderTo: Ext.getBody(),\n        html: 'Phineas Flynn'\n    });\n\n    // two-param syntax\n    name.setStyle('color', 'white');\n\n    // single-param syntax\n    name.setStyle({\n        fontWeight: 'bold',\n        backgroundColor: 'gray',\n        padding: '10px'\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The style property to be set, or an object of\nmultiple styles.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,5221,31",
                      "text": "3,5221,40,46:3,5222,8,17",
                      "type": "3,5221,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to apply to the given property, or null if an\nobject was passed.\n",
                    "type": "String",
                    "src": {
                      "name": "3,5223,25",
                      "text": "3,5223,32,56:3,5224,8,19",
                      "type": "3,5223,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5225,32,5",
                      "type": "3,5225,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5227,0",
                  "text": "3,5199,8,568"
                }
              },
              {
                "$type": "method",
                "name": "setTabIndex",
                "text": "Set the tabIndex property for this Focusable. If the focusEl\nis avalable, set tabIndex attribute on it, too.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newTabIndex",
                    "text": "new tabIndex to set\n",
                    "type": "Number",
                    "src": {
                      "name": "15,463,24",
                      "text": "15,463,36,20",
                      "type": "15,463,16"
                    }
                  }
                ],
                "src": {
                  "name": "15,465,0",
                  "text": "15,460,8,110"
                }
              },
              {
                "$type": "method",
                "name": "setUI",
                "text": "Sets the UI for the component. This will remove any existing UIs on the component. It will also loop through any\n`{@link #cfg!uiCls uiCls}` set on the component and rename them so they include the new UI.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ui",
                    "text": "The new UI for the component.\n",
                    "type": "String",
                    "src": {
                      "name": "3,5236,24",
                      "text": "3,5236,27,30",
                      "type": "3,5236,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,5238,0",
                  "text": "3,5234,8,186"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setupFramingTpl",
                "text": "Inject a reference to the function which applies the render template into the framing template. The framing template\nwraps the content.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "frameTpl",
                    "src": {
                      "name": "20,1411,0"
                    }
                  }
                ],
                "src": {
                  "access": "20,1407,12",
                  "name": "20,1411,0",
                  "text": "20,1408,12,136"
                }
              },
              {
                "$type": "method",
                "name": "setValue",
                "text": "Sets the specified value(s) into the field. For each value, if a record is found in the {@link #cfg!store #store} that\nmatches based on the {@link #cfg!valueField #valueField}, then that record's {@link #cfg!displayField #displayField} will be displayed in the\nfield. If no match is found, and the {@link #cfg!valueNotFoundText #valueNotFoundText} config option is defined, then that will be\ndisplayed as the default field text. Otherwise a blank value will be shown, although the value will still be set.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value(s) to be set. Can be either a single String or {@link Ext.data.Model},\nor an Array of Strings or Models.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "5,1849,33",
                      "text": "5,1849,39,81:5,1850,8,34",
                      "type": "5,1849,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.form.field.Field",
                    "src": {
                      "text": "5,1851,39,5",
                      "type": "5,1851,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,1853,0",
                  "text": "5,1845,8,438"
                }
              },
              {
                "$type": "method",
                "name": "setVisible",
                "since": "1.1.0",
                "text": "Convenience function to hide or show this component by Boolean.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "visible",
                    "text": "`true` to show, `false` to hide.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,5291,25",
                      "text": "3,5291,33,33",
                      "type": "3,5291,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5292,32,5",
                      "type": "3,5292,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5295,0",
                  "since": "3,5293,15",
                  "text": "3,5290,8,64"
                }
              },
              {
                "$type": "method",
                "name": "setWidth",
                "text": "Sets the width of the component. This method fires the {@link #event!resize #resize} event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width to set. This may be one of:\n\n  - A Number specifying the new width in pixels.\n  - A String used to set the CSS width style.\n  - `{@link undefined}` to leave the width unchanged.\n  - `{@link null}` to clear the width.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,5312,24",
                      "text": "3,5312,30,42:3,5313,8,174",
                      "type": "3,5312,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5319,32,5",
                      "type": "3,5319,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5321,0",
                  "text": "3,5310,8,79"
                }
              },
              {
                "$type": "method",
                "name": "setX",
                "text": "Sets the X position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The X position\n",
                    "type": "Number",
                    "src": {
                      "name": "19,139,24",
                      "text": "19,139,26,15",
                      "type": "19,139,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "19,140,40,5",
                      "type": "19,140,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,142,0",
                  "text": "19,138,8,66"
                }
              },
              {
                "$type": "method",
                "name": "setXY",
                "text": "Sets the position of the DOM element in page coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pos",
                    "text": "Contains X & Y [x, y] values for new position (coordinates\nare page-based)\n",
                    "type": "Number[]",
                    "src": {
                      "name": "19,148,26",
                      "text": "19,148,30,59:19,149,8,16",
                      "type": "19,148,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "19,150,40,5",
                      "type": "19,150,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,152,0",
                  "text": "19,147,8,58"
                }
              },
              {
                "$type": "method",
                "name": "setY",
                "text": "Sets the Y position of the DOM element based on page coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The Y position\n",
                    "type": "Number",
                    "src": {
                      "name": "19,158,24",
                      "text": "19,158,26,15",
                      "type": "19,158,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "19,159,40,5",
                      "type": "19,159,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,161,0",
                  "text": "19,157,8,66"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setZIndex",
                "text": "z-index is managed by the zIndexManager and may be overwritten at any time.\nReturns the next z-index to be used.\n\nIf this is a Container, then it will have rebased any managed floating Components,\nand so the next available z-index will be approximately 10000 above that.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "src": {
                      "name": "1,376,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,369,8",
                  "name": "1,376,0",
                  "text": "1,370,8,271"
                }
              },
              {
                "$type": "method",
                "name": "show",
                "text": "Shows this Component, rendering it first if {@link #cfg!autoRender #autoRender} or {@link #cfg!floating #cfg-floating} are `true`.\n\nAfter being shown, a {@link #cfg!floating #cfg-floating} Component (such as a {@link Ext.window.Window}), is activated it and\nbrought to the front of its {@link #property!zIndexManager #zIndexManager}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animateTarget",
                    "optional": true,
                    "text": "**only valid for {@link #cfg!floating #cfg-floating} Components such as {@link Ext.window.Window}s or {@link Ext.tip.ToolTip}s, or regular Components which have been configured\nwith `floating: true`.** The target from which the Component should animate from while opening.\n",
                    "type": "String/Ext.dom.Element",
                    "value": "null",
                    "src": {
                      "name": "3,5331,41",
                      "text": "3,5331,61,65:3,5332,8,209",
                      "type": "3,5331,16",
                      "value": "3,5331,55"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "A callback function to call after the Component is displayed.\nOnly necessary if animation was specified.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,5334,27",
                      "text": "3,5334,37,62:3,5335,8,43",
                      "type": "3,5334,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the callback is executed.\nDefaults to this Component.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,5336,25",
                      "text": "3,5336,32,64:3,5337,8,28",
                      "type": "3,5336,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5338,32,5",
                      "type": "3,5338,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5340,0",
                  "text": "3,5326,8,281"
                }
              },
              {
                "$type": "method",
                "name": "showAt",
                "text": "Displays component at specific xy position.\nA floating component (like a menu) is positioned relative to its ownerCt if any.\nUseful for popping up a context menu:\n\n    listeners: {\n        itemcontextmenu: function(view, record, item, index, event, options) {\n            Ext.create('Ext.menu.Menu', {\n                width: 100,\n                height: 100,\n                margin: '0 0 10 0',\n                items: [{\n                    text: 'regular item 1'\n                },{\n                    text: 'regular item 2'\n                },{\n                    text: 'regular item 3'\n                }]\n            }).showAt(event.getXY());\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The new x position or array of `[x,y]`.\n",
                    "type": "Number/Number[]",
                    "src": {
                      "name": "3,5427,33",
                      "text": "3,5427,35,40",
                      "type": "3,5427,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The new y position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,5428,25",
                      "text": "3,5428,28,19",
                      "type": "3,5428,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "True to animate the Component into its new position. You may also pass an\nanimation configuration.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "3,5429,33",
                      "text": "3,5429,42,74:3,5430,8,25",
                      "type": "3,5429,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5431,32,5",
                      "type": "3,5431,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5433,0",
                  "text": "3,5406,8,664"
                }
              },
              {
                "$type": "method",
                "name": "showBy",
                "text": "Shows this component by the specified {@link Ext.Component} or {@link Ext.dom.Element}.\nUsed when this component is {@link #cfg!floating #cfg-floating}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "component",
                    "text": "The {@link Ext.Component} or {@link Ext.dom.Element} to show the component by.\n",
                    "type": "Ext.Component/Ext.dom.Element",
                    "src": {
                      "name": "3,5454,47",
                      "text": "3,5454,57,79",
                      "type": "3,5454,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "Alignment position as used by {@link Ext.util.Positionable#method!getAlignToXY Ext.util.Positionable#getAlignToXY}.\nDefaults to `{@link #cfg!defaultAlign #defaultAlign}`. See {@link #method!alignTo #alignTo} for possible values.\n",
                    "type": "String",
                    "src": {
                      "name": "3,5455,25",
                      "text": "3,5455,35,74:3,5456,8,79",
                      "type": "3,5455,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "offsets",
                    "optional": true,
                    "text": "Alignment offsets as used by {@link Ext.util.Positionable#method!getAlignToXY Ext.util.Positionable#getAlignToXY}. See {@link #method!alignTo #alignTo} for possible values.\n",
                    "type": "Number[]",
                    "src": {
                      "name": "3,5457,27",
                      "text": "3,5457,36,115",
                      "type": "3,5457,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5458,32,5",
                      "type": "3,5458,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5460,0",
                  "text": "3,5452,8,157"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "18,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "18,1160,12",
                  "name": "18,1163,0",
                  "text": "18,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "stopAnimation",
                "text": "Stops any running effects and clears this object's internal effects queue if it contains any additional effects\nthat haven't started yet.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "21,328,34,12",
                      "type": "21,328,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,330,0",
                  "text": "21,326,8,138"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Replaced by {@link #stopAnimation}\n",
                "deprecatedVersion": "4.0",
                "name": "stopFx",
                "text": "Stops any running effects and clears this object's internal effects queue if it contains any additional effects\nthat haven't started yet.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "21,320,34,12",
                      "type": "21,320,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "21,319,8",
                  "deprecatedVersion": "21,319,8",
                  "name": "21,323,0",
                  "text": "21,317,8,138"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n{@link #method!resumeEvent #resumeEvent} will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "11,1381,32",
                      "text": "11,1381,42,33",
                      "type": "11,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "11,1383,0",
                  "text": "11,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see {@link #method!resumeEvents #resumeEvents})\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the {@link #method!resumeEvents #resumeEvents} call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "11,1363,28",
                      "text": "11,1363,43,48:11,1364,11,81",
                      "type": "11,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "11,1366,0",
                  "text": "11,1361,11,64"
                }
              },
              {
                "$type": "method",
                "name": "syncFx",
                "text": "Ensures that all effects queued after syncFx is called on this object are run concurrently. This is the opposite\nof {@link #method!sequenceFx #sequenceFx}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Object",
                    "src": {
                      "text": "21,338,25,5",
                      "type": "21,338,17"
                    }
                  }
                ],
                "src": {
                  "name": "21,340,0",
                  "text": "21,336,8,137"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "syncHidden",
                "text": "synchronizes the hidden state of this component with the state of its hierarchy\n",
                "src": {
                  "access": "1,345,8",
                  "name": "1,347,0",
                  "text": "1,344,8,80"
                }
              },
              {
                "$type": "method",
                "name": "toBack",
                "text": "Sends this Component to the back of (lower z-index than) any other visible windows\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "1,507,32,5",
                      "type": "1,507,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,509,0",
                  "text": "1,506,8,83"
                }
              },
              {
                "$type": "method",
                "name": "toFront",
                "text": "Brings this floating Component to the front of any other visible, floating Components managed by the same\n{@link Ext.ZIndexManager}\n\nIf this Component is modal, inserts the modal mask just below this Component in the z-index stack.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "preventFocus",
                    "optional": true,
                    "text": "Specify `true` to prevent the Component from being focused.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,446,26",
                      "text": "1,446,46,60",
                      "type": "1,446,16",
                      "value": "1,446,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "1,447,32,5",
                      "type": "1,447,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,449,0",
                  "text": "1,441,8,247"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "toggleInvalidCls",
                "items": [
                  {
                    "$type": "param",
                    "name": "hasError",
                    "src": {
                      "name": "4,1015,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,1013,8",
                  "name": "4,1015,0"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "24,235,21,32",
                      "type": "24,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "24,226,12",
                  "text": "24,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "24,297,21,32",
                      "type": "24,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "24,239,12",
                  "text": "24,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "transformRawValue",
                "text": "Transform the raw value before it is set\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value\n",
                    "type": "Object",
                    "src": {
                      "name": "8,553,24",
                      "text": "8,553,30,10",
                      "type": "8,553,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value to set\n",
                    "type": "Object",
                    "src": {
                      "text": "8,554,25,17",
                      "type": "8,554,17"
                    }
                  }
                ],
                "src": {
                  "access": "8,552,8",
                  "name": "8,556,0",
                  "text": "8,551,8,41"
                }
              },
              {
                "$type": "method",
                "name": "translatePoints",
                "text": "Translates the passed page coordinates into left/top css values for the element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The page x or an array containing [x, y]\n",
                    "type": "Number/Array",
                    "src": {
                      "name": "19,892,30",
                      "text": "19,892,32,41",
                      "type": "19,892,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The page y, required if x is not an array\n",
                    "type": "Number",
                    "src": {
                      "name": "19,893,25",
                      "text": "19,893,28,42",
                      "type": "19,893,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with left and top properties. e.g.\n{left: (value), top: (value)}\n",
                    "type": "Object",
                    "src": {
                      "text": "19,894,25,45:19,895,8,30",
                      "type": "19,894,17"
                    }
                  }
                ],
                "src": {
                  "name": "19,897,0",
                  "text": "19,891,8,80"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "translateXY",
                "text": "Translates the passed page coordinates into x and y css values for the element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The page x or an array containing [x, y]\n",
                    "type": "Number/Array",
                    "src": {
                      "name": "19,908,30",
                      "text": "19,908,32,41",
                      "type": "19,908,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The page y, required if x is not an array\n",
                    "type": "Number",
                    "src": {
                      "name": "19,909,25",
                      "text": "19,909,28,42",
                      "type": "19,909,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with x and y properties. e.g.\n{x: (value), y: (value)}\n",
                    "type": "Object",
                    "src": {
                      "text": "19,910,25,40:19,911,8,25",
                      "type": "19,910,17"
                    }
                  }
                ],
                "src": {
                  "access": "19,912,8",
                  "name": "19,914,0",
                  "text": "19,907,8,79"
                }
              },
              {
                "$type": "method",
                "name": "trimLabelSeparator",
                "text": "Returns the trimmed label by slicing off the label separator character. Can be overridden.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The trimmed field label, or empty string if not defined\n",
                    "type": "String",
                    "src": {
                      "text": "2,507,25,56",
                      "type": "2,507,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,509,0",
                  "text": "2,506,8,91"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for {@link #method!removeListener #removeListener}.\n",
                "src": {
                  "inheritdoc": "11,1781,12",
                  "name": "11,1783,0",
                  "text": "11,1780,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "11,1218,44",
                      "text": "11,1218,54,55",
                      "type": "11,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "11,1219,37",
                      "text": "11,1219,40,23",
                      "type": "11,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1220,29",
                      "text": "11,1220,36,41",
                      "type": "11,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1221,29",
                      "text": "11,1221,38,22",
                      "type": "11,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,1223,0",
                  "text": "11,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "11,1204,44",
                      "text": "11,1204,54,55",
                      "type": "11,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "11,1205,37",
                      "text": "11,1205,40,23",
                      "type": "11,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1206,29",
                      "text": "11,1206,36,41",
                      "type": "11,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "11,1207,29",
                      "text": "11,1207,38,22",
                      "type": "11,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "11,1209,0",
                  "text": "11,1200,12,98"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "unbindStoreListeners",
                "text": "Unbinds listeners from this component to the store. By default it will remove\nanything bound by the bindStoreListeners method, however it can be overridden\nin a subclass to provide any more complicated handling.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store to unbind from\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "name": "22,78,40",
                      "text": "22,78,46,25",
                      "type": "22,78,16"
                    }
                  }
                ],
                "src": {
                  "access": "22,77,8",
                  "name": "22,80,0",
                  "text": "22,74,8,212"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "18,1589,30",
                      "text": "18,1589,36,44",
                      "type": "18,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "18,1590,31,5",
                      "type": "18,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "18,1591,12",
                  "name": "18,1593,0",
                  "text": "18,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "unmask",
                "text": "Removes the mask applied by {@link #method!mask #mask}\n",
                "src": {
                  "name": "3,5508,0",
                  "text": "3,5506,8,42"
                }
              },
              {
                "$type": "method",
                "name": "unsetActiveError",
                "text": "Clears the active error message(s). Note that this only clears the error message element's text and attributes,\nyou'll have to call doComponentLayout to actually update the field's layout to match. If the field extends {@link Ext.form.field.Base} you should call {@link Ext.form.field.Base#method!clearInvalid Ext.form.field.Base#clearInvalid} instead.\n",
                "src": {
                  "name": "2,890,0",
                  "text": "2,886,8,326"
                }
              },
              {
                "$type": "method",
                "name": "up",
                "text": "Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed selector or component.\n\n*Important.* There is not a universal upwards navigation pointer. There are several upwards relationships\nsuch as the {@link Ext.button.Button} which activates a {@link Ext.button.Button#cfg!menu Ext.button.Button#cfg-menu}, or the\n{@link Ext.menu.Item} which activated a {@link Ext.menu.Item#cfg!menu Ext.menu.Item#cfg-menu}, or the\n{@link Ext.grid.column.Column} which activated the column menu.\n\nThese differences are abstracted away by this method.\n\nExample:\n\n    var owningTabPanel = grid.up('tabpanel');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "The selector component or actual component to test. If not passed the immediate owner/activator is returned.\n",
                    "type": "String/Ext.Component",
                    "src": {
                      "name": "3,5535,39",
                      "text": "3,5535,49,109",
                      "type": "3,5535,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "limit",
                    "optional": true,
                    "text": "This may be a selector upon which to stop the upward scan, or a limit of the number of steps, or Component reference to stop on.\n",
                    "type": "String/Number/Ext.Component",
                    "src": {
                      "name": "3,5536,46",
                      "text": "3,5536,53,129",
                      "type": "3,5536,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching ancestor Container (or `{@link undefined}` if no match was found).\n",
                    "type": "Ext.container.Container",
                    "src": {
                      "text": "3,5537,42,72",
                      "type": "3,5537,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5539,0",
                  "text": "3,5522,8,627"
                }
              },
              {
                "$type": "method",
                "name": "update",
                "since": "3.4.0",
                "text": "Update the content area of a component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "htmlOrData",
                    "text": "If this component has been configured with a\ntemplate via the tpl config then it will use this argument as data to populate the\ntemplate. If this component was not configured with a template, the components\ncontent area will be updated via Ext.Element update.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,5576,31",
                      "text": "3,5576,42,45:3,5577,8,215",
                      "type": "3,5576,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "loadScripts",
                    "optional": true,
                    "text": "Only legitimate when using the `{@link #cfg!html html}`\nconfiguration. Causes embedded script tags to be executed. Inline source will be executed\nwith this Component as the scope (`this` reference).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,5580,26",
                      "text": "3,5580,45,38:3,5581,8,143",
                      "type": "3,5580,16",
                      "value": "3,5580,38"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "Only legitimate when using the `{@link #cfg!html html}` configuration.\nCallback to execute when scripts have finished loading.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,5583,27",
                      "text": "3,5583,37,53:3,5584,8,56",
                      "type": "3,5583,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scriptScope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which to\nexecute *inline* script elements content. Scripts with a `src` attribute cannot\nbe executed with this scope.\n",
                    "type": "Object",
                    "value": "`this`",
                    "src": {
                      "name": "3,5585,25",
                      "text": "3,5585,45,41:3,5586,8,110",
                      "type": "3,5585,16",
                      "value": "3,5585,37"
                    }
                  }
                ],
                "src": {
                  "name": "3,5591,0",
                  "since": "3,5589,15",
                  "text": "3,5575,8,40"
                }
              },
              {
                "$type": "method",
                "name": "updateBox",
                "text": "Sets the current box measurements of the component's underlying element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "text": "An object in the format {x, y, width, height}\n",
                    "type": "Object",
                    "src": {
                      "name": "3,5647,24",
                      "text": "3,5647,28,46",
                      "type": "3,5647,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "3,5648,32,5",
                      "type": "3,5648,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,5650,0",
                  "text": "3,5646,8,73"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateFrame",
                "text": "Updates the frame elements to match new framing. The current `frameBody` is\npreserved by transplanting it into the new frame. All other frame `{@link #cfg!childEls childEls}`\nare destroyed and recreated if needed by the new frame. This method cannot\ntransition from framed to non-framed or vise-versa or between table and div\nbased framing.\n",
                "src": {
                  "access": "20,1427,12",
                  "name": "20,1429,0",
                  "text": "20,1422,12,319"
                }
              },
              {
                "$type": "method",
                "name": "updateLayout",
                "text": "Updates this component's layout. If this update affects this components {@link #property!ownerCt #ownerCt},\nthat component's `{@link #method!updateLayout updateLayout}` method will be called to perform the layout instead.\nOtherwise, just this component (and its child items) will layout.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object with layout options.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "defer",
                        "text": "`true` if this layout should be deferred.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,5665,33",
                          "text": "3,5665,39,42",
                          "type": "3,5665,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "isRoot",
                        "text": "`true` if this layout should be the root of the layout.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,5666,33",
                          "text": "3,5666,40,56",
                          "type": "3,5666,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "3,5664,25",
                      "text": "3,5664,34,31",
                      "type": "3,5664,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,5668,0",
                  "text": "3,5660,8,242"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateSession",
                "text": "Updates the session config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "session",
                    "type": "Ext.data.Session",
                    "src": {
                      "name": "7,814,38",
                      "type": "7,814,20"
                    }
                  }
                ],
                "src": {
                  "access": "7,815,12",
                  "name": "7,817,0",
                  "text": "7,813,12,28"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateValue",
                "text": "Internal setting of value when records are added to the valueCollection\nsetValue itself adds to the valueCollection.\n",
                "src": {
                  "access": "5,2044,8",
                  "name": "5,2048,0",
                  "text": "5,2045,8,117"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateViewModel",
                "text": "Updates the viewModel config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "viewModel",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "name": "7,829,39",
                      "type": "7,829,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldViewModel",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "name": "7,830,39",
                      "type": "7,830,20"
                    }
                  }
                ],
                "src": {
                  "access": "7,831,12",
                  "name": "7,833,0",
                  "text": "7,828,12,30"
                }
              },
              {
                "$type": "method",
                "name": "validate",
                "text": "Returns whether or not the field value is currently valid by {@link #method!getErrors #getErrors} the field's current\nvalue, and fires the {@link #event!validitychange #validitychange} event if the field's validity has changed since the last validation.\n**Note**: {@link #cfg!disabled #disabled} fields are always treated as valid.\n\nCustom implementations of this method are allowed to have side-effects such as triggering error message display.\nTo validate without side-effects, use {@link #method!isValid #isValid}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "True if the value is valid, else false\n",
                    "type": "Boolean",
                    "src": {
                      "text": "14,493,26,39",
                      "type": "14,493,17"
                    }
                  }
                ],
                "src": {
                  "name": "14,495,0",
                  "text": "14,486,8,460"
                }
              },
              {
                "$type": "method",
                "name": "validateValue",
                "text": "Uses {@link #method!getErrors #getErrors} to build an array of validation errors. If any errors are found, they are passed to\n{@link #method!markInvalid #markInvalid} and false is returned, otherwise true is returned.\n\nPreviously, subclasses were invited to provide an implementation of this to process validations - from 3.2\nonwards {@link #method!getErrors #getErrors} should be overridden instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to validate\n",
                    "type": "Object",
                    "src": {
                      "name": "8,830,24",
                      "text": "8,830,30,22",
                      "type": "8,830,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if all validations passed, false if one or more failed\n",
                    "type": "Boolean",
                    "src": {
                      "text": "8,831,26,60",
                      "type": "8,831,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,833,0",
                  "text": "8,824,8,346"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "24,340,21,50",
                      "type": "24,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "24,301,12",
                  "text": "24,302,4,1821"
                }
              },
              {
                "$type": "method",
                "name": "valueToRaw",
                "text": "Converts a mixed-type value to a raw representation suitable for displaying in the field. This allows controlling\nhow value objects passed to {@link #method!setValue #setValue} are shown to the user, including localization. For instance, for a\n{@link Ext.form.field.Date}, this would control how a Date object passed to {@link #method!setValue #setValue} would be converted\nto a String for display in the field.\n\nSee {@link #method!rawToValue #rawToValue} for the opposite conversion.\n\nThe base implementation simply does a standard toString conversion, and converts {@link Ext#method!isEmpty Ext#isEmpty}\nto an empty string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The mixed-type value to convert to the raw representation.\n",
                    "type": "Object",
                    "src": {
                      "name": "8,569,24",
                      "text": "8,569,30,59",
                      "type": "8,569,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The converted raw value.\n",
                    "type": "Object",
                    "src": {
                      "text": "8,570,25,25",
                      "type": "8,570,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,572,0",
                  "text": "8,559,8,568"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "18,1049,13",
                  "name": "18,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "18,1066,12",
                  "name": "18,1062,33",
                  "since": "18,1067,19",
                  "text": "18,1063,12,225",
                  "type": "18,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "18,1076,12",
                  "name": "18,1072,33",
                  "since": "18,1077,19",
                  "text": "18,1073,12,229",
                  "type": "18,1072,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "11,389,12",
                  "name": "11,392,0",
                  "text": "11,390,12,126"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "_isLayoutRoot",
                "optional": true,
                "text": "Setting this property to `true` causes the {@link #method!isLayoutRoot #isLayoutRoot} method to return\n`true` and stop the search for the top-most component for a layout.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "access": "3,1530,8",
                  "name": "3,1527,29",
                  "text": "3,1528,8,150",
                  "type": "3,1527,19",
                  "value": "3,1527,43"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "_renderState",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property holds one of the following values during the render process:\n\n  * **0** - The component is not rendered.\n  * **1** - The component has fired beforerender and is about to call beforeRender.\n   The component has just started rendering.\n  * **2** - The component has finished the `{@link #method!beforeRender beforeRender}` process and is about to\n   call `{@link #method!onRender onRender}`. This is when `rendering` is set to `true`.\n  * **3** - The component has started `{@link #method!onRender onRender}`. This is when `{@link #property!rendered rendered}` is set\n   to `true`.\n  * **4** - The component has finished its afterrender process.\n",
                "type": "Number",
                "src": {
                  "access": "20,136,8",
                  "name": "20,124,27",
                  "readonly": "20,137,8",
                  "since": "20,138,15",
                  "text": "20,125,8,553",
                  "type": "20,124,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "allowDomMove",
                "src": {
                  "access": "3,1444,8",
                  "name": "3,1446,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "ariaEl",
                "optional": true,
                "readonly": true,
                "since": "5.5.0",
                "text": "The name of the Component property that holds\na reference to the Element that serves as that Component's ARIA element.\nThis property will be replaced with the actual Element reference after rendering.\n\nMost of the simple Components will have their main element as ariaEl.\n",
                "type": "String",
                "value": "'el'",
                "src": {
                  "access": "20,149,8",
                  "name": "20,143,28",
                  "readonly": "20,150,8",
                  "since": "20,151,15",
                  "text": "20,143,41,46:20,144,8,227",
                  "type": "20,143,19",
                  "value": "20,143,35"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "ariaRenderAttributes",
                "optional": true,
                "text": "**Instance specific** ARIA attributes\nto render into Component's ariaEl. This object is only used during rendering,\nand is discarded afterwards.\n",
                "type": "Object",
                "src": {
                  "access": "6,64,8",
                  "name": "6,60,28",
                  "text": "6,60,50,38:6,61,8,108",
                  "type": "6,60,19"
                }
              },
              {
                "$type": "property",
                "name": "ariaRole",
                "optional": true,
                "readonly": true,
                "text": "ARIA role for this Component, defaults to no role.\nWith no role, no other ARIA attributes are set.\n",
                "type": "String",
                "src": {
                  "name": "6,53,28",
                  "readonly": "6,56,8",
                  "text": "6,53,38,51:6,54,8,49",
                  "type": "6,53,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "autoGenId",
                "text": "`true` indicates an `{@link #cfg!id id}` was auto-generated rather than provided by configuration.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1451,8",
                  "name": "3,1449,28",
                  "text": "3,1450,8,83",
                  "type": "3,1449,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "beforeReset",
                "text": "Template method before a field is reset.\n",
                "src": {
                  "access": "14,325,8",
                  "name": "14,327,0",
                  "text": "14,324,8,41"
                }
              },
              {
                "$type": "property",
                "name": "bodyEl",
                "text": "The div Element wrapping the component's contents. Only available after the component has been rendered.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "name": "2,49,44",
                  "text": "2,50,16,105",
                  "type": "2,49,27"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "borderBoxCls",
                "src": {
                  "access": "3,1456,8",
                  "name": "3,1458,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "clearValueOnEmpty",
                "src": {
                  "access": "5,575,8",
                  "name": "5,577,0"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "completeEdit",
                "text": "Called when focus leaves this input field.\nUsed to postprocess raw values and perform conversion and validation.\n",
                "src": {
                  "access": "8,459,8",
                  "name": "8,463,0",
                  "text": "8,460,8,113"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "componentLayoutCounter",
                "text": "The number of component layout calls made on this object.\n",
                "type": "Number",
                "src": {
                  "access": "3,1462,8",
                  "name": "3,1461,27",
                  "text": "3,1463,8,58",
                  "type": "3,1461,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "24,346,14",
                  "text": "24,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "contentPaddingProperty",
                "optional": true,
                "text": "The name of the padding property that is used by the layout to manage\npadding.  See {@link Ext.layout.container.Auto#property!managePadding Ext.layout.container.Auto#managePadding}\n",
                "type": "String",
                "value": "'padding'",
                "src": {
                  "name": "3,1468,28",
                  "text": "3,1469,8,146",
                  "type": "3,1468,19",
                  "value": "3,1468,51"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "convertPositionSpec",
                "text": "By default this method does nothing but return the position spec passed to it. In\nrtl mode it is overridden to convert \"l\" to \"r\" and vice versa when required.\n",
                "src": {
                  "access": "19,312,8",
                  "name": "19,314,0",
                  "text": "19,310,8,160"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "defaultBindProperty",
                "optional": true,
                "text": "This property is used to determine the property of a `{@link #cfg!bind bind}` config that is just\nthe value. For example, if `defaultBindProperty=\"value\"`, then this shorthand\n`{@link #cfg!bind bind}` config:\n\n     bind: '{name}'\n\nIs equivalent to this object form:\n\n     bind: {\n         value: '{name}'\n     }\n\nThe `{@link #property!defaultBindProperty defaultBindProperty}` is set to \"value\" for form fields and to \"store\" for\ngrids and trees.\n",
                "type": "String",
                "src": {
                  "access": "7,295,8",
                  "name": "7,280,28",
                  "text": "7,281,8,373",
                  "type": "7,280,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "deferLayouts",
                "src": {
                  "access": "3,1475,8",
                  "name": "3,1477,0"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `destroy` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "18,1102,12",
                  "name": "18,1100,32",
                  "text": "18,1101,12,69",
                  "type": "18,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dirty",
                "text": "The dirty state of the field.\n",
                "type": "Boolean",
                "src": {
                  "access": "14,104,8",
                  "name": "14,102,28",
                  "text": "14,103,8,30",
                  "type": "14,102,19"
                }
              },
              {
                "$type": "property",
                "name": "errorEl",
                "text": "The div Element that will contain the component's error message(s). Note that depending on the configured\n{@link #cfg!msgTarget #msgTarget}, this element may be hidden in favor of some other form of presentation, but will always\nbe present in the DOM for use by assistive technologies.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "name": "2,55,44",
                  "text": "2,56,16,271",
                  "type": "2,55,27"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when {@link #method!suspendEvents #suspendEvents} is called, decremented when {@link #method!resumeEvents #resumeEvents} is called.\n",
                "src": {
                  "access": "11,284,11",
                  "name": "11,287,0",
                  "text": "11,285,11,131"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "filtered",
                "readonly": true,
                "since": "5.0.0",
                "text": "True if there are extra `filters` appllied to this component.\n",
                "type": "Boolean",
                "src": {
                  "access": "5,226,8",
                  "name": "5,224,28",
                  "readonly": "5,227,8",
                  "since": "5,228,15",
                  "text": "5,225,8,62",
                  "type": "5,224,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "floating",
                "readonly": true,
                "text": "The value `true` indicates that this Component is floating.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,64,8",
                  "name": "1,62,28",
                  "readonly": "1,65,8",
                  "text": "1,63,8,60",
                  "type": "1,62,19"
                }
              },
              {
                "$type": "property",
                "name": "floatParent",
                "readonly": true,
                "text": "**Only present for {@link #cfg!floating #cfg-floating} Components which were inserted as child items of Containers.**\n\nThere are other similar relationships such as the {@link Ext.button.Button} which activates a {@link Ext.button.Button#cfg!menu Ext.button.Button#cfg-menu}, or the\n{@link Ext.menu.Item} which activated a {@link Ext.menu.Item#cfg!menu Ext.menu.Item#cfg-menu}, or the\n{@link Ext.grid.column.Column} which activated the column menu.\n\nThese differences are abstracted away by the {@link #method!up #up} method.\n\nFloating Components that are programmatically {@link Ext.Component#method!render Ext.Component#method-render} will not have a `{@link #property!floatParent floatParent}`\nproperty.\n\nSee {@link #cfg!floating #cfg-floating} and {@link #property!zIndexManager #zIndexManager}\n",
                "type": "Ext.container.Container",
                "src": {
                  "name": "3,1480,34",
                  "readonly": "3,1493,8",
                  "text": "3,1481,8,681",
                  "type": "3,1480,19"
                }
              },
              {
                "$type": "property",
                "name": "focusable",
                "readonly": true,
                "text": "\n`true` for interactive Components, `false` for static Components.\nFor Containers, this property reflects interactiveness of the\nContainer itself, not its children. See {@link #method!isFocusable #isFocusable}.\n\n**Note:** Plain components are static, so not focusable.\n",
                "type": "Boolean",
                "src": {
                  "name": "15,15,28",
                  "readonly": "15,16,8",
                  "text": "15,17,8,249",
                  "type": "15,15,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "focusEl",
                "text": "The component's focusEl.\nAvailable after rendering.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "access": "15,29,8",
                  "name": "15,27,36",
                  "text": "15,27,44,25:15,28,8,27",
                  "type": "15,27,19"
                }
              },
              {
                "$type": "property",
                "ignore": true,
                "name": "formatText",
                "src": {
                  "ignore": "0,124,9",
                  "name": "0,125,0"
                }
              },
              {
                "$type": "property",
                "name": "frameSize",
                "readonly": true,
                "text": "Indicates the width of any framing elements which were added within the encapsulating\nelement to provide graphical, rounded borders. See the {@link #cfg!frame #frame} config. This\nproperty is `{@link null}` if the component is not framed.\n\nThis is an object containing the frame width in pixels for all four sides of the\nComponent containing the following properties:\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "top",
                    "optional": true,
                    "text": "The width of the top framing element in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1506,38",
                      "text": "3,1506,45,48",
                      "type": "3,1506,19",
                      "value": "3,1506,42"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "right",
                    "optional": true,
                    "text": "The width of the right framing element in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1507,38",
                      "text": "3,1507,47,50",
                      "type": "3,1507,19",
                      "value": "3,1507,44"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "bottom",
                    "optional": true,
                    "text": "The width of the bottom framing element in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1508,38",
                      "text": "3,1508,48,51",
                      "type": "3,1508,19",
                      "value": "3,1508,45"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "left",
                    "optional": true,
                    "text": "The width of the left framing element in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1509,38",
                      "text": "3,1509,46,49",
                      "type": "3,1509,19",
                      "value": "3,1509,43"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "width",
                    "optional": true,
                    "text": "The total width of the left and right framing elements in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1510,38",
                      "text": "3,1510,47,66",
                      "type": "3,1510,19",
                      "value": "3,1510,44"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "height",
                    "optional": true,
                    "text": "The total height of the top and right bottom elements in pixels.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,1511,38",
                      "text": "3,1511,48,65",
                      "type": "3,1511,19",
                      "value": "3,1511,45"
                    }
                  }
                ],
                "src": {
                  "name": "3,1497,27",
                  "readonly": "3,1498,8",
                  "text": "3,1499,8,350",
                  "type": "3,1497,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "hasFocus",
                "src": {
                  "access": "8,237,8",
                  "name": "8,239,0"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via {@link #observe}) or\non the {@link Ext.app.EventBus}. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "11,290,30",
                  "readonly": "11,291,11",
                  "text": "11,292,11,790",
                  "type": "11,290,22"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "hiddenDataEl",
                "type": "Ext.dom.Element",
                "src": {
                  "access": "5,207,8",
                  "name": "5,206,36",
                  "type": "5,206,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "horizontalPosProp",
                "src": {
                  "access": "3,1516,8",
                  "name": "3,1518,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "initDate",
                "text": "This is the date to use when generating time values in the absence of either minValue\nor maxValue.  Using the current date causes DST issues on DST boundary dates, so this is an\narbitrary \"safe\" date that can be any date aside from DST boundary dates.\n",
                "src": {
                  "access": "0,166,8",
                  "name": "0,171,0",
                  "text": "0,167,8,252"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "initFocusable",
                "text": "Template method to do any Focusable related initialization that\ndoes not involve event listeners creation.\n",
                "src": {
                  "access": "15,74,8",
                  "name": "15,76,0",
                  "text": "15,72,8,107"
                }
              },
              {
                "$type": "property",
                "name": "initialConfig",
                "readonly": true,
                "text": "The config object passed to the constructor during Component creation.\n",
                "type": "Object",
                "src": {
                  "name": "3,2014,31",
                  "readonly": "3,2015,12",
                  "text": "3,2016,12,71",
                  "type": "3,2014,23"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "use {@link #inputWrap} instead\n",
                "deprecatedVersion": "5.0",
                "name": "inputCell",
                "text": "A reference to the element that wraps the input element. Only set after the\nfield has been rendered.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "deprecatedMessage": "4,682,12",
                  "deprecatedVersion": "4,682,12",
                  "name": "4,679,40",
                  "text": "4,680,12,101",
                  "type": "4,679,23"
                }
              },
              {
                "$type": "property",
                "name": "inputEl",
                "text": "The input Element for this Field. Only available after the field has been rendered.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "name": "8,89,40",
                  "text": "8,90,12,84",
                  "type": "8,89,23"
                }
              },
              {
                "$type": "property",
                "name": "inputWrap",
                "text": "A reference to the element that wraps the input element. Only set after the\nfield has been rendered.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "name": "4,473,40",
                  "text": "4,474,12,101",
                  "type": "4,473,23"
                }
              },
              {
                "$type": "property",
                "name": "isComponent",
                "text": "`true` in this class to identify an object as an instantiated Component, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1521,28",
                  "text": "3,1522,8,94",
                  "type": "3,1521,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "18,1084,12",
                  "name": "18,1082,32",
                  "readonly": "18,1085,12",
                  "since": "18,1086,19",
                  "text": "18,1083,12,64",
                  "type": "18,1082,23"
                }
              },
              {
                "$type": "property",
                "name": "isExpanded",
                "text": "True if the picker is currently expanded, false if not.\n",
                "type": "Boolean",
                "src": {
                  "name": "9,68,28",
                  "text": "9,69,8,56",
                  "type": "9,68,19"
                }
              },
              {
                "$type": "property",
                "name": "isFieldLabelable",
                "text": "Flag denoting that this object is labelable as a field. Always true.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,139,28",
                  "text": "2,140,8,69",
                  "type": "2,139,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "18,1093,12",
                  "name": "18,1091,32",
                  "readonly": "18,1094,12",
                  "since": "18,1095,19",
                  "text": "18,1092,12,75",
                  "type": "18,1091,23"
                }
              },
              {
                "$type": "property",
                "name": "isFormField",
                "text": "Flag denoting that this component is a Field. Always true.\n",
                "type": "Boolean",
                "src": {
                  "name": "14,23,28",
                  "text": "14,24,8,59",
                  "type": "14,23,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "18,1056,12",
                  "name": "18,1053,32",
                  "readonly": "18,1057,12",
                  "text": "18,1054,12,94",
                  "type": "18,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "11,278,31",
                  "text": "11,279,11,95",
                  "type": "11,278,22"
                }
              },
              {
                "$type": "property",
                "name": "isPickerField",
                "text": "`true` in this class to identify an object as an instantiated Picker Field, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "9,38,28",
                  "text": "9,39,8,97",
                  "type": "9,38,19"
                }
              },
              {
                "$type": "property",
                "name": "labelEl",
                "text": "The label Element for this component. Only available after the component has been rendered.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "name": "2,43,44",
                  "text": "2,44,16,92",
                  "type": "2,43,27"
                }
              },
              {
                "$type": "property",
                "name": "lastQuery",
                "text": "The value of the match string used to filter the store. Delete this property to force a requery. Example use:\n\n    var combo = new Ext.form.field.ComboBox({\n        ...\n        queryMode: 'remote',\n        listeners: {\n            // delete the previous query in the beforequery event or set\n            // combo.lastQuery = null (this will reload the store the next time it expands)\n            beforequery: function(qe){\n                delete qe.combo.lastQuery;\n            }\n        }\n    });\n\nTo make sure the filter in the store is not cleared the first time the ComboBox trigger is used configure the\ncombo with `lastQuery=''`. Example use:\n\n    var combo = new Ext.form.field.ComboBox({\n        ...\n        queryMode: 'local',\n        triggerAction: 'all',\n        lastQuery: ''\n    });\n",
                "type": "String",
                "src": {
                  "name": "5,496,27",
                  "text": "5,497,8,796",
                  "type": "5,496,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "layoutSuspendCount",
                "src": {
                  "access": "3,1535,8",
                  "name": "3,1537,0"
                }
              },
              {
                "$type": "property",
                "name": "maskOnDisable",
                "text": "This is an internal flag that you use when creating custom components. By default this is set to `true` which means\nthat every component gets a mask when it's disabled. Components like FieldContainer, FieldSet, Field, Button, Tab\noverride this property to `false` since they want to implement custom disable logic.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1596,28",
                  "text": "3,1597,8,315",
                  "type": "3,1596,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "msgTargets",
                "text": "Map for msg target lookup, if target is not in this map it is assumed\nto be an element id\n",
                "src": {
                  "access": "2,309,8",
                  "name": "2,313,0",
                  "text": "2,310,8,90"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "noWrap",
                "text": "Tells the layout system that the height can be measured immediately because the width does not need setting.\n",
                "src": {
                  "access": "2,328,8",
                  "name": "2,331,0",
                  "text": "2,329,8,109"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "offsetsCls",
                "src": {
                  "access": "3,1604,8",
                  "name": "3,1606,0"
                }
              },
              {
                "$type": "property",
                "name": "originalValue",
                "text": "The original value of the field as configured in the {@link #cfg!value #value} configuration, or as loaded by the last\nform load operation if the form's {@link Ext.form.Basic#cfg!trackResetOnLoad Ext.form.Basic#trackResetOnLoad} setting is `true`.\n",
                "type": "Object",
                "src": {
                  "name": "14,185,31",
                  "text": "14,186,12,218",
                  "type": "14,185,23"
                }
              },
              {
                "$type": "property",
                "name": "ownerCt",
                "readonly": true,
                "since": "2.3.0",
                "text": "This Component's owner {@link Ext.container.Container} (is set automatically\nwhen this Component is added to a Container).\n\n*Important.* This is not a universal upwards navigation pointer. It indicates the Container which owns and manages\nthis Component if any. There are other similar relationships such as the {@link Ext.button.Button} which activates a {@link Ext.button.Button#cfg!menu Ext.button.Button#cfg-menu}, or the\n{@link Ext.menu.Item} which activated a {@link Ext.menu.Item#cfg!menu Ext.menu.Item#cfg-menu}, or the\n{@link Ext.grid.column.Column} which activated the column menu.\n\nThese differences are abstracted away by the {@link #method!up #up} method.\n\n**Note**: to access items within the Container see {@link #cfg!itemId #itemId}.\n",
                "type": "Ext.container.Container",
                "src": {
                  "name": "3,1609,34",
                  "readonly": "3,1621,8",
                  "since": "3,1622,15",
                  "text": "3,1610,8,731",
                  "type": "3,1609,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "24,46,14",
                  "text": "24,47,4,65"
                }
              },
              {
                "$type": "property",
                "name": "rendered",
                "readonly": true,
                "since": "1.1.0",
                "text": "Indicates whether or not the component has been rendered.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,1626,28",
                  "readonly": "3,1628,8",
                  "since": "3,1629,15",
                  "text": "3,1627,8,58",
                  "type": "3,1626,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "rootCls",
                "src": {
                  "access": "3,1634,8",
                  "name": "3,1636,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "scrollerCls",
                "src": {
                  "access": "3,1639,8",
                  "name": "3,1641,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "scrollFlags",
                "readonly": true,
                "text": "An object property which provides unified information as to which dimensions are\nscrollable based upon the {@link #cfg!scrollable #scrollable} settings (And for *views* of trees and\ngrids, the owning panel's {@link Ext.panel.Table#cfg!scroll Ext.panel.Table#scroll} setting).\n\nNote that if you set overflow styles using the {@link #cfg!style #style} config or\n{@link Ext.panel.Panel#cfg!bodyStyle Ext.panel.Panel#bodyStyle} config, this object does not include\nthat information. Use {@link #cfg!scrollable #scrollable} if you need to access these flags.\n\nThis object has the following properties:\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "x",
                    "text": "`true` if this Component is scrollable\nhorizontally - style setting may be `'auto'` or `'scroll'`.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1655,40",
                      "text": "3,1655,42,39:3,1656,8,60",
                      "type": "3,1655,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "y",
                    "text": "`true` if this Component is scrollable\nvertically - style setting may be `'auto'` or `'scroll'`.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1657,40",
                      "text": "3,1657,42,39:3,1658,8,58",
                      "type": "3,1657,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "both",
                    "text": "`true` if this Component is scrollable both\nhorizontally and vertically.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1659,40",
                      "text": "3,1659,45,44:3,1660,8,29",
                      "type": "3,1659,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "overflowX",
                    "text": "The `overflow-x` style setting, `'auto'`\nor `'scroll'` or `''`.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1661,39",
                      "text": "3,1661,49,41:3,1662,8,23",
                      "type": "3,1661,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "overflowY",
                    "text": "The `overflow-y` style setting, `'auto'`\nor `'scroll'` or `''`.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1663,39",
                      "text": "3,1663,49,41:3,1664,8,23",
                      "type": "3,1663,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,1666,8",
                  "name": "3,1645,27",
                  "readonly": "3,1665,8",
                  "text": "3,1646,8,514",
                  "type": "3,1645,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "18,1413,12",
                  "name": "18,1379,34",
                  "text": "18,1380,12,1011",
                  "type": "18,1379,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "suspendCheckChange",
                "src": {
                  "access": "14,97,8",
                  "name": "14,99,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "synthetic",
                "optional": true,
                "text": "This property is `true` if the component was created internally by the framework\nand is not explicitly user-defined. This is set for such things as `Splitter`\ninstances managed by `{@link #cfg!border border}` and `box` layouts.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "access": "3,1218,8",
                  "name": "3,1214,29",
                  "text": "3,1215,8,208",
                  "type": "3,1214,19",
                  "value": "3,1214,39"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "topLabelCls",
                "src": {
                  "access": "2,159,8",
                  "name": "2,161,0"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "A composite of all the trigger button elements. Only set after the field has\nbeen rendered.\n",
                "deprecatedVersion": "5.0",
                "name": "triggerEl",
                "type": "Ext.dom.CompositeElement",
                "src": {
                  "deprecatedMessage": "4,667,16",
                  "deprecatedVersion": "4,667,16",
                  "name": "4,666,49",
                  "type": "4,666,27"
                }
              },
              {
                "$type": "property",
                "name": "triggerWrap",
                "text": "A reference to the element which encapsulates the input field and all\ntrigger button(s). Only set after the field has been rendered.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "name": "4,466,40",
                  "text": "4,467,12,133",
                  "type": "4,466,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "validRefRe",
                "text": "Regular expression used for validating `{@link #cfg!reference reference}` values.\n",
                "type": "RegExp",
                "src": {
                  "access": "7,302,8",
                  "name": "7,304,0",
                  "text": "7,301,8,59",
                  "type": "7,300,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "valueContainsPlaceholder",
                "src": {
                  "access": "4,402,8",
                  "name": "4,404,0"
                }
              },
              {
                "$type": "property",
                "name": "zIndexManager",
                "readonly": true,
                "text": "Only present for {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} Components after\nthey have been rendered.\n\nA reference to the ZIndexManager which is managing this Component's z-index.\n\nThe {@link Ext.ZIndexManager} maintains a stack of floating Component z-indices, and also provides\na single modal mask which is insert just beneath the topmost visible modal floating Component.\n\nFloating Components may be {@link Ext.Component#method!toFront Ext.Component#toFront} or {@link Ext.Component#method!toBack Ext.Component#toBack} of the\nz-index stack.\n\nThis defaults to the global {@link Ext.WindowManager} for floating Components that are\nprogramatically {@link Ext.Component#method!render Ext.Component#method-render}.\n\nFor {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} Components that are added to a\nContainer, the ZIndexManager is acquired from the first ancestor Container found\nthat is floating. If no floating ancestor is found, the global\n{@link Ext.WindowManager} is used.\n\nSee {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} and {@link #property!zIndexParent #zIndexParent}\n",
                "type": "Ext.ZIndexManager",
                "src": {
                  "name": "1,69,38",
                  "readonly": "1,90,8",
                  "text": "1,70,8,1043",
                  "type": "1,69,19"
                }
              },
              {
                "$type": "property",
                "name": "zIndexParent",
                "readonly": true,
                "text": "Only present for {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} Components which were\ninserted as child items of Containers, and which have a floating Container in\ntheir containment ancestry.\n\nFor {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} Components which are child items of a\nContainer, the zIndexParent will be a floating ancestor Container which is\nresponsible for the base z-index value of all its floating descendants. It\nprovides a {@link Ext.ZIndexManager} which provides z-indexing\nservices for all its descendant floating Components.\n\nFloating Components that are programmatically {@link Ext.Component#method!render Ext.Component#method-render} will not have a `{@link #property!zIndexParent zIndexParent}`\nproperty.\n\nFor example, the dropdown {@link Ext.view.BoundList} of a ComboBox which is in a Window will have the\nWindow as its `{@link #property!zIndexParent zIndexParent}`, and will always show above that Window, wherever the Window is placed in the z-index stack.\n\nSee {@link Ext.Component#cfg!floating Ext.Component#cfg-floating} and {@link #property!zIndexManager #zIndexManager}\n",
                "type": "Ext.container.Container",
                "src": {
                  "name": "1,94,34",
                  "readonly": "1,112,8",
                  "text": "1,95,8,973",
                  "type": "1,94,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "18,940,28",
                      "type": "18,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "18,941,32",
                      "text": "18,941,44,49",
                      "type": "18,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "18,942,12",
                  "inheritable": "18,944,12",
                  "name": "18,946,0",
                  "static": "18,943,12",
                  "text": "18,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "18,464,28",
                      "type": "18,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "18,461,12",
                  "inheritable": "18,463,12",
                  "name": "18,466,0",
                  "static": "18,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "18,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "18,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "18,659,12",
                  "inheritable": "18,661,12",
                  "name": "18,665,0",
                  "static": "18,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "18,522,28",
                      "text": "18,522,36,34",
                      "type": "18,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "18,523,30",
                      "text": "18,523,46,39",
                      "type": "18,523,20",
                      "value": "18,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "18,524,30",
                      "text": "18,524,45,45:18,525,12,53",
                      "type": "18,524,20",
                      "value": "18,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "18,527,12",
                  "name": "18,529,0",
                  "static": "18,526,12",
                  "text": "18,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "18,450,28",
                      "type": "18,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "18,451,31,5",
                      "type": "18,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "18,453,12",
                  "name": "18,455,0",
                  "static": "18,452,12",
                  "text": "18,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "18,693,30",
                      "text": "18,693,40,33",
                      "type": "18,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "18,694,34",
                      "text": "18,694,42,35",
                      "type": "18,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "18,695,31,5",
                      "type": "18,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "18,698,12",
                  "inheritable": "18,697,12",
                  "name": "18,700,0",
                  "static": "18,696,12",
                  "text": "18,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "18,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "18,810,12",
                  "inheritable": "18,812,12",
                  "name": "18,814,0",
                  "static": "18,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "18,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "18,824,12",
                  "inheritable": "18,826,12",
                  "name": "18,828,0",
                  "static": "18,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "18,107,29,22",
                      "type": "18,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "18,109,12",
                  "name": "18,111,0",
                  "static": "18,108,12",
                  "text": "18,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "18,1018,35",
                      "text": "18,1018,41,63:18,1019,12,43",
                      "type": "18,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "18,1020,35",
                      "text": "18,1020,42,25",
                      "type": "18,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "18,1022,12",
                  "name": "18,1025,0",
                  "static": "18,1021,12",
                  "text": "18,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "18,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "18,347,12",
                  "inheritable": "18,349,12",
                  "name": "18,352,0",
                  "static": "18,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "18,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "18,968,12",
                  "inheritable": "18,970,12",
                  "name": "18,972,0",
                  "static": "18,969,12",
                  "text": "18,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "18,989,29,10",
                      "type": "18,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "18,991,12",
                  "name": "18,993,0",
                  "static": "18,990,12",
                  "text": "18,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "18,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "18,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "18,840,12",
                  "inheritable": "18,842,12",
                  "name": "18,844,0",
                  "static": "18,841,12",
                  "text": "18,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "18,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "18,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "18,424,12",
                  "inheritable": "18,426,12",
                  "name": "18,428,0",
                  "static": "18,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "18,762,28",
                      "text": "18,762,36,52:18,763,12,66",
                      "type": "18,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "18,764,31,11",
                      "type": "18,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "18,766,12",
                  "name": "18,768,0",
                  "static": "18,765,12",
                  "text": "18,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "18,402,12",
                  "inheritable": "18,404,12",
                  "name": "18,406,0",
                  "static": "18,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "18,395,12",
                  "inheritable": "18,397,12",
                  "name": "18,399,0",
                  "static": "18,396,12"
                }
              }
            ]
          },
          {
            "$type": "vars",
            "items": [
              {
                "$type": "property",
                "name": "$form-clear-trigger-glyph",
                "text": "The default glyph for for the \"clear\" trigger when {@link Global_CSS#var!$enable-font-icons Global_CSS#$enable-font-icons} is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-times 16px $font-icon-font-family",
                "src": {
                  "name": "25,654,1",
                  "text": "25,652,4,100",
                  "type": "25,651,10",
                  "value": "25,654,36"
                }
              },
              {
                "$type": "property",
                "name": "$form-clear-trigger-glyph-color",
                "text": "The color of the \"clear\" trigger when {@link Global_CSS#var!$enable-font-icons Global_CSS#$enable-font-icons} is `true`.\n",
                "type": "color",
                "value": "$form-trigger-glyph-color",
                "src": {
                  "name": "25,660,1",
                  "text": "25,658,4,87",
                  "type": "25,657,10",
                  "value": "25,660,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-icon-background-image",
                "text": "The background image for error icons\n",
                "type": "String",
                "value": "'form/exclamation'",
                "src": {
                  "name": "25,211,1",
                  "text": "25,209,4,37",
                  "type": "25,208,10",
                  "value": "25,211,44"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-icon-height",
                "text": "Height for form error icons.\n",
                "type": "Number",
                "value": "16px",
                "src": {
                  "name": "25,223,1",
                  "text": "25,221,4,29",
                  "type": "25,220,10",
                  "value": "25,223,34"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-icon-side-margin",
                "text": "Margin for error icons that are aligned to the side of the field\n",
                "type": "Number/list",
                "value": "0 1px",
                "src": {
                  "name": "25,229,1",
                  "text": "25,227,4,65",
                  "type": "25,226,10",
                  "value": "25,229,39"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-icon-width",
                "text": "Width for form error icons.\n",
                "type": "Number",
                "value": "16px",
                "src": {
                  "name": "25,217,1",
                  "text": "25,215,4,28",
                  "type": "25,214,10",
                  "value": "25,217,33"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-msg-color",
                "text": "The text color of form error messages\n",
                "type": "color",
                "value": "$form-field-invalid-border-color",
                "src": {
                  "name": "25,247,1",
                  "text": "25,245,4,38",
                  "type": "25,244,10",
                  "value": "25,247,32"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-msg-font-family",
                "text": "The font-family of form error messages\n",
                "type": "String",
                "value": "$font-family",
                "src": {
                  "name": "25,265,1",
                  "text": "25,263,4,39",
                  "type": "25,262,10",
                  "value": "25,265,38"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-msg-font-size",
                "text": "The font-size of form error messages\n",
                "type": "Number",
                "value": "$font-size",
                "src": {
                  "name": "25,259,1",
                  "text": "25,257,4,37",
                  "type": "25,256,10",
                  "value": "25,259,36"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-msg-font-weight",
                "text": "The font-weight of form error messages\n",
                "type": "String",
                "value": "$font-weight",
                "src": {
                  "name": "25,253,1",
                  "text": "25,251,4,39",
                  "type": "25,250,10",
                  "value": "25,253,38"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-msg-line-height",
                "text": "The line-height of form error messages\n",
                "type": "Number",
                "value": "$form-error-icon-height",
                "src": {
                  "name": "25,271,1",
                  "text": "25,269,4,39",
                  "type": "25,268,10",
                  "value": "25,271,38"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-under-icon-spacing",
                "text": "The space between the icon and the message for errors that display under the field\n",
                "type": "Number",
                "value": "4px",
                "src": {
                  "name": "25,235,1",
                  "text": "25,233,4,83",
                  "type": "25,232,10",
                  "value": "25,235,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-error-under-padding",
                "text": "The padding on errors that display under the form field\n",
                "type": "Number/list",
                "value": "2px 2px 2px 0",
                "src": {
                  "name": "25,241,1",
                  "text": "25,239,4,56",
                  "type": "25,238,10",
                  "value": "25,241,36"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-background-color",
                "text": "Background color for form fields.\n",
                "type": "color",
                "value": "#fff",
                "src": {
                  "name": "25,115,17",
                  "text": "25,116,4,34",
                  "type": "25,115,10",
                  "value": "25,118,39"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-background-image",
                "text": "Background image for form fields.\n",
                "type": "String",
                "value": "'form/text-bg'",
                "src": {
                  "name": "25,120,18",
                  "text": "25,121,4,34",
                  "type": "25,120,10",
                  "value": "25,123,39"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-border-color",
                "text": "Border color for form fields.\n",
                "type": "color",
                "value": "$neutral-color",
                "src": {
                  "name": "25,79,17",
                  "text": "25,80,4,30",
                  "type": "25,79,10",
                  "value": "25,82,35"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-border-style",
                "text": "Border style for form fields.\n",
                "type": "String",
                "value": "solid",
                "src": {
                  "name": "25,91,18",
                  "text": "25,92,4,30",
                  "type": "25,91,10",
                  "value": "25,94,35"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-border-width",
                "text": "Border width for form fields.\n",
                "type": "Number",
                "value": "1px",
                "src": {
                  "name": "25,85,18",
                  "text": "25,86,4,30",
                  "type": "25,85,10",
                  "value": "25,88,35"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-color",
                "text": "Text color for form fields.\n",
                "type": "color",
                "value": "$color",
                "src": {
                  "name": "25,67,17",
                  "text": "25,68,4,28",
                  "type": "25,67,10",
                  "value": "25,70,28"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-disabled-opacity",
                "text": "Opacity of disabled form fields\n",
                "type": "Number",
                "value": ".3",
                "src": {
                  "name": "25,284,1",
                  "text": "25,282,4,32",
                  "type": "25,281,10",
                  "value": "25,284,39"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-empty-color",
                "text": "Text color for empty form fields.\n",
                "type": "color",
                "value": "gray",
                "src": {
                  "name": "25,73,17",
                  "text": "25,74,4,34",
                  "type": "25,73,10",
                  "value": "25,76,34"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-focus-border-color",
                "text": "Border color for focused form fields.\n\nIn the default Neptune color scheme this is the same as $base-highlight-color\nbut it does not change automatically when one changes the $base-color.  This is because\ncheckboxes and radio buttons have this focus color hard coded into their background\nimages.  If this color is changed, you should also modify checkbox and radio button\nbackground images to match\n",
                "type": "color",
                "value": "$base-color",
                "src": {
                  "name": "25,97,17",
                  "text": "25,98,4,400",
                  "type": "25,97,10",
                  "value": "25,106,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-font-family",
                "text": "Font family for form fields.\n",
                "type": "String",
                "value": "$font-family",
                "src": {
                  "name": "25,38,18",
                  "text": "25,39,4,29",
                  "type": "25,38,10",
                  "value": "25,41,34"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-font-size",
                "text": "Font size for form fields.\n",
                "type": "Number",
                "value": "$font-size",
                "src": {
                  "name": "25,32,18",
                  "text": "25,33,4,27",
                  "type": "25,32,10",
                  "value": "25,35,32"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-font-weight",
                "text": "Font weight for form fields.\n",
                "type": "String",
                "value": "$font-weight",
                "src": {
                  "name": "25,44,18",
                  "text": "25,45,4,29",
                  "type": "25,44,10",
                  "value": "25,47,34"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-height",
                "text": "Height for form fields.\n",
                "type": "Number",
                "value": "24px",
                "src": {
                  "name": "25,14,18",
                  "text": "25,15,4,24",
                  "type": "25,14,10",
                  "value": "25,17,29"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-invalid-background-color",
                "text": "Background color for invalid form fields.\n",
                "type": "color",
                "value": "#fff",
                "src": {
                  "name": "25,126,17",
                  "text": "25,127,4,42",
                  "type": "25,126,10",
                  "value": "25,129,47"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-invalid-background-image",
                "text": "Background image for invalid form fields.\n",
                "type": "String",
                "value": "'grid/invalid_line'",
                "src": {
                  "name": "25,131,18",
                  "text": "25,132,4,42",
                  "type": "25,131,10",
                  "value": "25,134,47"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-invalid-background-position",
                "text": "Background position for invalid form fields.\n",
                "type": "String/list",
                "value": "bottom",
                "src": {
                  "name": "25,141,23",
                  "text": "25,142,4,45",
                  "type": "25,141,10",
                  "value": "25,144,50"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-invalid-background-repeat",
                "text": "Background repeat for invalid form fields.\n",
                "type": "String",
                "value": "repeat-x",
                "src": {
                  "name": "25,136,18",
                  "text": "25,137,4,43",
                  "type": "25,136,10",
                  "value": "25,139,48"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-invalid-border-color",
                "text": "Border color for invalid toolbar text fields.\n",
                "type": "color",
                "value": "$form-text-field-invalid-border-color",
                "src": {
                  "name": "25,723,17",
                  "text": "25,724,4,46",
                  "type": "25,723,10",
                  "value": "25,726,56"
                }
              },
              {
                "$type": "property",
                "name": "$form-field-padding",
                "text": "Padding around form fields.\n",
                "type": "Number",
                "value": "1px 3px 2px",
                "src": {
                  "name": "25,26,18",
                  "text": "25,27,4,28",
                  "type": "25,26,10",
                  "value": "25,29,30"
                }
              },
              {
                "$type": "property",
                "name": "$form-file-field-color",
                "text": "Text color for file fields\n",
                "type": "color",
                "value": "$form-field-empty-color",
                "src": {
                  "name": "25,570,1",
                  "text": "25,568,4,27",
                  "type": "25,567,10",
                  "value": "25,570,33"
                }
              },
              {
                "$type": "property",
                "name": "$form-item-margin-bottom",
                "text": "The bottom margin to apply to form items when in auto, anchor, vbox, or table layout.\nThis value is also used as the default border-spacing in a form-layout.\n",
                "type": "Number",
                "value": "5px",
                "src": {
                  "name": "25,278,1",
                  "text": "25,275,4,158",
                  "type": "25,274,10",
                  "value": "25,278,35"
                }
              },
              {
                "$type": "property",
                "name": "$form-label-font-color",
                "text": "The text color of form field labels\n",
                "type": "color",
                "value": "$color",
                "src": {
                  "name": "25,169,1",
                  "text": "25,167,4,36",
                  "type": "25,166,10",
                  "value": "25,169,33"
                }
              },
              {
                "$type": "property",
                "name": "$form-label-font-family",
                "text": "The font-family of form field labels\n",
                "type": "String",
                "value": "$font-family",
                "src": {
                  "name": "25,187,1",
                  "text": "25,185,4,37",
                  "type": "25,184,10",
                  "value": "25,187,34"
                }
              },
              {
                "$type": "property",
                "name": "$form-label-font-size",
                "text": "The font-size of form field labels\n",
                "type": "Number",
                "value": "$font-size",
                "src": {
                  "name": "25,181,1",
                  "text": "25,179,4,35",
                  "type": "25,178,10",
                  "value": "25,181,32"
                }
              },
              {
                "$type": "property",
                "name": "$form-label-font-weight",
                "text": "The font-weight of form field labels\n",
                "type": "String",
                "value": "$font-weight",
                "src": {
                  "name": "25,175,1",
                  "text": "25,173,4,37",
                  "type": "25,172,10",
                  "value": "25,175,34"
                }
              },
              {
                "$type": "property",
                "name": "$form-label-horizontal-spacing",
                "text": "Horizontal space between the label and the field body when the label is left-aligned.\n",
                "type": "Number",
                "value": "5px",
                "src": {
                  "name": "25,199,1",
                  "text": "25,197,4,86",
                  "type": "25,196,10",
                  "value": "25,199,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-label-line-height",
                "text": "The line-height of form field labels\n",
                "type": "Number",
                "value": "round($form-label-font-size * 1.15)",
                "src": {
                  "name": "25,193,1",
                  "text": "25,191,4,37",
                  "type": "25,190,10",
                  "value": "25,193,34"
                }
              },
              {
                "$type": "property",
                "name": "$form-label-vertical-spacing",
                "text": "Vertical space between the label and the field body when the label is top-aligned.\n",
                "type": "Number",
                "value": "5px",
                "src": {
                  "name": "25,205,1",
                  "text": "25,203,4,83",
                  "type": "25,202,10",
                  "value": "25,205,39"
                }
              },
              {
                "$type": "property",
                "name": "$form-search-trigger-glyph",
                "text": "The default glyph for for the \"search\" trigger when {@link Global_CSS#var!$enable-font-icons Global_CSS#$enable-font-icons} is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-search 16px $font-icon-font-family",
                "src": {
                  "name": "25,642,1",
                  "text": "25,640,4,101",
                  "type": "25,639,10",
                  "value": "25,642,37"
                }
              },
              {
                "$type": "property",
                "name": "$form-search-trigger-glyph-color",
                "text": "The color of the \"search\" trigger when {@link Global_CSS#var!$enable-font-icons Global_CSS#$enable-font-icons} is `true`.\n",
                "type": "color",
                "value": "$form-trigger-glyph-color",
                "src": {
                  "name": "25,648,1",
                  "text": "25,646,4,88",
                  "type": "25,645,10",
                  "value": "25,648,43"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-background-color",
                "text": "The background color of the text field's input element\n",
                "type": "color",
                "value": "$form-field-background-color",
                "src": {
                  "name": "25,453,1",
                  "text": "25,451,4,55",
                  "type": "25,450,10",
                  "value": "25,453,44"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-background-image",
                "text": "The background image of the text field's input element\n",
                "type": "String",
                "value": "$form-field-background-image",
                "src": {
                  "name": "25,495,1",
                  "text": "25,493,4,55",
                  "type": "25,492,10",
                  "value": "25,495,44"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-body-width",
                "text": "The default width of the text field's body element (the element that contains the input\nelement and triggers) when the field is not sized explicitly using the {@link #cfg!width #width}\nconfig, or sized by it's containing layout.\n",
                "type": "Number",
                "value": "150px",
                "src": {
                  "name": "25,515,1",
                  "text": "25,511,4,218",
                  "type": "25,510,10",
                  "value": "25,515,38"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-border-color",
                "text": "The border color of text fields\n",
                "type": "color/list",
                "value": "$form-field-border-color",
                "src": {
                  "name": "25,471,1",
                  "text": "25,469,4,32",
                  "type": "25,468,10",
                  "value": "25,471,40"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-border-radius",
                "text": "Border radius for text fields\n",
                "type": "Number/list",
                "value": "0",
                "src": {
                  "name": "25,489,1",
                  "text": "25,487,4,30",
                  "type": "25,486,10",
                  "value": "25,489,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-border-style",
                "text": "The border style of text fields\n",
                "type": "String/list",
                "value": "$form-field-border-style",
                "src": {
                  "name": "25,465,1",
                  "text": "25,463,4,32",
                  "type": "25,462,10",
                  "value": "25,465,40"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-border-width",
                "text": "The border width of text fields\n",
                "type": "Number/list",
                "value": "$form-field-border-width",
                "src": {
                  "name": "25,459,1",
                  "text": "25,457,4,32",
                  "type": "25,456,10",
                  "value": "25,459,40"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-classic-border",
                "text": "`true` to use classic-theme styled border for text fields.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "25,545,1",
                  "text": "25,543,4,59",
                  "type": "25,542,10",
                  "value": "25,545,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-color",
                "text": "The color of the text field's input element\n",
                "type": "color",
                "value": "$form-field-color",
                "src": {
                  "name": "25,447,1",
                  "text": "25,445,4,44",
                  "type": "25,444,10",
                  "value": "25,447,33"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-empty-color",
                "text": "Text color for empty text fields.\n",
                "type": "color",
                "value": "$form-field-empty-color",
                "src": {
                  "name": "25,507,1",
                  "text": "25,505,4,34",
                  "type": "25,504,10",
                  "value": "25,507,39"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-focus-border-color",
                "text": "The border color of the focused text field\n",
                "type": "color/list",
                "value": "$form-field-focus-border-color",
                "src": {
                  "name": "25,477,1",
                  "text": "25,475,4,43",
                  "type": "25,474,10",
                  "value": "25,477,46"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-font-family",
                "text": "Font family for text fields.\n",
                "type": "String",
                "value": "$form-field-font-family",
                "src": {
                  "name": "25,435,1",
                  "text": "25,433,4,29",
                  "type": "25,432,10",
                  "value": "25,435,39"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-font-size",
                "text": "Font size for text fields.\n",
                "type": "Number",
                "value": "$form-field-font-size",
                "src": {
                  "name": "25,429,1",
                  "text": "25,427,4,27",
                  "type": "25,426,10",
                  "value": "25,429,37"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-font-weight",
                "text": "Font weight for text fields.\n",
                "type": "String",
                "value": "$form-field-font-weight",
                "src": {
                  "name": "25,441,1",
                  "text": "25,439,4,29",
                  "type": "25,438,10",
                  "value": "25,441,39"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-height",
                "text": "The height of text fields\n",
                "type": "Number",
                "value": "$form-field-height",
                "src": {
                  "name": "25,423,1",
                  "text": "25,421,4,26",
                  "type": "25,420,10",
                  "value": "25,423,34"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-invalid-background-color",
                "text": "Background color of the text field's input element when the field value is invalid.\n",
                "type": "color",
                "value": "$form-field-invalid-background-color",
                "src": {
                  "name": "25,521,1",
                  "text": "25,519,4,84",
                  "type": "25,518,10",
                  "value": "25,521,52"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-invalid-background-image",
                "text": "Background image of the text field's input element when the field value is invalid.\n",
                "type": "String",
                "value": "$form-field-invalid-background-image",
                "src": {
                  "name": "25,527,1",
                  "text": "25,525,4,84",
                  "type": "25,524,10",
                  "value": "25,527,52"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-invalid-background-position",
                "text": "Background position of the text field's input element when the field value is invalid.\n",
                "type": "String/list",
                "value": "$form-field-invalid-background-position",
                "src": {
                  "name": "25,539,1",
                  "text": "25,537,4,87",
                  "type": "25,536,10",
                  "value": "25,539,55"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-invalid-background-repeat",
                "text": "Background repeat of the text field's input element when the field value is invalid.\n",
                "type": "String",
                "value": "$form-field-invalid-background-repeat",
                "src": {
                  "name": "25,533,1",
                  "text": "25,531,4,85",
                  "type": "25,530,10",
                  "value": "25,533,53"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-invalid-border-color",
                "text": "Border color for invalid text fields.\n",
                "type": "color",
                "value": "$form-field-invalid-border-color",
                "src": {
                  "name": "25,483,1",
                  "text": "25,481,4,38",
                  "type": "25,480,10",
                  "value": "25,483,48"
                }
              },
              {
                "$type": "property",
                "name": "$form-text-field-padding",
                "text": "The padding of the text field's input element\n",
                "type": "Number/list",
                "value": "$form-field-padding",
                "src": {
                  "name": "25,501,1",
                  "text": "25,499,4,46",
                  "type": "25,498,10",
                  "value": "25,501,35"
                }
              },
              {
                "$type": "property",
                "name": "$form-textarea-body-height",
                "text": "The default width of the TextArea's body element (the element that contains the textarea\nhtml element when the field is not sized explicitly using the {@link #cfg!width #width}config, or\nsized by it's containing layout.\n",
                "type": "Number",
                "src": {
                  "name": "25,557,18",
                  "text": "25,558,4,209",
                  "type": "25,557,10"
                }
              },
              {
                "$type": "property",
                "name": "$form-textarea-line-height",
                "text": "The line-height to use for the TextArea's text\n",
                "type": "Number",
                "src": {
                  "name": "25,548,18",
                  "text": "25,549,4,47",
                  "type": "25,548,10"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-icon-background-image",
                "text": "The background image for toolbar field error icons\n",
                "type": "String",
                "value": "'form/exclamation'",
                "src": {
                  "name": "25,332,1",
                  "text": "25,330,4,51",
                  "type": "25,329,10",
                  "value": "25,332,52"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-icon-height",
                "text": "Height for toolbar field error icons.\n",
                "type": "Number",
                "value": "16px",
                "src": {
                  "name": "25,344,1",
                  "text": "25,342,4,38",
                  "type": "25,341,10",
                  "value": "25,344,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-icon-side-margin",
                "text": "Margin for toolbar field error icons that are aligned to the side of the field\n",
                "type": "Number/list",
                "value": "0 1px",
                "src": {
                  "name": "25,350,1",
                  "text": "25,348,4,79",
                  "type": "25,347,10",
                  "value": "25,350,47"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-icon-width",
                "text": "Width for toolbar field error icons.\n",
                "type": "Number",
                "value": "16px",
                "src": {
                  "name": "25,338,1",
                  "text": "25,336,4,37",
                  "type": "25,335,10",
                  "value": "25,338,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-msg-color",
                "text": "The text color of toolbar form error messages\n",
                "type": "color",
                "value": "$form-field-invalid-border-color",
                "src": {
                  "name": "25,368,1",
                  "text": "25,366,4,46",
                  "type": "25,365,10",
                  "value": "25,368,40"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-msg-font-family",
                "text": "The font-family of toolbar form field error messages\n",
                "type": "String",
                "value": "$font-family",
                "src": {
                  "name": "25,386,1",
                  "text": "25,384,4,53",
                  "type": "25,383,10",
                  "value": "25,386,46"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-msg-font-size",
                "text": "The font-size of toolbar form field error messages\n",
                "type": "Number",
                "value": "$font-size",
                "src": {
                  "name": "25,380,1",
                  "text": "25,378,4,51",
                  "type": "25,377,10",
                  "value": "25,380,44"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-msg-font-weight",
                "text": "The font-weight of toolbar form field error messages\n",
                "type": "String",
                "value": "$font-weight",
                "src": {
                  "name": "25,374,1",
                  "text": "25,372,4,53",
                  "type": "25,371,10",
                  "value": "25,374,46"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-msg-line-height",
                "text": "The line-height of toolbar form field error messages\n",
                "type": "Number",
                "value": "$form-toolbar-error-icon-height",
                "src": {
                  "name": "25,392,1",
                  "text": "25,390,4,53",
                  "type": "25,389,10",
                  "value": "25,392,46"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-under-icon-spacing",
                "text": "The space between the icon and the message for errors that display under a toolbar field\n",
                "type": "Number",
                "value": "4px",
                "src": {
                  "name": "25,356,1",
                  "text": "25,354,4,89",
                  "type": "25,353,10",
                  "value": "25,356,49"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-error-under-padding",
                "text": "The padding on errors that display under the toolbar form field\n",
                "type": "Number/list",
                "value": "2px 2px 2px 0",
                "src": {
                  "name": "25,362,1",
                  "text": "25,360,4,64",
                  "type": "25,359,10",
                  "value": "25,362,44"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-field-disabled-opacity",
                "text": "Opacity of disabled toolbar form fields\n",
                "type": "Number",
                "value": ".3",
                "src": {
                  "name": "25,398,1",
                  "text": "25,396,4,40",
                  "type": "25,395,10",
                  "value": "25,398,47"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-field-font-family",
                "text": "Font family for toolbar form fields.\n",
                "type": "String",
                "value": "$form-field-font-family",
                "src": {
                  "name": "25,56,18",
                  "text": "25,57,4,37",
                  "type": "25,56,10",
                  "value": "25,59,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-field-font-size",
                "text": "Font size for toolbar form fields.\n",
                "type": "Number",
                "value": "$form-field-font-size",
                "src": {
                  "name": "25,50,18",
                  "text": "25,51,4,35",
                  "type": "25,50,10",
                  "value": "25,53,40"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-field-font-weight",
                "text": "Font weight for toolbar form fields.\n",
                "type": "String",
                "value": "$form-field-font-weight",
                "src": {
                  "name": "25,61,18",
                  "text": "25,62,4,37",
                  "type": "25,61,10",
                  "value": "25,64,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-field-height",
                "text": "Height for form fields in toolbar.\n",
                "type": "Number",
                "value": "$form-field-height",
                "src": {
                  "name": "25,20,18",
                  "text": "25,21,4,35",
                  "type": "25,20,10",
                  "value": "25,23,37"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-file-field-color",
                "text": "Text color for toolbar file fields\n",
                "type": "color",
                "value": "$form-file-field-color",
                "src": {
                  "name": "25,808,1",
                  "text": "25,806,4,35",
                  "type": "25,805,10",
                  "value": "25,808,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-label-font-color",
                "text": "The text color of toolbar form field labels\n",
                "type": "color",
                "value": "$color",
                "src": {
                  "name": "25,290,1",
                  "text": "25,288,4,44",
                  "type": "25,287,10",
                  "value": "25,290,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-label-font-family",
                "text": "The font-family of toolbar form field labels\n",
                "type": "String",
                "value": "$font-family",
                "src": {
                  "name": "25,308,1",
                  "text": "25,306,4,45",
                  "type": "25,305,10",
                  "value": "25,308,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-label-font-size",
                "text": "The font-size of toolbar form field labels\n",
                "type": "Number",
                "value": "$font-size",
                "src": {
                  "name": "25,302,1",
                  "text": "25,300,4,43",
                  "type": "25,299,10",
                  "value": "25,302,40"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-label-font-weight",
                "text": "The font-weight of toolbar form field labels\n",
                "type": "String",
                "value": "$font-weight",
                "src": {
                  "name": "25,296,1",
                  "text": "25,294,4,45",
                  "type": "25,293,10",
                  "value": "25,296,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-label-horizontal-spacing",
                "text": "Horizontal space between the toolbar field's label and the field body when the label is left-aligned.\n",
                "type": "Number",
                "value": "5px",
                "src": {
                  "name": "25,320,1",
                  "text": "25,318,4,102",
                  "type": "25,317,10",
                  "value": "25,320,49"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-label-line-height",
                "text": "The line-height of toolbar form field labels\n",
                "type": "Number",
                "value": "round($form-toolbar-label-font-size * 1.15)",
                "src": {
                  "name": "25,314,1",
                  "text": "25,312,4,45",
                  "type": "25,311,10",
                  "value": "25,314,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-label-vertical-spacing",
                "text": "Vertical space between the toolbar field's label and the field body when the label is top-aligned.\n",
                "type": "Number",
                "value": "5px",
                "src": {
                  "name": "25,326,1",
                  "text": "25,324,4,99",
                  "type": "25,323,10",
                  "value": "25,326,47"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-background-color",
                "text": "The background color of the toolbar text field's input element\n",
                "type": "color",
                "value": "$form-text-field-background-color",
                "src": {
                  "name": "25,696,1",
                  "text": "25,694,4,63",
                  "type": "25,693,10",
                  "value": "25,696,52"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-background-image",
                "text": "The background image of the toolbar text field's input element\n",
                "type": "String",
                "value": "$form-text-field-background-image",
                "src": {
                  "name": "25,738,1",
                  "text": "25,736,4,63",
                  "type": "25,735,10",
                  "value": "25,738,52"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-body-width",
                "text": "The default width of the toolbar text field's body element (the element that contains the input\nelement and triggers) when the field is not sized explicitly using the {@link #cfg!width #width}\nconfig, or sized by it's containing layout.\n",
                "type": "Number",
                "value": "$form-text-field-body-width",
                "src": {
                  "name": "25,758,1",
                  "text": "25,754,4,226",
                  "type": "25,753,10",
                  "value": "25,758,46"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-border-color",
                "text": "The border color of toolbar text fields\n",
                "type": "color/list",
                "value": "$form-text-field-border-color",
                "src": {
                  "name": "25,714,1",
                  "text": "25,712,4,40",
                  "type": "25,711,10",
                  "value": "25,714,48"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-border-radius",
                "text": "Border radius for toolbar text fields\n",
                "type": "Number/list",
                "value": "$form-text-field-border-radius",
                "src": {
                  "name": "25,732,1",
                  "text": "25,730,4,38",
                  "type": "25,729,10",
                  "value": "25,732,49"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-border-style",
                "text": "The border style of toolbar text fields\n",
                "type": "String/list",
                "value": "$form-text-field-border-style",
                "src": {
                  "name": "25,708,1",
                  "text": "25,706,4,40",
                  "type": "25,705,10",
                  "value": "25,708,48"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-border-width",
                "text": "The border width of toolbar text fields\n",
                "type": "Number/list",
                "value": "$form-text-field-border-width",
                "src": {
                  "name": "25,702,1",
                  "text": "25,700,4,40",
                  "type": "25,699,10",
                  "value": "25,702,48"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-classic-border",
                "text": "`true` to use classic-theme styled border for toolbar text fields.\n",
                "type": "Boolean",
                "value": "$form-text-field-classic-border",
                "src": {
                  "name": "25,788,1",
                  "text": "25,786,4,67",
                  "type": "25,785,10",
                  "value": "25,788,50"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-color",
                "text": "The color of the toolbar text field's input element\n",
                "type": "color",
                "value": "$form-text-field-color",
                "src": {
                  "name": "25,690,1",
                  "text": "25,688,4,52",
                  "type": "25,687,10",
                  "value": "25,690,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-empty-color",
                "text": "Text color for empty toolbar text fields.\n",
                "type": "color",
                "value": "$form-text-field-empty-color",
                "src": {
                  "name": "25,750,1",
                  "text": "25,748,4,42",
                  "type": "25,747,10",
                  "value": "25,750,47"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-focus-border-color",
                "text": "The border color of the focused toolbar text field\n",
                "type": "color/list",
                "value": "$form-text-field-focus-border-color",
                "src": {
                  "name": "25,720,1",
                  "text": "25,718,4,51",
                  "type": "25,717,10",
                  "value": "25,720,54"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-font-family",
                "text": "Font family for toolbar text fields.\n",
                "type": "String",
                "value": "$form-text-field-font-family",
                "src": {
                  "name": "25,678,1",
                  "text": "25,676,4,37",
                  "type": "25,675,10",
                  "value": "25,678,47"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-font-size",
                "text": "Font size for toolbar text fields.\n",
                "type": "Number",
                "value": "$form-text-field-font-size",
                "src": {
                  "name": "25,672,1",
                  "text": "25,670,4,35",
                  "type": "25,669,10",
                  "value": "25,672,45"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-font-weight",
                "text": "Font weight for toolbar text fields.\n",
                "type": "String",
                "value": "$form-text-field-font-weight",
                "src": {
                  "name": "25,684,1",
                  "text": "25,682,4,37",
                  "type": "25,681,10",
                  "value": "25,684,47"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-height",
                "text": "The height of toolbar text fields\n",
                "type": "Number",
                "value": "$form-toolbar-field-height",
                "src": {
                  "name": "25,666,1",
                  "text": "25,664,4,34",
                  "type": "25,663,10",
                  "value": "25,666,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-invalid-background-color",
                "text": "Background color of the toolbar text field's input element when the field value is invalid.\n",
                "type": "color",
                "value": "$form-text-field-invalid-background-color",
                "src": {
                  "name": "25,764,1",
                  "text": "25,762,4,92",
                  "type": "25,761,10",
                  "value": "25,764,60"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-invalid-background-image",
                "text": "Background image of the toolbar text field's input element when the field value is invalid.\n",
                "type": "String",
                "value": "$form-text-field-invalid-background-image",
                "src": {
                  "name": "25,770,1",
                  "text": "25,768,4,92",
                  "type": "25,767,10",
                  "value": "25,770,60"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-invalid-background-position",
                "text": "Background position of the toolbar text field's input element when the field value is invalid.\n",
                "type": "String/list",
                "value": "$form-text-field-invalid-background-position",
                "src": {
                  "name": "25,782,1",
                  "text": "25,780,4,95",
                  "type": "25,779,10",
                  "value": "25,782,63"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-invalid-background-repeat",
                "text": "Background repeat of the toolbar text field's input element when the field value is invalid.\n",
                "type": "String",
                "value": "$form-text-field-invalid-background-repeat",
                "src": {
                  "name": "25,776,1",
                  "text": "25,774,4,93",
                  "type": "25,773,10",
                  "value": "25,776,61"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-text-field-padding",
                "text": "The padding of the toolbar text field's input element\n",
                "type": "Number/list",
                "value": "$form-text-field-padding",
                "src": {
                  "name": "25,744,1",
                  "text": "25,742,4,54",
                  "type": "25,741,10",
                  "value": "25,744,43"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-textarea-body-height",
                "text": "The default width of the toolbar TextArea's body element (the element that contains the\ntextarea html element when the field is not sized explicitly using the {@link #cfg!width #width}\nconfig, or sized by it's containing layout.\n",
                "type": "Number",
                "value": "$form-textarea-body-height",
                "src": {
                  "name": "25,802,1",
                  "text": "25,798,4,218",
                  "type": "25,797,10",
                  "value": "25,802,45"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-textarea-line-height",
                "text": "The line-height to use for the toolbar TextArea's text\n",
                "type": "Number/String",
                "value": "$form-textarea-line-height",
                "src": {
                  "name": "25,794,1",
                  "text": "25,792,4,55",
                  "type": "25,791,10",
                  "value": "25,794,45"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-background-color",
                "text": "The background color of the toolbar text field's trigger element\n",
                "type": "color",
                "value": "$form-text-field-background-color",
                "src": {
                  "name": "25,862,1",
                  "text": "25,860,4,65",
                  "type": "25,859,10",
                  "value": "25,862,49"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-background-image",
                "text": "The default background image for toolbar text field triggers\n",
                "type": "String",
                "value": "$form-trigger-background-image",
                "src": {
                  "name": "25,856,1",
                  "text": "25,854,4,61",
                  "type": "25,853,10",
                  "value": "25,856,49"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-border-color",
                "text": "The color of the toolbar text field's trigger's border\n",
                "type": "color/list",
                "value": "$form-trigger-border-color",
                "src": {
                  "name": "25,826,1",
                  "text": "25,824,4,55",
                  "type": "25,823,10",
                  "value": "25,826,45"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-border-color-focus",
                "text": "The color of the toolbar text field's trigger's border when the field is focused\n",
                "type": "color",
                "value": "$form-trigger-border-color-focus",
                "src": {
                  "name": "25,844,1",
                  "text": "25,842,4,81",
                  "type": "25,841,10",
                  "value": "25,844,51"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-border-color-over",
                "text": "The color of the toolbar text field's trigger's border when hovered\n",
                "type": "color",
                "value": "$form-trigger-border-color",
                "src": {
                  "name": "25,838,1",
                  "text": "25,836,4,68",
                  "type": "25,835,10",
                  "value": "25,838,50"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-border-color-pressed",
                "text": "The color of the toolbar text field's trigger's border when the field is focused and the trigger is hovered\n",
                "type": "color",
                "value": "$form-toolbar-trigger-border-color-over",
                "src": {
                  "name": "25,850,1",
                  "text": "25,848,4,108",
                  "type": "25,847,10",
                  "value": "25,850,53"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-border-style",
                "text": "The style of the toolbar text field's trigger's border\n",
                "type": "String/list",
                "value": "$form-trigger-border-style",
                "src": {
                  "name": "25,832,1",
                  "text": "25,830,4,55",
                  "type": "25,829,10",
                  "value": "25,832,45"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-border-width",
                "text": "The width of the toolbar text field's trigger's border\n",
                "type": "Number/list",
                "value": "$form-trigger-border-width",
                "src": {
                  "name": "25,820,1",
                  "text": "25,818,4,55",
                  "type": "25,817,10",
                  "value": "25,820,45"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-glyph",
                "text": "The default glyph for for toolbar text field triggers when {@link Global_CSS#var!$enable-font-icons Global_CSS#$enable-font-icons} is `true`.\n",
                "type": "String/list",
                "value": "$form-trigger-glyph",
                "src": {
                  "name": "25,868,1",
                  "text": "25,866,4,108",
                  "type": "25,865,10",
                  "value": "25,868,38"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-glyph-color",
                "text": "The color of toolbar text field triggers when {@link Global_CSS#var!$enable-font-icons Global_CSS#$enable-font-icons} is `true`.\n",
                "type": "color",
                "value": "$form-trigger-glyph-color",
                "src": {
                  "name": "25,874,1",
                  "text": "25,872,4,95",
                  "type": "25,871,10",
                  "value": "25,874,44"
                }
              },
              {
                "$type": "property",
                "name": "$form-toolbar-trigger-width",
                "text": "The width of the toolbar text field's trigger element\n",
                "type": "Number",
                "value": "$form-trigger-width",
                "src": {
                  "name": "25,814,1",
                  "text": "25,812,4,54",
                  "type": "25,811,10",
                  "value": "25,814,38"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-background-color",
                "text": "The background color of the text field's trigger element\n",
                "type": "color",
                "value": "$form-field-background-color",
                "src": {
                  "name": "25,624,1",
                  "text": "25,622,4,57",
                  "type": "25,621,10",
                  "value": "25,624,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-background-image",
                "text": "The default background image for text field triggers\n",
                "type": "String",
                "value": "'form/trigger'",
                "src": {
                  "name": "25,618,1",
                  "text": "25,616,4,53",
                  "type": "25,615,10",
                  "value": "25,618,41"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-border-color",
                "text": "The color of the text field's trigger's border\n",
                "type": "color/list",
                "value": "$form-field-border-color",
                "src": {
                  "name": "25,588,1",
                  "text": "25,586,4,47",
                  "type": "25,585,10",
                  "value": "25,588,37"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-border-color-focus",
                "text": "The color of the text field's trigger's border when the field is focused\n",
                "type": "color",
                "value": "$form-field-focus-border-color",
                "src": {
                  "name": "25,606,1",
                  "text": "25,604,4,73",
                  "type": "25,603,10",
                  "value": "25,606,43"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-border-color-over",
                "text": "The color of the text field's trigger's border when hovered\n",
                "type": "color",
                "value": "$form-field-border-color",
                "src": {
                  "name": "25,600,1",
                  "text": "25,598,4,60",
                  "type": "25,597,10",
                  "value": "25,600,42"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-border-color-pressed",
                "text": "The color of the text field's trigger's border when the field is focused and the trigger is hovered\n",
                "type": "color",
                "value": "$form-trigger-border-color-over",
                "src": {
                  "name": "25,612,1",
                  "text": "25,610,4,100",
                  "type": "25,609,10",
                  "value": "25,612,45"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-border-style",
                "text": "The style of the text field's trigger's border\n",
                "type": "String/list",
                "value": "$form-field-border-style",
                "src": {
                  "name": "25,594,1",
                  "text": "25,592,4,47",
                  "type": "25,591,10",
                  "value": "25,594,37"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-border-width",
                "text": "The width of the text field's trigger's border\n",
                "type": "Number/list",
                "value": "0",
                "src": {
                  "name": "25,582,1",
                  "text": "25,580,4,47",
                  "type": "25,579,10",
                  "value": "25,582,37"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-glyph",
                "text": "The default glyph for for text field triggers when {@link Global_CSS#var!$enable-font-icons Global_CSS#$enable-font-icons} is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-caret-down 16px $font-icon-font-family",
                "src": {
                  "name": "25,630,1",
                  "text": "25,628,4,100",
                  "type": "25,627,10",
                  "value": "25,630,30"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-glyph-color",
                "text": "The color of text field triggers when {@link Global_CSS#var!$enable-font-icons Global_CSS#$enable-font-icons} is `true`.\n",
                "type": "color",
                "value": "$form-text-field-color",
                "src": {
                  "name": "25,636,1",
                  "text": "25,634,4,87",
                  "type": "25,633,10",
                  "value": "25,636,36"
                }
              },
              {
                "$type": "property",
                "name": "$form-trigger-width",
                "text": "The width of the text field's trigger element\n",
                "type": "Number",
                "value": "22px",
                "src": {
                  "name": "25,576,1",
                  "text": "25,574,4,46",
                  "type": "25,573,10",
                  "value": "25,576,30"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-color",
                "text": "The color of the grid field text\n",
                "type": "Number",
                "value": "$grid-row-cell-color",
                "src": {
                  "name": "26,36,1",
                  "text": "26,34,4,33",
                  "type": "26,33,10",
                  "value": "26,36,33"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-font-family",
                "text": "The font-family of the grid field text\n",
                "type": "String",
                "value": "$grid-row-cell-font-family",
                "src": {
                  "name": "26,54,1",
                  "text": "26,52,4,39",
                  "type": "26,51,10",
                  "value": "26,54,39"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-font-size",
                "text": "The font size of the grid field text\n",
                "type": "Number",
                "value": "$grid-row-cell-font-size",
                "src": {
                  "name": "26,42,1",
                  "text": "26,40,4,37",
                  "type": "26,39,10",
                  "value": "26,42,37"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-font-weight",
                "text": "The font-weight of the grid field text\n",
                "type": "String",
                "value": "$grid-row-cell-font-weight",
                "src": {
                  "name": "26,48,1",
                  "text": "26,46,4,39",
                  "type": "26,45,10",
                  "value": "26,48,39"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-height",
                "text": "The height of text fields rendered in the context of a grid cell.  Defaults to $form-field-height.  If grid row\nheight is smaller than $form-field-height, defaults to the grid row height.  Grid row\nheight is calculated by adding $grid-row-cell-line-height to the top and bottom values of\n$grid-cell-inner-padding.\n",
                "type": "Number",
                "value": "if($grid-row-height < $form-field-height, $grid-row-height, $form-field-height)",
                "src": {
                  "name": "26,19,1",
                  "text": "26,14,4,314",
                  "type": "26,13,10",
                  "value": "26,19,34"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-padding",
                "text": "The padding of grid fields.\n",
                "type": "Number/list",
                "src": {
                  "name": "26,25,1",
                  "text": "26,23,4,28",
                  "type": "26,22,10"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-trigger-background-color",
                "text": "The background color of a text field's trigger element when rendered in the context of a grid cell\n",
                "type": "color",
                "value": "$form-trigger-background-color",
                "src": {
                  "name": "26,276,1",
                  "text": "26,274,4,99",
                  "type": "26,273,10",
                  "value": "26,276,52"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-trigger-background-image",
                "text": "The default background image for text field triggers when rendered in the context of a grid cell\n",
                "type": "String",
                "value": "$form-trigger-background-image",
                "src": {
                  "name": "26,270,1",
                  "text": "26,268,4,97",
                  "type": "26,267,10",
                  "value": "26,270,52"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-trigger-border-color",
                "text": "The color of a text field's trigger's border when rendered in the context of a grid cell\n",
                "type": "color/list",
                "value": "$form-trigger-border-color",
                "src": {
                  "name": "26,240,1",
                  "text": "26,238,4,89",
                  "type": "26,237,10",
                  "value": "26,240,48"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-trigger-border-color-focus",
                "text": "The color of a text field's trigger's border when  rendered in the context of a grid cell and the field is focused\n",
                "type": "color",
                "value": "$form-trigger-border-color-focus",
                "src": {
                  "name": "26,258,1",
                  "text": "26,256,4,115",
                  "type": "26,255,10",
                  "value": "26,258,54"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-trigger-border-color-over",
                "text": "The color of a text field's trigger's border when  rendered in the context of a grid cell and hovered\n",
                "type": "color",
                "value": "$form-trigger-border-color",
                "src": {
                  "name": "26,252,1",
                  "text": "26,250,4,102",
                  "type": "26,249,10",
                  "value": "26,252,53"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-trigger-border-color-pressed",
                "text": "The color of a text field's trigger's border when rendered in the context of a grid cell and the field is focused and the trigger is hovered\n",
                "type": "color",
                "value": "$grid-cell-field-trigger-border-color-over",
                "src": {
                  "name": "26,264,1",
                  "text": "26,262,4,141",
                  "type": "26,261,10",
                  "value": "26,264,56"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-trigger-border-style",
                "text": "The style of a text field's trigger's border when rendered in the context of a grid cell\n",
                "type": "String/list",
                "value": "$form-trigger-border-style",
                "src": {
                  "name": "26,246,1",
                  "text": "26,244,4,89",
                  "type": "26,243,10",
                  "value": "26,246,48"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-trigger-border-width",
                "text": "The width of a text field's trigger's border when rendered in the context of a grid cell\n",
                "type": "Number/list",
                "value": "$form-trigger-border-width",
                "src": {
                  "name": "26,234,1",
                  "text": "26,232,4,89",
                  "type": "26,231,10",
                  "value": "26,234,48"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-field-trigger-width",
                "text": "The width of a text field's trigger element when rendered in the context of a grid cell\n",
                "type": "Number",
                "value": "$form-trigger-width",
                "src": {
                  "name": "26,228,1",
                  "text": "26,226,4,88",
                  "type": "26,225,10",
                  "value": "26,228,41"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-file-field-color",
                "text": "Text color for file fields rendered in the context of a grid cell\n",
                "type": "color",
                "value": "$form-file-field-color",
                "src": {
                  "name": "26,222,1",
                  "text": "26,220,4,66",
                  "type": "26,219,10",
                  "value": "26,222,38"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-background-color",
                "text": "The background color of a text field's input element when rendered in the context of a grid cell\n",
                "type": "color",
                "value": "$form-text-field-background-color",
                "src": {
                  "name": "26,109,1",
                  "text": "26,107,4,97",
                  "type": "26,106,10",
                  "value": "26,109,49"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-background-image",
                "text": "The background image of a text field's input element when rendered in the context of a grid cell\n",
                "type": "String",
                "value": "$form-text-field-background-image",
                "src": {
                  "name": "26,151,1",
                  "text": "26,149,4,97",
                  "type": "26,148,10",
                  "value": "26,151,49"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$grid-cell-text-field-body-width",
                "text": "The default width of a text field's body element (the element that contains the input\nelement and triggers) when the field is  rendered in the context of a grid cell and not sized explicitly using the {@link #cfg!width #width}\nconfig, or sized by it's containing layout.\n",
                "type": "Number",
                "value": "$form-text-field-body-width",
                "src": {
                  "access": "26,167,4",
                  "name": "26,172,1",
                  "text": "26,168,4,260",
                  "type": "26,166,10",
                  "value": "26,172,43"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-border-color",
                "text": "The border color of text fields rendered in the context of a grid cell\n",
                "type": "color/list",
                "value": "$form-text-field-border-color",
                "src": {
                  "name": "26,127,1",
                  "text": "26,125,4,71",
                  "type": "26,124,10",
                  "value": "26,127,45"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-border-radius",
                "text": "Border radius for text fields rendered in the context of a grid cell.\n",
                "type": "Number/list",
                "value": "$form-text-field-border-radius",
                "src": {
                  "name": "26,145,1",
                  "text": "26,143,4,70",
                  "type": "26,142,10",
                  "value": "26,145,46"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-border-style",
                "text": "The border style of text fields rendered in the context of a grid cell\n",
                "type": "String/list",
                "value": "$form-text-field-border-style",
                "src": {
                  "name": "26,121,1",
                  "text": "26,119,4,71",
                  "type": "26,118,10",
                  "value": "26,121,45"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-border-width",
                "text": "The border width of text fields rendered in the context of a grid cell\n",
                "type": "Number/list",
                "value": "$form-text-field-border-width",
                "src": {
                  "name": "26,115,1",
                  "text": "26,113,4,71",
                  "type": "26,112,10",
                  "value": "26,115,45"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-classic-border",
                "text": "`true` to use classic-theme styled border for text fields  rendered in the context of a grid cell.\n",
                "type": "Boolean",
                "value": "$form-text-field-classic-border",
                "src": {
                  "name": "26,202,1",
                  "text": "26,200,4,99",
                  "type": "26,199,10",
                  "value": "26,202,47"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-color",
                "text": "The color of a text field's input element when rendered in the context of a grid cell\n",
                "type": "color",
                "value": "$grid-cell-field-color",
                "src": {
                  "name": "26,103,1",
                  "text": "26,101,4,86",
                  "type": "26,100,10",
                  "value": "26,103,38"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-empty-color",
                "text": "Text color for empty text fields rendered in the context of a grid cell.\n",
                "type": "color",
                "value": "$form-text-field-empty-color",
                "src": {
                  "name": "26,163,1",
                  "text": "26,161,4,73",
                  "type": "26,160,10",
                  "value": "26,163,44"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-focus-border-color",
                "text": "The border color of the focused text fields rendered in the context of a grid cell\n",
                "type": "color/list",
                "value": "$form-text-field-focus-border-color",
                "src": {
                  "name": "26,133,1",
                  "text": "26,131,4,83",
                  "type": "26,130,10",
                  "value": "26,133,51"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-font-family",
                "text": "Font family for text fields rendered in the context of a grid cell.\n",
                "type": "String",
                "value": "$grid-cell-field-font-family",
                "src": {
                  "name": "26,91,1",
                  "text": "26,89,4,68",
                  "type": "26,88,10",
                  "value": "26,91,44"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-font-size",
                "text": "Font size for text fields rendered in the context of a grid cell.\n",
                "type": "Number",
                "value": "$grid-cell-field-font-size",
                "src": {
                  "name": "26,85,1",
                  "text": "26,83,4,66",
                  "type": "26,82,10",
                  "value": "26,85,42"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-font-weight",
                "text": "Font weight for text fields rendered in the context of a grid cell.\n",
                "type": "String",
                "value": "$grid-cell-field-font-weight",
                "src": {
                  "name": "26,97,1",
                  "text": "26,95,4,68",
                  "type": "26,94,10",
                  "value": "26,97,44"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-height",
                "text": "The height of text fields rendered in the context of a grid cell\n",
                "type": "Number",
                "value": "$grid-cell-field-height",
                "src": {
                  "name": "26,79,1",
                  "text": "26,77,4,65",
                  "type": "26,76,10",
                  "value": "26,79,39"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-invalid-background-color",
                "text": "Background color of a text field's input element when rendered in the context of a grid cell and the field value is invalid.\n",
                "type": "color",
                "value": "$form-text-field-invalid-background-color",
                "src": {
                  "name": "26,178,1",
                  "text": "26,176,4,125",
                  "type": "26,175,10",
                  "value": "26,178,57"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-invalid-background-image",
                "text": "Background image of a grid field text field's input element when the field value is invalid.\n",
                "type": "String",
                "value": "$form-text-field-invalid-background-image",
                "src": {
                  "name": "26,184,1",
                  "text": "26,182,4,93",
                  "type": "26,181,10",
                  "value": "26,184,57"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-invalid-background-position",
                "text": "Background position of the grid field text field's input element when rendered in the context of a grid cell and the field value is invalid.\n",
                "type": "String/list",
                "value": "$form-text-field-invalid-background-position",
                "src": {
                  "name": "26,196,1",
                  "text": "26,194,4,141",
                  "type": "26,193,10",
                  "value": "26,196,60"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-invalid-background-repeat",
                "text": "Background repeat of the grid field text field's input element when the field value is invalid.\n",
                "type": "String",
                "value": "$form-text-field-invalid-background-repeat",
                "src": {
                  "name": "26,190,1",
                  "text": "26,188,4,96",
                  "type": "26,187,10",
                  "value": "26,190,58"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-invalid-border-color",
                "text": "Border color for invalid text fields rendered in the context of a grid cell.\n",
                "type": "color",
                "value": "$form-text-field-invalid-border-color",
                "src": {
                  "name": "26,139,1",
                  "text": "26,137,4,77",
                  "type": "26,136,10",
                  "value": "26,139,53"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-text-field-padding",
                "text": "The padding of a text field's input element when rendered in the context of a grid cell\n",
                "type": "Number/list",
                "value": "$grid-cell-field-padding",
                "src": {
                  "name": "26,157,1",
                  "text": "26,155,4,88",
                  "type": "26,154,10",
                  "value": "26,157,40"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-textarea-body-height",
                "text": "The default width of the grid field TextArea's body element (the element that\ncontains the textarea html element when the field is rendered in the context of a grid cell and not sized explicitly using the\n{@link #cfg!width #width} config, or sized by it's containing layout.\n",
                "type": "Number",
                "value": "$form-textarea-body-height",
                "src": {
                  "name": "26,216,1",
                  "text": "26,212,4,264",
                  "type": "26,211,10",
                  "value": "26,216,42"
                }
              },
              {
                "$type": "property",
                "name": "$grid-cell-textarea-line-height",
                "text": "The line-height to use for the TextArea's text when rendered in the context of a grid cell\n",
                "type": "Number/String",
                "value": "$form-textarea-line-height",
                "src": {
                  "name": "26,208,1",
                  "text": "26,206,4,91",
                  "type": "26,205,10",
                  "value": "26,208,42"
                }
              },
              {
                "$type": "property",
                "name": "$include-field-default-ui",
                "text": "True to include the \"default\" field UI\n",
                "type": "Boolean",
                "value": "$include-default-uis",
                "src": {
                  "name": "25,150,1",
                  "text": "25,148,4,39",
                  "type": "25,147,10",
                  "value": "25,150,36"
                }
              },
              {
                "$type": "property",
                "name": "$include-field-toolbar-ui",
                "text": "True to include the \"toolbar\" field UI\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "25,156,1",
                  "text": "25,154,4,39",
                  "type": "25,153,10",
                  "value": "25,156,36"
                }
              },
              {
                "$type": "property",
                "name": "$include-grid-cell-field-ui",
                "text": "True to include the \"grid-cell\" form field UIs input fields rendered in the context of a grid cell.\n\nThis defaults to `true`. It is required if either grid editors\n({@link Ext.grid.plugin.CellEditing} or {@link Ext.grid.plugin.RowEditing})\nare being used, or if a {@link Ext.grid.column.Widget} is being used to\nhouse an input field.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "26,65,1",
                  "text": "26,58,4,356",
                  "type": "26,57,10",
                  "value": "26,65,38"
                }
              },
              {
                "$type": "property",
                "name": "$include-label-default-ui",
                "text": "True to include the \"default\" label UI\n",
                "type": "Boolean",
                "value": "$include-field-default-ui",
                "src": {
                  "name": "25,404,1",
                  "text": "25,402,4,39",
                  "type": "25,401,10",
                  "value": "25,404,36"
                }
              },
              {
                "$type": "property",
                "name": "$include-label-toolbar-ui",
                "text": "True to include the \"default\" label UI\n",
                "type": "Boolean",
                "value": "$include-field-toolbar-ui",
                "src": {
                  "name": "25,410,1",
                  "text": "25,408,4,39",
                  "type": "25,407,10",
                  "value": "25,410,36"
                }
              },
              {
                "$type": "property",
                "name": "$include-text-field-default-ui",
                "text": "True to include the \"default\" text field UI\n",
                "type": "Boolean",
                "value": "$include-field-default-ui",
                "src": {
                  "name": "25,880,1",
                  "text": "25,878,4,44",
                  "type": "25,877,10",
                  "value": "25,880,41"
                }
              },
              {
                "$type": "property",
                "name": "$include-text-field-grid-ui",
                "text": "True to include the \"grid-cell\" text field UI\n",
                "type": "Boolean",
                "value": "$include-grid-cell-field-ui",
                "src": {
                  "name": "26,282,1",
                  "text": "26,280,4,46",
                  "type": "26,279,10",
                  "value": "26,282,38"
                }
              },
              {
                "$type": "property",
                "name": "$include-text-field-toolbar-ui",
                "text": "True to include the \"toolbar\" text field UI\n",
                "type": "Boolean",
                "value": "$include-field-toolbar-ui",
                "src": {
                  "name": "25,886,1",
                  "text": "25,884,4,44",
                  "type": "25,883,10",
                  "value": "25,886,41"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-background-color",
                "text": "The background color of scroll indicators when touch scrolling is enabled\n",
                "type": "color",
                "value": "#000",
                "src": {
                  "name": "27,12,1",
                  "text": "27,10,4,74",
                  "type": "27,9,10",
                  "value": "27,12,45"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-border-radius",
                "text": "The border-radius of scroll indicators when touch scrolling is enabled\n",
                "type": "Number",
                "value": "3px",
                "src": {
                  "name": "27,24,1",
                  "text": "27,22,4,71",
                  "type": "27,21,10",
                  "value": "27,24,42"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-margin",
                "text": "The space between scroll indicators and the edge of their container\n",
                "type": "Number",
                "value": "2px",
                "src": {
                  "name": "27,36,1",
                  "text": "27,34,4,68",
                  "type": "27,33,10",
                  "value": "27,36,35"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-opacity",
                "text": "The opacity of scroll indicators when touch scrolling is enabled\n",
                "type": "Number",
                "value": ".5",
                "src": {
                  "name": "27,18,1",
                  "text": "27,16,4,65",
                  "type": "27,15,10",
                  "value": "27,18,36"
                }
              },
              {
                "$type": "property",
                "name": "$scroll-indicator-size",
                "text": "The background color of scroll indicators when touch scrolling is enabled\n",
                "type": "color",
                "value": "6px",
                "src": {
                  "name": "27,30,1",
                  "text": "27,28,4,74",
                  "type": "27,27,10",
                  "value": "27,30,33"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,41,0",
          "alternateClassNames": "0,43,0,0:0,43,0,0",
          "extends": "0,40,0",
          "name": "0,39,0",
          "requires": "0,42,0,0:0,42,0,0:0,42,0,0:0,42,0,0",
          "text": "0,2,4,1318"
        }
      }
    ]
  },
  "version": 1
}