{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/grid/filters/Filters.js",
    "../../../ext/classic/theme-neutral/sass/var/grid/filters/Filters.scss",
    "../../../ext/packages/core/src/plugin/Abstract.js",
    "../../../ext/classic/classic/overrides/plugin/Abstract.js",
    "../../../ext/classic/classic/src/util/StoreHolder.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "plugin.gridfilters",
        "extended": "Ext.plugin.Abstract,Object",
        "extends": "Ext.plugin.Abstract",
        "mixed": "Ext.util.StoreHolder",
        "mixins": "Ext.util.StoreHolder",
        "name": "Ext.grid.filters.Filters",
        "requires": "Ext.grid.filters.filter.*",
        "text": "This class is a grid <a href='#!/api/Ext.plugin.Abstract'>Ext.AbstractPlugin</a> that adds a simple and flexible\npresentation for <a href='#!/api/Ext.data.AbstractStore-cfg-filters'>Ext.data.AbstractStore#filters</a>.\n\nFilters can be modified by the end-user using the grid's column header menu. Through\nthis menu users can configure, enable, and disable filters for each column.\n\n# Example Usage\n\n    @example\n    var shows = Ext.create('Ext.data.Store', {\n        fields: ['id','show'],\n        data: [\n            {id: 0, show: 'Battlestar Galactica'},\n            {id: 1, show: 'Doctor Who'},\n            {id: 2, show: 'Farscape'},\n            {id: 3, show: 'Firefly'},\n            {id: 4, show: 'Star Trek'},\n            {id: 5, show: 'Star Wars: Christmas Special'}\n        ]\n    });\n\n    Ext.create('Ext.grid.Panel', {\n        renderTo: Ext.getBody(),\n        title: 'Sci-Fi Television',\n        height: 250,\n        width: 250,\n        store: shows,\n        plugins: 'gridfilters',\n        columns: [{\n            dataIndex: 'id',\n            text: 'ID',\n            width: 50\n        },{\n            dataIndex: 'show',\n            text: 'Show',\n            flex: 1,\n            filter: {\n                // required configs\n                type: 'string',\n                // optional configs\n                value: 'star',  // setting a value makes the filter active.\n                itemDefaults: {\n                    // any Ext.form.field.Text configs accepted\n                }\n            }\n        }]\n    });\n\n# Features\n\n## Filtering implementations\n\nCurrently provided filter types are:\n\n  * <a href='#!/api/Ext.grid.filters.filter.Boolean'>Ext.grid.filters.filter.Boolean</a>\n  * <a href='#!/api/Ext.grid.filters.filter.Date'>Ext.grid.filters.filter.Date</a>\n  * <a href='#!/api/Ext.grid.filters.filter.List'>Ext.grid.filters.filter.List</a>\n  * <a href='#!/api/Ext.grid.filters.filter.Number'>Ext.grid.filters.filter.Number</a>\n  * <a href='#!/api/Ext.grid.filters.filter.String'>Ext.grid.filters.filter.String</a>\n\n**Note:** You can find inline examples for each filter on its specific filter page.\n\n## Graphical Indicators\n\nColumns that are filtered have <a href='#!/api/Ext.grid.filters.Filters-property-filterCls'>filterCls</a> applied to their column\nheaders. This style can be managed using that CSS class or by setting these Sass\nvariables in your theme or application:\n\n     $grid-filters-column-filtered-font-style: italic !default;\n\n     $grid-filters-column-filtered-font-weight: bold !default;\n\n## Stateful\n\nFilter information will be persisted across page loads by specifying a <a href='#!/api/Ext.grid.filters.Filters-cfg-stateId'>stateId</a>\nin the Grid configuration. In actuality this state is saved by the `store`, but this\nplugin ensures that saved filters are properly identified and reclaimed on subsequent\nvisits to the page.\n\n## Grid Changes\n\n- A `filters` property is added to the Grid using this plugin.\n\n# Upgrading From Ext.ux.grid.FilterFeature\n\nThe biggest change for developers converting from the user extension is most likely the\nconversion to standard <a href='#!/api/Ext.data.AbstractStore-cfg-filters'>Ext.data.AbstractStore#filters</a>. In the\nprocess, the \"like\" and \"in\" operators are now supported by <a href='#!/api/Ext.util.Filter'>Ext.util.Filter</a>.\nThese filters and all other filters added to the store will be sent in the standard\nway (using the \"filters\" parameter by default).\n\nSince this plugin now uses actual store filters, the `onBeforeLoad` listener and all\nhelper methods that were used to clean and build the params have been removed. The store\nwill send the filters managed by this plugin along in its normal request.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "menuFilterText",
                "optional": true,
                "text": "The text for the filters menu.\n",
                "type": "String",
                "value": "\"Filters\"",
                "src": {
                  "name": "0,133,23",
                  "text": "0,134,8,31",
                  "type": "0,133,14",
                  "value": "0,133,38"
                }
              },
              {
                "$type": "property",
                "name": "pluginId",
                "text": "A name for the plugin that can be set at creation time to then retrieve the plugin\nthrough <a href='#!/api/Ext.Component-method-getPlugin'>Ext.Component#getPlugin</a> method.  For example:\n\n    var grid = Ext.create('Ext.grid.Panel', {\n        plugins: [{\n            ptype: 'cellediting',\n            clicksToEdit: 2,\n            pluginId: 'cellplugin'\n        }]\n    });\n\n    // later on:\n    var plugin = grid.getPlugin('cellplugin');\n",
                "type": "String",
                "src": {
                  "name": "2,61,22",
                  "text": "2,62,8,404",
                  "type": "2,61,14"
                }
              },
              {
                "$type": "property",
                "name": "showMenu",
                "text": "Defaults to true, including a filter submenu in the default header menu.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,140,23",
                  "text": "0,141,8,73",
                  "type": "0,140,14"
                }
              },
              {
                "$type": "property",
                "name": "stateEvents",
                "text": "The configured list of stateEvents used to (optionally) participate in Owner Component's state management.\n",
                "type": "String/Array",
                "src": {
                  "name": "3,13,28",
                  "text": "3,14,8,107",
                  "type": "3,13,14"
                }
              },
              {
                "$type": "property",
                "name": "stateId",
                "text": "Name of the value to be used to store state information.\n",
                "type": "String",
                "src": {
                  "name": "0,146,22",
                  "text": "0,147,8,57",
                  "type": "0,146,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "addFilter",
                "text": "Adds a filter to the collection and creates a store filter if has a `value` property.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "filters",
                    "text": "A filter\nconfiguration or a filter object.\n",
                    "type": "Object/Object[]/Ext.util.Filter/Ext.util.Filter[]",
                    "src": {
                      "name": "0,433,67",
                      "text": "0,433,75,9:0,434,8,34",
                      "type": "0,433,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,436,0",
                  "text": "0,432,8,86"
                }
              },
              {
                "$type": "method",
                "name": "addFilters",
                "text": "Adds filters to the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "filters",
                    "text": "An Array of filter configuration objects.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,488,23",
                      "text": "0,488,31,42",
                      "type": "0,488,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,490,0",
                  "text": "0,487,8,32"
                }
              },
              {
                "$type": "method",
                "name": "applyState",
                "text": "The applyState method is invoked by the client Component's State mixin after initComponent method has been run for the client.\n\nThe supplied implementation is empty. If plugin Subclasses are to (optionally) participate in the client Component's\nstate management, implementers should provide a suitable method to utilize it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The current plugin state object to be applied.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,35,24",
                      "text": "3,35,30,47",
                      "type": "3,35,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "allState",
                    "text": "The current aggregate state of the Component and all plugins.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,36,24",
                      "text": "3,36,33,62",
                      "type": "3,36,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,39,0",
                  "text": "3,31,8,324"
                }
              },
              {
                "$type": "method",
                "name": "bindStore",
                "text": "Binds a store to this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "optional": true,
                    "text": "The store to bind or ID of the store.\nWhen no store given (or when <a href='#!/api/null'>null</a> or <a href='#!/api/undefined'>undefined</a> passed), unbinds the existing store.\n",
                    "type": "Ext.data.AbstractStore/String",
                    "src": {
                      "name": "4,19,48",
                      "text": "4,19,55,38:4,20,8,88",
                      "type": "4,19,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,22,0",
                  "text": "4,18,8,32"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "bindStoreListeners",
                "text": "Binds listeners for this component to the store. By default it will add\nanything bound by the getStoreListeners method, however it can be overridden\nin a subclass to provide any more complicated handling.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store to bind to\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "name": "4,93,40",
                      "text": "4,93,46,21",
                      "type": "4,93,16"
                    }
                  }
                ],
                "src": {
                  "access": "4,92,8",
                  "name": "4,95,0",
                  "text": "4,89,8,205"
                }
              },
              {
                "$type": "method",
                "name": "clearFilters",
                "text": "Turns all filters off. This does not clear the configuration information.\n",
                "src": {
                  "name": "0,499,0",
                  "text": "0,497,8,74"
                }
              },
              {
                "$type": "method",
                "name": "clonePlugin",
                "text": "Creates clone of the plugin.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "overrideCfg",
                    "optional": true,
                    "text": "Additional config for the derived plugin.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,38,25",
                      "text": "2,38,38,42",
                      "type": "2,38,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,40,0",
                  "text": "2,37,8,29"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Instantiates the plugin.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "Configuration object.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,27,25",
                      "text": "2,27,33,22",
                      "type": "2,27,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,29,0",
                  "text": "2,26,8,25"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "The destroy method is invoked by the owning Component at the time the Component is\nbeing destroyed.\n",
                "src": {
                  "name": "2,91,16",
                  "text": "2,88,8,101"
                }
              },
              {
                "$type": "method",
                "name": "disable",
                "text": "The base implementation just sets the plugin's `disabled` flag to `true`\n\nPlugin subclasses which need more complex processing may implement an overriding implementation.\n",
                "src": {
                  "name": "3,57,0",
                  "text": "3,52,8,171"
                }
              },
              {
                "$type": "method",
                "name": "enable",
                "text": "The base implementation just sets the plugin's `disabled` flag to `false`\n\nPlugin subclasses which need more complex processing may implement an overriding implementation.\n",
                "src": {
                  "name": "3,47,0",
                  "text": "3,42,8,172"
                }
              },
              {
                "$type": "method",
                "name": "getCmp",
                "text": "Returns the component to which this plugin is attached.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Owner component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "2,54,32,17",
                      "type": "2,54,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,56,0",
                  "text": "2,53,8,56"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getMenuFilter",
                "text": "Get the filter menu from the filters MixedCollection based on the clicked header.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "headerCt",
                    "src": {
                      "name": "0,403,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,400,8",
                  "name": "0,403,0",
                  "text": "0,401,8,82"
                }
              },
              {
                "$type": "method",
                "name": "getState",
                "text": "The getState method is invoked by the client Component's State mixin when one or more of the the specified <a href='#!/api/Ext.grid.filters.Filters-cfg-stateEvents'>stateEvents</a> are raised.\n\nThe supplied implementation is empty. If plugin Subclasses are to (optionally) participate in the client Component's\nstate management, implementers should provide a suitable method which returns a state object.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "state\n",
                    "type": "Object",
                    "src": {
                      "text": "3,24,25,6",
                      "type": "3,24,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,27,0",
                  "text": "3,20,8,352"
                }
              },
              {
                "$type": "method",
                "name": "getStore",
                "text": "Gets the current store instance.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The store, null if one does not exist.\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "text": "4,58,41,39",
                      "type": "4,58,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,60,0",
                  "text": "4,57,8,33"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getStoreListeners",
                "text": "Gets the listeners to bind to a new store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The Store which is being bound to for which a listeners object should be returned.\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "4,113,32",
                      "text": "4,113,38,83",
                      "type": "4,113,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The listeners to be bound to the store in object literal form. The scope\nmay be omitted, it is assumed to be the current instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,114,25,73:4,115,8,58",
                      "type": "4,114,17"
                    }
                  }
                ],
                "src": {
                  "access": "4,112,8",
                  "name": "4,117,0",
                  "text": "4,111,8,43"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.grid.filters.Filters-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "5,100,20",
                      "text": "5,100,25,34",
                      "type": "5,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "5,101,22,57:5,102,4,15",
                      "type": "5,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,53,12",
                  "text": "5,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "init",
                "text": "The init method is invoked after initComponent method has been run for the client Component.\n\nThe supplied implementation is empty. Subclasses should perform plugin initialization, and set up bidirectional\nlinks between the plugin and its client Component in their own implementation of this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "client",
                    "text": "The client Component which owns this plugin.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,83,31",
                      "text": "2,83,38,45",
                      "type": "2,83,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,85,0",
                  "text": "2,79,8,300"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initColumns",
                "text": "Creates the Filter objects for the current configuration.\nReconfigure and on add handlers.\n",
                "src": {
                  "access": "0,195,8",
                  "name": "0,197,0",
                  "text": "0,193,8,91"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.grid.filters.Filters-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "5,148,20",
                      "text": "5,148,30,71:5,149,4,18",
                      "type": "5,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "5,150,20",
                      "text": "5,150,27,50",
                      "type": "5,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "5,151,22,56",
                      "type": "5,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,106,12",
                  "text": "5,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isStateful",
                "text": "Checks the plugin's grid for statefulness.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,425,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,427,0",
                  "text": "0,424,8,43"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onBindStore",
                "text": "Template method, it is called when a new store is bound\nto the current instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store being bound\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "name": "4,134,40",
                      "text": "4,134,46,22",
                      "type": "4,134,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "initial",
                    "text": "True if this store is being bound as initialization of the instance.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,135,25",
                      "text": "4,135,33,69",
                      "type": "4,135,16"
                    }
                  }
                ],
                "src": {
                  "access": "4,133,8",
                  "name": "4,137,0",
                  "text": "4,131,8,81"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCheckChange",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "0,411,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "src": {
                      "name": "0,411,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,408,8",
                  "name": "0,411,0"
                }
              },
              {
                "$type": "method",
                "name": "onGridDestroy",
                "text": "Handler called by the grid 'beforedestroy' event\n",
                "src": {
                  "name": "0,335,0",
                  "text": "0,333,8,49"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onMenuBeforeShow",
                "text": "Handle showing of the grid's header menu. Sets up the filter item and menu\nappropriate for the target column.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "menu",
                    "src": {
                      "name": "0,278,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,274,8",
                  "name": "0,278,0",
                  "text": "0,275,8,110"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onMenuCreate",
                "text": "Handle creation of the grid's header menu.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "headerCt",
                    "src": {
                      "name": "0,266,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "menu",
                    "src": {
                      "name": "0,266,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,263,8",
                  "name": "0,266,0",
                  "text": "0,264,8,43"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onUnbindStore",
                "text": "Template method, it is called when an existing store is unbound\nfrom the current instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store being unbound\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "name": "4,124,40",
                      "text": "4,124,46,24",
                      "type": "4,124,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "initial",
                    "text": "True if this store is being bound as initialization of the instance.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,125,25",
                      "text": "4,125,33,69",
                      "type": "4,125,16"
                    }
                  }
                ],
                "src": {
                  "access": "4,123,8",
                  "name": "4,127,0",
                  "text": "4,121,8,91"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.grid.filters.Filters-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.grid.filters.Filters-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "5,220,20",
                      "text": "5,220,25,34",
                      "type": "5,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "5,221,22,57:5,222,4,22",
                      "type": "5,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,155,12",
                  "text": "5,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "setCmp",
                "text": "Sets the component to which this plugin is attached.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cmp",
                    "text": "Owner component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,46,31",
                      "text": "2,46,35,17",
                      "type": "2,46,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,48,0",
                  "text": "2,45,8,53"
                }
              },
              {
                "$type": "method",
                "name": "setStore",
                "since": "5.0.0",
                "text": "Sets the store to the specified store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "src": {
                      "name": "4,66,15"
                    }
                  }
                ],
                "src": {
                  "name": "4,69,0",
                  "since": "4,67,15",
                  "text": "4,65,8,39"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.grid.filters.Filters-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.grid.filters.Filters-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.grid.filters.Filters-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.grid.filters.Filters-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "5,235,21,32",
                      "type": "5,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,226,12",
                  "text": "5,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "5,297,21,32",
                      "type": "5,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,239,12",
                  "text": "5,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "unbindStoreListeners",
                "text": "Unbinds listeners from this component to the store. By default it will remove\nanything bound by the bindStoreListeners method, however it can be overridden\nin a subclass to provide any more complicated handling.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store to unbind from\n",
                    "type": "Ext.data.AbstractStore",
                    "src": {
                      "name": "4,78,40",
                      "text": "4,78,46,25",
                      "type": "4,78,16"
                    }
                  }
                ],
                "src": {
                  "access": "4,77,8",
                  "name": "4,80,0",
                  "text": "4,74,8,212"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.grid.filters.Filters-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.grid.filters.Filters-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.grid.filters.Filters-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.grid.filters.Filters-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.grid.filters.Filters-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.grid.filters.Filters-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.grid.filters.Filters-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.grid.filters.Filters-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.grid.filters.Filters-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.grid.filters.Filters-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "5,340,21,50",
                      "type": "5,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,301,12",
                  "text": "5,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.grid.filters.Filters-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "5,346,14",
                  "text": "5,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "defaultFilterTypes",
                "text": "This property maps <a href='#!/api/Ext.data.Model-cfg-fields'>Ext.data.Model#cfg-fields</a> to the\nappropriate grid filter type.\n",
                "type": "Object",
                "src": {
                  "access": "0,116,8",
                  "name": "0,113,27",
                  "text": "0,114,8,101",
                  "type": "0,113,19"
                }
              },
              {
                "$type": "property",
                "name": "filterCls",
                "optional": true,
                "text": "The CSS applied to column headers with active filters.\n",
                "type": "String",
                "value": "\"x-grid-filters-filtered-column\"",
                "src": {
                  "name": "0,126,28",
                  "text": "0,127,8,55",
                  "type": "0,126,19",
                  "value": "0,126,38"
                }
              },
              {
                "$type": "property",
                "name": "isPlugin",
                "text": "`true` in this class to identify an object as an instantiated Plugin, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,20,28",
                  "text": "2,21,8,91",
                  "type": "2,20,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "5,46,14",
                  "text": "5,47,4,65"
                }
              }
            ]
          },
          {
            "$type": "vars",
            "items": [
              {
                "$type": "property",
                "name": "$grid-filters-column-filtered-font-style",
                "text": "The font-style of the filtered column.\n",
                "type": "String",
                "value": "italic",
                "src": {
                  "name": "1,9,1",
                  "text": "1,7,4,39",
                  "type": "1,6,10",
                  "value": "1,9,51"
                }
              },
              {
                "$type": "property",
                "name": "$grid-filters-column-filtered-font-weight",
                "text": "The font-weight of the filtered column.\n",
                "type": "String",
                "value": "$font-weight-bold",
                "src": {
                  "name": "1,15,1",
                  "text": "1,13,4,40",
                  "type": "1,12,10",
                  "value": "1,15,52"
                }
              },
              {
                "$type": "property",
                "name": "$grid-filters-column-filtered-text-decoration",
                "text": "The text-decoration of the filtered column.\n",
                "type": "String",
                "value": "inherit",
                "src": {
                  "name": "1,21,1",
                  "text": "1,19,4,44",
                  "type": "1,18,10",
                  "value": "1,21,56"
                }
              },
              {
                "$type": "property",
                "name": "$grid-filters-header-menu-equals-glyph",
                "text": "Glyph for the grid header menu \"equals\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$ext-var-equals $grid-header-menu-glyph-font-size ExtJS",
                "src": {
                  "name": "1,45,1",
                  "text": "1,43,4,99",
                  "type": "1,42,10",
                  "value": "1,45,49"
                }
              },
              {
                "$type": "property",
                "name": "$grid-filters-header-menu-find-glyph",
                "text": "Glyph for the grid header menu \"text filter\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-search $grid-header-menu-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,27,1",
                  "text": "1,25,4,104",
                  "type": "1,24,10",
                  "value": "1,27,47"
                }
              },
              {
                "$type": "property",
                "name": "$grid-filters-header-menu-greater-than-glyph",
                "text": "Glyph for the grid header menu \"greater than\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-chevron-right $grid-header-menu-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,33,1",
                  "text": "1,31,4,105",
                  "type": "1,30,10",
                  "value": "1,33,55"
                }
              },
              {
                "$type": "property",
                "name": "$grid-filters-header-menu-less-than-glyph",
                "text": "Glyph for the grid header menu \"less than\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-chevron-left $grid-header-menu-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,39,1",
                  "text": "1,37,4,102",
                  "type": "1,36,10",
                  "value": "1,39,52"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,108,0",
          "extends": "0,98,0",
          "mixins": "0,105,0",
          "name": "1,2,11",
          "requires": "0,101,0",
          "text": "0,2,4,3296"
        }
      }
    ]
  },
  "version": 1
}