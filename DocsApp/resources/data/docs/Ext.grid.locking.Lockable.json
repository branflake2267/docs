{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/grid/locking/Lockable.js",
    "../../../ext/classic/theme-neutral/sass/var/grid/locking/Lockable.scss",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "alternateClassNames": "Ext.grid.Lockable",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.grid.locking.Lockable",
        "requires": "Ext.grid.locking.View,Ext.grid.header.Container,Ext.grid.locking.HeaderContainer,Ext.view.Table",
        "text": "Lockable is a private mixin which injects lockable behavior into any\nTablePanel subclass such as GridPanel or TreePanel. TablePanel will\nautomatically inject the Ext.grid.locking.Lockable mixin in when one of the\nthese conditions are met:\n\n - The TablePanel has the lockable configuration set to true\n - One of the columns in the TablePanel has locked set to true/false\n\nEach TablePanel subclass must register an alias. It should have an array\nof configurations to copy to the 2 separate tablepanels that will be generated\nto note what configurations should be copied. These are named normalCfgCopy and\nlockedCfgCopy respectively.\n\nConfigurations which are specified in this class will be available on any grid or\ntree which is using the lockable functionality.\n\nBy default the two grids, \"locked\" and \"normal\" will be arranged using an <a href='#!/api/Ext.layout.container.HBox'>Ext.layout.container.HBox</a>\nlayout. If the lockable grid is configured with <a href='#!/api/Ext.grid.locking.Lockable-cfg-split'>split</a>, a vertical splitter\nwill be placed between the two grids to resize them.\n\nIt is possible to override the layout of the lockable grid, or example, you may wish to\nuse a border layout and have one of the grids collapsible.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "layout",
                "optional": true,
                "text": "By default, a lockable grid uses an <a href='#!/api/Ext.layout.container.HBox'>Ext.layout.container.HBox</a> layout to arrange\nthe two grids (possibly separated by a splitter).\n\nUsing this config it is possible to specify a different layout to arrange the two grids.\n",
                "type": "Object",
                "src": {
                  "name": "0,89,23",
                  "text": "0,90,8,233",
                  "type": "0,89,14"
                }
              },
              {
                "$type": "property",
                "name": "lockedGridConfig",
                "text": "Any special configuration options for the locked part of the grid\n",
                "type": "Object",
                "src": {
                  "name": "0,73,22",
                  "text": "0,74,8,66",
                  "type": "0,73,14"
                }
              },
              {
                "$type": "property",
                "name": "lockedViewConfig",
                "text": "A view configuration to be applied to the\nlocked side of the grid. Any conflicting configurations between lockedViewConfig\nand viewConfig will be overwritten by the lockedViewConfig.\n",
                "type": "Object",
                "src": {
                  "name": "0,53,22",
                  "text": "0,53,39,42:0,54,8,141",
                  "type": "0,53,14"
                }
              },
              {
                "$type": "property",
                "name": "normalGridConfig",
                "text": "Any special configuration options for the normal part of the grid\n",
                "type": "Object",
                "src": {
                  "name": "0,78,22",
                  "text": "0,79,8,66",
                  "type": "0,78,14"
                }
              },
              {
                "$type": "property",
                "name": "normalViewConfig",
                "text": "A view configuration to be applied to the\nnormal/unlocked side of the grid. Any conflicting configurations between normalViewConfig\nand viewConfig will be overwritten by the normalViewConfig.\n",
                "type": "Object",
                "src": {
                  "name": "0,59,22",
                  "text": "0,59,39,42:0,60,8,150",
                  "type": "0,59,14"
                }
              },
              {
                "$type": "property",
                "name": "scrollDelta",
                "text": "Number of pixels to scroll when scrolling the locked section with mousewheel.\n",
                "type": "Number",
                "src": {
                  "name": "0,67,22",
                  "text": "0,68,8,78",
                  "type": "0,67,14"
                }
              },
              {
                "$type": "property",
                "name": "split",
                "optional": true,
                "text": "Configure as true to place a resizing <a href='#!/api/Ext.resizer.Splitter'>Ext.resizer.Splitter</a> between the locked\nand unlocked columns.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,83,24",
                  "text": "0,84,8,117",
                  "type": "0,83,14",
                  "value": "0,83,30"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.state.Stateful#cfg-stateEvents",
                "localDoc": "Adds the following stateEvents:\n\n - <a href='#!/api/Ext.grid.locking.Lockable-event-lockcolumn'>event-lockcolumn</a>\n - <a href='#!/api/Ext.grid.locking.Lockable-event-unlockcolumn'>event-unlockcolumn</a>\n",
                "name": "stateEvents",
                "src": {
                  "inheritdoc": "0,98,8",
                  "localDoc": "0,99,18",
                  "name": "0,97,13"
                }
              },
              {
                "$type": "property",
                "name": "subGridXType",
                "text": "The xtype of the subgrid to specify. If this is\nnot specified lockable will determine the subgrid xtype to create by the\nfollowing rule. Use the superclasses xtype if the superclass is NOT\ntablepanel, otherwise use the xtype itself.\n",
                "type": "String",
                "src": {
                  "name": "0,46,22",
                  "text": "0,46,35,48:0,47,8,185",
                  "type": "0,46,14"
                }
              },
              {
                "$type": "property",
                "name": "syncRowHeight",
                "text": "Synchronize rowHeight between the normal and\nlocked grid view. This is turned on by default. If your grid is guaranteed\nto have rows of all the same height, you should set this to false to\noptimize performance.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,38,23",
                  "text": "0,38,37,45:0,39,8,166",
                  "type": "0,38,14"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "inheritdoc": "Ext.data.Store#beforeload",
                "name": "beforeload",
                "src": {
                  "inheritdoc": "0,485,16",
                  "name": "0,484,23"
                }
              },
              {
                "$type": "event",
                "inheritdoc": "Ext.data.Store#filterchange",
                "name": "filterchange",
                "src": {
                  "inheritdoc": "0,475,16",
                  "name": "0,474,23"
                }
              },
              {
                "$type": "event",
                "inheritdoc": "Ext.data.Store#groupchange",
                "name": "groupchange",
                "src": {
                  "inheritdoc": "0,480,16",
                  "name": "0,479,23"
                }
              },
              {
                "$type": "event",
                "inheritdoc": "Ext.data.Store#load",
                "name": "load",
                "src": {
                  "inheritdoc": "0,490,16",
                  "name": "0,489,23"
                }
              },
              {
                "$type": "event",
                "name": "lockcolumn",
                "text": "Fires when a column is locked.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The gridpanel.\n",
                    "type": "Ext.grid.Panel",
                    "src": {
                      "name": "0,150,32",
                      "text": "0,150,37,15",
                      "type": "0,150,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "column",
                    "text": "The column being locked.\n",
                    "type": "Ext.grid.column.Column",
                    "src": {
                      "name": "0,151,40",
                      "text": "0,151,47,25",
                      "type": "0,151,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,148,15",
                  "text": "0,149,8,31"
                }
              },
              {
                "$type": "event",
                "name": "processcolumns",
                "text": "Fires when the configured (or **reconfigured**) column set is split into two depending on the <a href='#!/api/Ext.grid.column.Column-cfg-locked'>Ext.grid.column.Column#locked</a> flag.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "lockedColumns",
                    "text": "The locked columns.\n",
                    "type": "Ext.grid.column.Column[]",
                    "src": {
                      "name": "0,143,42",
                      "text": "0,143,56,20",
                      "type": "0,143,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "normalColumns",
                    "text": "The normal columns.\n",
                    "type": "Ext.grid.column.Column[]",
                    "src": {
                      "name": "0,144,42",
                      "text": "0,144,56,20",
                      "type": "0,144,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,141,15",
                  "text": "0,142,8,145"
                }
              },
              {
                "$type": "event",
                "name": "unlockcolumn",
                "text": "Fires when a column is unlocked.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The gridpanel.\n",
                    "type": "Ext.grid.Panel",
                    "src": {
                      "name": "0,157,32",
                      "text": "0,157,37,15",
                      "type": "0,157,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "column",
                    "text": "The column being unlocked.\n",
                    "type": "Ext.grid.column.Column",
                    "src": {
                      "name": "0,158,40",
                      "text": "0,158,47,27",
                      "type": "0,158,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,155,15",
                  "text": "0,156,8,33"
                }
              },
              {
                "$type": "event",
                "inheritdoc": "Ext.panel.Table#viewready",
                "name": "viewready",
                "src": {
                  "inheritdoc": "0,500,16",
                  "name": "0,499,23"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,40,21",
                      "text": "2,40,28,19",
                      "type": "2,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "2,38,12",
                  "text": "2,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.grid.locking.Lockable-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.grid.locking.Lockable-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "lock",
                "text": "Locks the activeHeader as determined by which menu is open OR a header\nas specified.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "header",
                    "optional": true,
                    "text": "Header to unlock from the locked section.\nDefaults to the header which has the menu open currently.\n",
                    "type": "Ext.grid.column.Column",
                    "src": {
                      "name": "0,909,41",
                      "text": "0,909,49,42:0,910,8,58",
                      "type": "0,909,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "toIdx",
                    "optional": true,
                    "text": "The index to move the unlocked header to.\nDefaults to appending as the last item.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,911,25",
                      "text": "0,911,32,42:0,912,8,40",
                      "type": "0,911,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,913,8",
                  "name": "0,915,0",
                  "text": "0,907,8,85"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.grid.locking.Lockable-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.grid.locking.Lockable-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "syncLockedWidth",
                "text": "Updates the overall view after columns have been resized, or moved from\nthe locked to unlocked side or vice-versa.\n\nIf all columns are removed from either side, that side must be hidden, and the\nsole remaining column owning grid then becomes *the* grid. It must flex to occupy the\nwhole of the locking view. And it must also allow scrolling.\n\nIf columns are shared between the two sides, the *locked* grid shrinkwraps the\nwidth of the visible locked columns while the normal grid flexes in what space remains.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if there are visible locked columns which need refreshing.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,798,26,66",
                      "type": "0,798,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,787,8",
                  "name": "0,801,0",
                  "text": "0,788,8,511"
                }
              },
              {
                "$type": "method",
                "name": "syncRowHeights",
                "text": "Synchronizes the row heights between the locked and non locked portion of the grid for each\nrow. If one row is smaller than the other, the height will be increased to match the larger one.\n",
                "src": {
                  "name": "0,671,0",
                  "text": "0,668,8,189"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.grid.locking.Lockable-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.grid.locking.Lockable-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.grid.locking.Lockable-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.grid.locking.Lockable-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,297,21,32",
                      "type": "2,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,239,12",
                  "text": "2,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlock",
                "text": "Unlocks the activeHeader as determined by which menu is open OR a header\nas specified.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "header",
                    "optional": true,
                    "text": "Header to unlock from the locked section.\nDefaults to the header which has the menu open currently.\n",
                    "type": "Ext.grid.column.Column",
                    "src": {
                      "name": "0,1022,41",
                      "text": "0,1022,49,42:0,1023,8,58",
                      "type": "0,1022,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "toIdx",
                    "optional": true,
                    "text": "The index to move the unlocked header to.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,1024,25",
                      "text": "0,1024,34,42",
                      "type": "0,1024,16",
                      "value": "0,1024,31"
                    }
                  }
                ],
                "src": {
                  "access": "0,1025,8",
                  "name": "0,1027,0",
                  "text": "0,1020,8,87"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.grid.locking.Lockable-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.grid.locking.Lockable-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.grid.locking.Lockable-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.grid.locking.Lockable-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.grid.locking.Lockable-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.grid.locking.Lockable-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.grid.locking.Lockable-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.grid.locking.Lockable-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.grid.locking.Lockable-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.grid.locking.Lockable-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.grid.locking.Lockable-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              }
            ]
          },
          {
            "$type": "vars",
            "items": [
              {
                "$type": "property",
                "name": "$grid-lockable-body-border-width",
                "text": "The border-width of the lockable grid body border\n",
                "type": "Number",
                "value": "$grid-body-border-width",
                "src": {
                  "name": "1,40,1",
                  "text": "1,38,4,50",
                  "type": "1,37,10",
                  "value": "1,40,43"
                }
              },
              {
                "$type": "property",
                "name": "$grid-lockable-header-menu-lock-glyph",
                "text": "Glyph for the grid header menu \"lock\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-lock $grid-header-menu-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,28,1",
                  "text": "1,26,4,97",
                  "type": "1,25,10",
                  "value": "1,28,48"
                }
              },
              {
                "$type": "property",
                "name": "$grid-lockable-header-menu-unlock-glyph",
                "text": "Glyph for the grid header menu \"unlock\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-unlock $grid-header-menu-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,34,1",
                  "text": "1,32,4,99",
                  "type": "1,31,10",
                  "value": "1,34,50"
                }
              },
              {
                "$type": "property",
                "name": "$grid-lockable-separator-border-color",
                "text": "The border-color of the border between the locked views. Defaults to the\npanel border color. May be overridden in a theme.\n",
                "type": "String",
                "value": "$panel-border-color",
                "src": {
                  "name": "1,22,1",
                  "text": "1,19,4,123",
                  "type": "1,18,10",
                  "value": "1,22,48"
                }
              },
              {
                "$type": "property",
                "name": "$grid-lockable-separator-border-style",
                "text": "The border-style of the border between the locked views\n",
                "type": "String",
                "value": "solid",
                "src": {
                  "name": "1,15,1",
                  "text": "1,13,4,56",
                  "type": "1,12,10",
                  "value": "1,15,48"
                }
              },
              {
                "$type": "property",
                "name": "$grid-lockable-separator-border-width",
                "text": "The width of the border between the locked views\n",
                "type": "Number",
                "value": "1px",
                "src": {
                  "name": "1,9,1",
                  "text": "1,7,4,49",
                  "type": "1,6,10",
                  "value": "1,9,48"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,2,4",
          "alternateClassNames": "0,28,0",
          "name": "1,2,11",
          "requires": "0,31,0,0:0,32,0,0:0,33,0,0:0,34,0,0",
          "text": "0,4,4,1174"
        }
      }
    ]
  },
  "version": 1
}