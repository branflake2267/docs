{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/grid/plugin/DragDrop.js",
    "../../../ext/packages/core/src/plugin/Abstract.js",
    "../../../ext/classic/classic/overrides/plugin/Abstract.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "plugin.gridviewdragdrop",
        "extended": "Ext.plugin.Abstract,Ext.Base,Object",
        "extends": "Ext.plugin.Abstract",
        "name": "Ext.grid.plugin.DragDrop",
        "text": "This plugin provides drag and drop functionality for a {@link Ext.view.Table Ext.grid.View}.\n\nA specialized instance of {@link Ext.dd.DragZone} and {@link Ext.dd.DropZone} are attached to the grid view.  The DropZone will participate in drops\nfrom DragZones having the same {@link #cfg!ddGroup #ddGroup} including drops from within the same\ngrid.\n\nDuring the drop operation a data object is passed to a participating DropZone's drop\nhandlers.  The drag data object has the following properties:\n\n- **copy:** {@link Boolean} <br> The value of {@link #cfg!copy #copy}.  Or `true` if\n{@link #cfg!allowCopy #allowCopy} is true **and** the control key was pressed as the drag operation\nbegan.\n\n- **view:** {@link Ext.view.Table Ext.grid.View} <br> The source grid view from which the\ndrag originated\n\n- **ddel:** HTMLElement <br> The drag proxy element which moves with the cursor\n\n- **item:** HTMLElement <br> The grid view node upon which the mousedown event was\nregistered\n\n- **records:** {@link Array} <br> An Array of {@link Ext.data.Model}s\nrepresenting the selected data being dragged from the source grid view\n\nBy adding this plugin to a view, two new events will be fired from the client\ngrid view as well as its owning Grid: `{@link #event!beforedrop #beforedrop}` and `{@link #event!drop #drop}`.\n\n    @example\n    var store = Ext.create('Ext.data.Store', {\n        fields: ['name'],\n        data: [\n            [\"Lisa\"],\n            [\"Bart\"],\n            [\"Homer\"],\n            [\"Marge\"]\n        ],\n        proxy: {\n            type: 'memory',\n            reader: 'array'\n        }\n    });\n\n    Ext.create('Ext.grid.Panel', {\n        store: store,\n        enableLocking: true,\n        columns: [{\n            header: 'Name',\n            dataIndex: 'name',\n            flex: true\n        }],\n        viewConfig: {\n            plugins: {\n                ptype: 'gridviewdragdrop',\n                dragText: 'Drag and drop to reorganize'\n            }\n        },\n        height: 200,\n        width: 400,\n        renderTo: Ext.getBody()\n    });\n",
        "uses": "Ext.view.DragZone,Ext.grid.ViewDropZone",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "allowCopy",
                "optional": true,
                "text": "Set as `true` to allow the user to hold down the control key at the start of the\ndrag operation and copy the dragged records between grids.  Otherwise, dragged\nrecords will be moved.\n\n**Note:** This only applies to records dragged between two different grids with\nunique stores.\n\nSee {@link #cfg!copy #copy} to enable the copying of all dragged records.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,185,24",
                  "text": "0,186,8,344",
                  "type": "0,185,14",
                  "value": "0,185,34"
                }
              },
              {
                "$type": "property",
                "name": "containerScroll",
                "text": "`true` to register this container with the Scrollmanager for auto scrolling during drag operations.\nA {@link Ext.dd.ScrollManager} configuration may also be passed.\n",
                "type": "Object/Boolean",
                "src": {
                  "name": "0,247,30",
                  "text": "0,245,8,165",
                  "type": "0,247,14"
                }
              },
              {
                "$type": "property",
                "name": "copy",
                "optional": true,
                "text": "Set as `true` to copy the records from the source grid to the destination drop\ngrid.  Otherwise, dragged records will be moved.\n\n**Note:** This only applies to records dragged between two different grids with\nunique stores.\n\nSee {@link #cfg!allowCopy #allowCopy} to allow only control-drag operations to copy records.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,174,24",
                  "text": "0,175,8,303",
                  "type": "0,174,14",
                  "value": "0,174,29"
                }
              },
              {
                "$type": "property",
                "name": "ddGroup",
                "optional": true,
                "text": "A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and\nDropZone used by this plugin will only interact with other drag drop objects in the same group.\n",
                "type": "String",
                "value": "gridDD",
                "src": {
                  "name": "0,210,23",
                  "text": "0,211,8,203",
                  "type": "0,210,14",
                  "value": "0,210,31"
                }
              },
              {
                "$type": "property",
                "name": "dragGroup",
                "optional": true,
                "text": "The {@link #cfg!ddGroup #ddGroup} to which the DragZone will belong.\n\nThis defines which other DropZones the DragZone will interact with. Drag/DropZones only interact with other\nDrag/DropZones which are members of the same {@link #cfg!ddGroup #ddGroup}.\n",
                "type": "String",
                "src": {
                  "name": "0,217,23",
                  "text": "0,218,8,228",
                  "type": "0,217,14"
                }
              },
              {
                "$type": "property",
                "name": "dragText",
                "text": "The text to show while dragging.\n\nTwo placeholders can be used in the text:\n\n- `{0}` The number of selected items.\n- `{1}` 's' when more than 1 items (only useful for English).\n",
                "src": {
                  "name": "0,206,0",
                  "text": "0,199,8,177"
                }
              },
              {
                "$type": "property",
                "name": "dragZone",
                "optional": true,
                "text": "A config object to apply to the creation of the {@link #property!dragZone #property-dragZone} which handles for drag start gestures.\n\nTemplate methods of the DragZone may be overridden using this config.\n",
                "type": "Object",
                "src": {
                  "name": "0,252,23",
                  "text": "0,253,8,194",
                  "type": "0,252,14"
                }
              },
              {
                "$type": "property",
                "name": "dropGroup",
                "optional": true,
                "text": "The {@link #cfg!ddGroup #ddGroup} to which the DropZone will belong.\n\nThis defines which other DragZones the DropZone will interact with. Drag/DropZones only interact with other\nDrag/DropZones which are members of the same {@link #cfg!ddGroup #ddGroup}.\n",
                "type": "String",
                "src": {
                  "name": "0,225,23",
                  "text": "0,226,8,228",
                  "type": "0,225,14"
                }
              },
              {
                "$type": "property",
                "name": "dropZone",
                "optional": true,
                "text": "A config object to apply to the creation of the {@link #property!dropZone #property-dropZone} which handles mouseover and drop gestures.\n\nTemplate methods of the DropZone may be overridden using this config.\n",
                "type": "Object",
                "src": {
                  "name": "0,259,23",
                  "text": "0,260,8,198",
                  "type": "0,259,14"
                }
              },
              {
                "$type": "property",
                "name": "enableDrag",
                "text": "`false` to disallow dragging items from the View.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,239,23",
                  "text": "0,240,8,50",
                  "type": "0,239,14"
                }
              },
              {
                "$type": "property",
                "name": "enableDrop",
                "text": "`false` to disallow the View from accepting drop gestures.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,233,23",
                  "text": "0,234,8,59",
                  "type": "0,233,14"
                }
              },
              {
                "$type": "property",
                "name": "pluginId",
                "text": "A name for the plugin that can be set at creation time to then retrieve the plugin\nthrough {@link Ext.Component#method!getPlugin Ext.Component#getPlugin} method.  For example:\n\n    var grid = Ext.create('Ext.grid.Panel', {\n        plugins: [{\n            ptype: 'cellediting',\n            clicksToEdit: 2,\n            pluginId: 'cellplugin'\n        }]\n    });\n\n    // later on:\n    var plugin = grid.getPlugin('cellplugin');\n",
                "type": "String",
                "src": {
                  "name": "1,61,22",
                  "text": "1,62,8,404",
                  "type": "1,61,14"
                }
              },
              {
                "$type": "property",
                "name": "stateEvents",
                "text": "The configured list of stateEvents used to (optionally) participate in Owner Component's state management.\n",
                "type": "String/Array",
                "src": {
                  "name": "2,13,28",
                  "text": "2,14,8,107",
                  "type": "2,13,14"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "beforedrop",
                "text": "**This event is fired through the {@link Ext.view.Table Ext.grid.View} and its owning\n{@link Ext.grid.Panel}. You can add listeners to the grid or grid {@link Ext.grid.Panel#cfg!viewConfig Ext.grid.Panel#viewConfig} object**\n\nFired when a drop gesture has been triggered by a mouseup event in a valid drop\nposition in the grid view.\n\nReturning `false` to this event signals that the drop gesture was invalid and\nanimates the drag proxy back to the point from which the drag began.\n\nThe dropHandlers parameter can be used to defer the processing of this event. For\nexample, you can force the handler to wait for the result of a message box\nconfirmation or an asynchronous server call (_see the details of the dropHandlers\nproperty for more information_).\n\n    grid.on('beforedrop', function(node, data, overModel, dropPosition, dropHandlers) {\n        // Defer the handling\n        dropHandlers.wait = true;\n        Ext.MessageBox.confirm('Drop', 'Are you sure', function(btn){\n            if (btn === 'yes') {\n                dropHandlers.processDrop();\n            } else {\n                dropHandlers.cancelDrop();\n            }\n        });\n    });\n\nAny other return value continues with the data transfer operation unless the wait\nproperty is set.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The {@link Ext.view.Table Ext.grid.View} node **if any** over\nwhich the cursor was positioned.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,105,29",
                      "text": "0,105,34,57:0,106,8,34",
                      "type": "0,105,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "The data object gathered at mousedown time by the\ncooperating {@link Ext.dd.DragZone}'s {@link Ext.dd.DragZone#method!getDragData Ext.dd.DragZone#getDragData} method.  It contains the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "copy",
                        "text": "The value of {@link #cfg!copy #copy}.  Or `true` if\n{@link #cfg!allowCopy #allowCopy} is true **and** the control key was pressed as the drag\noperation began.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,111,30",
                          "text": "0,111,35,42:0,112,8,92",
                          "type": "0,111,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "view",
                        "text": "The source grid view from which the drag\noriginated\n",
                        "type": "Ext.view.Table",
                        "src": {
                          "name": "0,114,36",
                          "text": "0,114,41,41:0,115,8,11",
                          "type": "0,114,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "ddel",
                        "text": "The drag proxy element which moves with the cursor\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "0,116,34",
                          "text": "0,116,39,51",
                          "type": "0,116,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The grid view node upon which the mousedown event\nwas registered\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "0,117,34",
                          "text": "0,117,39,50:0,118,8,15",
                          "type": "0,117,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "records",
                        "text": "An Array of Models representing the\nselected data being dragged from the source grid view\n",
                        "type": "Ext.data.Model[]",
                        "src": {
                          "name": "0,119,39",
                          "text": "0,119,47,36:0,120,8,55",
                          "type": "0,119,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,108,24",
                      "text": "0,108,29,50:0,109,8,142",
                      "type": "0,108,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "overModel",
                    "text": "The Model over which the drop gesture took place\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,122,32",
                      "text": "0,122,42,49",
                      "type": "0,122,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dropPosition",
                    "text": "`\"before\"` or `\"after\"` depending on whether the\ncursor is above or below the mid-line of the node.\n",
                    "type": "String",
                    "src": {
                      "name": "0,124,24",
                      "text": "0,124,37,49:0,125,8,52",
                      "type": "0,124,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dropHandlers",
                    "text": "This parameter allows the developer to control when the drop action takes place.\nIt is useful if any asynchronous processing needs to be completed before\nperforming the drop. This object has the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "wait",
                        "text": "Indicates whether the drop should be deferred.\nSet this property to true to defer the drop.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,132,38",
                          "text": "0,132,43,47:0,133,8,45",
                          "type": "0,132,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "processDrop",
                        "text": "A function to be called to complete\nthe drop operation.\n",
                        "type": "Function",
                        "src": {
                          "name": "0,134,39",
                          "text": "0,134,51,36:0,135,8,20",
                          "type": "0,134,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "cancelDrop",
                        "text": "A function to be called to cancel the\ndrop operation.\n",
                        "type": "Function",
                        "src": {
                          "name": "0,136,39",
                          "text": "0,136,50,38:0,137,8,16",
                          "type": "0,136,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,127,24",
                      "text": "0,128,8,218",
                      "type": "0,127,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,74,15",
                  "text": "0,75,8,1234"
                }
              },
              {
                "$type": "event",
                "name": "drop",
                "text": "**This event is fired through the {@link Ext.view.Table Ext.grid.View} and its owning\n{@link Ext.grid.Panel}. You can add listeners to the grid or grid {@link Ext.grid.Panel#cfg!viewConfig Ext.grid.Panel#viewConfig} object**\n\nFired when a drop operation has been completed and the data has been moved or\ncopied.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The {@link Ext.view.Table Ext.grid.View} node **if any** over\nwhich the cursor was positioned.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,149,29",
                      "text": "0,149,34,56:0,150,8,34",
                      "type": "0,149,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "The data object gathered at mousedown time by the\ncooperating {@link Ext.dd.DragZone}'s {@link Ext.dd.DragZone#method!getDragData Ext.dd.DragZone#getDragData} method.  It contains the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "copy",
                        "text": "The value of {@link #cfg!copy #copy}.  Or `true` if\n{@link #cfg!allowCopy #allowCopy} is true **and** the control key was pressed as the drag\noperation began.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,155,30",
                          "text": "0,155,35,42:0,156,8,92",
                          "type": "0,155,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "view",
                        "text": "The source grid view from which the drag\noriginated\n",
                        "type": "Ext.view.Table",
                        "src": {
                          "name": "0,158,36",
                          "text": "0,158,41,41:0,159,8,11",
                          "type": "0,158,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "ddel",
                        "text": "The drag proxy element which moves with the cursor\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "0,160,34",
                          "text": "0,160,39,51",
                          "type": "0,160,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The grid view node upon which the mousedown event\nwas registered\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "0,161,34",
                          "text": "0,161,39,50:0,162,8,15",
                          "type": "0,161,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "records",
                        "text": "An Array of Models representing the\nselected data being dragged from the source grid view\n",
                        "type": "Ext.data.Model[]",
                        "src": {
                          "name": "0,163,39",
                          "text": "0,163,47,36:0,164,8,55",
                          "type": "0,163,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,152,24",
                      "text": "0,152,29,50:0,153,8,142",
                      "type": "0,152,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "overModel",
                    "text": "The Model over which the drop gesture took\nplace.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,166,32",
                      "text": "0,166,42,43:0,167,8,8",
                      "type": "0,166,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dropPosition",
                    "text": "`\"before\"` or `\"after\"` depending on whether the\ncursor is above or below the mid-line of the node.\n",
                    "type": "String",
                    "src": {
                      "name": "0,169,24",
                      "text": "0,169,37,49:0,170,8,51",
                      "type": "0,169,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,141,15",
                  "text": "0,142,8,294"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "3,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,118,12",
                  "name": "3,120,0",
                  "text": "3,116,12,125"
                }
              },
              {
                "$type": "method",
                "name": "applyState",
                "text": "The applyState method is invoked by the client Component's State mixin after initComponent method has been run for the client.\n\nThe supplied implementation is empty. If plugin Subclasses are to (optionally) participate in the client Component's\nstate management, implementers should provide a suitable method to utilize it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The current plugin state object to be applied.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,35,24",
                      "text": "2,35,30,47",
                      "type": "2,35,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "allState",
                    "text": "The current aggregate state of the Component and all plugins.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,36,24",
                      "text": "2,36,33,62",
                      "type": "2,36,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,39,0",
                  "text": "2,31,8,324"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "3,1251,37",
                      "text": "3,1251,42,57:3,1252,12,67",
                      "type": "3,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1253,29,48",
                      "type": "3,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1250,12",
                  "name": "3,1255,0",
                  "text": "3,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "3,1338,37",
                      "text": "3,1338,42,57:3,1339,12,66",
                      "type": "3,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1340,29,52",
                      "type": "3,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1337,12",
                  "name": "3,1342,0",
                  "text": "3,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "clonePlugin",
                "text": "Creates clone of the plugin.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "overrideCfg",
                    "optional": true,
                    "text": "Additional config for the derived plugin.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,38,25",
                      "text": "1,38,38,42",
                      "type": "1,38,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,40,0",
                  "text": "1,37,8,29"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Instantiates the plugin.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "Configuration object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,27,25",
                      "text": "1,27,33,22",
                      "type": "1,27,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,29,0",
                  "text": "1,26,8,25"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "destroy",
                "text": "Component calls destroy on all its plugins at destroy time.\n",
                "src": {
                  "access": "0,284,8",
                  "name": "0,287,0",
                  "text": "0,285,8,60"
                }
              },
              {
                "$type": "method",
                "name": "disable",
                "text": "The base implementation just sets the plugin's `disabled` flag to `true`\n\nPlugin subclasses which need more complex processing may implement an overriding implementation.\n",
                "src": {
                  "name": "2,57,0",
                  "text": "2,52,8,171"
                }
              },
              {
                "$type": "method",
                "name": "enable",
                "text": "The base implementation just sets the plugin's `disabled` flag to `false`\n\nPlugin subclasses which need more complex processing may implement an overriding implementation.\n",
                "src": {
                  "name": "2,47,0",
                  "text": "2,42,8,172"
                }
              },
              {
                "$type": "method",
                "name": "getCmp",
                "text": "Returns the component to which this plugin is attached.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Owner component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "1,54,32,17",
                      "type": "1,54,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,56,0",
                  "text": "1,53,8,56"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1469,29",
                      "text": "3,1469,35,40",
                      "type": "3,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,1470,30",
                      "text": "3,1470,42,60",
                      "type": "3,1470,20",
                      "value": "3,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1471,29,27",
                      "type": "3,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1473,0",
                  "text": "3,1466,12,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "3,1506,12",
                  "name": "3,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1551,29",
                      "text": "3,1551,35,37",
                      "type": "3,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "3,1552,35,48:3,1553,12,33",
                      "type": "3,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1555,0",
                  "text": "3,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getState",
                "text": "The getState method is invoked by the client Component's State mixin when one or more of the the specified {@link #cfg!stateEvents #stateEvents} are raised.\n\nThe supplied implementation is empty. If plugin Subclasses are to (optionally) participate in the client Component's\nstate management, implementers should provide a suitable method which returns a state object.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "state\n",
                    "type": "Object",
                    "src": {
                      "text": "2,24,25,6",
                      "type": "2,24,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,27,0",
                  "text": "2,20,8,352"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "3,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,1515,12",
                  "name": "3,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "4,100,20",
                      "text": "4,100,25,34",
                      "type": "4,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,101,22,57:4,102,4,15",
                      "type": "4,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,53,12",
                  "text": "4,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "init",
                "text": "The init method is invoked after initComponent method has been run for the client Component.\n\nThe supplied implementation is empty. Subclasses should perform plugin initialization, and set up bidirectional\nlinks between the plugin and its client Component in their own implementation of this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "client",
                    "text": "The client Component which owns this plugin.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "1,83,31",
                      "text": "1,83,38,45",
                      "type": "1,83,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,85,0",
                  "text": "1,79,8,300"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "3,1449,28",
                      "type": "3,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,1450,31,5",
                      "type": "3,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1448,12",
                  "name": "3,1452,0",
                  "text": "3,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "4,148,20",
                      "text": "4,148,30,71:4,149,4,18",
                      "type": "4,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "4,150,20",
                      "text": "4,150,27,50",
                      "type": "4,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,151,22,56",
                      "type": "4,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,106,12",
                  "text": "4,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "3,1571,28",
                      "type": "3,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "3,1572,28",
                      "type": "3,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1573,29,20",
                      "type": "3,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1574,12",
                  "name": "3,1576,0",
                  "text": "3,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "4,220,20",
                      "text": "4,220,25,34",
                      "type": "4,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,221,22,57:4,222,4,22",
                      "type": "4,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,155,12",
                  "text": "4,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "setCmp",
                "text": "Sets the component to which this plugin is attached.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cmp",
                    "text": "Owner component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "1,46,31",
                      "text": "1,46,35,17",
                      "type": "1,46,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,48,0",
                  "text": "1,45,8,53"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,1478,35",
                      "text": "3,1478,40,69",
                      "type": "3,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1479,29",
                      "text": "3,1479,36,41",
                      "type": "3,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,1480,31,5",
                      "type": "3,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1482,0",
                  "text": "3,1476,12,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "3,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1160,12",
                  "name": "3,1163,0",
                  "text": "3,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "4,235,21,32",
                      "type": "4,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,226,12",
                  "text": "4,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "4,297,21,32",
                      "type": "4,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,239,12",
                  "text": "4,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "3,1589,30",
                      "text": "3,1589,36,44",
                      "type": "3,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,1590,31,5",
                      "type": "3,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1591,12",
                  "name": "3,1593,0",
                  "text": "3,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,340,21,50",
                      "type": "4,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,301,12",
                  "text": "4,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "3,1049,13",
                  "name": "3,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1066,12",
                  "name": "3,1062,33",
                  "since": "3,1067,19",
                  "text": "3,1063,12,225",
                  "type": "3,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1076,12",
                  "name": "3,1072,33",
                  "since": "3,1077,19",
                  "text": "3,1073,12,229",
                  "type": "3,1072,23"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "4,346,14",
                  "text": "4,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1102,12",
                  "name": "3,1100,32",
                  "text": "3,1101,12,69",
                  "type": "3,1100,23"
                }
              },
              {
                "$type": "property",
                "name": "dragZone",
                "text": "An {@link Ext.view.DragZone} which handles mousedown and dragging of records from the grid.\n",
                "type": "Ext.view.DragZone",
                "src": {
                  "name": "0,266,38",
                  "text": "0,267,8,101",
                  "type": "0,266,19"
                }
              },
              {
                "$type": "property",
                "name": "dropZone",
                "text": "An {@link Ext.grid.ViewDropZone} which handles mouseover and dropping records in any grid which shares the same {@link #cfg!dropGroup #dropGroup}.\n",
                "type": "Ext.grid.ViewDropZone",
                "src": {
                  "name": "0,271,42",
                  "text": "0,272,8,141",
                  "type": "0,271,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1084,12",
                  "name": "3,1082,32",
                  "readonly": "3,1085,12",
                  "since": "3,1086,19",
                  "text": "3,1083,12,64",
                  "type": "3,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1093,12",
                  "name": "3,1091,32",
                  "readonly": "3,1094,12",
                  "since": "3,1095,19",
                  "text": "3,1092,12,75",
                  "type": "3,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1056,12",
                  "name": "3,1053,32",
                  "readonly": "3,1057,12",
                  "text": "3,1054,12,94",
                  "type": "3,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "isPlugin",
                "text": "`true` in this class to identify an object as an instantiated Plugin, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,20,28",
                  "text": "1,21,8,91",
                  "type": "1,20,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "4,46,14",
                  "text": "4,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "3,1413,12",
                  "name": "3,1379,34",
                  "text": "3,1380,12,1011",
                  "type": "3,1379,23"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "3,940,28",
                      "type": "3,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "3,941,32",
                      "text": "3,941,44,49",
                      "type": "3,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,942,12",
                  "inheritable": "3,944,12",
                  "name": "3,946,0",
                  "static": "3,943,12",
                  "text": "3,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "3,464,28",
                      "type": "3,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,461,12",
                  "inheritable": "3,463,12",
                  "name": "3,466,0",
                  "static": "3,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "3,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "3,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,659,12",
                  "inheritable": "3,661,12",
                  "name": "3,665,0",
                  "static": "3,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,522,28",
                      "text": "3,522,36,34",
                      "type": "3,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,523,30",
                      "text": "3,523,46,39",
                      "type": "3,523,20",
                      "value": "3,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,524,30",
                      "text": "3,524,45,45:3,525,12,53",
                      "type": "3,524,20",
                      "value": "3,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,527,12",
                  "name": "3,529,0",
                  "static": "3,526,12",
                  "text": "3,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "3,450,28",
                      "type": "3,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,451,31,5",
                      "type": "3,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,453,12",
                  "name": "3,455,0",
                  "static": "3,452,12",
                  "text": "3,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "3,693,30",
                      "text": "3,693,40,33",
                      "type": "3,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "3,694,34",
                      "text": "3,694,42,35",
                      "type": "3,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,695,31,5",
                      "type": "3,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,698,12",
                  "inheritable": "3,697,12",
                  "name": "3,700,0",
                  "static": "3,696,12",
                  "text": "3,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "3,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,810,12",
                  "inheritable": "3,812,12",
                  "name": "3,814,0",
                  "static": "3,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "3,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,824,12",
                  "inheritable": "3,826,12",
                  "name": "3,828,0",
                  "static": "3,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,107,29,22",
                      "type": "3,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,109,12",
                  "name": "3,111,0",
                  "static": "3,108,12",
                  "text": "3,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,1018,35",
                      "text": "3,1018,41,63:3,1019,12,43",
                      "type": "3,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,1020,35",
                      "text": "3,1020,42,25",
                      "type": "3,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,1022,12",
                  "name": "3,1025,0",
                  "static": "3,1021,12",
                  "text": "3,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "3,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,347,12",
                  "inheritable": "3,349,12",
                  "name": "3,352,0",
                  "static": "3,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "3,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,968,12",
                  "inheritable": "3,970,12",
                  "name": "3,972,0",
                  "static": "3,969,12",
                  "text": "3,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "3,989,29,10",
                      "type": "3,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,991,12",
                  "name": "3,993,0",
                  "static": "3,990,12",
                  "text": "3,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "3,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "3,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,840,12",
                  "inheritable": "3,842,12",
                  "name": "3,844,0",
                  "static": "3,841,12",
                  "text": "3,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "3,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "3,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,424,12",
                  "inheritable": "3,426,12",
                  "name": "3,428,0",
                  "static": "3,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,762,28",
                      "text": "3,762,36,52:3,763,12,66",
                      "type": "3,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,764,31,11",
                      "type": "3,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,766,12",
                  "name": "3,768,0",
                  "static": "3,765,12",
                  "text": "3,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "3,402,12",
                  "inheritable": "3,404,12",
                  "name": "3,406,0",
                  "static": "3,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "3,395,12",
                  "inheritable": "3,397,12",
                  "name": "3,399,0",
                  "static": "3,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,66,0",
          "extends": "0,65,0",
          "name": "0,64,0",
          "text": "0,2,4,1992",
          "uses": "0,69,0,0:0,70,0,0"
        }
      }
    ]
  },
  "version": 1
}