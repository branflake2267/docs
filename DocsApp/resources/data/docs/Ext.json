{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/Version.js",
    "../../../ext/packages/core/src/Ext.js",
    "../../../ext/packages/core/src/GlobalEvents.js",
    "../../../ext/packages/core/src/lang/Array.js",
    "../../../ext/packages/core/src/lang/Function.js",
    "../../../ext/packages/core/src/lang/String.js",
    "../../../ext/classic/classic/overrides/dom/Element.js",
    "../../../ext/packages/core/src/class/ClassManager.js",
    "../../../ext/packages/core/overrides/app/Application.js",
    "../../../ext/packages/core/src/Util.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/JSON.js",
    "../../../ext/packages/core/src/class/Loader.js",
    "../../../ext/packages/core/src/dom/Fly.js",
    "../../../ext/packages/core/src/dom/Element.js",
    "../../../ext/packages/core/src/app/Util.js",
    "../../../ext/packages/core/src/data/StoreManager.js",
    "../../../ext/packages/core/src/lang/Object.js",
    "../../../ext/packages/core/src/lang/Number.js",
    "../../../ext/packages/core/src/env/Ready.js",
    "../../../ext/packages/core/src/lang/Error.js",
    "../../../ext/packages/core/src/env/Browser.js",
    "../../../ext/packages/core/src/class/Class.js",
    "../../../ext/packages/core/src/mixin/Inheritable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext",
        "singleton": true,
        "text": "\nThe Ext namespace (global object) encapsulates all classes, singletons, and\nutility methods provided by Sencha's libraries.\n\nMost user interface Components are at a lower level of nesting in the namespace,\nbut many common utility functions are provided as direct properties of the Ext namespace.\n\nAlso many frequently used methods from other classes are provided as shortcuts\nwithin the Ext namespace. For example {@link Ext#getCmp Ext.getCmp} aliases\n{@link Ext.ComponentManager#method!get Ext.ComponentManager#get}.\n\nMany applications are initiated with {@link Ext#method!application Ext#application} which is\ncalled once the DOM is ready. This ensures all scripts have been loaded, preventing\ndependency issues. For example:\n\n     Ext.application({\n         name: 'MyApp',\n\n         launch: function () {\n             Ext.Msg.alert(this.name, 'Ready to go!');\n         }\n     });\n\n<b><a href=\"http://www.sencha.com/products/sencha-cmd/\">Sencha Cmd</a></b> is a free tool\nfor helping you generate and build Ext JS (and Sencha Touch) applications. See\n`{@link Ext.app.Application}` for more information about creating an app.\n\nA lower-level technique that does not use the `{@link Ext.app.Application}` architecture is\n{@link Ext#method!onReady Ext#onReady}.\n\nFor more information about how to use the Ext classes, see:\n\n- <a href=\"http://www.sencha.com/learn/\">The Learning Center</a>\n- <a href=\"http://www.sencha.com/learn/Ext_FAQ\">The FAQ</a>\n- <a href=\"http://www.sencha.com/forum/\">The forums</a>\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "debugConfig",
                "optional": true,
                "text": "This object is used to enable or disable debugging for classes or namespaces. The\ndefault instance looks like this:\n\n     Ext.debugConfig = {\n         hooks: {\n             '*': true\n         }\n     };\n\nTypically applications will set this in their `\"app.json\"` like so:\n\n     {\n         \"debug\": {\n             \"hooks\": {\n                 // Default for all namespaces:\n                 '*': true,\n\n                 // Except for Ext namespace which is disabled\n                 'Ext': false,\n\n                 // Except for Ext.layout namespace which is enabled\n                 'Ext.layout': true\n             }\n         }\n     }\n\nAlternatively, because this property is consumed very early in the load process of\nthe framework, this can be set in a `script` tag that is defined prior to loading\nthe framework itself.\n\nFor example, to enable debugging for the `Ext.layout` namespace only:\n\n     var Ext = Ext || {};\n     Ext.debugConfig = {\n         hooks: {\n             //...\n         }\n     };\n\nFor any class declared, the longest matching namespace specified determines if its\n`debugHooks` will be enabled. The default setting is specified by the '*' property.\n\n**NOTE:** This option only applies to debug builds. All debugging is disabled in\nproduction builds.\n",
                "type": "Object",
                "src": {
                  "name": "1,288,27",
                  "text": "1,289,12,1269",
                  "type": "1,288,18"
                }
              },
              {
                "$type": "property",
                "name": "manifest",
                "since": "5.0.0",
                "text": "This object is initialized prior to loading the framework (Ext JS or Sencha\nTouch) and contains settings and other information describing the application.\n\nFor applications built using Sencha Cmd, this is produced from the `\"app.json\"`\nfile with information extracted from all of the required packages' `\"package.json\"`\nfiles. This can be set to a string when your application is using the\n(microloader)[#/guide/microloader]. In this case, the string of \"foo\" will be\nrequested as `\"foo.json\"` and the object in that JSON file will parsed and set\nas this object.\n",
                "type": "String/Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "compatibility",
                    "text": "An object keyed by package name with\nthe value being to desired compatibility level as a version number. If this is\njust a string, this version is assumed to apply to the framework ('ext' or\n'touch'). Setting this value to less than 5 for 'ext' will enable the compatibility\nlayer to assist in the application upgrade process. For details on the upgrade\nprocess, see the (Upgrade Guide)[#/guides/upgrade_50].\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,270,42",
                      "text": "1,270,56,37:1,271,12,373",
                      "type": "1,270,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "debug",
                    "text": "An object configuring the debugging characteristics\nof the framework. See `Ext.debugConfig` which is set to this value.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,277,35",
                      "text": "1,277,41,52:1,278,12,69",
                      "type": "1,277,18"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "packages",
                    "text": "An object keyed by package name with the value\nbeing a subset of the package's `\"package.json\"` descriptor.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,280,35",
                      "text": "1,280,44,47:1,281,12,61",
                      "type": "1,280,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,268,33",
                  "since": "1,282,19",
                  "text": "1,258,12,564",
                  "type": "1,268,18"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "text": "Shorthand for {@link Ext.GlobalEvents#method!removeListener Ext.GlobalEvents#removeListener}.\n",
                "src": {
                  "inheritdoc": "2,201,8",
                  "text": "2,200,8,55"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.Array#each",
                "src": {
                  "inheritdoc": "3,1474,8"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Array#min} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Array#min",
                "text": "Old alias to {@link Ext.Array#method!min Ext.Array#min}\n",
                "src": {
                  "deprecatedMessage": "3,1487,8",
                  "deprecatedVersion": "3,1487,8",
                  "inheritdoc": "3,1490,8",
                  "text": "3,1486,8,35"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Array#max} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Array#max",
                "text": "Old alias to {@link Ext.Array#method!max Ext.Array#max}\n",
                "src": {
                  "deprecatedMessage": "3,1496,8",
                  "deprecatedVersion": "3,1496,8",
                  "inheritdoc": "3,1499,8",
                  "text": "3,1495,8,35"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Array#sum} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Array#sum",
                "text": "Old alias to {@link Ext.Array#method!sum Ext.Array#sum}\n",
                "src": {
                  "deprecatedMessage": "3,1505,8",
                  "deprecatedVersion": "3,1505,8",
                  "inheritdoc": "3,1508,8",
                  "text": "3,1504,8,35"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Array#mean} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Array#mean",
                "text": "Old alias to {@link Ext.Array#method!mean Ext.Array#mean}\n",
                "src": {
                  "deprecatedMessage": "3,1514,8",
                  "deprecatedVersion": "3,1514,8",
                  "inheritdoc": "3,1517,8",
                  "text": "3,1513,8,36"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Array#flatten} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Array#flatten",
                "text": "Old alias to {@link Ext.Array#method!flatten Ext.Array#flatten}\n",
                "src": {
                  "deprecatedMessage": "3,1523,8",
                  "deprecatedVersion": "3,1523,8",
                  "inheritdoc": "3,1526,8",
                  "text": "3,1522,8,39"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Array#clean} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Array#clean",
                "text": "Old alias to {@link Ext.Array#method!clean Ext.Array#clean}\n",
                "src": {
                  "deprecatedMessage": "3,1532,8",
                  "deprecatedVersion": "3,1532,8",
                  "inheritdoc": "3,1535,8",
                  "text": "3,1531,8,37"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Array#unique} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Array#unique",
                "text": "Old alias to {@link Ext.Array#method!unique Ext.Array#unique}\n",
                "src": {
                  "deprecatedMessage": "3,1541,8",
                  "deprecatedVersion": "3,1541,8",
                  "inheritdoc": "3,1544,8",
                  "text": "3,1540,8,38"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Array#pluck Ext.Array.pluck} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Array#pluck",
                "text": "Old alias to {@link Ext.Array#method!pluck Ext.Array#pluck}\n",
                "src": {
                  "deprecatedMessage": "3,1550,8",
                  "deprecatedVersion": "3,1550,8",
                  "inheritdoc": "3,1553,8",
                  "text": "3,1549,8,53"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.Array#toArray",
                "src": {
                  "inheritdoc": "3,1560,8"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.Function#defer",
                "src": {
                  "inheritdoc": "4,835,8"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.Function#interval",
                "src": {
                  "inheritdoc": "4,842,8"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.Function#pass",
                "src": {
                  "inheritdoc": "4,849,8"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.Function#bind",
                "src": {
                  "inheritdoc": "4,856,8"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "{@link Ext.String#htmlEncode} instead\n",
                "deprecatedVersion": "Use",
                "inheritdoc": "Ext.String#htmlEncode",
                "text": "Old alias to {@link Ext.String#method!htmlEncode Ext.String#htmlEncode}\n",
                "src": {
                  "deprecatedMessage": "5,450,4",
                  "deprecatedVersion": "5,450,4",
                  "inheritdoc": "5,453,4",
                  "text": "5,449,4,43"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "{@link Ext.String#htmlDecode} instead\n",
                "deprecatedVersion": "Use",
                "inheritdoc": "Ext.String#htmlDecode",
                "text": "Old alias to {@link Ext.String#method!htmlDecode Ext.String#htmlDecode}\n",
                "src": {
                  "deprecatedMessage": "5,460,4",
                  "deprecatedVersion": "5,460,4",
                  "inheritdoc": "5,463,4",
                  "text": "5,459,4,43"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "{@link Ext.String#urlAppend} instead\n",
                "deprecatedVersion": "Use",
                "inheritdoc": "Ext.String#urlAppend",
                "text": "Old alias to {@link Ext.String#method!urlAppend Ext.String#urlAppend}\n",
                "src": {
                  "deprecatedMessage": "5,469,4",
                  "deprecatedVersion": "5,469,4",
                  "inheritdoc": "5,472,4",
                  "text": "5,468,4,42"
                }
              },
              {
                "$type": "method",
                "name": "addBehaviors",
                "text": "Applies event listeners to elements by selectors when the document is ready.\nThe event name is specified with an `@` suffix.\n\n    Ext.addBehaviors({\n        // add a listener for click on all anchors in element with id foo\n        '#foo a@click': function(e, t){\n            // do something\n        },\n\n        // add the same listener to multiple selectors (separated by comma BEFORE the @)\n        '#foo a, #bar span.some-class@mouseover': function(){\n            // do something\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "text": "The list of behaviors to apply\n",
                    "type": "Object",
                    "src": {
                      "name": "6,3562,28",
                      "text": "6,3562,32,31",
                      "type": "6,3562,20"
                    }
                  }
                ],
                "src": {
                  "name": "6,3565,0",
                  "text": "6,3547,12,501"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addRootNamespaces",
                "since": "6.0.0",
                "text": "This function registers top-level (root) namespaces. This is needed for \"sandbox\"\nbuilds.\n\n     Ext.addRootNamespaces({\n         MyApp: MyApp,\n         Common: Common\n     });\n\nIn the above example, `MyApp` and `Common` are top-level namespaces that happen\nto also be included in the sandbox closure. Something like this:\n\n     (function(Ext) {\n\n     Ext.sandboxName = 'Ext6';\n     Ext.isSandboxed = true;\n     Ext.buildSettings = { baseCSSPrefix: \"x6-\", scopeResetCSS: true };\n\n     var MyApp = MyApp || {};\n     Ext.addRootNamespaces({ MyApp: MyApp );\n\n     ... normal app.js goes here ...\n\n     })(this.Ext6 || (this.Ext6 = {}));\n\nThe sandbox wrapper around the normally built `app.js` content has to take care\nof introducing top-level namespaces as well as call this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "namespaces",
                    "type": "Object",
                    "src": {
                      "name": "7,1962,24",
                      "type": "7,1962,16"
                    }
                  }
                ],
                "src": {
                  "access": "7,1966,8",
                  "name": "7,1963,16",
                  "since": "7,1965,15",
                  "text": "7,1935,8,780"
                }
              },
              {
                "$type": "method",
                "name": "application",
                "text": "Loads Ext.app.Application class and starts it up with given configuration after the\npage is ready.\n\nSee `{@link Ext.app.Application}` for details.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "Application config object or name of a class derived\nfrom Ext.app.Application.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "8,16,27",
                      "text": "8,16,34,53:8,17,4,26",
                      "type": "8,16,12"
                    }
                  }
                ],
                "src": {
                  "name": "8,9,12",
                  "text": "8,11,4,140"
                }
              },
              {
                "$type": "method",
                "name": "applyIf",
                "text": "Copies all the properties of config to object if they don't already exist.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The receiver of the properties\n",
                    "type": "Object",
                    "src": {
                      "name": "1,491,28",
                      "text": "1,491,35,31",
                      "type": "1,491,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The source of the properties\n",
                    "type": "Object",
                    "src": {
                      "name": "1,492,28",
                      "text": "1,492,35,29",
                      "type": "1,492,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns obj\n",
                    "type": "Object",
                    "src": {
                      "text": "1,493,29,12",
                      "type": "1,493,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,495,0",
                  "text": "1,490,12,75"
                }
              },
              {
                "$type": "method",
                "name": "asap",
                "text": "Schedules the specified callback function to be executed on the next turn of the\nevent loop. Where available, this method uses the browser's `setImmediate` API. If\nnot available, this method substitutes `setTimeout(0)`. Though not a perfect\nreplacement for `setImmediate` it is sufficient for many use cases.\n\nFor more details see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "Callback function.\n",
                    "type": "Function",
                    "src": {
                      "name": "4,780,26",
                      "text": "4,780,29,19",
                      "type": "4,780,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for the callback (`this` pointer).\n",
                    "type": "Object",
                    "src": {
                      "name": "4,781,25",
                      "text": "4,781,32,45",
                      "type": "4,781,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "parameters",
                    "optional": true,
                    "text": "Additional parameters to pass to `fn`.\n",
                    "type": "Mixed[]",
                    "src": {
                      "name": "4,782,26",
                      "text": "4,782,38,39",
                      "type": "4,782,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A cancelation id for `{@link Ext#method!asapCancel Ext#asapCancel}`.\n",
                    "type": "Number",
                    "src": {
                      "text": "4,783,25,47",
                      "type": "4,783,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,772,16",
                  "text": "4,773,8,409"
                }
              },
              {
                "$type": "method",
                "name": "asapCancel",
                "text": "Cancels a previously scheduled call to `{@link Ext#method!asap Ext#asap}`.\n\n     var asapId = Ext.asap(me.method, me);\n     ...\n\n     if (nevermind) {\n         Ext.apasCancel(asapId);\n     }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id returned by `{@link Ext#method!asap Ext#asap}`.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,823,24",
                      "text": "4,823,27,39",
                      "type": "4,823,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,813,16",
                  "text": "4,814,8,176"
                }
              },
              {
                "$type": "method",
                "name": "callback",
                "text": "Execute a callback function in a particular scope. If `{@link #method!callback callback}` argument is a\nfunction reference, that is called. If it is a string, the string is assumed to\nbe the name of a method on the given `scope`. If no function is passed the call\nis ignored.\n\nFor example, these calls are equivalent:\n\n     var myFunc = this.myFunc;\n\n     Ext.callback('myFunc', this, [arg1, arg2]);\n     Ext.callback(myFunc, this, [arg1, arg2]);\n\n     Ext.isFunction(myFunc) && this.myFunc(arg1, arg2);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "callback",
                    "text": "The callback function to execute or the name of\nthe callback method on the provided `scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "9,57,33",
                      "text": "9,57,42,48:9,58,8,45",
                      "type": "9,57,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope in which `{@link #method!callback callback}` should be invoked. If `{@link #method!callback callback}`\nis a string this object provides the method by that name. If this is `{@link null}` then\nthe `caller` is used to resolve the scope to a `ViewController` or the proper\n`defaultListenerScope`.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,59,25",
                      "text": "9,59,32,63:9,60,8,183",
                      "type": "9,59,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "optional": true,
                    "text": "The arguments to pass to the function.\n",
                    "type": "Array",
                    "src": {
                      "name": "9,63,24",
                      "text": "9,63,30,39",
                      "type": "9,63,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "delay",
                    "optional": true,
                    "text": "Pass a number to delay the call by a number of milliseconds.\n",
                    "type": "Number",
                    "src": {
                      "name": "9,64,25",
                      "text": "9,64,32,61",
                      "type": "9,64,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caller",
                    "optional": true,
                    "text": "The object calling the callback. This is used to resolve\nnamed methods when no explicit `scope` is provided.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,65,25",
                      "text": "9,65,33,57:9,66,8,52",
                      "type": "9,65,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "caller",
                    "src": {
                      "name": "9,67,25",
                      "text": "9,67,46,46",
                      "type": "9,67,16",
                      "value": "9,67,38"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value returned by the callback or `{@link undefined}` (if there is a `delay`\nor if the `{@link #method!callback callback}` is not a function).\n",
                    "src": {
                      "text": "9,68,16,73:9,69,8,41"
                    }
                  }
                ],
                "src": {
                  "name": "9,41,16",
                  "text": "9,43,8,480"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "canonicalEventName",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,484,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,481,12",
                  "name": "1,484,0"
                }
              },
              {
                "$type": "method",
                "name": "checkVersion",
                "text": "This method checks the registered package versions against the provided version\n`specs`. A `spec` is either a string or an object indicating a boolean operator.\nThis method accepts either form or an array of these as the first argument. The\nsecond argument applies only when the first is an array and indicates whether\nall `specs` must match or just one.\n\n## Package Version Specifications\nThe string form of a `spec` is used to indicate a version or range of versions\nfor a particular package. This form of `spec` consists of three (3) parts:\n\n * Package name followed by \"@\". If not provided, the framework is assumed.\n * Minimum version.\n * Maximum version.\n\nAt least one version number must be provided. If both minimum and maximum are\nprovided, these must be separated by a \"-\".\n\nSome examples of package version specifications:\n\n     4.2.2           (exactly version 4.2.2 of the framework)\n     4.2.2+          (version 4.2.2 or higher of the framework)\n     4.2.2-          (version 4.2.2 or higher of the framework)\n     4.2.1 - 4.2.3   (versions from 4.2.1 up to 4.2.3 of the framework)\n     - 4.2.2         (any version up to version 4.2.1 of the framework)\n\n     foo@1.0         (exactly version 1.0 of package \"foo\")\n     foo@1.0-1.3     (versions 1.0 up to 1.3 of package \"foo\")\n\n**NOTE:** This syntax is the same as that used in Sencha Cmd's package\nrequirements declarations.\n\n## Boolean Operator Specifications\nInstead of a string, an object can be used to describe a boolean operation to\nperform on one or more `specs`. The operator is either **`and`** or **`or`**\nand can contain an optional **`not`**.\n\nFor example:\n\n     {\n         not: true,  // negates boolean result\n         and: [\n             '4.2.2',\n             'foo@1.0.1 - 2.0.1'\n         ]\n     }\n\nEach element of the array can in turn be a string or object spec. In other\nwords, the value is passed to this method (recursively) as the first argument\nso these two calls are equivalent:\n\n     Ext.checkVersion({\n         not: true,  // negates boolean result\n         and: [\n             '4.2.2',\n             'foo@1.0.1 - 2.0.1'\n         ]\n     });\n\n     !Ext.checkVersion([\n             '4.2.2',\n             'foo@1.0.1 - 2.0.1'\n         ], true);\n\n## Examples\n\n     // A specific framework version\n     Ext.checkVersion('4.2.2');\n\n     // A range of framework versions:\n     Ext.checkVersion('4.2.1-4.2.3');\n\n     // A specific version of a package:\n     Ext.checkVersion('foo@1.0.1');\n\n     // A single spec that requires both a framework version and package\n     // version range to match:\n     Ext.checkVersion({\n         and: [\n             '4.2.2',\n             'foo@1.0.1-1.0.2'\n         ]\n     });\n\n     // These checks can be nested:\n     Ext.checkVersion({\n         and: [\n             '4.2.2',  // exactly version 4.2.2 of the framework *AND*\n             {\n                 // either (or both) of these package specs:\n                 or: [\n                     'foo@1.0.1-1.0.2',\n                     'bar@3.0+'\n                 ]\n             }\n         ]\n     });\n\n## Version Comparisons\nVersion comparsions are assumed to be \"prefix\" based. That is to say, `\"foo@1.2\"`\nmatches any version of \"foo\" that has a major version 1 and a minor version of 2.\n\nThis also applies to ranges. For example `\"foo@1.2-2.2\"` matches all versions\nof \"foo\" from 1.2 up to 2.2 regardless of the specific patch and build.\n\n## Use in Overrides\nThis methods primary use is in support of conditional overrides on an\n`Ext.define` declaration.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "specs",
                    "text": "A version specification string, an object\ncontaining `or` or `and` with a value that is equivalent to `specs` or an array\nof either of these.\n",
                    "type": "String/Array/Object",
                    "src": {
                      "name": "0,731,41",
                      "text": "0,731,47,42:0,732,12,100",
                      "type": "0,731,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "matchAll",
                    "optional": true,
                    "text": "Pass `true` to require all specs to match.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,734,30",
                      "text": "0,734,46,43",
                      "type": "0,734,20",
                      "value": "0,734,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if `specs` matches the registered package versions.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,735,30,57",
                      "type": "0,735,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,737,0",
                  "text": "0,623,12,3520"
                }
              },
              {
                "$type": "method",
                "name": "clone",
                "text": "Clone simple variables including array, {}-like objects, DOM nodes and Date without keeping the old reference.\nA reference for the object itself is returned if it's not a direct descendant of Object. For model cloning,\nsee {@link Ext.data.Model#method!copy Ext.data.Model#copy}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The variable to clone\n",
                    "type": "Object",
                    "src": {
                      "name": "1,872,28",
                      "text": "1,872,33,22",
                      "type": "1,872,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "clone\n",
                    "type": "Object",
                    "src": {
                      "text": "1,873,29,6",
                      "type": "1,873,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,875,0",
                  "text": "1,868,12,264"
                }
              },
              {
                "$type": "method",
                "name": "coerce",
                "text": "Coerces the first value if possible so that it is comparable to the second value.\n\nCoercion only works between the basic atomic data types String, Boolean, Number, Date, null and undefined.\n\nNumbers and numeric strings are coerced to Dates using the value as the millisecond era value.\n\nStrings are coerced to Dates by parsing using the {@link Ext.Date#property!defaultFormat Ext.Date#defaultFormat}.\n\nFor example\n\n    Ext.coerce('false', true);\n\nreturns the boolean value `false` because the second parameter is of type `{@link Boolean}`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "from",
                    "text": "The value to coerce\n",
                    "type": "Mixed",
                    "src": {
                      "name": "9,134,23",
                      "text": "9,134,28,20",
                      "type": "9,134,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "to",
                    "text": "The value it must be compared against\n",
                    "type": "Mixed",
                    "src": {
                      "name": "9,135,23",
                      "text": "9,135,26,38",
                      "type": "9,135,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The coerced value.\n",
                    "src": {
                      "text": "9,136,16,19"
                    }
                  }
                ],
                "src": {
                  "name": "9,118,16",
                  "text": "9,120,8,515"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "10,40,21",
                      "text": "10,40,28,19",
                      "type": "10,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "10,38,12",
                  "text": "10,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "copy",
                "text": "Copies a set of named properties fom the source object to the destination object.\n\nExample:\n\n    var foo = { a: 1, b: 2, c: 3 };\n\n    var bar = Ext.copy({}, foo, 'a,c');\n    // bar = { a: 1, c: 3 };\n\nImportant note: To borrow class prototype methods, use {@link Ext.Base#static-method!borrow Ext.Base#borrow} instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dest",
                    "text": "The destination object.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,218,24",
                      "text": "9,218,29,24",
                      "type": "9,218,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source object.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,219,24",
                      "text": "9,219,31,19",
                      "type": "9,219,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "Either an Array of property names, or a comma-delimited list\nof property names to copy.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "9,220,33",
                      "text": "9,220,39,61:9,221,8,27",
                      "type": "9,220,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "usePrototypeKeys",
                    "optional": true,
                    "text": "Pass `true` to copy keys off of the\nprototype as well as the instance.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "9,222,26",
                      "text": "9,222,50,36:9,223,8,35",
                      "type": "9,222,16",
                      "value": "9,222,43"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `dest` object.\n",
                    "type": "Object",
                    "src": {
                      "text": "9,224,25,19",
                      "type": "9,224,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,205,16",
                  "text": "9,207,8,289"
                }
              },
              {
                "$type": "method",
                "name": "copyIf",
                "text": "Copies a set of named properties fom the source object to the destination object\nif the destination object does not already have them.\n\nExample:\n\n    var foo = { a: 1, b: 2, c: 3 };\n\n    var bar = Ext.copyIf({ a:42 }, foo, 'a,c');\n    // bar = { a: 42, c: 3 };\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "destination",
                    "text": "The destination object.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,298,24",
                      "text": "9,298,36,24",
                      "type": "9,298,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source object.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,299,24",
                      "text": "9,299,31,19",
                      "type": "9,299,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "Either an Array of property names, or a single string\nwith a list of property names separated by \",\", \";\" or spaces.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "9,300,33",
                      "text": "9,300,39,54:9,301,8,63",
                      "type": "9,300,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `dest` object.\n",
                    "type": "Object",
                    "src": {
                      "text": "9,302,25,19",
                      "type": "9,302,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,286,16",
                  "text": "9,288,8,262"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext#copy Ext.copy} instead. This old method\nwould copy the named preoperties even if they did not exist in the source which\ncould produce `undefined` values in the destination.\n",
                "deprecatedVersion": "6.0.1",
                "name": "copyTo",
                "text": "Copies a set of named properties fom the source object to the destination object.\n\nExample:\n\n    var foo = { a: 1, b: 2, c: 3 };\n\n    var bar = Ext.copyTo({}, foo, 'a,c');\n    // bar = { a: 1, c: 3 };\n\nImportant note: To borrow class prototype methods, use {@link Ext.Base#static-method!borrow Ext.Base#borrow} instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dest",
                    "text": "The destination object.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,178,24",
                      "text": "9,178,29,24",
                      "type": "9,178,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source object.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,179,24",
                      "text": "9,179,31,19",
                      "type": "9,179,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "Either an Array of property names, or a comma-delimited list\nof property names to copy.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "9,180,33",
                      "text": "9,180,39,61:9,181,8,27",
                      "type": "9,180,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "usePrototypeKeys",
                    "optional": true,
                    "text": "Pass `true` to copy keys off of the\nprototype as well as the instance.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "9,182,26",
                      "text": "9,182,50,36:9,183,8,35",
                      "type": "9,182,16",
                      "value": "9,182,43"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `dest` object.\n",
                    "type": "Object",
                    "src": {
                      "text": "9,184,25,19",
                      "type": "9,184,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "9,185,8",
                  "deprecatedVersion": "9,185,8",
                  "name": "9,165,16",
                  "text": "9,167,8,291"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext#copyIf Ext.copyIf} instead. This old method\nwould copy the named preoperties even if they did not exist in the source which\ncould produce `undefined` values in the destination.\n",
                "deprecatedVersion": "6.0.1",
                "name": "copyToIf",
                "text": "Copies a set of named properties fom the source object to the destination object\nif the destination object does not already have them.\n\nExample:\n\n    var foo = { a: 1, b: 2, c: 3 };\n\n    var bar = Ext.copyToIf({ a:42 }, foo, 'a,c');\n    // bar = { a: 42, c: 3 };\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "destination",
                    "text": "The destination object.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,260,24",
                      "text": "9,260,36,24",
                      "type": "9,260,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source object.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,261,24",
                      "text": "9,261,31,19",
                      "type": "9,261,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "Either an Array of property names, or a single string\nwith a list of property names separated by \",\", \";\" or spaces.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "9,262,33",
                      "text": "9,262,39,54:9,263,8,63",
                      "type": "9,262,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `dest` object.\n",
                    "type": "Object",
                    "src": {
                      "text": "9,264,25,19",
                      "type": "9,264,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "9,265,8",
                  "deprecatedVersion": "9,265,8",
                  "name": "9,248,16",
                  "text": "9,250,8,264"
                }
              },
              {
                "$type": "method",
                "name": "create",
                "text": "Instantiate a class by either full name, alias or alternate name.\n\nIf {@link Ext.Loader} is {@link Ext.Loader#property!setConfig Ext.Loader#setConfig} and the class has\nnot been defined yet, it will attempt to load the class via synchronous loading.\n\nFor example, all these three lines return the same result:\n\n     // xtype\n     var window = Ext.create({\n         xtype: 'window',\n         width: 600,\n         height: 800,\n         ...\n     });\n\n     // alias\n     var window = Ext.create('widget.window', {\n         width: 600,\n         height: 800,\n         ...\n     });\n\n     // alternate name\n     var window = Ext.create('Ext.Window', {\n         width: 600,\n         height: 800,\n         ...\n     });\n\n     // full class name\n     var window = Ext.create('Ext.window.Window', {\n         width: 600,\n         height: 800,\n         ...\n     });\n\n     // single object with xclass property:\n     var window = Ext.create({\n         xclass: 'Ext.window.Window', // any valid value for 'name' (above)\n         width: 600,\n         height: 800,\n         ...\n     });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The class name or alias. Can be specified as `xclass`\nproperty if only one object parameter is specified.\n",
                    "type": "String",
                    "src": {
                      "name": "7,1429,29",
                      "text": "7,1429,35,54:7,1430,12,52",
                      "type": "7,1429,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "optional": true,
                    "text": "Additional arguments after the name will be passed to\nthe class' constructor.\n",
                    "type": "Object...",
                    "src": {
                      "name": "7,1431,32",
                      "text": "7,1431,38,54:7,1432,12,24",
                      "type": "7,1431,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "instance\n",
                    "type": "Object",
                    "src": {
                      "text": "7,1433,29,9",
                      "type": "7,1433,21"
                    }
                  }
                ],
                "src": {
                  "name": "7,1435,20",
                  "text": "7,1385,12,1047"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.ClassManager#instantiateByAlias",
                "name": "createByAlias",
                "src": {
                  "inheritdoc": "7,1557,12",
                  "name": "7,1559,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "deprecatedMessage": "{@link Ext#widget} instead.\n",
                "deprecatedVersion": "Use",
                "name": "createWidget",
                "text": "Old name for {@link Ext#method!widget Ext#widget}.\n",
                "src": {
                  "access": "7,1975,8",
                  "deprecatedMessage": "7,1972,8",
                  "deprecatedVersion": "7,1972,8",
                  "name": "7,1973,16",
                  "text": "7,1971,8,33"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.JSON#decode",
                "name": "decode",
                "text": "Shorthand for {@link Ext.JSON#decode}\n",
                "src": {
                  "inheritdoc": "11,285,8",
                  "name": "11,284,16",
                  "text": "11,282,8,38"
                }
              },
              {
                "$type": "method",
                "name": "define",
                "text": "Defines a class or override. A basic class is defined like this:\n\n     Ext.define('My.awesome.Class', {\n         someProperty: 'something',\n\n         someMethod: function(s) {\n             alert(s + this.someProperty);\n         }\n\n         ...\n     });\n\n     var obj = new My.awesome.Class();\n\n     obj.someMethod('Say '); // alerts 'Say something'\n\nTo create an anonymous class, pass `{@link null}` for the `className`:\n\n     Ext.define(null, {\n         constructor: function () {\n             // ...\n         }\n     });\n\nIn some cases, it is helpful to create a nested scope to contain some private\nproperties. The best way to do this is to pass a function instead of an object\nas the second parameter. This function will be called to produce the class\nbody:\n\n     Ext.define('MyApp.foo.Bar', function () {\n         var id = 0;\n\n         return {\n             nextId: function () {\n                 return ++id;\n             }\n         };\n     });\n\n_Note_ that when using override, the above syntax will not override successfully, because\nthe passed function would need to be executed first to determine whether or not the result\nis an override or defining a new object. As such, an alternative syntax that immediately\ninvokes the function can be used:\n\n     Ext.define('MyApp.override.BaseOverride', function () {\n         var counter = 0;\n\n         return {\n             override: 'Ext.Component',\n             logId: function () {\n                 console.log(++counter, this.id);\n             }\n         };\n     }());\n\n\nWhen using this form of `Ext.define`, the function is passed a reference to its\nclass. This can be used as an efficient way to access any static properties you\nmay have:\n\n     Ext.define('MyApp.foo.Bar', function (Bar) {\n         return {\n             statics: {\n                 staticMethod: function () {\n                     // ...\n                 }\n             },\n\n             method: function () {\n                 return Bar.staticMethod();\n             }\n         };\n     });\n\nTo define an override, include the `{@link #method!override override}` property. The content of an\noverride is aggregated with the specified class in order to extend or modify\nthat class. This can be as simple as setting default property values or it can\nextend and/or replace methods. This can also extend the statics of the class.\n\nOne use for an override is to break a large class into manageable pieces.\n\n     // File: /src/app/Panel.js\n\n     Ext.define('My.app.Panel', {\n         extend: 'Ext.panel.Panel',\n         requires: [\n             'My.app.PanelPart2',\n             'My.app.PanelPart3'\n         ]\n\n         constructor: function (config) {\n             this.callParent(arguments); // calls Ext.panel.Panel's constructor\n             //...\n         },\n\n         statics: {\n             method: function () {\n                 return 'abc';\n             }\n         }\n     });\n\n     // File: /src/app/PanelPart2.js\n     Ext.define('My.app.PanelPart2', {\n         override: 'My.app.Panel',\n\n         constructor: function (config) {\n             this.callParent(arguments); // calls My.app.Panel's constructor\n             //...\n         }\n     });\n\nAnother use of overrides is to provide optional parts of classes that can be\nindependently required. In this case, the class may even be unaware of the\noverride altogether.\n\n     Ext.define('My.ux.CoolTip', {\n         override: 'Ext.tip.ToolTip',\n\n         constructor: function (config) {\n             this.callParent(arguments); // calls Ext.tip.ToolTip's constructor\n             //...\n         }\n     });\n\nThe above override can now be required as normal.\n\n     Ext.define('My.app.App', {\n         requires: [\n             'My.ux.CoolTip'\n         ]\n     });\n\nOverrides can also contain statics, inheritableStatics, or privates:\n\n     Ext.define('My.app.BarMod', {\n         override: 'Ext.foo.Bar',\n\n         statics: {\n             method: function (x) {\n                 return this.callParent([x * 2]); // call Ext.foo.Bar.method\n             }\n         }\n     });\n\nStarting in version 4.2.2, overrides can declare their `compatibility` based\non the framework version or on versions of other packages. For details on the\nsyntax and options for these checks, see `Ext.checkVersion`.\n\nThe simplest use case is to test framework version for compatibility:\n\n     Ext.define('App.overrides.grid.Panel', {\n         override: 'Ext.grid.Panel',\n\n         compatibility: '4.2.2', // only if framework version is 4.2.2\n\n         //...\n     });\n\nAn array is treated as an OR, so if any specs match, the override is\ncompatible.\n\n     Ext.define('App.overrides.some.Thing', {\n         override: 'Foo.some.Thing',\n\n         compatibility: [\n             '4.2.2',\n             'foo@1.0.1-1.0.2'\n         ],\n\n         //...\n     });\n\nTo require that all specifications match, an object can be provided:\n\n     Ext.define('App.overrides.some.Thing', {\n         override: 'Foo.some.Thing',\n\n         compatibility: {\n             and: [\n                 '4.2.2',\n                 'foo@1.0.1-1.0.2'\n             ]\n         },\n\n         //...\n     });\n\nBecause the object form is just a recursive check, these can be nested:\n\n     Ext.define('App.overrides.some.Thing', {\n         override: 'Foo.some.Thing',\n\n         compatibility: {\n             and: [\n                 '4.2.2',  // exactly version 4.2.2 of the framework *AND*\n                 {\n                     // either (or both) of these package specs:\n                     or: [\n                         'foo@1.0.1-1.0.2',\n                         'bar@3.0+'\n                     ]\n                 }\n             ]\n         },\n\n         //...\n     });\n\nIMPORTANT: An override is only included in a build if the class it overrides is\nrequired. Otherwise, the override, like the target class, is not included. In\nSencha Cmd v4, the `compatibility` declaration can likewise be used to remove\nincompatible overrides from a build.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The class name to create in string dot-namespaced format, for example:\n'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager'\nIt is highly recommended to follow this simple convention:\n - The root and the class name are 'CamelCased'\n - Everything else is lower-cased\nPass `{@link null}` to create an anonymous class.\n",
                    "type": "String",
                    "src": {
                      "name": "7,1778,28",
                      "text": "7,1778,38,71:7,1779,12,238",
                      "type": "7,1778,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "The key - value pairs of properties to apply to this class. Property names can be of any valid\nstrings, except those in the reserved listed below:\n\n - {@link Ext.Class#cfg!alias Ext.Class#cfg-alias}\n - {@link Ext.Class#cfg!alternateClassName Ext.Class#cfg-alternateClassName}\n - {@link Ext.Class#cfg!cachedConfig Ext.Class#cfg-cachedConfig}\n - {@link Ext.Class#cfg!config Ext.Class#cfg-config}\n - {@link Ext.Class#cfg!extend Ext.Class#cfg-extend}\n - {@link Ext.Class#cfg!inheritableStatics Ext.Class#cfg-inheritableStatics}\n - {@link Ext.Class#cfg!mixins Ext.Class#cfg-mixins}\n - {@link Ext.Class#cfg!override Ext.Class#cfg-override}\n - {@link Ext.Class#cfg!platformConfig Ext.Class#cfg-platformConfig}\n - {@link Ext.Class#cfg!privates Ext.Class#cfg-privates}\n - {@link Ext.Class#cfg!requires Ext.Class#cfg-requires}\n - `self`\n - {@link Ext.Class#cfg!singleton Ext.Class#cfg-singleton}\n - {@link Ext.Class#cfg!statics Ext.Class#cfg-statics}\n - {@link Ext.Class#cfg!uses Ext.Class#cfg-uses}\n - {@link Ext.Class#cfg!xtype Ext.Class#cfg-xtype} (for {@link Ext.Component} only)\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1784,28",
                      "text": "7,1784,33,95:7,1785,12,781",
                      "type": "7,1784,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "createdFn",
                    "optional": true,
                    "text": "Callback to execute after the class is created, the execution scope of which\n(`this`) will be the newly created class itself.\n",
                    "type": "Function",
                    "src": {
                      "name": "7,1804,31",
                      "text": "7,1804,42,77:7,1805,12,49",
                      "type": "7,1804,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.Base",
                    "src": {
                      "type": "7,1806,21"
                    }
                  }
                ],
                "src": {
                  "name": "7,1809,0",
                  "text": "7,1564,12,5917"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "deprecate",
                "text": "Create a closure for deprecated code.\n\n    // This means Ext.oldMethod is only supported in 4.0.0beta and older.\n    // If Ext.getVersion('extjs') returns a version that is later than '4.0.0beta', for example '4.0.0RC',\n    // the closure will not be invoked\n    Ext.deprecate('extjs', '4.0.0beta', function() {\n        Ext.oldMethod = Ext.newMethod;\n\n        ...\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "packageName",
                    "text": "The package name\n",
                    "type": "String",
                    "src": {
                      "name": "0,843,28",
                      "text": "0,843,40,17",
                      "type": "0,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "since",
                    "text": "The last version before it's deprecated\n",
                    "type": "String",
                    "src": {
                      "name": "0,844,28",
                      "text": "0,844,34,40",
                      "type": "0,844,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "closure",
                    "text": "The callback function to be executed with the specified version is less than the current version\n",
                    "type": "Function",
                    "src": {
                      "name": "0,845,30",
                      "text": "0,845,38,97",
                      "type": "0,845,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "The execution scope (`this`) if the closure\n",
                    "type": "Object",
                    "src": {
                      "name": "0,846,28",
                      "text": "0,846,34,44",
                      "type": "0,846,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,847,12",
                  "name": "0,849,0",
                  "text": "0,832,12,373"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "Destroys all of the given objects. If arrays are passed, the elements of these\nare destroyed recursively.\n\nWhat it means to \"destroy\" an object depends on the type of object.\n\n * `{@link Array}`: Each element of the array is destroyed recursively.\n * `{@link Object}`: Any object with a `{@link #method!destroy destroy}` method will have that method called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Any number of objects or arrays.\n",
                    "type": "Mixed...",
                    "src": {
                      "name": "1,518,30",
                      "text": "1,518,35,33",
                      "type": "1,518,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,520,0",
                  "text": "1,510,12,319"
                }
              },
              {
                "$type": "method",
                "name": "destroyMembers",
                "text": "Destroys the specified named members of the given object using `Ext.destroy`. These\nproperties will be set to `{@link null}`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object who's properties you wish to destroy.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,540,28",
                      "text": "1,540,35,49",
                      "type": "1,540,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "One or more names of the properties to destroy and remove from the object.\n",
                    "type": "String...",
                    "src": {
                      "name": "1,541,31",
                      "text": "1,541,36,75",
                      "type": "1,541,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,543,0",
                  "text": "1,538,12,118"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.JSON#encode",
                "name": "encode",
                "text": "Shorthand for {@link Ext.JSON#encode}\n",
                "src": {
                  "inheritdoc": "11,277,8",
                  "name": "11,276,16",
                  "text": "11,274,8,38"
                }
              },
              {
                "$type": "method",
                "name": "exclude",
                "text": "Explicitly exclude files from being loaded. Useful when used in conjunction with a\nbroad include expression. Can be chained with more `{@link #method!require require}` and `{@link #method!exclude exclude}` methods,\nfor example:\n\n    Ext.exclude('Ext.data.*').require('*');\n\n    Ext.exclude('widget.button*').require('widget.*');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "excludes",
                    "type": "String/String[]",
                    "src": {
                      "name": "12,935,33",
                      "type": "12,935,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Contains `{@link #method!exclude exclude}`, `{@link #method!require require}` and `{@link #method!syncRequire syncRequire}` methods for chaining.\n",
                    "type": "Object",
                    "src": {
                      "text": "12,936,25,70",
                      "type": "12,936,17"
                    }
                  }
                ],
                "src": {
                  "name": "12,938,16",
                  "text": "12,927,8,282"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext#define Ext.define} instead\n",
                "deprecatedVersion": "4.0.0",
                "name": "extend",
                "text": "This method deprecated. Use {@link Ext#method!define Ext#define} instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "superclass",
                    "type": "Function",
                    "src": {
                      "name": "9,325,26",
                      "type": "9,325,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "overrides",
                    "type": "Object",
                    "src": {
                      "name": "9,326,24",
                      "type": "9,326,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The subclass constructor from the <tt>overrides</tt> parameter, or a generated one if not provided.\n",
                    "type": "Function",
                    "src": {
                      "text": "9,327,27,100",
                      "type": "9,327,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "9,328,8",
                  "deprecatedVersion": "9,328,8",
                  "name": "9,322,16",
                  "text": "9,324,8,67"
                }
              },
              {
                "$type": "method",
                "name": "factory",
                "text": "A global factory method to instantiate a class from a config object. For example,\nthese two calls are equivalent:\n\n    Ext.factory({ text: 'My Button' }, 'Ext.Button');\n    Ext.create('Ext.Button', { text: 'My Button' });\n\nIf an existing instance is also specified, it will be updated with the supplied config object. This is useful\nif you need to either create or update an object, depending on if an instance already exists. For example:\n\n    var button;\n    button = Ext.factory({ text: 'New Button' }, 'Ext.Button', button);     // Button created\n    button = Ext.factory({ text: 'Updated Button' }, 'Ext.Button', button); // Button updated\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The config object to instantiate or update an instance with.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,640,24",
                      "text": "9,640,31,61",
                      "type": "9,640,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "classReference",
                    "optional": true,
                    "text": "The class to instantiate from (if there is a default).\n",
                    "type": "String",
                    "src": {
                      "name": "9,641,25",
                      "text": "9,641,41,55",
                      "type": "9,641,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "instance",
                    "optional": true,
                    "text": "The instance to update.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,642,25",
                      "text": "9,642,35,24",
                      "type": "9,642,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "aliasNamespace",
                    "optional": true,
                    "src": {
                      "name": "9,643,16"
                    }
                  }
                ],
                "src": {
                  "name": "9,646,0",
                  "text": "9,627,8,646"
                }
              },
              {
                "$type": "method",
                "name": "fly",
                "text": "Gets the globally shared flyweight Element, with the passed node as the active\nelement. Do not store a reference to this element - the dom node can be overwritten\nby other code. {@link Ext#method!fly Ext#fly} is alias for {@link Ext.dom.Element#static-method!fly Ext.dom.Element#fly}.\n\nUse this to make one-time references to DOM elements which are not going to be\naccessed again either by application code, or by Ext's classes. If accessing an\nelement which will be processed regularly, then {@link Ext#method!get Ext#get} will be\nmore appropriate to take advantage of the caching provided by the\n{@link Ext.dom.Element} class.\n\nIf this method is called with and id or element that has already been cached by\na previous call to Ext.get() it will return the cached Element instead of the\nflyweight instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dom",
                    "text": "The DOM node or `{@link #method!id id}`.\n",
                    "type": "String/HTMLElement",
                    "src": {
                      "name": "13,107,36",
                      "text": "13,107,40,22",
                      "type": "13,107,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "named",
                    "optional": true,
                    "text": "Allows for creation of named reusable flyweights to prevent\nconflicts (e.g. internally Ext uses \"_global\").\n",
                    "type": "String",
                    "src": {
                      "name": "13,108,25",
                      "text": "13,108,32,60:13,109,8,48",
                      "type": "13,108,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The shared Element object (or `{@link null}` if no matching\nelement was found).\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "13,110,34,52:13,111,8,20",
                      "type": "13,110,17"
                    }
                  }
                ],
                "src": {
                  "name": "13,92,16",
                  "text": "13,93,8,753"
                }
              },
              {
                "$type": "method",
                "name": "get",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "src": {
                      "name": "14,5461,0"
                    }
                  }
                ],
                "src": {
                  "name": "14,5459,20"
                }
              },
              {
                "$type": "method",
                "name": "getBody",
                "text": "Returns the current document body as an {@link Ext.dom.Element}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The document body.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "14,5502,38,19",
                      "type": "14,5502,21"
                    }
                  }
                ],
                "src": {
                  "name": "14,5504,0",
                  "text": "14,5501,12,65"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.ClassManager#getClass",
                "name": "getClass",
                "src": {
                  "inheritdoc": "7,1898,12",
                  "name": "7,1900,20"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.ClassManager#getName",
                "name": "getClassName",
                "src": {
                  "inheritdoc": "7,1868,12",
                  "name": "7,1870,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCompatVersion",
                "since": "5.0.0",
                "text": "Get the compatibility level (a version number) for the given package name. If\nnone has been registered with `Ext.setCompatVersion` then `Ext.getVersion` is\nused to get the current version.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "packageName",
                    "text": "The package name, e.g. 'core', 'touch', 'ext'.\n",
                    "type": "String",
                    "src": {
                      "name": "0,561,28",
                      "text": "0,561,40,47",
                      "type": "0,561,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,563,12",
                  "name": "0,565,0",
                  "since": "0,562,19",
                  "text": "0,557,12,190"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getDetachedBody",
                "text": "Returns an HTML div element into which {@link Ext.container.Container#method!remove Ext.container.Container#method-remove} components\nare placed so that their DOM elements are not garbage collected as detached Dom trees.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "6,3520,21"
                    }
                  }
                ],
                "src": {
                  "access": "6,3517,12",
                  "name": "6,3523,0",
                  "text": "6,3518,12,191"
                }
              },
              {
                "$type": "method",
                "name": "getDoc",
                "text": "Returns the current HTML document object as an {@link Ext.dom.Element}.\nTypically used for attaching event listeners to the document.  Note: since\nthe document object is not an HTMLElement many of the Ext.dom.Element methods\nare not applicable and may throw errors if called on the returned\nElement instance.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The document.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "14,5536,38,14",
                      "type": "14,5536,21"
                    }
                  }
                ],
                "src": {
                  "name": "14,5538,0",
                  "text": "14,5531,12,309"
                }
              },
              {
                "$type": "method",
                "name": "getDom",
                "text": "Return the dom node for the passed String (id), dom node, or Ext.Element.\nHere are some examples:\n\n    // gets dom node based on id\n    var elDom = Ext.getDom('elId');\n\n    // gets dom node based on the dom node\n    var elDom1 = Ext.getDom(elDom);\n\n    // If we don't know if we are working with an\n    // Ext.Element or a dom node use Ext.getDom\n    function(el){\n        var dom = Ext.getDom(el);\n        // do something with the dom node\n    }\n\n__Note:__ the dom node to be found actually needs to exist (be rendered, etc)\nwhen this method is called to be successful.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "14,5487,56",
                      "type": "14,5487,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "HTMLElement",
                    "src": {
                      "type": "14,5488,21"
                    }
                  }
                ],
                "src": {
                  "name": "14,5467,20",
                  "text": "14,5468,12,572"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getElementById",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "src": {
                      "name": "1,1054,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,1052,12",
                  "name": "1,1054,0"
                }
              },
              {
                "$type": "method",
                "name": "getHead",
                "text": "Returns the current document head as an {@link Ext.dom.Element}.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The document head.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "14,5519,38,19",
                      "type": "14,5519,21"
                    }
                  }
                ],
                "src": {
                  "name": "14,5521,0",
                  "text": "14,5518,12,65"
                }
              },
              {
                "$type": "method",
                "name": "getNamespace",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "type": "String",
                    "src": {
                      "name": "15,101,24",
                      "type": "15,101,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Namespace prefix if it's known, otherwise undefined\n",
                    "type": "String",
                    "src": {
                      "text": "15,103,25,52",
                      "type": "15,103,17"
                    }
                  }
                ],
                "src": {
                  "name": "15,99,16"
                }
              },
              {
                "$type": "method",
                "name": "getScrollbarSize",
                "text": "Returns the size of the browser scrollbars. This can differ depending on\noperating system settings, such as the theme or font size.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "force",
                    "optional": true,
                    "text": "true to force a recalculation of the value.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "9,505,26",
                      "text": "9,505,33,44",
                      "type": "9,505,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object containing scrollbar sizes.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "text": "The width of the vertical scrollbar.\n",
                        "type": "Number",
                        "src": {
                          "name": "9,507,32",
                          "text": "9,507,38,37",
                          "type": "9,507,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "text": "The height of the horizontal scrollbar.\n",
                        "type": "Number",
                        "src": {
                          "name": "9,508,32",
                          "text": "9,508,39,40",
                          "type": "9,508,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "9,506,25,38",
                      "type": "9,506,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,501,16",
                  "text": "9,503,8,132"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.StoreManager#lookup",
                "name": "getStore",
                "text": "Shortcut to {@link Ext.data.StoreManager#method!lookup Ext.data.StoreManager#lookup}.\n",
                "src": {
                  "inheritdoc": "16,163,8",
                  "name": "16,162,16",
                  "text": "16,160,8,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getUniqueGlobalNamespace",
                "text": "Generate a unique reference of Ext in the global scope, useful for sandboxing\n",
                "src": {
                  "access": "1,927,12",
                  "name": "1,930,0",
                  "text": "1,928,12,78"
                }
              },
              {
                "$type": "method",
                "name": "getVersion",
                "text": "Get the version number of the supplied package name; will return the version of\nthe framework.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "packageName",
                    "optional": true,
                    "text": "The package name, e.g., 'core', 'touch', 'ext'.\n",
                    "type": "String",
                    "src": {
                      "name": "0,609,29",
                      "text": "0,609,42,48",
                      "type": "0,609,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The version.\n",
                    "type": "Ext.Version",
                    "src": {
                      "text": "0,610,34,13",
                      "type": "0,610,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,612,0",
                  "text": "0,606,12,96"
                }
              },
              {
                "$type": "method",
                "name": "getWin",
                "text": "Returns the current window object as an {@link Ext.dom.Element}.\nTypically used for attaching event listeners to the window.  Note: since\nthe window object is not an HTMLElement many of the Ext.dom.Element methods\nare not applicable and may throw errors if called on the returned\nElement instance.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The window.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "14,5553,38,12",
                      "type": "14,5553,21"
                    }
                  }
                ],
                "src": {
                  "name": "14,5555,0",
                  "text": "14,5548,12,298"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "10,100,20",
                      "text": "10,100,25,34",
                      "type": "10,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "10,101,22,57:10,102,4,15",
                      "type": "10,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "10,53,12",
                  "text": "10,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "id",
                "text": "Generates unique ids. If the object/element is passes and it already has an `{@link #method!id id}`, it is unchanged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o",
                    "optional": true,
                    "text": "The object to generate an id for.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,410,28",
                      "text": "1,410,31,34",
                      "type": "1,410,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "(optional) The `{@link #method!id id}` prefix.\n",
                    "type": "String",
                    "value": "ext-gen",
                    "src": {
                      "name": "1,411,28",
                      "text": "1,411,44,28",
                      "type": "1,411,19",
                      "value": "1,411,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The generated `{@link #method!id id}`.\n",
                    "type": "String",
                    "src": {
                      "text": "1,412,28,20",
                      "type": "1,412,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,414,0",
                  "text": "1,409,11,99"
                }
              },
              {
                "$type": "method",
                "name": "isArray",
                "text": "Returns `true` if the passed value is a JavaScript Array, `false` otherwise.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The target to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,646,28",
                      "text": "1,646,35,20",
                      "type": "1,646,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,647,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,650,0",
                  "text": "1,644,12,78"
                }
              },
              {
                "$type": "method",
                "name": "isBoolean",
                "text": "Returns `true` if the passed value is a boolean.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,755,28",
                      "text": "1,755,34,19",
                      "type": "1,755,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,756,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,758,0",
                  "text": "1,753,12,50"
                }
              },
              {
                "$type": "method",
                "name": "isDate",
                "text": "Returns `true` if the passed value is a JavaScript Date object, `false` otherwise.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,656,28",
                      "text": "1,656,35,20",
                      "type": "1,656,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,657,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,659,0",
                  "text": "1,655,12,83"
                }
              },
              {
                "$type": "method",
                "name": "isDefined",
                "text": "Returns `true` if the passed value is defined.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,782,28",
                      "text": "1,782,34,19",
                      "type": "1,782,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,783,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,785,0",
                  "text": "1,781,12,47"
                }
              },
              {
                "$type": "method",
                "name": "isElement",
                "text": "Returns `true` if the passed value is an HTMLElement\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,764,28",
                      "text": "1,764,34,19",
                      "type": "1,764,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,765,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,767,0",
                  "text": "1,763,12,53"
                }
              },
              {
                "$type": "method",
                "name": "isEmpty",
                "text": "Returns true if the passed value is empty, false otherwise. The value is deemed to be empty if it is either:\n\n- `{@link null}`\n- `{@link undefined}`\n- a zero-length array\n- a zero-length string (Unless the `allowEmptyString` parameter is set to `true`)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,635,28",
                      "text": "1,635,34,19",
                      "type": "1,635,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "allowEmptyString",
                    "optional": true,
                    "text": "`true` to allow empty strings.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,636,30",
                      "text": "1,636,54,31",
                      "type": "1,636,20",
                      "value": "1,636,47"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,637,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,639,0",
                  "text": "1,628,12,238"
                }
              },
              {
                "$type": "method",
                "name": "isFunction",
                "text": "Returns `true` if the passed value is a JavaScript Function, `false` otherwise.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,712,28",
                      "text": "1,712,34,19",
                      "type": "1,712,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,713,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,716,0",
                  "text": "1,711,12,80"
                }
              },
              {
                "$type": "method",
                "name": "isIterable",
                "text": "Returns `true` if the passed value is iterable, that is, if elements of it are addressable using array\nnotation with numeric indices, `false` otherwise.\n\nArrays and function `arguments` objects are iterable. Also HTML collections such as `{@link NodeList}` and `HTMLCollection'\nare iterable.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test\n",
                    "type": "Object",
                    "src": {
                      "name": "1,796,28",
                      "text": "1,796,34,18",
                      "type": "1,796,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,797,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,799,0",
                  "text": "1,790,12,285"
                }
              },
              {
                "$type": "method",
                "name": "isMSDate",
                "text": "Returns 'true' if the passed value is a String that matches the MS Date JSON\nencoding format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The string to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,666,28",
                      "text": "1,666,34,20",
                      "type": "1,666,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,667,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,669,0",
                  "text": "1,664,12,94"
                }
              },
              {
                "$type": "method",
                "name": "isNumber",
                "text": "Returns `true` if the passed value is a number. Returns `false` for non-finite numbers.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,727,28",
                      "text": "1,727,34,19",
                      "type": "1,727,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,728,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,730,0",
                  "text": "1,726,12,88"
                }
              },
              {
                "$type": "method",
                "name": "isNumeric",
                "text": "Validates that a value is numeric.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Examples: 1, '1', '2.34'\n",
                    "type": "Object",
                    "src": {
                      "name": "1,736,28",
                      "text": "1,736,34,25",
                      "type": "1,736,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if numeric, false otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,737,30,33",
                      "type": "1,737,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,739,0",
                  "text": "1,735,12,35"
                }
              },
              {
                "$type": "method",
                "name": "isObject",
                "text": "Returns `true` if the passed value is a JavaScript Object, `false` otherwise.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,678,28",
                      "text": "1,678,34,19",
                      "type": "1,678,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,679,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,682,0",
                  "text": "1,677,12,78"
                }
              },
              {
                "$type": "method",
                "name": "isPrimitive",
                "text": "Returns `true` if the passed value is a JavaScript 'primitive', a string, number\nor boolean.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,701,28",
                      "text": "1,701,34,19",
                      "type": "1,701,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,702,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,704,0",
                  "text": "1,699,12,93"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "10,148,20",
                      "text": "10,148,30,71:10,149,4,18",
                      "type": "10,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "10,150,20",
                      "text": "10,150,27,50",
                      "type": "10,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "10,151,22,56",
                      "type": "10,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "10,106,12",
                  "text": "10,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isSimpleObject",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "src": {
                      "name": "1,694,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,692,12",
                  "name": "1,694,0"
                }
              },
              {
                "$type": "method",
                "name": "isString",
                "text": "Returns `true `if the passed value is a string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,745,28",
                      "text": "1,745,34,19",
                      "type": "1,745,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,746,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,748,0",
                  "text": "1,744,12,48"
                }
              },
              {
                "$type": "method",
                "name": "isTextNode",
                "text": "Returns `true` if the passed value is a TextNode\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,773,28",
                      "text": "1,773,34,19",
                      "type": "1,773,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,774,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,776,0",
                  "text": "1,772,12,49"
                }
              },
              {
                "$type": "method",
                "name": "iterate",
                "text": "Iterates either an array or an object. This method delegates to\n{@link Ext.Array#method!each Ext.Array#each} if the given value is iterable, and {@link Ext.Object#method!each Ext.Object#each} otherwise.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "The object or array to be iterated.\n",
                    "type": "Object/Array",
                    "src": {
                      "name": "9,399,30",
                      "text": "9,399,37,36",
                      "type": "9,399,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called for each iteration. See and {@link Ext.Array#method!each Ext.Array#each} and\n{@link Ext.Object#method!each Ext.Object#each} for detailed lists of arguments passed to this function depending on the given object\ntype that is being iterated.\n",
                    "type": "Function",
                    "src": {
                      "name": "9,400,26",
                      "text": "9,400,29,96:9,401,8,155",
                      "type": "9,400,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the specified function is executed.\nDefaults to the object being iterated itself.\n",
                    "type": "Object",
                    "src": {
                      "name": "9,403,25",
                      "text": "9,403,32,74:9,404,8,46",
                      "type": "9,403,16"
                    }
                  }
                ],
                "src": {
                  "name": "9,394,16",
                  "text": "9,396,8,190"
                }
              },
              {
                "$type": "method",
                "name": "log",
                "text": "Logs a message. If a console is present it will be used. On Opera, the method\n\"opera.postError\" is called. In other cases, the message is logged to an array\n\"Ext.log.out\". An attached debugger can watch this array and view the log. The\nlog buffer is limited to a maximum of \"Ext.log.max\" entries (defaults to 250).\n\nIf additional parameters are passed, they are joined and appended to the message.\nA technique for tracing entry and exit of a function is this:\n\n    function foo () {\n        Ext.log({ indent: 1 }, '>> foo');\n\n        // log statements in here or methods called from here will be indented\n        // by one step\n\n        Ext.log({ outdent: 1 }, '<< foo');\n    }\n\nThis method does nothing in a release build.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "The message to log or an options object with any\nof the following properties:\n\n - `msg`: The message to log (required).\n - `level`: One of: \"error\", \"warn\", \"info\" or \"log\" (the default is \"log\").\n - `dump`: An object to dump to the log as part of the message.\n - `stack`: True to include a stack trace in the log.\n - `indent`: Cause subsequent log statements to be indented one step.\n - `outdent`: Cause this and following statements to be one step less indented.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "9,730,32",
                      "text": "9,730,41,49:9,731,8,417",
                      "type": "9,730,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "message",
                    "optional": true,
                    "text": "The message to log (required unless specified in\noptions object).\n",
                    "type": "String...",
                    "src": {
                      "name": "9,740,28",
                      "text": "9,740,37,49:9,741,8,17",
                      "type": "9,740,16"
                    }
                  }
                ],
                "src": {
                  "name": "9,709,16",
                  "text": "9,711,8,725"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "makeIdSelector",
                "text": "Converts an id (`'foo'`) into an id selector (`'#foo'`).  This method is used\ninternally by the framework whenever an id needs to be converted into a selector\nand is provided as a hook for those that need to escape IDs selectors since,\nas of Ext 5.0, the framework no longer escapes IDs by default.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "type": "String",
                    "src": {
                      "name": "1,396,28",
                      "type": "1,396,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "1,397,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,395,12",
                  "name": "1,399,0",
                  "text": "1,391,12,299"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.Object#merge",
                "name": "merge",
                "text": "A convenient alias method for {@link Ext.Object#method!merge Ext.Object#merge}.\n",
                "src": {
                  "inheritdoc": "17,806,4",
                  "name": "17,805,12",
                  "text": "17,802,4,57"
                }
              },
              {
                "$type": "method",
                "name": "namespace",
                "text": "Creates namespaces to be used for scoping variables and classes so that they are not global.\nSpecifying the last node of a namespace implicitly creates all other nodes. Usage:\n\n    Ext.namespace('Company', 'Company.data');\n\n    // equivalent and preferable to the above syntax\n    Ext.ns('Company.data');\n\n    Company.Widget = function() { ... };\n\n    Company.data.CustomStore = function(config) { ... };\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "namespaces",
                    "type": "String...",
                    "src": {
                      "name": "7,1917,31",
                      "type": "7,1917,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The (last) namespace object created.\n",
                    "type": "Object",
                    "src": {
                      "text": "7,1918,29,37",
                      "type": "7,1918,21"
                    }
                  }
                ],
                "src": {
                  "name": "7,1920,20",
                  "text": "7,1905,12,406"
                }
              },
              {
                "$type": "method",
                "name": "now",
                "text": "Returns the current timestamp.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Milliseconds since UNIX epoch.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,69,25,31",
                      "type": "1,69,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,70,16",
                  "text": "1,68,8,31"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext#namespace",
                "name": "ns",
                "text": "Convenient alias for {@link Ext#method!namespace Ext#namespace}.\n",
                "src": {
                  "inheritdoc": "7,1981,8",
                  "name": "7,1983,16",
                  "text": "7,1980,8,58"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Please use {@link Ext.Number#from} instead.\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Number#from",
                "name": "num",
                "src": {
                  "deprecatedMessage": "18,314,8",
                  "deprecatedVersion": "18,314,8",
                  "inheritdoc": "18,317,8",
                  "name": "18,316,16"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "text": "Shorthand for {@link Ext.GlobalEvents#method!addListener Ext.GlobalEvents#addListener}.\n",
                "src": {
                  "inheritdoc": "2,191,8",
                  "name": "2,189,16",
                  "text": "2,190,8,52"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onDocumentReady",
                "text": "Adds a listener to be notified when the document is ready (before onload and before\nimages are loaded).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method to call.\n",
                    "type": "Function",
                    "src": {
                      "name": "19,636,26",
                      "text": "19,636,29,20",
                      "type": "19,636,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function\nexecutes. Defaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "19,637,25",
                      "text": "19,637,32,59:19,638,8,42",
                      "type": "19,637,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object with extra options.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "delay",
                        "optional": true,
                        "text": "A number of milliseconds to delay.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "19,640,33",
                          "text": "19,640,42,35",
                          "type": "19,640,16",
                          "value": "19,640,39"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "Relative priority of this callback. A larger\nnumber will result in the callback being sorted before the others.  Priorities\n1000 or greater and -1000 or lesser are reserved for internal framework use only.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "19,641,33",
                          "text": "19,641,45,45:19,642,8,161",
                          "type": "19,641,16",
                          "value": "19,641,42"
                        }
                      }
                    ],
                    "src": {
                      "name": "19,639,25",
                      "text": "19,639,34,30",
                      "type": "19,639,16"
                    }
                  }
                ],
                "src": {
                  "access": "19,644,8",
                  "name": "19,631,16",
                  "text": "19,633,8,105"
                }
              },
              {
                "$type": "method",
                "name": "onReady",
                "text": "Adds a listener to be notified when the document is ready (before onload and before\nimages are loaded).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method to call.\n",
                    "type": "Function",
                    "src": {
                      "name": "19,664,26",
                      "text": "19,664,29,20",
                      "type": "19,664,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function\nexecutes. Defaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "19,665,25",
                      "text": "19,665,32,59:19,666,8,42",
                      "type": "19,665,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object with extra options.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "delay",
                        "optional": true,
                        "text": "A number of milliseconds to delay.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "19,668,33",
                          "text": "19,668,42,35",
                          "type": "19,668,16",
                          "value": "19,668,39"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "Relative priority of this callback. A larger\nnumber will result in the callback being sorted before the others.  Priorities\n1000 or greater and -1000 or lesser are reserved for internal framework use only.\n",
                        "type": "Number",
                        "value": "0",
                        "src": {
                          "name": "19,669,33",
                          "text": "19,669,45,45:19,670,8,161",
                          "type": "19,669,16",
                          "value": "19,669,42"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "dom",
                        "optional": true,
                        "text": "Pass `true` to only wait for DOM ready, `false`\nmeans full Framework and DOM readiness.\nnumbers are reserved.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "19,672,34",
                          "text": "19,672,45,48:19,673,8,62",
                          "type": "19,672,16",
                          "value": "19,672,38"
                        }
                      }
                    ],
                    "src": {
                      "name": "19,667,25",
                      "text": "19,667,34,30",
                      "type": "19,667,16"
                    }
                  }
                ],
                "src": {
                  "name": "19,659,16",
                  "text": "19,661,8,105"
                }
              },
              {
                "$type": "method",
                "name": "override",
                "text": "Overrides members of the specified `target` with the given values.\n\nIf the `target` is a class declared using {@link Ext#method!define Ext#define}, the\n`{@link #method!override override}` method of that class is called (see {@link Ext.Base#static-method!override Ext.Base#override}) given\nthe `overrides`.\n\nIf the `target` is a function, it is assumed to be a constructor and the contents\nof `overrides` are applied to its `{@link #property!prototype prototype}` using {@link Ext#apply Ext.apply}.\n\nIf the `target` is an instance of a class declared using {@link Ext#method!define Ext#define},\nthe `overrides` are applied to only that instance. In this case, methods are\nspecially processed to allow them to use {@link Ext.Base#callParent}.\n\n     var panel = new Ext.Panel({ ... });\n\n     Ext.override(panel, {\n         initComponent: function () {\n             // extra processing...\n\n             this.callParent();\n         }\n     });\n\nIf the `target` is none of these, the `overrides` are applied to the `target`\nusing {@link Ext#apply Ext.apply}.\n\nPlease refer to {@link Ext#method!define Ext#define} and {@link Ext.Base#static-method!override Ext.Base#override} for\nfurther details.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The target to override.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,584,28",
                      "text": "1,584,35,24",
                      "type": "1,584,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "overrides",
                    "text": "The properties to add or replace on `target`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,585,28",
                      "text": "1,585,38,46",
                      "type": "1,585,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,586,20",
                  "text": "1,555,12,1052"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "10,220,20",
                      "text": "10,220,25,34",
                      "type": "10,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "10,221,22,57:10,222,4,22",
                      "type": "10,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "10,155,12",
                  "text": "10,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "query",
                "src": {
                  "name": "14,5452,16"
                }
              },
              {
                "$type": "method",
                "name": "raise",
                "text": "Raise an error that can include additional data and supports automatic console logging\nif available. You can pass a string error message or an object with the `msg` attribute\nwhich will be used as the error message. The object can contain any other name-value\nattributes (or objects) to be logged along with the error.\n\nNote that after displaying the error message a JavaScript error will ultimately be\nthrown so that execution will halt.\n\nExample usage:\n\n    Ext.raise('A simple string error message');\n\n    // or...\n\n    Ext.define('Ext.Foo', {\n        doSomething: function(option){\n            if (someCondition === false) {\n                Ext.raise({\n                    msg: 'You cannot do that!',\n                    option: option,   // whatever was passed into the method\n                    code: 100 // other arbitrary info\n                });\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "err",
                    "text": "The error message string, or an object containing the\nattribute \"msg\" that will be used as the error message. Any other data included in the\nobject will also be logged to the browser console, if available.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "20,252,27",
                      "text": "20,252,31,54:20,253,4,152",
                      "type": "20,252,12"
                    }
                  }
                ],
                "src": {
                  "name": "20,255,12",
                  "text": "20,226,4,889"
                }
              },
              {
                "$type": "method",
                "name": "regStore",
                "text": "Creates a new store for the given id and config, then registers it with the {@link Ext.data.StoreManager}.\nSample usage:\n\n    Ext.regStore('AllUsers', {\n        model: 'User'\n    });\n\n    // the store can now easily be used throughout the application\n    new Ext.List({\n        store: 'AllUsers',\n        ... other config\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id to set on the new store\n",
                    "type": "String",
                    "src": {
                      "name": "16,132,24",
                      "text": "16,132,27,31",
                      "type": "16,132,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The store config\n",
                    "type": "Object",
                    "src": {
                      "name": "16,133,24",
                      "text": "16,133,31,17",
                      "type": "16,133,16"
                    }
                  }
                ],
                "src": {
                  "name": "16,135,16",
                  "text": "16,119,8,345"
                }
              },
              {
                "$type": "method",
                "name": "removeNode",
                "text": "Removes an HTMLElement from the document.  If the HTMLElement was previously\ncached by a call to Ext.get(), removeNode will call the {@link Ext.dom.Element#method!destroy Ext.Element#destroy} method of the {@link Ext.dom.Element} instance, which removes all DOM\nevent listeners, and deletes the cache reference.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node to remove\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "14,5569,33",
                      "text": "14,5569,38,19",
                      "type": "14,5569,20"
                    }
                  }
                ],
                "src": {
                  "name": "14,5572,0",
                  "text": "14,5565,12,289"
                }
              },
              {
                "$type": "method",
                "name": "require",
                "text": "Loads all classes by the given names and all their direct dependencies; optionally\nexecutes the given callback function when finishes, within the optional scope.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "expressions",
                    "text": "The class, classes or wildcards to load.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "12,906,33",
                      "text": "12,906,45,41",
                      "type": "12,906,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The callback function.\n",
                    "type": "Function",
                    "src": {
                      "name": "12,907,27",
                      "text": "12,907,31,23",
                      "type": "12,907,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The execution scope (`this`) of the callback function.\n",
                    "type": "Object",
                    "src": {
                      "name": "12,908,25",
                      "text": "12,908,32,55",
                      "type": "12,908,16"
                    }
                  }
                ],
                "src": {
                  "name": "12,910,16",
                  "text": "12,903,8,163"
                }
              },
              {
                "$type": "method",
                "name": "resolveResource",
                "since": "6.0.1",
                "text": "Resolves a resource URL that may contain a resource pool identifier token at the\nfront. The tokens are formatted as HTML tags \"&lt;poolName@packageName&gt;\" followed\nby a normal relative path. This token is only processed if present at the first\ncharacter of the given string.\n\nThese tokens are parsed and the pieces are then passed to the\n{@link Ext#getResourcePath} method.\n\nFor example:\n\n     [{\n         xtype: 'image',\n         src: '<shared>images/foo.png'\n     },{\n         xtype: 'image',\n         src: '<@package>images/foo.png'\n     },{\n         xtype: 'image',\n         src: '<shared@package>images/foo.png'\n     }]\n\nIn the above example, \"shared\" is the name of a Sencha Cmd resource pool and\n\"package\" is the name of a Sencha Cmd package.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "url",
                    "text": "The URL that may contain a resource pool token at the front.\n",
                    "type": "String",
                    "src": {
                      "name": "9,450,24",
                      "text": "9,450,28,61",
                      "type": "9,450,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "9,451,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,454,0",
                  "since": "9,452,15",
                  "text": "9,426,8,752"
                }
              },
              {
                "$type": "method",
                "name": "returnId",
                "text": "A reusable function which returns the value of `getId()` called upon a single passed parameter.\nUseful when creating a {@link Ext.util.MixedCollection} of objects keyed by an identifier returned from a `getId` method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o",
                    "src": {
                      "name": "1,432,0"
                    }
                  }
                ],
                "src": {
                  "name": "1,432,0",
                  "text": "1,429,12,218"
                }
              },
              {
                "$type": "method",
                "name": "returnTrue",
                "text": "A reusable function which returns `true`.\n",
                "src": {
                  "name": "1,439,0",
                  "text": "1,437,12,42"
                }
              },
              {
                "$type": "method",
                "name": "select",
                "src": {
                  "name": "14,5446,16"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setCompatVersion",
                "since": "5.0.0",
                "text": "Set the compatibility level (a version number) for the given package name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "packageName",
                    "text": "The package name, e.g. 'core', 'touch', 'ext'.\n",
                    "type": "String",
                    "src": {
                      "name": "0,581,28",
                      "text": "0,581,40,47",
                      "type": "0,581,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "version",
                    "text": "The version, e.g. '4.2'.\n",
                    "type": "String/Ext.Version",
                    "src": {
                      "name": "0,582,40",
                      "text": "0,582,48,25",
                      "type": "0,582,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,584,12",
                  "name": "0,586,0",
                  "since": "0,583,19",
                  "text": "0,579,12,76"
                }
              },
              {
                "$type": "method",
                "name": "setVersion",
                "text": "Set version number for the given package name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "packageName",
                    "text": "The package name, e.g. 'core', 'touch', 'ext'.\n",
                    "type": "String",
                    "src": {
                      "name": "0,593,28",
                      "text": "0,593,40,47",
                      "type": "0,593,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "version",
                    "text": "The version, e.g. '1.2.3alpha', '2.4.0-dev'.\n",
                    "type": "String/Ext.Version",
                    "src": {
                      "name": "0,594,40",
                      "text": "0,594,48,45",
                      "type": "0,594,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext",
                    "src": {
                      "type": "0,595,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,597,0",
                  "text": "0,591,12,48"
                }
              },
              {
                "$type": "method",
                "name": "syncRequire",
                "text": "Synchronously loads all classes by the given names and all their direct dependencies; optionally\nexecutes the given callback function when finishes, within the optional scope.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "expressions",
                    "text": "The class, classes or wildcards to load.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "12,918,33",
                      "text": "12,918,45,41",
                      "type": "12,918,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The callback function.\n",
                    "type": "Function",
                    "src": {
                      "name": "12,919,27",
                      "text": "12,919,31,23",
                      "type": "12,919,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The execution scope (`this`) of the callback function.\n",
                    "type": "Object",
                    "src": {
                      "name": "12,920,25",
                      "text": "12,920,32,55",
                      "type": "12,920,16"
                    }
                  }
                ],
                "src": {
                  "name": "12,922,16",
                  "text": "12,915,8,177"
                }
              },
              {
                "$type": "method",
                "name": "ticks",
                "since": "6.0.1",
                "text": "Returns the current high-resolution timestamp.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Milliseconds ellapsed since arbitrary epoch.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,79,25,45",
                      "type": "1,79,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,80,16",
                  "since": "1,82,15",
                  "text": "1,78,8,47"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "10,235,21,32",
                      "type": "10,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "10,226,12",
                  "text": "10,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "10,297,21,32",
                      "type": "10,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "10,239,12",
                  "text": "10,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "typeOf",
                "text": "Returns the type of the given variable in string format. List of possible values are:\n\n- `{@link undefined}`: If the given value is `{@link undefined}`\n- `{@link null}`: If the given value is `{@link null}`\n- `string`: If the given value is a string\n- `number`: If the given value is a number\n- `boolean`: If the given value is a boolean value\n- `date`: If the given value is a `{@link Date}` object\n- `function`: If the given value is a function reference\n- `object`: If the given value is an object\n- `array`: If the given value is an array\n- `regexp`: If the given value is a regular expression\n- `element`: If the given value is a DOM Element\n- `textnode`: If the given value is a DOM text node and contains something other than whitespace\n- `whitespace`: If the given value is a DOM text node and contains only whitespace\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "9,560,24",
                      "type": "9,560,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "9,561,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,542,16",
                  "text": "9,544,8,788"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Object#fromQueryString} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Object#fromQueryString",
                "name": "urlDecode",
                "text": "Alias for {@link Ext.Object#method!fromQueryString Ext.Object#fromQueryString}.\n",
                "src": {
                  "deprecatedMessage": "9,494,8",
                  "deprecatedVersion": "9,494,8",
                  "inheritdoc": "9,493,8",
                  "name": "9,492,16",
                  "text": "9,489,8,47"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link Ext.Object#toQueryString} instead\n",
                "deprecatedVersion": "4.0.0",
                "inheritdoc": "Ext.Object#toQueryString",
                "name": "urlEncode",
                "src": {
                  "deprecatedMessage": "9,473,8",
                  "deprecatedVersion": "9,473,8",
                  "inheritdoc": "9,472,8",
                  "name": "9,471,16"
                }
              },
              {
                "$type": "method",
                "name": "valueFrom",
                "text": "Returns the given value itself if it's not empty, as described in {@link Ext#method!isEmpty Ext#isEmpty}; returns the default\nvalue (second argument) otherwise.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,618,28",
                      "text": "1,618,34,19",
                      "type": "1,618,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultValue",
                    "text": "The value to return if the original value is empty.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,619,28",
                      "text": "1,619,41,52",
                      "type": "1,619,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "allowBlank",
                    "optional": true,
                    "text": "`true` to allow zero length strings to qualify as non-empty.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,620,30",
                      "text": "1,620,48,61",
                      "type": "1,620,20",
                      "value": "1,620,41"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "value, if non-empty, else defaultValue.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,621,29,40",
                      "type": "1,621,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,623,0",
                  "text": "1,615,12,143"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "10,340,21,50",
                      "type": "10,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "10,301,12",
                  "text": "10,302,4,1821"
                }
              },
              {
                "$type": "method",
                "name": "widget",
                "text": "Convenient shorthand to create a widget by its xtype or a config object.\n\n     var button = Ext.widget('button'); // Equivalent to Ext.create('widget.button');\n\n     var panel = Ext.widget('panel', { // Equivalent to Ext.create('widget.panel')\n         title: 'Panel'\n     });\n\n     var grid = Ext.widget({\n         xtype: 'grid',\n         ...\n     });\n\nIf a {@link Ext.Component} instance is passed, it is simply returned.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The xtype of the widget to create.\n",
                    "type": "String",
                    "src": {
                      "name": "7,1512,29",
                      "text": "7,1512,35,35",
                      "type": "7,1512,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "The configuration object for the widget constructor.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1513,29",
                      "text": "7,1513,37,53",
                      "type": "7,1513,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The widget instance\n",
                    "type": "Object",
                    "src": {
                      "text": "7,1514,29,20",
                      "type": "7,1514,21"
                    }
                  }
                ],
                "src": {
                  "name": "7,1516,0",
                  "text": "7,1496,12,435"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "text": "An array containing extra enumerables for old browsers\n",
                "type": "String[]",
                "src": {
                  "text": "1,104,8,55",
                  "type": "1,105,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$eventNameMap",
                "text": "A map of event names which contained the lower-cased versions of any mixed\ncase event names.\n",
                "type": "Object",
                "src": {
                  "access": "1,471,12",
                  "name": "1,468,31",
                  "text": "1,469,12,93",
                  "type": "1,468,23"
                }
              },
              {
                "$type": "property",
                "name": "baseCSSPrefix",
                "optional": true,
                "text": "The base prefix to use for all `{@link Ext}` components. To configure this property, you should use the\nExt.buildSettings object before the framework is loaded:\n\n    Ext.buildSettings = {\n        baseCSSPrefix : 'abc-'\n    };\n\nor you can change it before any components are rendered:\n\n    Ext.baseCSSPrefix = Ext.buildSettings.baseCSSPrefix = 'abc-';\n\nThis will change what CSS classes components will use and you should\nthen recompile the SASS changing the `$prefix` SASS variable to match.\n",
                "type": "String",
                "value": "'x-'",
                "src": {
                  "name": "1,450,32",
                  "text": "1,451,12,484",
                  "type": "1,450,23",
                  "value": "1,450,46"
                }
              },
              {
                "$type": "property",
                "name": "BLANK_IMAGE_URL",
                "text": "URL to a 1x1 transparent gif image used by Ext to create inline icons with\nCSS background images.\n",
                "type": "String",
                "src": {
                  "name": "1,384,31",
                  "text": "1,385,12,98",
                  "type": "1,384,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "cache",
                "readonly": true,
                "since": "5.0.0",
                "text": "Stores `Fly` instances keyed by their assigned or generated name.\n",
                "type": "Object",
                "src": {
                  "access": "13,85,8",
                  "name": "13,82,27",
                  "readonly": "13,84,8",
                  "since": "13,86,15",
                  "text": "13,83,8,66",
                  "type": "13,82,19"
                }
              },
              {
                "$type": "property",
                "name": "chromeVersion",
                "readonly": true,
                "text": "The current version of Chrome (0 if the browser is not Chrome).\n",
                "type": "Number",
                "src": {
                  "name": "21,119,18",
                  "readonly": "21,121,8",
                  "text": "21,120,8,64",
                  "type": "21,122,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "compatVersions",
                "src": {
                  "access": "0,537,12",
                  "name": "0,539,0"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "10,346,14",
                  "text": "10,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "emptyFn",
                "text": "A reusable empty function.\n",
                "type": "Function",
                "src": {
                  "name": "1,242,0",
                  "text": "1,240,12,27",
                  "type": "1,239,23"
                }
              },
              {
                "$type": "property",
                "name": "emptyString",
                "text": "A zero length string which will pass a truth test. Useful for passing to methods\nwhich use a truth test to reject <i>falsy</i> values where a string value must be cleared.\n",
                "src": {
                  "name": "1,447,0",
                  "text": "1,444,12,172"
                }
              },
              {
                "$type": "property",
                "deprecatedVersion": "6.0.2",
                "name": "enableAria",
                "optional": true,
                "since": "6.0.0",
                "text": "This property is provided for backward\ncompatibility with previous versions of Ext JS. Accessibility is always enabled\nin Ext JS 6.0+.\n\nThis property is deprecated. To disable WAI-ARIA compatibility warnings,\noverride `Ext.ariaWarn` function in your application startup code:\n\n     Ext.application({\n         launch: function() {\n             Ext.ariaWarn = Ext.emptyFn;\n         }\n     });\n\nFor stricter compatibility with WAI-ARIA requirements, replace `Ext.ariaWarn`\nwith a function that will raise an error instead:\n\n     Ext.application({\n         launch: function() {\n             Ext.ariaWarn = function(target, msg) {\n                 Ext.raise({\n                     msg: msg,\n                     component: target\n                 });\n             };\n         }\n     });\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "deprecatedVersion": "1,370,12",
                  "name": "1,342,33",
                  "since": "1,369,19",
                  "text": "1,342,50,39:1,343,12,744",
                  "type": "1,342,23",
                  "value": "1,342,44"
                }
              },
              {
                "$type": "property",
                "name": "enableGarbageCollector",
                "text": "`true` to automatically uncache orphaned Ext.Elements periodically. If set to\n`false`, the application will be required to clean up orphaned Ext.Elements and\nit's listeners as to not cause memory leakage.\n",
                "src": {
                  "name": "1,207,0",
                  "text": "1,203,12,205"
                }
              },
              {
                "$type": "property",
                "name": "enableGarbageCollector",
                "text": "`true` to automatically uncache orphaned Ext.Elements periodically. If set to\n`false`, the application will be required to clean up orphaned Ext.Elements and\nit's listeners as to not cause memory leakage.\n",
                "src": {
                  "name": "6,3502,0",
                  "text": "6,3497,12,205"
                }
              },
              {
                "$type": "property",
                "name": "enableListenerCollection",
                "text": "True to automatically purge event listeners during garbageCollection.\n",
                "src": {
                  "name": "1,212,0",
                  "text": "1,210,12,70"
                }
              },
              {
                "$type": "property",
                "name": "firefoxVersion",
                "readonly": true,
                "text": "The current version of Firefox (0 if the browser is not Firefox).\n",
                "type": "Number",
                "src": {
                  "name": "21,127,18",
                  "readonly": "21,129,8",
                  "text": "21,128,8,66",
                  "type": "21,130,14"
                }
              },
              {
                "$type": "property",
                "name": "frameStartTime",
                "text": "This indicate the start timestamp of current cycle.\nIt is only reliable during dom-event-initiated cycles and\n{@link Ext.draw.Animator} initiated cycles.\n",
                "src": {
                  "name": "1,255,0",
                  "text": "1,251,12,154"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "functionFactoryCache",
                "src": {
                  "access": "1,949,12",
                  "name": "1,951,0"
                }
              },
              {
                "$type": "property",
                "name": "identityFn",
                "text": "A reusable identity function that simply returns its first argument.\n",
                "type": "Function",
                "src": {
                  "name": "1,248,0",
                  "text": "1,246,12,69",
                  "type": "1,245,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "idPrefix",
                "src": {
                  "access": "1,191,12",
                  "name": "1,193,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "idSeed",
                "src": {
                  "access": "1,186,12",
                  "name": "1,188,0"
                }
              },
              {
                "$type": "property",
                "name": "ieVersion",
                "readonly": true,
                "text": "The current version of IE (0 if the browser is not IE). This does not account\nfor the documentMode of the current page, which is factored into {@link #property!isIE8 #isIE8},\nand {@link #property!isIE9 #isIE9}. Thus this is not always true:\n\n    Ext.isIE8 == (Ext.ieVersion == 8)\n",
                "type": "Number",
                "src": {
                  "name": "21,135,18",
                  "readonly": "21,142,8",
                  "text": "21,136,8,249",
                  "type": "21,143,14"
                }
              },
              {
                "$type": "property",
                "name": "isChrome",
                "readonly": true,
                "text": "True if the detected browser is Chrome.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,148,18",
                  "readonly": "21,150,8",
                  "text": "21,149,8,40",
                  "type": "21,151,14"
                }
              },
              {
                "$type": "property",
                "name": "isDebugEnabled",
                "text": "This method returns `true` if debug is enabled for the specified class. This is\ndone by checking the `Ext.debugConfig.hooks` config for the closest match to the\ngiven `className`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The name of the class.\n",
                    "type": "String",
                    "src": {
                      "name": "1,826,28",
                      "text": "1,826,38,23",
                      "type": "1,826,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if debug is enabled for the specified class.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,827,30,52",
                      "type": "1,827,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,829,0",
                  "text": "1,823,12,180"
                }
              },
              {
                "$type": "property",
                "name": "isDomReady",
                "readonly": true,
                "text": "`true` when the document body is ready for use.\n",
                "type": "Boolean",
                "src": {
                  "name": "19,617,28",
                  "readonly": "19,620,8",
                  "text": "19,618,8,48",
                  "type": "19,617,19"
                }
              },
              {
                "$type": "property",
                "name": "isGecko",
                "readonly": true,
                "text": "True if the detected browser uses the Gecko layout engine (e.g. Mozilla, Firefox).\n",
                "type": "Boolean",
                "src": {
                  "name": "21,156,18",
                  "readonly": "21,158,8",
                  "text": "21,157,8,83",
                  "type": "21,159,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,164,18",
                  "readonly": "21,166,8",
                  "text": "21,165,8,51",
                  "type": "21,167,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE10",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 10.x.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,220,18",
                  "readonly": "21,222,8",
                  "text": "21,221,8,56",
                  "type": "21,223,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE10m",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 10.x or lower.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,228,18",
                  "readonly": "21,230,8",
                  "text": "21,229,8,65",
                  "type": "21,231,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE10p",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 10.x or higher.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,236,18",
                  "readonly": "21,238,8",
                  "text": "21,237,8,66",
                  "type": "21,239,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE11",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 11.x.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,244,18",
                  "readonly": "21,246,8",
                  "text": "21,245,8,56",
                  "type": "21,247,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE11m",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 11.x or lower.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,252,18",
                  "readonly": "21,254,8",
                  "text": "21,253,8,65",
                  "type": "21,255,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE11p",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 11.x or higher.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,260,18",
                  "readonly": "21,262,8",
                  "text": "21,261,8,66",
                  "type": "21,263,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE8",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 8.x.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,172,18",
                  "readonly": "21,174,8",
                  "text": "21,173,8,55",
                  "type": "21,175,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE8m",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 8.x or lower.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,180,18",
                  "readonly": "21,182,8",
                  "text": "21,181,8,64",
                  "type": "21,183,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE8p",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 8.x or higher.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,188,18",
                  "readonly": "21,190,8",
                  "text": "21,189,8,65",
                  "type": "21,191,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE9",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 9.x.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,196,18",
                  "readonly": "21,198,8",
                  "text": "21,197,8,55",
                  "type": "21,199,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE9m",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 9.x or lower.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,204,18",
                  "readonly": "21,206,8",
                  "text": "21,205,8,64",
                  "type": "21,207,14"
                }
              },
              {
                "$type": "property",
                "name": "isIE9p",
                "readonly": true,
                "text": "True if the detected browser is Internet Explorer 9.x or higher.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,212,18",
                  "readonly": "21,214,8",
                  "text": "21,213,8,65",
                  "type": "21,215,14"
                }
              },
              {
                "$type": "property",
                "name": "isLinux",
                "readonly": true,
                "text": "True if the detected platform is Linux.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,268,18",
                  "readonly": "21,270,8",
                  "text": "21,269,8,40",
                  "type": "21,271,14"
                }
              },
              {
                "$type": "property",
                "name": "isMac",
                "readonly": true,
                "text": "True if the detected platform is Mac OS.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,276,18",
                  "readonly": "21,278,8",
                  "text": "21,277,8,41",
                  "type": "21,279,14"
                }
              },
              {
                "$type": "property",
                "name": "isOpera",
                "readonly": true,
                "text": "True if the detected browser is Opera.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,284,18",
                  "readonly": "21,286,8",
                  "text": "21,285,8,39",
                  "type": "21,287,14"
                }
              },
              {
                "$type": "property",
                "name": "isReady",
                "readonly": true,
                "text": "`true` when `{@link #property!isDomReady isDomReady}` is true and the Framework is ready for use.\n",
                "type": "Boolean",
                "src": {
                  "name": "19,624,28",
                  "readonly": "19,627,8",
                  "text": "19,625,8,69",
                  "type": "19,624,19"
                }
              },
              {
                "$type": "property",
                "name": "isSafari",
                "readonly": true,
                "text": "True if the detected browser is Safari.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,292,18",
                  "readonly": "21,294,8",
                  "text": "21,293,8,40",
                  "type": "21,295,14"
                }
              },
              {
                "$type": "property",
                "name": "isSecure",
                "readonly": true,
                "text": "True if the page is running over SSL\n",
                "type": "Boolean",
                "src": {
                  "name": "1,196,32",
                  "readonly": "1,198,12",
                  "text": "1,197,12,37",
                  "type": "1,196,23"
                }
              },
              {
                "$type": "property",
                "name": "isWebKit",
                "readonly": true,
                "text": "True if the detected browser uses WebKit.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,300,18",
                  "readonly": "21,302,8",
                  "text": "21,301,8,42",
                  "type": "21,303,14"
                }
              },
              {
                "$type": "property",
                "name": "isWindows",
                "readonly": true,
                "text": "True if the detected platform is Windows.\n",
                "type": "Boolean",
                "src": {
                  "name": "21,308,18",
                  "readonly": "21,310,8",
                  "text": "21,309,8,42",
                  "type": "21,311,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "lastRegisteredVersion",
                "src": {
                  "access": "0,552,12",
                  "name": "0,554,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "Logger",
                "src": {
                  "access": "1,992,12",
                  "name": "1,994,0"
                }
              },
              {
                "$type": "property",
                "name": "name",
                "optional": true,
                "text": "<p>The name of the property in the global namespace (The <code>window</code> in browser environments) which refers to the current instance of Ext.</p>\n<p>This is usually <code>\"Ext\"</code>, but if a sandboxed build of ExtJS is being used, this will be an alternative name.</p>\n<p>If code is being generated for use by <code>eval</code> or to create a <code>new Function</code>, and the global instance\nof Ext must be referenced, this is the name that should be built into the code.</p>\n",
                "type": "String",
                "value": "'Ext'",
                "src": {
                  "name": "1,215,32",
                  "text": "1,216,12,486",
                  "type": "1,215,23",
                  "value": "1,215,37"
                }
              },
              {
                "$type": "property",
                "name": "operaVersion",
                "readonly": true,
                "text": "The current version of Opera (0 if the browser is not Opera).\n",
                "type": "Number",
                "src": {
                  "name": "21,316,18",
                  "readonly": "21,318,8",
                  "text": "21,317,8,62",
                  "type": "21,319,14"
                }
              },
              {
                "$type": "property",
                "name": "platformTags",
                "text": "This object contains properties that describe the current device or platform. These\nvalues can be used in `{@link Ext.Class#cfg!platformConfig Ext.Class#platformConfig}` as well as\n`{@link Ext.mixin.Responsive#cfg!responsiveConfig Ext.mixin.Responsive#responsiveConfig}` statements.\n\nThis object can be modified to include tags that are useful for the application. To\nadd custom properties, it is advisable to use a sub-object. For example:\n\n     Ext.platformTags.app = {\n         mobile: true\n     };\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "phone",
                    "type": "Boolean",
                    "src": {
                      "name": "22,931,41",
                      "type": "22,931,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "tablet",
                    "type": "Boolean",
                    "src": {
                      "name": "22,932,41",
                      "type": "22,932,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "desktop",
                    "type": "Boolean",
                    "src": {
                      "name": "22,933,41",
                      "type": "22,933,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "touch",
                    "text": "Indicates touch inputs are available.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "22,934,41",
                      "text": "22,934,47,38",
                      "type": "22,934,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "safari",
                    "type": "Boolean",
                    "src": {
                      "name": "22,935,41",
                      "type": "22,935,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "chrome",
                    "type": "Boolean",
                    "src": {
                      "name": "22,936,41",
                      "type": "22,936,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "windows",
                    "type": "Boolean",
                    "src": {
                      "name": "22,937,41",
                      "type": "22,937,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "firefox",
                    "type": "Boolean",
                    "src": {
                      "name": "22,938,41",
                      "type": "22,938,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "ios",
                    "text": "True for iPad, iPhone and iPod.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "22,939,41",
                      "text": "22,939,45,32",
                      "type": "22,939,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "android",
                    "type": "Boolean",
                    "src": {
                      "name": "22,940,41",
                      "type": "22,940,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "blackberry",
                    "type": "Boolean",
                    "src": {
                      "name": "22,941,41",
                      "type": "22,941,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "tizen",
                    "type": "Boolean",
                    "src": {
                      "name": "22,942,41",
                      "type": "22,942,19"
                    }
                  }
                ],
                "src": {
                  "name": "22,930,27",
                  "text": "22,919,8,464",
                  "type": "22,930,19"
                }
              },
              {
                "$type": "property",
                "name": "privateFn",
                "text": "A reusable empty function for use as `privates` members.\n\n     Ext.define('MyClass', {\n         nothing: Ext.emptyFn,\n\n         privates: {\n             privateNothing: Ext.privateFn\n         }\n     });\n",
                "type": "Function",
                "src": {
                  "name": "1,236,0",
                  "text": "1,225,12,204",
                  "type": "1,224,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "10,46,14",
                  "text": "10,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "rootInheritedState",
                "since": "5.0.0",
                "text": "The top level inheritedState to which all other inheritedStates are chained. If\nthere is a `Viewport` instance, this object becomes the Viewport's inheritedState.\nSee also {@link Ext.Component#method!getInherited Ext.Component#getInherited}.\n",
                "type": "Object",
                "src": {
                  "access": "23,395,8",
                  "name": "23,390,27",
                  "since": "23,397,15",
                  "text": "23,391,8,209",
                  "type": "23,390,19"
                }
              },
              {
                "$type": "property",
                "name": "safariVersion",
                "readonly": true,
                "text": "The current version of Safari (0 if the browser is not Safari).\n",
                "type": "Number",
                "src": {
                  "name": "21,324,18",
                  "readonly": "21,326,8",
                  "text": "21,325,8,64",
                  "type": "21,327,14"
                }
              },
              {
                "$type": "property",
                "name": "scopeCss",
                "text": "Set this to true before onReady to prevent any styling from being added to\nthe body element.  By default a few styles such as font-family, and color\nare added to the body element via a \"x-body\" class.  When this is set to\n`true` the \"x-body\" class is not added to the body element, but is added\nto the elements of root-level containers instead.\n",
                "type": "Boolean",
                "src": {
                  "name": "6,4008,32",
                  "text": "6,4010,12,345",
                  "type": "6,4008,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "splitAndUnescape",
                "src": {
                  "access": "1,1060,12",
                  "name": "1,1062,0"
                }
              },
              {
                "$type": "property",
                "name": "SSL_SECURE_URL",
                "text": "URL to a blank file used by Ext when in secure mode for iframe src and onReady src\nto prevent the IE insecure content warning (`'about:blank'`, except for IE\nin secure mode, which is `'javascript:\"\"'`).\n",
                "type": "String",
                "src": {
                  "name": "21,636,27",
                  "text": "21,637,8,203",
                  "type": "21,636,19"
                }
              },
              {
                "$type": "property",
                "name": "USE_NATIVE_JSON",
                "optional": true,
                "text": "Indicates whether to use native browser parsing for JSON methods.\nThis option is ignored if the browser does not support native JSON methods.\n\n**Note:** Native JSON methods will not work with objects that have functions.\nAlso, property names must be quoted, otherwise the data will not parse.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "11,2,25",
                  "text": "11,4,4,293",
                  "type": "11,2,15",
                  "value": "11,2,41"
                }
              },
              {
                "$type": "property",
                "name": "useShims",
                "text": "Set to `true` to use a {@link Ext.util.Floating#cfg!shim Ext.util.Floating#shim} on all floating Components\nand {@link Ext.LoadMask}\n",
                "type": "Boolean",
                "src": {
                  "name": "6,3509,32",
                  "text": "6,3511,12,121",
                  "type": "6,3509,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "validIdRe",
                "text": "Regular expression used for validating identifiers.\n",
                "type": "RegExp",
                "src": {
                  "access": "1,378,12",
                  "name": "1,381,0",
                  "text": "1,379,12,52",
                  "type": "1,377,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "versions",
                "text": "Object containing version information for all packages utilized by your\napplication.\n\nFor a public getter, please see `Ext.getVersion()`.\n",
                "src": {
                  "access": "0,542,12",
                  "name": "0,549,0",
                  "text": "0,544,12,138"
                }
              },
              {
                "$type": "property",
                "name": "webKitVersion",
                "readonly": true,
                "text": "The current version of WebKit (0 if the browser does not use WebKit).\n",
                "type": "Number",
                "src": {
                  "name": "21,332,18",
                  "readonly": "21,334,8",
                  "text": "21,333,8,70",
                  "type": "21,335,14"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,533,15",
          "singleton": "1,40,4",
          "text": "1,4,4,1488"
        }
      }
    ]
  },
  "version": 1
}