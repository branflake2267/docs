{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/layout/Context.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extended": "Ext.Base,Object",
        "extends": "Ext.Base",
        "name": "Ext.layout.Context",
        "requires": "Ext.perf.Monitor,Ext.util.Queue,Ext.layout.ContextItem,Ext.layout.Layout,Ext.fx.Anim,Ext.fx.Manager",
        "text": "Manages context information during a layout.\n\n# Algorithm\n\nThis class performs the following jobs:\n\n - Cache DOM reads to avoid reading the same values repeatedly.\n - Buffer DOM writes and flush them as a block to avoid read/write interleaving.\n - Track layout dependencies so each layout does not have to figure out the source of\n   its dependent values.\n - Intelligently run layouts when the values on which they depend change (a trigger).\n - Allow layouts to avoid processing when required values are unavailable (a block).\n\nWork done during layout falls into either a \"read phase\" or a \"write phase\" and it is\nessential to always be aware of the current phase. Most methods in\n{@link Ext.layout.Layout} are called during a read phase:\n{@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate},\n{@link Ext.layout.Layout#method!completeLayout Ext.layout.Layout#completeLayout} and\n{@link Ext.layout.Layout#method!finalizeLayout Ext.layout.Layout#finalizeLayout}. The exceptions to this are\n{@link Ext.layout.Layout#method!beginLayout Ext.layout.Layout#beginLayout},\n{@link Ext.layout.Layout#method!beginLayoutCycle Ext.layout.Layout#beginLayoutCycle} and\n{@link Ext.layout.Layout#method!finishedLayout Ext.layout.Layout#finishedLayout} which are called during\na write phase. While {@link Ext.layout.Layout#method!finishedLayout Ext.layout.Layout#finishedLayout} is called\na write phase, it is really intended to be a catch-all for post-processing after a\nlayout run.\n\nIn a read phase, it is OK to read the DOM but this should be done using the appropriate\n{@link Ext.layout.ContextItem} where possible since that provides a cache\nto avoid redundant reads. No writes should be made to the DOM in a read phase! Instead,\nthe values should be written to the proper ContextItem for later write-back.\n\nThe rules flip-flop in a write phase. The only difference is that ContextItem methods\nlike {@link Ext.layout.ContextItem#method!getStyle Ext.layout.ContextItem#getStyle} will still read the DOM unless the\nvalue was previously read. This detail is unknowable from the outside of ContextItem, so\nread calls to ContextItem should also be avoided in a write phase.\n\nCalculating interdependent layouts requires a certain amount of iteration. In a given\ncycle, some layouts will contribute results that allow other layouts to proceed. The\ngeneral flow then is to gather all of the layouts (both component and container) in a\ncomponent tree and queue them all for processing. The initial queue order is bottom-up\nand component layout first, then container layout (if applicable) for each component.\n\nThis initial step also calls the beginLayout method on all layouts to clear any values\nfrom the DOM that might interfere with calculations and measurements. In other words,\nthis is a \"write phase\" and reads from the DOM should be strictly avoided.\n\nNext the layout enters into its iterations or \"cycles\". Each cycle consists of calling\nthe {@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate} method on all layouts in the\n{@link #property!layoutQueue #layoutQueue}. These calls are part of a \"read phase\" and writes to the DOM should\nbe strictly avoided.\n\n# Considerations\n\n**RULE 1**: Respect the read/write cycles. Always use the {@link Ext.layout.ContextItem#method!getProp Ext.layout.ContextItem#getProp}\nor {@link Ext.layout.ContextItem#method!getDomProp Ext.layout.ContextItem#getDomProp} methods to get calculated values;\nonly use the {@link Ext.layout.ContextItem#method!getStyle Ext.layout.ContextItem#getStyle} method to read styles; use\n{@link Ext.layout.ContextItem#method!setProp Ext.layout.ContextItem#setProp} to set DOM values. Some reads will, of\ncourse, still go directly to the DOM, but if there is a method in\n{@link Ext.layout.ContextItem} to do a certain job, it should be used instead\nof a lower-level equivalent.\n\nThe basic logic flow in {@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate} consists of gathering\nvalues by calling {@link Ext.layout.ContextItem#method!getProp Ext.layout.ContextItem#getProp} or\n{@link Ext.layout.ContextItem#method!getDomProp Ext.layout.ContextItem#getDomProp}, calculating results and publishing\nthem by calling {@link Ext.layout.ContextItem#method!setProp Ext.layout.ContextItem#setProp}. It is important to realize\nthat {@link Ext.layout.ContextItem#method!getProp Ext.layout.ContextItem#getProp} will return `{@link undefined}` if the value\nis not yet known. But the act of calling the method is enough to track the fact that the\ncalling layout depends (in some way) on this value. In other words, the calling layout is\n\"triggered\" by the properties it requests.\n\n**RULE 2**: Avoid calling {@link Ext.layout.ContextItem#method!getProp Ext.layout.ContextItem#getProp} unless the value\nis needed. Gratuitous calls cause inefficiency because the layout will appear to depend on\nvalues that it never actually uses. This applies equally to\n{@link Ext.layout.ContextItem#method!getDomProp Ext.layout.ContextItem#getDomProp} and the test-only methods\n{@link Ext.layout.ContextItem#method!hasProp Ext.layout.ContextItem#hasProp} and {@link Ext.layout.ContextItem#method!hasDomProp Ext.layout.ContextItem#hasDomProp}.\n\nBecause {@link Ext.layout.ContextItem#method!getProp Ext.layout.ContextItem#getProp} can return `{@link undefined}`, it is often\nthe case that subsequent math will produce NaN's. This is usually not a problem as the\nNaN's simply propagate along and result in final results that are NaN. Both `{@link undefined}`\nand NaN are ignored by {@link Ext.layout.ContextItem#method!setProp Ext.layout.ContextItem#setProp}, so it is often not necessary\nto even know that this is happening. It does become important for determining if a layout\nis not done or if it might lead to publishing an incorrect (but not NaN or `{@link undefined}`)\nvalue.\n\n**RULE 3**: If a layout has not calculated all the values it is required to calculate, it\nmust set {@link Ext.layout.Layout#property!done Ext.layout.Layout#done} to `false` before returning from\n{@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate}. This value is always `true` on entry because\nit is simpler to detect the incomplete state rather than the complete state (especially up\nand down a class hierarchy).\n\n**RULE 4**: A layout must never publish an incomplete (wrong) result. Doing so would cause\ndependent layouts to run their calculations on those wrong values, producing more wrong\nvalues and some layouts may even incorrectly flag themselves as {@link Ext.layout.Layout#property!done Ext.layout.Layout#done}\nbefore the correct values are determined and republished. Doing this will poison the\ncalculations.\n\n**RULE 5**: Each value should only be published by one layout. If multiple layouts attempt\nto publish the same values, it would be nearly impossible to avoid breaking **RULE 4**. To\nhelp detect this problem, the layout diagnostics will trap on an attempt to set a value\nfrom different layouts.\n\nComplex layouts can produce many results as part of their calculations. These values are\nimportant for other layouts to proceed and need to be published by the earliest possible\ncall to {@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate} to avoid unnecessary cycles and poor performance. It is\nalso possible, however, for some results to be related in a way such that publishing them\nmay be an all-or-none proposition (typically to avoid breaking *RULE 4*).\n\n**RULE 6**: Publish results as soon as they are known to be correct rather than wait for\nall values to be calculated. Waiting for everything to be complete can lead to deadlock.\nThe key here is not to forget **RULE 4** in the process.\n\nSome layouts depend on certain critical values as part of their calculations. For example,\nHBox depends on width and cannot do anything until the width is known. In these cases, it\nis best to use {@link Ext.layout.ContextItem#method!block Ext.layout.ContextItem#block} or\n{@link Ext.layout.ContextItem#method!domBlock Ext.layout.ContextItem#domBlock} and thereby avoid processing the layout\nuntil the needed value is available.\n\n**RULE 7**: Use {@link Ext.layout.ContextItem#method!block Ext.layout.ContextItem#block} or\n{@link Ext.layout.ContextItem#method!domBlock Ext.layout.ContextItem#domBlock} when values are required to make progress.\nThis will mimize wasted recalculations.\n\n**RULE 8**: Blocks should only be used when no forward progress can be made. If even one\nvalue could still be calculated, a block could result in a deadlock.\n\nHistorically, layouts have been invoked directly by component code, sometimes in places\nlike an `afterLayout` method for a child component. With the flexibility now available\nto solve complex, iterative issues, such things should be done in a responsible layout\n(be it component or container).\n\n**RULE 9**: Use layouts to solve layout issues and don't wait for the layout to finish to\nperform further layouts. This is especially important now that layouts process entire\ncomponent trees and not each layout in isolation.\n\n# Sequence Diagram\n\nThe simplest sequence diagram for a layout run looks roughly like this:\n\n      Context         Layout 1     Item 1     Layout 2     Item 2\n         |               |           |           |           |\n    ---->X-------------->X           |           |           |\n    run  X---------------|-----------|---------->X           |\n         X beginLayout   |           |           |           |\n         X               |           |           |           |\n       A X-------------->X           |           |           |\n         X  calculate    X---------->X           |           |\n         X             C X  getProp  |           |           |\n       B X               X---------->X           |           |\n         X               |  setProp  |           |           |\n         X               |           |           |           |\n       D X---------------|-----------|---------->X           |\n         X  calculate    |           |           X---------->X\n         X               |           |           |  setProp  |\n       E X               |           |           |           |\n         X---------------|-----------|---------->X           |\n         X completeLayout|           |         F |           |\n         X               |           |           |           |\n       G X               |           |           |           |\n       H X-------------->X           |           |           |\n         X  calculate    X---------->X           |           |\n         X             I X  getProp  |           |           |\n         X               X---------->X           |           |\n         X               |  setProp  |           |           |\n       J X-------------->X           |           |           |\n         X completeLayout|           |           |           |\n         X               |           |           |           |\n       K X-------------->X           |           |           |\n         X---------------|-----------|---------->X           |\n         X finalizeLayout|           |           |           |\n         X               |           |           |           |\n       L X-------------->X           |           |           |\n         X---------------|-----------|---------->X           |\n         X finishedLayout|           |           |           |\n         X               |           |           |           |\n       M X-------------->X           |           |           |\n         X---------------|-----------|---------->X           |\n         X notifyOwner   |           |           |           |\n       N |               |           |           |           |\n         -               -           -           -           -\n\n\nNotes:\n\n**A.** This is a call from the {@link #method!run #run} method to the {@link #method!run #run} method.\nEach layout in the queue will have its {@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate}\nmethod called.\n\n**B.** After each {@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate} method is called the\n{@link Ext.layout.Layout#property!done Ext.layout.Layout#done} flag is checked to see if the Layout has completed.\nIf it has completed and that layout object implements a\n{@link Ext.layout.Layout#method!completeLayout Ext.layout.Layout#completeLayout} method, this layout is queued to\nreceive its call. Otherwise, the layout will be queued again unless there are blocks or\ntriggers that govern its requeueing.\n\n**C.** The call to {@link Ext.layout.ContextItem#method!getProp Ext.layout.ContextItem#getProp} is made to the Item\nand that will be tracked as a trigger (keyed by the name of the property being requested).\nChanges to this property will cause this layout to be requeued. The call to\n{@link Ext.layout.ContextItem#method!setProp Ext.layout.ContextItem#setProp} will place a value in the item and not\ndirectly into the DOM.\n\n**D.** Call the other layouts now in the first cycle (repeat **B** and **C** for each\nlayout).\n\n**E.** After completing a cycle, if progress was made (new properties were written to\nthe context) and if the {@link #property!layoutQueue #layoutQueue} is not empty, the next cycle is run. If no\nprogress was made or no layouts are ready to run, all buffered values are written to\nthe DOM (a flush).\n\n**F.** After flushing, any layouts that were marked as {@link Ext.layout.Layout#property!done Ext.layout.Layout#done}\nthat also have a {@link Ext.layout.Layout#method!completeLayout Ext.layout.Layout#completeLayout} method are called.\nThis can cause them to become no longer done (see {@link #method!invalidate #invalidate}). As with\n{@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate}, this is considered a \"read phase\" and\ndirect DOM writes should be avoided.\n\n**G.** Flushing and calling any pending {@link Ext.layout.Layout#method!completeLayout Ext.layout.Layout#completeLayout}\nmethods will likely trigger layouts that called {@link Ext.layout.ContextItem#method!getDomProp Ext.layout.ContextItem#getDomProp}\nand unblock layouts that have called {@link Ext.layout.ContextItem#method!domBlock Ext.layout.ContextItem#domBlock}.\nThese variants are used when a layout needs the value to be correct in the DOM and not\nsimply known. If this does not cause at least one layout to enter the queue, we have a\nlayout FAILURE. Otherwise, we continue with the next cycle.\n\n**H.** Call {@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate} on any layouts in the queue\nat the start of this cycle. Just a repeat of **B** through **G**.\n\n**I.** Once the layout has calculated all that it is resposible for, it can leave itself\nin the {@link Ext.layout.Layout#property!done Ext.layout.Layout#done} state. This is the value on entry to\n{@link Ext.layout.Layout#method!calculate Ext.layout.Layout#calculate} and must be cleared in that call if the\nlayout has more work to do.\n\n**J.** Now that all layouts are done, flush any DOM values and\n{@link Ext.layout.Layout#method!completeLayout Ext.layout.Layout#completeLayout} calls. This can again cause\nlayouts to become not done, and so we will be back on another cycle if that happens.\n\n**K.** After all layouts are done, call the {@link Ext.layout.Layout#method!finalizeLayout Ext.layout.Layout#finalizeLayout}\nmethod on any layouts that have one. As with {@link Ext.layout.Layout#method!completeLayout Ext.layout.Layout#completeLayout},\nthis can cause layouts to become no longer done. This is less desirable than using\n{@link Ext.layout.Layout#method!completeLayout Ext.layout.Layout#completeLayout} because it will cause all\n{@link Ext.layout.Layout#method!finalizeLayout Ext.layout.Layout#finalizeLayout} methods to be called again\nwhen we think things are all wrapped up.\n\n**L.** After finishing the last iteration, layouts that have a\n{@link Ext.layout.Layout#method!finishedLayout Ext.layout.Layout#finishedLayout} method will be called. This\ncall will only happen once per run and cannot cause layouts to be run further.\n\n**M.** After calling finahedLayout, layouts that have a\n{@link Ext.layout.Layout#method!notifyOwner Ext.layout.Layout#notifyOwner} method will be called. This\ncall will only happen once per run and cannot cause layouts to be run further.\n\n**N.** One last flush to make sure everything has been written to the DOM.\n\n# Inter-Layout Collaboration\n\nMany layout problems require collaboration between multiple layouts. In some cases, this\nis as simple as a component's container layout providing results used by its component\nlayout or vise-versa. A slightly more distant collaboration occurs in a box layout when\nstretchmax is used: the child item's component layout provides results that are consumed\nby the ownerCt's box layout to determine the size of the children.\n\nThe various forms of interdependence between a container and its children are described by\neach components' {@link Ext.Component#method!getSizeModel Ext.Component#getSizeModel}.\n\nTo facilitate this collaboration, the following pairs of properties are published to the\ncomponent's {@link Ext.layout.ContextItem}:\n\n - width/height: These hold the final size of the component. The layout indicated by the\n   {@link Ext.Component#method!getSizeModel Ext.Component#getSizeModel} is responsible for setting these.\n - contentWidth/contentHeight: These hold size information published by the container\n   layout or from DOM measurement. These describe the content only. These values are\n   used by the component layout to determine the outer width/height when that component\n   is {@link Ext.Component#cfg!shrinkWrap Ext.Component#shrinkWrap}. They are also used to\n   determine overflow. All container layouts must publish these values for dimensions\n   that are shrink-wrapped. If a component has raw content (not container items), the\n   componentLayout must publish these values instead.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "1,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,118,12",
                  "name": "1,120,0",
                  "text": "1,116,12,125"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1251,37",
                      "text": "1,1251,42,57:1,1252,12,67",
                      "type": "1,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1253,29,48",
                      "type": "1,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1250,12",
                  "name": "1,1255,0",
                  "text": "1,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "1,1338,37",
                      "text": "1,1338,42,57:1,1339,12,66",
                      "type": "1,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1340,29,52",
                      "type": "1,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1337,12",
                  "name": "1,1342,0",
                  "text": "1,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,40,21",
                      "text": "2,40,28,19",
                      "type": "2,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "2,38,12",
                  "text": "2,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "1,1626,0",
                  "text": "1,1623,12,132"
                }
              },
              {
                "$type": "method",
                "name": "flush",
                "text": "Flushes any pending writes to the DOM by calling each ContextItem in the flushQueue.\n",
                "src": {
                  "name": "0,465,0",
                  "text": "0,463,8,85"
                }
              },
              {
                "$type": "method",
                "name": "getCmp",
                "text": "Returns the ContextItem for a component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cmp",
                    "type": "Ext.Component",
                    "src": {
                      "name": "0,549,31",
                      "type": "0,549,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,551,0",
                  "text": "0,548,8,41"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1469,29",
                      "text": "1,1469,35,40",
                      "type": "1,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1470,30",
                      "text": "1,1470,42,60",
                      "type": "1,1470,20",
                      "value": "1,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1471,29,27",
                      "type": "1,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1473,0",
                  "text": "1,1466,12,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "1,1506,12",
                  "name": "1,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getEl",
                "text": "Returns the ContextItem for an element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "parent",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "0,557,40",
                      "type": "0,557,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "el",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "0,558,33",
                      "type": "0,558,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,560,0",
                  "text": "0,556,8,40"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1551,29",
                      "text": "1,1551,35,37",
                      "type": "1,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "1,1552,35,48:1,1553,12,33",
                      "type": "1,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1555,0",
                  "text": "1,1523,12,715"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,1515,12",
                  "name": "1,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,1449,28",
                      "type": "1,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1450,31,5",
                      "type": "1,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1448,12",
                  "name": "1,1452,0",
                  "text": "1,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "invalidate",
                "text": "Invalidates one or more components' layouts (component and container). This can be\ncalled before run to identify the components that need layout or during the run to\nrestart the layout of a component. This is called internally to flush any queued\ninvalidations at the start of a cycle. If called during a run, it is not expected\nthat new components will be introduced to the layout.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "components",
                    "text": "An array of Components or a single Component.\n",
                    "type": "Ext.Component/Array",
                    "src": {
                      "name": "0,626,37",
                      "text": "0,626,48,46",
                      "type": "0,626,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "full",
                    "text": "True if all properties should be invalidated, otherwise only\n those calculated by the component should be invalidated.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,627,25",
                      "text": "0,627,30,61:0,628,8,58",
                      "type": "0,627,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,630,0",
                  "text": "0,620,8,384"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "1,1571,28",
                      "type": "1,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "1,1572,28",
                      "type": "1,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1573,29,20",
                      "type": "1,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1574,12",
                  "name": "1,1576,0",
                  "text": "1,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queueAnimation",
                "text": "Queues a ContextItem to have its {@link Ext.layout.ContextItem#method!flushAnimations Ext.layout.ContextItem#flushAnimations} method called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "0,818,40",
                      "type": "0,818,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,819,8",
                  "name": "0,821,0",
                  "text": "0,816,8,96"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queueCompletion",
                "text": "Queues a layout to have its {@link Ext.layout.Layout#method!completeLayout Ext.layout.Layout#completeLayout} method called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "layout",
                    "type": "Ext.layout.Layout",
                    "src": {
                      "name": "0,828,35",
                      "type": "0,828,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,829,8",
                  "name": "0,831,0",
                  "text": "0,826,8,85"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queueFinalize",
                "text": "Queues a layout to have its {@link Ext.layout.Layout#method!finalizeLayout Ext.layout.Layout#finalizeLayout} method called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "layout",
                    "type": "Ext.layout.Layout",
                    "src": {
                      "name": "0,838,35",
                      "type": "0,838,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,839,8",
                  "name": "0,841,0",
                  "text": "0,836,8,85"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queueFlush",
                "text": "Queues a ContextItem for the next flush to the DOM. This should only be called by\nthe {@link Ext.layout.ContextItem} class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "0,849,40",
                      "type": "0,849,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,850,8",
                  "name": "0,852,0",
                  "text": "0,846,8,125"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queueInvalidate",
                "text": "Queue a component (and its tree) to be invalidated on the next cycle.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The component or ContextItem to invalidate.\n",
                    "type": "Ext.Component/Ext.layout.ContextItem",
                    "src": {
                      "name": "0,914,54",
                      "text": "0,914,59,44",
                      "type": "0,914,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "An object describing how to handle the invalidation (see\n {@link Ext.layout.ContextItem#method!invalidate Ext.layout.ContextItem#invalidate} for details).\n",
                    "type": "Object",
                    "src": {
                      "name": "0,915,24",
                      "text": "0,915,32,57:0,916,8,57",
                      "type": "0,915,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,917,8",
                  "name": "0,919,0",
                  "text": "0,912,8,71"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queueLayout",
                "text": "Queues a layout for the next calculation cycle. This should not be called if the\nlayout is done, blocked or already in the queue. The only classes that should call\nthis method are this class and {@link Ext.layout.ContextItem}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "layout",
                    "text": "The layout to add to the queue.\n",
                    "type": "Ext.layout.Layout",
                    "src": {
                      "name": "0,1013,35",
                      "text": "0,1013,42,32",
                      "type": "0,1013,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,1014,8",
                  "name": "0,1016,0",
                  "text": "0,1009,8,228"
                }
              },
              {
                "$type": "method",
                "name": "removeEl",
                "text": "Removes the ContextItem for an element from the cache and from the parent's\n\"children\" array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "0,1024,33",
                      "type": "0,1024,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "parent",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "0,1025,40",
                      "type": "0,1025,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,1027,0",
                  "text": "0,1022,8,94"
                }
              },
              {
                "$type": "method",
                "name": "resetLayout",
                "text": "Resets the given layout object. This is called at the start of the run and can also\nbe called during the run by calling {@link #method!invalidate #invalidate}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "layout",
                    "src": {
                      "name": "0,1042,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "src": {
                      "name": "0,1042,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "firstTime",
                    "src": {
                      "name": "0,1042,0"
                    }
                  }
                ],
                "src": {
                  "name": "0,1042,0",
                  "text": "0,1039,8,141"
                }
              },
              {
                "$type": "method",
                "name": "run",
                "text": "Runs the layout calculations. This can be called only once on this object.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "True if all layouts were completed, false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1104,26,50",
                      "type": "0,1104,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1106,0",
                  "text": "0,1103,8,75"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "runCycle",
                "text": "Performs one layout cycle by calling each layout in the layout queue.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "True if some progress was made, false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1185,26,46",
                      "type": "0,1185,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,1186,8",
                  "name": "0,1188,0",
                  "text": "0,1184,8,70"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "runLayout",
                "text": "Runs one layout as part of a cycle.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "layout",
                    "src": {
                      "name": "0,1213,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1211,8",
                  "name": "0,1213,0",
                  "text": "0,1210,8,36"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1478,35",
                      "text": "1,1478,40,69",
                      "type": "1,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1479,29",
                      "text": "1,1479,36,41",
                      "type": "1,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1480,31,5",
                      "type": "1,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1482,0",
                  "text": "1,1476,12,46"
                }
              },
              {
                "$type": "method",
                "name": "setItemSize",
                "text": "Set the size of a component, element or composite or an array of components or elements.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item(s) to size.\n",
                    "type": "Ext.Component/Ext.Component[]/Ext.dom.Element/Ext.dom.Element[]/Ext.dom.CompositeElement",
                    "src": {
                      "name": "0,1253,106",
                      "text": "0,1254,8,21",
                      "type": "0,1253,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width to set (ignored if undefined or NaN).\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1255,24",
                      "text": "0,1255,30,52",
                      "type": "0,1255,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height to set (ignored if undefined or NaN).\n",
                    "type": "Number",
                    "src": {
                      "name": "0,1256,24",
                      "text": "0,1256,31,53",
                      "type": "0,1256,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,1258,0",
                  "text": "0,1252,8,89"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "1,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1160,12",
                  "name": "1,1163,0",
                  "text": "1,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,297,21,32",
                      "type": "2,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,239,12",
                  "text": "2,240,4,2445"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "1,1589,30",
                      "text": "1,1589,36,44",
                      "type": "1,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,1590,31,5",
                      "type": "1,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1591,12",
                  "name": "1,1593,0",
                  "text": "1,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "1,1049,13",
                  "name": "1,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1066,12",
                  "name": "1,1062,33",
                  "since": "1,1067,19",
                  "text": "1,1063,12,225",
                  "type": "1,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1076,12",
                  "name": "1,1072,33",
                  "since": "1,1077,19",
                  "text": "1,1073,12,229",
                  "type": "1,1072,23"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "cycleWatchDog",
                "since": "5.1.1",
                "text": "This value is used to detect layouts that cannot progress by checking the amount of\ncycles processed. The value should be large enough to satisfy all but exceptionally large\nlayout structures. When the amount of cycles is reached, the layout will fail. This should\nonly be used for debugging, layout failures should be considered as an exceptional occurrence.\n",
                "type": "Number",
                "src": {
                  "access": "0,306,8",
                  "name": "0,301,27",
                  "since": "0,307,15",
                  "text": "0,302,8,360",
                  "type": "0,301,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1102,12",
                  "name": "1,1100,32",
                  "text": "1,1101,12,69",
                  "type": "1,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1084,12",
                  "name": "1,1082,32",
                  "readonly": "1,1085,12",
                  "since": "1,1086,19",
                  "text": "1,1083,12,64",
                  "type": "1,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1093,12",
                  "name": "1,1091,32",
                  "readonly": "1,1094,12",
                  "since": "1,1095,19",
                  "text": "1,1092,12,75",
                  "type": "1,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,1056,12",
                  "name": "1,1053,32",
                  "readonly": "1,1057,12",
                  "text": "1,1054,12,94",
                  "type": "1,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "layoutQueue",
                "text": "List of layouts to perform.\n",
                "type": "Ext.util.Queue",
                "src": {
                  "name": "0,340,39",
                  "text": "0,341,12,28",
                  "type": "0,340,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "1,1413,12",
                  "name": "1,1379,34",
                  "text": "1,1380,12,1011",
                  "type": "1,1379,23"
                }
              },
              {
                "$type": "property",
                "name": "state",
                "text": "One of these values:\n\n - 0 - Before run\n - 1 - Running\n - 2 - Run complete\n",
                "type": "Number",
                "src": {
                  "name": "0,292,27",
                  "text": "0,292,33,21:0,293,8,54",
                  "type": "0,292,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "1,940,28",
                      "type": "1,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "1,941,32",
                      "text": "1,941,44,49",
                      "type": "1,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,942,12",
                  "inheritable": "1,944,12",
                  "name": "1,946,0",
                  "static": "1,943,12",
                  "text": "1,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,464,28",
                      "type": "1,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,461,12",
                  "inheritable": "1,463,12",
                  "name": "1,466,0",
                  "static": "1,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "1,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,659,12",
                  "inheritable": "1,661,12",
                  "name": "1,665,0",
                  "static": "1,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,522,28",
                      "text": "1,522,36,34",
                      "type": "1,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,523,30",
                      "text": "1,523,46,39",
                      "type": "1,523,20",
                      "value": "1,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,524,30",
                      "text": "1,524,45,45:1,525,12,53",
                      "type": "1,524,20",
                      "value": "1,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,527,12",
                  "name": "1,529,0",
                  "static": "1,526,12",
                  "text": "1,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "1,450,28",
                      "type": "1,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,451,31,5",
                      "type": "1,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,453,12",
                  "name": "1,455,0",
                  "static": "1,452,12",
                  "text": "1,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "1,693,30",
                      "text": "1,693,40,33",
                      "type": "1,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "1,694,34",
                      "text": "1,694,42,35",
                      "type": "1,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,695,31,5",
                      "type": "1,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,698,12",
                  "inheritable": "1,697,12",
                  "name": "1,700,0",
                  "static": "1,696,12",
                  "text": "1,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,810,12",
                  "inheritable": "1,812,12",
                  "name": "1,814,0",
                  "static": "1,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "1,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,824,12",
                  "inheritable": "1,826,12",
                  "name": "1,828,0",
                  "static": "1,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,107,29,22",
                      "type": "1,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,109,12",
                  "name": "1,111,0",
                  "static": "1,108,12",
                  "text": "1,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1018,35",
                      "text": "1,1018,41,63:1,1019,12,43",
                      "type": "1,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,1020,35",
                      "text": "1,1020,42,25",
                      "type": "1,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,1022,12",
                  "name": "1,1025,0",
                  "static": "1,1021,12",
                  "text": "1,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,347,12",
                  "inheritable": "1,349,12",
                  "name": "1,352,0",
                  "static": "1,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "1,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,968,12",
                  "inheritable": "1,970,12",
                  "name": "1,972,0",
                  "static": "1,969,12",
                  "text": "1,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "1,989,29,10",
                      "type": "1,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,991,12",
                  "name": "1,993,0",
                  "static": "1,990,12",
                  "text": "1,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "1,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "1,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,840,12",
                  "inheritable": "1,842,12",
                  "name": "1,844,0",
                  "static": "1,841,12",
                  "text": "1,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "1,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "1,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,424,12",
                  "inheritable": "1,426,12",
                  "name": "1,428,0",
                  "static": "1,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,762,28",
                      "text": "1,762,36,52:1,763,12,66",
                      "type": "1,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "1,764,31,11",
                      "type": "1,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "1,766,12",
                  "name": "1,768,0",
                  "static": "1,765,12",
                  "text": "1,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "1,402,12",
                  "inheritable": "1,404,12",
                  "name": "1,406,0",
                  "static": "1,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "1,395,12",
                  "inheritable": "1,397,12",
                  "name": "1,399,0",
                  "static": "1,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,275,4",
          "extends": "0,277,0",
          "name": "0,277,0",
          "requires": "0,280,0,0:0,282,0,0:0,283,0,0:0,284,0,0:0,285,0,0:0,286,0,0",
          "text": "0,2,4,16243"
        }
      }
    ]
  },
  "version": 1
}