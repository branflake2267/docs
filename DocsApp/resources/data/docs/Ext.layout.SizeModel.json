{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/layout/SizeModel.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.layout.SizeModel",
        "text": "This class describes a size determination strategy or algorithm used by the layout\nsystem. There are special instances of this class stored as static properties to\navoid needless object instantiation. These instances should be treated as readonly.\n\n * <a href='#!/api/Ext.layout.SizeModel-property-calculated'>calculated</a>\n * <a href='#!/api/Ext.layout.SizeModel-property-configured'>configured</a>\n * <a href='#!/api/Ext.layout.SizeModel-property-constrainedMax'>constrainedMax</a>\n * <a href='#!/api/Ext.layout.SizeModel-property-constrainedMin'>constrainedMin</a>\n * <a href='#!/api/Ext.layout.SizeModel-property-natural'>natural</a>\n * <a href='#!/api/Ext.layout.SizeModel-property-shrinkWrap'>shrinkWrap</a>\n * <a href='#!/api/Ext.layout.SizeModel-property-calculatedFromConfigured'>calculatedFromConfigured</a>\n * <a href='#!/api/Ext.layout.SizeModel-property-calculatedFromNatural'>calculatedFromNatural</a>\n * <a href='#!/api/Ext.layout.SizeModel-property-calculatedFromShrinkWrap'>calculatedFromShrinkWrap</a>\n\nUsing one of these instances is simply:\n\n      var calculated = Ext.layout.SizeModel.calculated;\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.layout.SizeModel-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.layout.SizeModel-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.layout.SizeModel-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.layout.SizeModel-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.layout.SizeModel-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.layout.SizeModel-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.layout.SizeModel-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.layout.SizeModel-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.layout.SizeModel-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.layout.SizeModel-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.layout.SizeModel-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.layout.SizeModel-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.layout.SizeModel-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.layout.SizeModel-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.layout.SizeModel-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.layout.SizeModel-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.layout.SizeModel-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.layout.SizeModel-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "auto",
                "readonly": true,
                "text": "True if the size is either <a href='#!/api/Ext.layout.SizeModel-property-natural'>natural</a> or <a href='#!/api/Ext.layout.SizeModel-property-shrinkWrap'>shrinkWrap</a>, otherwise false.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,66,28",
                  "readonly": "0,68,8",
                  "text": "0,67,8,71",
                  "type": "0,66,19"
                }
              },
              {
                "$type": "property",
                "name": "calculated",
                "readonly": true,
                "text": "True if the size is calculated by the `ownerLayout`.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,72,28",
                  "readonly": "0,74,8",
                  "text": "0,73,8,53",
                  "type": "0,72,19"
                }
              },
              {
                "$type": "property",
                "name": "calculatedFromConfigured",
                "readonly": true,
                "text": "True if the size is calculated by the `ownerLayout` based on a configured size.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,126,28",
                  "readonly": "0,128,8",
                  "text": "0,127,8,80",
                  "type": "0,126,19"
                }
              },
              {
                "$type": "property",
                "name": "calculatedFromNatural",
                "readonly": true,
                "text": "True if the size is calculated by the `ownerLayout` based on <a href='#!/api/Ext.layout.SizeModel-property-natural'>natural</a> size model\nresults.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,133,28",
                  "readonly": "0,136,8",
                  "text": "0,134,8,91",
                  "type": "0,133,19"
                }
              },
              {
                "$type": "property",
                "name": "calculatedFromShrinkWrap",
                "readonly": true,
                "text": "True if the size is calculated by the `ownerLayout` based on <a href='#!/api/Ext.layout.SizeModel-property-shrinkWrap'>shrinkWrap</a> size model\nresults.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,141,28",
                  "readonly": "0,144,8",
                  "text": "0,142,8,94",
                  "type": "0,141,19"
                }
              },
              {
                "$type": "property",
                "name": "configured",
                "readonly": true,
                "text": "True if the size is configured (e.g., by a `width` or `minWidth`). The names of\nconfiguration properties can be found in the <a href='#!/api/Ext.layout.SizeModel-property-names'>names</a> property.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,79,28",
                  "readonly": "0,82,8",
                  "text": "0,80,8,150",
                  "type": "0,79,19"
                }
              },
              {
                "$type": "property",
                "name": "constrainedMax",
                "readonly": true,
                "text": "True if the size is constrained by a `maxWidth` or `maxHeight` configuration. This\nis a flavor of <a href='#!/api/Ext.layout.SizeModel-property-configured'>configured</a> (since `maxWidth` and `maxHeight` are config options).\nIf true, the <a href='#!/api/Ext.layout.SizeModel-property-names'>names</a> property will be defined as well.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,87,28",
                  "readonly": "0,91,8",
                  "text": "0,88,8,228",
                  "type": "0,87,19"
                }
              },
              {
                "$type": "property",
                "name": "constrainedMin",
                "readonly": true,
                "text": "True if the size is constrained by a `minWidth` or `minHeight` configuration. This\nis a flavor of <a href='#!/api/Ext.layout.SizeModel-property-configured'>configured</a> (since `minWidth` and `minHeight` are config options).\nIf true, the <a href='#!/api/Ext.layout.SizeModel-property-names'>names</a> property will be defined as well.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,96,28",
                  "readonly": "0,100,8",
                  "text": "0,97,8,228",
                  "type": "0,96,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.layout.SizeModel-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "fixed",
                "readonly": true,
                "text": "True if the size is either <a href='#!/api/Ext.layout.SizeModel-property-calculated'>calculated</a> or <a href='#!/api/Ext.layout.SizeModel-property-configured'>configured</a>, otherwise false.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,105,28",
                  "readonly": "0,107,8",
                  "text": "0,106,8,74",
                  "type": "0,105,19"
                }
              },
              {
                "$type": "property",
                "name": "name",
                "readonly": true,
                "text": "The name of this size model (e.g., \"calculated\").\n",
                "type": "String",
                "src": {
                  "name": "0,60,27",
                  "readonly": "0,62,8",
                  "text": "0,61,8,50",
                  "type": "0,60,19"
                }
              },
              {
                "$type": "property",
                "name": "names",
                "readonly": true,
                "text": "An object with the config property names that determine the\nsize.\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "width",
                    "text": "The width property name (e.g., 'width').\n",
                    "type": "String",
                    "src": {
                      "name": "0,151,33",
                      "text": "0,151,39,41",
                      "type": "0,151,19"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "height",
                    "text": "The height property name (e.g., 'minHeight').\n",
                    "type": "String",
                    "src": {
                      "name": "0,152,33",
                      "text": "0,152,40,46",
                      "type": "0,152,19"
                    }
                  }
                ],
                "src": {
                  "name": "0,149,27",
                  "readonly": "0,153,8",
                  "text": "0,149,33,60:0,150,8,6",
                  "type": "0,149,19"
                }
              },
              {
                "$type": "property",
                "name": "natural",
                "readonly": true,
                "text": "True if the size is determined by CSS and not by content. Such sizes are assumed to\nbe dependent on the container box and measurement occurs on the outer-most element.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,111,28",
                  "readonly": "0,114,8",
                  "text": "0,112,8,168",
                  "type": "0,111,19"
                }
              },
              {
                "$type": "property",
                "name": "ordinal",
                "readonly": true,
                "text": "The 0-based ordinal for this `SizeModel` instance.\n",
                "type": "Number",
                "src": {
                  "name": "0,36,31",
                  "readonly": "0,38,12",
                  "text": "0,37,12,51",
                  "type": "0,36,23"
                }
              },
              {
                "$type": "property",
                "name": "pairsByHeightOrdinal",
                "text": "An array of objects indexed by the <a href='#!/api/Ext.layout.SizeModel-property-ordinal'>ordinal</a> of a height `SizeModel` on\na width `SizeModel` to yield an object describing both height and width size\nmodels.\n\nUsed like this:\n\n     widthModel.pairsByHeightOrdinal[heightModel.ordinal]\n\nThis provides a reusable object equivalent to the following:\n\n     {\n         width: widthModel,\n         height: heightModel\n     }\n",
                "type": "Object[]",
                "items": [
                  {
                    "$type": "property",
                    "name": "width",
                    "text": "The `SizeModel` for\nthe width.\n",
                    "type": "Ext.layout.SizeModel",
                    "src": {
                      "name": "0,247,66",
                      "text": "0,247,72,20:0,248,12,11",
                      "type": "0,247,23"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "height",
                    "text": "The `SizeModel` for\nthe height.\n",
                    "type": "Ext.layout.SizeModel",
                    "src": {
                      "name": "0,249,66",
                      "text": "0,249,73,20:0,250,12,12",
                      "type": "0,249,23"
                    }
                  }
                ],
                "src": {
                  "name": "0,246,33",
                  "text": "0,231,12,375",
                  "type": "0,246,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "name": "shrinkWrap",
                "readonly": true,
                "text": "True if the size is determined by content irrespective of the container box.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,119,28",
                  "readonly": "0,121,8",
                  "text": "0,120,8,77",
                  "type": "0,119,19"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "sizeModels",
                "static": true,
                "text": "An object containing all SizeModel instances keyed by <a href='#!/api/Ext.layout.SizeModel-property-name'>name</a>.\n",
                "src": {
                  "access": "0,54,12",
                  "name": "0,56,0",
                  "static": "0,44,-1",
                  "text": "0,53,12,62"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "sizeModelsArray",
                "static": true,
                "text": "An array of all SizeModel instances.\n",
                "src": {
                  "access": "0,48,12",
                  "name": "0,50,0",
                  "static": "0,44,-1",
                  "text": "0,47,12,37"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,20,4",
          "name": "0,22,0",
          "text": "0,2,4,536"
        }
      }
    ]
  },
  "version": 1
}