{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/list/Tree.js",
    "../../../ext/packages/core/src/mixin/Bindable.js",
    "../../../ext/packages/core/src/Widget.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/packages/core/src/mixin/ComponentDelegation.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/mixin/Inheritable.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js",
    "../../../ext/classic/classic/overrides/Widget.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "widget.treelist",
        "extended": "Ext.Widget,Ext.Evented,Ext.Base,Object",
        "extends": "Ext.Widget",
        "name": "Ext.list.Tree",
        "requires": "Ext.list.RootTreeItem",
        "since": "6.0.0",
        "text": "A lightweight component to display data in a simple tree structure.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "bind",
                "optional": true,
                "text": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `title` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n",
                "type": "Object",
                "src": {
                  "name": "1,12,27",
                  "text": "1,13,12,559",
                  "type": "1,12,18"
                }
              },
              {
                "$type": "property",
                "name": "controller",
                "text": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n",
                "type": "String/Object/Ext.app.ViewController",
                "src": {
                  "name": "1,45,56",
                  "text": "1,46,12,637",
                  "type": "1,45,18"
                }
              },
              {
                "$type": "property",
                "name": "defaultListenerScope",
                "text": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,84,27",
                  "text": "1,85,12,508",
                  "type": "1,84,18"
                }
              },
              {
                "$type": "property",
                "name": "defaults",
                "optional": true,
                "text": "The default configuration for the widgets created for tree items.\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "xtype",
                    "optional": true,
                    "text": "The type of item to create. By default, items are `{@link Ext.list.TreeItem}`\ninstances. This can be customized but this `xtype` must reference a class that\nultimately derives from the `{@link Ext.list.AbstractTreeItem}` base class.\n",
                    "type": "String",
                    "value": "\"treelistitem\"",
                    "src": {
                      "name": "0,60,36",
                      "text": "0,61,12,246",
                      "type": "0,60,18",
                      "value": "0,60,42"
                    }
                  }
                ],
                "src": {
                  "name": "0,57,27",
                  "text": "0,58,12,67",
                  "type": "0,57,18"
                }
              },
              {
                "$type": "property",
                "name": "expanderOnly",
                "text": "`true` to expand only on the click of the expander element. Setting this to\n`false` will allow expansion on click of any part of the element.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,48,27",
                  "text": "0,49,12,142",
                  "type": "0,48,18"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "evented": true,
                "name": "height",
                "text": "The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to `auto`, it will set the width to `{@link null}` meaning it will have its own natural size.\n",
                "type": "Number/String",
                "src": {
                  "accessor": "2,187,12",
                  "evented": "2,188,12",
                  "name": "2,183,33",
                  "text": "2,184,12,297",
                  "type": "2,183,18"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the {@link Ext.view.View}'s **`{@link Ext.view.View#event!itemclick Ext.view.View#itemclick}`** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `{@link #property!element element}` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "3,243,25",
                  "text": "3,244,11,1325",
                  "type": "3,243,17"
                }
              },
              {
                "$type": "property",
                "name": "publishes",
                "since": "5.0.0",
                "text": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found in a class\nconfig block. In these situations, you may utilize {@link #method!publishState #publishState} if the property has a\nsetter method.  Let's use {@link Ext.form.Labelable#method!setFieldLabel Ext.form.Labelable#setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n",
                "type": "String/String[]/Object",
                "src": {
                  "name": "1,100,42",
                  "since": "1,179,19",
                  "text": "1,101,12,2498",
                  "type": "1,100,18"
                }
              },
              {
                "$type": "property",
                "name": "reference",
                "text": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.container.Container#cfg!referenceHolder Ext.container.Container#referenceHolder}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n",
                "type": "String",
                "src": {
                  "name": "1,190,26",
                  "text": "1,191,12,477",
                  "type": "1,190,18"
                }
              },
              {
                "$type": "property",
                "name": "selection",
                "text": "\nThe current selected node.\n",
                "type": "Ext.data.TreeModel",
                "src": {
                  "name": "0,80,38",
                  "text": "0,81,12,28",
                  "type": "0,80,18"
                }
              },
              {
                "$type": "property",
                "name": "selectOnExpander",
                "text": "`true` to select the node when clicking the expander.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,87,27",
                  "text": "0,88,12,54",
                  "type": "0,87,18"
                }
              },
              {
                "$type": "property",
                "name": "session",
                "optional": true,
                "text": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n",
                "type": "Boolean/Object/Ext.data.Session",
                "value": "null",
                "src": {
                  "name": "1,204,52",
                  "text": "1,205,12,531",
                  "type": "1,204,18",
                  "value": "1,204,60"
                }
              },
              {
                "$type": "property",
                "name": "singleExpand",
                "optional": true,
                "text": "`true` if only 1 node per branch may be expanded.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,93,28",
                  "text": "0,94,12,50",
                  "type": "0,93,18",
                  "value": "0,93,41"
                }
              },
              {
                "$type": "property",
                "name": "store",
                "text": "The data source to which this component is bound.\n",
                "type": "String/Object/Ext.data.TreeStore",
                "src": {
                  "name": "0,102,0",
                  "text": "0,100,12,50",
                  "type": "0,99,18"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "name": "style",
                "text": "Additional CSS styles that will be rendered into an inline style attribute when\nthe widget is rendered.\n\nYou can pass either a string syntax:\n\n    style: 'background:red'\n\nOr by using an object:\n\n    style: {\n        background: 'red'\n    }\n\nWhen using the object syntax, you can define CSS Properties by using a string:\n\n    style: {\n        'border-left': '1px solid red'\n    }\n\nAlthough the object syntax is much easier to read, we suggest you to use the\nstring syntax for better performance.\n",
                "type": "String/Object",
                "src": {
                  "accessor": "2,148,12",
                  "name": "2,126,33",
                  "text": "2,127,12,496",
                  "type": "2,126,18"
                }
              },
              {
                "$type": "property",
                "name": "twoWayBindable",
                "text": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `value` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes #publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n",
                "type": "String/String[]/Object",
                "src": {
                  "name": "1,239,42",
                  "text": "1,240,12,402",
                  "type": "1,239,18"
                }
              },
              {
                "$type": "property",
                "name": "userCls",
                "text": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n",
                "type": "String/String[]",
                "src": {
                  "name": "2,155,35",
                  "text": "2,156,12,277",
                  "type": "2,155,18"
                }
              },
              {
                "$type": "property",
                "name": "viewModel",
                "text": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n",
                "type": "String/Object/Ext.app.ViewModel",
                "src": {
                  "name": "1,258,51",
                  "text": "1,259,12,690",
                  "type": "1,258,18"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "evented": true,
                "name": "width",
                "text": "The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to `auto`, it will set the width to `{@link null}` meaning it will have its own natural size.\n",
                "type": "Number/String",
                "src": {
                  "accessor": "2,177,12",
                  "evented": "2,178,12",
                  "name": "2,173,33",
                  "text": "2,174,12,296",
                  "type": "2,173,18"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "3,413,27",
                      "type": "3,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,414,30,35",
                      "type": "3,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,412,12",
                  "name": "3,416,0",
                  "text": "3,411,12,65"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for {@link #method!onAfter #onAfter}.\n",
                "src": {
                  "name": "3,1236,0",
                  "text": "3,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for {@link #method!onBefore #onBefore}.\n",
                "src": {
                  "name": "3,1230,0",
                  "text": "3,1228,12,29"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addBindableUpdater",
                "since": "5.0.0",
                "text": "Ensures that the given property (if it is a Config System config) has a proper\n\"updater\" method on this instance to sync changes to the config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the config property.\n",
                    "type": "String",
                    "src": {
                      "name": "1,504,28",
                      "text": "1,504,37,33",
                      "type": "1,504,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,505,12",
                  "name": "1,508,0",
                  "since": "1,506,19",
                  "text": "1,502,12,144"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDelegatedListener",
                "text": "Adds a listeners with the \"delegate\" event option.  Users should not invoke this\nmethod directly.  Use the \"delegate\" event option of\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "4,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "4,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "4,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "src": {
                      "name": "4,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "src": {
                      "name": "4,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caller",
                    "src": {
                      "name": "4,19,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "manager",
                    "src": {
                      "name": "4,19,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,14,12",
                  "name": "4,19,0",
                  "text": "4,15,12,195"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "5,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,118,12",
                  "name": "5,120,0",
                  "text": "5,116,12,125"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addElementReference",
                "text": "Adds an element reference to this Widget instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the reference\n",
                    "type": "String",
                    "src": {
                      "name": "2,589,28",
                      "text": "2,589,33,26",
                      "type": "2,589,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "domNode",
                    "type": "HTMLElement",
                    "src": {
                      "name": "2,590,33",
                      "type": "2,590,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "2,591,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,592,12",
                  "name": "2,594,0",
                  "text": "2,588,12,51"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addElementReferenceOnDemand",
                "text": "Reduces instantiation time for a Widget by lazily instantiating Ext.Element\nreferences the first time they are used.  This optimization only works for elements\nwith no listeners specified.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the reference\n",
                    "type": "String",
                    "src": {
                      "name": "2,561,28",
                      "text": "2,561,33,26",
                      "type": "2,561,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "domNode",
                    "type": "HTMLElement",
                    "src": {
                      "name": "2,562,33",
                      "type": "2,562,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,563,12",
                  "name": "2,565,0",
                  "text": "2,557,12,190"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The {@link #method!on #on} method is shorthand for\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,835,35",
                      "text": "3,835,45,37:3,836,12,61",
                      "type": "3,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,838,38",
                      "text": "3,838,42,46:3,839,12,166",
                      "type": "3,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "3,843,29",
                      "text": "3,843,36,62:3,844,12,73",
                      "type": "3,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "3,853,36",
                          "text": "3,854,12,139",
                          "type": "3,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,857,36",
                          "text": "3,858,12,94",
                          "type": "3,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,861,37",
                          "text": "3,862,12,96",
                          "type": "3,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,865,36",
                          "text": "3,866,12,262",
                          "type": "3,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  {@link Ext.Function#method!requestAnimationFrame Ext.Function#requestAnimationFrame}. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,870,36",
                          "text": "3,871,12,323",
                          "type": "3,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "3,877,49",
                          "text": "3,878,12,135",
                          "type": "3,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to {@link Ext.Component}.**\n  The name of a Component property which references an {@link Ext.dom.Element}\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of {@link Ext.Component} which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "3,881,36",
                          "text": "3,882,12,781",
                          "type": "3,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "3,905,37",
                          "text": "3,906,12,295",
                          "type": "3,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopPropagation Ext.event.Event#stopPropagation} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,914,38",
                          "text": "3,915,12,212",
                          "type": "3,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!preventDefault Ext.event.Event#preventDefault} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,919,38",
                          "text": "3,920,12,210",
                          "type": "3,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopEvent Ext.event.Event#stopEvent} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,924,38",
                          "text": "3,925,12,200",
                          "type": "3,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "3,929,36",
                          "text": "3,930,12,179",
                          "type": "3,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `{@link #method!destroy destroy}` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using {@link #method!un #un}; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See {@link #method!un #un} for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "3,934,38",
                          "text": "3,935,12,441",
                          "type": "3,934,20",
                          "value": "3,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,942,37",
                          "text": "3,943,12,737",
                          "type": "3,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "3,954,37",
                          "text": "3,955,12,301",
                          "type": "3,954,20",
                          "value": "3,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "3,846,29",
                      "text": "3,846,38,44:3,847,12,154",
                      "type": "3,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "3,962,29",
                      "text": "3,963,12,1831",
                      "type": "3,962,20",
                      "value": "3,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `{@link #method!destroy destroy}` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1021,29,54:3,1022,12,516",
                      "type": "3,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1041,0",
                  "text": "3,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use `{@link #method!mon mon}` or `{@link #method!addManagedListener addManagedListener}` if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "3,456,56",
                      "text": "3,456,61,47",
                      "type": "3,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "3,457,34",
                      "text": "3,457,40,63",
                      "type": "3,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,458,36",
                      "text": "3,458,39,49:3,459,11,85",
                      "type": "3,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,461,27",
                      "text": "3,461,33,92:3,462,11,43",
                      "type": "3,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} options.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,463,27",
                      "text": "3,463,35,67:3,464,11,61",
                      "type": "3,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `{@link #method!destroy destroy}` method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "3,465,28,54:3,466,11,513",
                      "type": "3,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,484,0",
                  "text": "3,430,11,1093"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyBind",
                "since": "5.0.0",
                "items": [
                  {
                    "$type": "param",
                    "name": "binds",
                    "type": "String/Object",
                    "src": {
                      "name": "1,523,35",
                      "type": "1,523,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "currentBindings",
                    "type": "Object",
                    "src": {
                      "name": "1,524,28",
                      "type": "1,524,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,525,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,526,12",
                  "name": "1,529,0",
                  "since": "1,527,19"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applySession",
                "since": "5.0.0",
                "text": "Transforms a Session config to a proper instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "session",
                    "type": "Object",
                    "src": {
                      "name": "1,626,28",
                      "type": "1,626,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Session",
                    "src": {
                      "type": "1,627,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,628,12",
                  "name": "1,631,0",
                  "since": "1,629,19",
                  "text": "1,625,12,50"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "applyStyle",
                "items": [
                  {
                    "$type": "param",
                    "name": "style",
                    "src": {
                      "name": "2,511,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldStyle",
                    "src": {
                      "name": "2,511,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,509,8",
                  "name": "2,511,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyViewModel",
                "since": "5.0.0",
                "text": "Transforms a ViewModel config to a proper instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "viewModel",
                    "type": "String/Object/Ext.app.ViewModel",
                    "src": {
                      "name": "1,654,53",
                      "type": "1,654,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "type": "1,655,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,656,12",
                  "name": "1,659,0",
                  "since": "1,657,19",
                  "text": "1,653,12,52"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "5,1251,37",
                      "text": "5,1251,42,57:5,1252,12,67",
                      "type": "5,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "5,1253,29,48",
                      "type": "5,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "5,1250,12",
                  "name": "5,1255,0",
                  "text": "5,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "5,1338,37",
                      "text": "5,1338,42,57:5,1339,12,66",
                      "type": "5,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "5,1340,29,52",
                      "type": "5,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "5,1337,12",
                  "name": "5,1342,0",
                  "text": "5,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "clearDelegatedListeners",
                "text": "Clears all listeners that were attached using the \"delegate\" event option.\nUsers should not invoke this method directly.  It is called automatically as\npart of normal {@link Ext.util.Observable#method!clearListeners Ext.util.Observable#clearListeners}\nprocessing.\n",
                "src": {
                  "access": "4,59,12",
                  "name": "4,65,0",
                  "text": "4,60,12,237"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "3,1255,0",
                  "text": "3,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "3,1291,0",
                  "text": "3,1289,11,47"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "6,40,21",
                      "text": "6,40,28,19",
                      "type": "6,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "6,38,12",
                  "text": "6,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createItem",
                "text": "Create a new list item.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node backing the item.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,338,40",
                      "text": "0,338,45,27",
                      "type": "0,338,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "parent",
                    "text": "The parent item.\n",
                    "type": "Ext.list.AbstractTreeItem",
                    "src": {
                      "name": "0,339,47",
                      "text": "0,339,54,17",
                      "type": "0,339,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The list item.\n",
                    "type": "Ext.list.AbstractTreeItem",
                    "src": {
                      "text": "0,340,48,15",
                      "type": "0,340,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,342,12",
                  "name": "0,344,0",
                  "text": "0,337,12,24"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1522,27",
                      "text": "3,1522,35,55",
                      "type": "3,1522,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,1523,26",
                      "text": "3,1523,35,61",
                      "type": "3,1523,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "3,1524,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,1520,11",
                  "name": "3,1526,0",
                  "text": "3,1521,11,103"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRootItem",
                "text": "Create a root item for this list.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "root",
                    "text": "The root node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,362,40",
                      "text": "0,362,45,15",
                      "type": "0,362,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,364,12",
                  "name": "0,366,0",
                  "text": "0,361,12,34"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further.\n",
                "src": {
                  "name": "5,1626,0",
                  "text": "5,1623,12,132"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doAddListener",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "2,662,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "2,662,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "2,662,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "src": {
                      "name": "2,662,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "src": {
                      "name": "2,662,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caller",
                    "src": {
                      "name": "2,662,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "manager",
                    "src": {
                      "name": "2,662,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,660,12",
                  "name": "2,662,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireDelegatedEvent",
                "text": "Fires a delegated event.  Users should not invoke this method directly.  It\nis called automatically by the framework as needed (see the \"delegate\" event\noption of {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} for more\ndetails.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "4,88,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "4,88,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,82,12",
                  "name": "4,88,0",
                  "text": "4,83,12,233"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "3,761,27",
                      "type": "3,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "3,762,26",
                      "type": "3,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "3,763,28",
                      "type": "3,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,759,11",
                  "name": "3,765,0",
                  "text": "3,758,11,24"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,1567,36",
                      "text": "3,1567,47,54",
                      "type": "3,1567,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,1569,0",
                  "text": "3,1534,11,1138"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #fireEventAction} instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n`{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,640,28",
                      "text": "3,640,38,31",
                      "type": "3,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,641,27",
                      "text": "3,641,32,58",
                      "type": "3,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,642,30",
                      "text": "3,642,33,21",
                      "type": "3,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "3,643,29",
                      "text": "3,643,36,62:3,644,12,72",
                      "type": "3,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`\n",
                    "type": "Object",
                    "src": {
                      "name": "3,645,29",
                      "text": "3,645,38,52:3,646,12,72",
                      "type": "3,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}` for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "3,647,29",
                      "text": "3,647,45,47:3,648,12,394",
                      "type": "3,647,20",
                      "value": "3,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "3,653,12",
                  "deprecatedVersion": "3,653,12",
                  "name": "3,655,0",
                  "text": "3,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}).\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,568,27",
                      "text": "3,568,37,31",
                      "type": "3,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "3,569,30",
                      "text": "3,569,35,54",
                      "type": "3,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,570,29,77",
                      "type": "3,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,572,0",
                  "text": "3,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,605,27",
                      "text": "3,605,37,31",
                      "type": "3,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "3,606,29",
                      "text": "3,606,34,53",
                      "type": "3,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,607,29,77",
                      "type": "3,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,609,0",
                  "text": "3,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,721,28",
                      "text": "3,721,38,31",
                      "type": "3,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,722,27",
                      "text": "3,722,32,58",
                      "type": "3,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,723,37",
                      "text": "3,723,40,21",
                      "type": "3,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "3,724,29",
                      "text": "3,724,36,62:3,725,12,72",
                      "type": "3,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "3,726,36",
                      "text": "3,726,44,47:3,727,12,201",
                      "type": "3,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,731,0",
                  "text": "3,714,12,409"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fixReference",
                "text": "Sets up a reference on our current reference holder.\n",
                "src": {
                  "access": "7,335,12",
                  "name": "7,337,0",
                  "text": "7,333,12,54"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "3,793,41,63",
                      "type": "3,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,792,11",
                  "name": "3,795,0",
                  "text": "3,791,11,43"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "5,1469,29",
                      "text": "5,1469,35,40",
                      "type": "5,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "5,1470,30",
                      "text": "5,1470,42,60",
                      "type": "5,1470,20",
                      "value": "5,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "5,1471,29,27",
                      "type": "5,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "5,1473,0",
                  "text": "5,1466,12,151"
                }
              },
              {
                "$type": "method",
                "name": "getController",
                "text": "Returns the {@link Ext.app.ViewController} instance associated with this\ncomponent via the {@link #cfg!controller #controller} config or {@link #setController} method.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns this component's ViewController or\nnull if one was not configured\n",
                    "type": "Ext.app.ViewController",
                    "src": {
                      "text": "1,79,45,43:1,80,12,31",
                      "type": "1,79,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,76,20",
                  "text": "1,77,12,152"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "5,1506,12",
                  "name": "5,1508,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getElementConfig",
                "text": "A template method for modifying the {@link #property!element #element} config before it is processed.\nBy default adds the result of `this.getTemplate()` as the `children` array of\n{@link #property!element #element} if `children` were not specified in the original\n{@link #property!element #element} config.  Typically this method should not need to be implemented\nin subclasses.  Instead the {@link #property!element #element} property should be use to configure\nthe element template for a given Widget subclass.\n\nThis method is called once when the first instance of each Widget subclass is\ncreated.  The element config object that is returned is cached and used as the template\nfor all successive instances.  The scope object for this method is the class prototype,\nnot the instance.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the element config object\n",
                    "type": "Object",
                    "src": {
                      "text": "2,316,25,26",
                      "type": "2,316,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,317,8",
                  "name": "2,319,0",
                  "text": "2,304,8,715"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "8,75,25,3",
                      "type": "8,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,77,0",
                  "text": "8,74,8,93"
                }
              },
              {
                "$type": "method",
                "name": "getInherited",
                "since": "5.0.0",
                "text": "This method returns an object containing the inherited properties for this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "inner",
                    "optional": true,
                    "text": "Pass `true` to return `inheritedStateInner` instead\nof the normal `inheritedState` object. This is only needed internally and should\nnot be passed by user code.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "7,88,26",
                      "text": "7,88,39,52:7,89,8,110",
                      "type": "7,88,16",
                      "value": "7,88,32"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `inheritedState` object containing inherited properties.\n",
                    "type": "Object",
                    "src": {
                      "text": "7,92,25,61",
                      "type": "7,92,17"
                    }
                  }
                ],
                "src": {
                  "name": "7,95,0",
                  "since": "7,93,15",
                  "text": "7,86,8,86"
                }
              },
              {
                "$type": "method",
                "name": "getInheritedConfig",
                "since": "5.0.0",
                "text": "This method returns the value of a config property that may be inherited from some\nancestor.\n\nIn some cases, a config may be explicitly set on a component with the intent of\n*only* being presented to its children while that component should act upon the\ninherited value (see `referenceHolder` for example). In these cases the `skipThis`\nparameter should be specified as `true`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the config property to return.\n",
                    "type": "String",
                    "src": {
                      "name": "7,152,24",
                      "text": "7,152,33,43",
                      "type": "7,152,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` if the property should be ignored if\nfound on this instance. In other words, `true` means the property must be inherited\nand not explicitly set on this instance.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "7,153,26",
                      "text": "7,153,42,49:7,154,8,125",
                      "type": "7,153,16",
                      "value": "7,153,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value of the requested `property`.\n",
                    "type": "Mixed",
                    "src": {
                      "text": "7,156,24,39",
                      "type": "7,156,17"
                    }
                  }
                ],
                "src": {
                  "name": "7,159,0",
                  "since": "7,157,15",
                  "text": "7,144,8,379"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "5,1551,29",
                      "text": "5,1551,35,37",
                      "type": "5,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "5,1552,35,48:5,1553,12,33",
                      "type": "5,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "5,1555,0",
                  "text": "5,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getItem",
                "text": "Get a child {@link Ext.list.AbstractTreeItem} by node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,288,36",
                      "text": "0,288,41,10",
                      "type": "0,288,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item. `{@link null}` if not found.\n",
                    "type": "Ext.list.AbstractTreeItem",
                    "src": {
                      "text": "0,289,44,31",
                      "type": "0,289,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,291,0",
                  "text": "0,287,8,60"
                }
              },
              {
                "$type": "method",
                "name": "getItemConfig",
                "template": true,
                "text": "This method is called to populate and return a config object for new nodes. This\ncan be overridden by derived classes to manipulate properties or `xtype` of the\nreturned object. Upon return, the object is passed to `{@link Ext#method!create Ext#create}` and the\nreference is stored as part of this tree.\n\nThe base class implementation will apply any configured `{@link #cfg!defaults #defaults}` to the\nobject it returns.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node backing the item.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,311,36",
                      "text": "0,311,41,27",
                      "type": "0,311,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "parent",
                    "text": "The parent item. This is never `{@link null}` but\nmay be an instance of `{@link Ext.list.RootTreeItem}`.\n",
                    "type": "Ext.list.AbstractTreeItem",
                    "src": {
                      "name": "0,312,43",
                      "text": "0,312,50,42:0,313,8,55",
                      "type": "0,312,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config object to pass to `{@link Ext#method!create Ext#create}` for the item.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,314,25,64",
                      "type": "0,314,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,317,0",
                  "template": "0,315,8",
                  "text": "0,303,8,390"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getRefOwner",
                "text": "Used by {@link Ext.ComponentQuery}, and the {@link Ext.Component#method!up Ext.Component#up}\nmethod to find the owning Component in the linkage hierarchy.\n\nBy default this returns the Container which contains this Component.\n\nThis may be overridden by Component authors who implement ownership hierarchies\nwhich are not based upon ownerCt, such as BoundLists being owned by Fields or Menus\nbeing owned by Buttons.\n",
                "src": {
                  "access": "7,285,8",
                  "name": "7,287,0",
                  "text": "7,277,8,408"
                }
              },
              {
                "$type": "method",
                "name": "getSize",
                "text": "Returns the height and width of the Component.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The current `{@link #cfg!height height}` and `{@link #cfg!width width}` of the Component.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "type": "Number",
                        "src": {
                          "name": "2,335,32",
                          "type": "2,335,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "type": "Number",
                        "src": {
                          "name": "2,336,32",
                          "type": "2,336,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "2,334,25,51",
                      "type": "2,334,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,338,0",
                  "text": "2,333,8,47"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTdCls",
                "text": "Needed for when widget is rendered into a grid cell. The class to add to the cell element.\n",
                "src": {
                  "access": "9,95,8",
                  "name": "9,99,0",
                  "text": "9,96,8,91"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTdType",
                "text": "Partner method to {@link #method!getTdCls #getTdCls}.\n\nReturns the base type for the component. Defaults to return `this.xtype`, but\nAll derived classes of {@link Ext.form.field.Text} can return the type 'textfield',\nand all derived classes of {@link Ext.button.Button} can return the type 'button'\n",
                "src": {
                  "access": "9,104,8",
                  "name": "9,112,0",
                  "text": "9,105,8,299"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "5,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "5,1515,12",
                  "name": "5,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "3,1334,27",
                      "text": "3,1334,37,35",
                      "type": "3,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,1335,29,67",
                      "type": "3,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1337,0",
                  "text": "3,1331,11,161"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "6,100,20",
                      "text": "6,100,25,34",
                      "type": "6,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "6,101,22,57:6,102,4,15",
                      "type": "6,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,53,12",
                  "text": "6,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initBindable",
                "since": "5.0.0",
                "text": "This method triggers the lazy configs and must be called when it is time to\nfully boot up. The configs that must be initialized are: `{@link #cfg!bind bind}`, `{@link #cfg!publishes publishes}`,\n`{@link #cfg!session session}`, `{@link #cfg!twoWayBindable twoWayBindable}` and `{@link #cfg!viewModel viewModel}`.\n",
                "src": {
                  "access": "1,723,12",
                  "name": "1,726,0",
                  "since": "1,724,19",
                  "text": "1,720,12,199"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "5,1449,28",
                      "type": "5,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "5,1450,31,5",
                      "type": "5,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "5,1448,12",
                  "name": "5,1452,0",
                  "text": "5,1428,12,441"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initElement",
                "text": "Initializes the Element for this Widget instance.  If this is the first time a\nWidget of this type has been instantiated the {@link #property!element #element} config will be\nprocessed to create an Element.  This Element is then cached on the prototype (see\nafterCachedConfig) so that future instances can obtain their element by simply\ncloning the Element that was cached by the first instance.\n",
                "src": {
                  "access": "2,355,8",
                  "name": "2,357,0",
                  "text": "2,350,8,378"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initElementListeners",
                "text": "Called for the first instance of this Widget to create an object that contains the\nlistener configs for all of the element references keyed by reference name. The\nobject is cached on the prototype and has the following shape:\n\n    _elementListeners: {\n        element: {\n            click: 'onClick',\n            scope: this\n        },\n        fooReference: {\n            tap: {\n                fn: someFunction,\n                delay: 100\n            }\n        }\n    }\n\nThe returned object is prototype chained to the _elementListeners object of its\nsuperclass, and each key in the object is prototype chained to object with the\ncorresponding key in the superclass _elementListeners.  This allows element\nlisteners to be inherited and overridden when subclassing widgets.\n\nThis method is invoked with the prototype object as the scope\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "elementConfig",
                    "src": {
                      "name": "2,734,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,732,12",
                  "name": "2,734,0",
                  "text": "2,708,12,837"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initInheritedState",
                "since": "5.0.0",
                "text": "This method is called to initialize the `inheritedState` objects for this instance.\nThis amounts to typically copying certain properties from the instance to the given\nobject.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "inheritedState",
                    "text": "The state object for this instance.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,300,24",
                      "text": "7,300,39,36",
                      "type": "7,300,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "inheritedStateInner",
                    "optional": true,
                    "text": "This object is only provided for containers.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,301,25",
                      "text": "7,301,46,45",
                      "type": "7,301,16"
                    }
                  }
                ],
                "src": {
                  "access": "7,303,8",
                  "name": "7,302,16",
                  "since": "7,304,15",
                  "text": "7,296,8,177"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "invalidateInheritedState",
                "since": "5.0.0",
                "text": "This method marks the current inherited state as invalid. The next time a call is\nmade to `{@link #method!getInherited getInherited}` the objects will be recreated and initialized.\n",
                "src": {
                  "access": "7,310,8",
                  "name": "7,313,0",
                  "since": "7,311,15",
                  "text": "7,308,8,152"
                }
              },
              {
                "$type": "method",
                "name": "is",
                "text": "Tests whether this Widget matches a {@link Ext.ComponentQuery}\nselector string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector string to test against.\n",
                    "type": "String",
                    "src": {
                      "name": "2,442,24",
                      "text": "2,442,33,37",
                      "type": "2,442,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this Widget matches the selector.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,443,26,44",
                      "type": "2,443,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,445,0",
                  "text": "2,440,8,95"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "6,148,20",
                      "text": "6,148,30,71:6,149,4,18",
                      "type": "6,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "6,150,20",
                      "text": "6,150,27,50",
                      "type": "6,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "6,151,22,56",
                      "type": "6,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,106,12",
                  "text": "6,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "3,1344,29",
                      "text": "3,1344,36,40",
                      "type": "3,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,1345,30,31",
                      "type": "3,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1347,0",
                  "text": "3,1343,12,57"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isSyncing",
                "text": "Checks if a particular binding is synchronizing the value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property being bound to.\n",
                    "type": "String",
                    "src": {
                      "name": "1,770,28",
                      "text": "1,770,33,41",
                      "type": "1,770,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the binding is syncing.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,771,30,34",
                      "type": "1,771,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,499,-1",
                  "name": "1,775,0",
                  "text": "1,769,12,59"
                }
              },
              {
                "$type": "method",
                "name": "isXType",
                "text": "Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended\nfrom the xtype (default) or whether it is directly of the xtype specified (`shallow = true`).\n**If using your own subclasses, be aware that a Component must register its own xtype\nto participate in determination of inherited xtypes.__\n\nFor a list of all available xtypes, see the {@link Ext.Component} header.\n\nExample usage:\n\n    var t = new Ext.field.Text();\n    var isText = t.isXType('textfield'); // true\n    var isBoxSubclass = t.isXType('field'); // true, descended from Ext.field.Field\n    var isBoxInstance = t.isXType('field', true); // false, not a direct Ext.field.Field instance\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xtype",
                    "text": "The xtype to check for this Component.\n",
                    "type": "String",
                    "src": {
                      "name": "2,464,24",
                      "text": "2,464,30,39",
                      "type": "2,464,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "shallow",
                    "text": "(optional) `false` to check whether this Component is descended from the xtype (this is\nthe default), or `true` to check whether this Component is directly of the specified xtype.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,465,25",
                      "text": "2,465,33,88:2,466,8,92",
                      "type": "2,465,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this component descends from the specified xtype, `false` otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,467,26,79",
                      "type": "2,467,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,469,0",
                  "text": "2,450,8,703"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "5,1571,28",
                      "type": "5,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "5,1572,28",
                      "type": "5,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "5,1573,29,20",
                      "type": "5,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "5,1574,12",
                  "name": "5,1576,0",
                  "text": "5,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "lookupController",
                "since": "5.0.1",
                "text": "Gets the controller that controls this view. May be a controller that belongs\nto a view higher in the hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "`true` to not consider the controller directly attached\nto this view (if it exists).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,360,26",
                      "text": "1,360,42,56:1,361,8,29",
                      "type": "1,360,16",
                      "value": "1,360,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The controller. `{@link null}` if no controller is found.\n",
                    "type": "Ext.app.ViewController",
                    "src": {
                      "text": "1,362,41,50",
                      "type": "1,362,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,366,0",
                  "since": "1,364,15",
                  "text": "1,357,8,114"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "lookupReferenceHolder",
                "since": "5.0.0",
                "text": "Gets the Controller or Component that is used as the reference holder for this view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "`false` to return this as the reference holder if\nthis instance has set `referenceHolder`. Unlike `{@link #method!getInheritedConfig getInheritedConfig}` this method\ndefaults to `true` because it is possible that a `{@link #cfg!reference reference}` property set by the\nowner of a component that is also a `referenceHolder` itself. In this case, the\n`{@link #cfg!reference reference}` connects not to this component but to the parent referenceHolder.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "7,261,26",
                      "text": "7,261,41,50:7,262,8,321",
                      "type": "7,261,16",
                      "value": "7,261,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The reference holder.\n",
                    "type": "Ext.app.ViewController/Ext.container.Container",
                    "src": {
                      "text": "7,267,65,22",
                      "type": "7,267,17"
                    }
                  }
                ],
                "src": {
                  "access": "7,269,8",
                  "name": "7,272,0",
                  "since": "7,270,15",
                  "text": "7,259,8,86"
                }
              },
              {
                "$type": "method",
                "name": "lookupSession",
                "since": "5.0.0",
                "text": "Returns the `{@link Ext.data.Session}` for this instance. This property may come\nfrom this instance's `{@link #cfg!session #session}` or be inherited from this object's parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` to ignore a `{@link #cfg!session session}` configured on\nthis instance and only consider an inherited session.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,373,26",
                      "text": "1,373,42,48:1,374,8,54",
                      "type": "1,373,16",
                      "value": "1,373,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Session",
                    "src": {
                      "type": "1,375,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,378,0",
                  "since": "1,376,15",
                  "text": "1,371,8,156"
                }
              },
              {
                "$type": "method",
                "name": "lookupViewModel",
                "since": "5.0.0",
                "text": "Returns the `{@link Ext.app.ViewModel}` for this instance. This property may come from this\nthis instance's `{@link #cfg!viewModel #viewModel}` or be inherited from this object's parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` to ignore a `{@link #cfg!viewModel viewModel}` configured on\nthis instance and only consider an inherited view model.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,394,26",
                      "text": "1,394,42,50:1,395,8,57",
                      "type": "1,394,16",
                      "value": "1,394,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "type": "1,396,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,399,0",
                  "since": "1,397,15",
                  "text": "1,392,8,164"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "makeBindableUpdater",
                "since": "5.0.0",
                "text": "Returns an `update` method for the given Config that will call `{@link #method!publishState #publishState}`\nto ensure two-way bindings (via `{@link #cfg!bind bind}`) as well as any `{@link #cfg!publishes publishes}` are updated.\nThis method is cached on the `cfg` instance for re-use.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cfg",
                    "type": "Ext.Config",
                    "src": {
                      "name": "1,749,32",
                      "type": "1,749,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The updater function.\n",
                    "type": "Function",
                    "src": {
                      "text": "1,750,31,22",
                      "type": "1,750,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,751,12",
                  "name": "1,754,0",
                  "since": "1,752,19",
                  "text": "1,746,12,223"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for {@link #method!addManagedListener #addManagedListener}.\n",
                "src": {
                  "inheritdoc": "3,1787,12",
                  "name": "3,1789,0",
                  "text": "3,1786,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for {@link #method!removeManagedListener #removeManagedListener}.\n",
                "src": {
                  "inheritdoc": "3,1793,12",
                  "name": "3,1795,0",
                  "text": "3,1792,12,46"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "3,1775,12",
                  "name": "3,1777,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1190,44",
                      "text": "3,1190,54,37",
                      "type": "3,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1191,37",
                      "text": "3,1191,40,30",
                      "type": "3,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1192,29",
                      "text": "3,1192,36,20",
                      "type": "3,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1193,29",
                      "text": "3,1193,38,44",
                      "type": "3,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1195,0",
                  "text": "3,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1175,44",
                      "text": "3,1175,54,37",
                      "type": "3,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1176,37",
                      "text": "3,1176,40,30",
                      "type": "3,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1177,29",
                      "text": "3,1177,36,20",
                      "type": "3,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1178,29",
                      "text": "3,1178,38,44",
                      "type": "3,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1180,0",
                  "text": "3,1170,12,183"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onClick",
                "text": "Handles when this element is clicked.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,407,37",
                      "text": "0,407,39,11",
                      "type": "0,407,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,409,12",
                  "name": "0,411,0",
                  "text": "0,406,12,38"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onInheritedAdd",
                "text": "Called when this Inheritable is added to a parent\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "instanced",
                    "type": "Boolean",
                    "src": {
                      "name": "7,351,29",
                      "type": "7,351,20"
                    }
                  }
                ],
                "src": {
                  "access": "7,330,-1",
                  "name": "7,353,0",
                  "text": "7,350,12,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onInheritedRemove",
                "text": "Called when this inheritable is removed from a parent\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "destroying",
                    "text": "`true` if this item will be destroyed by it's container\n",
                    "type": "Boolean",
                    "src": {
                      "name": "7,369,29",
                      "text": "7,369,40,56",
                      "type": "7,369,20"
                    }
                  }
                ],
                "src": {
                  "access": "7,330,-1",
                  "name": "7,371,0",
                  "text": "7,368,12,54"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onNodeAppend",
                "text": "Handles a node being appended to a parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "parentNode",
                    "text": "The parent node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,451,40",
                      "text": "0,451,51,17",
                      "type": "0,451,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The appended node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,452,40",
                      "text": "0,452,45,19",
                      "type": "0,452,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,454,12",
                  "name": "0,456,0",
                  "text": "0,450,12,43"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onNodeCollapse",
                "text": "Handles when a node collapses.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,469,40",
                      "text": "0,469,45,10",
                      "type": "0,469,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,471,12",
                  "name": "0,473,0",
                  "text": "0,468,12,31"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onNodeExpand",
                "text": "Handles when a node expands.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,483,40",
                      "text": "0,483,45,10",
                      "type": "0,483,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,485,12",
                  "name": "0,487,0",
                  "text": "0,482,12,29"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onNodeInsert",
                "text": "Handles a node being inserted into a parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "parentNode",
                    "text": "The parent node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,512,40",
                      "text": "0,512,51,17",
                      "type": "0,512,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The inserted node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,513,40",
                      "text": "0,513,45,19",
                      "type": "0,513,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "refNode",
                    "text": "The node this was inserted before.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,514,40",
                      "text": "0,514,48,35",
                      "type": "0,514,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,516,12",
                  "name": "0,518,0",
                  "text": "0,511,12,45"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onNodeRemove",
                "text": "Handles a node being removed from a parent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "parentNode",
                    "text": "The parent node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,528,40",
                      "text": "0,528,51,17",
                      "type": "0,528,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The removed node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,529,40",
                      "text": "0,529,45,18",
                      "type": "0,529,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isMove",
                    "text": "`true` if this node is moving inside the tree.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,530,29",
                      "text": "0,530,36,47",
                      "type": "0,530,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,532,12",
                  "name": "0,534,0",
                  "text": "0,527,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onNodeUpdate",
                "text": "Handles when a node updates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store.\n",
                    "type": "Ext.data.TreeStore",
                    "src": {
                      "name": "0,549,40",
                      "text": "0,549,46,11",
                      "type": "0,549,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,550,40",
                      "text": "0,550,45,10",
                      "type": "0,550,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "type",
                    "text": "The update type.\n",
                    "type": "String",
                    "src": {
                      "name": "0,551,28",
                      "text": "0,551,33,17",
                      "type": "0,551,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "modifiedFieldNames",
                    "text": "The modified field names, if known.\n",
                    "type": "String[]",
                    "src": {
                      "name": "0,552,30",
                      "text": "0,552,49,36",
                      "type": "0,552,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,554,12",
                  "name": "0,556,0",
                  "text": "0,548,12,29"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onRootChange",
                "text": "Handles when the root node in the tree changes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "root",
                    "text": "The root.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,566,40",
                      "text": "0,566,45,10",
                      "type": "0,566,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,568,12",
                  "name": "0,570,0",
                  "text": "0,565,12,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onToolStripClick",
                "text": "Handles when the toolstrip has a click.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,606,37",
                      "text": "0,606,39,11",
                      "type": "0,606,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,608,12",
                  "name": "0,610,0",
                  "text": "0,605,12,40"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onToolStripMouseOver",
                "text": "Handles when the toolstrip has a mouseover.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,629,37",
                      "text": "0,629,39,11",
                      "type": "0,629,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,631,12",
                  "name": "0,633,0",
                  "text": "0,628,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "processElementConfig",
                "text": "Recursively processes the element templates for this class and its superclasses,\nascending the hierarchy until it reaches a superclass whose element template\nhas already been processed.  This method is invoked using the prototype as the scope.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "2,797,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,796,12",
                  "name": "2,799,0",
                  "text": "2,792,12,245"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "6,220,20",
                      "text": "6,220,25,34",
                      "type": "6,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "6,221,22,57:6,222,4,22",
                      "type": "6,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,155,12",
                  "text": "6,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "publishState",
                "since": "5.0.0",
                "text": "Publish this components state to the `ViewModel`. If no arguments are given (or if\nthis is the first call), the entire state is published. This state is determined by\nthe `{@link #cfg!publishes publishes}` property.\n\nThis method is called only by component authors.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "optional": true,
                    "text": "The name of the property to update.\n",
                    "type": "String",
                    "src": {
                      "name": "1,422,25",
                      "text": "1,422,35,36",
                      "type": "1,422,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value of `property`. Only needed if `property` is given.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,423,25",
                      "text": "1,423,32,61",
                      "type": "1,423,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,424,8",
                  "name": "1,427,0",
                  "since": "1,425,15",
                  "text": "1,416,8,244"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1466,27",
                      "text": "3,1466,34,53",
                      "type": "3,1466,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "3,1467,36",
                      "text": "3,1467,43,58:3,1468,11,231",
                      "type": "3,1467,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1473,28",
                      "text": "3,1473,36,60:3,1474,11,164",
                      "type": "3,1473,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the `{@link #method!destroy destroy}` method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1479,28,130:3,1480,11,192",
                      "type": "3,1479,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1490,0",
                  "text": "3,1453,11,651"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for {@link #method!unAfter #unAfter}.\n",
                "src": {
                  "name": "3,1248,0",
                  "text": "3,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for {@link #method!unBefore #unBefore}.\n",
                "src": {
                  "name": "3,1242,0",
                  "text": "3,1240,12,29"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeDelegatedListener",
                "text": "Removes delegated listeners for a given eventName, function, and scope.\nUsers should not invoke this method directly.  It is called automatically by\nthe framework as part of {@link #method!removeListener #removeListener} processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "4,129,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "4,129,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "4,129,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,124,12",
                  "name": "4,129,0",
                  "text": "4,125,12,210"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeItem",
                "text": "Removes a list item.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node backing the item.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,582,40",
                      "text": "0,582,45,27",
                      "type": "0,582,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,584,12",
                  "name": "0,586,0",
                  "text": "0,581,12,21"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1102,28",
                      "text": "3,1102,38,51",
                      "type": "3,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "3,1103,30",
                      "text": "3,1103,33,66:3,1104,12,76",
                      "type": "3,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1106,28",
                      "text": "3,1106,34,62:3,1107,12,1017",
                      "type": "3,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1145,0",
                  "text": "3,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the {@link #method!mon #mon} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "3,526,56",
                      "text": "3,526,61,52",
                      "type": "3,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "3,527,34",
                      "text": "3,527,40,63",
                      "type": "3,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,528,29",
                      "text": "3,528,32,85",
                      "type": "3,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,529,27",
                      "text": "3,529,33,92:3,530,11,43",
                      "type": "3,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,532,0",
                  "text": "3,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1307,28",
                      "text": "3,1307,36,44",
                      "type": "3,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1308,27",
                      "text": "3,1308,43,26:3,1309,11,41",
                      "type": "3,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,1306,11",
                  "name": "3,1311,0",
                  "text": "3,1305,11,38"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "3,579,29",
                      "text": "3,579,48,46",
                      "type": "3,579,20",
                      "value": "3,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "3,580,29,24",
                      "type": "3,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,581,12",
                  "name": "3,583,0",
                  "text": "3,577,12,102"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveSatelliteListenerScope",
                "since": "5.1.1",
                "text": "Returns the default listener scope for a \"satellite\" of this component.\nUsed for resolving scope for observable objects that are not part of the normal\nContainer/Component hierarchy (for example, plugins)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "satellite",
                    "type": "Ext.mixin.Observable",
                    "src": {
                      "name": "7,227,38",
                      "type": "7,227,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "7,228,25",
                      "type": "7,228,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The listener scope\n",
                    "type": "Object",
                    "src": {
                      "text": "7,229,25,19",
                      "type": "7,229,17"
                    }
                  }
                ],
                "src": {
                  "access": "7,230,8",
                  "name": "7,233,0",
                  "since": "7,231,15",
                  "text": "7,223,8,206"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the {@link #method!suspendEvent #suspendEvent} method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "3,1409,32",
                      "text": "3,1409,42,32",
                      "type": "3,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1411,0",
                  "text": "3,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see {@link #method!suspendEvents #suspendEvents}).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See {@link #method!suspendEvents #suspendEvents}.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1431,29",
                      "text": "3,1431,43,59:3,1432,11,53",
                      "type": "3,1431,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,1434,0",
                  "text": "3,1426,11,198"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "5,1478,35",
                      "text": "5,1478,40,69",
                      "type": "5,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,1479,29",
                      "text": "5,1479,36,41",
                      "type": "5,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "5,1480,31,5",
                      "type": "5,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "5,1482,0",
                  "text": "5,1476,12,46"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.  In\nversions prior to 5.1, {@link #cfg!listeners #listeners} had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the {@link #method!on #on} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1804,28",
                      "text": "3,1804,38,14",
                      "type": "3,1804,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1806,0",
                  "text": "3,1798,12,402"
                }
              },
              {
                "$type": "method",
                "name": "setSize",
                "text": "Sets the size of the Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width for the Component.\n",
                    "type": "Number",
                    "src": {
                      "name": "2,496,24",
                      "text": "2,496,30,33",
                      "type": "2,496,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height for the Component.\n",
                    "type": "Number",
                    "src": {
                      "name": "2,497,24",
                      "text": "2,497,31,34",
                      "type": "2,497,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,499,0",
                  "text": "2,495,8,32"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "5,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "5,1160,12",
                  "name": "5,1163,0",
                  "text": "5,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n{@link #method!resumeEvent #resumeEvent} will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "3,1381,32",
                      "text": "3,1381,42,33",
                      "type": "3,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1383,0",
                  "text": "3,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see {@link #method!resumeEvents #resumeEvents})\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the {@link #method!resumeEvents #resumeEvents} call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1363,28",
                      "text": "3,1363,43,48:3,1364,11,81",
                      "type": "3,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,1366,0",
                  "text": "3,1361,11,64"
                }
              },
              {
                "$type": "method",
                "name": "toggleCls",
                "text": "Toggles the specified CSS class on this element (removes it if it already exists,\notherwise adds it).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The CSS class to toggle.\n",
                    "type": "String",
                    "src": {
                      "name": "2,481,24",
                      "text": "2,481,34,25",
                      "type": "2,481,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "optional": true,
                    "text": "If specified as `true`, causes the class to be added. If\nspecified as `false`, causes the class to be removed.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,482,26",
                      "text": "2,482,33,57:2,483,8,54",
                      "type": "2,482,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,485,0",
                  "text": "2,479,8,102"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "6,235,21,32",
                      "type": "6,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,226,12",
                  "text": "6,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "6,297,21,32",
                      "type": "6,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,239,12",
                  "text": "6,240,4,2445"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for {@link #method!removeListener #removeListener}.\n",
                "src": {
                  "inheritdoc": "3,1781,12",
                  "name": "3,1783,0",
                  "text": "3,1780,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1218,44",
                      "text": "3,1218,54,55",
                      "type": "3,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1219,37",
                      "text": "3,1219,40,23",
                      "type": "3,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1220,29",
                      "text": "3,1220,36,41",
                      "type": "3,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1221,29",
                      "text": "3,1221,38,22",
                      "type": "3,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1223,0",
                  "text": "3,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1204,44",
                      "text": "3,1204,54,55",
                      "type": "3,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1205,37",
                      "text": "3,1205,40,23",
                      "type": "3,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1206,29",
                      "text": "3,1206,36,41",
                      "type": "3,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1207,29",
                      "text": "3,1207,38,22",
                      "type": "3,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1209,0",
                  "text": "3,1200,12,98"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "5,1589,30",
                      "text": "5,1589,36,44",
                      "type": "5,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "5,1590,31,5",
                      "type": "5,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "5,1591,12",
                  "name": "5,1593,0",
                  "text": "5,1587,12,138"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "updateHeight",
                "items": [
                  {
                    "$type": "param",
                    "name": "height",
                    "src": {
                      "name": "2,540,15"
                    }
                  }
                ],
                "src": {
                  "access": "2,541,8",
                  "name": "2,543,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateSession",
                "text": "Updates the session config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "session",
                    "type": "Ext.data.Session",
                    "src": {
                      "name": "1,814,38",
                      "type": "1,814,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,815,12",
                  "name": "1,817,0",
                  "text": "1,813,12,28"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "updateStyle",
                "items": [
                  {
                    "$type": "param",
                    "name": "style",
                    "src": {
                      "name": "2,527,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,525,8",
                  "name": "2,527,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateViewModel",
                "text": "Updates the viewModel config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "viewModel",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "name": "1,829,39",
                      "type": "1,829,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldViewModel",
                    "type": "Ext.app.ViewModel",
                    "src": {
                      "name": "1,830,39",
                      "type": "1,830,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,831,12",
                  "name": "1,833,0",
                  "text": "1,828,12,30"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "updateWidth",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "src": {
                      "name": "2,532,15"
                    }
                  }
                ],
                "src": {
                  "access": "2,533,8",
                  "name": "2,535,0"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "6,340,21,50",
                      "type": "6,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,301,12",
                  "text": "6,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "5,1049,13",
                  "name": "5,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "5,1066,12",
                  "name": "5,1062,33",
                  "since": "5,1067,19",
                  "text": "5,1063,12,225",
                  "type": "5,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "5,1076,12",
                  "name": "5,1072,33",
                  "since": "5,1077,19",
                  "text": "5,1073,12,229",
                  "type": "5,1072,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "3,389,12",
                  "name": "3,392,0",
                  "text": "3,390,12,126"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "6,346,14",
                  "text": "6,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "defaultBindProperty",
                "optional": true,
                "text": "This property is used to determine the property of a `{@link #cfg!bind bind}` config that is just\nthe value. For example, if `defaultBindProperty=\"value\"`, then this shorthand\n`{@link #cfg!bind bind}` config:\n\n     bind: '{name}'\n\nIs equivalent to this object form:\n\n     bind: {\n         value: '{name}'\n     }\n\nThe `{@link #property!defaultBindProperty defaultBindProperty}` is set to \"value\" for form fields and to \"store\" for\ngrids and trees.\n",
                "type": "String",
                "src": {
                  "access": "1,295,8",
                  "name": "1,280,28",
                  "text": "1,281,8,373",
                  "type": "1,280,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "5,1102,12",
                  "name": "5,1100,32",
                  "text": "5,1101,12,69",
                  "type": "5,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "element",
                "text": "A configuration object for Ext.Element.create() that is used to create the Element\ntemplate.  Supports all the standard options of a Ext.Element.create() config and\nadds 2 additional options:\n\n1. `{@link #cfg!reference reference}` - this option specifies a name for Element references.  These\nreferences names become properties of the Widget instance and refer to Ext.Element\ninstances that were created using the template:\n\n    element: {\n        reference: 'element',\n        children: [{\n            reference: 'innerElement'\n        }]\n    }\n\nAfter construction of a widget the reference elements are accessible as follows:\n\n    var foo = new FooWidget(),\n        innerEl = foo.innerEl; // an Ext.Element that wraps the innerElement\n\nThe reference attribute is optional, but all Widgets must have a `'element'`\nreference on some element within the template (usually the outermost one).\n\n2. `{@link #cfg!listeners listeners}` - a standard listeners object as specified by {@link Ext.mixin.Observable}.\n\n    element: {\n        reference: 'element',\n        listeners: {\n            click: 'onClick'\n        },\n        children: [{\n            reference: 'innerElement',\n            listeners: {\n                click: 'onInnerClick'\n            }\n        }]\n    }\n\nSince listeners cannot be attached without an Ext.Element reference the `{@link #cfg!reference reference}`\nproperty MUST be specified in order to use `{@link #cfg!listeners listeners}`.\n\nThe Widget instance is used as the scope for all listeners specified in this way,\nso it is invalid to use the `scope` option in the `{@link #cfg!listeners listeners}` config since it will\nalways be overwritten using `this`.\n",
                "type": "Object",
                "src": {
                  "access": "2,116,8",
                  "name": "2,70,27",
                  "text": "2,71,8,1563",
                  "type": "2,70,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when {@link #method!suspendEvents #suspendEvents} is called, decremented when {@link #method!resumeEvents #resumeEvents} is called.\n",
                "src": {
                  "access": "3,284,11",
                  "name": "3,287,0",
                  "text": "3,285,11,131"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via {@link #observe}) or\non the {@link Ext.app.EventBus}. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "3,290,30",
                  "readonly": "3,291,11",
                  "text": "3,292,11,790",
                  "type": "3,290,22"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "5,1084,12",
                  "name": "5,1082,32",
                  "readonly": "5,1085,12",
                  "since": "5,1086,19",
                  "text": "5,1083,12,64",
                  "type": "5,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "5,1093,12",
                  "name": "5,1091,32",
                  "readonly": "5,1094,12",
                  "since": "5,1095,19",
                  "text": "5,1092,12,75",
                  "type": "5,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "5,1056,12",
                  "name": "5,1053,32",
                  "readonly": "5,1057,12",
                  "text": "5,1054,12,94",
                  "type": "5,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,278,31",
                  "text": "3,279,11,95",
                  "type": "3,278,22"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "6,46,14",
                  "text": "6,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "5,1413,12",
                  "name": "5,1379,34",
                  "text": "5,1380,12,1011",
                  "type": "5,1379,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "template",
                "text": "An array of child elements to use as the children of the main element in the {@link #property!element #element} template.  Only used if \"children\" are not specified explicitly in the\n{@link #property!element #element} template.\n",
                "type": "Array",
                "src": {
                  "access": "2,198,8",
                  "name": "2,194,26",
                  "text": "2,195,8,192",
                  "type": "2,194,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "validRefRe",
                "text": "Regular expression used for validating `{@link #cfg!reference reference}` values.\n",
                "type": "RegExp",
                "src": {
                  "access": "1,302,8",
                  "name": "1,304,0",
                  "text": "1,301,8,59",
                  "type": "1,300,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "5,940,28",
                      "type": "5,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "5,941,32",
                      "text": "5,941,44,49",
                      "type": "5,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "5,942,12",
                  "inheritable": "5,944,12",
                  "name": "5,946,0",
                  "static": "5,943,12",
                  "text": "5,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "5,464,28",
                      "type": "5,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "5,461,12",
                  "inheritable": "5,463,12",
                  "name": "5,466,0",
                  "static": "5,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "5,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "5,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "5,659,12",
                  "inheritable": "5,661,12",
                  "name": "5,665,0",
                  "static": "5,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,522,28",
                      "text": "5,522,36,34",
                      "type": "5,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "5,523,30",
                      "text": "5,523,46,39",
                      "type": "5,523,20",
                      "value": "5,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "5,524,30",
                      "text": "5,524,45,45:5,525,12,53",
                      "type": "5,524,20",
                      "value": "5,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "5,527,12",
                  "name": "5,529,0",
                  "static": "5,526,12",
                  "text": "5,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "5,450,28",
                      "type": "5,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "5,451,31,5",
                      "type": "5,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "5,453,12",
                  "name": "5,455,0",
                  "static": "5,452,12",
                  "text": "5,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "5,693,30",
                      "text": "5,693,40,33",
                      "type": "5,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "5,694,34",
                      "text": "5,694,42,35",
                      "type": "5,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "5,695,31,5",
                      "type": "5,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "5,698,12",
                  "inheritable": "5,697,12",
                  "name": "5,700,0",
                  "static": "5,696,12",
                  "text": "5,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "5,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,810,12",
                  "inheritable": "5,812,12",
                  "name": "5,814,0",
                  "static": "5,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "5,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,824,12",
                  "inheritable": "5,826,12",
                  "name": "5,828,0",
                  "static": "5,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "5,107,29,22",
                      "type": "5,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "5,109,12",
                  "name": "5,111,0",
                  "static": "5,108,12",
                  "text": "5,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "5,1018,35",
                      "text": "5,1018,41,63:5,1019,12,43",
                      "type": "5,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "5,1020,35",
                      "text": "5,1020,42,25",
                      "type": "5,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "5,1022,12",
                  "name": "5,1025,0",
                  "static": "5,1021,12",
                  "text": "5,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "5,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "5,347,12",
                  "inheritable": "5,349,12",
                  "name": "5,352,0",
                  "static": "5,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "5,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "5,968,12",
                  "inheritable": "5,970,12",
                  "name": "5,972,0",
                  "static": "5,969,12",
                  "text": "5,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "5,989,29,10",
                      "type": "5,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "5,991,12",
                  "name": "5,993,0",
                  "static": "5,990,12",
                  "text": "5,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "5,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "5,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,840,12",
                  "inheritable": "5,842,12",
                  "name": "5,844,0",
                  "static": "5,841,12",
                  "text": "5,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "5,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "5,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,424,12",
                  "inheritable": "5,426,12",
                  "name": "5,428,0",
                  "static": "5,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,762,28",
                      "text": "5,762,36,52:5,763,12,66",
                      "type": "5,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "5,764,31,11",
                      "type": "5,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "5,766,12",
                  "name": "5,768,0",
                  "static": "5,765,12",
                  "text": "5,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "5,402,12",
                  "inheritable": "5,404,12",
                  "name": "5,406,0",
                  "static": "5,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "5,395,12",
                  "inheritable": "5,397,12",
                  "name": "5,399,0",
                  "static": "5,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,7,0",
          "extends": "0,6,0",
          "name": "0,5,0",
          "requires": "0,10,0",
          "since": "0,3,11",
          "text": "0,2,4,68"
        }
      }
    ]
  },
  "version": 1
}