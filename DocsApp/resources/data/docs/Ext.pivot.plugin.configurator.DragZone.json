{
  "$type": "doxi",
  "files": [
    "../../../packages/pivot/src/pivot/plugin/configurator/DragZone.js",
    "../../../ext/classic/classic/src/dd/DragSource.js",
    "../../../ext/classic/classic/src/dd/DragZone.js",
    "../../../ext/classic/classic/src/dd/DDProxy.js",
    "../../../ext/classic/classic/src/dd/DragDrop.js",
    "../../../ext/classic/classic/src/dd/DD.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extended": "Ext.dd.DragZone,Ext.dd.DragSource,Ext.dd.DDProxy,Ext.dd.DD,Ext.dd.DragDrop,Object",
        "extends": "Ext.dd.DragZone",
        "name": "Ext.pivot.plugin.configurator.DragZone",
        "text": "This class is used for managing the drag zone for each container.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "animRepair",
                "text": "If true, animates the proxy element back to the position of the handle element used to trigger the drag.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,36,23",
                  "text": "1,37,8,105",
                  "type": "1,36,14"
                }
              },
              {
                "$type": "property",
                "name": "containerScroll",
                "text": "True to register this container with the Scrollmanager for auto scrolling during drag operations.\nA <a href='#!/api/Ext.dd.ScrollManager'>Ext.dd.ScrollManager</a> configuration may also be passed.\n",
                "type": "Object/Boolean",
                "src": {
                  "name": "2,86,30",
                  "text": "2,87,8,163",
                  "type": "2,86,14"
                }
              },
              {
                "$type": "property",
                "name": "ddGroup",
                "text": "A named drag drop group to which this object belongs.  If a group is specified, then this object will only\ninteract with other drag drop objects in the same group.\n",
                "type": "String",
                "src": {
                  "name": "1,12,22",
                  "text": "1,13,8,164",
                  "type": "1,12,14"
                }
              },
              {
                "$type": "property",
                "name": "dropAllowed",
                "text": "The CSS class returned to the drag source when drop is allowed.\n",
                "type": "String",
                "src": {
                  "name": "1,25,22",
                  "text": "1,26,8,64",
                  "type": "1,25,14"
                }
              },
              {
                "$type": "property",
                "name": "dropNotAllowed",
                "text": "The CSS class returned to the drag source when drop is not allowed.\n",
                "type": "String",
                "src": {
                  "name": "1,30,22",
                  "text": "1,31,8,68",
                  "type": "1,30,14"
                }
              },
              {
                "$type": "property",
                "name": "repairHighlightColor",
                "text": "The color to use when visually highlighting the drag source in the afterRepair\nmethod after a failed drop (defaults to light blue). The color must be a 6 digit hex value, without\na preceding '#'.\n",
                "type": "String",
                "src": {
                  "name": "1,42,22",
                  "text": "1,43,8,196",
                  "type": "1,42,14"
                }
              },
              {
                "$type": "property",
                "name": "scrollEl",
                "text": "An element to register with the ScrollManager if <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-cfg-containerScroll'>containerScroll</a>\nis set. Defaults to the drag element.\n",
                "type": "String/HTMLElement/Ext.dom.Element",
                "src": {
                  "name": "2,92,50",
                  "text": "2,93,8,112",
                  "type": "2,92,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_resizeProxy",
                "text": "The proxy is automatically resized to the dimensions of the linked\nelement when a drag is initiated, unless resizeFrame is set to false\n",
                "src": {
                  "access": "3,143,8",
                  "name": "3,145,0",
                  "text": "3,141,8,136"
                }
              },
              {
                "$type": "method",
                "name": "addInvalidHandleClass",
                "text": "Lets you specify a css class of elements that will not initiate a drag\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cssClass",
                    "text": "the class of the elements you wish to ignore\n",
                    "type": "String",
                    "src": {
                      "name": "4,867,24",
                      "text": "4,867,33,45",
                      "type": "4,867,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,869,0",
                  "text": "4,866,8,71"
                }
              },
              {
                "$type": "method",
                "name": "addInvalidHandleId",
                "text": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the element id of the element you wish to ignore\n",
                    "type": "String",
                    "src": {
                      "name": "4,856,24",
                      "text": "4,856,27,49",
                      "type": "4,856,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,855,16",
                  "text": "4,853,8,95"
                }
              },
              {
                "$type": "method",
                "name": "addInvalidHandleType",
                "text": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "tagName",
                    "text": "the type of element to exclude\n",
                    "type": "String",
                    "src": {
                      "name": "4,845,24",
                      "text": "4,845,32,31",
                      "type": "4,845,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,844,16",
                  "text": "4,841,8,200"
                }
              },
              {
                "$type": "method",
                "name": "addToGroup",
                "text": "Adds this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "the name of the group\n",
                    "type": "String",
                    "src": {
                      "name": "4,711,24",
                      "text": "4,711,31,22",
                      "type": "4,711,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,713,0",
                  "text": "4,708,8,149"
                }
              },
              {
                "$type": "method",
                "name": "afterDragDrop",
                "text": "An empty function by default, but provided so that you can perform a custom action\nafter a valid drag drop has occurred by providing an implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The drop target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "1,221,45",
                      "text": "1,221,52,16",
                      "type": "1,221,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,222,35",
                      "text": "1,222,37,17",
                      "type": "1,222,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dropped element\n",
                    "type": "String",
                    "src": {
                      "name": "1,223,36",
                      "text": "1,223,39,30",
                      "type": "1,223,28"
                    }
                  }
                ],
                "src": {
                  "name": "1,224,28",
                  "text": "1,219,20,152"
                }
              },
              {
                "$type": "method",
                "name": "afterDragEnter",
                "text": "An empty function by default, but provided so that you can perform a custom action\nwhen the dragged item enters the drop target by providing an implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The drop target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "1,101,45",
                      "text": "1,101,52,16",
                      "type": "1,101,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,102,35",
                      "text": "1,102,37,17",
                      "type": "1,102,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dragged element\n",
                    "type": "String",
                    "src": {
                      "name": "1,103,36",
                      "text": "1,103,39,30",
                      "type": "1,103,28"
                    }
                  }
                ],
                "src": {
                  "name": "1,104,28",
                  "text": "1,99,20,160"
                }
              },
              {
                "$type": "method",
                "name": "afterDragOut",
                "text": "An empty function by default, but provided so that you can perform a custom action\nafter the dragged item is dragged out of the target without dropping.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The drop target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "1,177,45",
                      "text": "1,177,52,16",
                      "type": "1,177,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,178,35",
                      "text": "1,178,37,17",
                      "type": "1,178,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dragged element\n",
                    "type": "String",
                    "src": {
                      "name": "1,179,36",
                      "text": "1,179,39,30",
                      "type": "1,179,28"
                    }
                  }
                ],
                "src": {
                  "name": "1,180,28",
                  "text": "1,175,20,153"
                }
              },
              {
                "$type": "method",
                "name": "afterDragOver",
                "text": "An empty function by default, but provided so that you can perform a custom action\nwhile the dragged item is over the drop target by providing an implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The drop target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "1,140,45",
                      "text": "1,140,52,16",
                      "type": "1,140,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,141,35",
                      "text": "1,141,37,17",
                      "type": "1,141,28"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dragged element\n",
                    "type": "String",
                    "src": {
                      "name": "1,142,36",
                      "text": "1,142,39,30",
                      "type": "1,142,28"
                    }
                  }
                ],
                "src": {
                  "name": "1,143,28",
                  "text": "1,138,20,162"
                }
              },
              {
                "$type": "method",
                "name": "afterInvalidDrop",
                "text": "An empty function by default, but provided so that you can perform a custom action\nafter an invalid drop has occurred by providing an implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,297,34",
                      "text": "1,297,36,17",
                      "type": "1,297,27"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dropped element\n",
                    "type": "String",
                    "src": {
                      "name": "1,298,35",
                      "text": "1,298,38,30",
                      "type": "1,298,27"
                    }
                  }
                ],
                "src": {
                  "name": "1,299,27",
                  "text": "1,295,19,150"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterRepair",
                "src": {
                  "access": "1,307,8",
                  "name": "1,309,0"
                }
              },
              {
                "$type": "method",
                "name": "afterValidDrop",
                "text": "An empty function by default, but provided so that you can perform a custom action\nafter a valid drop has occurred by providing an implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The target DD\n",
                    "type": "Object",
                    "src": {
                      "name": "1,254,32",
                      "text": "1,254,39,14",
                      "type": "1,254,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,255,31",
                      "text": "1,255,33,17",
                      "type": "1,255,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dropped element\n",
                    "type": "String",
                    "src": {
                      "name": "1,256,32",
                      "text": "1,256,35,30",
                      "type": "1,256,24"
                    }
                  }
                ],
                "src": {
                  "name": "1,257,24",
                  "text": "1,252,16,147"
                }
              },
              {
                "$type": "method",
                "name": "alignElWithMouse",
                "text": "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "the element to move\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "5,83,29",
                      "text": "5,83,32,20",
                      "type": "5,83,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iPageX",
                    "text": "the X coordinate of the mousedown or drag event\n",
                    "type": "Number",
                    "src": {
                      "name": "5,84,24",
                      "text": "5,84,31,48",
                      "type": "5,84,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iPageY",
                    "text": "the Y coordinate of the mousedown or drag event\n",
                    "type": "Number",
                    "src": {
                      "name": "5,85,24",
                      "text": "5,85,31,48",
                      "type": "5,85,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,87,0",
                  "text": "5,79,8,250"
                }
              },
              {
                "$type": "method",
                "name": "applyConfig",
                "text": "Sets up config options specific to this class. Overrides\nExt.dd.DragDrop, but all versions of this method through the\ninheritance chain are called\n",
                "src": {
                  "name": "5,250,0",
                  "text": "5,246,8,147"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "autoOffset",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "1,441,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "1,441,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,439,8",
                  "name": "1,441,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "autoScroll",
                "text": "Auto-scroll the window if the dragged object has been moved beyond the\nvisible window boundary.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "the drag element's x position\n",
                    "type": "Number",
                    "src": {
                      "name": "5,145,24",
                      "text": "5,145,26,30",
                      "type": "5,145,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "the drag element's y position\n",
                    "type": "Number",
                    "src": {
                      "name": "5,146,24",
                      "text": "5,146,26,30",
                      "type": "5,146,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "h",
                    "text": "the height of the drag element\n",
                    "type": "Number",
                    "src": {
                      "name": "5,147,24",
                      "text": "5,147,26,31",
                      "type": "5,147,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "w",
                    "text": "the width of the drag element\n",
                    "type": "Number",
                    "src": {
                      "name": "5,148,24",
                      "text": "5,148,26,30",
                      "type": "5,148,16"
                    }
                  }
                ],
                "src": {
                  "access": "5,149,8",
                  "name": "5,151,0",
                  "text": "5,143,8,96"
                }
              },
              {
                "$type": "method",
                "name": "b4Drag",
                "text": "Event that fires prior to the onDrag event.  Overrides\nExt.dd.DragDrop.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "5,269,0"
                    }
                  }
                ],
                "src": {
                  "name": "5,269,0",
                  "text": "5,266,8,72"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4DragDrop",
                "text": "Code that executes immediately before the onDragDrop event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "4,390,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,388,8",
                  "name": "4,390,0",
                  "text": "4,387,8,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4DragOut",
                "text": "Code that executes immediately before the onDragOut event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "4,375,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,373,8",
                  "name": "4,375,0",
                  "text": "4,372,8,58"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4DragOver",
                "text": "Code that executes immediately before the onDragOver event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "4,359,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,357,8",
                  "name": "4,359,0",
                  "text": "4,356,8,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4EndDrag",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,422,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,420,8",
                  "name": "1,422,0"
                }
              },
              {
                "$type": "method",
                "name": "b4MouseDown",
                "text": "Event that fires prior to the onMouseDown event.  Overrides\nExt.dd.DragDrop.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "5,259,0"
                    }
                  }
                ],
                "src": {
                  "name": "5,259,0",
                  "text": "5,256,8,77"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "b4StartDrag",
                "text": "Code that executes immediately before the startDrag event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "4,322,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "4,322,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,320,8",
                  "name": "4,322,0",
                  "text": "4,319,8,58"
                }
              },
              {
                "$type": "method",
                "name": "beforeDragDrop",
                "template": true,
                "text": "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dropped onto the target and optionally cancel the onDragDrop.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The drop target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "1,235,33",
                      "text": "1,235,40,16",
                      "type": "1,235,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,236,23",
                      "text": "1,236,25,17",
                      "type": "1,236,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dragged element\n",
                    "type": "String",
                    "src": {
                      "name": "1,237,24",
                      "text": "1,237,27,30",
                      "type": "1,237,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "isValid True if the drag drop event is valid, else false to cancel\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,238,26,67",
                      "type": "1,238,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,241,0",
                  "template": "1,239,8",
                  "text": "1,233,8,172"
                }
              },
              {
                "$type": "method",
                "name": "beforeDragEnter",
                "template": true,
                "text": "An empty function by default, but provided so that you can perform a custom action\nbefore the dragged item enters the drop target and optionally cancel the onDragEnter.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The drop target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "1,114,33",
                      "text": "1,114,40,16",
                      "type": "1,114,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,115,23",
                      "text": "1,115,25,17",
                      "type": "1,115,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dragged element\n",
                    "type": "String",
                    "src": {
                      "name": "1,116,24",
                      "text": "1,116,27,30",
                      "type": "1,116,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "isValid True if the drag event is valid, else false to cancel\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,117,26,62",
                      "type": "1,117,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,120,0",
                  "template": "1,118,8",
                  "text": "1,112,8,169"
                }
              },
              {
                "$type": "method",
                "name": "beforeDragOut",
                "template": true,
                "text": "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dragged out of the target without dropping, and optionally cancel the onDragOut.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The drop target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "1,191,33",
                      "text": "1,191,40,16",
                      "type": "1,191,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,192,23",
                      "text": "1,192,25,17",
                      "type": "1,192,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dragged element\n",
                    "type": "String",
                    "src": {
                      "name": "1,193,24",
                      "text": "1,193,27,30",
                      "type": "1,193,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "isValid True if the drag event is valid, else false to cancel\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,194,26,62",
                      "type": "1,194,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,197,0",
                  "template": "1,195,8",
                  "text": "1,189,8,191"
                }
              },
              {
                "$type": "method",
                "name": "beforeDragOver",
                "template": true,
                "text": "An empty function by default, but provided so that you can perform a custom action\nwhile the dragged item is over the drop target and optionally cancel the onDragOver.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The drop target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "1,153,33",
                      "text": "1,153,40,16",
                      "type": "1,153,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,154,23",
                      "text": "1,154,25,17",
                      "type": "1,154,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dragged element\n",
                    "type": "String",
                    "src": {
                      "name": "1,155,24",
                      "text": "1,155,27,30",
                      "type": "1,155,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "isValid True if the drag event is valid, else false to cancel\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,156,26,62",
                      "type": "1,156,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,159,0",
                  "template": "1,157,8",
                  "text": "1,151,8,168"
                }
              },
              {
                "$type": "method",
                "name": "beforeInvalidDrop",
                "template": true,
                "text": "An empty function by default, but provided so that you can perform a custom action after an invalid\ndrop has occurred.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The drop target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "1,320,33",
                      "text": "1,320,40,16",
                      "type": "1,320,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,321,23",
                      "text": "1,321,25,17",
                      "type": "1,321,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the dragged element\n",
                    "type": "String",
                    "src": {
                      "name": "1,322,24",
                      "text": "1,322,27,30",
                      "type": "1,322,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "isValid True if the invalid drop should proceed, else false to cancel\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,323,26,70",
                      "type": "1,323,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,326,0",
                  "template": "1,324,8",
                  "text": "1,318,8,119"
                }
              },
              {
                "$type": "method",
                "name": "cachePosition",
                "text": "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iPageX",
                    "optional": true,
                    "text": "the current x position (this just makes it so we\ndon't have to look it up again)\n",
                    "type": "Number",
                    "src": {
                      "name": "5,126,25",
                      "text": "5,126,33,49:5,127,8,32",
                      "type": "5,126,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iPageY",
                    "optional": true,
                    "text": "the current y position (this just makes it so we\ndon't have to look it up again)\n",
                    "type": "Number",
                    "src": {
                      "name": "5,128,25",
                      "text": "5,128,33,49:5,129,8,32",
                      "type": "5,128,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,131,0",
                  "text": "5,122,8,213"
                }
              },
              {
                "$type": "method",
                "name": "clearConstraints",
                "text": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.\n",
                "src": {
                  "name": "4,1022,0",
                  "text": "4,1019,8,133"
                }
              },
              {
                "$type": "method",
                "name": "clearTicks",
                "text": "Clears any tick interval defined for this instance\n",
                "src": {
                  "name": "4,1031,0",
                  "text": "4,1029,8,51"
                }
              },
              {
                "$type": "method",
                "name": "constrainTo",
                "text": "Initializes the drag drop object's constraints to restrict movement to a certain element.\n\nUsage:\n\n    var dd = new Ext.dd.DDProxy(\"dragDiv1\", \"proxytest\",\n                   { dragElId: \"existingProxyDiv\" });\n    dd.startDrag = function(){\n        this.constrainTo(\"parent-id\");\n    };\n\nOr you can initalize it using the <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> object:\n\n    Ext.get(\"dragDiv1\").initDDProxy(\"proxytest\", {dragElId: \"existingProxyDiv\"}, {\n        startDrag : function(){\n            this.constrainTo(\"parent-id\");\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "text": "The element or element ID to constrain to.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "4,477,52",
                      "text": "4,477,64,43",
                      "type": "4,477,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "pad",
                    "text": "(optional) Pad provides a way to specify \"padding\" of the constraints,\nand can be either a number for symmetrical padding (4 would be equal to `{left:4, right:4, top:4, bottom:4}`) or\nan object containing the sides to pad. For example: `{right:10, bottom:10}`\n",
                    "type": "Object/Number",
                    "src": {
                      "name": "4,478,31",
                      "text": "4,478,35,71:4,479,8,189",
                      "type": "4,478,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "inContent",
                    "text": "(optional) Constrain the draggable in the content box of the element (inside padding and borders)\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,481,25",
                      "text": "4,481,35,98",
                      "type": "4,481,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,483,0",
                  "text": "4,459,8,532"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new DragZone.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The container element or ID of it.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "2,64,52",
                      "text": "2,64,55,35",
                      "type": "2,64,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "2,65,24",
                      "type": "2,65,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,67,0",
                  "text": "2,63,8,22"
                }
              },
              {
                "$type": "method",
                "name": "createFrame",
                "text": "Creates the proxy element if it does not yet exist\n",
                "src": {
                  "name": "3,68,0",
                  "text": "3,66,8,51"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "endDrag",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,426,8",
                  "name": "1,428,0"
                }
              },
              {
                "$type": "method",
                "name": "getDragData",
                "text": "Called when a mousedown occurs in this container. Looks in <a href='#!/api/Ext.dd.Registry'>Ext.dd.Registry</a> for a valid target to drag\nbased on the mouse down. Override this method to provide your own lookup logic (e.g. finding a child by class\nname). Make sure your returned object has a \"ddel\" attribute (with an HTML Element) for other functions to work.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The mouse down event\n",
                    "type": "Event",
                    "src": {
                      "name": "2,101,23",
                      "text": "2,101,25,21",
                      "type": "2,101,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The dragData\n",
                    "type": "Object",
                    "src": {
                      "text": "2,102,25,13",
                      "type": "2,102,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,104,0",
                  "text": "2,98,8,333"
                }
              },
              {
                "$type": "method",
                "name": "getDragEl",
                "text": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Ext.dd.DDProxy\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the html element\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "4,544,30,17",
                      "type": "4,544,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,546,0",
                  "text": "4,541,8,194"
                }
              },
              {
                "$type": "method",
                "name": "getEl",
                "text": "Returns a reference to the linked element\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the html element\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "4,530,30,17",
                      "type": "4,530,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,532,0",
                  "text": "4,529,8,42"
                }
              },
              {
                "$type": "method",
                "name": "getProxy",
                "text": "Returns the drag source's underlying <a href='#!/api/Ext.dd.StatusProxy'>Ext.dd.StatusProxy</a>\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "proxy The StatusProxy\n",
                    "type": "Ext.dd.StatusProxy",
                    "src": {
                      "text": "1,397,37,22",
                      "type": "1,397,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,399,0",
                  "text": "1,396,8,64"
                }
              },
              {
                "$type": "method",
                "name": "getRepairXY",
                "template": true,
                "text": "Called before a repair of an invalid drop to get the XY to animate to. By default returns the XY of\nthis.dragData.ddel\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The mouse up event\n",
                    "type": "Event",
                    "src": {
                      "name": "2,125,23",
                      "text": "2,125,25,19",
                      "type": "2,125,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The xy location (e.g. `[100, 200]`)\n",
                    "type": "Number[]",
                    "src": {
                      "text": "2,126,27,36",
                      "type": "2,126,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,129,0",
                  "template": "2,127,8",
                  "text": "2,123,8,119"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTargetCoord",
                "text": "Finds the location the element should be placed if we want to move\nit to where the mouse location less the click offset would place us.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iPageX",
                    "text": "the X coordinate of the click\n",
                    "type": "Number",
                    "src": {
                      "name": "5,209,24",
                      "text": "5,209,31,30",
                      "type": "5,209,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iPageY",
                    "text": "the Y coordinate of the click\n",
                    "type": "Number",
                    "src": {
                      "name": "5,210,24",
                      "text": "5,210,31,30",
                      "type": "5,210,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object that contains the coordinates (Object.x and Object.y)\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "x",
                        "type": "Number",
                        "src": {
                          "name": "5,212,32",
                          "type": "5,212,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "y",
                        "type": "Number",
                        "src": {
                          "name": "5,213,32",
                          "type": "5,213,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "5,211,25,64",
                      "type": "5,211,17"
                    }
                  }
                ],
                "src": {
                  "access": "5,214,8",
                  "name": "5,216,0",
                  "text": "5,207,8,136"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getTick",
                "text": "Normally the drag element is moved pixel by pixel, but we can specify\nthat it move a number of pixels at a time.  This method resolves the\nlocation when we have it set up like this.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "val",
                    "text": "where we want to place the object\n",
                    "type": "Number",
                    "src": {
                      "name": "4,1094,24",
                      "text": "4,1094,28,34",
                      "type": "4,1094,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "tickArray",
                    "text": "sorted array of valid points\n",
                    "type": "Number[]",
                    "src": {
                      "name": "4,1095,26",
                      "text": "4,1095,36,29",
                      "type": "4,1095,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the closest tick\n",
                    "type": "Number",
                    "src": {
                      "text": "4,1096,25,17",
                      "type": "4,1096,17"
                    }
                  }
                ],
                "src": {
                  "access": "4,1097,8",
                  "name": "4,1099,0",
                  "text": "4,1091,8,182"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleMouseDown",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,333,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,331,8",
                  "name": "1,333,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleOnAvailable",
                "text": "Executed when the linked element is available\n",
                "src": {
                  "access": "4,636,8",
                  "name": "4,638,0",
                  "text": "4,635,8,46"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "6,100,20",
                      "text": "6,100,25,34",
                      "type": "6,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "6,101,22,57:6,102,4,15",
                      "type": "6,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,53,12",
                  "text": "6,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "hideProxy",
                "text": "Hides the drag source's <a href='#!/api/Ext.dd.StatusProxy'>Ext.dd.StatusProxy</a>\n",
                "src": {
                  "name": "1,406,0",
                  "text": "1,404,8,51"
                }
              },
              {
                "$type": "method",
                "name": "init",
                "text": "Sets up the DragDrop object.  Must be called in the constructor of any\nExt.dd.DragDrop subclass\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the linked element\n",
                    "type": "String",
                    "src": {
                      "name": "4,553,24",
                      "text": "4,553,27,29",
                      "type": "4,553,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "the group of related items\n",
                    "type": "String",
                    "src": {
                      "name": "4,554,24",
                      "text": "4,554,31,27",
                      "type": "4,554,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "configuration attributes\n",
                    "type": "Object",
                    "src": {
                      "name": "4,555,24",
                      "text": "4,555,31,25",
                      "type": "4,555,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,557,0",
                  "text": "4,551,8,96"
                }
              },
              {
                "$type": "method",
                "name": "initFrame",
                "text": "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses\n",
                "src": {
                  "name": "3,104,0",
                  "text": "3,101,8,96"
                }
              },
              {
                "$type": "method",
                "name": "initTarget",
                "text": "Initializes Targeting functionality only... the object does not\nget a mousedown handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the linked element\n",
                    "type": "String",
                    "src": {
                      "name": "4,575,24",
                      "text": "4,575,27,29",
                      "type": "4,575,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "the group of related items\n",
                    "type": "String",
                    "src": {
                      "name": "4,576,24",
                      "text": "4,576,31,27",
                      "type": "4,576,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "configuration attributes\n",
                    "type": "Object",
                    "src": {
                      "name": "4,577,24",
                      "text": "4,577,31,25",
                      "type": "4,577,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,579,0",
                  "text": "4,573,8,89"
                }
              },
              {
                "$type": "method",
                "name": "isLocked",
                "text": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "true if this obj or all drag/drop is locked, else\nfalse\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,797,26,50:4,798,8,6",
                      "type": "4,797,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,800,0",
                  "text": "4,795,8,126"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "6,148,20",
                      "text": "6,148,30,71:6,149,4,18",
                      "type": "6,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "6,150,20",
                      "text": "6,150,27,50",
                      "type": "6,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "6,151,22,56",
                      "type": "6,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,106,12",
                  "text": "6,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isValidHandleChild",
                "text": "Checks the tag exclusion list to see if this click should be ignored\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "the HTMLElement to evaluate\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "4,913,29",
                      "text": "4,913,34,28",
                      "type": "4,913,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if this is a valid tag type, false if not\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,914,26,47",
                      "type": "4,914,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,916,0",
                  "text": "4,912,8,69"
                }
              },
              {
                "$type": "method",
                "name": "lock",
                "text": "Locks this instance\n",
                "src": {
                  "name": "4,178,0",
                  "text": "4,176,8,20"
                }
              },
              {
                "$type": "method",
                "name": "onAvailable",
                "text": "Override the onAvailable method to do what is needed after the initial\nposition was determined.\n",
                "src": {
                  "name": "4,444,0",
                  "text": "4,441,8,96"
                }
              },
              {
                "$type": "method",
                "name": "onBeforeDrag",
                "template": true,
                "text": "An empty function by default, but provided so that you can perform a custom action before the initial\ndrag event begins and optionally cancel it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "An object containing arbitrary data to be shared with drop targets\n",
                    "type": "Object",
                    "src": {
                      "name": "1,348,24",
                      "text": "1,348,29,67",
                      "type": "1,348,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Event",
                    "src": {
                      "name": "1,349,23",
                      "text": "1,349,25,17",
                      "type": "1,349,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "isValid True if the drag event is valid, else false to cancel\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,350,26,62",
                      "type": "1,350,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,353,0",
                  "template": "1,351,8",
                  "text": "1,346,8,146"
                }
              },
              {
                "$type": "method",
                "name": "onDrag",
                "text": "Abstract method called during the onMouseMove event while dragging an\nobject.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the mousemove event\n",
                    "type": "Event",
                    "src": {
                      "name": "4,341,23",
                      "text": "4,341,25,20",
                      "type": "4,341,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,343,0",
                  "text": "4,339,8,78"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onDragDrop",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,204,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "src": {
                      "name": "1,204,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,202,8",
                  "name": "1,204,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onDragEnter",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,85,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "src": {
                      "name": "1,85,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,83,8",
                  "name": "1,85,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onDragOut",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,166,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "src": {
                      "name": "1,166,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,164,8",
                  "name": "1,166,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onDragOver",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,127,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "src": {
                      "name": "1,127,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,125,8",
                  "name": "1,127,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onEndDrag",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "src": {
                      "name": "1,435,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,435,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,433,8",
                  "name": "1,435,0"
                }
              },
              {
                "$type": "method",
                "name": "onInitDrag",
                "template": true,
                "text": "Called once drag threshold has been reached to initialize the proxy element. By default, it clones the\nthis.dragData.ddel\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The x position of the click on the dragged object\n",
                    "type": "Number",
                    "src": {
                      "name": "2,111,24",
                      "text": "2,111,26,50",
                      "type": "2,111,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The y position of the click on the dragged object\n",
                    "type": "Number",
                    "src": {
                      "name": "2,112,24",
                      "text": "2,112,26,50",
                      "type": "2,112,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true to continue the drag, false to cancel\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,113,26,43",
                      "type": "2,113,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,116,0",
                  "template": "2,114,8",
                  "text": "2,109,8,122"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onInvalidDrop",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "1,273,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,273,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "src": {
                      "name": "1,273,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,271,8",
                  "name": "1,273,0"
                }
              },
              {
                "$type": "method",
                "name": "onMouseDown",
                "text": "Called when a drag/drop obj gets a mousedown\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the mousedown event\n",
                    "type": "Event",
                    "src": {
                      "name": "4,430,23",
                      "text": "4,430,25,20",
                      "type": "4,430,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,432,0",
                  "text": "4,429,8,45"
                }
              },
              {
                "$type": "method",
                "name": "onMouseUp",
                "text": "Called when a drag/drop obj gets a mouseup\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the mouseup event\n",
                    "type": "Event",
                    "src": {
                      "name": "4,436,23",
                      "text": "4,436,25,18",
                      "type": "4,436,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,438,0",
                  "text": "4,435,8,43"
                }
              },
              {
                "$type": "method",
                "name": "onStartDrag",
                "template": true,
                "text": "An empty function by default, but provided so that you can perform a custom action once the initial\ndrag event has begun.  The drag cannot be canceled from this function.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The x position of the click on the dragged object\n",
                    "type": "Number",
                    "src": {
                      "name": "1,360,24",
                      "text": "1,360,26,50",
                      "type": "1,360,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The y position of the click on the dragged object\n",
                    "type": "Number",
                    "src": {
                      "name": "1,361,24",
                      "text": "1,361,26,50",
                      "type": "1,361,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,365,0",
                  "template": "1,363,8",
                  "text": "1,358,8,171"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onValidDrop",
                "items": [
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "1,248,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "1,248,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "id",
                    "src": {
                      "name": "1,248,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,246,8",
                  "name": "1,248,0"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "6,220,20",
                      "text": "6,220,25,34",
                      "type": "6,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "6,221,22,57:6,222,4,22",
                      "type": "6,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,155,12",
                  "text": "6,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "removeFromGroup",
                "text": "Removes this instance from the supplied interaction group\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "The group to drop\n",
                    "type": "String",
                    "src": {
                      "name": "4,720,24",
                      "text": "4,720,31,18",
                      "type": "4,720,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,722,0",
                  "text": "4,719,8,58"
                }
              },
              {
                "$type": "method",
                "name": "removeInvalidHandleClass",
                "text": "Unsets an invalid css class\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cssClass",
                    "text": "the class of the element(s) you wish to\nre-enable\n",
                    "type": "String",
                    "src": {
                      "name": "4,896,24",
                      "text": "4,896,33,40:4,897,8,10",
                      "type": "4,896,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,899,0",
                  "text": "4,895,8,28"
                }
              },
              {
                "$type": "method",
                "name": "removeInvalidHandleId",
                "text": "Unsets an invalid handle id\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the element to re-enable\n",
                    "type": "String",
                    "src": {
                      "name": "4,885,24",
                      "text": "4,885,27,35",
                      "type": "4,885,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,887,0",
                  "text": "4,884,8,28"
                }
              },
              {
                "$type": "method",
                "name": "removeInvalidHandleType",
                "text": "Unsets an excluded tag name set by addInvalidHandleType\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "tagName",
                    "text": "the type of element to unexclude\n",
                    "type": "String",
                    "src": {
                      "name": "4,875,24",
                      "text": "4,875,32,33",
                      "type": "4,875,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,877,0",
                  "text": "4,874,8,56"
                }
              },
              {
                "$type": "method",
                "name": "resetConstraints",
                "text": "Must be called if you manually reposition a dd element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "maintainOffset",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1061,25",
                      "type": "4,1061,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,1063,0",
                  "text": "4,1060,8,56"
                }
              },
              {
                "$type": "method",
                "name": "setDelta",
                "text": "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iDeltaX",
                    "text": "the distance from the left\n",
                    "type": "Number",
                    "src": {
                      "name": "5,54,24",
                      "text": "5,54,32,27",
                      "type": "5,54,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iDeltaY",
                    "text": "the distance from the top\n",
                    "type": "Number",
                    "src": {
                      "name": "5,55,24",
                      "text": "5,55,32,26",
                      "type": "5,55,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,57,0",
                  "text": "5,51,8,162"
                }
              },
              {
                "$type": "method",
                "name": "setDragElId",
                "text": "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the element that will be used to initiate the drag\n",
                    "type": "String",
                    "src": {
                      "name": "4,733,24",
                      "text": "4,733,27,61",
                      "type": "4,733,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,735,0",
                  "text": "4,731,8,112"
                }
              },
              {
                "$type": "method",
                "name": "setDragElPos",
                "text": "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iPageX",
                    "text": "the X coordinate of the mousedown or drag event\n",
                    "type": "Number",
                    "src": {
                      "name": "5,67,24",
                      "text": "5,67,31,48",
                      "type": "5,67,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iPageY",
                    "text": "the Y coordinate of the mousedown or drag event\n",
                    "type": "Number",
                    "src": {
                      "name": "5,68,24",
                      "text": "5,68,31,48",
                      "type": "5,68,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,70,0",
                  "text": "5,63,8,255"
                }
              },
              {
                "$type": "method",
                "name": "setHandleElId",
                "text": "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the element that will be used to\ninitiate the drag.\n",
                    "type": "String",
                    "src": {
                      "name": "4,746,24",
                      "text": "4,746,27,43:4,747,8,19",
                      "type": "4,746,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,749,0",
                  "text": "4,740,8,377"
                }
              },
              {
                "$type": "method",
                "name": "setInitPosition",
                "text": "Stores the initial placement of the linked element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "diffX",
                    "text": "the X offset, default 0\n",
                    "type": "Number",
                    "src": {
                      "name": "4,668,24",
                      "text": "4,668,30,24",
                      "type": "4,668,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "diffY",
                    "text": "the Y offset, default 0\n",
                    "type": "Number",
                    "src": {
                      "name": "4,669,24",
                      "text": "4,669,30,24",
                      "type": "4,669,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,671,0",
                  "text": "4,667,8,52"
                }
              },
              {
                "$type": "method",
                "name": "setOuterHandleElId",
                "text": "Allows you to set an element outside of the linked element as a drag\nhandle\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the element that will be used to initiate the drag\n",
                    "type": "String",
                    "src": {
                      "name": "4,760,24",
                      "text": "4,760,27,61",
                      "type": "4,760,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,762,0",
                  "text": "4,758,8,76"
                }
              },
              {
                "$type": "method",
                "name": "setPadding",
                "text": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iTop",
                    "text": "Top pad\n",
                    "type": "Number",
                    "src": {
                      "name": "4,650,24",
                      "text": "4,650,29,8",
                      "type": "4,650,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iRight",
                    "text": "Right pad\n",
                    "type": "Number",
                    "src": {
                      "name": "4,651,24",
                      "text": "4,651,31,10",
                      "type": "4,651,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iBot",
                    "text": "Bot pad\n",
                    "type": "Number",
                    "src": {
                      "name": "4,652,24",
                      "text": "4,652,29,8",
                      "type": "4,652,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iLeft",
                    "text": "Left pad\n",
                    "type": "Number",
                    "src": {
                      "name": "4,653,24",
                      "text": "4,653,30,9",
                      "type": "4,653,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,655,0",
                  "text": "4,645,8,338"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setStartPosition",
                "text": "Sets the start position of the element.  This is set when the obj\nis initialized, the reset when a drag is started.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pos",
                    "text": "current position (from previous lookup)\n",
                    "src": {
                      "name": "4,696,15",
                      "text": "4,696,19,40"
                    }
                  }
                ],
                "src": {
                  "access": "4,697,8",
                  "name": "4,699,0",
                  "text": "4,694,8,116"
                }
              },
              {
                "$type": "method",
                "name": "setXConstraint",
                "text": "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iLeft",
                    "text": "the number of pixels the element can move to the left\n",
                    "type": "Number",
                    "src": {
                      "name": "4,1001,24",
                      "text": "4,1001,30,54",
                      "type": "4,1001,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iRight",
                    "text": "the number of pixels the element can move to the\nright\n",
                    "type": "Number",
                    "src": {
                      "name": "4,1002,24",
                      "text": "4,1002,31,49:4,1003,8,6",
                      "type": "4,1002,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iTickSize",
                    "text": "(optional) parameter for specifying that the\nelement should move iTickSize pixels at a time.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,1004,24",
                      "text": "4,1004,34,45:4,1005,8,48",
                      "type": "4,1004,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,1007,0",
                  "text": "4,998,8,204"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setXTicks",
                "text": "Creates the array of horizontal tick marks if an interval was specified\nin setXConstraint().\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iStartX",
                    "src": {
                      "name": "4,944,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iTickSize",
                    "src": {
                      "name": "4,944,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,942,8",
                  "name": "4,944,0",
                  "text": "4,940,8,93"
                }
              },
              {
                "$type": "method",
                "name": "setYConstraint",
                "text": "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iUp",
                    "text": "the number of pixels the element can move up\n",
                    "type": "Number",
                    "src": {
                      "name": "4,1042,24",
                      "text": "4,1042,28,45",
                      "type": "4,1042,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iDown",
                    "text": "the number of pixels the element can move down\n",
                    "type": "Number",
                    "src": {
                      "name": "4,1043,24",
                      "text": "4,1043,30,47",
                      "type": "4,1043,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iTickSize",
                    "text": "(optional) parameter for specifying that the\nelement should move iTickSize pixels at a time.\n",
                    "type": "Number",
                    "src": {
                      "name": "4,1044,24",
                      "text": "4,1044,34,45:4,1045,8,48",
                      "type": "4,1044,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,1047,0",
                  "text": "4,1039,8,195"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setYTicks",
                "text": "Creates the array of vertical tick marks if an interval was specified in\nsetYConstraint().\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iStartY",
                    "src": {
                      "name": "4,973,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iTickSize",
                    "src": {
                      "name": "4,973,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,971,8",
                  "name": "4,973,0",
                  "text": "4,969,8,91"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "showFrame",
                "text": "Resizes the drag frame to the dimensions of the clicked object, positions\nit over the object, and finally displays it\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "iPageX",
                    "text": "X click position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,119,24",
                      "text": "3,119,31,17",
                      "type": "3,119,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "iPageY",
                    "text": "Y click position\n",
                    "type": "Number",
                    "src": {
                      "name": "3,120,24",
                      "text": "3,120,31,17",
                      "type": "3,120,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,121,8",
                  "name": "3,123,0",
                  "text": "3,117,8,118"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "startDrag",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "1,375,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "1,375,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,373,8",
                  "name": "1,375,0"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "6,235,21,32",
                      "type": "6,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,226,12",
                  "text": "6,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "toString method\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "string representation of the dd obj\n",
                    "type": "String",
                    "src": {
                      "text": "4,1127,25,36",
                      "type": "4,1127,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,1129,0",
                  "text": "4,1126,8,16"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "triggerCacheRefresh",
                "src": {
                  "access": "1,413,8",
                  "name": "1,415,0"
                }
              },
              {
                "$type": "method",
                "name": "unlock",
                "text": "Unlocks this instace\n",
                "src": {
                  "name": "4,192,0",
                  "text": "4,190,8,21"
                }
              },
              {
                "$type": "method",
                "name": "unreg",
                "text": "Removes all drag and drop hooks for this element\n",
                "src": {
                  "name": "4,775,0",
                  "text": "4,773,8,49"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "6,340,21,50",
                      "type": "6,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "6,301,12",
                  "text": "6,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "__ygDragDrop",
                "text": "Internal typeof flag\n",
                "src": {
                  "access": "4,221,8",
                  "name": "4,219,18",
                  "text": "4,220,8,21"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "_domRef",
                "text": "Cached reference to the linked element\n",
                "src": {
                  "access": "4,214,8",
                  "name": "4,212,18",
                  "text": "4,213,8,39"
                }
              },
              {
                "$type": "property",
                "name": "available",
                "text": "The available property is false until the linked dom element is accessible.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,301,28",
                  "text": "4,302,8,76",
                  "type": "4,301,19"
                }
              },
              {
                "$type": "property",
                "name": "centerFrame",
                "text": "By default the frame is positioned exactly where the drag element is, so\nwe use the cursor offset provided by Ext.dd.DD.  Another option that works only if\nyou do not have constraints on the obj is to have the drag frame centered\naround the cursor.  Set centerFrame to true for this effect.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,57,28",
                  "text": "3,58,8,291",
                  "type": "3,57,19"
                }
              },
              {
                "$type": "property",
                "name": "config",
                "text": "Configuration attributes passed into the constructor\n",
                "type": "Object",
                "src": {
                  "name": "4,86,27",
                  "text": "4,87,8,53",
                  "type": "4,86,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "constrainX",
                "text": "Set to true when horizontal contraints are applied\n",
                "type": "Boolean",
                "src": {
                  "access": "4,228,8",
                  "name": "4,226,28",
                  "text": "4,227,8,51",
                  "type": "4,226,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "constrainY",
                "text": "Set to true when vertical contraints are applied\n",
                "type": "Boolean",
                "src": {
                  "access": "4,235,8",
                  "name": "4,233,28",
                  "text": "4,234,8,49",
                  "type": "4,233,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.pivot.plugin.configurator.DragZone-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "6,346,14",
                  "text": "6,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "defaultPadding",
                "text": "Provides default constraint padding to \"constrainTo\" elements.\n",
                "type": "Object",
                "src": {
                  "name": "4,448,27",
                  "text": "4,449,8,63",
                  "type": "4,448,19"
                }
              },
              {
                "$type": "property",
                "name": "dragData",
                "text": "This property contains the data representing the dragged object. This data is set up by the implementation of the\n<a href='#!/api/Ext.pivot.plugin.configurator.DragZone-method-getDragData'>getDragData</a> method. It must contain a ddel property, but can contain any other data according to the\napplication's needs.\n",
                "type": "Object",
                "src": {
                  "name": "1,18,27",
                  "text": "1,19,8,245",
                  "type": "1,18,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dragElId",
                "text": "The id of the element that will be dragged.  By default this is same\nas the linked element, but could be changed to another element. Ex:\nExt.dd.DDProxy\n",
                "type": "String",
                "src": {
                  "access": "4,96,8",
                  "name": "4,92,27",
                  "text": "4,93,8,152",
                  "type": "4,92,19"
                }
              },
              {
                "$type": "property",
                "name": "groups",
                "text": "The group defines a logical collection of DragDrop objects that are\nrelated.  Instances only get events when interacting with other\nDragDrop object in the same group.  This lets us define multiple\ngroups using a single DragDrop subclass if we want.\n\nAn object in the format {'group1':true, 'group2':true}\n",
                "type": "Object",
                "src": {
                  "name": "4,157,27",
                  "text": "4,158,8,305",
                  "type": "4,157,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "handleElId",
                "text": "The ID of the element that initiates the drag operation.  By default\nthis is the linked element, but could be changed to be a child of this\nelement.  This lets us do things like only starting the drag when the\nheader element within the linked html element is clicked.\n",
                "type": "String",
                "src": {
                  "access": "4,106,8",
                  "name": "4,101,27",
                  "text": "4,102,8,268",
                  "type": "4,101,19"
                }
              },
              {
                "$type": "property",
                "name": "hasOuterHandles",
                "text": "By default, drags can only be initiated if the mousedown occurs in the\nregion the linked element is.  This is done in part to work around a\nbug in some browsers that mis-report the mousedown if the previous\nmouseup happened outside of the window.  This property is set to true\nif outer handles are defined. Defaults to false.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,307,28",
                  "text": "4,308,8,326",
                  "type": "4,307,19"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "text": "The id of the element associated with this object.  This is what we\nrefer to as the \"linked element\" because the size and position of\nthis element is used to determine when the drag and drop objects have\ninteracted.\n",
                "type": "String",
                "src": {
                  "name": "4,77,27",
                  "text": "4,78,8,216",
                  "type": "4,77,19"
                }
              },
              {
                "$type": "property",
                "name": "ignoreSelf",
                "text": "Set to false to enable a DragDrop object to fire drag events while dragging\nover its own Element. Defaults to true - DragDrop objects do not by default\nfire drag events to themselves.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,70,28",
                  "text": "4,71,8,184",
                  "type": "4,70,19"
                }
              },
              {
                "$type": "property",
                "name": "invalidHandleClasses",
                "text": "An Array of CSS class names for elements to be considered in valid as drag handles.\n",
                "type": "String[]",
                "src": {
                  "name": "4,135,29",
                  "text": "4,136,8,84",
                  "type": "4,135,19"
                }
              },
              {
                "$type": "property",
                "name": "invalidHandleIds",
                "text": "An object who's property names identify the IDs of elements to be considered invalid as drag handles.\nA non-null property value identifies the ID as invalid. For example, to prevent\ndragging from being initiated on element ID \"foo\", use:\n\n    {\n        foo: true\n    }\n",
                "type": "Object",
                "src": {
                  "name": "4,123,27",
                  "text": "4,124,8,269",
                  "type": "4,123,19"
                }
              },
              {
                "$type": "property",
                "name": "invalidHandleTypes",
                "text": "An object who's property names identify HTML tags to be considered invalid as drag handles.\nA non-null property value identifies the tag as invalid. Defaults to the\nfollowing value which prevents drag operations from being initiated by `<a>` elements:\n\n    {\n        A: \"A\"\n    }\n",
                "type": "Object",
                "src": {
                  "name": "4,111,27",
                  "text": "4,112,8,280",
                  "type": "4,111,19"
                }
              },
              {
                "$type": "property",
                "name": "isTarget",
                "text": "By default, all instances can be a drop target.  This can be disabled by\nsetting isTarget to false.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,197,28",
                  "text": "4,198,8,100",
                  "type": "4,197,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "locked",
                "text": "Individual drag/drop instances can be locked.  This will prevent\nonmousedown start drag.\n",
                "type": "Boolean",
                "src": {
                  "access": "4,171,8",
                  "name": "4,168,28",
                  "text": "4,169,8,89",
                  "type": "4,168,19"
                }
              },
              {
                "$type": "property",
                "name": "maintainOffset",
                "text": "Maintain offsets when we resetconstraints.  Set to true when you want\nthe position of the element relative to its parent to stay the same\nwhen the page changes\n",
                "type": "Boolean",
                "src": {
                  "name": "4,268,28",
                  "text": "4,269,8,160",
                  "type": "4,268,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "maxX",
                "text": "The right constraint\n",
                "type": "Number",
                "src": {
                  "access": "4,249,8",
                  "name": "4,247,27",
                  "text": "4,248,8,21",
                  "type": "4,247,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "maxY",
                "text": "The down constraint\n",
                "type": "Number",
                "src": {
                  "access": "4,263,8",
                  "name": "4,261,27",
                  "text": "4,262,8,20",
                  "type": "4,261,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "minX",
                "text": "The left constraint\n",
                "type": "Number",
                "src": {
                  "access": "4,242,8",
                  "name": "4,240,27",
                  "text": "4,241,8,20",
                  "type": "4,240,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "minY",
                "text": "The up constraint\n",
                "type": "Number",
                "src": {
                  "access": "4,256,8",
                  "name": "4,254,27",
                  "text": "4,255,8,18",
                  "type": "4,254,19"
                }
              },
              {
                "$type": "property",
                "name": "moveOnly",
                "text": "When set to true, other DD objects in cooperating DDGroups do not receive\nnotification events when this DD object is dragged over them.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,183,28",
                  "text": "4,184,8,136",
                  "type": "4,183,19"
                }
              },
              {
                "$type": "property",
                "name": "padding",
                "text": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.\nAn array containing the 4 padding values: [top, right, bottom, left]\n",
                "type": "Number[]",
                "src": {
                  "name": "4,204,29",
                  "text": "4,205,8,183",
                  "type": "4,204,19"
                }
              },
              {
                "$type": "property",
                "name": "primaryButtonOnly",
                "text": "By default the drag and drop instance will only respond to the primary\nbutton click (left button for a right-handed mouse).  Set to true to\nallow drag and drop to start with any mouse click that is propogated\nby the browser\n",
                "type": "Boolean",
                "src": {
                  "name": "4,292,28",
                  "text": "4,293,8,224",
                  "type": "4,292,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "6,46,14",
                  "text": "6,47,4,65"
                }
              },
              {
                "$type": "property",
                "name": "resizeFrame",
                "text": "By default we resize the drag frame to be the same size as the element\nwe want to drag (this is to get the frame effect).  We can turn it off\nif we want a different behavior.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,49,28",
                  "text": "3,50,8,175",
                  "type": "3,49,19"
                }
              },
              {
                "$type": "property",
                "name": "scroll",
                "text": "When set to true, the utility automatically tries to scroll the browser\nwindow when a drag and drop element is dragged near the viewport boundary.\n",
                "type": "Boolean",
                "src": {
                  "name": "5,32,28",
                  "text": "5,33,8,147",
                  "type": "5,32,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "startPageX",
                "text": "The linked element's absolute X position at the time the drag was\nstarted\n",
                "type": "Number",
                "src": {
                  "access": "4,144,8",
                  "name": "4,141,27",
                  "text": "4,142,8,74",
                  "type": "4,141,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "startPageY",
                "text": "The linked element's absolute X position at the time the drag was\nstarted\n",
                "type": "Number",
                "src": {
                  "access": "4,152,8",
                  "name": "4,149,27",
                  "text": "4,150,8,74",
                  "type": "4,149,19"
                }
              },
              {
                "$type": "property",
                "name": "xTicks",
                "text": "Array of pixel locations the element will snap to if we specified a\nhorizontal graduation/interval.  This array is generated automatically\nwhen you define a tick interval.\n",
                "type": "Number[]",
                "src": {
                  "name": "4,276,29",
                  "text": "4,277,8,172",
                  "type": "4,276,19"
                }
              },
              {
                "$type": "property",
                "name": "yTicks",
                "text": "Array of pixel locations the element will snap to if we specified a\nvertical graduation/interval.  This array is generated automatically\nwhen you define a tick interval.\n",
                "type": "Number[]",
                "src": {
                  "name": "4,284,29",
                  "text": "4,285,8,170",
                  "type": "4,284,19"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,5,4",
          "extends": "0,9,0",
          "name": "0,8,0",
          "text": "0,3,4,67"
        }
      }
    ]
  },
  "version": 1
}