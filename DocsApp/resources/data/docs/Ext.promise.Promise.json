{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/promise/Promise.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.promise.Promise",
        "requires": "Ext.promise.Deferred",
        "since": "6.0.0",
        "text": "Promises represent a future value; i.e., a value that may not yet be available.\n\nUsers should **not** create instances of this class directly. Instead user code should\nuse `new <a href='#!/api/Ext.Promise'>Ext.Promise</a>()` or `new <a href='#!/api/Ext.Deferred'>Ext.Deferred</a>()` to create and manage\npromises. If the browser supports the standard `Promise` constructor, this class will\nnot be used by <a href='#!/api/Ext.Promise'>Ext.Promise</a>. This class will always be used by <a href='#!/api/Ext.Deferred'>Ext.Deferred</a> in order\nto provide enhanced capabilities beyond standard promises.\n\nA Promise's <a href='#!/api/Ext.promise.Promise-method-then'>then</a> method is used to specify onFulfilled and onRejected\ncallbacks that will be notified when the future value becomes available. Those callbacks\ncan subsequently transform the value that was resolved or the reason that was rejected.\nEach call to <a href='#!/api/Ext.promise.Promise-method-then'>then</a> returns a new Promise of that transformed value; i.e., a Promise\nthat is resolved with the callback return value or rejected with any error thrown by\nthe callback.\n\n## Basic Usage\n\n     this.companyService.loadCompanies().then(\n         function (records) {\n             // Do something with result.\n         },\n         function (error) {\n             // Do something on failure.\n         }).\n     always(function () {\n         // Do something whether call succeeded or failed\n     });\n\nThe above code uses the `Promise` returned from the `companyService.loadCompanies()`\nmethod and uses `then()` to attach success and failure handlers. Finally, an `always()`\nmethod call is chained onto the returned promise. This specifies a callback function\nthat will run whether the underlying call succeeded or failed.\n\nSee <a href='#!/api/Ext.Deferred'>Ext.Deferred</a> for an example of using the returned Promise.\n\n[1]: http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#april_14_2015_rev_38_final_draft\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "always",
                "text": "Attaches an onCompleted callback that will be notified when this Promise is completed.\n\nSimilar to `finally` in `try... catch... finally`.\n\nNOTE: The specified callback does not affect the resulting Promise's outcome; any\nreturn value is ignored and any Error is rethrown.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "onCompleted",
                    "text": "Callback to execute when the Promise is resolved or\nrejected.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,290,26",
                      "text": "0,290,38,52:0,291,8,10",
                      "type": "0,290,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "Optional scope for the callback.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,292,24",
                      "text": "0,292,30,33",
                      "type": "0,292,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A new \"pass-through\" Promise that is resolved with\nthe original value or rejected with the original reason.\n",
                    "type": "Ext.promise.Promise",
                    "src": {
                      "text": "0,293,38,51:0,294,8,57",
                      "type": "0,293,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,296,0",
                  "text": "0,283,8,274"
                }
              },
              {
                "$type": "method",
                "name": "cancel",
                "text": "Cancels this Promise if it is still pending, triggering a rejection with a\n<a href='#!/api/Ext.promise.Promise-static-property-CancellationError'>CancellationError</a> that will propagate to any Promises originating from\nthis Promise.\n\nNOTE: Cancellation only propagates to Promises that branch from the target Promise.\nIt does not traverse back up to parent branches, as this would reject nodes from\nwhich other Promises may have branched, causing unintended side-effects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "reason",
                    "text": "Cancellation reason.\n",
                    "type": "Error",
                    "src": {
                      "name": "0,373,23",
                      "text": "0,373,30,21",
                      "type": "0,373,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,375,0",
                  "text": "0,365,8,411"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constructor",
                "text": "NOTE: <a href='#!/api/Ext.promise.Deferred'>Ext.promise.Deferred</a> are the mechanism used to create new\nPromises.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "text": "The owning `Deferred` instance.\n",
                    "type": "Ext.promise.Deferred",
                    "src": {
                      "name": "0,199,38",
                      "text": "0,199,44,32",
                      "type": "0,199,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,201,8",
                  "name": "0,203,0",
                  "text": "0,197,8,92"
                }
              },
              {
                "$type": "method",
                "name": "done",
                "text": "Terminates a Promise chain, ensuring that unhandled rejections will be rethrown as\nErrors.\n\nOne of the pitfalls of interacting with Promise-based APIs is the tendency for\nimportant errors to be silently swallowed unless an explicit rejection handler is\nspecified.\n\nFor example:\n\n     promise.then(function () {\n         // logic in your callback throws an error and it is interpreted as a\n         // rejection. throw new Error(\"Boom!\");\n     });\n\n     // The Error was not handled by the Promise chain and is silently swallowed.\n\nThis problem can be addressed by terminating the Promise chain with the done()\nmethod:\n\n     promise.then(function () {\n         // logic in your callback throws an error and it is interpreted as a\n         // rejection. throw new Error(\"Boom!\");\n     }).done();\n\n    // The Error was not handled by the Promise chain and is rethrown by done() on\n    // the next tick.\n\nThe `done()` method ensures that any unhandled rejections are rethrown as Errors.\n",
                "src": {
                  "name": "0,360,0",
                  "text": "0,331,8,983"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.promise.Promise-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.promise.Promise-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "log",
                "text": "Logs the resolution or rejection of this Promise with the specified category and\noptional identifier. Messages are logged via all registered custom logger functions.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "identifier",
                    "text": "An optional identifier to incorporate into the\nresulting log entry.\n",
                    "type": "String",
                    "src": {
                      "name": "0,387,24",
                      "text": "0,387,35,47:0,388,8,22",
                      "type": "0,387,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A new \"pass-through\" Promise that is resolved with\nthe original value or rejected with the original reason.\n",
                    "type": "Ext.promise.Promise",
                    "src": {
                      "text": "0,390,38,51:0,391,8,57",
                      "type": "0,390,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,393,0",
                  "text": "0,384,8,167"
                }
              },
              {
                "$type": "method",
                "name": "otherwise",
                "text": "Attaches an onRejected callback that will be notified if this Promise is rejected.\n\nThe callback can subsequently transform the reason that was rejected. Each call to\n<a href='#!/api/Ext.promise.Promise-method-otherwise'>otherwise</a> returns a new Promise of that transformed value; i.e., a Promise that\nis resolved with the original resolved value, or resolved with the callback return\nvalue or rejected with any error thrown by the callback.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "onRejected",
                    "text": "Callback to execute to transform a rejection reason.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,262,26",
                      "text": "0,262,37,53",
                      "type": "0,262,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "Optional scope for the callback.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,263,24",
                      "text": "0,263,30,33",
                      "type": "0,263,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Promise of the transformed future value.\n",
                    "type": "Ext.promise.Promise",
                    "src": {
                      "text": "0,264,38,41",
                      "type": "0,264,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,266,0",
                  "text": "0,255,8,390"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.promise.Promise-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.promise.Promise-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "then",
                "text": "Attaches onFulfilled and onRejected callbacks that will be notified when the future\nvalue becomes available.\n\nThose callbacks can subsequently transform the value that was fulfilled or the error\nthat was rejected. Each call to <a href='#!/api/Ext.promise.Promise-method-then'>then</a> returns a new Promise of that transformed\nvalue; i.e., a Promise that is fulfilled with the callback return value or rejected\nwith any error thrown by the callback.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "onFulfilled",
                    "text": "Optional callback to execute to transform a\nfulfillment value.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,216,26",
                      "text": "0,216,38,44:0,217,8,19",
                      "type": "0,216,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "onRejected",
                    "text": "Optional callback to execute to transform a rejection\nreason.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,218,26",
                      "text": "0,218,37,54:0,219,8,8",
                      "type": "0,218,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "onProgress",
                    "text": "Optional callback function to be called with progress\nupdates.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,220,26",
                      "text": "0,220,37,54:0,221,8,9",
                      "type": "0,220,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "Optional scope for the callback(s).\n",
                    "type": "Object",
                    "src": {
                      "name": "0,222,24",
                      "text": "0,222,30,36",
                      "type": "0,222,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Promise that is fulfilled with the callback return\nvalue or rejected with any error thrown by the callback.\n",
                    "type": "Ext.promise.Promise",
                    "src": {
                      "text": "0,223,38,51:0,224,8,57",
                      "type": "0,223,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,226,0",
                  "text": "0,208,8,400"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.promise.Promise-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.promise.Promise-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.promise.Promise-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.promise.Promise-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.promise.Promise-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.promise.Promise-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.promise.Promise-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.promise.Promise-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.promise.Promise-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.promise.Promise-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.promise.Promise-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.promise.Promise-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.promise.Promise-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.promise.Promise-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.promise.Promise-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "Reference",
                "readonly": true,
                "text": "to this promise's\n<a href='#!/api/Ext.promise.Deferred'>Ext.promise.Deferred</a> instance.\n",
                "type": "Ext.promise.Deferred",
                "src": {
                  "access": "0,192,8",
                  "name": "0,188,41",
                  "readonly": "0,191,8",
                  "text": "0,188,51,18:0,189,8,51",
                  "type": "0,188,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "all",
                "static": true,
                "text": "Returns a new Promise that will only resolve once all the specified\n`promisesOrValues` have resolved.\n\nThe resolution value will be an Array containing the resolution value of each\nof the `promisesOrValues`.\n\nThe public API's to use instead of this method are <a href='#!/api/Ext.Promise-static-method-all'>Ext.Promise#all</a>\nand <a href='#!/api/Ext.Deferred-static-method-all'>Ext.Deferred#all</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "promisesOrValues",
                    "text": "An\nArray of values or Promises, or a Promise of an Array of values or Promises.\n",
                    "type": "Mixed[]/Ext.promise.Promise[]/Ext.promise.Promise",
                    "src": {
                      "name": "0,81,71",
                      "text": "0,81,88,3:0,82,12,77",
                      "type": "0,81,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A Promise of an Array of the resolved values.\n",
                    "type": "Ext.promise.Promise",
                    "src": {
                      "text": "0,83,42,46",
                      "type": "0,83,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,86,12",
                  "name": "0,88,0",
                  "static": "0,85,12",
                  "text": "0,72,12,319"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "is",
                "static": true,
                "text": "Determines whether the specified value is a Promise (including third-party\nuntrusted Promises or then()-ables), based on the Promises/A specification\nfeature test.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "A potential Promise.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,140,27",
                      "text": "0,140,33,21",
                      "type": "0,140,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the given value is a Promise, otherwise `false`.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,141,30,59",
                      "type": "0,141,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,143,12",
                  "name": "0,145,0",
                  "static": "0,142,12",
                  "text": "0,136,12,165"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "rethrowError",
                "static": true,
                "text": "Rethrows the specified Error on the next turn of the event loop.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "error",
                    "src": {
                      "name": "0,155,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,153,12",
                  "name": "0,155,0",
                  "static": "0,152,12",
                  "text": "0,151,12,65"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "when",
                "static": true,
                "text": "Returns a new Promise that either\n\n * Resolves immediately for the specified value, or\n * Resolves or rejects when the specified promise (or third-party Promise or\n   then()-able) is resolved or rejected.\n\nThe public API's to use instead of this method are <a href='#!/api/Ext.Promise-static-method-resolve'>Ext.Promise#resolve</a>\nand <a href='#!/api/Ext.Deferred-static-method-resolved'>Ext.Deferred#resolved</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "promiseOrValue",
                    "text": "A Promise (or third-party Promise or then()-able)\nor value.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,171,27",
                      "text": "0,171,42,50:0,172,12,10",
                      "type": "0,171,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A Promise of the specified Promise or value.\n",
                    "type": "Ext.Promise",
                    "src": {
                      "text": "0,173,34,45",
                      "type": "0,173,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,176,12",
                  "name": "0,178,0",
                  "static": "0,175,12",
                  "text": "0,162,12,325"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "name": "CancellationError",
                "static": true,
                "text": "The type of <a href='#!/api/Error'>Error</a> propagated by the <a href='#!/api/Ext.promise.Promise-method-cancel'>method-cancel</a> method. If\nthe browser provides a native <a href='#!/api/Ext.promise.Promise-static-property-CancellationError'>CancellationError</a> then that type is used. If\nnot, a basic <a href='#!/api/Error'>Error</a> type is used.\n",
                "src": {
                  "name": "0,58,22",
                  "static": "0,59,12",
                  "text": "0,60,12,186"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,48,0",
          "requires": "0,53,0",
          "since": "0,46,11",
          "text": "0,9,4,1763"
        }
      }
    ]
  },
  "version": 1
}