{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/toolbar/Breadcrumb.js",
    "../../../ext/classic/theme-neutral/sass/var/toolbar/Breadcrumb.scss",
    "../../../ext/classic/classic/src/util/FocusableContainer.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "widget.breadcrumb",
        "extended": "Ext.Container",
        "extends": "Ext.Container",
        "mixed": "Ext.util.FocusableContainer",
        "mixins": "Ext.util.FocusableContainer",
        "name": "Ext.toolbar.Breadcrumb",
        "requires": "Ext.data.TreeStore,Ext.button.Split",
        "text": "A toolbar that displays hierarchical data from a <a href='#!/api/Ext.data.TreeStore'>Ext.data.TreeStore</a>\nas a trail of breadcrumb buttons.  Each button represents a node in the store.  A click\non a button will \"select\" that node in the tree.  Non-leaf nodes will display their\nchild nodes on a dropdown menu of the corresponding button in the breadcrumb trail,\nand a click on an item in the menu will trigger selection of the corresponding child\nnode.\n\nThe selection can be set programmatically  using <a href='#!/api/Ext.toolbar.Breadcrumb-method-setSelection'>setSelection</a>, or retrieved\nusing <a href='#!/api/Ext.toolbar.Breadcrumb-method-getSelection'>getSelection</a>.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "activeChildTabIndex",
                "optional": true,
                "text": "DOM tabIndex attribute to set on the\nactive Focusable child of this container when using the \"Roaming tabindex\"\ntechnique. Set this value to > 0 to precisely control the tabbing order\nof the components/containers on the page.\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "2,43,23",
                  "text": "2,43,46,37:2,44,8,189",
                  "type": "2,43,14",
                  "value": "2,43,43"
                }
              },
              {
                "$type": "property",
                "name": "buttonUI",
                "optional": true,
                "text": "Button UI to use for breadcrumb items.  Use <a href='#!/api/Ext.toolbar.Breadcrumb-extjs-breadcrumb-ui'>extjs-breadcrumb-ui</a> to\nadd special styling to the breadcrumb arrows\n",
                "type": "String",
                "value": "'plain-toolbar'",
                "src": {
                  "name": "0,31,27",
                  "text": "0,32,12,121",
                  "type": "0,31,18",
                  "value": "0,31,36"
                }
              },
              {
                "$type": "property",
                "name": "displayField",
                "text": "The name of the field in the data model to display in the navigation items of\nthis breadcrumb toolbar\n",
                "type": "String",
                "src": {
                  "name": "0,42,0",
                  "text": "0,39,12,102",
                  "type": "0,38,18"
                }
              },
              {
                "$type": "property",
                "name": "enableFocusableContainer",
                "optional": true,
                "text": "Enable or disable\nnavigation with arrow keys for this FocusableContainer. This option may\nbe useful with nested FocusableContainers such as Grid column headers,\nwhen only the root container should handle keyboard events.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "2,35,24",
                  "text": "2,35,55,18:2,36,8,203",
                  "type": "2,35,14",
                  "value": "2,35,49"
                }
              },
              {
                "$type": "property",
                "name": "inactiveChildTabIndex",
                "optional": true,
                "text": "DOM tabIndex attribute to set on\ninactive Focusable children of this container when using the \"Roaming tabindex\"\ntechnique. This value rarely needs to be changed from its default.\n",
                "type": "Number",
                "value": "-1",
                "src": {
                  "name": "2,51,23",
                  "text": "2,51,49,33:2,52,8,147",
                  "type": "2,51,14",
                  "value": "2,51,45"
                }
              },
              {
                "$type": "property",
                "name": "overflowHandler",
                "optional": true,
                "text": "The overflowHandler for this Breadcrumb:\n\n- <a href='#!/api/null'>null</a> - hidden overflow\n- `'scroller'` to render left/right scroller buttons on either side of the breadcrumb\n- `'menu'` to render the overflowing buttons as items of an overflow menu.\n",
                "type": "String",
                "value": "null",
                "src": {
                  "name": "0,45,27",
                  "text": "0,46,12,230",
                  "type": "0,45,18",
                  "value": "0,45,43"
                }
              },
              {
                "$type": "property",
                "accessor": true,
                "name": "selection",
                "text": "The selected node, or `\"root\"` to select the root node\n",
                "type": "Ext.data.TreeModel/String",
                "src": {
                  "accessor": "0,113,12",
                  "name": "0,111,45",
                  "text": "0,112,12,55",
                  "type": "0,111,18"
                }
              },
              {
                "$type": "property",
                "name": "showIcons",
                "optional": true,
                "text": "\nControls whether or not icons of tree nodes are displayed in the breadcrumb\nbuttons.  There are 3 possible values for this config:\n\n1. unspecified (<a href='#!/api/null'>null</a>) - the default value. In this mode only icons that are\nspecified in the tree data using (<a href='#!/api/Ext.data.NodeInterface-cfg-icon'>Ext.data.NodeInterface#icon</a>\nor <a href='#!/api/Ext.data.NodeInterface-cfg-iconCls'>Ext.data.NodeInterface#iconCls</a> will be displayed, but the\ndefault \"folder\" and \"leaf\" icons will not be displayed.\n\n2. `true` - Icons specified in the tree data will be displayed, and the default\n\"folder\" and \"leaf\" icons will be displayed for nodes that do not specify\nan `icon` or `iconCls`.\n\n3. `false` - No icons will be displayed in the breadcrumb buttons, only text.\n",
                "type": "Boolean",
                "value": "null",
                "src": {
                  "name": "0,55,28",
                  "text": "0,56,12,678",
                  "type": "0,55,18",
                  "value": "0,55,38"
                }
              },
              {
                "$type": "property",
                "name": "showMenuIcons",
                "optional": true,
                "text": "\nControls whether or not icons of tree nodes are displayed in the breadcrumb\nmenu items. There are 3 possible values for this config:\n\n1. unspecified (<a href='#!/api/null'>null</a>) - the default value. In this mode only icons that are\nspecified in the tree data using (<a href='#!/api/Ext.data.NodeInterface-cfg-icon'>Ext.data.NodeInterface#icon</a>\nor <a href='#!/api/Ext.data.NodeInterface-cfg-iconCls'>Ext.data.NodeInterface#iconCls</a> will be displayed, but the\ndefault \"folder\" and \"leaf\" icons will not be displayed.\n\n2. `true` - Icons specified in the tree data will be displayed, and the default\n\"folder\" and \"leaf\" icons will be displayed for nodes that do not specify\nan `icon` or `iconCls`.\n\n3. `false` - No icons will be displayed on the breadcrumb menu items, only text.\n",
                "type": "Boolean",
                "value": "null",
                "src": {
                  "name": "0,74,28",
                  "text": "0,75,12,683",
                  "type": "0,74,18",
                  "value": "0,74,42"
                }
              },
              {
                "$type": "property",
                "name": "store",
                "text": "The TreeStore that this breadcrumb toolbar should use as its data source\n",
                "type": "Ext.data.TreeStore",
                "src": {
                  "name": "0,93,38",
                  "text": "0,94,12,73",
                  "type": "0,93,18"
                }
              },
              {
                "$type": "property",
                "name": "useSplitButtons",
                "optional": true,
                "text": "`false` to use regular <a href='#!/api/Ext.button.Button'>Ext.button.Button</a>s instead of <a href='#!/api/Ext.button.Split'>Ext.button.Split</a>.  When `true`, a click on the body of a button\nwill navigate to the specified node, and a click on the arrow will show a menu\ncontaining the the child nodes.  When `false`, the only mode of navigation is\nthe menu, since a click anywhere on the button will show the menu.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,99,28",
                  "text": "0,100,12,378",
                  "type": "0,99,18",
                  "value": "0,99,44"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "change",
                "text": "Fires when the user changes the selected record. In contrast to the <a href='#!/api/Ext.toolbar.Breadcrumb-event-selectionchange'>selectionchange</a> event, this does\n*not* fire at render time, only in response to user activity.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.toolbar.Breadcrumb",
                    "src": {
                      "name": "0,336,48",
                      "type": "0,336,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The selected node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,337,44",
                      "text": "0,337,49,19",
                      "type": "0,337,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prevNode",
                    "text": "The previously selected node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,338,44",
                      "text": "0,338,53,30",
                      "type": "0,338,24"
                    }
                  }
                ],
                "src": {
                  "name": "0,333,23",
                  "text": "0,334,16,172"
                }
              },
              {
                "$type": "event",
                "name": "selectionchange",
                "text": "Fires when the selected node changes. At render time, this event will fire\nindicating that the configured <a href='#!/api/Ext.toolbar.Breadcrumb-cfg-selection'>selection</a> has been selected.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.toolbar.Breadcrumb",
                    "src": {
                      "name": "0,325,44",
                      "type": "0,325,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The selected node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,326,40",
                      "text": "0,326,45,19",
                      "type": "0,326,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prevNode",
                    "text": "The previously selected node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,327,40",
                      "text": "0,327,49,30",
                      "type": "0,327,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,322,19",
                  "text": "0,323,12,144"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_onButtonClick",
                "text": "Handles a click on a breadcrumb button\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "button",
                    "type": "Ext.button.Split",
                    "src": {
                      "name": "0,381,38",
                      "type": "0,381,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,382,37",
                      "type": "0,382,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,380,12",
                  "name": "0,384,0",
                  "text": "0,379,12,39"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_onMenuBeforeShow",
                "text": "Handles the `beforeshow` event of a button menu\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "menu",
                    "type": "Ext.menu.Menu",
                    "src": {
                      "name": "0,406,35",
                      "type": "0,406,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,405,12",
                  "name": "0,408,0",
                  "text": "0,404,12,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_onMenuClick",
                "text": "Handles a click on a button menu\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "menu",
                    "type": "Ext.menu.Menu",
                    "src": {
                      "name": "0,393,35",
                      "type": "0,393,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.menu.Item",
                    "src": {
                      "name": "0,394,35",
                      "type": "0,394,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,395,37",
                      "type": "0,395,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,392,12",
                  "name": "0,397,0",
                  "text": "0,391,12,33"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,40,21",
                      "text": "3,40,28,19",
                      "type": "3,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "3,38,12",
                  "text": "3,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "getSelection",
                "text": "Returns the currently selected <a href='#!/api/Ext.data.TreeModel'>Ext.data.TreeModel</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "node The selected node (or null if there is no\nselection).\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "text": "0,186,37,47:0,187,8,12",
                      "type": "0,186,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,184,16",
                  "text": "0,185,8,64"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.toolbar.Breadcrumb-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,100,20",
                      "text": "3,100,25,34",
                      "type": "3,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,101,22,57:3,102,4,15",
                      "type": "3,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,53,12",
                  "text": "3,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.toolbar.Breadcrumb-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "3,148,20",
                      "text": "3,148,30,71:3,149,4,18",
                      "type": "3,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "3,150,20",
                      "text": "3,150,27,50",
                      "type": "3,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,151,22,56",
                      "type": "3,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,106,12",
                  "text": "3,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.toolbar.Breadcrumb-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.toolbar.Breadcrumb-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,220,20",
                      "text": "3,220,25,34",
                      "type": "3,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,221,22,57:3,222,4,22",
                      "type": "3,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,155,12",
                  "text": "3,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "setSelection",
                "text": "Selects the passed <a href='#!/api/Ext.data.TreeModel'>Ext.data.TreeModel</a> in the breadcrumb component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The node in the breadcrumb <a href='#!/api/Ext.toolbar.Breadcrumb-cfg-store'>store</a> to\nselect as the active node.\n",
                    "type": "Ext.data.TreeModel",
                    "src": {
                      "name": "0,193,36",
                      "text": "0,193,41,45:0,194,8,27",
                      "type": "0,193,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this The breadcrumb component\n",
                    "type": "Ext.toolbar.Breadcrumb",
                    "src": {
                      "text": "0,195,41,30",
                      "type": "0,195,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,191,16",
                  "text": "0,192,8,80"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.toolbar.Breadcrumb-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.toolbar.Breadcrumb-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.toolbar.Breadcrumb-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.toolbar.Breadcrumb-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "3,235,21,32",
                      "type": "3,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,226,12",
                  "text": "3,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "3,297,21,32",
                      "type": "3,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,239,12",
                  "text": "3,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.toolbar.Breadcrumb-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.toolbar.Breadcrumb-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.toolbar.Breadcrumb-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.toolbar.Breadcrumb-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.toolbar.Breadcrumb-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.toolbar.Breadcrumb-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.toolbar.Breadcrumb-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.toolbar.Breadcrumb-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.toolbar.Breadcrumb-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.toolbar.Breadcrumb-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,340,21,50",
                      "type": "3,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "3,301,12",
                  "text": "3,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "buttons",
                "text": "Internal cache of buttons that are re-purposed as the items of this container\nas navigation occurs.\n",
                "type": "Ext.button.Split[]",
                "src": {
                  "access": "0,150,12",
                  "name": "0,149,43",
                  "text": "0,147,12,100",
                  "type": "0,149,23"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.toolbar.Breadcrumb-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "3,346,14",
                  "text": "3,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "3,46,14",
                  "text": "3,47,4,65"
                }
              }
            ]
          },
          {
            "$type": "vars",
            "items": [
              {
                "$type": "property",
                "name": "$breadcrumb-arrow-expanded-glyph",
                "text": "Glyph for the \"expanded arrow\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-angle-down $breadcrumb-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,116,1",
                  "text": "1,114,4,90",
                  "type": "1,113,10",
                  "value": "1,116,43"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-arrow-expanded-glyph-color",
                "text": "The color to use for the \"expanded arrow\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "color",
                "value": "$breadcrumb-arrow-glyph-color",
                "src": {
                  "name": "1,122,1",
                  "text": "1,120,4,101",
                  "type": "1,119,10",
                  "value": "1,122,49"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-arrow-glyph",
                "text": "Glyph for the \"arrow\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-angle-right $breadcrumb-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,104,1",
                  "text": "1,102,4,81",
                  "type": "1,101,10",
                  "value": "1,104,34"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-arrow-glyph-color",
                "text": "The color to use for the \"arrow\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "color",
                "value": "$breadcrumb-glyph-color",
                "src": {
                  "name": "1,110,1",
                  "text": "1,108,4,92",
                  "type": "1,107,10",
                  "value": "1,110,40"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-arrow-width",
                "text": "The width of breadcrumb arrows when <a href='#!/api/Ext.toolbar.Breadcrumb-cfg-useSplitButtons'>useSplitButtons</a> is `false`\n",
                "type": "Number",
                "value": "$button-small-split-width",
                "src": {
                  "name": "1,26,1",
                  "text": "1,24,4,72",
                  "type": "1,23,10",
                  "value": "1,26,34"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-button-spacing",
                "text": "The space between the breadcrumb buttons\n",
                "type": "Number",
                "value": "0px",
                "src": {
                  "name": "1,20,1",
                  "text": "1,18,4,41",
                  "type": "1,17,10",
                  "value": "1,20,37"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-button-ui",
                "text": "The UI of buttons that are used in the \"default\" breadcrumb UI\n",
                "type": "String",
                "value": "'default-toolbar'",
                "src": {
                  "name": "1,14,1",
                  "text": "1,12,4,63",
                  "type": "1,11,10",
                  "value": "1,14,32"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-classic-scrollers",
                "text": "`true` to use classic-style scroller buttons.  When `true` scroller buttons are given their\nhover state by changing their background-position,  When `false` scroller buttons are\ngiven their hover state by applying opacity.\n",
                "type": "Boolean",
                "value": "$toolbar-classic-scrollers",
                "src": {
                  "name": "1,232,1",
                  "text": "1,228,4,223",
                  "type": "1,227,10",
                  "value": "1,232,40"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-folder-glyph",
                "text": "Glyph for the \"folder\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-folder-o $breadcrumb-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,68,1",
                  "text": "1,66,4,82",
                  "type": "1,65,10",
                  "value": "1,68,35"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-folder-glyph-color",
                "text": "The color to use for the \"folder\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "color",
                "value": "$breadcrumb-glyph-color",
                "src": {
                  "name": "1,74,1",
                  "text": "1,72,4,93",
                  "type": "1,71,10",
                  "value": "1,74,41"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-folder-icon",
                "text": "The background-image for the default \"folder\" icon\n",
                "type": "String",
                "value": "'tree/folder'",
                "src": {
                  "name": "1,38,1",
                  "text": "1,36,4,51",
                  "type": "1,35,10",
                  "value": "1,38,34"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-folder-open-glyph",
                "text": "Glyph for the \"open folder\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-folder-open-o $breadcrumb-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,80,1",
                  "text": "1,78,4,87",
                  "type": "1,77,10",
                  "value": "1,80,40"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-folder-open-glyph-color",
                "text": "The color to use for the \"open folder\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "color",
                "value": "$breadcrumb-folder-glyph-color",
                "src": {
                  "name": "1,86,1",
                  "text": "1,84,4,98",
                  "type": "1,83,10",
                  "value": "1,86,46"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-folder-open-icon",
                "text": "The background-image for the default \"open folder\" icon\n",
                "type": "String",
                "value": "'tree/folder-open'",
                "src": {
                  "name": "1,44,1",
                  "text": "1,42,4,56",
                  "type": "1,41,10",
                  "value": "1,44,39"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-glyph-color",
                "text": "The color to use for breadcrumb icons when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "color",
                "value": "$button-toolbar-glyph-color",
                "src": {
                  "name": "1,62,1",
                  "text": "1,60,4,92",
                  "type": "1,59,10",
                  "value": "1,62,34"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-glyph-font-size",
                "text": "The font size to use for breadcrumb icons when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "Number",
                "value": "16px",
                "src": {
                  "name": "1,56,1",
                  "text": "1,54,4,96",
                  "type": "1,53,10",
                  "value": "1,56,38"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-include-menu-active-arrow",
                "text": "`true` to include a separate background-image for menu arrows when a breadcrumb button's\nmenu is open\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "1,129,1",
                  "text": "1,126,4,102",
                  "type": "1,125,10",
                  "value": "1,129,48"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-include-split-over-arrow",
                "text": "`true` to include a separate background-image for split arrows when a breadcrumb button's\narrow is hovered\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "1,136,1",
                  "text": "1,133,4,107",
                  "type": "1,132,10",
                  "value": "1,136,47"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-leaf-glyph",
                "text": "Glyph for the \"leaf\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-file-o $breadcrumb-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,92,1",
                  "text": "1,90,4,80",
                  "type": "1,89,10",
                  "value": "1,92,33"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-leaf-glyph-color",
                "text": "The color to use for the \"leaf\" icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "color",
                "value": "$breadcrumb-glyph-color",
                "src": {
                  "name": "1,98,1",
                  "text": "1,96,4,91",
                  "type": "1,95,10",
                  "value": "1,98,39"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-leaf-icon",
                "text": "The background-image for the default \"leaf\" icon\n",
                "type": "String",
                "value": "'tree/leaf'",
                "src": {
                  "name": "1,50,1",
                  "text": "1,48,4,49",
                  "type": "1,47,10",
                  "value": "1,50,32"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-border-color",
                "text": "The border-color of Breadcrumb scrollers\n",
                "type": "color",
                "value": "$toolbar-scroller-border-color",
                "src": {
                  "name": "1,154,1",
                  "text": "1,152,4,41",
                  "type": "1,151,10",
                  "value": "1,154,44"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-border-width",
                "text": "The border-width of Breadcrumb scrollers\n",
                "type": "Number",
                "value": "$toolbar-scroller-border-width",
                "src": {
                  "name": "1,160,1",
                  "text": "1,158,4,41",
                  "type": "1,157,10",
                  "value": "1,160,44"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-bottom-margin",
                "text": "The margin of \"bottom\" Breadcrumb scroller buttons\n",
                "type": "Number/list",
                "value": "$toolbar-scroller-bottom-margin",
                "src": {
                  "name": "1,178,1",
                  "text": "1,176,4,51",
                  "type": "1,175,10",
                  "value": "1,178,45"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-cursor",
                "text": "The cursor of Breadcrumb scrollers\n",
                "type": "String",
                "value": "$toolbar-scroller-cursor",
                "src": {
                  "name": "1,190,1",
                  "text": "1,188,4,35",
                  "type": "1,187,10",
                  "value": "1,190,38"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-cursor-disabled",
                "text": "The cursor of disabled Breadcrumb scrollers\n",
                "type": "String",
                "value": "$toolbar-scroller-cursor-disabled",
                "src": {
                  "name": "1,196,1",
                  "text": "1,194,4,44",
                  "type": "1,193,10",
                  "value": "1,196,47"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-height",
                "text": "The height of Breadcrumb scrollers\n",
                "type": "Number",
                "value": "$toolbar-scroller-height",
                "src": {
                  "name": "1,148,1",
                  "text": "1,146,4,35",
                  "type": "1,145,10",
                  "value": "1,148,38"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-left-margin",
                "text": "The margin of \"left\" Breadcrumb scroller buttons\n",
                "type": "Number/list",
                "value": "$toolbar-scroller-left-margin",
                "src": {
                  "name": "1,184,1",
                  "text": "1,182,4,49",
                  "type": "1,181,10",
                  "value": "1,184,43"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-opacity",
                "text": "The opacity of Breadcrumb scroller buttons. Only applicable when\n<a href='#!/api/Ext.toolbar.Breadcrumb-var-$breadcrumb-classic-scrollers'>$breadcrumb-classic-scrollers</a> is `false`.\n",
                "type": "Number",
                "value": "$toolbar-scroller-opacity",
                "src": {
                  "name": "1,203,1",
                  "text": "1,200,4,116",
                  "type": "1,199,10",
                  "value": "1,203,39"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-opacity-disabled",
                "text": "The opacity of disabled Breadcrumb scroller buttons. Only applicable when\n<a href='#!/api/Ext.toolbar.Breadcrumb-var-$breadcrumb-classic-scrollers'>$breadcrumb-classic-scrollers</a> is `false`.\n",
                "type": "Number",
                "value": "$toolbar-scroller-opacity-disabled",
                "src": {
                  "name": "1,224,1",
                  "text": "1,221,4,125",
                  "type": "1,220,10",
                  "value": "1,224,48"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-opacity-over",
                "text": "The opacity of hovered Breadcrumb scroller buttons. Only applicable when\n<a href='#!/api/Ext.toolbar.Breadcrumb-var-$breadcrumb-classic-scrollers'>$breadcrumb-classic-scrollers</a> is `false`.\n",
                "type": "Number",
                "value": "$toolbar-scroller-opacity-over",
                "src": {
                  "name": "1,210,1",
                  "text": "1,207,4,124",
                  "type": "1,206,10",
                  "value": "1,210,44"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-opacity-pressed",
                "text": "The opacity of pressed Breadcrumb scroller buttons. Only applicable when\n<a href='#!/api/Ext.toolbar.Breadcrumb-var-$breadcrumb-classic-scrollers'>$breadcrumb-classic-scrollers</a> is `false`.\n",
                "type": "Number",
                "value": "$toolbar-scroller-opacity-pressed",
                "src": {
                  "name": "1,217,1",
                  "text": "1,214,4,124",
                  "type": "1,213,10",
                  "value": "1,217,47"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-right-margin",
                "text": "The margin of \"right\" Breadcrumb scroller buttons\n",
                "type": "Number/list",
                "value": "$toolbar-scroller-right-margin",
                "src": {
                  "name": "1,172,1",
                  "text": "1,170,4,50",
                  "type": "1,169,10",
                  "value": "1,172,44"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-top-margin",
                "text": "The margin of \"top\" Breadcrumb scroller buttons\n",
                "type": "Number/list",
                "value": "$toolbar-scroller-top-margin",
                "src": {
                  "name": "1,166,1",
                  "text": "1,164,4,48",
                  "type": "1,163,10",
                  "value": "1,166,42"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-scroller-width",
                "text": "The width of Breadcrumb scrollers\n",
                "type": "Number",
                "value": "$toolbar-scroller-width",
                "src": {
                  "name": "1,142,1",
                  "text": "1,140,4,34",
                  "type": "1,139,10",
                  "value": "1,142,37"
                }
              },
              {
                "$type": "property",
                "name": "$breadcrumb-split-width",
                "text": "The width of breadcrumb arrows when <a href='#!/api/Ext.toolbar.Breadcrumb-cfg-useSplitButtons'>useSplitButtons</a> is `true`\n",
                "type": "Number",
                "value": "$button-small-split-width",
                "src": {
                  "name": "1,32,1",
                  "text": "1,30,4,71",
                  "type": "1,29,10",
                  "value": "1,32,34"
                }
              },
              {
                "$type": "property",
                "name": "$include-breadcrumb-default-ui",
                "text": "`true` to include the \"default\" breadcrumb UI\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "1,238,1",
                  "text": "1,236,4,46",
                  "type": "1,235,10",
                  "value": "1,238,41"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,14,0",
          "extends": "0,13,0",
          "mixins": "0,21,0",
          "name": "1,1,12",
          "requires": "0,16,0,0:0,17,0,0",
          "text": "0,2,4,548"
        }
      }
    ]
  },
  "version": 1
}