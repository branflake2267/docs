{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/CollectionKey.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "mixed": "Ext.mixin.Identifiable",
        "mixins": "Ext.mixin.Identifiable",
        "name": "Ext.util.CollectionKey",
        "since": "5.0.0",
        "text": "Maintains an additional key map for an <a href='#!/api/Ext.util.Collection'>Ext.util.Collection</a>. Instances of this class\nare seldom created manually. Rather they are created by the `Ext.util.Collection' when\ngiven an `extraKeys` config.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "keyFn",
                "optional": true,
                "since": "5.0.0",
                "text": "A function to retrieve the key of an item in the collection. This can be normal\nfunction that takes an item and returns the key or it can be the name of the\nmethod to call on an item to get the key.\n\nFor example:\n\n     new Ext.util.Collection({\n         keys: {\n             byName: {\n                 keyFn: 'getName' // each item has a \"getName\" method\n             }\n         }\n     });\n\nOr equivalently:\n\n     new Ext.util.Collection({\n         keys: {\n             byName: {\n                 keyFn: function (item) {\n                     return item.getName();\n                 }\n             }\n         }\n     });\n",
                "type": "Function/String",
                "src": {
                  "name": "0,20,36",
                  "since": "0,47,19",
                  "text": "0,21,12,621",
                  "type": "0,20,18"
                }
              },
              {
                "$type": "property",
                "name": "property",
                "text": "The name of the property on each item that is its key.\n\n     new Ext.util.Collection({\n         keys: {\n             byName: 'name'\n         }\n     });\n\nOr equivalently:\n\n     new Ext.util.Collection({\n         keys: {\n             byName: {\n                 property: 'name'\n             }\n         }\n     });\n\n     var item = collection.byName.get('fooname');\n",
                "type": "String",
                "src": {
                  "name": "0,52,26",
                  "text": "0,53,12,362",
                  "type": "0,52,18"
                }
              },
              {
                "$type": "property",
                "name": "rootProperty",
                "text": "The name of the sub-object property on each item that is its key. This value\noverrides <a href='#!/api/Ext.util.Collection-cfg-rootProperty'>Ext.util.Collection#rootProperty</a>.\n\n     new Ext.util.Collection({\n         keys: {\n             byName: {\n                 property: 'name',\n                 rootProperty: 'data'\n             }\n         }\n     });\n\n     var item = collection.byName.get('fooname');\n",
                "type": "String",
                "src": {
                  "name": "0,76,26",
                  "text": "0,77,12,362",
                  "type": "0,76,18"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "clear",
                "text": "Clears this index;\n\nCalled by <a href='#!/api/Ext.util.Collection-method-clear'>Ext.util.Collection#clear</a> when the collection is cleared.\n",
                "src": {
                  "access": "0,150,8",
                  "name": "0,155,0",
                  "text": "0,151,8,96"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "get",
                "text": "Returns the item or, if not `unique` possibly array of items that have the given\nkey.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key that will match the <a href='#!/api/Ext.util.CollectionKey-cfg-keyFn'>keyFn</a> return value or value of\nthe specified <a href='#!/api/Ext.util.CollectionKey-cfg-property'>property</a>.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,140,23",
                      "text": "0,140,27,61:0,141,8,26",
                      "type": "0,140,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "0,142,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,144,0",
                  "text": "0,138,8,86"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "2,75,25,3",
                      "type": "2,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,77,0",
                  "text": "2,74,8,93"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.util.CollectionKey-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "indexOf",
                "text": "Returns the index of the item with the given key in the collection. If this is not\na `unique` result, the index of the first item in the collection with the matching\nkey.\n\nTo iterate the indices of all items with a matching (not `unique`) key:\n\n     for (index = collection.byName.indexOf('foo');\n             index >= 0;\n             index = collection.byName.indexOf('foo', index)) {\n         // process item at \"index\"\n     }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key that will match the <a href='#!/api/Ext.util.CollectionKey-cfg-keyFn'>keyFn</a> return value or value of\nthe specified <a href='#!/api/Ext.util.CollectionKey-cfg-property'>property</a>.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,179,23",
                      "text": "0,179,27,61:0,180,8,26",
                      "type": "0,179,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startAt",
                    "optional": true,
                    "text": "The index at which to start. Only occurrences beyond\nthis index are returned.\n",
                    "type": "Number",
                    "value": "-1",
                    "src": {
                      "name": "0,181,25",
                      "text": "0,181,37,53:0,182,8,25",
                      "type": "0,181,16",
                      "value": "0,181,33"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of the first item with the given `key` beyond the given\n`startAt` index or -1 if there are no such items.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,183,25,66:0,184,8,50",
                      "type": "0,183,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,186,0",
                  "text": "0,167,8,430"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.util.CollectionKey-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.util.CollectionKey-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.util.CollectionKey-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.util.CollectionKey-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.util.CollectionKey-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.util.CollectionKey-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.util.CollectionKey-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "updateKey",
                "since": "5.0.0",
                "text": "Change the key for an existing item in the collection. If the old key does not\nexist this call does nothing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item whose key has changed.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,224,24",
                      "text": "0,224,29,32",
                      "type": "0,224,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldKey",
                    "text": "The old key for the `item`.\n",
                    "type": "String",
                    "src": {
                      "name": "0,225,24",
                      "text": "0,225,31,28",
                      "type": "0,225,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,228,0",
                  "since": "0,226,15",
                  "text": "0,222,8,109"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.util.CollectionKey-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.util.CollectionKey-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.util.CollectionKey-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.util.CollectionKey-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.util.CollectionKey-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.util.CollectionKey-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.util.CollectionKey-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.util.CollectionKey-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.util.CollectionKey-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.util.CollectionKey-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.util.CollectionKey-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "generation",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is used to know when this `Index` is in sync with the `Collection`.\nWhen the two are synchronized, their <a href='#!/api/Ext.util.CollectionKey-property-generation'>generation</a> values match.\n",
                "src": {
                  "access": "0,99,8",
                  "name": "0,103,0",
                  "readonly": "0,100,8",
                  "since": "0,101,15",
                  "text": "0,97,8,146"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "map",
                "since": "5.0.0",
                "text": "An object used as map to get an object based on its key.\n",
                "type": "Object",
                "src": {
                  "access": "0,109,8",
                  "name": "0,106,27",
                  "since": "0,108,15",
                  "text": "0,107,8,57",
                  "type": "0,106,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "mapRebuilds",
                "readonly": true,
                "text": "The number of times the <a href='#!/api/Ext.util.CollectionKey-property-map'>map</a> has been rebuilt. This is for diagnostic use.\n",
                "type": "Number",
                "src": {
                  "access": "0,116,8",
                  "name": "0,114,27",
                  "readonly": "0,117,8",
                  "text": "0,115,8,76",
                  "type": "0,114,19"
                }
              },
              {
                "$type": "property",
                "name": "name",
                "readonly": true,
                "text": "This property is set by <a href='#!/api/Ext.util.Collection'>Ext.util.Collection</a> when added via `extraKeys`.\n",
                "type": "String",
                "src": {
                  "name": "0,122,27",
                  "readonly": "0,124,8",
                  "text": "0,123,8,74",
                  "type": "0,122,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "mixins": "0,10,0",
          "name": "0,8,0",
          "since": "0,6,11",
          "text": "0,2,4,203"
        }
      }
    ]
  },
  "version": 1
}