{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/util/Focusable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Ext.util.Focusable",
        "text": "A mixin for individually focusable things (Components, Widgets, etc)\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "tabIndex",
                "optional": true,
                "text": "DOM tabIndex attribute for this Focusable's\nfocusEl.\n",
                "type": "Number",
                "src": {
                  "name": "0,33,23",
                  "text": "0,33,33,44:0,34,8,9",
                  "type": "0,33,14"
                }
              },
              {
                "$type": "property",
                "name": "focusCls",
                "optional": true,
                "text": "CSS class that will be added to focused\nComponent, and removed when Component blurs.\n",
                "type": "String",
                "value": "'x-focus'",
                "src": {
                  "name": "0,38,23",
                  "text": "0,38,43,40:0,39,8,45",
                  "type": "0,38,14",
                  "value": "0,38,32"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "focus",
                "text": "Fires when this Component receives focus.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "0,46,31",
                      "type": "0,46,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The focus event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,47,33",
                      "text": "0,47,39,17",
                      "type": "0,47,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,44,15",
                  "text": "0,45,8,42"
                }
              },
              {
                "$type": "event",
                "name": "blur",
                "text": "Fires when this Component loses focus.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "0,53,31",
                      "type": "0,53,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The blur event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,54,33",
                      "text": "0,54,39,16",
                      "type": "0,54,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,51,15",
                  "text": "0,52,8,39"
                }
              },
              {
                "$type": "event",
                "name": "focusenter",
                "text": "Fires when focus enters this Component's hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "0,60,31",
                      "type": "0,60,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The focusenter event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,61,33",
                      "text": "0,61,39,22",
                      "type": "0,61,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,58,15",
                  "text": "0,59,8,52"
                }
              },
              {
                "$type": "event",
                "name": "focusleave",
                "text": "Fires when focus leaves this Component's hierarchy.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.Component",
                    "src": {
                      "name": "0,67,31",
                      "type": "0,67,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The focusleave event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,68,33",
                      "text": "0,68,39,22",
                      "type": "0,68,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,65,15",
                  "text": "0,66,8,52"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "protected",
                "name": "initFocusableEvents",
                "text": "Template method to do any event listener initialization for a Focusable.\nThis generally happens after the focusEl is available.\n",
                "src": {
                  "access": "0,81,8",
                  "name": "0,83,0",
                  "text": "0,79,8,128"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getFocusClsEl",
                "text": "Returns the focus styling holder element associated with this Focusable.\nBy default it is the same element as <a href='#!/api/Ext.util.Focusable-method-getFocusEl'>getFocusEl</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The focus styling element.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,93,30,27",
                      "type": "0,93,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,94,8",
                  "name": "0,96,0",
                  "text": "0,90,8,143"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getFocusEl",
                "text": "Returns the focus holder element associated with this Focusable. At the\nlevel of the Focusable base, this function returns `this.el` (or for Widgets,\n`this.element`).\n\nSubclasses with embedded focusable elements (such as Window, Field and Button)\nshould override this for use by <a href='#!/api/Ext.util.Focusable-method-focus'>Ext.util.Focusable#method-focus</a>\nmethod.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "0,109,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,110,8",
                  "name": "0,112,0",
                  "text": "0,101,8,334"
                }
              },
              {
                "$type": "method",
                "name": "isFocusable",
                "text": "Determine if this Focusable can receive focus at this time.\n\nNote that Containers can be non-focusable themselves while delegating\nfocus treatment to a child Component; see\n<a href='#!/api/Ext.container.Container'>Ext.container.Container</a> for more information.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "Optionally determine if the container itself\nis focusable, or if container's focus is delegated to a child component\nand that child is focusable.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,156,26",
                      "text": "0,156,38,45:0,157,8,102",
                      "type": "0,156,16",
                      "value": "0,156,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if component is focusable, false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,160,26,46",
                      "type": "0,160,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,162,0",
                  "text": "0,150,8,242"
                }
              },
              {
                "$type": "method",
                "name": "focus",
                "text": "Try to focus this component.\n\nIf this component is disabled, a close relation will be targeted for focus instead\nto keep focus localized for keyboard users.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selectText",
                    "optional": true,
                    "text": "If applicable, `true` to also select all the text in this component, or an array consisting of start and end (defaults to start) position of selection.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,202,24",
                      "text": "0,202,36,152",
                      "type": "0,202,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "delay",
                    "optional": true,
                    "text": "Delay the focus this number of milliseconds (true for 10 milliseconds).\n",
                    "type": "Boolean/Number",
                    "src": {
                      "name": "0,203,33",
                      "text": "0,203,40,72",
                      "type": "0,203,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "Only needed if the `delay` parameter is used. A function to call upon focus.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,204,27",
                      "text": "0,204,37,77",
                      "type": "0,204,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "Only needed if the `delay` parameter is used. The scope (`this` reference) in which to execute the callback.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,205,27",
                      "text": "0,205,34,109",
                      "type": "0,205,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The focused Component. Usually `this` Component. Some Containers may\ndelegate focus to a descendant Component (<a href='#!/api/Ext.window.Window'>Ext.window.Window</a>s can do this through their\n<a href='#!/api/Ext.window.Window-cfg-defaultFocus'>Ext.window.Window#defaultFocus</a> config option. If this component is disabled, a closely\nrelated component will be focused and that will be returned.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "0,206,32,69:0,207,8,271",
                      "type": "0,206,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,211,0",
                  "text": "0,198,8,157"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "cancelFocus",
                "text": "Cancel any deferred focus on this component\n",
                "src": {
                  "access": "0,296,8",
                  "name": "0,298,0",
                  "text": "0,295,8,44"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeBlur",
                "text": "Template method to do any pre-blur processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,310,33",
                      "text": "0,310,35,17",
                      "type": "0,310,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,309,8",
                  "name": "0,312,0",
                  "text": "0,308,8,47"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onBlur",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,317,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,315,8",
                  "name": "0,317,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "postBlur",
                "text": "Template method to do any post-blur processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,356,33",
                      "text": "0,356,35,17",
                      "type": "0,356,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,355,8",
                  "name": "0,358,0",
                  "text": "0,354,8,48"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "beforeFocus",
                "text": "Template method to do any pre-focus processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,364,33",
                      "text": "0,364,35,17",
                      "type": "0,364,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,363,8",
                  "name": "0,366,0",
                  "text": "0,362,8,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onFocus",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,371,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,369,8",
                  "name": "0,371,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "postFocus",
                "text": "Template method to do any post-focus processing.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event object\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,411,33",
                      "text": "0,411,35,17",
                      "type": "0,411,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,410,8",
                  "name": "0,413,0",
                  "text": "0,409,8,49"
                }
              },
              {
                "$type": "method",
                "name": "getTabIndex",
                "text": "Return the actual tabIndex for this Focusable.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "tabIndex attribute value\n",
                    "type": "Number",
                    "src": {
                      "text": "0,418,25,25",
                      "type": "0,418,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,420,0",
                  "text": "0,416,8,48"
                }
              },
              {
                "$type": "method",
                "name": "setTabIndex",
                "text": "Set the tabIndex property for this Focusable. If the focusEl\nis avalable, set tabIndex attribute on it, too.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newTabIndex",
                    "text": "new tabIndex to set\n",
                    "type": "Number",
                    "src": {
                      "name": "0,463,24",
                      "text": "0,463,36,20",
                      "type": "0,463,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,465,0",
                  "text": "0,460,8,110"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onFocusEnter",
                "template": true,
                "text": "Called when focus enters this Component's hierarchy\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "event",
                        "text": "The underlying DOM event.\n",
                        "type": "Ext.event.Event",
                        "src": {
                          "name": "0,501,35",
                          "text": "0,501,41,26",
                          "type": "0,501,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "The element gaining focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "0,502,31",
                          "text": "0,502,38,27",
                          "type": "0,502,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "relatedTarget",
                        "text": "The element losing focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "0,503,31",
                          "text": "0,503,45,26",
                          "type": "0,503,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "toComponent",
                        "text": "The Component gaining focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "0,504,33",
                          "text": "0,504,45,29",
                          "type": "0,504,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "fromComponent",
                        "text": "The Component losing focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "0,505,33",
                          "text": "0,505,47,28",
                          "type": "0,505,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,500,24",
                      "type": "0,500,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,498,8",
                  "name": "0,507,0",
                  "template": "0,497,8",
                  "text": "0,499,8,52"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "onFocusLeave",
                "template": true,
                "text": "Called when focus exits from this Component's hierarchy\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "items": [
                      {
                        "$type": "property",
                        "name": "event",
                        "text": "The underlying DOM event.\n",
                        "type": "Ext.event.Event",
                        "src": {
                          "name": "0,529,35",
                          "text": "0,529,41,26",
                          "type": "0,529,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "The element gaining focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "0,530,31",
                          "text": "0,530,38,27",
                          "type": "0,530,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "relatedTarget",
                        "text": "The element losing focus.\n",
                        "type": "HTMLElement",
                        "src": {
                          "name": "0,531,31",
                          "text": "0,531,45,26",
                          "type": "0,531,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "toComponent",
                        "text": "The Component gaining focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "0,532,33",
                          "text": "0,532,45,29",
                          "type": "0,532,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "fromComponent",
                        "text": "The Component losing focus.\n",
                        "type": "Ext.Component",
                        "src": {
                          "name": "0,533,33",
                          "text": "0,533,47,28",
                          "type": "0,533,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,528,33",
                      "type": "0,528,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,526,8",
                  "name": "0,535,0",
                  "template": "0,525,8",
                  "text": "0,527,8,56"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "revertFocus",
                "text": "Returns focus to the cached previously focused Component or element.\n\nUsually called by onHide.\n",
                "src": {
                  "access": "0,550,12",
                  "name": "0,552,0",
                  "text": "0,546,12,97"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "findFocusTarget",
                "text": "Finds an alternate Component to focus if this Component is disabled while focused, or\nfocused while disabled, or otherwise unable to focus.\n\nIn both cases, focus must not be lost to document.body, but must move to an intuitively\nconnectible Component, either a sibling, or uncle or nephew.\n\nThis is both for the convenience of keyboard users, and also for when focus is tracked\nwithin a Component tree such as for ComboBoxes and their dropdowns.\n\nFor example, a ComboBox with a PagingToolbar in is BoundList. If the \"Next Page\"\nbutton is hit, the LoadMask shows and focuses, the next page is the last page, so\nthe \"Next Page\" button is disabled. When the LoadMask hides, it attempt to focus the\nlast focused Component which is the disabled \"Next Page\" button. In this situation,\nfocus should move to a sibling within the PagingToolbar.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A closely related focusable Component to which focus can move.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "0,636,36,63",
                      "type": "0,636,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,637,12",
                  "name": "0,639,0",
                  "text": "0,621,12,837"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "initFocusableElement",
                "text": "Sets up the focus listener on this Component's <a href='#!/api/Ext.util.Focusable-method-getFocusEl'>getFocusEl</a> if it has one.\n\nForm Components which must implicitly participate in tabbing order usually have a naturally\nfocusable element as their <a href='#!/api/Ext.util.Focusable-method-getFocusEl'>getFocusEl</a>, and it is the DOM event of that\nreceiving focus which drives the Component's <a href='#!/api/Ext.util.Focusable-method-onFocus'>onFocus</a> handling, and the DOM event of it\nbeing blurred which drives the <a href='#!/api/Ext.util.Focusable-method-onBlur'>onBlur</a> handling.\n",
                "src": {
                  "access": "0,669,12",
                  "name": "0,671,0",
                  "text": "0,663,12,410"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getFocusTask",
                "src": {
                  "access": "0,699,12",
                  "name": "0,701,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleFocusEvent",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,712,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,710,12",
                  "name": "0,712,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleBlurEvent",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,734,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,732,12",
                  "name": "0,734,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isFocusing",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,750,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,748,12",
                  "name": "0,750,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isBlurring",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,772,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,770,12",
                  "name": "0,772,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "blur",
                "src": {
                  "access": "0,792,12",
                  "name": "0,794,0"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "hasFocus",
                "text": "`true` if this component has focus.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,10,8",
                  "name": "0,8,28",
                  "text": "0,9,8,36",
                  "type": "0,8,19"
                }
              },
              {
                "$type": "property",
                "name": "focusable",
                "readonly": true,
                "text": "\n`true` for interactive Components, `false` for static Components.\nFor Containers, this property reflects interactiveness of the\nContainer itself, not its children. See <a href='#!/api/Ext.util.Focusable-method-isFocusable'>isFocusable</a>.\n\n**Note:** Plain components are static, so not focusable.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,15,28",
                  "readonly": "0,16,8",
                  "text": "0,17,8,249",
                  "type": "0,15,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "focusEl",
                "text": "The component's focusEl.\nAvailable after rendering.\n",
                "type": "Ext.dom.Element",
                "src": {
                  "access": "0,29,8",
                  "name": "0,27,36",
                  "text": "0,27,44,25:0,28,8,27",
                  "type": "0,27,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "initFocusable",
                "text": "Template method to do any Focusable related initialization that\ndoes not involve event listeners creation.\n",
                "src": {
                  "access": "0,74,8",
                  "name": "0,76,0",
                  "text": "0,72,8,107"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,4,0",
          "text": "0,2,4,69"
        }
      }
    ]
  },
  "version": 1
}