{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/Group.js",
    "../../../ext/packages/core/src/util/Collection.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/packages/core/src/class/Base.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Ext.util.Collection,Ext.Base,Object",
        "extends": "Ext.util.Collection",
        "name": "Ext.util.Group",
        "text": "Encapsulates a grouped collection of records within a {@link Ext.util.Collection}\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "autoGroup",
                "optional": true,
                "text": "`true` to sort by the grouper\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "access": "1,94,12",
                  "name": "1,93,28",
                  "text": "1,93,44,30",
                  "type": "1,93,18",
                  "value": "1,93,38"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "autoSort",
                "optional": true,
                "text": "`true` to maintain sorted order when items\nare added regardless of requested insertion point, or when an item mutation\nresults in a new sort position.\n\nThis does not affect a filtered Collection's reaction to mutations of the source\nCollection. If sorters are present when the source Collection is mutated, this Collection's\nsort order will always be maintained.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "access": "1,88,12",
                  "name": "1,81,28",
                  "text": "1,81,43,43:1,82,12,320",
                  "type": "1,81,18",
                  "value": "1,81,37"
                }
              },
              {
                "$type": "property",
                "name": "decoder",
                "text": "A function that can convert newly added items to a proper type before being\nadded to this collection.\n",
                "type": "Function",
                "src": {
                  "name": "1,99,28",
                  "text": "1,100,12,102",
                  "type": "1,99,18"
                }
              },
              {
                "$type": "property",
                "name": "defaultSortDirection",
                "text": "The default sort direction to use if one is not specified.\n",
                "type": "String",
                "src": {
                  "name": "1,272,26",
                  "text": "1,273,12,59",
                  "type": "1,272,18"
                }
              },
              {
                "$type": "property",
                "name": "extraKeys",
                "since": "5.0.0",
                "text": "One or more `Ext.util.CollectionKey' configuration objects or key properties.\nEach property of the given object is the name of the `CollectionKey` instance\nthat is stored on this collection. The value of each property configures the\n`CollectionKey` instance.\n\n     var collection = new Ext.util.Collection({\n         extraKeys: {\n             byName: 'name' // based on \"name\" property of each item\n         }\n     });\n\nOr equivalently:\n\n     var collection = new Ext.util.Collection({\n         extraKeys: {\n             byName: {\n                 property: 'name'\n             }\n         }\n     });\n\nTo provide a custom key extraction function instead:\n\n     var collection = new Ext.util.Collection({\n         extraKeys: {\n             byName: {\n                 keyFn: function (item) {\n                     return item.name;\n                 }\n             }\n         }\n     });\n\nOr to call a key getter method from each item:\n\n     var collection = new Ext.util.Collection({\n         extraKeys: {\n             byName: {\n                 keyFn: 'getName'\n             }\n         }\n     });\n\nTo use the above:\n\n     var item = collection.byName.get('somename');\n\n**NOTE** Either a `property` or `{@link #cfg!keyFn keyFn}` must be be specified to define each\nkey.\n",
                "type": "Object",
                "src": {
                  "name": "1,106,26",
                  "since": "1,156,19",
                  "text": "1,107,12,1247",
                  "type": "1,106,18"
                }
              },
              {
                "$type": "property",
                "name": "filters",
                "since": "5.0.0",
                "text": "The collection of {@link Ext.util.Filter} for this collection. At the\ntime a collection is created `{@link #cfg!filters filters}` can be specified as a unit. After that\ntime the normal `setFilters` method can also be given a set of replacement\nfilters for the collection.\n\nIndividual filters can be specified as an `{@link Ext.util.Filter}` instance, a config\nobject for `{@link Ext.util.Filter}` or simply a function that will be wrapped in a\ninstance with its {@Ext.util.Filter#filterFn filterFn} set.\n\nFor fine grain control of the filters collection, call `{@link #method!getFilters getFilters}` to return\nthe `{@link Ext.util.Collection}` instance that holds this collection's filters.\n\n     var collection = new Ext.util.Collection();\n     var filters = collection.getFilters(); // an Ext.util.FilterCollection\n\n     function legalAge (item) {\n         return item.age >= 21;\n     }\n\n     filters.add(legalAge);\n\n     //...\n\n     filters.remove(legalAge);\n\nAny changes to the `{@link #cfg!filters filters}` collection will cause this collection to adjust\nits items accordingly (if `autoFilter` is `true`).\n",
                "type": "Array/Ext.util.FilterCollection",
                "src": {
                  "name": "1,161,51",
                  "since": "1,189,19",
                  "text": "1,162,12,1027",
                  "type": "1,161,18"
                }
              },
              {
                "$type": "property",
                "name": "grouper",
                "text": "A configuration object for this collection's {@link Ext.util.Grouper}.\n\nFor example, to group items by the first letter of the last name:\n\n     var collection = new Ext.util.Collection({\n         grouper: {\n             groupFn: function (item) {\n                 return item.lastName.substring(0, 1);\n             }\n         }\n     });\n",
                "type": "Object",
                "src": {
                  "name": "1,194,26",
                  "text": "1,195,12,345",
                  "type": "1,194,18"
                }
              },
              {
                "$type": "property",
                "name": "groups",
                "text": "The collection of to hold each group container. This collection is created and\nremoved dynamically based on `{@link #cfg!grouper grouper}`. Application code should only need to\ncall `getGroups` to retrieve the collection and not `setGroups`.\n",
                "type": "Ext.util.GroupCollection",
                "src": {
                  "name": "1,210,44",
                  "text": "1,211,12,221",
                  "type": "1,210,18"
                }
              },
              {
                "$type": "property",
                "name": "keyFn",
                "optional": true,
                "since": "5.0.0",
                "text": "A function to retrieve the key of an item in the collection. If provided,\nthis replaces the default `{@link #method!getKey getKey}` method. The default `{@link #method!getKey getKey}` method handles\nitems that have either an \"id\" or \"_id\" property or failing that a `{@link #method!getId getId}`\nmethod to call.\n",
                "type": "Function",
                "src": {
                  "name": "1,637,29",
                  "since": "1,642,19",
                  "text": "1,638,12,244",
                  "type": "1,637,18"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the {@link Ext.view.View}'s **`{@link Ext.view.View#event!itemclick Ext.view.View#itemclick}`** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "2,243,25",
                  "text": "2,244,11,1325",
                  "type": "2,243,17"
                }
              },
              {
                "$type": "property",
                "name": "multiSortLimit",
                "optional": true,
                "text": "The maximum number of sorters which may be applied to this Sortable when using\nthe \"multi\" insertion position when adding sorters.\n\nNew sorters added using the \"multi\" insertion position are inserted at the top\nof the sorters list becoming the new primary sort key.\n\nIf the sorters collection has grown to longer then **`{@link #cfg!multiSortLimit multiSortLimit}`**, then\nthe it is trimmed.\n",
                "type": "Number",
                "value": "3",
                "src": {
                  "name": "1,259,27",
                  "text": "1,260,12,364",
                  "type": "1,259,18",
                  "value": "1,259,42"
                }
              },
              {
                "$type": "property",
                "name": "rootProperty",
                "text": "The root property to use for aggregation, filtering and sorting. By default\nthis is `{@link null}` but when containing things like {@link Ext.data.Model}\nthis config would likely be set to \"data\" so that property names are applied\nto the fields of each record.\n",
                "type": "String",
                "src": {
                  "name": "1,218,26",
                  "text": "1,219,12,261",
                  "type": "1,218,18"
                }
              },
              {
                "$type": "property",
                "name": "sorters",
                "since": "5.0.0",
                "text": "Array of {@link Ext.util.Sorter} for this collection. At the time a\ncollection is created the `{@link #cfg!sorters sorters}` can be specified as a unit. After that time\nthe normal `setSorters` method can be also be given a set of replacement\nsorters.\n\nIndividual sorters can be specified as an `{@link Ext.util.Sorter}` instance, a config\nobject for `{@link Ext.util.Sorter}` or simply the name of a property by which to sort.\n\nAn alternative way to extend the sorters is to call the `sort` method and pass\na property or sorter config to add to the sorters.\n\nFor fine grain control of the sorters collection, call `{@link #method!getSorters getSorters}` to return\nthe `{@link Ext.util.Collection}` instance that holds this collection's sorters.\n\n     var collection = new Ext.util.Collection();\n     var sorters = collection.getSorters(); // an Ext.util.SorterCollection\n\n     sorters.add('name');\n\n     //...\n\n     sorters.remove('name');\n\nAny changes to the `{@link #cfg!sorters sorters}` collection will cause this collection to adjust\nits items accordingly (if `{@link #cfg!autoSort autoSort}` is `true`).\n",
                "type": "Array/Ext.util.SorterCollection",
                "src": {
                  "name": "1,227,51",
                  "since": "1,254,19",
                  "text": "1,228,12,1004",
                  "type": "1,227,18"
                }
              },
              {
                "$type": "property",
                "name": "source",
                "since": "5.0.0",
                "text": "The base `Collection`. This collection contains the items to which filters\nare applied to populate this collection. In this configuration, only the\nroot `{@link #cfg!source source}` collection can have items truly added or removed.\n",
                "type": "Ext.util.Collection",
                "src": {
                  "name": "1,278,39",
                  "since": "1,282,19",
                  "text": "1,279,12,212",
                  "type": "1,278,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "trackGroups",
                "text": "`true` to track individual groups in a Ext.util.GroupCollection\n",
                "type": "Boolean",
                "src": {
                  "access": "1,289,12",
                  "name": "1,287,27",
                  "text": "1,288,12,64",
                  "type": "1,287,18"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "add",
                "since": "5.0.0",
                "text": "Fires after items have been added to the collection.\n\nAll `{@link #event!add #event-add}` and `{@link #event!remove #event-remove}` events occur between\n`{@link #event!beginupdate #event-beginupdate}` and `{@link #event!endupdate #event-endupdate}`\nevents so it is best to do only the minimal amount of work in response to these\nevents and move the more expensive side-effects to an `{@link #event!endupdate endupdate}` listener.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being modified.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,371,37",
                      "text": "1,371,48,31",
                      "type": "1,371,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "An object describing the addition.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "at",
                        "text": "The index in the collection where the add occurred.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,375,32",
                          "text": "1,375,35,52",
                          "type": "1,375,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "atItem",
                        "text": "The item after which the new items were inserted or\n`{@link null}` if at the beginning of the collection.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,377,32",
                          "text": "1,377,39,52:1,378,8,47",
                          "type": "1,377,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "items",
                        "text": "The items that are now added to the collection.\n",
                        "type": "Object[]",
                        "src": {
                          "name": "1,380,34",
                          "text": "1,380,40,48",
                          "type": "1,380,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "keys",
                        "optional": true,
                        "text": "If available this array holds the keys (extracted by\n`{@link #method!getKey getKey}`) for each item in the `{@link #property!items items}` array.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,382,32",
                          "text": "1,382,38,53:1,383,8,47",
                          "type": "1,382,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "next",
                        "optional": true,
                        "text": "If more `{@link #event!add #event-add}` events are in queue\nto be delivered this is a reference to the `details` instance for the next\n`{@link #event!add #event-add}` event. This will only be the case when the collection is\nsorted as the new items often need to be inserted at multiple locations to maintain\nthe sort. In this case, all of the new items have already been added not just those\ndescribed by the first `{@link #event!add #event-add}` event.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,385,33",
                          "text": "1,385,39,53:1,386,8,381",
                          "type": "1,385,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "replaced",
                        "optional": true,
                        "text": "If this addition has a corresponding set of\n`{@link #event!remove #event-remove}` events this reference holds the `details` object for\nthe first `remove` event. That `details` object may have a `next` property if there\nare multiple associated `remove` events.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,392,33",
                          "text": "1,392,43,44:1,393,8,210",
                          "type": "1,392,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,373,24",
                      "text": "1,373,32,35",
                      "type": "1,373,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,363,15",
                  "since": "1,397,15",
                  "text": "1,364,8,378"
                }
              },
              {
                "$type": "event",
                "name": "beforeitemchange",
                "since": "5.0.0",
                "text": "This event fires before an item change is reflected in the collection. This event\nis always followed by an `{@link #event!itemchange itemchange}` event and, depending on the change, possibly\nan `add`, `remove` and/or `{@link #event!updatekey updatekey}` event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being modified.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,436,37",
                      "text": "1,436,48,31",
                      "type": "1,436,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "An object describing the change.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The item that has changed.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,440,32",
                          "text": "1,440,37,27",
                          "type": "1,440,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of the item that has changed.\n",
                        "type": "String",
                        "src": {
                          "name": "1,442,32",
                          "text": "1,442,36,38",
                          "type": "1,442,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "filterChanged",
                        "text": "This is `true` if the filter status of the\n`item` has changed. That is, the item was previously filtered out and is no longer\nor the opposite.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,444,33",
                          "text": "1,444,47,43:1,445,8,101",
                          "type": "1,444,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "keyChanged",
                        "text": "This is `true` if the item has changed keys. If\nso, check `oldKey` for the old key. An `{@link #event!updatekey updatekey}` event will follow.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,448,33",
                          "text": "1,448,44,48:1,449,8,71",
                          "type": "1,448,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "indexChanged",
                        "text": "This is `true` if the item needs to move to\na new index in the collection due to sorting. The index can be seen in `index`.\nThe old index is in `oldIndex`.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,451,33",
                          "text": "1,451,46,44:1,452,8,113",
                          "type": "1,451,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "modified",
                        "optional": true,
                        "text": "If known this property holds the array of names\nof the modified properties of the item.\n",
                        "type": "String[]",
                        "src": {
                          "name": "1,455,35",
                          "text": "1,455,45,48:1,456,8,41",
                          "type": "1,455,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "filtered",
                        "optional": true,
                        "text": "This value is `true` if the item will be filtered\nout of the collection.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,458,34",
                          "text": "1,458,44,50:1,459,8,24",
                          "type": "1,458,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "optional": true,
                        "text": "The new index in the collection for the item if\nthe item is being moved (see `indexChanged`). If the item is being removed due to\nfiltering, this will be -1.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,461,33",
                          "text": "1,461,40,48:1,462,8,111",
                          "type": "1,461,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "oldIndex",
                        "optional": true,
                        "text": "The old index in the collection for the item if\nthe item is being moved (see `indexChanged`). If the item was being removed due to\nfiltering, this will be -1.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,465,33",
                          "text": "1,465,43,48:1,466,8,112",
                          "type": "1,465,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "oldKey",
                        "optional": true,
                        "text": "The old key for the `item` if the item's key has\nchanged (see `keyChanged`).\n",
                        "type": "Object",
                        "src": {
                          "name": "1,469,33",
                          "text": "1,469,41,49:1,470,8,29",
                          "type": "1,469,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "wasFiltered",
                        "optional": true,
                        "text": "This value is `true` if the item was filtered\nout of the collection.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,472,34",
                          "text": "1,472,47,46:1,473,8,24",
                          "type": "1,472,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,438,24",
                      "text": "1,438,32,33",
                      "type": "1,438,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,431,15",
                  "since": "1,475,15",
                  "text": "1,432,8,211"
                }
              },
              {
                "$type": "event",
                "access": "private",
                "name": "beforesort",
                "text": "This event fires before the contents of the collection have been sorted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being sorted.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,588,37",
                      "text": "1,588,48,29",
                      "type": "1,588,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "Array of sorters applied to the Collection.\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "name": "1,589,35",
                      "text": "1,589,43,44",
                      "type": "1,589,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,585,8",
                  "name": "1,584,15",
                  "text": "1,586,8,74"
                }
              },
              {
                "$type": "event",
                "name": "beginupdate",
                "since": "5.0.0",
                "text": "Fired before changes are made to the collection. This event fires when the\n`{@link #method!beginUpdate beginUpdate}` method is called and the counter it manages transitions from 0 to 1.\n\nAll `{@link #event!add #event-add}` and `{@link #event!remove #event-remove}` events occur between\n`{@link #event!beginupdate #event-beginupdate}` and `{@link #event!endupdate #event-endupdate}`\nevents so it is best to do only the minimal amount of work in response to these\nevents and move the more expensive side-effects to an `{@link #event!endupdate endupdate}` listener.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being modified.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,410,37",
                      "text": "1,410,48,31",
                      "type": "1,410,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,401,15",
                  "since": "1,412,15",
                  "text": "1,402,8,483"
                }
              },
              {
                "$type": "event",
                "name": "endupdate",
                "since": "5.0.0",
                "text": "Fired after changes are made to the collection. This event fires when the `{@link #method!endUpdate endUpdate}`\nmethod is called and the counter it manages transitions from 1 to 0.\n\nAll `{@link #event!add #event-add}` and `{@link #event!remove #event-remove}` events occur between\n`{@link #event!beginupdate #event-beginupdate}` and `{@link #event!endupdate #event-endupdate}`\nevents so it is best to do only the minimal amount of work in response to these\nevents and move the more expensive side-effects to an `{@link #event!endupdate endupdate}` listener.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being modified.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,425,37",
                      "text": "1,425,48,31",
                      "type": "1,425,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,416,15",
                  "since": "1,427,15",
                  "text": "1,417,8,480"
                }
              },
              {
                "$type": "event",
                "name": "itemchange",
                "since": "5.0.0",
                "text": "This event fires after an item change is reflected in the collection. This event\nalways follows a `{@link #event!beforeitemchange beforeitemchange}` event and its corresponding `add`, `remove`\nand/or `{@link #event!updatekey updatekey}` events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being modified.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,484,37",
                      "text": "1,484,48,31",
                      "type": "1,484,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "An object describing the change.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The item that has changed.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,488,32",
                          "text": "1,488,37,27",
                          "type": "1,488,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of the item that has changed.\n",
                        "type": "String",
                        "src": {
                          "name": "1,490,32",
                          "text": "1,490,36,38",
                          "type": "1,490,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "filterChanged",
                        "text": "This is `true` if the filter status of the\n`item` has changed. That is, the item was previously filtered out and is no longer\nor the opposite.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,492,33",
                          "text": "1,492,47,43:1,493,8,101",
                          "type": "1,492,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "keyChanged",
                        "text": "This is `true` if the item has changed keys. If\nso, check `oldKey` for the old key. An `{@link #event!updatekey updatekey}` event will have been sent.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,496,32",
                          "text": "1,496,43,48:1,497,8,79",
                          "type": "1,496,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "indexChanged",
                        "text": "This is `true` if the item was moved to a\nnew index in the collection due to sorting. The index can be seen in `index`.\nThe old index is in `oldIndex`.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,499,33",
                          "text": "1,499,46,42:1,500,8,111",
                          "type": "1,499,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "modified",
                        "optional": true,
                        "text": "If known this property holds the array of names\nof the modified properties of the item.\n",
                        "type": "String[]",
                        "src": {
                          "name": "1,503,35",
                          "text": "1,503,45,48:1,504,8,41",
                          "type": "1,503,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "filtered",
                        "optional": true,
                        "text": "This value is `true` if the item is filtered\nout of the collection.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,506,34",
                          "text": "1,506,44,45:1,507,8,24",
                          "type": "1,506,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "optional": true,
                        "text": "The new index in the collection for the item if\nthe item has been moved (see `indexChanged`). If the item is removed due to\nfiltering, this will be -1.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,509,33",
                          "text": "1,509,40,48:1,510,8,105",
                          "type": "1,509,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "oldIndex",
                        "optional": true,
                        "text": "The old index in the collection for the item if\nthe item has been moved (see `indexChanged`). If the item was being removed due to\nfiltering, this will be -1.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,513,33",
                          "text": "1,513,43,48:1,514,8,112",
                          "type": "1,513,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "oldKey",
                        "optional": true,
                        "text": "The old key for the `item` if the item's key has\nchanged (see `keyChanged`).\n",
                        "type": "Object",
                        "src": {
                          "name": "1,517,33",
                          "text": "1,517,41,49:1,518,8,29",
                          "type": "1,517,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "wasFiltered",
                        "optional": true,
                        "text": "This value is `true` if the item was filtered\nout of the collection.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,520,34",
                          "text": "1,520,47,46:1,521,8,24",
                          "type": "1,520,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,486,24",
                      "text": "1,486,32,33",
                      "type": "1,486,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,479,15",
                  "since": "1,523,15",
                  "text": "1,480,8,189"
                }
              },
              {
                "$type": "event",
                "name": "refresh",
                "text": "This event fires when the collection has changed entirely. This event is fired in\ncases where the collection's filter is updated or the items are sorted. While the\nitems previously in the collection may remain the same, the order at a minimum has\nchanged in ways that cannot be simply translated to other events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being modified.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,533,37",
                      "text": "1,533,48,31",
                      "type": "1,533,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,527,15",
                  "text": "1,528,8,314"
                }
              },
              {
                "$type": "event",
                "name": "remove",
                "since": "5.0.0",
                "text": "Fires after items have been removed from the collection. Some properties of this\nobject may not be present if calculating them is deemed too expensive. These are\nmarked as \"optional\".\n\nAll `{@link #event!add #event-add}` and `{@link #event!remove #event-remove}` events occur between\n`{@link #event!beginupdate #event-beginupdate}` and `{@link #event!endupdate #event-endupdate}`\nevents so it is best to do only the minimal amount of work in response to these\nevents and move the more expensive side-effects to an `{@link #event!endupdate endupdate}` listener.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being modified.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,547,37",
                      "text": "1,547,48,31",
                      "type": "1,547,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "An object describing the removal.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "at",
                        "text": "The index in the collection where the removal occurred.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,551,32",
                          "text": "1,551,35,56",
                          "type": "1,551,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "items",
                        "text": "The items that are now removed from the collection.\n",
                        "type": "Object[]",
                        "src": {
                          "name": "1,553,34",
                          "text": "1,553,40,52",
                          "type": "1,553,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "keys",
                        "optional": true,
                        "text": "If available this array holds the keys (extracted by\n`{@link #method!getKey getKey}`) for each item in the `{@link #property!items items}` array.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,555,32",
                          "text": "1,555,38,53:1,556,8,47",
                          "type": "1,555,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "map",
                        "optional": true,
                        "text": "If available this is a map keyed by the key of each\nitem in the `{@link #property!items items}` array. This will often contain all of the items being removed\nand not just the items in the range described by this event. The value held in this\nmap is the item.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,558,33",
                          "text": "1,558,38,52:1,559,8,184",
                          "type": "1,558,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "next",
                        "optional": true,
                        "text": "If more `{@link #event!remove #event-remove}` events are in\nqueue to be delivered this is a reference to the `details` instance for the next\nremove event.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,563,33",
                          "text": "1,563,39,53:1,564,8,96",
                          "type": "1,563,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "replacement",
                        "optional": true,
                        "text": "If this removal has a corresponding\n`{@link #event!add #event-add}` taking place this reference holds the `details` object for\nthat `add` event. If the collection is sorted, the new items are pre-sorted but the\n`at` property for the `replacement` will **not** be correct. The new items will be\nadded in one or more chunks at their proper index.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,567,33",
                          "text": "1,567,46,36:1,568,8,303",
                          "type": "1,567,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,549,24",
                      "text": "1,549,32,34",
                      "type": "1,549,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,537,15",
                  "since": "1,573,15",
                  "text": "1,538,8,509"
                }
              },
              {
                "$type": "event",
                "name": "sort",
                "text": "This event fires after the contents of the collection have been sorted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being sorted.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,580,37",
                      "text": "1,580,48,29",
                      "type": "1,580,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,577,15",
                  "text": "1,578,8,73"
                }
              },
              {
                "$type": "event",
                "name": "updatekey",
                "since": "5.0.0",
                "text": "Fires after the key for an item has changed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "collection",
                    "text": "The collection being modified.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,596,37",
                      "text": "1,596,48,31",
                      "type": "1,596,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "An object describing the update.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The item whose key has changed.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,600,32",
                          "text": "1,600,37,32",
                          "type": "1,600,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "newKey",
                        "text": "The new key for the `item`.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,602,32",
                          "text": "1,602,39,28",
                          "type": "1,602,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "oldKey",
                        "text": "The old key for the `item`.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,604,32",
                          "text": "1,604,39,28",
                          "type": "1,604,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,598,24",
                      "text": "1,598,32,33",
                      "type": "1,598,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,593,15",
                  "since": "1,606,15",
                  "text": "1,594,8,46"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "2,413,27",
                      "type": "2,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,414,30,35",
                      "type": "2,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,412,12",
                  "name": "2,416,0",
                  "text": "2,411,12,65"
                }
              },
              {
                "$type": "method",
                "name": "add",
                "since": "5.0.0",
                "text": "Adds an item to the collection. If the item already exists or an item with the\nsame key exists, the old item will be removed and the new item will be added to\nthe end.\n\nThis method also accepts an array of items or simply multiple items as individual\narguments. The following 3 code sequences have the same end result:\n\n     // Call add() once per item (not optimal - best avoided):\n     collection.add(itemA);\n     collection.add(itemB);\n     collection.add(itemC);\n     collection.add(itemD);\n\n     // Call add() with each item as an argument:\n     collection.add(itemA, itemB, itemC, itemD);\n\n     // Call add() with the items as an array:\n     collection.add([ itemA, itemB, itemC, itemD ]);\n\nThe first form should be avoided where possible because the collection and all\nparties \"watching\" it will be updated 4 times.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item or items to add.\n",
                    "type": "Object/Object[]",
                    "src": {
                      "name": "1,706,33",
                      "text": "1,706,38,26",
                      "type": "1,706,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item or items added.\n",
                    "type": "Object/Object[]",
                    "src": {
                      "text": "1,707,34,25",
                      "type": "1,707,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,710,0",
                  "since": "1,708,15",
                  "text": "1,684,8,824"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for {@link #method!onAfter #onAfter}.\n",
                "src": {
                  "name": "2,1236,0",
                  "text": "2,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for {@link #method!onBefore #onBefore}.\n",
                "src": {
                  "name": "2,1230,0",
                  "text": "2,1228,12,29"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addDeprecations",
                "text": "This method applies a versioned, deprecation declaration to this class. This\nis typically called by the `deprecated` config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deprecations",
                    "src": {
                      "name": "3,120,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,118,12",
                  "name": "3,120,0",
                  "text": "3,116,12,125"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The {@link #method!on #on} method is shorthand for\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "2,835,35",
                      "text": "2,835,45,37:2,836,12,61",
                      "type": "2,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,838,38",
                      "text": "2,838,42,46:2,839,12,166",
                      "type": "2,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "2,843,29",
                      "text": "2,843,36,62:2,844,12,73",
                      "type": "2,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "2,853,36",
                          "text": "2,854,12,139",
                          "type": "2,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "2,857,36",
                          "text": "2,858,12,94",
                          "type": "2,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "2,861,37",
                          "text": "2,862,12,96",
                          "type": "2,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "2,865,36",
                          "text": "2,866,12,262",
                          "type": "2,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  {@link Ext.Function#method!requestAnimationFrame Ext.Function#requestAnimationFrame}. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "2,870,36",
                          "text": "2,871,12,323",
                          "type": "2,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "2,877,49",
                          "text": "2,878,12,135",
                          "type": "2,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to {@link Ext.Component}.**\n  The name of a Component property which references an {@link Ext.dom.Element}\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of {@link Ext.Component} which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "2,881,36",
                          "text": "2,882,12,781",
                          "type": "2,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "2,905,37",
                          "text": "2,906,12,295",
                          "type": "2,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopPropagation Ext.event.Event#stopPropagation} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "2,914,38",
                          "text": "2,915,12,212",
                          "type": "2,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!preventDefault Ext.event.Event#preventDefault} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "2,919,38",
                          "text": "2,920,12,210",
                          "type": "2,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to {@link Ext.dom.Element}.**\n  `true` to call {@link Ext.event.Event#method!stopEvent Ext.event.Event#stopEvent} on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "2,924,38",
                          "text": "2,925,12,200",
                          "type": "2,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "2,929,36",
                          "text": "2,930,12,179",
                          "type": "2,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `{@link #method!destroy destroy}` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using {@link #method!un #un}; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See {@link #method!un #un} for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "2,934,38",
                          "text": "2,935,12,441",
                          "type": "2,934,20",
                          "value": "2,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "2,942,37",
                          "text": "2,943,12,737",
                          "type": "2,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "2,954,37",
                          "text": "2,955,12,301",
                          "type": "2,954,20",
                          "value": "2,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "2,846,29",
                      "text": "2,846,38,44:2,847,12,154",
                      "type": "2,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "2,962,29",
                      "text": "2,963,12,1831",
                      "type": "2,962,20",
                      "value": "2,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `{@link #method!destroy destroy}` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1021,29,54:2,1022,12,516",
                      "type": "2,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1041,0",
                  "text": "2,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use `{@link #method!mon mon}` or `{@link #method!addManagedListener addManagedListener}` if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "2,456,56",
                      "text": "2,456,61,47",
                      "type": "2,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "2,457,34",
                      "text": "2,457,40,63",
                      "type": "2,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,458,36",
                      "text": "2,458,39,49:2,459,11,85",
                      "type": "2,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,461,27",
                      "text": "2,461,33,92:2,462,11,43",
                      "type": "2,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} options.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,463,27",
                      "text": "2,463,35,67:2,464,11,61",
                      "type": "2,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `{@link #method!destroy destroy}` method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "2,465,28,54:2,466,11,513",
                      "type": "2,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,484,0",
                  "text": "2,430,11,1093"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addObserver",
                "since": "5.0.0",
                "text": "Adds an observing object to this collection. Observers are given first view of all\nevents that we may fire. For any event an observer may implement a method whose\nname starts with \"onCollection\" to receive the event. The `{@link #event!add #event-add}`\nevent for example would be passed to `\"onCollectionAdd\"`.\n\nThe only restriction to observers is that they are not allowed to add or remove\nobservers from inside these methods.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "observer",
                    "text": "The observer instance.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2848,37",
                      "text": "1,2848,46,23",
                      "type": "1,2848,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2849,8",
                  "name": "1,2852,0",
                  "since": "1,2850,15",
                  "text": "1,2840,8,423"
                }
              },
              {
                "$type": "method",
                "name": "aggregate",
                "text": "Returns the result of the specified aggregation operation against all items in this\ncollection.\n\nThis method is not typically called directly because there are convenience methods\nfor each of the supported `operation` values. These are:\n\n  * **average** - Returns the average value.\n  * **bounds**  - Returns an array of `[min, max]`.\n  * **max**     - Returns the maximum value or `{@link undefined}` if empty.\n  * **min**     - Returns the minimum value or `{@link undefined}` if empty.\n  * **sum**     - Returns the sum of all values.\n\nFor example:\n\n     result = collection.aggregate('age', 'sum');\n\n     result = collection.aggregate('age', 'sum', 2, 10); // the 8 items at index 2\n\nTo provide a custom operation function:\n\n     function averageAgeOfMinors (items, values) {\n         var sum = 0,\n             count = 0;\n\n         for (var i = 0; i < values.length; ++i) {\n             if (values[i] < 18) {\n                 sum += values[i];\n                 ++count;\n             }\n         }\n\n         return count ? sum / count : 0;\n     }\n\n     result = collection.aggregate('age', averageAgeOfMinors);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property to aggregate from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,783,24",
                      "text": "1,783,33,54",
                      "type": "1,783,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The operation to perform.\n",
                    "type": "String/Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "items",
                        "text": "The items on which the `operation` function is to\noperate.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,785,33",
                          "text": "1,785,39,50:1,786,8,9",
                          "type": "1,785,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "values",
                        "text": "The values on which the `operation` function is to\noperate.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,787,33",
                          "text": "1,787,40,51:1,788,8,9",
                          "type": "1,787,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,784,33",
                      "text": "1,784,43,26",
                      "type": "1,784,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item in `{@link #property!items items}` to include in the\naggregation.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,789,25",
                      "text": "1,789,32,57:1,790,8,13",
                      "type": "1,789,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop aggregating `{@link #property!items items}`. The item at\nthis index will *not* be included in the aggregation.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,791,25",
                      "text": "1,791,30,60:1,792,8,54",
                      "type": "1,791,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The `this` pointer to use if `operation` is a function.\nDefaults to this collection.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,793,25",
                      "text": "1,793,32,56:1,794,8,29",
                      "type": "1,793,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,795,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,797,0",
                  "text": "1,747,8,1098"
                }
              },
              {
                "$type": "method",
                "name": "aggregateByGroup",
                "text": "See {@link #method!aggregate #aggregate}. The functionality is the same, however the aggregates are\nprovided per group. Assumes this collection has an active {@link #cfg!grouper #grouper}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property to aggregate from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,810,24",
                      "text": "1,810,33,54",
                      "type": "1,810,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The operation to perform.\n",
                    "type": "String/Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "items",
                        "text": "The items on which the `operation` function is to\noperate.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,812,33",
                          "text": "1,812,39,50:1,813,8,9",
                          "type": "1,812,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "values",
                        "text": "The values on which the `operation` function is to\noperate.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,814,33",
                          "text": "1,814,40,51:1,815,8,9",
                          "type": "1,814,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,811,33",
                      "text": "1,811,43,26",
                      "type": "1,811,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The `this` pointer to use if `operation` is a function.\nDefaults to this collection.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,816,25",
                      "text": "1,816,32,56:1,817,8,29",
                      "type": "1,816,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,818,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,820,0",
                  "text": "1,807,8,159"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "aggregateGroups",
                "text": "Aggregates a set of groups.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "groups",
                    "text": "The groups\n",
                    "type": "Ext.util.GroupCollection",
                    "src": {
                      "name": "1,886,42",
                      "text": "1,886,49,11",
                      "type": "1,886,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property to aggregate from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,887,24",
                      "text": "1,887,33,54",
                      "type": "1,887,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The operation to perform.\n",
                    "type": "String/Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "values",
                        "text": "The values on which the `operation` function is to\noperate.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,889,33",
                          "text": "1,889,40,51:1,890,8,9",
                          "type": "1,889,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "items",
                        "text": "The items on which the `operation` function is to\noperate.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,891,33",
                          "text": "1,891,39,50:1,892,8,9",
                          "type": "1,891,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "The index in `{@link #property!items items}` at which the `operation`\nfunction is to start. The `values.length` indicates the number of items involved.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,893,34",
                          "text": "1,893,40,46:1,894,8,82",
                          "type": "1,893,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,888,33",
                      "text": "1,888,43,26",
                      "type": "1,888,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The `this` pointer to use if `operation` is a function.\nDefaults to this collection.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,895,25",
                      "text": "1,895,32,56:1,896,8,30",
                      "type": "1,895,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,898,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,899,8",
                  "name": "1,901,0",
                  "text": "1,885,8,28"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "aggregateItems",
                "text": "Returns the result of the specified aggregation operation against the given items.\nFor details see `{@link #method!aggregate aggregate}`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "items",
                    "text": "The items to aggregate.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,829,23",
                      "text": "1,829,29,24",
                      "type": "1,829,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property to aggregate from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,830,24",
                      "text": "1,830,33,54",
                      "type": "1,830,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The operation to perform.\n",
                    "type": "String/Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "items",
                        "text": "The items on which the `operation` function is to\noperate.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,832,33",
                          "text": "1,832,39,50:1,833,8,9",
                          "type": "1,832,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "values",
                        "text": "The values on which the `operation` function is to\noperate.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,834,33",
                          "text": "1,834,40,51:1,835,8,9",
                          "type": "1,834,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,831,33",
                      "text": "1,831,43,26",
                      "type": "1,831,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item in `{@link #property!items items}` to include in the\naggregation.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,836,25",
                      "text": "1,836,32,57:1,837,8,13",
                      "type": "1,836,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop aggregating `{@link #property!items items}`. The item at\nthis index will *not* be included in the aggregation.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,838,25",
                      "text": "1,838,30,60:1,839,8,54",
                      "type": "1,838,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The `this` pointer to use if `operation` is a function.\nDefaults to this collection.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,840,25",
                      "text": "1,840,32,56:1,841,8,30",
                      "type": "1,840,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,844,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,843,8",
                  "name": "1,846,0",
                  "text": "1,826,8,113"
                }
              },
              {
                "$type": "method",
                "name": "average",
                "since": "5.0.0",
                "text": "Averages property values from some or all of the items in this collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property to average from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2547,24",
                      "text": "1,2547,33,52",
                      "type": "1,2547,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item to include in the average.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2548,25",
                      "text": "1,2548,32,55",
                      "type": "1,2548,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop averaging `{@link #property!items items}`. The item at\nthis index will *not* be included in the average.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2549,25",
                      "text": "1,2549,30,58:1,2550,8,50",
                      "type": "1,2549,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of averaging the specified property from the indicated\nitems.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2551,25,66:1,2552,8,7",
                      "type": "1,2551,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2544,16",
                  "since": "1,2553,15",
                  "text": "1,2545,8,76"
                }
              },
              {
                "$type": "method",
                "name": "averageByGroup",
                "since": "5.0.0",
                "text": "See {@link #method!average #average}. The result is partitioned by group.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property to average from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2560,24",
                      "text": "1,2560,33,52",
                      "type": "1,2560,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of {@link #method!average #average}, partitioned by group. See {@link #method!aggregateByGroup #aggregateByGroup}.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2561,25,85",
                      "type": "1,2561,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2557,16",
                  "since": "1,2562,15",
                  "text": "1,2558,8,59"
                }
              },
              {
                "$type": "method",
                "name": "beginUpdate",
                "since": "5.0.0",
                "text": "This method is called to indicate the start of multiple changes to the collection.\nApplication code should seldom need to call this method as it is called internally\nwhen needed. If multiple collection changes are needed, consider wrapping them in\nan `{@link #method!update update}` call rather than calling `{@link #method!beginUpdate beginUpdate}` directly.\n\nInternally this method increments a counter that is decremented by `{@link #method!endUpdate endUpdate}`. It\nis important, therefore, that if you call `{@link #method!beginUpdate beginUpdate}` directly you match that\ncall with a call to `{@link #method!endUpdate endUpdate}` or you will prevent the collection from updating\nproperly.\n\nFor example:\n\n     var collection = new Ext.util.Collection();\n\n     collection.beginUpdate();\n\n     collection.add(item);\n     // ...\n\n     collection.insert(index, otherItem);\n     //...\n\n     collection.endUpdate();\n",
                "src": {
                  "name": "1,947,0",
                  "since": "1,945,15",
                  "text": "1,921,8,785"
                }
              },
              {
                "$type": "method",
                "name": "bounds",
                "since": "5.0.0",
                "text": "Determines the minimum and maximum values for the specified property over some or\nall of the items in this collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2570,24",
                      "text": "1,2570,33,41",
                      "type": "1,2570,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item to include in the bounds.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2571,25",
                      "text": "1,2571,32,54",
                      "type": "1,2571,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop in `{@link #property!items items}`. The item at this index\nwill *not* be included in the bounds.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2572,25",
                      "text": "1,2572,30,62:1,2573,8,38",
                      "type": "1,2572,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array `[min, max]` with the minimum and maximum of the specified\nproperty.\n",
                    "type": "Array",
                    "src": {
                      "text": "1,2574,24,68:1,2575,8,10",
                      "type": "1,2574,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2566,16",
                  "since": "1,2576,15",
                  "text": "1,2567,8,120"
                }
              },
              {
                "$type": "method",
                "name": "boundsByGroup",
                "since": "5.0.0",
                "text": "See {@link #method!bounds #bounds}. The result is partitioned by group.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2583,24",
                      "text": "1,2583,33,41",
                      "type": "1,2583,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of {@link #method!bounds #bounds}, partitioned by group. See {@link #method!aggregateByGroup #aggregateByGroup}.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2584,25,84",
                      "type": "1,2584,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2580,16",
                  "since": "1,2585,15",
                  "text": "1,2581,8,58"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callParent",
                "text": "Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see {@link Ext#method!define Ext#define}).\n\n     Ext.define('My.Base', {\n         constructor: function (x) {\n             this.x = x;\n         },\n\n         statics: {\n             method: function (x) {\n                 return x;\n             }\n         }\n     });\n\n     Ext.define('My.Derived', {\n         extend: 'My.Base',\n\n         constructor: function () {\n             this.callParent([21]);\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // alerts 21\n\nThis can be used with an override as follows:\n\n     Ext.define('My.DerivedOverride', {\n         override: 'My.Derived',\n\n         constructor: function (x) {\n             this.callParent([x*2]); // calls original My.Derived constructor\n         }\n     });\n\n     var obj = new My.Derived();\n\n     alert(obj.x);  // now alerts 42\n\nThis also works with static and private methods.\n\n     Ext.define('My.Derived2', {\n         extend: 'My.Base',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Base.method\n             }\n         }\n     });\n\n     alert(My.Base.method(10));     // alerts 10\n     alert(My.Derived2.method(10)); // alerts 20\n\nLastly, it also works with overridden static methods.\n\n     Ext.define('My.Derived2Override', {\n         override: 'My.Derived2',\n\n         // privates: {\n         statics: {\n             method: function (x) {\n                 return this.callParent([x*2]); // calls My.Derived2.method\n             }\n         }\n     });\n\n     alert(My.Derived2.method(10); // now alerts 40\n\nTo override a method and replace it and also call the superclass method, use\n{@link #method!callSuper #method-callSuper}. This is often done to patch a method to fix a bug.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "3,1251,37",
                      "text": "3,1251,42,57:3,1252,12,67",
                      "type": "3,1251,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the parent method\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1253,29,48",
                      "type": "3,1253,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1250,12",
                  "name": "3,1255,0",
                  "text": "3,1175,12,1853"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "callSuper",
                "text": "This method is used by an **override** to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.\n\nConsider:\n\n     Ext.define('Ext.some.Class', {\n         method: function () {\n             console.log('Good');\n         }\n     });\n\n     Ext.define('Ext.some.DerivedClass', {\n         extend: 'Ext.some.Class',\n\n         method: function () {\n             console.log('Bad');\n\n             // ... logic but with a bug ...\n\n             this.callParent();\n         }\n     });\n\nTo patch the bug in `Ext.some.DerivedClass.method`, the typical solution is to create an\noverride:\n\n     Ext.define('App.patches.DerivedClass', {\n         override: 'Ext.some.DerivedClass',\n\n         method: function () {\n             console.log('Fixed');\n\n             // ... logic but with bug fixed ...\n\n             this.callSuper();\n         }\n     });\n\nThe patch method cannot use {@link #method!callParent #method-callParent} to call the superclass\n`method` since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using `callParent` would produce \"Fixed\" then \"Bad\"\nthen \"Good\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n",
                    "type": "Array/Arguments",
                    "src": {
                      "name": "3,1338,37",
                      "text": "3,1338,42,57:3,1339,12,66",
                      "type": "3,1338,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the result of calling the superclass method\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1340,29,52",
                      "type": "3,1340,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1337,12",
                  "name": "3,1342,0",
                  "text": "3,1292,12,1266"
                }
              },
              {
                "$type": "method",
                "name": "clear",
                "since": "5.0.0",
                "text": "Removes all items from the collection. This is similar to `{@link #method!removeAll removeAll}` except that\n`{@link #method!removeAll removeAll}` fire events to inform listeners. This means that this method should be\ncalled only when you are sure there are no listeners.\n",
                "src": {
                  "name": "1,959,0",
                  "since": "1,957,15",
                  "text": "1,954,8,219"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "2,1255,0",
                  "text": "2,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "2,1291,0",
                  "text": "2,1289,11,47"
                }
              },
              {
                "$type": "method",
                "name": "clone",
                "since": "5.0.0",
                "text": "Creates a shallow copy of this collection\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.util.Collection",
                    "src": {
                      "type": "1,987,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,990,0",
                  "since": "1,988,15",
                  "text": "1,986,8,42"
                }
              },
              {
                "$type": "method",
                "name": "collect",
                "since": "5.0.0",
                "text": "Collects unique values of a particular property in this Collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The property to collect on\n",
                    "type": "String",
                    "src": {
                      "name": "1,1000,24",
                      "text": "1,1000,33,27",
                      "type": "1,1000,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "text": "(optional) 'root' property to extract the first argument from. This is used mainly when\nsumming fields in records, where the fields are all stored inside the 'data' object\n",
                    "type": "String",
                    "src": {
                      "name": "1,1001,24",
                      "text": "1,1001,29,88:1,1002,8,84",
                      "type": "1,1001,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "allowNull",
                    "optional": true,
                    "text": "Pass `true` to include `{@link null}`, `{@link undefined}` or empty\nstring values.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1003,26",
                      "text": "1,1003,37,52:1,1004,8,15",
                      "type": "1,1003,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The unique values\n",
                    "type": "Array",
                    "src": {
                      "text": "1,1005,24,18",
                      "type": "1,1005,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1008,0",
                  "since": "1,1006,15",
                  "text": "1,999,8,68"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,40,21",
                      "text": "4,40,28,19",
                      "type": "4,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "4,38,12",
                  "text": "4,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "since": "5.0.0",
                "text": "Returns true if the collection contains the passed Object as an item.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The Object to look for in the collection.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1032,24",
                      "text": "1,1032,29,42",
                      "type": "1,1032,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the collection contains the Object as an item.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1033,26,57",
                      "type": "1,1033,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1036,0",
                  "since": "1,1034,15",
                  "text": "1,1031,8,70"
                }
              },
              {
                "$type": "method",
                "name": "containsKey",
                "since": "5.0.0",
                "text": "Returns true if the collection contains the passed Object as a key.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key to look for in the collection.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1050,24",
                      "text": "1,1050,28,39",
                      "type": "1,1050,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the collection contains the Object as a key.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1051,26,53",
                      "type": "1,1051,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1054,0",
                  "since": "1,1052,15",
                  "text": "1,1049,8,68"
                }
              },
              {
                "$type": "method",
                "name": "count",
                "since": "5.0.0",
                "text": "Determines the number of items in the collection.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The number of items.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,2592,25,21",
                      "type": "1,2592,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2589,16",
                  "since": "1,2593,15",
                  "text": "1,2590,8,51"
                }
              },
              {
                "$type": "method",
                "name": "countByGroup",
                "since": "5.0.0",
                "text": "See {@link #method!count #count}. The result is partitioned by group.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The result of {@link #method!count #count}, partitioned by group. See {@link #method!aggregateByGroup #aggregateByGroup}.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2600,25,83",
                      "type": "1,2600,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2597,16",
                  "since": "1,2601,15",
                  "text": "1,2598,8,57"
                }
              },
              {
                "$type": "method",
                "name": "createFiltered",
                "since": "5.0.0",
                "text": "Creates a new collection that is a filtered subset of this collection. The filter\npassed can be a function, a simple property name and value, an `{@link Ext.util.Filter}`\ninstance, an array of `{@link Ext.util.Filter}` instances.\n\nIf the passed filter is a function the second argument is its \"scope\" (or \"this\"\npointer). The function should return `true` given each item in the collection if\nthat item should be included in the filtered collection.\n\n     var people = new Ext.util.Collection();\n\n     people.add([\n         { id: 1, age: 25, name: 'Ed' },\n         { id: 2, age: 24, name: 'Tommy' },\n         { id: 3, age: 24, name: 'Arne' },\n         { id: 4, age: 26, name: 'Aaron' }\n     ]);\n\n     // Create a collection of people who are older than 24:\n     var oldPeople = people.createFiltered(function (item) {\n         return item.age > 24;\n     });\n\nIf the passed filter is a `{@link Ext.util.Filter}` instance or array of `{@link Ext.util.Filter}`\ninstances the filter(s) are used to produce the filtered collection and there are\nno further arguments.\n\nIf the passed filter is a string it is understood as the name of the property by\nwhich to filter. The second argument is the \"value\" used to compare each item's\nproperty value. This comparison can be further tuned with the `anyMatch` and\n`caseSensitive` (optional) arguments.\n\n   // Create a new Collection containing only the items where age == 24\n   var middleAged = people.createFiltered('age', 24);\n\nAlternatively you can apply `{@link #cfg!filters filters}` to this Collection by calling `setFilters`\nor modifying the filter collection returned by `{@link #method!getFilters getFilters}`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "A property on your objects, an\narray of {@link Ext.util.Filter} objects or a filter function.\n",
                    "type": "Ext.util.Filter[]/String/Function",
                    "src": {
                      "name": "1,1096,51",
                      "text": "1,1096,60,31:1,1097,8,71",
                      "type": "1,1096,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "If `property` is a function, this argument is the \"scope\"\n(or \"this\" pointer) for the function. Otherwise this is either a `{@link RegExp}` to test\nproperty values or the value with which to compare.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1099,24",
                      "text": "1,1099,30,58:1,1100,8,135",
                      "type": "1,1099,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "optional": true,
                    "text": "True to match any part of the string, not just\nthe beginning.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1103,26",
                      "text": "1,1103,42,47:1,1104,8,16",
                      "type": "1,1103,16",
                      "value": "1,1103,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "optional": true,
                    "text": "True for case sensitive comparison.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1106,26",
                      "text": "1,1106,47,36",
                      "type": "1,1106,16",
                      "value": "1,1106,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "exactMatch",
                    "optional": true,
                    "text": "`true` to force exact match (^ and $ characters added to the regex).\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1108,26",
                      "text": "1,1108,44,69",
                      "type": "1,1108,16",
                      "value": "1,1108,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new, filtered collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "1,1110,38,30",
                      "type": "1,1110,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1114,0",
                  "since": "1,1112,15",
                  "text": "1,1059,8,1578"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1522,27",
                      "text": "2,1522,35,55",
                      "type": "2,1522,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "2,1523,26",
                      "text": "2,1523,35,61",
                      "type": "2,1523,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "2,1524,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,1520,11",
                  "name": "2,1526,0",
                  "text": "2,1521,11,103"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "decodeItems",
                "since": "5.0.0",
                "text": "Returns the items array on which to operate. This is called to handle the two\npossible forms used by various methods that accept items:\n\n     collection.add(item1, item2, item3);\n     collection.add([ item1, item2, item3 ]);\n\nThings get interesting when other arguments are involved:\n\n     collection.insert(index, item1, item2, item3);\n     collection.insert(index, [ item1, item2, item3 ]);\n\nAs well as below because we have to distinguish the one item from from the array:\n\n     collection.add(item);\n     collection.insert(index, item);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "The arguments object from the caller.\n",
                    "type": "Arguments",
                    "src": {
                      "name": "1,2937,27",
                      "text": "1,2937,32,38",
                      "type": "1,2937,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index in `args` (the caller's arguments) of `{@link #property!items items}`.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2938,24",
                      "text": "1,2938,30,57",
                      "type": "1,2938,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The array of items on which to operate.\n",
                    "type": "Object[]",
                    "src": {
                      "text": "1,2939,27,40",
                      "type": "1,2939,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,2940,8",
                  "name": "1,2943,0",
                  "since": "1,2941,15",
                  "text": "1,2921,8,542"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "decodeRemoveItems",
                "since": "5.0.0",
                "text": "This method is an alias for `{@link #method!decodeItems decodeItems}` but is called when items are being\nremoved. If a `{@link #cfg!decoder decoder}` is provided it may be necessary to also override this\nmethod to achieve symmetry between adding and removing items. This is the case\nfor `Ext.util.FilterCollection' and `Ext.util.SorterCollection' for example.\n",
                "src": {
                  "access": "1,3676,8",
                  "name": "1,3675,16",
                  "since": "1,3677,15",
                  "text": "1,3670,8,312"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "since": "5.0.0",
                "text": "Destroys this collection. This is only necessary if this collection uses a `{@link #cfg!source source}`\ncollection as that relationship will keep a reference from the `{@link #cfg!source source}` to this\ncollection and potentially leak memory.\n",
                "src": {
                  "name": "1,657,0",
                  "since": "1,655,15",
                  "text": "1,652,8,204"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "2,761,27",
                      "type": "2,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "2,762,26",
                      "type": "2,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "2,763,28",
                      "type": "2,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,759,11",
                  "name": "2,765,0",
                  "text": "2,758,11,24"
                }
              },
              {
                "$type": "method",
                "name": "each",
                "since": "5.0.0",
                "text": "Executes the specified function once for every item in the collection. If the value\nreturned by `fn` is `false` the iteration stops. In all cases, the last value that\n`fn` returns is returned by this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to execute for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,1187,27",
                          "text": "1,1187,32,21",
                          "type": "1,1187,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "The index of item.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,1188,27",
                          "text": "1,1188,33,19",
                          "type": "1,1188,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "len",
                        "text": "Total length of collection.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,1189,27",
                          "text": "1,1189,31,28",
                          "type": "1,1189,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,1186,26",
                      "text": "1,1186,29,39",
                      "type": "1,1186,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the function\nis executed. Defaults to this collection.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "1,1190,25",
                      "text": "1,1190,37,51:1,1191,8,42",
                      "type": "1,1190,16",
                      "value": "1,1190,31"
                    }
                  }
                ],
                "src": {
                  "name": "1,1194,0",
                  "since": "1,1192,15",
                  "text": "1,1182,8,209"
                }
              },
              {
                "$type": "method",
                "name": "eachKey",
                "since": "5.0.0",
                "text": "Executes the specified function once for every key in the collection, passing each\nkey, and its associated item as the first two parameters. If the value returned by\n`fn` is `false` the iteration stops. In all cases, the last value that `fn` returns\nis returned by this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to execute for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of collection item.\n",
                        "type": "String",
                        "src": {
                          "name": "1,1221,27",
                          "text": "1,1221,31,28",
                          "type": "1,1221,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,1222,27",
                          "text": "1,1222,32,21",
                          "type": "1,1222,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "index",
                        "text": "The index of item.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,1223,27",
                          "text": "1,1223,33,19",
                          "type": "1,1223,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "len",
                        "text": "Total length of collection.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,1224,27",
                          "text": "1,1224,31,28",
                          "type": "1,1224,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,1220,26",
                      "text": "1,1220,29,39",
                      "type": "1,1220,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the function\nis executed. Defaults to this collection.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "1,1225,25",
                      "text": "1,1225,37,51:1,1226,8,42",
                      "type": "1,1225,16",
                      "value": "1,1225,31"
                    }
                  }
                ],
                "src": {
                  "name": "1,1229,0",
                  "since": "1,1227,15",
                  "text": "1,1215,8,279"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "2,1567,36",
                      "text": "2,1567,47,54",
                      "type": "2,1567,19"
                    }
                  }
                ],
                "src": {
                  "name": "2,1569,0",
                  "text": "2,1534,11,1138"
                }
              },
              {
                "$type": "method",
                "name": "endUpdate",
                "since": "5.0.0",
                "text": "This method is called after modifications are complete on a collection. For details\nsee `{@link #method!beginUpdate beginUpdate}`.\n",
                "src": {
                  "name": "1,1256,0",
                  "since": "1,1254,15",
                  "text": "1,1252,8,103"
                }
              },
              {
                "$type": "method",
                "name": "extremes",
                "since": "5.0.0",
                "text": "Finds the items with the minimum and maximum for the specified property over some\nor all of the items in this collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2609,24",
                      "text": "1,2609,33,41",
                      "type": "1,2609,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item to include.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2610,25",
                      "text": "1,2610,32,40",
                      "type": "1,2610,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop in `{@link #property!items items}`. The item at this index\nwill *not* be included.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2611,25",
                      "text": "1,2611,30,62:1,2612,8,24",
                      "type": "1,2611,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array `[minItem, maxItem]` with the items that have the minimum\nand maximum of the specified property.\n",
                    "type": "Array",
                    "src": {
                      "text": "1,2613,24,67:1,2614,8,39",
                      "type": "1,2613,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2605,16",
                  "since": "1,2615,15",
                  "text": "1,2606,8,123"
                }
              },
              {
                "$type": "method",
                "name": "extremesByGroup",
                "since": "5.0.0",
                "text": "See {@link #method!extremes #extremes}. The result is partitioned by group.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2622,24",
                      "text": "1,2622,33,41",
                      "type": "1,2622,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of {@link #method!extremes #extremes}, partitioned by group. See {@link #method!aggregateByGroup #aggregateByGroup}.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2623,25,86",
                      "type": "1,2623,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2619,16",
                  "since": "1,2624,15",
                  "text": "1,2620,8,60"
                }
              },
              {
                "$type": "method",
                "name": "filterBy",
                "since": "5.0.0",
                "text": "Filter by a function. Returns a <i>new</i> collection that has been filtered.\nThe passed function will be called with each object in the collection.\nIf the function returns true, the value is included otherwise it is filtered.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Mixed",
                        "src": {
                          "name": "1,1169,26",
                          "text": "1,1169,31,21",
                          "type": "1,1169,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of collection item.\n",
                        "type": "String",
                        "src": {
                          "name": "1,1170,27",
                          "text": "1,1170,31,28",
                          "type": "1,1170,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,1168,26",
                      "text": "1,1168,29,27",
                      "type": "1,1168,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope (<code>this</code> reference) in\nwhich the function is executed. Defaults to this Collection.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1171,24",
                      "text": "1,1171,30,54:1,1172,8,61",
                      "type": "1,1171,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new filtered collection\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "1,1173,38,28",
                      "type": "1,1173,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1177,0",
                  "since": "1,1174,15",
                  "text": "1,1165,8,227"
                }
              },
              {
                "$type": "method",
                "name": "find",
                "since": "5.0.0",
                "text": "Finds the first matching object in this collection by a specific property/value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of a property on your objects.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1265,24",
                      "text": "1,1265,33,40",
                      "type": "1,1265,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "A string that the property values\nshould start with or a RegExp to test against the property.\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "1,1266,31",
                      "text": "1,1266,37,34:1,1267,8,60",
                      "type": "1,1266,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "The index to start searching at.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "1,1268,25",
                      "text": "1,1268,34,33",
                      "type": "1,1268,16",
                      "value": "1,1268,31"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startsWith",
                    "optional": true,
                    "text": "Pass `false` to allow a match start anywhere in\nthe string. By default the `value` will match only at the start of the string.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "1,1269,26",
                      "text": "1,1269,43,48:1,1270,8,79",
                      "type": "1,1269,16",
                      "value": "1,1269,37"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "endsWith",
                    "optional": true,
                    "text": "Pass `false` to allow the match to end before the\nend of the string. By default the `value` will match only at the end of the string.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "1,1271,26",
                      "text": "1,1271,41,50:1,1272,8,84",
                      "type": "1,1271,16",
                      "value": "1,1271,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ignoreCase",
                    "optional": true,
                    "text": "Pass `false` to make the `{@link RegExp}` case\nsensitive (removes the 'i' flag).\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "1,1273,26",
                      "text": "1,1273,43,39:1,1274,8,34",
                      "type": "1,1273,16",
                      "value": "1,1273,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first item in the collection which matches the criteria or\n`{@link null}` if none was found.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1275,25,63:1,1276,8,26",
                      "type": "1,1275,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1279,0",
                  "since": "1,1277,15",
                  "text": "1,1263,8,82"
                }
              },
              {
                "$type": "method",
                "name": "findBy",
                "since": "5.0.0",
                "text": "Returns the first item in the collection which elicits a true return value from the\npassed selection function.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The selection function to execute for each item.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,1296,27",
                          "text": "1,1296,32,21",
                          "type": "1,1296,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of collection item.\n",
                        "type": "String",
                        "src": {
                          "name": "1,1297,27",
                          "text": "1,1297,31,28",
                          "type": "1,1297,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,1295,26",
                      "text": "1,1295,29,49",
                      "type": "1,1295,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the function\nis executed. Defaults to this collection.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "1,1298,25",
                      "text": "1,1298,37,51:1,1299,8,42",
                      "type": "1,1298,16",
                      "value": "1,1298,31"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "The index at which to start searching.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "1,1300,25",
                      "text": "1,1300,34,39",
                      "type": "1,1300,16",
                      "value": "1,1300,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first item in the collection which returned true from the selection\nfunction, or null if none was found.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1301,25,72:1,1302,8,37",
                      "type": "1,1301,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1305,0",
                  "since": "1,1303,15",
                  "text": "1,1293,8,111"
                }
              },
              {
                "$type": "method",
                "name": "findIndex",
                "since": "5.0.0",
                "text": "Finds the index of the first matching object in this collection by a specific\nproperty/value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of a property on your objects.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1326,24",
                      "text": "1,1326,33,40",
                      "type": "1,1326,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "A string that the property values\nshould start with or a RegExp to test against the property.\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "1,1327,31",
                      "text": "1,1327,37,34:1,1328,8,60",
                      "type": "1,1327,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "The index to start searching at.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "1,1329,25",
                      "text": "1,1329,34,33",
                      "type": "1,1329,16",
                      "value": "1,1329,31"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startsWith",
                    "optional": true,
                    "text": "Pass `false` to allow a match start anywhere in\nthe string. By default the `value` will match only at the start of the string.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "1,1330,26",
                      "text": "1,1330,43,48:1,1331,8,79",
                      "type": "1,1330,16",
                      "value": "1,1330,37"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "endsWith",
                    "optional": true,
                    "text": "Pass `false` to allow the match to end before the\nend of the string. By default the `value` will match only at the end of the string.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "1,1332,26",
                      "text": "1,1332,41,50:1,1333,8,84",
                      "type": "1,1332,16",
                      "value": "1,1332,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ignoreCase",
                    "optional": true,
                    "text": "Pass `false` to make the `{@link RegExp}` case\nsensitive (removes the 'i' flag).\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "1,1334,26",
                      "text": "1,1334,43,39:1,1335,8,34",
                      "type": "1,1334,16",
                      "value": "1,1334,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1 if not found.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,1336,25,38",
                      "type": "1,1336,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1339,0",
                  "since": "1,1337,15",
                  "text": "1,1323,8,95"
                }
              },
              {
                "$type": "method",
                "name": "findIndexBy",
                "since": "5.0.0",
                "text": "Find the index of the first matching object in this collection by a function.\nIf the function returns `true` it is considered a match.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "item",
                        "text": "The collection item.\n",
                        "type": "Object",
                        "src": {
                          "name": "1,1349,27",
                          "text": "1,1349,32,21",
                          "type": "1,1349,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "The key of collection item.\n",
                        "type": "String",
                        "src": {
                          "name": "1,1350,27",
                          "text": "1,1350,31,28",
                          "type": "1,1350,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,1348,26",
                      "text": "1,1348,29,27",
                      "type": "1,1348,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the function\nis executed. Defaults to this collection.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "1,1351,25",
                      "text": "1,1351,37,51:1,1352,8,42",
                      "type": "1,1351,16",
                      "value": "1,1351,31"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "The index at which to start searching.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "1,1353,25",
                      "text": "1,1353,34,39",
                      "type": "1,1353,16",
                      "value": "1,1353,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1\n",
                    "type": "Number",
                    "src": {
                      "text": "1,1354,25,24",
                      "type": "1,1354,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1357,0",
                  "since": "1,1355,15",
                  "text": "1,1346,8,135"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use {@link #fireEventAction} instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n`{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "2,640,28",
                      "text": "2,640,38,31",
                      "type": "2,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "2,641,27",
                      "text": "2,641,32,58",
                      "type": "2,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "2,642,30",
                      "text": "2,642,33,21",
                      "type": "2,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "2,643,29",
                      "text": "2,643,36,62:2,644,12,72",
                      "type": "2,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}`\n",
                    "type": "Object",
                    "src": {
                      "name": "2,645,29",
                      "text": "2,645,38,52:2,646,12,72",
                      "type": "2,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof `{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}` for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "2,647,29",
                      "text": "2,647,45,47:2,648,12,394",
                      "type": "2,647,20",
                      "value": "2,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "2,653,12",
                  "deprecatedVersion": "2,653,12",
                  "name": "2,655,0",
                  "text": "2,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}).\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "2,568,27",
                      "text": "2,568,37,31",
                      "type": "2,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "2,569,30",
                      "text": "2,569,35,54",
                      "type": "2,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,570,29,77",
                      "type": "2,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,572,0",
                  "text": "2,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#method!getBubbleTarget Ext.Component#getBubbleTarget}) by\ncalling {@link #method!enableBubble #enableBubble}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "2,605,27",
                      "text": "2,605,37,31",
                      "type": "2,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "2,606,29",
                      "text": "2,606,34,53",
                      "type": "2,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,607,29,77",
                      "type": "2,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,609,0",
                  "text": "2,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "2,721,28",
                      "text": "2,721,38,31",
                      "type": "2,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "2,722,27",
                      "text": "2,722,32,58",
                      "type": "2,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,723,37",
                      "text": "2,723,40,21",
                      "type": "2,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "2,724,29",
                      "text": "2,724,36,62:2,725,12,72",
                      "type": "2,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "2,726,36",
                      "text": "2,726,44,47:2,727,12,201",
                      "type": "2,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,731,0",
                  "text": "2,714,12,409"
                }
              },
              {
                "$type": "method",
                "name": "first",
                "since": "5.0.0",
                "text": "Returns the first item in the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "`true` to extract the first item in each group. Only applies if\na {@link #cfg!grouper #grouper} is active in the collection.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1364,26",
                      "text": "1,1364,35,64:1,1365,8,48",
                      "type": "1,1364,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first item in the collection. If the grouped parameter is passed,\nsee {@link #method!aggregateByGroup #aggregateByGroup} for information on the return type.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1366,25,70:1,1367,8,66",
                      "type": "1,1366,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1370,0",
                  "since": "1,1368,15",
                  "text": "1,1363,8,42"
                }
              },
              {
                "$type": "method",
                "name": "get",
                "since": "5.0.0",
                "text": "Returns the item associated with the passed key.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key of the item.\n",
                    "type": "String/Number",
                    "src": {
                      "name": "1,1390,31",
                      "text": "1,1390,35,21",
                      "type": "1,1390,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item associated with the passed key.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1391,25,41",
                      "type": "1,1391,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1394,0",
                  "since": "1,1392,15",
                  "text": "1,1389,8,49"
                }
              },
              {
                "$type": "method",
                "name": "getAt",
                "since": "5.0.0",
                "text": "Returns the item at the specified index.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the item.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1400,24",
                      "text": "1,1400,30,23",
                      "type": "1,1400,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item at the specified index.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1401,25,33",
                      "type": "1,1401,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1404,0",
                  "since": "1,1402,15",
                  "text": "1,1399,8,41"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "2,793,41,63",
                      "type": "2,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,792,11",
                  "name": "2,795,0",
                  "text": "2,791,11,43"
                }
              },
              {
                "$type": "method",
                "name": "getByKey",
                "since": "5.0.0",
                "text": "Returns the item associated with the passed key.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key of the item.\n",
                    "type": "String/Number",
                    "src": {
                      "name": "1,1410,31",
                      "text": "1,1410,35,21",
                      "type": "1,1410,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item associated with the passed key.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1411,25,41",
                      "type": "1,1411,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1414,0",
                  "since": "1,1412,15",
                  "text": "1,1409,8,49"
                }
              },
              {
                "$type": "method",
                "name": "getConfig",
                "text": "Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "The name of the config property to get.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1469,29",
                      "text": "3,1469,35,40",
                      "type": "3,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "peek",
                    "optional": true,
                    "text": "`true` to peek at the raw value without calling the getter.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,1470,30",
                      "text": "3,1470,42,60",
                      "type": "3,1470,20",
                      "value": "3,1470,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The config property value.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1471,29,27",
                      "type": "3,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1473,0",
                  "text": "3,1466,12,151"
                }
              },
              {
                "$type": "method",
                "name": "getCount",
                "since": "5.0.0",
                "text": "Returns the number of items in the collection.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the number of items in the collection.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,1420,25,39",
                      "type": "1,1420,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1423,0",
                  "since": "1,1421,15",
                  "text": "1,1419,8,47"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCurrentConfig",
                "src": {
                  "access": "3,1506,12",
                  "name": "3,1508,0"
                }
              },
              {
                "$type": "method",
                "name": "getFilterFn",
                "text": "Returns the filter function.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "sortFn The sort function.\n",
                    "type": "Function",
                    "src": {
                      "text": "1,3055,27,26",
                      "type": "1,3055,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,3057,0",
                  "text": "1,3054,8,29"
                }
              },
              {
                "$type": "method",
                "name": "getFilters",
                "text": "Returns the `{@link Ext.util.FilterCollection}`. Unless `autoCreate` is explicitly passed\nas `false` this collection will be automatically created if it does not yet exist.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "autoCreate",
                    "optional": true,
                    "text": "Pass `false` to disable auto-creation of the collection.\n",
                    "value": "true",
                    "src": {
                      "name": "1,3064,16",
                      "text": "1,3064,33,57",
                      "value": "1,3064,27"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The collection of filters.\n",
                    "type": "Ext.util.FilterCollection",
                    "src": {
                      "text": "1,3065,44,27",
                      "type": "1,3065,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,3067,0",
                  "text": "1,3062,8,165"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "5,75,25,3",
                      "type": "5,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,77,0",
                  "text": "5,74,8,93"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getIndices",
                "since": "5.0.0",
                "text": "Returns the map of key to index for all items in this collection. This method will\nlazily populate this map on request. This map is maintained when doing so does not\ninvolve too much overhead. When this threshold is cross, the index map is discarded\nand must be rebuilt by calling this method.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,2985,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,2986,8",
                  "name": "1,2989,0",
                  "since": "1,2987,15",
                  "text": "1,2980,8,295"
                }
              },
              {
                "$type": "method",
                "name": "getInitialConfig",
                "text": "Returns the initial configuration passed to the constructor when\ninstantiating this class.\n\nGiven this example Ext.button.Button definition and instance:\n\n    Ext.define('MyApp.view.Button', {\n        extend: 'Ext.button.Button',\n        xtype: 'mybutton',\n\n        scale: 'large',\n        enableToggle: true\n    });\n\n    var btn = Ext.create({\n        xtype: 'mybutton',\n        renderTo: Ext.getBody(),\n        text: 'Test Button'\n    });\n\nCalling `btn.getInitialConfig()` would return an object including the config\noptions passed to the `{@link #static-method!create create}` method:\n\n    xtype: 'mybutton',\n    renderTo: // The document body itself\n    text: 'Test Button'\n\nCalling `btn.getInitialConfig('text')`returns **'Test Button'**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "optional": true,
                    "text": "Name of the config option to return.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1551,29",
                      "text": "3,1551,35,37",
                      "type": "3,1551,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The full config object or a single config value\nwhen `name` parameter specified.\n",
                    "type": "Object/Mixed",
                    "src": {
                      "text": "3,1552,35,48:3,1553,12,33",
                      "type": "3,1552,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1555,0",
                  "text": "3,1523,12,715"
                }
              },
              {
                "$type": "method",
                "name": "getKey",
                "since": "5.0.0",
                "text": "A function which will be called, passing an object belonging to this collection.\nThe function should return the key by which that object will be indexed. This key\nmust be unique to this item as only one item with this key will be retained.\n\nThe default implementation looks basically like this (give or take special case\nhandling of 0):\n\n     function getKey (item) {\n         return item.id || item._id || item.getId();\n     }\n\nYou can provide your own implementation by passing the `{@link #cfg!keyFn keyFn}` config.\n\nFor example, to hold items that have a unique \"name\" property:\n\n    var elementCollection = new Ext.util.Collection({\n        keyFn: function (item) {\n            return item.name;\n        }\n    });\n\nThe collection can have `{@link #cfg!extraKeys extraKeys}` if items need to be quickly looked up by other\n(potentially non-unique) properties.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1452,24",
                      "text": "1,1452,29,10",
                      "type": "1,1452,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The key for the passed item.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1453,25,29",
                      "type": "1,1453,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1456,0",
                  "since": "1,1454,15",
                  "text": "1,1428,8,822"
                }
              },
              {
                "$type": "method",
                "name": "getRange",
                "since": "5.0.0",
                "text": "Returns a range of items in this collection\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item to get.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "1,1464,25",
                      "text": "1,1464,34,36",
                      "type": "1,1464,16",
                      "value": "1,1464,31"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The ending index. The item at this index is *not* included.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1465,25",
                      "text": "1,1465,30,60",
                      "type": "1,1465,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of items\n",
                    "type": "Array",
                    "src": {
                      "text": "1,1466,24,18",
                      "type": "1,1466,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1469,0",
                  "since": "1,1467,15",
                  "text": "1,1463,8,44"
                }
              },
              {
                "$type": "method",
                "name": "getSorters",
                "text": "Returns the `{@link Ext.util.SorterCollection}`. Unless `autoCreate` is explicitly passed\nas `false` this collection will be automatically created if it does not yet exist.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "autoCreate",
                    "optional": true,
                    "text": "Pass `false` to disable auto-creation of the collection.\n",
                    "value": "true",
                    "src": {
                      "name": "1,3205,16",
                      "text": "1,3205,33,57",
                      "value": "1,3205,27"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The collection of sorters.\n",
                    "type": "Ext.util.SorterCollection",
                    "src": {
                      "text": "1,3206,44,27",
                      "type": "1,3206,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,3208,0",
                  "text": "1,3203,8,165"
                }
              },
              {
                "$type": "method",
                "name": "getSortFn",
                "text": "Returns an up to date sort function.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The sort function.\n",
                    "type": "Function",
                    "src": {
                      "text": "1,3196,27,19",
                      "type": "1,3196,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,3198,0",
                  "text": "1,3195,8,37"
                }
              },
              {
                "$type": "method",
                "name": "getSource",
                "text": "Returns all unfiltered items in the Collection when the Collection has been\nfiltered.  Returns `{@link null}` when the Collection is not filtered.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "items All unfiltered items (or `{@link null}` when the\nCollection is not filtered)\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "1,1495,38,47:1,1496,8,28",
                      "type": "1,1495,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1492,16",
                  "text": "1,1493,8,139"
                }
              },
              {
                "$type": "method",
                "name": "getValues",
                "since": "5.0.0",
                "text": "Returns an array of values for the specified (sub) property.\n\nFor example, to get an array of \"name\" properties from a collection of records (of\n`{@link Ext.data.Model}` objects):\n\n     var names = collection.getValues('name', 'data');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The property to collect on\n",
                    "type": "String",
                    "src": {
                      "name": "1,1507,24",
                      "text": "1,1507,33,27",
                      "type": "1,1507,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "'root' property to extract the first argument from. This is\nused mainly when operating on fields in records, where the fields are all stored\ninside the 'data' object.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1508,25",
                      "text": "1,1508,31,60:1,1509,8,107",
                      "type": "1,1508,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The values.\n",
                    "type": "Array",
                    "src": {
                      "text": "1,1511,24,12",
                      "type": "1,1511,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "optional": true,
                    "text": "The index of the first item to include.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "1,1512,25",
                      "text": "1,1512,34,40",
                      "type": "1,1512,16",
                      "value": "1,1512,31"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop getting values. The value of this\nitem is *not* included.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1513,25",
                      "text": "1,1513,30,61:1,1514,8,24",
                      "type": "1,1513,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1518,0",
                  "since": "1,1516,15",
                  "text": "1,1500,8,229"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasConfig",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "3,1516,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,1515,12",
                  "name": "3,1518,0"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "2,1334,27",
                      "text": "2,1334,37,35",
                      "type": "2,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,1335,29,67",
                      "type": "2,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1337,0",
                  "text": "2,1331,11,161"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from `{@link Object}` inherits the `{@link #method!hasOwnProperty hasOwnProperty}` method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "4,100,20",
                      "text": "4,100,25,34",
                      "type": "4,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,101,22,57:4,102,4,15",
                      "type": "4,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,53,12",
                  "text": "4,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "indexOf",
                "since": "5.0.0",
                "text": "Returns index within the collection of the passed Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to find.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1535,24",
                      "text": "1,1535,29,18",
                      "type": "1,1535,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of the item or -1 if not found.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,1536,25,42",
                      "type": "1,1536,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1539,0",
                  "since": "1,1537,15",
                  "text": "1,1534,8,58"
                }
              },
              {
                "$type": "method",
                "name": "indexOfKey",
                "since": "5.0.0",
                "text": "Returns index within the collection of the passed key.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key to find.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1550,24",
                      "text": "1,1550,28,17",
                      "type": "1,1550,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of the item or -1 if not found.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,1551,25,42",
                      "type": "1,1551,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1554,0",
                  "since": "1,1552,15",
                  "text": "1,1549,8,55"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initConfig",
                "text": "Initialize configuration for this class. a typical example:\n\n    Ext.define('My.awesome.Class', {\n        // The default config\n        config: {\n            name: 'Awesome',\n            isAwesome: true\n        },\n\n        constructor: function(config) {\n            this.initConfig(config);\n        }\n    });\n\n    var awesome = new My.awesome.Class({\n        name: 'Super Awesome'\n    });\n\n    alert(awesome.getName()); // 'Super Awesome'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "3,1449,28",
                      "type": "3,1449,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,1450,31,5",
                      "type": "3,1450,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1448,12",
                  "name": "3,1452,0",
                  "text": "3,1428,12,441"
                }
              },
              {
                "$type": "method",
                "name": "insert",
                "since": "5.0.0",
                "text": "Inserts one or more items to the collection. The `index` value is the position at\nwhich the first item will be placed. The items starting at that position will be\nshifted to make room.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which to insert the item(s).\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1573,24",
                      "text": "1,1573,30,42",
                      "type": "1,1573,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item or items to add.\n",
                    "type": "Object/Object[]",
                    "src": {
                      "name": "1,1574,33",
                      "text": "1,1574,38,26",
                      "type": "1,1574,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item or items added.\n",
                    "type": "Object/Object[]",
                    "src": {
                      "text": "1,1575,34,25",
                      "type": "1,1575,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1578,0",
                  "since": "1,1576,15",
                  "text": "1,1569,8,186"
                }
              },
              {
                "$type": "method",
                "name": "isItemFiltered",
                "text": "This method can be used to conveniently test whether an individual item would be\nremoved due to the current filter.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to test.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,3081,24",
                      "text": "1,3081,29,18",
                      "type": "1,3081,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value `true` if the item would be \"removed\" from the\ncollection due to filters or `false` otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,3082,26,57:1,3083,8,48",
                      "type": "1,3082,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,3085,0",
                  "text": "1,3079,8,116"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n`{@link #method!isPrototypeOf isPrototypeOf}` allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "4,148,20",
                      "text": "4,148,30,71:4,149,4,18",
                      "type": "4,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "4,150,20",
                      "text": "4,150,27,50",
                      "type": "4,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,151,22,56",
                      "type": "4,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,106,12",
                  "text": "4,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "2,1344,29",
                      "text": "2,1344,36,40",
                      "type": "2,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,1345,30,31",
                      "type": "2,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1347,0",
                  "text": "2,1343,12,57"
                }
              },
              {
                "$type": "method",
                "name": "itemChanged",
                "since": "5.0.0",
                "text": "This method should be called when an item in this collection has been modified. If\nthe collection is sorted or filtered the result of modifying an item needs to be\nreflected in the collection. If the item's key is also being modified, it is best\nto pass the `oldKey` to this same call rather than call `{@link #method!updateKey updateKey}` separately.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item that was modified.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1597,24",
                      "text": "1,1597,29,28",
                      "type": "1,1597,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "modified",
                    "optional": true,
                    "text": "The names of the modified properties of the item.\n",
                    "type": "String[]",
                    "src": {
                      "name": "1,1598,27",
                      "text": "1,1598,37,50",
                      "type": "1,1598,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldKey",
                    "optional": true,
                    "text": "Passed if the item's key was also modified.\n",
                    "type": "String/Number",
                    "src": {
                      "name": "1,1599,32",
                      "text": "1,1599,40,44",
                      "type": "1,1599,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1602,0",
                  "since": "1,1600,15",
                  "text": "1,1592,8,327"
                }
              },
              {
                "$type": "method",
                "name": "last",
                "since": "5.0.0",
                "text": "Returns the last item in the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "`true` to extract the first item in each group. Only applies if\na {@link #cfg!grouper #grouper} is active in the collection.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1377,26",
                      "text": "1,1377,35,64:1,1378,8,48",
                      "type": "1,1377,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The last item in the collection. If the grouped parameter is passed,\nsee {@link #method!aggregateByGroup #aggregateByGroup} for information on the return type.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1379,25,69:1,1380,8,66",
                      "type": "1,1379,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1383,0",
                  "since": "1,1381,15",
                  "text": "1,1376,8,41"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "link",
                "text": "Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via `{@link #method!destroy #destroy}`).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "type": "String",
                    "src": {
                      "name": "3,1571,28",
                      "type": "3,1571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "type": "Object",
                    "src": {
                      "name": "3,1572,28",
                      "type": "3,1572,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `value` passed.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1573,29,20",
                      "type": "3,1573,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1574,12",
                  "name": "3,1576,0",
                  "text": "3,1569,12,140"
                }
              },
              {
                "$type": "method",
                "name": "max",
                "since": "5.0.0",
                "text": "Determines the maximum value for the specified property over some or all of the\nitems in this collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2632,24",
                      "text": "1,2632,33,41",
                      "type": "1,2632,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item to include in the maximum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2633,25",
                      "text": "1,2633,32,55",
                      "type": "1,2633,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop in `{@link #property!items items}`. The item at this index\nwill *not* be included in the maximum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2634,25",
                      "text": "1,2634,30,62:1,2635,8,39",
                      "type": "1,2634,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The maximum of the specified property from the indicated items.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2636,25,64",
                      "type": "1,2636,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2628,16",
                  "since": "1,2637,15",
                  "text": "1,2629,8,107"
                }
              },
              {
                "$type": "method",
                "name": "maxByGroup",
                "since": "5.0.0",
                "text": "See {@link #method!max #max}. The result is partitioned by group.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2644,24",
                      "text": "1,2644,33,41",
                      "type": "1,2644,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of {@link #method!max #max}, partitioned by group. See {@link #method!aggregateByGroup #aggregateByGroup}.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2645,25,81",
                      "type": "1,2645,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2641,16",
                  "since": "1,2646,15",
                  "text": "1,2642,8,55"
                }
              },
              {
                "$type": "method",
                "name": "maxItem",
                "since": "5.0.0",
                "text": "Finds the item with the maximum value for the specified property over some or all\nof the items in this collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2654,24",
                      "text": "1,2654,33,41",
                      "type": "1,2654,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item to include in the maximum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2655,25",
                      "text": "1,2655,32,55",
                      "type": "1,2655,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop in `{@link #property!items items}`. The item at this index\nwill *not* be included in the maximum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2656,25",
                      "text": "1,2656,30,62:1,2657,8,39",
                      "type": "1,2656,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item with the maximum of the specified property from the\nindicated items.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2658,25,61:1,2659,8,17",
                      "type": "1,2658,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2650,16",
                  "since": "1,2660,15",
                  "text": "1,2651,8,116"
                }
              },
              {
                "$type": "method",
                "name": "maxItemByGroup",
                "since": "5.0.0",
                "text": "See {@link #method!maxItem #maxItem}. The result is partitioned by group.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2667,24",
                      "text": "1,2667,33,41",
                      "type": "1,2667,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of {@link #method!maxItem #maxItem}, partitioned by group. See {@link #method!aggregateByGroup #aggregateByGroup}.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2668,25,85",
                      "type": "1,2668,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2664,16",
                  "since": "1,2669,15",
                  "text": "1,2665,8,59"
                }
              },
              {
                "$type": "method",
                "name": "min",
                "since": "5.0.0",
                "text": "Determines the minimum value for the specified property over some or all of the\nitems in this collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2677,24",
                      "text": "1,2677,33,41",
                      "type": "1,2677,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item to include in the minimum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2678,25",
                      "text": "1,2678,32,55",
                      "type": "1,2678,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop in `{@link #property!items items}`. The item at this index\nwill *not* be included in the minimum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2679,25",
                      "text": "1,2679,30,62:1,2680,8,39",
                      "type": "1,2679,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The minimum of the specified property from the indicated items.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2681,25,64",
                      "type": "1,2681,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2673,16",
                  "since": "1,2682,15",
                  "text": "1,2674,8,107"
                }
              },
              {
                "$type": "method",
                "name": "minByGroup",
                "since": "5.0.0",
                "text": "See {@link #method!min #min}. The result is partitioned by group.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2689,24",
                      "text": "1,2689,33,41",
                      "type": "1,2689,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of {@link #method!min #min}, partitioned by group. See {@link #method!aggregateByGroup #aggregateByGroup}.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2690,25,81",
                      "type": "1,2690,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2686,16",
                  "since": "1,2691,15",
                  "text": "1,2687,8,55"
                }
              },
              {
                "$type": "method",
                "name": "minItem",
                "since": "5.0.0",
                "text": "Finds the item with the minimum value for the specified property over some or all\nof the items in this collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2699,24",
                      "text": "1,2699,33,41",
                      "type": "1,2699,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item to include in the minimum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2700,25",
                      "text": "1,2700,32,55",
                      "type": "1,2700,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop in `{@link #property!items items}`. The item at this index\nwill *not* be included in the minimum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2701,25",
                      "text": "1,2701,30,62:1,2702,8,39",
                      "type": "1,2701,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item with the minimum of the specified property from the\nindicated items.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2703,25,61:1,2704,8,17",
                      "type": "1,2703,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2695,16",
                  "since": "1,2705,15",
                  "text": "1,2696,8,116"
                }
              },
              {
                "$type": "method",
                "name": "minItemByGroup",
                "since": "5.0.0",
                "text": "See {@link #method!minItem #minItem}. The result is partitioned by group.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2712,24",
                      "text": "1,2712,33,41",
                      "type": "1,2712,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of {@link #method!minItem #minItem}, partitioned by group. See {@link #method!aggregateByGroup #aggregateByGroup}.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2713,25,85",
                      "type": "1,2713,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2709,16",
                  "since": "1,2714,15",
                  "text": "1,2710,8,59"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for {@link #method!addManagedListener #addManagedListener}.\n",
                "src": {
                  "inheritdoc": "2,1787,12",
                  "name": "2,1789,0",
                  "text": "2,1786,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for {@link #method!removeManagedListener #removeManagedListener}.\n",
                "src": {
                  "inheritdoc": "2,1793,12",
                  "name": "2,1795,0",
                  "text": "2,1792,12,46"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "notify",
                "since": "5.0.0",
                "text": "This method wraps all fired events and gives observers first view of the change.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "1,3012,24",
                      "text": "1,3012,34,31",
                      "type": "1,3012,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "optional": true,
                    "text": "The event arguments. This collection instance is inserted at\nthe front of this array if there is any receiver for the notification.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,3013,24",
                      "text": "1,3013,30,61:1,3014,8,72",
                      "type": "1,3013,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,3016,8",
                  "name": "1,3019,0",
                  "since": "1,3017,15",
                  "text": "1,3010,8,82"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "2,1775,12",
                  "name": "2,1777,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "2,1190,44",
                      "text": "2,1190,54,37",
                      "type": "2,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,1191,37",
                      "text": "2,1191,40,30",
                      "type": "2,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1192,29",
                      "text": "2,1192,36,20",
                      "type": "2,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1193,29",
                      "text": "2,1193,38,44",
                      "type": "2,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1195,0",
                  "text": "2,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "2,1175,44",
                      "text": "2,1175,54,37",
                      "type": "2,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,1176,37",
                      "text": "2,1176,40,30",
                      "type": "2,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1177,29",
                      "text": "2,1177,36,20",
                      "type": "2,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1178,29",
                      "text": "2,1178,38,44",
                      "type": "2,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1180,0",
                  "text": "2,1170,12,183"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollectionAdd",
                "since": "5.0.0",
                "text": "This method is called when items are added to the `{@link #cfg!source source}` collection. This is\nequivalent to the `{@link #event!add #event-add}` event but is called before the `add`\nevent is fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2340,37",
                      "text": "1,2340,44,23",
                      "type": "1,2340,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "The `details` of the `{@link #event!add #event-add}` event.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,2341,24",
                      "text": "1,2341,32,53",
                      "type": "1,2341,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2342,8",
                  "name": "1,2345,0",
                  "since": "1,2343,15",
                  "text": "1,2337,8,175"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollectionBeforeItemChange",
                "since": "5.0.0",
                "text": "This method is called when an item is modified in the `{@link #cfg!source source}` collection. This is\nequivalent to the `{@link #event!beforeitemchange #event-beforeitemchange}` event but is\ncalled before the `{@link #event!beforeitemchange beforeitemchange}` event is fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2411,37",
                      "text": "1,2411,44,23",
                      "type": "1,2411,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "The `details` of the\n`{@link #event!beforeitemchange #event-beforeitemchange}` event.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,2412,24",
                      "text": "1,2412,32,21:1,2413,8,58",
                      "type": "1,2412,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2414,8",
                  "name": "1,2417,0",
                  "since": "1,2415,15",
                  "text": "1,2408,8,218"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollectionBeginUpdate",
                "since": "5.0.0",
                "text": "This method is called when the `{@link #cfg!source source}` collection starts updating. This is\nequivalent to the `{@link #event!beginupdate #event-beginupdate}` event but is called\nbefore the `{@link #event!beginupdate beginupdate}` event is fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2426,37",
                      "text": "1,2426,44,23",
                      "type": "1,2426,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2427,8",
                  "name": "1,2430,0",
                  "since": "1,2428,15",
                  "text": "1,2423,8,196"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollectionEndUpdate",
                "since": "5.0.0",
                "text": "This method is called when the `{@link #cfg!source source}` collection finishes updating. This is\nequivalent to the `{@link #event!endupdate #event-endupdate}` event but is called before\nthe `{@link #event!endupdate endupdate}` event is fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2438,37",
                      "text": "1,2438,44,23",
                      "type": "1,2438,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2439,8",
                  "name": "1,2442,0",
                  "since": "1,2440,15",
                  "text": "1,2435,8,192"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollectionItemChange",
                "since": "5.0.0",
                "text": "This method is called when an item is modified in the `{@link #cfg!source source}` collection. This is\nequivalent to the `{@link #event!itemchange #event-itemchange}` event but is called before\nthe `{@link #event!itemchange itemchange}` event is fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2450,37",
                      "text": "1,2450,44,23",
                      "type": "1,2450,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "The `details` of the `{@link #event!itemchange #event-itemchange}`\nevent.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,2451,24",
                      "text": "1,2451,32,60:1,2452,8,7",
                      "type": "1,2451,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2453,8",
                  "name": "1,2456,0",
                  "since": "1,2454,15",
                  "text": "1,2447,8,200"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollectionRefresh",
                "since": "5.0.0",
                "text": "This method is called when the `{@link #cfg!source source}` collection refreshes. This is equivalent to\nthe `{@link #event!refresh #event-refresh}` event but is called before the `{@link #event!refresh refresh}` event\nis fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2471,37",
                      "text": "1,2471,44,23",
                      "type": "1,2471,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2472,8",
                  "name": "1,2475,0",
                  "since": "1,2473,15",
                  "text": "1,2468,8,178"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollectionRemove",
                "since": "5.0.0",
                "text": "This method is called when items are removed from the `{@link #cfg!source source}` collection. This is\nequivalent to the `{@link #event!remove #event-remove}` event but is called before the\n`remove` event is fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2506,37",
                      "text": "1,2506,44,23",
                      "type": "1,2506,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "The `details` of the `remove` event.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,2507,24",
                      "text": "1,2507,32,37",
                      "type": "1,2507,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2508,8",
                  "name": "1,2511,0",
                  "since": "1,2509,15",
                  "text": "1,2503,8,188"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollectionSort",
                "since": "5.0.0",
                "text": "This method is called when the `{@link #cfg!source source}` collection is sorted. This is equivalent to\nthe `{@link #event!sort #event-sort}` event but is called before the `sort` event is fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2519,37",
                      "text": "1,2519,44,23",
                      "type": "1,2519,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2520,8",
                  "name": "1,2516,16",
                  "since": "1,2521,15",
                  "text": "1,2517,8,169"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onCollectionUpdateKey",
                "since": "5.0.0",
                "text": "This method is called when key changes in the `{@link #cfg!source source}` collection. This is\nequivalent to the `{@link #event!updatekey updatekey}` event but is called before the `{@link #event!updatekey updatekey}` event is\nfired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "text": "The source collection.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,2531,37",
                      "text": "1,2531,44,23",
                      "type": "1,2531,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "The `details` of the `{@link #event!updatekey updatekey}` event.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,2532,24",
                      "text": "1,2532,32,40",
                      "type": "1,2532,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,2533,8",
                  "name": "1,2536,0",
                  "since": "1,2534,15",
                  "text": "1,2528,8,164"
                }
              },
              {
                "$type": "method",
                "name": "onFilterChange",
                "template": true,
                "text": "Called after a change of the filter is complete.\n\nFor example:\n\n     onFilterChange: function (filters) {\n         if (this.filtered) {\n             // process filters\n         } else {\n             // no filters present\n         }\n     }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "filters",
                    "text": "The filters collection.\n",
                    "type": "Ext.util.FilterCollection",
                    "src": {
                      "name": "1,3104,43",
                      "text": "1,3104,51,24",
                      "type": "1,3104,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,3106,0",
                  "template": "1,3102,8",
                  "text": "1,3090,8,240"
                }
              },
              {
                "$type": "method",
                "name": "onSortChange",
                "template": true,
                "text": "Called after a change of the sort is complete.\n\nFor example:\n\n     onSortChange: function (sorters) {\n         if (this.sorted) {\n             // process sorters\n         } else {\n             // no sorters present\n         }\n     }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "The sorters collection.\n",
                    "type": "Ext.util.SorterCollection",
                    "src": {
                      "name": "1,3234,43",
                      "text": "1,3234,51,24",
                      "type": "1,3234,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,3236,0",
                  "template": "1,3232,8",
                  "text": "1,3220,8,234"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a `{@link #method!propertyIsEnumerable propertyIsEnumerable}` method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of `{@link #method!propertyIsEnumerable propertyIsEnumerable}` on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "4,220,20",
                      "text": "4,220,25,34",
                      "type": "4,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,221,22,57:4,222,4,22",
                      "type": "4,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,155,12",
                  "text": "4,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1466,27",
                      "text": "2,1466,34,53",
                      "type": "2,1466,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "2,1467,36",
                      "text": "2,1467,43,58:2,1468,11,231",
                      "type": "2,1467,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1473,28",
                      "text": "2,1473,36,60:2,1474,11,164",
                      "type": "2,1473,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the `{@link #method!destroy destroy}` method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1479,28,130:2,1480,11,192",
                      "type": "2,1479,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1490,0",
                  "text": "2,1453,11,651"
                }
              },
              {
                "$type": "method",
                "name": "remove",
                "since": "5.0.0",
                "text": "Remove an item from the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item or items to remove.\n",
                    "type": "Object/Object[]",
                    "src": {
                      "name": "1,1773,33",
                      "text": "1,1773,38,29",
                      "type": "1,1773,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The number of items removed.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,1774,25,29",
                      "type": "1,1774,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1777,0",
                  "since": "1,1775,15",
                  "text": "1,1772,8,36"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for {@link #method!unAfter #unAfter}.\n",
                "src": {
                  "name": "2,1248,0",
                  "text": "2,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeAll",
                "since": "5.0.0",
                "text": "Remove all items in the collection.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "This object.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "1,1789,38,13",
                      "type": "1,1789,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1792,0",
                  "since": "1,1790,15",
                  "text": "1,1788,8,36"
                }
              },
              {
                "$type": "method",
                "name": "removeAt",
                "since": "5.0.0",
                "text": "Remove an item from a specified index in the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index within the collection of the item to remove.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1805,24",
                      "text": "1,1805,30,55",
                      "type": "1,1805,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "count",
                    "optional": true,
                    "text": "The number of items to remove.\n",
                    "type": "Number",
                    "value": "1",
                    "src": {
                      "name": "1,1806,25",
                      "text": "1,1806,34,31",
                      "type": "1,1806,16",
                      "value": "1,1806,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If `{@link #method!count count}` was 1 and the item was removed, that item is\nreturned. Otherwise the number of items removed is returned.\n",
                    "type": "Object/Number",
                    "src": {
                      "text": "1,1807,32,56:1,1808,8,61",
                      "type": "1,1807,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1811,0",
                  "since": "1,1809,15",
                  "text": "1,1804,8,57"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for {@link #method!unBefore #unBefore}.\n",
                "src": {
                  "name": "2,1242,0",
                  "text": "2,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeByKey",
                "since": "5.0.0",
                "text": "Removes the item associated with the passed key from the collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key of the item to remove.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1831,24",
                      "text": "1,1831,28,31",
                      "type": "1,1831,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Only returned if removing at a specified key. The item removed or\n`false` if no item was removed.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1832,25,66:1,1833,8,32",
                      "type": "1,1832,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1836,0",
                  "since": "1,1834,15",
                  "text": "1,1830,8,69"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1102,28",
                      "text": "2,1102,38,51",
                      "type": "2,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "2,1103,30",
                      "text": "2,1103,33,66:2,1104,12,76",
                      "type": "2,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1106,28",
                      "text": "2,1106,34,62:2,1107,12,1017",
                      "type": "2,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1145,0",
                  "text": "2,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the {@link #method!mon #mon} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "2,526,56",
                      "text": "2,526,61,52",
                      "type": "2,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "2,527,34",
                      "text": "2,527,40,63",
                      "type": "2,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "2,528,29",
                      "text": "2,528,32,85",
                      "type": "2,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,529,27",
                      "text": "2,529,33,92:2,530,11,43",
                      "type": "2,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "2,532,0",
                  "text": "2,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1307,28",
                      "text": "2,1307,36,44",
                      "type": "2,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1308,27",
                      "text": "2,1308,43,26:2,1309,11,41",
                      "type": "2,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,1306,11",
                  "name": "2,1311,0",
                  "text": "2,1305,11,38"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeObserver",
                "since": "5.0.0",
                "text": "Removes an observing object to this collection. See `{@link #method!addObserver addObserver}` for details.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "observer",
                    "text": "The observer instance.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "name": "1,3482,37",
                      "text": "1,3482,46,23",
                      "type": "1,3482,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,3483,8",
                  "name": "1,3486,0",
                  "since": "1,3484,15",
                  "text": "1,3480,8,80"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "replace",
                "text": "Replace an old entry with a new entry of the same key if the entry existed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to insert.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1849,24",
                      "text": "1,1849,29,20",
                      "type": "1,1849,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "inserted The item inserted.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1850,25,28",
                      "type": "1,1850,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,1847,8",
                  "name": "1,1852,0",
                  "text": "1,1848,8,76"
                }
              },
              {
                "$type": "method",
                "name": "replaceAll",
                "since": "5.0.0",
                "text": "Adds an item to the collection while removing any existing items. Similar to {@link #method!add #method-add}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item or items to add.\n",
                    "type": "Object/Object[]",
                    "src": {
                      "name": "1,725,33",
                      "text": "1,725,38,26",
                      "type": "1,725,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The item or items added.\n",
                    "type": "Object/Object[]",
                    "src": {
                      "text": "1,726,34,25",
                      "type": "1,726,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,729,0",
                  "since": "1,727,15",
                  "text": "1,724,8,98"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "2,579,29",
                      "text": "2,579,48,46",
                      "type": "2,579,20",
                      "value": "2,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "2,580,29,24",
                      "type": "2,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,581,12",
                  "name": "2,583,0",
                  "text": "2,577,12,102"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the {@link #method!suspendEvent #suspendEvent} method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "2,1409,32",
                      "text": "2,1409,42,32",
                      "type": "2,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1411,0",
                  "text": "2,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see {@link #method!suspendEvents #suspendEvents}).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See {@link #method!suspendEvents #suspendEvents}.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1431,29",
                      "text": "2,1431,43,59:2,1432,11,53",
                      "type": "2,1431,19"
                    }
                  }
                ],
                "src": {
                  "name": "2,1434,0",
                  "text": "2,1426,11,198"
                }
              },
              {
                "$type": "method",
                "name": "setConfig",
                "text": "Sets a single/multiple configuration options.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The name of the property to set, or a set of key value pairs to set.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,1478,35",
                      "text": "3,1478,40,69",
                      "type": "3,1478,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to set for the name parameter.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1479,29",
                      "text": "3,1479,36,41",
                      "type": "3,1479,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,1480,31,5",
                      "type": "3,1480,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1482,0",
                  "text": "3,1476,12,46"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for {@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener}.  In\nversions prior to 5.1, {@link #cfg!listeners #listeners} had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the {@link #method!on #on} method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1804,28",
                      "text": "2,1804,38,14",
                      "type": "2,1804,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1806,0",
                  "text": "2,1798,12,402"
                }
              },
              {
                "$type": "method",
                "name": "sort",
                "text": "Updates the sorters collection and triggers sorting of this Sortable.\n\nFor example:\n\n    //sort by a single field\n    myStore.sort('myField', 'DESC');\n\n    //sorting by multiple fields\n    myStore.sort([{\n        property : 'age',\n        direction: 'ASC'\n    }, {\n        property : 'name',\n        direction: 'DESC'\n    }]);\n\nWhen passing a single string argument to sort, the `direction` is maintained for\neach field and is toggled automatically. So this code:\n\n    store.sort('myField');\n    store.sort('myField');\n\nIs equivalent to the following:\n\n    store.sort('myField', 'ASC');\n    store.sort('myField', 'DESC');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "optional": true,
                    "text": "Either the name of a property\n(such as a field of a `{@link Ext.data.Model}` in a `Store`), an array of configurations\nfor `{@link Ext.util.Sorter}` instances or just a comparison function.\n",
                    "type": "String/Function/Ext.util.Sorter[]",
                    "src": {
                      "name": "1,3270,52",
                      "text": "1,3270,62,30:1,3271,8,144",
                      "type": "1,3270,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "direction",
                    "optional": true,
                    "text": "The direction by which to sort the data. This parameter\nis only valid when `property` is a String, otherwise the second parameter is the\n`mode`.\n",
                    "type": "String",
                    "src": {
                      "name": "1,3273,25",
                      "text": "1,3273,36,56:1,3274,8,89",
                      "type": "1,3273,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mode",
                    "optional": true,
                    "text": "Where to put new sorters in the collection. This\nshould be one the following values:\n\n* `**replace**` : The new sorter(s) become the sole sorter set for this Sortable.\n  This is the most useful call mode to programmatically sort by multiple fields.\n\n* `**prepend**` : The new sorters are inserted as the primary sorters. The sorter\n  collection length must be controlled by the developer.\n\n* `**multi**` : Similar to `**prepend**` the new sorters are inserted at the front\n  of the collection of sorters. Following the insertion, however, this mode trims\n  the sorter collection to enforce the `{@link #cfg!multiSortLimit multiSortLimit}` config. This is useful for\n  implementing intuitive \"Sort by this\" user interfaces.\n\n* `**append**` : The new sorters are added at the end of the collection.\n",
                    "type": "String",
                    "value": "\"replace\"",
                    "src": {
                      "name": "1,3276,25",
                      "text": "1,3276,41,49:1,3277,8,720",
                      "type": "1,3276,16",
                      "value": "1,3276,30"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This instance.\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "1,3291,38,15",
                      "type": "1,3291,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,3293,0",
                  "text": "1,3243,8,623"
                }
              },
              {
                "$type": "method",
                "name": "sortBy",
                "text": "Sorts the collection by a single sorter function\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorterFn",
                    "text": "The function to sort by\n",
                    "type": "Function",
                    "src": {
                      "name": "1,3344,26",
                      "text": "1,3344,35,24",
                      "type": "1,3344,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,3347,0",
                  "text": "1,3343,8,49"
                }
              },
              {
                "$type": "method",
                "name": "sortData",
                "text": "This method will sort an array based on the currently configured {@link #cfg!sorters #sorters}.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "The array you want to have sorted.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,3303,23",
                      "text": "1,3303,28,35",
                      "type": "1,3303,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The array you passed after it is sorted.\n",
                    "type": "Array",
                    "src": {
                      "text": "1,3304,24,41",
                      "type": "1,3304,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,3306,0",
                  "text": "1,3302,8,83"
                }
              },
              {
                "$type": "method",
                "name": "sortItems",
                "since": "5.0.0",
                "text": "Sorts the items of the collection using the supplied function. This should only be\ncalled for collections that have no `{@link #cfg!sorters sorters}` defined.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sortFn",
                    "text": "The function by which to sort the items.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,3314,26",
                      "text": "1,3314,33,41",
                      "type": "1,3314,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,3317,0",
                  "since": "1,3315,15",
                  "text": "1,3312,8,138"
                }
              },
              {
                "$type": "method",
                "name": "splice",
                "since": "5.0.0",
                "text": "This method is basically the same as the JavaScript Array splice method.\n\nNegative indexes are interpreted starting at the end of the collection. That is,\na value of -1 indicates the last item, or equivalent to `length - 1`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which to add or remove items.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1868,24",
                      "text": "1,1868,30,43",
                      "type": "1,1868,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "toRemove",
                    "text": "The number of items to remove or an array of the\nitems to remove.\n",
                    "type": "Number/Object[]",
                    "src": {
                      "name": "1,1869,33",
                      "text": "1,1869,42,49:1,1870,8,17",
                      "type": "1,1869,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "toAdd",
                    "optional": true,
                    "text": "The items to insert at the given `index`.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "1,1871,27",
                      "text": "1,1871,34,42",
                      "type": "1,1871,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1874,0",
                  "since": "1,1872,15",
                  "text": "1,1863,8,226"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "spliceMerge",
                "since": "5.0.0",
                "text": "This method is what you might find in the core of a merge sort. We have an items\narray that is sorted so we sort the newItems and merge the two sorted arrays. In\nthe general case, newItems will be no larger than all items so sorting it will be\nfaster than simply concatenating the arrays and calling sort on it.\n\nWe take advantage of the nature of this process to generate add events as ranges.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newItems",
                    "type": "Object[]",
                    "src": {
                      "name": "1,3502,26",
                      "type": "1,3502,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,3503,8",
                  "name": "1,3506,0",
                  "since": "1,3504,15",
                  "text": "1,3495,8,396"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "statics",
                "text": "Get the reference to the class from which this object was instantiated. Note that unlike {@link Ext.Base#property!self Ext.Base#self},\n`this.statics()` is scope-independent and it always returns the class from which it was called, regardless of what\n`this` points to during run-time\n\n    Ext.define('My.Cat', {\n        statics: {\n            totalCreated: 0,\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            var statics = this.statics();\n\n            alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                            // equivalent to: My.Cat.speciesName\n\n            alert(this.self.speciesName);   // dependent on 'this'\n\n            statics.totalCreated++;\n        },\n\n        clone: function() {\n            var cloned = new this.self();   // dependent on 'this'\n\n            cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n            return cloned;\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n\n        statics: {\n            speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n        },\n\n        constructor: function() {\n            this.callParent();\n        }\n    });\n\n    var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\n    var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));         // alerts 'My.SnowLeopard'\n    alert(clone.groupName);                 // alerts 'Cat'\n\n    alert(My.Cat.totalCreated);             // alerts 3\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Class",
                    "src": {
                      "type": "3,1161,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1160,12",
                  "name": "3,1163,0",
                  "text": "3,1107,12,1691"
                }
              },
              {
                "$type": "method",
                "name": "sum",
                "since": "5.0.0",
                "text": "Sums property values from some or all of the items in this collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property to sum from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2721,24",
                      "text": "1,2721,33,48",
                      "type": "1,2721,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "begin",
                    "optional": true,
                    "text": "The index of the first item to include in the sum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2722,25",
                      "text": "1,2722,32,51",
                      "type": "1,2722,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "The index at which to stop summing `{@link #property!items items}`. The item at this\nindex will *not* be included in the sum.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,2723,25",
                      "text": "1,2723,30,61:1,2724,8,41",
                      "type": "1,2723,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of summing the specified property from the indicated\nitems.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2725,25,64:1,2726,8,7",
                      "type": "1,2725,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2718,16",
                  "since": "1,2727,15",
                  "text": "1,2719,8,72"
                }
              },
              {
                "$type": "method",
                "name": "sumByGroup",
                "since": "5.0.0",
                "text": "See {@link #method!sum #sum}. The result is partitioned by group.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the property to sum from each item.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2734,24",
                      "text": "1,2734,33,48",
                      "type": "1,2734,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The result of {@link #method!sum #sum}, partitioned by group. See {@link #method!aggregateByGroup #aggregateByGroup}.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2735,25,81",
                      "type": "1,2735,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2731,16",
                  "since": "1,2736,15",
                  "text": "1,2732,8,55"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n{@link #method!resumeEvent #resumeEvent} will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "2,1381,32",
                      "text": "2,1381,42,33",
                      "type": "2,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1383,0",
                  "text": "2,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see {@link #method!resumeEvents #resumeEvents})\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the {@link #method!resumeEvents #resumeEvents} call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1363,28",
                      "text": "2,1363,43,48:2,1364,11,81",
                      "type": "2,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "2,1366,0",
                  "text": "2,1361,11,64"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n`{@link Object}`'s `{@link #method!toLocaleString toLocaleString}` returns the result of calling `{@link #method!toString toString}`.\n\nThis function is provided to give objects a generic `{@link #method!toLocaleString toLocaleString}` method, even though not all\nmay use it. Currently, only `{@link Array}`, `{@link Number}`, and `{@link Date}` override `{@link #method!toLocaleString toLocaleString}`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "4,235,21,32",
                      "type": "4,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,226,12",
                  "text": "4,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from `{@link Object}`.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom `{@link Object}`:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "4,297,21,32",
                      "type": "4,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,239,12",
                  "text": "4,240,4,2445"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for {@link #method!removeListener #removeListener}.\n",
                "src": {
                  "inheritdoc": "2,1781,12",
                  "name": "2,1783,0",
                  "text": "2,1780,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "2,1218,44",
                      "text": "2,1218,54,55",
                      "type": "2,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,1219,37",
                      "text": "2,1219,40,23",
                      "type": "2,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1220,29",
                      "text": "2,1220,36,41",
                      "type": "2,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1221,29",
                      "text": "2,1221,38,22",
                      "type": "2,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1223,0",
                  "text": "2,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as {@link #method!removeListener #removeListener} with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "2,1204,44",
                      "text": "2,1204,54,55",
                      "type": "2,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,1205,37",
                      "text": "2,1205,40,23",
                      "type": "2,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1206,29",
                      "text": "2,1206,36,41",
                      "type": "2,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1207,29",
                      "text": "2,1207,38,22",
                      "type": "2,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1209,0",
                  "text": "2,1200,12,98"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unlink",
                "text": "Destroys a given set of `{@link #method!link #link}` objects. This is only needed if\nthe linked object is being destroyed before this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The names of the linked objects to destroy.\n",
                    "type": "String[]",
                    "src": {
                      "name": "3,1589,30",
                      "text": "3,1589,36,44",
                      "type": "3,1589,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,1590,31,5",
                      "type": "3,1590,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,1591,12",
                  "name": "3,1593,0",
                  "text": "3,1587,12,138"
                }
              },
              {
                "$type": "method",
                "name": "update",
                "since": "5.0.0",
                "text": "This method calls the supplied function `fn` between `{@link #method!beginUpdate beginUpdate}` and `{@link #method!endUpdate endUpdate}`\ncalls.\n\n     collection.update(function () {\n         // Perform multiple collection updates...\n\n         collection.add(item);\n         // ...\n\n         collection.insert(index, otherItem);\n         //...\n\n         collection.remove(someItem);\n     });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call that will modify this collection.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "collection",
                        "text": "This collection.\n",
                        "type": "Ext.util.Collection",
                        "src": {
                          "name": "1,2216,40",
                          "text": "1,2216,51,17",
                          "type": "1,2216,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,2215,26",
                      "text": "1,2215,29,55",
                      "type": "1,2215,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The `this` pointer to use when calling `fn`.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "1,2217,25",
                      "text": "1,2217,37,45",
                      "type": "1,2217,16",
                      "value": "1,2217,31"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the value returned from `fn` (typically `{@link undefined}`).\n",
                    "type": "Object",
                    "src": {
                      "text": "1,2218,25,62",
                      "type": "1,2218,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,2221,0",
                  "since": "1,2219,15",
                  "text": "1,2200,8,338"
                }
              },
              {
                "$type": "method",
                "name": "updateKey",
                "since": "5.0.0",
                "text": "Change the key for an existing item in the collection. If the old key does not\nexist this call does nothing. Even so, it is highly recommended to *avoid* calling\nthis method for an `item` that is not a member of this collection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item whose key has changed. The `item` should be a member\nof this collection.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,2245,24",
                      "text": "1,2245,29,62:1,2246,8,20",
                      "type": "1,2245,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oldKey",
                    "text": "The old key for the `item`.\n",
                    "type": "String",
                    "src": {
                      "name": "1,2247,24",
                      "text": "1,2247,31,28",
                      "type": "1,2247,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,2250,0",
                  "since": "1,2248,15",
                  "text": "1,2241,8,230"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the `{@link #method!valueOf valueOf}` method to convert an object to a primitive value. You rarely need to\ninvoke the `{@link #method!valueOf valueOf}` method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the `{@link #method!valueOf valueOf}` method is inherited by every object descended from `{@link Object}`. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, `{@link #method!valueOf valueOf}` returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use `{@link #method!valueOf valueOf}` within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default `{@link Object}` method.\n\nYou can create a function to be called in place of the default `{@link #method!valueOf valueOf}` method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a `{@link #method!valueOf valueOf}` method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's `{@link #method!valueOf valueOf}` method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the `{@link #method!toString toString}` method, which is different from\n`{@link String}` objects converting to string primitives using `{@link #method!valueOf valueOf}`. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,340,21,50",
                      "type": "4,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,301,12",
                  "text": "4,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$className",
                "src": {
                  "access": "3,1049,13",
                  "name": "3,1050,0"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configPrefixed",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` causes `config` values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of `false`\nstores `config` values as properties using their exact name (no prefix).\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1066,12",
                  "name": "3,1062,33",
                  "since": "3,1067,19",
                  "text": "3,1063,12,225",
                  "type": "3,1062,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$configStrict",
                "optional": true,
                "since": "5.0.0",
                "text": "The value `true` instructs the `{@link #method!initConfig initConfig}` method to only honor values for\nproperties declared in the `config` block of a class. When `false`, properties\nthat are not declared in a `config` block will be placed on the instance.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1076,12",
                  "name": "3,1072,33",
                  "since": "3,1077,19",
                  "text": "3,1073,12,229",
                  "type": "3,1072,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$endUpdatePriority",
                "text": "Priority that is used for endupdate listeners on the filters and sorters.\nset to a very high priority so that our processing of these events takes place prior\nto user code - data must already be filtered/sorted when the user's handler runs\n",
                "src": {
                  "access": "1,355,8",
                  "name": "1,360,0",
                  "text": "1,356,8,240"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "2,389,12",
                  "name": "2,392,0",
                  "text": "2,390,12,126"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their `{@link #property!prototype prototype}`:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "4,346,14",
                  "text": "4,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "destroyed",
                "text": "This property is set to `true` after the `{@link #method!destroy destroy}` method is called.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1102,12",
                  "name": "3,1100,32",
                  "text": "3,1101,12,69",
                  "type": "3,1100,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when {@link #method!suspendEvents #suspendEvents} is called, decremented when {@link #method!resumeEvents #resumeEvents} is called.\n",
                "src": {
                  "access": "2,284,11",
                  "name": "2,287,0",
                  "text": "2,285,11,131"
                }
              },
              {
                "$type": "property",
                "name": "filtered",
                "readonly": true,
                "text": "A read-only flag indicating if this object is filtered.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,348,28",
                  "readonly": "1,350,8",
                  "text": "1,349,8,56",
                  "type": "1,348,19"
                }
              },
              {
                "$type": "property",
                "name": "generation",
                "readonly": true,
                "since": "5.0.0",
                "text": "Mutation counter which is incremented when the collection changes.\n",
                "type": "Number",
                "src": {
                  "name": "1,295,27",
                  "readonly": "1,297,8",
                  "since": "1,298,15",
                  "text": "1,296,8,67",
                  "type": "1,295,19"
                }
              },
              {
                "$type": "property",
                "name": "grouped",
                "readonly": true,
                "text": "A read-only flag indicating if this object is grouped.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,331,28",
                  "readonly": "1,333,8",
                  "text": "1,332,8,55",
                  "type": "1,331,19"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via {@link #observe}) or\non the {@link Ext.app.EventBus}. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "2,290,30",
                  "readonly": "2,291,11",
                  "text": "2,292,11,790",
                  "type": "2,290,22"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "indexRebuilds",
                "readonly": true,
                "since": "5.0.0",
                "text": "The number of times the `{@link #property!indices indices}` have been rebuilt. This is for diagnostic use.\n",
                "type": "Number",
                "src": {
                  "access": "1,313,8",
                  "name": "1,311,27",
                  "readonly": "1,314,8",
                  "since": "1,315,15",
                  "text": "1,312,8,81",
                  "type": "1,311,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "indices",
                "since": "5.0.0",
                "text": "An object used as map to get the index of an item.\n",
                "type": "Object",
                "src": {
                  "access": "1,305,8",
                  "name": "1,303,27",
                  "since": "1,306,15",
                  "text": "1,304,8,51",
                  "type": "1,303,19"
                }
              },
              {
                "$type": "property",
                "name": "isCollection",
                "readonly": true,
                "text": "`true` in this class to identify an object as an instantiated Collection, or subclass\nthereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,70,28",
                  "readonly": "1,73,8",
                  "text": "1,71,8,95",
                  "type": "1,70,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isConfiguring",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` during the call to `{@link #method!initConfig initConfig}`.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1084,12",
                  "name": "3,1082,32",
                  "readonly": "3,1085,12",
                  "since": "3,1086,19",
                  "text": "3,1083,12,64",
                  "type": "3,1082,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isFirstInstance",
                "readonly": true,
                "since": "5.0.0",
                "text": "This property is set to `true` if this instance is the first of its class.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1093,12",
                  "name": "3,1091,32",
                  "readonly": "3,1094,12",
                  "since": "3,1095,19",
                  "text": "3,1092,12,75",
                  "type": "3,1091,23"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "isInstance",
                "readonly": true,
                "text": "This value is `true` and is used to identify plain objects from instances of\na defined class.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,1056,12",
                  "name": "3,1053,32",
                  "readonly": "3,1057,12",
                  "text": "3,1054,12,94",
                  "type": "3,1053,23"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,278,31",
                  "text": "2,279,11,95",
                  "type": "2,278,22"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "items",
                "since": "5.0.0",
                "text": "An array containing the items.\n",
                "type": "Object[]",
                "src": {
                  "access": "1,615,12",
                  "name": "1,613,33",
                  "since": "1,616,19",
                  "text": "1,614,12,31",
                  "type": "1,613,23"
                }
              },
              {
                "$type": "property",
                "name": "length",
                "readonly": true,
                "since": "5.0.0",
                "text": "The count of items in the collection.\n",
                "type": "Number",
                "src": {
                  "name": "1,629,31",
                  "readonly": "1,631,12",
                  "since": "1,632,19",
                  "text": "1,630,12,38",
                  "type": "1,629,23"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "map",
                "since": "5.0.0",
                "text": "An object used as a map to find items based on their key.\n",
                "type": "Object",
                "src": {
                  "access": "1,623,12",
                  "name": "1,621,31",
                  "since": "1,624,19",
                  "text": "1,622,12,58",
                  "type": "1,621,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "4,46,14",
                  "text": "4,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "self",
                "text": "\nGet the reference to the current class from which this object was instantiated. Unlike {@link Ext.Base#method!statics Ext.Base#statics},\n`this.self` is scope-dependent and it's meant to be used for dynamic inheritance. See {@link Ext.Base#method!statics Ext.Base#statics}\nfor a detailed comparison\n\n    Ext.define('My.Cat', {\n        statics: {\n            speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n        },\n\n        constructor: function() {\n            alert(this.self.speciesName); // dependent on 'this'\n        },\n\n        clone: function() {\n            return new this.self();\n        }\n    });\n\n\n    Ext.define('My.SnowLeopard', {\n        extend: 'My.Cat',\n        statics: {\n            speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n        }\n    });\n\n    var cat = new My.Cat();                     // alerts 'Cat'\n    var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\n    var clone = snowLeopard.clone();\n    alert(Ext.getClassName(clone));             // alerts 'My.SnowLeopard'\n",
                "type": "Ext.Class",
                "src": {
                  "access": "3,1413,12",
                  "name": "3,1379,34",
                  "text": "3,1380,12,1011",
                  "type": "3,1379,23"
                }
              },
              {
                "$type": "property",
                "name": "sorted",
                "readonly": true,
                "text": "A read-only flag indicating if this object is sorted. This flag may not be correct\nduring an update of the sorter collection but will be correct before `{@link #method!onSortChange onSortChange}`\nis called. This flag is `true` if `{@link #property!grouped grouped}` is `true` because the collection is at\nleast sorted by the `{@link #cfg!grouper grouper}`.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,338,28",
                  "readonly": "1,343,8",
                  "text": "1,339,8,281",
                  "type": "1,338,19"
                }
              },
              {
                "$type": "property",
                "name": "updating",
                "readonly": true,
                "since": "5.0.0",
                "text": "A counter that is increased by `{@link #method!beginUpdate beginUpdate}` and decreased by `{@link #method!endUpdate endUpdate}`. When\nthis transitions from 0 to 1 the `{@link #event!beginupdate #event-beginupdate}` event is\nfired. When it transitions back from 1 to 0 the `{@link #event!endupdate #event-endupdate}`\nevent is fired.\n",
                "type": "Number",
                "src": {
                  "name": "1,320,27",
                  "readonly": "1,325,8",
                  "since": "1,326,15",
                  "text": "1,321,8,264",
                  "type": "1,320,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addConfig",
                "static": true,
                "text": "Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "type": "Object",
                    "src": {
                      "name": "3,940,28",
                      "type": "3,940,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "optional": true,
                    "text": "The mixin class if the configs are from a mixin.\n",
                    "type": "Ext.Class",
                    "src": {
                      "name": "3,941,32",
                      "text": "3,941,44,49",
                      "type": "3,941,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,942,12",
                  "inheritable": "3,944,12",
                  "name": "3,946,0",
                  "static": "3,943,12",
                  "text": "3,936,12,197"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addInheritableStatics",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "3,464,28",
                      "type": "3,464,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,461,12",
                  "inheritable": "3,463,12",
                  "name": "3,466,0",
                  "static": "3,462,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addMember",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "3,662,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "member",
                    "src": {
                      "name": "3,663,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,659,12",
                  "inheritable": "3,661,12",
                  "name": "3,665,0",
                  "static": "3,660,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addMembers",
                "static": true,
                "text": "Add methods / properties to the prototype of this class.\n\n    Ext.define('My.awesome.Cat', {\n        constructor: function() {\n            ...\n        }\n    });\n\n     My.awesome.Cat.addMembers({\n         meow: function() {\n            alert('Meowww...');\n         }\n     });\n\n     var kitty = new My.awesome.Cat();\n     kitty.meow();\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The members to add to this class.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,522,28",
                      "text": "3,522,36,34",
                      "type": "3,522,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isStatic",
                    "optional": true,
                    "text": "Pass `true` if the members are static.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,523,30",
                      "text": "3,523,46,39",
                      "type": "3,523,20",
                      "value": "3,523,39"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "privacy",
                    "optional": true,
                    "text": "Pass `true` if the members are private. This\nonly has meaning in debug mode and only for methods.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,524,30",
                      "text": "3,524,45,45:3,525,12,53",
                      "type": "3,524,20",
                      "value": "3,524,38"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,527,12",
                  "name": "3,529,0",
                  "static": "3,526,12",
                  "text": "3,505,12,335"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "addStatics",
                "static": true,
                "text": "Add / override static properties of this class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.addStatics({\n        someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n        method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n        method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "type": "Object",
                    "src": {
                      "name": "3,450,28",
                      "type": "3,450,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,451,31,5",
                      "type": "3,451,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,453,12",
                  "name": "3,455,0",
                  "static": "3,452,12",
                  "text": "3,438,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "borrow",
                "static": true,
                "text": "Borrow another class' members to the prototype of this class.\n\n    Ext.define('Bank', {\n        money: '$$$',\n        printMoney: function() {\n            alert('$$$$$$$');\n        }\n    });\n\n    Ext.define('Thief', {\n        ...\n    });\n\n    Thief.borrow(Bank, ['money', 'printMoney']);\n\n    var steve = new Thief();\n\n    alert(steve.money); // alerts '$$$'\n    steve.printMoney(); // alerts '$$$$$$$'\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fromClass",
                    "text": "The class to borrow members from\n",
                    "type": "Ext.Base",
                    "src": {
                      "name": "3,693,30",
                      "text": "3,693,40,33",
                      "type": "3,693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The names of the members to borrow\n",
                    "type": "Array/String",
                    "src": {
                      "name": "3,694,34",
                      "text": "3,694,42,35",
                      "type": "3,694,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,695,31,5",
                      "type": "3,695,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,698,12",
                  "inheritable": "3,697,12",
                  "name": "3,700,0",
                  "static": "3,696,12",
                  "text": "3,673,12,404"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callParent",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "3,814,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,810,12",
                  "inheritable": "3,812,12",
                  "name": "3,814,0",
                  "static": "3,811,12"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "inheritable": true,
                "name": "callSuper",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "3,828,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,824,12",
                  "inheritable": "3,826,12",
                  "name": "3,828,0",
                  "static": "3,825,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create a new instance of this Class.\n\n    Ext.define('My.cool.Class', {\n        ...\n    });\n\n    My.cool.Class.create({\n        someConfig: true\n    });\n\nAll parameters are passed to the constructor of the class.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "the created instance.\n",
                    "type": "Object",
                    "src": {
                      "text": "3,107,29,22",
                      "type": "3,107,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,109,12",
                  "name": "3,111,0",
                  "static": "3,108,12",
                  "text": "3,95,12,214"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "createAlias",
                "static": true,
                "text": "Create aliases for existing prototype methods. Example:\n\n    Ext.define('My.cool.Class', {\n        method1: function() { ... },\n        method2: function() { ... }\n    });\n\n    var test = new My.cool.Class();\n\n    My.cool.Class.createAlias({\n        method3: 'method1',\n        method4: 'method2'\n    });\n\n    test.method3(); // test.method1()\n\n    My.cool.Class.createAlias('method5', 'method3');\n\n    test.method5(); // test.method3() -> test.method1()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "alias",
                    "text": "The new method name, or an object to set multiple aliases. See\n{@link Ext.Function#method!flexSetter Ext.Function#flexSetter}\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,1018,35",
                      "text": "3,1018,41,63:3,1019,12,43",
                      "type": "3,1018,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The original method name\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,1020,35",
                      "text": "3,1020,42,25",
                      "type": "3,1020,20"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,1022,12",
                  "name": "3,1025,0",
                  "static": "3,1021,12",
                  "text": "3,998,12,456"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "extend",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "3,350,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,347,12",
                  "inheritable": "3,349,12",
                  "name": "3,352,0",
                  "static": "3,348,12"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "getConfigurator",
                "static": true,
                "text": "Returns the `{@link Ext.Configurator}` for this class.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.Configurator",
                    "src": {
                      "type": "3,967,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,968,12",
                  "inheritable": "3,970,12",
                  "name": "3,972,0",
                  "static": "3,969,12",
                  "text": "3,965,12,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getName",
                "static": true,
                "text": "Get the current class' name in string format.\n\n    Ext.define('My.cool.Class', {\n        constructor: function() {\n            alert(this.self.getName()); // alerts 'My.cool.Class'\n        }\n    });\n\n    My.cool.Class.getName(); // 'My.cool.Class'\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "className\n",
                    "type": "String",
                    "src": {
                      "text": "3,989,29,10",
                      "type": "3,989,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,991,12",
                  "name": "3,993,0",
                  "static": "3,990,12",
                  "text": "3,979,12,249"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "mixin",
                "static": true,
                "text": "Used internally by the mixins pre-processor\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "src": {
                      "name": "3,844,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mixinClass",
                    "src": {
                      "name": "3,844,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,840,12",
                  "inheritable": "3,842,12",
                  "name": "3,844,0",
                  "static": "3,841,12",
                  "text": "3,839,12,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "onExtended",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "src": {
                      "name": "3,428,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "src": {
                      "name": "3,428,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,424,12",
                  "inheritable": "3,426,12",
                  "name": "3,428,0",
                  "static": "3,425,12"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "override",
                "static": true,
                "text": "Override members of this class. Overridden methods can be invoked via\n{@link Ext.Base#callParent}.\n\n    Ext.define('My.Cat', {\n        constructor: function() {\n            alert(\"I'm a cat!\");\n        }\n    });\n\n    My.Cat.override({\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\n    var kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                              // alerts \"I'm a cat!\"\n                              // alerts \"Meeeeoooowwww\"\n\nDirect use of this method should be rare. Use {@link Ext#method!define Ext#define}\ninstead:\n\n    Ext.define('My.CatOverride', {\n        override: 'My.Cat',\n        constructor: function() {\n            alert(\"I'm going to be a cat!\");\n\n            this.callParent(arguments);\n\n            alert(\"Meeeeoooowwww\");\n        }\n    });\n\nThe above accomplishes the same result but can be managed by the {@link Ext.Loader}\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "members",
                    "text": "The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,762,28",
                      "text": "3,762,36,52:3,763,12,66",
                      "type": "3,762,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this class\n",
                    "type": "Ext.Base",
                    "src": {
                      "text": "3,764,31,11",
                      "type": "3,764,21"
                    }
                  }
                ],
                "src": {
                  "inheritable": "3,766,12",
                  "name": "3,768,0",
                  "static": "3,765,12",
                  "text": "3,720,12,1180"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "triggerExtended",
                "static": true,
                "src": {
                  "access": "3,402,12",
                  "inheritable": "3,404,12",
                  "name": "3,406,0",
                  "static": "3,403,12"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "$onExtended",
                "static": true,
                "src": {
                  "access": "3,395,12",
                  "inheritable": "3,397,12",
                  "name": "3,399,0",
                  "static": "3,396,12"
                }
              }
            ]
          }
        ],
        "src": {
          "extends": "0,6,0",
          "name": "0,2,11",
          "text": "0,3,4,82"
        }
      }
    ]
  },
  "version": 1
}