{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/LocalStorage.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.util.LocalStorage",
        "since": "4.2.2",
        "text": "This class provides a common API to LocalStorage with backwards compatibility for IE.\n\nThe primary aspects of this API match the HTML5 standard API except that this class\nprovides a scoping mechanism to isolate property values by instance. This scope is\ndetermined from the <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a> property. Further, this class does not expose the number of\nkeys in the store as a `length` property as this cannot be maintained reliably without\nundue cost. Instead there is a <a href='#!/api/Ext.util.LocalStorage-method-getKeys'>getKeys</a> method that returns the cached array of keys\nwhich is lazily populated on first call.\n\nFor example:\n\n     var store = new Ext.util.LocalStorage({\n             id: 'foo'\n         });\n\n     store.setItem('bar', 'stuff');\n\n     // Equivalent to:\n     window.localStorage.setItem('foo-bar', 'stuff');\n\nIn all cases, the <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a> property is only used by the underlying storage and should not\nbe needed in item access calls or appear when enumerating keys.\n\nTo continue with the previous example:\n\n     var keys = store.getKeys();\n     console.log(keys.length);   // logs 1\n     console.log(store.key(0));  // logs \"bar\"\n\n## Sharing Instances\n\nThe management of the underlying storage can be broken if multiple instances of this\nclass are created with the same <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a> simultaneously. To avoid creating multiple instances\nwith the same <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a>, use the <a href='#!/api/Ext.util.LocalStorage-static-method-get'>get</a> method and it will lazily create and share a single\ninstance. When you are done with the shared instance, call <a href='#!/api/Ext.util.LocalStorage-method-release'>release</a>.\n\n     var storage = Ext.util.LocalStorage.get('id');\n\n     ...\n\n     storage.release(); // do not call <a href='#!/api/Ext.util.LocalStorage-method-destroy'>destroy</a> as others may be using this object\n\n**IMPORTANT:** Do not mix direction instantiation and <a href='#!/api/Ext.util.LocalStorage-static-method-get'>get</a> with the same <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a>.\n\n## Legacy IE\n\nOlder IE browsers (specifically IE7 and below) do not support `localStorage` so this\nclass provides equivalent support using the IE proprietary persistence mechanism: the\n[`userData` behavior](http://msdn.microsoft.com/en-us/library/ms531424(VS.85).aspx). In\nthis mode, the <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a> serves as name passed to the `load` and `save` methods and as the\nsuffix on the DOM element added to the `head`.\n\nIn this mode, writes to the underlying storage are buffered and delayed for performance\nreasons. This can be managed using the <a href='#!/api/Ext.util.LocalStorage-cfg-flushDelay'>flushDelay</a> config or by directly calling the\n`save` method.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "flushDelay",
                "optional": true,
                "text": "The number of milliseconds to delay writing changes to the underlying store.\nThis applies only to legacy IE mode and helps batch multiple writes into one\nflush to storage.\n",
                "type": "Number",
                "value": "1",
                "src": {
                  "name": "0,433,27",
                  "text": "0,430,12,172",
                  "type": "0,433,18",
                  "value": "0,433,38"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "text": "The unique identifier for this store. This config is required to scope this storage\ndistinctly from others. Ultimately, this is used to set a prefix on all keys.\n",
                "type": "String",
                "src": {
                  "name": "0,64,22",
                  "text": "0,62,8,162",
                  "type": "0,64,14"
                }
              },
              {
                "$type": "property",
                "name": "lazyKeys",
                "optional": true,
                "text": "Determines if the keys collection is continuously maintained by this object. By\ndefault the keys array is lazily fetched from the underlying store and when keys\nare removed, the array is discarded. This heuristic tends to be safer than doing\nthe linear removal and array rippling to remove keys from the array on each call\nto <a href='#!/api/Ext.util.LocalStorage-method-removeItem'>removeItem</a>. If the cost of scanning `localStorage` for keys is high enough\nand if the keys are frequently needed, then this flag can be set to `false` to\ninstruct this class to maintain the keys array once it has been determined.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,83,24",
                  "text": "0,76,8,558",
                  "type": "0,83,14",
                  "value": "0,83,33"
                }
              },
              {
                "$type": "property",
                "name": "prefix",
                "optional": true,
                "text": "The prefix to apply to all `localStorage` keys manages by this instance. This does\nnot apply to the legacy IE mechanism but only to the HTML5 `localStorage` keys. If\nnot provided, the <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a> property initializes this value with `\"id-\"`.\n",
                "type": "String",
                "src": {
                  "name": "0,91,23",
                  "text": "0,88,8,235",
                  "type": "0,91,14"
                }
              },
              {
                "$type": "property",
                "name": "session",
                "optional": true,
                "text": "Specify this as `true` to use `sessionStorage` instead of the default `localStoreage`.\nThis option is not supported in legacy IE browsers (IE 6 and 7) and is ignored.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,98,24",
                  "text": "0,96,8,167",
                  "type": "0,98,14",
                  "value": "0,98,32"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "clear",
                "text": "Removes all of the keys of this storage.\n**NOTE:** This method conforms to the standard HTML5 Storage interface.\n",
                "src": {
                  "name": "0,309,0",
                  "text": "0,306,8,113"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "Destroys this instance and for legacy IE, ensures data is flushed to persistent\nstorage. This method should not be called directly on instances returned by the\n<a href='#!/api/Ext.util.LocalStorage-static-method-get'>get</a> method. Call <a href='#!/api/Ext.util.LocalStorage-method-release'>release</a> instead for such instances.\n\n*NOTE:* For non-legacy IE browsers, there is no harm in failing to call this\nmethod. In legacy IE, however, failing to call this method can result in memory\nleaks.\n",
                "src": {
                  "name": "0,243,0",
                  "text": "0,235,8,382"
                }
              },
              {
                "$type": "method",
                "name": "getItem",
                "text": "Returns the value associated with the given <a href='#!/api/Ext.util.LocalStorage-method-key'>key</a>.\n**NOTE:** This method conforms to the standard HTML5 Storage interface.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key.\n",
                    "type": "String",
                    "src": {
                      "name": "0,339,24",
                      "text": "0,339,28,9",
                      "type": "0,339,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value associated with the given <a href='#!/api/Ext.util.LocalStorage-method-key'>key</a>.\n",
                    "type": "String",
                    "src": {
                      "text": "0,340,25,43",
                      "type": "0,340,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,342,0",
                  "text": "0,337,8,123"
                }
              },
              {
                "$type": "method",
                "name": "getKeys",
                "text": "Returns the keys for this storage.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The keys for this storage. This array should be considered as\nreadonly.\n",
                    "type": "String[]",
                    "src": {
                      "text": "0,259,27,62:0,260,8,10",
                      "type": "0,259,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,262,0",
                  "text": "0,258,8,35"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.util.LocalStorage-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "init",
                "text": "Initializes this instance.\n",
                "src": {
                  "access": "0,222,8",
                  "name": "0,224,0",
                  "text": "0,221,8,27"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.util.LocalStorage-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "key",
                "text": "Returns the specified key given its `index`. These keys have the scoping prefix\nremoved so they match what was passed to <a href='#!/api/Ext.util.LocalStorage-method-setItem'>setItem</a>.\n**NOTE:** This method conforms to the standard HTML5 Storage interface.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the desired key.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,327,24",
                      "text": "0,327,30,30",
                      "type": "0,327,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The key.\n",
                    "type": "String",
                    "src": {
                      "text": "0,328,25,9",
                      "type": "0,328,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,330,0",
                  "text": "0,324,8,204"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.util.LocalStorage-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.util.LocalStorage-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "release",
                "text": "Call this method when finished with an instance returned by <a href='#!/api/Ext.util.LocalStorage-static-method-get'>get</a> instead of calling\n<a href='#!/api/Ext.util.LocalStorage-method-destroy'>destroy</a>. When the last shared use of this instance calls <a href='#!/api/Ext.util.LocalStorage-method-release'>release</a>, the <a href='#!/api/Ext.util.LocalStorage-method-destroy'>destroy</a>\nmethod is called automatically.\n\n*NOTE:* Failing to call this method will result in memory leaks.\n",
                "src": {
                  "name": "0,293,0",
                  "text": "0,287,8,267"
                }
              },
              {
                "$type": "method",
                "name": "removeItem",
                "text": "Removes the value associated with the given <a href='#!/api/Ext.util.LocalStorage-method-key'>key</a>.\n**NOTE:** This method conforms to the standard HTML5 Storage interface.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key.\n",
                    "type": "String",
                    "src": {
                      "name": "0,351,24",
                      "text": "0,351,28,9",
                      "type": "0,351,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,353,0",
                  "text": "0,349,8,123"
                }
              },
              {
                "$type": "method",
                "name": "save",
                "text": "This method ensures the content of the store is saved to the underlying storage.\nThis applies only to legacy IE. This is not normally called by user code but can\nbe called to ensure storage is saved.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "delay",
                    "optional": true,
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,493,29",
                      "type": "0,493,20",
                      "value": "0,493,35"
                    }
                  }
                ],
                "src": {
                  "name": "0,495,0",
                  "text": "0,490,12,200"
                }
              },
              {
                "$type": "method",
                "name": "setItem",
                "text": "Sets the value associated with the given <a href='#!/api/Ext.util.LocalStorage-method-key'>key</a>.\n**NOTE:** This method conforms to the standard HTML5 Storage interface.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "The key.\n",
                    "type": "String",
                    "src": {
                      "name": "0,374,24",
                      "text": "0,374,28,9",
                      "type": "0,374,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The new associated value for <a href='#!/api/Ext.util.LocalStorage-method-key'>key</a>.\n",
                    "type": "String",
                    "src": {
                      "name": "0,375,24",
                      "text": "0,375,30,36",
                      "type": "0,375,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,377,0",
                  "text": "0,372,8,120"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.util.LocalStorage-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.util.LocalStorage-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.util.LocalStorage-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.util.LocalStorage-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.util.LocalStorage-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.util.LocalStorage-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.util.LocalStorage-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.util.LocalStorage-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.util.LocalStorage-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.util.LocalStorage-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.util.LocalStorage-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.util.LocalStorage-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.util.LocalStorage-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.util.LocalStorage-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "_keys",
                "readonly": true,
                "text": "The array of all key names. This will be <a href='#!/api/null'>null</a> if the keys need to be redetermined\nby the <a href='#!/api/Ext.util.LocalStorage-method-getKeys'>getKeys</a> method.\n",
                "type": "String[]",
                "src": {
                  "access": "0,106,8",
                  "name": "0,105,29",
                  "readonly": "0,107,8",
                  "text": "0,103,8,109",
                  "type": "0,105,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "_store",
                "readonly": true,
                "text": "The Storage instance used to store items. This is based on the <a href='#!/api/Ext.util.LocalStorage-cfg-session'>session</a> config.\n",
                "src": {
                  "access": "0,114,8",
                  "name": "0,113,18",
                  "readonly": "0,115,8",
                  "text": "0,112,8,81"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "_users",
                "readonly": true,
                "text": "The number of users that have requested this instance using the <a href='#!/api/Ext.util.LocalStorage-static-method-get'>get</a> method and\nhave not yet called <a href='#!/api/Ext.util.LocalStorage-method-release'>release</a>.\n",
                "type": "Number",
                "src": {
                  "access": "0,123,8",
                  "name": "0,122,27",
                  "readonly": "0,124,8",
                  "text": "0,120,8,112",
                  "type": "0,122,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.util.LocalStorage-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "data",
                "readonly": true,
                "text": "The parsed data object. This is JSON encoded and saved in storage as the `xdata`\nattribute.\n",
                "type": "Object",
                "src": {
                  "access": "0,416,12",
                  "name": "0,415,31",
                  "readonly": "0,417,12",
                  "text": "0,413,12,92",
                  "type": "0,415,23"
                }
              },
              {
                "$type": "property",
                "name": "destroyed",
                "readonly": true,
                "text": "This property is set to `true` when the instance's <a href='#!/api/Ext.util.LocalStorage-method-destroy'>destroy</a> method is called.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,70,28",
                  "readonly": "0,71,8",
                  "text": "0,69,8,79",
                  "type": "0,70,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "el",
                "readonly": true,
                "text": "The IE `userData` enabled element. This property is used to support legacy IE\nmode.\n",
                "type": "HTMLElement",
                "src": {
                  "access": "0,425,12",
                  "name": "0,424,36",
                  "readonly": "0,426,12",
                  "text": "0,422,12,84",
                  "type": "0,424,23"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "name": "get",
                "static": true,
                "text": "Returns a shared instance of the desired local store given its <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a>. When you\nare finished with the returned object call the <a href='#!/api/Ext.util.LocalStorage-method-release'>release</a> method:\n\n     var store = Ext.util.LocalStorage.get('foo');\n\n     // .. use store\n\n     store.release();\n\n**NOTE:** Do not mix this call with direct instantiation of the same <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a> of the desired instance or a config object\nwith an <a href='#!/api/Ext.util.LocalStorage-cfg-id'>id</a> property at a minimum.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "0,142,35",
                      "text": "0,142,38,52:0,143,12,36",
                      "type": "0,142,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The desired instance, created if needed.\n",
                    "type": "Ext.util.LocalStorage",
                    "src": {
                      "text": "0,144,44,41",
                      "type": "0,144,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,146,0",
                  "static": "0,127,-1",
                  "text": "0,132,12,316"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "save",
                "static": true,
                "src": {
                  "access": "0,301,8",
                  "name": "0,303,0",
                  "static": "0,300,8"
                }
              },
              {
                "$type": "property",
                "name": "supported",
                "readonly": true,
                "static": true,
                "text": "This will be `true` if some form of local storage is supported or `false` if not.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,178,32",
                  "readonly": "0,179,12",
                  "static": "0,127,-1",
                  "text": "0,177,12,82",
                  "type": "0,178,23"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,60,0",
          "since": "0,58,11",
          "text": "0,2,4,2260"
        }
      }
    ]
  },
  "version": 1
}