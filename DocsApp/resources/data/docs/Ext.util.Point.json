{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/Point.js",
    "../../../ext/packages/core/src/util/Region.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Ext.util.Region,Object",
        "extends": "Ext.util.Region",
        "name": "Ext.util.Point",
        "text": "Represents a 2D point with x and y properties, useful for comparison and instantiation\nfrom an event:\n\n    var point = Ext.util.Point.fromEvent(e);\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Region#translateBy",
                "text": "Alias for <a href='#!/api/Ext.util.Point-method-translateBy'>translateBy</a>\n",
                "src": {
                  "inheritdoc": "0,206,8",
                  "text": "0,205,8,31"
                }
              },
              {
                "$type": "method",
                "name": "adjust",
                "text": "Modifies the current region to be adjusted by offsets.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "top",
                    "text": "Top offset\n",
                    "type": "Number",
                    "src": {
                      "name": "1,117,24",
                      "text": "1,117,28,11",
                      "type": "1,117,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "right",
                    "text": "Right offset\n",
                    "type": "Number",
                    "src": {
                      "name": "1,118,24",
                      "text": "1,118,30,13",
                      "type": "1,118,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bottom",
                    "text": "Bottom offset\n",
                    "type": "Number",
                    "src": {
                      "name": "1,119,24",
                      "text": "1,119,31,14",
                      "type": "1,119,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "left",
                    "text": "Left offset\n",
                    "type": "Number",
                    "src": {
                      "name": "1,120,24",
                      "text": "1,120,29,12",
                      "type": "1,120,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "1,121,34,5",
                      "type": "1,121,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,123,0",
                  "text": "1,116,8,55"
                }
              },
              {
                "$type": "method",
                "name": "clone",
                "text": "Copy a new instance of this point.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The new point.\n",
                    "type": "Ext.util.Point",
                    "src": {
                      "text": "0,76,33,15",
                      "type": "0,76,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,78,0",
                  "text": "0,75,8,35"
                }
              },
              {
                "$type": "method",
                "name": "constrainTo",
                "text": "Modifies the current region to be constrained to the targetRegion.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetRegion",
                    "type": "Ext.util.Region",
                    "src": {
                      "name": "1,102,33",
                      "type": "1,102,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "1,103,34,5",
                      "type": "1,103,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,105,0",
                  "text": "1,101,8,67"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates point on 2D plane.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "optional": true,
                    "text": "X coordinate.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,59,25",
                      "text": "0,59,30,14",
                      "type": "0,59,16",
                      "value": "0,59,27"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "Y coordinate.\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,60,25",
                      "text": "0,60,30,14",
                      "type": "0,60,16",
                      "value": "0,60,27"
                    }
                  }
                ],
                "src": {
                  "name": "0,62,0",
                  "text": "0,58,8,27"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "text": "Checks if this region completely contains the region that is passed in.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "region",
                    "type": "Ext.util.Region",
                    "src": {
                      "name": "1,53,33",
                      "type": "1,53,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,54,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,56,0",
                  "text": "1,52,8,72"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Please use <a href='#!/api/Ext.util.Point-clone'>clone</a> instead.\n",
                "deprecatedVersion": "2.0.0",
                "name": "copy",
                "text": "Clones this Point.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The new point.\n",
                    "type": "Ext.util.Point",
                    "src": {
                      "text": "0,85,33,15",
                      "type": "0,85,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "0,84,8",
                  "deprecatedVersion": "0,84,8",
                  "name": "0,87,0",
                  "text": "0,83,8,19"
                }
              },
              {
                "$type": "method",
                "name": "copyFrom",
                "text": "Copy the `x` and `y` values of another point / object to this point itself.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "point",
                    "type": "Ext.util.Point/Object",
                    "src": {
                      "name": "0,93,39",
                      "type": "0,93,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This point.\n",
                    "type": "Ext.util.Point",
                    "src": {
                      "text": "0,94,33,12",
                      "type": "0,94,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,96,0",
                  "text": "0,92,8,76"
                }
              },
              {
                "$type": "method",
                "name": "equals",
                "text": "Compare this point and another point.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "point",
                    "text": "The point to compare with, either an instance\nof <a href='#!/api/Ext.util.Point'>Ext.util.Point</a> or an object with `x` and `y` properties.\n",
                    "type": "Ext.util.Point/Object",
                    "src": {
                      "name": "0,114,39",
                      "text": "0,114,45,46:0,115,8,68",
                      "type": "0,114,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns whether they are equivalent.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,116,26,37",
                      "type": "0,116,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,118,0",
                  "text": "0,113,8,38"
                }
              },
              {
                "$type": "method",
                "name": "getOutOfBoundOffset",
                "text": "Get the offset amount of a point outside the region\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "axis",
                    "optional": true,
                    "type": "String",
                    "src": {
                      "name": "1,134,25",
                      "type": "1,134,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "p",
                    "optional": true,
                    "text": "the point\n",
                    "type": "Ext.util.Point",
                    "src": {
                      "name": "1,135,33",
                      "text": "1,135,36,10",
                      "type": "1,135,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Offset",
                    "src": {
                      "type": "1,136,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,138,0",
                  "text": "1,133,8,52"
                }
              },
              {
                "$type": "method",
                "name": "getOutOfBoundOffsetX",
                "text": "Get the offset amount on the x-axis\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "the offset\n",
                    "type": "Number",
                    "src": {
                      "name": "1,157,24",
                      "text": "1,157,26,11",
                      "type": "1,157,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "1,158,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,160,0",
                  "text": "1,156,8,36"
                }
              },
              {
                "$type": "method",
                "name": "getOutOfBoundOffsetY",
                "text": "Get the offset amount on the y-axis\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "the offset\n",
                    "type": "Number",
                    "src": {
                      "name": "1,172,24",
                      "text": "1,172,26,11",
                      "type": "1,172,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "1,173,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,175,0",
                  "text": "1,171,8,36"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getSize",
                "text": "Get the width / height of this region\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "an object with width and height properties\n",
                    "type": "Object",
                    "src": {
                      "text": "1,303,25,43",
                      "type": "1,303,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,304,8",
                  "name": "1,306,0",
                  "text": "1,302,8,38"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.util.Point-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "intersect",
                "text": "Checks if this region intersects the region passed in.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "region",
                    "type": "Ext.util.Region",
                    "src": {
                      "name": "1,67,33",
                      "type": "1,67,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns the intersected region or false if there is no intersection.\n",
                    "type": "Ext.util.Region/Boolean",
                    "src": {
                      "text": "1,68,42,69",
                      "type": "1,68,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,70,0",
                  "text": "1,66,8,55"
                }
              },
              {
                "$type": "method",
                "name": "isCloseTo",
                "text": "Returns `true` if the passed point is within a certain distance of this point.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "point",
                    "text": "The point to check with, either an instance\nof <a href='#!/api/Ext.util.Point'>Ext.util.Point</a> or an object with `x` and `y` properties.\n",
                    "type": "Ext.util.Point/Object",
                    "src": {
                      "name": "0,124,39",
                      "text": "0,124,45,44:0,125,8,68",
                      "type": "0,124,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "threshold",
                    "text": "Can be either an object with `x` and `y` properties or a number.\n",
                    "type": "Object/Number",
                    "src": {
                      "name": "0,126,31",
                      "text": "0,126,41,65",
                      "type": "0,126,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,127,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,129,0",
                  "text": "0,123,8,79"
                }
              },
              {
                "$type": "method",
                "name": "isContainedBy",
                "text": "Determins whether this Point contained by the passed Region, Component or element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "region",
                    "text": "The rectangle to check that this Point is within.\n",
                    "type": "Ext.util.Region/Ext.Component/Ext.dom.Element/HTMLElement",
                    "src": {
                      "name": "0,154,75",
                      "text": "0,155,8,50",
                      "type": "0,154,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,156,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,158,0",
                  "text": "0,153,8,83"
                }
              },
              {
                "$type": "method",
                "name": "isOutOfBound",
                "text": "Check whether the point / offset is out of bound\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "axis",
                    "optional": true,
                    "type": "String",
                    "src": {
                      "name": "1,187,25",
                      "type": "1,187,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "p",
                    "optional": true,
                    "text": "the point / offset\n",
                    "type": "Ext.util.Point/Number",
                    "src": {
                      "name": "1,188,40",
                      "text": "1,188,43,19",
                      "type": "1,188,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,189,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,191,0",
                  "text": "1,186,8,49"
                }
              },
              {
                "$type": "method",
                "name": "isOutOfBoundX",
                "text": "Check whether the offset is out of bound in the x-axis\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "the offset\n",
                    "type": "Number",
                    "src": {
                      "name": "1,206,24",
                      "text": "1,206,26,11",
                      "type": "1,206,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,207,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,209,0",
                  "text": "1,205,8,55"
                }
              },
              {
                "$type": "method",
                "name": "isOutOfBoundY",
                "text": "Check whether the offset is out of bound in the y-axis\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "text": "the offset\n",
                    "type": "Number",
                    "src": {
                      "name": "1,215,24",
                      "text": "1,215,26,11",
                      "type": "1,215,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,216,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,218,0",
                  "text": "1,214,8,55"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.util.Point-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Please use <a href='#!/api/Ext.util.Point-isCloseTo'>isCloseTo</a> instead.\n",
                "deprecatedVersion": "2.0.0",
                "name": "isWithin",
                "text": "Returns `true` if this point is close to another one.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,146,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "0,145,8",
                  "deprecatedVersion": "0,145,8",
                  "name": "0,148,0",
                  "text": "0,144,8,54"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.util.Point-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.util.Point-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "restrict",
                "text": "Restrict a point within the region by a certain factor.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "axis",
                    "optional": true,
                    "type": "String",
                    "src": {
                      "name": "1,224,25",
                      "type": "1,224,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "p",
                    "optional": true,
                    "type": "Ext.util.Point/Ext.util.Offset/Object",
                    "src": {
                      "name": "1,225,56",
                      "type": "1,225,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "factor",
                    "optional": true,
                    "type": "Number",
                    "src": {
                      "name": "1,226,25",
                      "type": "1,226,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Point/Ext.util.Offset/Object/Number",
                    "src": {
                      "type": "1,227,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,228,8",
                  "name": "1,230,0",
                  "text": "1,223,8,56"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "restrictX",
                "text": "Restrict an offset within the region by a certain factor, on the x-axis\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "type": "Number",
                    "src": {
                      "name": "1,261,24",
                      "type": "1,261,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "factor",
                    "optional": true,
                    "text": "The factor.\n",
                    "type": "Number",
                    "value": "1",
                    "src": {
                      "name": "1,262,25",
                      "text": "1,262,35,12",
                      "type": "1,262,16",
                      "value": "1,262,32"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "1,263,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,264,8",
                  "name": "1,266,0",
                  "text": "1,260,8,72"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "restrictY",
                "text": "Restrict an offset within the region by a certain factor, on the y-axis\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p",
                    "type": "Number",
                    "src": {
                      "name": "1,282,24",
                      "type": "1,282,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "factor",
                    "optional": true,
                    "text": "The factor, defaults to 1\n",
                    "type": "Number",
                    "src": {
                      "name": "1,283,25",
                      "text": "1,283,33,26",
                      "type": "1,283,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "1,284,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,285,8",
                  "name": "1,287,0",
                  "text": "1,281,8,72"
                }
              },
              {
                "$type": "method",
                "name": "round",
                "text": "Round all the properties of this region\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this This Region\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "1,367,34,17",
                      "type": "1,367,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,369,0",
                  "text": "1,366,8,40"
                }
              },
              {
                "$type": "method",
                "name": "roundedEquals",
                "text": "Compare this point with another point when the `x` and `y` values of both points are rounded. For example:\n[100.3,199.8] will equals to [100, 200].\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "point",
                    "text": "The point to compare with, either an instance\nof Ext.util.Point or an object with `x` and `y` properties.\n",
                    "type": "Ext.util.Point/Object",
                    "src": {
                      "name": "0,168,39",
                      "text": "0,168,45,46:0,169,8,60",
                      "type": "0,168,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,170,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,172,0",
                  "text": "0,166,8,148"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.util.Point-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.util.Point-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.util.Point-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.util.Point-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a human-eye-friendly string that represents this point,\nuseful for debugging.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "For example `Point[12,8]`.\n",
                    "type": "String",
                    "src": {
                      "text": "0,106,25,27",
                      "type": "0,106,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,108,0",
                  "text": "0,104,8,86"
                }
              },
              {
                "$type": "method",
                "name": "translateBy",
                "text": "Translate this Region by the given offset amount\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "Object containing the `x` and `y` properties.\nOr the x value is using the two argument form.\n",
                    "type": "Ext.util.Offset/Object",
                    "src": {
                      "name": "1,346,40",
                      "text": "1,346,42,46:1,347,8,47",
                      "type": "1,346,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The y value unless using an Offset object.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,348,24",
                      "text": "1,348,26,43",
                      "type": "1,348,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this This Region\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "1,349,34,17",
                      "type": "1,349,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,351,0",
                  "text": "1,345,8,49"
                }
              },
              {
                "$type": "method",
                "name": "union",
                "text": "Returns the smallest region that contains the current AND targetRegion.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "region",
                    "type": "Ext.util.Region",
                    "src": {
                      "name": "1,87,33",
                      "type": "1,87,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "a new region\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "1,88,34,13",
                      "type": "1,88,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,90,0",
                  "text": "1,86,8,72"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.util.Point-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.util.Point-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.util.Point-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.util.Point-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.util.Point-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.util.Point-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.util.Point-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.util.Point-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.util.Point-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.util.Point-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.util.Point-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "name": "from",
                "static": true,
                "text": "Returns a new point from an object that has `x` and `y` properties, if that object is not an instance\nof <a href='#!/api/Ext.util.Point'>Ext.util.Point</a>. Otherwise, returns the given point itself.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "object",
                    "type": "Object",
                    "src": {
                      "name": "0,41,28",
                      "type": "0,41,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Point",
                    "src": {
                      "type": "0,42,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,44,0",
                  "static": "0,13,-1",
                  "text": "0,39,12,172"
                }
              },
              {
                "$type": "method",
                "name": "fromEvent",
                "static": true,
                "text": "Returns a new instance of <a href='#!/api/Ext.util.Point'>Ext.util.Point</a> based on the `pageX` / `pageY` values of the given event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The event.\n",
                    "type": "Event",
                    "src": {
                      "name": "0,18,27",
                      "text": "0,18,29,11",
                      "type": "0,18,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Point",
                    "src": {
                      "type": "0,19,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,21,0",
                  "static": "0,17,12",
                  "text": "0,16,12,107"
                }
              },
              {
                "$type": "method",
                "name": "fromTouch",
                "static": true,
                "text": "Returns a new instance of <a href='#!/api/Ext.util.Point'>Ext.util.Point</a> based on the `pageX` / `pageY` values of the given touch.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "touch",
                    "type": "Event",
                    "src": {
                      "name": "0,31,27",
                      "type": "0,31,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Point",
                    "src": {
                      "type": "0,32,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,34,0",
                  "static": "0,30,12",
                  "text": "0,29,12,107"
                }
              }
            ]
          }
        ],
        "src": {
          "extends": "0,8,0",
          "name": "0,7,0",
          "text": "0,2,4,148"
        }
      }
    ]
  },
  "version": 1
}