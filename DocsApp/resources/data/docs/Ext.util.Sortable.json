{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/Sortable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Ext.util.Sortable",
        "requires": "Ext.util.Sorter",
        "text": "A mixin which allows a data component to be sorted. This is used by e.g. <a href='#!/api/Ext.data.Store'>Ext.data.Store</a> and <a href='#!/api/Ext.data.TreeStore'>Ext.data.TreeStore</a>.\n\n**NOTE**: This mixin is mainly for internal use and most users should not need to use it directly. It\nis more likely you will want to use one of the component classes that import this mixin, such as\n<a href='#!/api/Ext.data.Store'>Ext.data.Store</a> or <a href='#!/api/Ext.data.TreeStore'>Ext.data.TreeStore</a>.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "sorters",
                "text": "The initial set of <a href='#!/api/Ext.util.Sorter'>Ext.util.Sorter</a>.\n\n    sorters: [{\n        property: 'age',\n        direction: 'DESC'\n    }, {\n        property: 'firstName',\n        direction: 'ASC'\n    }]\n",
                "type": "Ext.util.Sorter[]/Object[]",
                "src": {
                  "name": "0,20,46",
                  "text": "0,21,12,192",
                  "type": "0,20,18"
                }
              },
              {
                "$type": "property",
                "name": "defaultSortDirection",
                "text": "The default sort direction to use if one is not specified.\n",
                "type": "String",
                "src": {
                  "name": "0,35,22",
                  "text": "0,36,8,59",
                  "type": "0,35,14"
                }
              },
              {
                "$type": "property",
                "name": "multiSortLimit",
                "optional": true,
                "text": "The maximum number of sorters which may be applied to this Sortable when using the \"multi\" insertion position\nwhen adding sorters.\n\nNew sorters added using the \"multi\" insertion position are inserted at the top of the sorters list becoming the\nnew primary sort key.\n\nIf the sorters collection has grown to longer then **<a href='#!/api/Ext.util.Sortable-cfg-multiSortLimit'>multiSortLimit</a>**, then the it is trimmed.\n",
                "type": "Number",
                "value": "3",
                "src": {
                  "name": "0,52,23",
                  "text": "0,53,8,365",
                  "type": "0,52,14",
                  "value": "0,52,38"
                }
              },
              {
                "$type": "property",
                "name": "sortRoot",
                "text": "The property in each item that contains the data to sort.\n",
                "type": "String",
                "src": {
                  "name": "0,90,22",
                  "text": "0,91,8,58",
                  "type": "0,90,14"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "beforesort",
                "text": "Fires before a sort occurs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "me",
                    "text": "This object.\n",
                    "type": "Ext.util.Sortable",
                    "src": {
                      "name": "0,47,35",
                      "text": "0,47,38,13",
                      "type": "0,47,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "The collection of Sorters being used to generate the comparator function.\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "name": "0,48,35",
                      "text": "0,48,43,74",
                      "type": "0,48,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,45,15",
                  "text": "0,46,8,28"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "sort",
                "text": "Updates the sorters collection and triggers sorting of this Sortable. Example usage:\n\n    //sort by a single field\n    myStore.sort('myField', 'DESC');\n\n    //sorting by multiple fields\n    myStore.sort([{\n        property : 'age',\n        direction: 'ASC'\n    }, {\n        property : 'name',\n        direction: 'DESC'\n    }]);\n\nClasses which use this mixin must implement a **`soSort`** method which accepts a comparator function computed from\nthe full sorter set which performs the sort in an implementation-specific way.\n\nWhen passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:\n\n    store.sort('myField');\n    store.sort('myField');\n\nIs equivalent to this code, because Store handles the toggling automatically:\n\n    store.sort('myField', 'ASC');\n    store.sort('myField', 'DESC');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "optional": true,
                    "text": "Either a string name of one of the fields in this Store's configured <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, or an array of sorter configurations.\n",
                    "type": "String/Ext.util.Sorter[]",
                    "src": {
                      "name": "0,133,43",
                      "text": "0,133,52,137",
                      "type": "0,133,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "direction",
                    "optional": true,
                    "text": "The overall direction to sort the data by.\n",
                    "type": "String",
                    "value": "\"ASC\"",
                    "src": {
                      "name": "0,134,25",
                      "text": "0,134,42,43",
                      "type": "0,134,16",
                      "value": "0,134,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "insertionPosition",
                    "optional": true,
                    "text": "Where to put the new sorter in the collection of sorters.\nThis may take the following values:\n\n* `replace` : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode\n          to programatically sort by multiple fields.\n\n* `prepend` : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer.\n\n* `multi` :  This is mainly useful for implementing intuitive \"Sort by this\" user interfaces such as the <a href='#!/api/Ext.grid.Panel'>Ext.grid.Panel</a>s column sorting UI.\n\n    This mode is only supported when passing a property name and a direction.\n\n    This means that the new sorter is becomes the primary sorter. If the sorter was **already** the primary sorter, the direction\n    of sort is toggled if no direction parameter is specified.\n\n    The number of sorters maintained is limited by the <a href='#!/api/Ext.util.Sortable-cfg-multiSortLimit'>multiSortLimit</a> configuration.\n\n* `append` : This means that the new sorter becomes the last sorter.\n",
                    "type": "String",
                    "value": "\"replace\"",
                    "src": {
                      "name": "0,135,25",
                      "text": "0,135,54,58:0,136,8,977",
                      "type": "0,135,16",
                      "value": "0,135,43"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new sorters.\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "text": "0,153,36,17",
                      "type": "0,153,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,155,0",
                  "text": "0,106,8,837"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getSorterCount",
                "text": "Returns the number of Sorters which apply to this Sortable.\n\nMay be overridden in subclasses. <a href='#!/api/Ext.data.Store'>Ext.data.Store</a> in particlar overrides\nthis because its groupers must contribute to the sorter count so that the sort method above executes doSort.\n",
                "src": {
                  "access": "0,243,8",
                  "name": "0,249,0",
                  "text": "0,244,8,255"
                }
              },
              {
                "$type": "method",
                "name": "generateComparator",
                "text": "Returns a comparator function which compares two items and returns -1, 0, or 1 depending\non the currently defined set of <a href='#!/api/Ext.util.Sortable-cfg-sorters'>cfg-sorters</a>.\n\nIf there are no <a href='#!/api/Ext.util.Sortable-cfg-sorters'>cfg-sorters</a> defined, it returns a function which returns `0` meaning\nthat no sorting will occur.\n",
                "src": {
                  "name": "0,260,0",
                  "text": "0,254,8,266"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "decodeSorters",
                "text": "Normalizes an array of sorter objects, ensuring that they are all Ext.util.Sorter instances\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "The sorters array\n",
                    "type": "Object[]",
                    "src": {
                      "name": "0,274,26",
                      "text": "0,274,34,18",
                      "type": "0,274,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Array of Ext.util.Sorter objects\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "text": "0,275,36,33",
                      "type": "0,275,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,272,8",
                  "name": "0,277,0",
                  "text": "0,273,8,92"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getFirstSorter",
                "text": "Gets the first sorter from the sorters collection, excluding\nany groupers that may be in place\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The sorter, null if none exist\n",
                    "type": "Ext.util.Sorter",
                    "src": {
                      "text": "0,335,34,31",
                      "type": "0,335,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,334,8",
                  "name": "0,337,0",
                  "text": "0,332,8,95"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "isSortable",
                "text": "`true` in this class to identify an object as an instantiated Sortable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,10,28",
                  "text": "0,11,8,93",
                  "type": "0,10,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "name": "createComparator",
                "static": true,
                "text": "Creates a single comparator function which encapsulates the passed Sorter array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "The sorter set for which to create a comparator function\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "name": "0,67,39",
                      "text": "0,67,47,57",
                      "type": "0,67,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "a function, which when passed two comparable objects returns the result\nof the whole sorter comparator functions.\n",
                    "type": "Function",
                    "src": {
                      "text": "0,68,31,72:0,69,12,42",
                      "type": "0,68,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,71,0",
                  "static": "0,63,-1",
                  "text": "0,66,12,81"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,8,0",
          "requires": "0,41,0",
          "text": "0,2,4,382"
        }
      }
    ]
  },
  "version": 1
}