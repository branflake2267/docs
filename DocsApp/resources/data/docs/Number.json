{
  "$type": "doxi",
  "files": [
    "../../../../docs/docs/js/primitives/Number.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Number",
        "text": "\nCreates a wrapper object to allow you to work with numerical values.\n\nThe primary uses for the <a href='#!/api/Number'>Number</a> object are:\n\nIf the argument cannot be converted into a number, it returns <a href='#!/api/Number-static-property-NaN'>NaN</a>.\n\nIn a non-constructor context (i.e., without the `new` operator), <a href='#!/api/Number'>Number</a> can\nbe used to perform a type conversion.\n\n# Using the <a href='#!/api/Number'>Number</a> object to assign values to numeric variables\n\nThe following example uses the <a href='#!/api/Number'>Number</a> object's properties to assign values to\nseveral numeric variables:\n\n    biggestNum = Number.MAX_VALUE;\n    smallestNum = Number.MIN_VALUE;\n    infiniteNum = Number.POSITIVE_INFINITY;\n    negInfiniteNum = Number.NEGATIVE_INFINITY;\n    notANum = Number.NaN;\n\n# Using <a href='#!/api/Number'>Number</a> to convert a <a href='#!/api/Date'>Date</a> object\n\nThe following example converts the <a href='#!/api/Date'>Date</a> object to a numerical value using\n<a href='#!/api/Number'>Number</a> as a function:\n\n    var d = new Date(\"December 17, 1995 03:24:00\");\n    print(Number(d));\n\nThis displays \"819199440000\".\n\nThe following example converts the Date object to a numerical value using\n<a href='#!/api/Number'>Number</a> as a function:\n\n<div class=\"notice\">\nDocumentation for this class comes from <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">MDN</a>\nand is available under <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">Creative Commons: Attribution-Sharealike license</a>.\n</div>\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Number object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The numeric value of the object being created.\n",
                    "src": {
                      "name": "0,46,11",
                      "text": "0,47,4,47"
                    }
                  }
                ],
                "src": {
                  "name": "0,44,12",
                  "text": "0,45,4,27"
                }
              },
              {
                "$type": "method",
                "name": "toExponential",
                "text": "Returns a string representing the number in exponential notation.\n\nA string representing a <a href='#!/api/Number'>Number</a> object in exponential notation with one digit before the decimal\npoint, rounded to `fractionDigits` digits after the decimal point. If the `fractionDigits` argument\nis omitted, the number of digits after the decimal point defaults to the number of digits necessary\nto represent the value uniquely.\n\nIf you use the <a href='#!/api/Number-method-toExponential'>toExponential</a> method for a numeric literal and the numeric literal has no exponent\nand no decimal point, leave a space before the dot that precedes the method call to prevent the dot\nfrom being interpreted as a decimal point.\n\nIf a number has more digits that requested by the `fractionDigits` parameter, the number is rounded\nto the nearest number represented by `fractionDigits` digits. See the discussion of rounding in the\ndescription of the <a href='#!/api/Number-method-toFixed'>toFixed</a> method, which also applies to <a href='#!/api/Number-method-toExponential'>toExponential</a>.\n\n    var num=77.1234;\n\n    alert(\"num.toExponential() is \" + num.toExponential()); //displays 7.71234e+1\n\n    alert(\"num.toExponential(4) is \" + num.toExponential(4)); //displays 7.7123e+1\n\n    alert(\"num.toExponential(2) is \" + num.toExponential(2)); //displays 7.71e+1\n\n    alert(\"77.1234.toExponential() is \" + 77.1234.toExponential()); //displays 7.71234e+1\n\n    alert(\"77 .toExponential() is \" + 77 .toExponential()); //displays 7.7e+1\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fractionDigits",
                    "text": "An integer specifying the number of digits after the decimal\npoint. Defaults to as many digits as necessary to specify the number.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,212,20",
                      "text": "0,212,35,61:0,213,4,70",
                      "type": "0,212,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Exponential notation of number.\n",
                    "type": "String",
                    "src": {
                      "text": "0,214,21,32",
                      "type": "0,214,13"
                    }
                  }
                ],
                "src": {
                  "name": "0,184,12",
                  "text": "0,185,4,1361"
                }
              },
              {
                "$type": "method",
                "name": "toFixed",
                "text": "Returns a string representing the number in fixed-point notation.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A string representation of `number` that does not use\nexponential notation and has exactly `digits` digits after the decimal place.\nThe number is rounded if necessary, and the fractional part is padded with\nzeros if necessary so that it has the specified length. If `number` is greater\nthan 1e+21, this method simply calls `Number.toString()` and returns a string\nin exponential notation.\n",
                    "type": "String",
                    "src": {
                      "text": "0,221,21,54:0,222,4,336",
                      "type": "0,221,13"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "digits",
                    "text": "The number of digits to appear after the decimal point; this may be a\nvalue between 0 and 20, inclusive, and implementations may optionally support a larger range of\nvalues. If this argument is omitted, it is treated as 0.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,228,20",
                      "text": "0,228,27,70:0,229,4,153",
                      "type": "0,228,12"
                    }
                  }
                ],
                "src": {
                  "name": "0,218,12",
                  "text": "0,219,4,67"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a human readable string representing the number using the locale of the\nenvironment. Overrides the `Object.prototype.toLocaleString` method.\n\nThis method available to numbers will convert the number into a string which is suitable for\npresentation in the given locale.\n\n    var number = 3500\n    console.log(number.toLocaleString()); // Displays \"3,500\" in English locale\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "String representing the number.\n",
                    "type": "String",
                    "src": {
                      "text": "0,244,21,32",
                      "type": "0,244,13"
                    }
                  }
                ],
                "src": {
                  "name": "0,234,12",
                  "text": "0,235,4,381"
                }
              },
              {
                "$type": "method",
                "name": "toPrecision",
                "text": "Returns a string representing the number to a specified precision in fixed-\npoint or exponential notation.\n\nA string representing a <a href='#!/api/Number'>Number</a> object in fixed-point or\nexponential notation rounded to precision significant digits. See the\ndiscussion of rounding in the description of the <a href='#!/api/Number-method-toFixed'>toFixed</a> method, which also\napplies to <a href='#!/api/Number-method-toPrecision'>toPrecision</a>.\n\nIf the precision argument is omitted, behaves as Number.toString. If it is a\nnon-integer value, it is rounded to the nearest integer. After rounding, if\nthat value is not between 1 and 100 (inclusive), a RangeError is thrown.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "precision",
                    "text": "An integer specifying the number of significant digits.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,261,20",
                      "text": "0,261,30,56",
                      "type": "0,261,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "String that represents <a href='#!/api/Number'>Number</a> object.\n",
                    "type": "String",
                    "src": {
                      "text": "0,262,21,40",
                      "type": "0,262,13"
                    }
                  }
                ],
                "src": {
                  "name": "0,248,12",
                  "text": "0,249,4,568"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representing the specified object. Overrides the\n`Object.prototype.toString` method.\n\nThe <a href='#!/api/Number'>Number</a> object overrides the <a href='#!/api/Number-method-toString'>toString</a> method of the <a href='#!/api/Object'>Object</a> object; it does not inherit\n`Object.toString`. For <a href='#!/api/Number'>Number</a> objects, the toString method returns a string representation of the\nobject in the specified radix.\n\nThe <a href='#!/api/Number-method-toString'>toString</a> method parses its first argument, and attempts to return a string representation in\nthe specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals\ngreater than 9. For example, for hexadecimal numbers (base 16), A through F are used.\n\nIf <a href='#!/api/Number-method-toString'>toString</a> is given a radix not between 2 and 36, an exception is thrown.\n\nIf the radix is not specified, JavaScript assumes the preferred radix is 10.\n\n    var count = 10;\n    print(count.toString());   // displays \"10\"\n    print((17).toString());    // displays \"17\"\n\n    var x = 7;\n    print(x.toString(2));      // displays \"111\"\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "radix",
                    "text": "An integer between 2 and 36 specifying the base to use for representing\nnumeric values.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,289,20",
                      "text": "0,289,26,72:0,290,4,16",
                      "type": "0,289,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The number represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "0,291,21,36",
                      "type": "0,291,13"
                    }
                  }
                ],
                "src": {
                  "name": "0,266,12",
                  "text": "0,267,4,951"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object. Overrides the\n`Object.prototype.valueOf` method.\n\nThe <a href='#!/api/Number-method-valueOf'>valueOf</a> method of <a href='#!/api/Number'>Number</a> returns the primitive value of a <a href='#!/api/Number'>Number</a> object as a number data\ntype.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n    var x = new Number();\n    print(x.valueOf());     // prints \"0\"\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The primitive value of the number.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,307,21,35",
                      "type": "0,307,13"
                    }
                  }
                ],
                "src": {
                  "name": "0,295,12",
                  "text": "0,296,4,362"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "NEGATIVE_INFINITY",
                "text": "Special value representing negative infinity; returned on overflow.\n\nThe value of `Number.NEGATIVE_INFINITY` is the same as the negative value of the global object's\nInfinity property.\n\nThis value behaves slightly differently than mathematical infinity:\n\n*   Any positive value, including POSITIVE_INFINITY, multiplied by NEGATIVE_INFINITY is NEGATIVE_INFINITY.\n*   Any negative value, including NEGATIVE_INFINITY, multiplied by NEGATIVE_INFINITY is\nPOSITIVE_INFINITY.\n*   Zero multiplied by NEGATIVE_INFINITY is NaN.\n*   NaN multiplied by NEGATIVE_INFINITY is NaN.\n*   NEGATIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is\nPOSITIVE_INFINITY.\n*   NEGATIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is\nNEGATIVE_INFINITY.\n*   NEGATIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN.\n*   Any number divided by NEGATIVE_INFINITY is Zero.\n\nSeveral JavaScript methods (such as the <a href='#!/api/Number'>Number</a> constructor, `parseFloat`, and `parseInt`) return\n<a href='#!/api/Number-static-property-NaN'>NaN</a> if the value specified in the parameter is significantly lower than `Number.MIN_VALUE`.\n\nYou might use the `Number.NEGATIVE_INFINITY` property to indicate an error condition that returns a\nfinite number in case of success. Note, however, that `isFinite` would be more appropriate in such\na case.\n\nIn the following example, the variable smallNumber is assigned a value that is smaller than the\nminimum value. When the `if` statement executes, `smallNumber` has the value `\"-Infinity\"`, so\n`smallNumber` is set to a more manageable value before continuing.\n\n    var smallNumber = (-Number.MAX_VALUE) * 2\n    if (smallNumber == Number.NEGATIVE_INFINITY) {\n        smallNumber = returnFinite();\n    }\n",
                "type": "Number",
                "src": {
                  "name": "0,105,23",
                  "text": "0,106,4,1713",
                  "type": "0,105,15"
                }
              },
              {
                "$type": "property",
                "name": "POSITIVE_INFINITY",
                "text": "Special value representing infinity; returned on overflow.\n\nThe value of `Number.POSITIVE_INFINITY` is the same as the value of the global object's Infinity\nproperty.\n\nThis value behaves slightly differently than mathematical infinity:\n\n*   Any positive value, including POSITIVE_INFINITY, multiplied by POSITIVE_INFINITY is\nPOSITIVE_INFINITY.\n*   Any negative value, including NEGATIVE_INFINITY, multiplied by POSITIVE_INFINITY is\nNEGATIVE_INFINITY.\n*   Zero multiplied by POSITIVE_INFINITY is NaN.\n*   NaN multiplied by POSITIVE_INFINITY is NaN.\n*   POSITIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is\nNEGATIVE_INFINITY.\n*   POSITIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is\nPOSITIVE_INFINITY.\n*   POSITIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN.\n*   Any number divided by POSITIVE_INFINITY is Zero.\n\nSeveral JavaScript methods (such as the <a href='#!/api/Number'>Number</a> constructor, `parseFloat`, and `parseInt`) return\n<a href='#!/api/Number-static-property-NaN'>NaN</a> if the value specified in the parameter is significantly higher than `Number.MAX_VALUE`.\n\nYou might use the `Number.POSITIVE_INFINITY` property to indicate an error condition that returns a\nfinite number in case of success. Note, however, that `isFinite` would be more appropriate in such\na case.\n\nIn the following example, the variable `bigNumber` is assigned a value that is larger than the\nmaximum value. When the if statement executes, `bigNumber` has the value \"Infinity\", so `bigNumber`\nis set to a more manageable value before continuing.\n\n    var bigNumber = Number.MAX_VALUE * 2\n    if (bigNumber == Number.POSITIVE_INFINITY) {\n        bigNumber = returnFinite();\n    }\n",
                "type": "Number",
                "src": {
                  "name": "0,143,23",
                  "text": "0,144,4,1677",
                  "type": "0,143,15"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "name": "MAX_VALUE",
                "static": true,
                "text": "The largest positive representable number. The largest negative representable\nnumber is `-MAX_VALUE`.\n\nThe <a href='#!/api/Number-static-property-MAX_VALUE'>MAX_VALUE</a> property has a value of approximately 1.79E+308. Values larger than <a href='#!/api/Number-static-property-MAX_VALUE'>MAX_VALUE</a> are\nrepresented as `\"Infinity\"`.\n\nBecause <a href='#!/api/Number-static-property-MAX_VALUE'>MAX_VALUE</a> is a static property of <a href='#!/api/Number'>Number</a>, you always use it as `Number.MAX_VALUE`,\nrather than as a property of a <a href='#!/api/Number'>Number</a> object you created.\n\nThe following code multiplies two numeric values. If the result is less than or equal to\n<a href='#!/api/Number-static-property-MAX_VALUE'>MAX_VALUE</a>, the `func1` function is called; otherwise, the `func2` function is called.\n\n    if (num1 * num2 <= Number.MAX_VALUE)\n        func1();\n    else\n        func2();\n",
                "type": "Number",
                "src": {
                  "name": "0,53,23",
                  "static": "0,54,4",
                  "text": "0,55,4,651",
                  "type": "0,53,15"
                }
              },
              {
                "$type": "property",
                "name": "MIN_VALUE",
                "static": true,
                "text": "The smallest positive representable number -- that is, the positive number\nclosest to zero (without actually being zero). The smallest negative\nrepresentable number is `-MIN_VALUE`.\n\nThe <a href='#!/api/Number-static-property-MIN_VALUE'>MIN_VALUE</a> property is the number closest to 0, not the most negative number, that JavaScript\ncan represent.\n\n<a href='#!/api/Number-static-property-MIN_VALUE'>MIN_VALUE</a> has a value of approximately 5e-324. Values smaller than <a href='#!/api/Number-static-property-MIN_VALUE'>MIN_VALUE</a> (\"underflow\nvalues\") are converted to 0.\n\nBecause <a href='#!/api/Number-static-property-MIN_VALUE'>MIN_VALUE</a> is a static property of <a href='#!/api/Number'>Number</a>, you always use it as `Number.MIN_VALUE`,\nrather than as a property of a <a href='#!/api/Number'>Number</a> object you created.\n\nThe following code divides two numeric values. If the result is greater than or equal to\n<a href='#!/api/Number-static-property-MIN_VALUE'>MIN_VALUE</a>, the `func1` function is called; otherwise, the `func2` function is called.\n\n    if (num1 / num2 >= Number.MIN_VALUE)\n        func1()\n    else\n        func2()\n",
                "type": "Number",
                "src": {
                  "name": "0,74,23",
                  "static": "0,75,4",
                  "text": "0,76,4,837",
                  "type": "0,74,15"
                }
              },
              {
                "$type": "property",
                "name": "NaN",
                "static": true,
                "text": "Special \"not a number\" value.\n",
                "type": "Number",
                "src": {
                  "name": "0,99,23",
                  "static": "0,100,4",
                  "text": "0,101,4,30",
                  "type": "0,99,15"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,2,11",
          "text": "0,3,4,1316"
        }
      }
    ]
  },
  "version": 1
}