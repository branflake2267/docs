{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/JSON.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Ext.JSON",
        "singleton": true,
        "text": "Modified version of [Douglas Crockford's JSON.js][dc] that doesn't\nmess with the Object prototype.\n\n[dc]: http://www.json.org/js.html\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "text": "Encodes a String. This returns the actual string which is inserted into the JSON string as the literal\nexpression. **The returned value includes enclosing double quotation marks.**\n\nTo override this:\n\n    Ext.JSON.encodeString = function(s) {\n        return 'Foo' + s;\n    };\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "The String to encode\n",
                    "type": "String",
                    "src": {
                      "name": "0,176,24",
                      "text": "0,176,26,21",
                      "type": "0,176,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The string literal to use in a JSON string.\n",
                    "type": "String",
                    "src": {
                      "text": "0,177,25,44",
                      "type": "0,177,17"
                    }
                  }
                ],
                "src": {
                  "text": "0,167,8,277"
                }
              },
              {
                "$type": "method",
                "text": "The function which <a href='#!/api/Ext.JSON-encode'>encode</a> uses to encode all javascript values to their JSON representations\nwhen <a href='#!/api/Ext-property-USE_NATIVE_JSON'>Ext#USE_NATIVE_JSON</a> is `false`.\n\nThis is made public so that it can be replaced with a custom implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "Any javascript value to be converted to its JSON representation\n",
                    "type": "Object",
                    "src": {
                      "name": "0,188,24",
                      "text": "0,188,26,64",
                      "type": "0,188,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The JSON representation of the passed value.\n",
                    "type": "String",
                    "src": {
                      "text": "0,189,25,45",
                      "type": "0,189,17"
                    }
                  }
                ],
                "src": {
                  "text": "0,183,8,226"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,18,11",
          "singleton": "0,19,4",
          "text": "0,13,4,135"
        }
      }
    ]
  },
  "version": 1
}