{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/JsonStore.js",
    "../../../ext/packages/core/src/data/Store.js",
    "../../../ext/packages/core/src/data/ProxyStore.js",
    "../../../ext/packages/core/src/data/AbstractStore.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/packages/core/src/data/LocalStore.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "store.json",
        "extends": "Ext.data.Store",
        "name": "Ext.data.JsonStore",
        "requires": "Ext.data.proxy.Ajax,Ext.data.reader.Json,Ext.data.writer.Json",
        "text": "Small helper class to make creating <a href='#!/api/Ext.data.Store'>Ext.data.Store</a>s from JSON data easier.\nA JsonStore will be automatically configured with a <a href='#!/api/Ext.data.reader.Json'>Ext.data.reader.Json</a>.\n\nA store configuration would be something like:\n\n    var store = new Ext.data.JsonStore({\n        // store configs\n        storeId: 'myStore',\n\n        proxy: {\n            type: 'ajax',\n            url: 'get-images.php',\n            reader: {\n                type: 'json',\n                rootProperty: 'images'\n            }\n        },\n\n        //alternatively, a Model name can be given (see Ext.data.Store for an example)\n        fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]\n    });\n\nThis store is configured to consume a returned object of the form:\n\n    {\n        images: [\n            {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},\n            {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}\n        ]\n    }\n\nAn object literal of this form could also be used as the <a href='#!/api/Ext.data.JsonStore-cfg-data'>cfg-data</a> config option.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "associatedEntity",
                "optional": true,
                "text": "The owner of this store if the store is used as part of an association.\n",
                "type": "Ext.data.Model",
                "src": {
                  "access": "1,248,12",
                  "name": "1,245,35",
                  "text": "1,246,12,73",
                  "type": "1,245,18"
                }
              },
              {
                "$type": "property",
                "name": "asynchronousLoad",
                "optional": true,
                "since": "6.0.1",
                "text": "This defaults to `true` when this store's <a href='#!/api/Ext.data.JsonStore-cfg-proxy'>cfg-proxy</a> is asynchronous, such as an\n<a href='#!/api/Ext.data.proxy.Ajax'>Ext.data.proxy.Ajax</a>.\n\nWhen the proxy is synchronous, such as a <a href='#!/api/Ext.data.proxy.Memory'>Ext.data.proxy.Memory</a> memory proxy, this\ndefaults to `false`.\n\n*NOTE:* This does not cause synchronous Ajax requests if configured `false` when an Ajax proxy\nis used. It causes immediate issuing of an Ajax request when <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a> is called\nrather than issuing the request at the end of the current event handler run.\n\nWhat this means is that when using an Ajax proxy, calls to\n<a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a> do not fire the request to the remote resource\nimmediately, but schedule a request to be made. This is so that multiple\nrequests are not fired when mutating a store's remote filters and sorters (as\nhappens during state restoration). The request is made only once after all\nrelevant store state is fully set.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,117,28",
                  "since": "2,135,19",
                  "text": "2,118,12,896",
                  "type": "2,117,18"
                }
              },
              {
                "$type": "property",
                "name": "autoDestroy",
                "optional": true,
                "text": "When a Store is used by only one <a href='#!/api/Ext.view.View'>Ext.view.View</a>, and should only exist for the lifetime of that view, then\nconfigure the autoDestroy flag as `true`. This causes the destruction of the view to trigger the destruction of its Store.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,46,28",
                  "text": "3,47,12,246",
                  "type": "3,46,18"
                }
              },
              {
                "$type": "property",
                "name": "autoLoad",
                "since": "2.3.0",
                "text": "If data is not specified, and if autoLoad is true or an Object, this store's load method is automatically called\nafter creation. If the value of autoLoad is an Object, this Object will be passed to the store's load method.\n\nIt's important to note that <a href='#!/api/Ext.data.TreeStore'>Ext.data.TreeStore</a> will\nload regardless of autoLoad's value if expand is set to true on the\n<a href='#!/api/Ext.data.TreeStore-cfg-root'>Ext.data.TreeStore#root</a>.\n",
                "type": "Boolean/Object",
                "src": {
                  "name": "2,75,34",
                  "since": "2,83,19",
                  "text": "2,76,12,408",
                  "type": "2,75,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "autoSort",
                "optional": true,
                "text": "`true` to maintain sorted order when records\nare added regardless of requested insertion point, or when an item mutation\nresults in a new sort position.\n\nThis does not affect a ChainedStore's reaction to mutations of the source\nStore. If sorters are present when the source Store is mutated, this ChainedStore's\nsort order will always be maintained.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "access": "3,131,12",
                  "name": "3,124,28",
                  "text": "3,124,43,45:3,125,12,305",
                  "type": "3,124,18",
                  "value": "3,124,37"
                }
              },
              {
                "$type": "property",
                "name": "autoSync",
                "text": "True to automatically sync the Store with its Proxy after every edit to one of its Records. Defaults to false.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,88,27",
                  "text": "2,89,12,111",
                  "type": "2,88,18"
                }
              },
              {
                "$type": "property",
                "name": "batchUpdateMode",
                "text": "Sets the updating behavior based on batch synchronization. 'operation' (the default) will update the Store's\ninternal representation of the data after each operation of the batch has completed, 'complete' will wait until\nthe entire batch has been completed before updating the Store's data. 'complete' is a good choice for local\nstorage proxies, 'operation' is better for remote proxies, where there is a comparatively high latency.\n",
                "type": "String",
                "src": {
                  "name": "2,94,26",
                  "text": "2,95,12,433",
                  "type": "2,94,18"
                }
              },
              {
                "$type": "property",
                "name": "clearOnPageLoad",
                "optional": true,
                "text": "True to empty the store when loading another page via <a href='#!/api/Ext.data.JsonStore-method-loadPage'>loadPage</a>,\n<a href='#!/api/Ext.data.JsonStore-method-nextPage'>nextPage</a> or <a href='#!/api/Ext.data.JsonStore-method-previousPage'>previousPage</a>. Setting to false keeps existing records, allowing\nlarge data sets to be loaded one page at a time but rendered all together.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "1,237,27",
                  "text": "1,238,11,242",
                  "type": "1,237,17",
                  "value": "1,237,43"
                }
              },
              {
                "$type": "property",
                "name": "clearRemovedOnLoad",
                "optional": true,
                "text": "`true` to clear anything in the <a href='#!/api/Ext.data.JsonStore-property-removed'>removed</a> record collection when the store loads.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "1,231,27",
                  "text": "1,232,11,89",
                  "type": "1,231,17",
                  "value": "1,231,46"
                }
              },
              {
                "$type": "property",
                "name": "data",
                "text": "Array of Model instances or data objects to load locally. See \"Inline data\"\nabove for details.\n",
                "type": "Object[]/Ext.data.Model[]",
                "src": {
                  "name": "1,224,45",
                  "text": "1,225,12,95",
                  "type": "1,224,18"
                }
              },
              {
                "$type": "property",
                "inheritdoc": "Ext.data.Model#cfg-fields",
                "localDoc": "**Note:** In general, this configuration option should only be used\nfor simple stores like a two-field store of\n<a href='#!/api/Ext.form.field.ComboBox'>ComboBox</a>. For anything more complicated, such\nas specifying a particular id property or associations, a\n<a href='#!/api/Ext.data.Model'>Model</a> should be defined and specified for the\n<a href='#!/api/Ext.data.JsonStore-model'>model</a> config.\n",
                "name": "fields",
                "since": "2.3.0",
                "type": "Object[]/String[]",
                "src": {
                  "inheritdoc": "2,52,12",
                  "localDoc": "2,54,22",
                  "name": "2,51,37",
                  "since": "2,61,19",
                  "type": "2,51,18"
                }
              },
              {
                "$type": "property",
                "name": "filters",
                "text": "Array of <a href='#!/api/Ext.util.Filter'>Ext.util.Filter</a> for this store. Can also be passed array of\nfunctions which will be used as the <a href='#!/api/Ext.util.Filter-cfg-filterFn'>Ext.util.Filter#filterFn</a> config\nfor filters:\n\n    filters: [\n        function(item) {\n            return item.weight > 0;\n        }\n    ]\n\nTo filter after the grid is loaded use the <a href='#!/api/Ext.data.Store-method-filterBy'>Ext.data.Store#filterBy</a> function.\n",
                "type": "Object[]/Function[]",
                "src": {
                  "name": "3,30,39",
                  "text": "3,31,12,371",
                  "type": "3,30,18"
                }
              },
              {
                "$type": "property",
                "name": "groupDir",
                "text": "The direction in which sorting should be applied when grouping. Supported values are \"ASC\" and \"DESC\".\n",
                "type": "String",
                "src": {
                  "name": "3,101,25",
                  "text": "3,102,11,103",
                  "type": "3,101,17"
                }
              },
              {
                "$type": "property",
                "name": "groupField",
                "text": "The field by which to group data in the store. Internally, grouping is very similar to sorting - the\ngroupField and <a href='#!/api/Ext.data.JsonStore-cfg-groupDir'>groupDir</a> are injected as the first sorter (see <a href='#!/api/Ext.data.JsonStore-method-sort'>method-sort</a>). Stores support a single\nlevel of grouping, and groups can be fetched via the <a href='#!/api/Ext.data.JsonStore-method-getGroups'>getGroups</a> method.\n",
                "type": "String",
                "src": {
                  "name": "3,93,25",
                  "text": "3,94,11,299",
                  "type": "3,93,17"
                }
              },
              {
                "$type": "property",
                "name": "grouper",
                "text": "The grouper by which to group the data store. May also be specified by the <a href='#!/api/Ext.data.JsonStore-cfg-groupField'>groupField</a> config, however\nthey should not be used together.\n",
                "type": "Object/Ext.util.Grouper",
                "src": {
                  "name": "3,107,43",
                  "text": "3,108,12,145",
                  "type": "3,107,18"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS <a href='#!/api/Ext.Component'>Ext.Component</a>**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the <a href='#!/api/Ext.view.View'>Ext.view.View</a>s **<a href='#!/api/Ext.view.View-event-itemclick'>Ext.view.View#itemclick</a>** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "4,243,25",
                  "text": "4,244,11,1325",
                  "type": "4,243,17"
                }
              },
              {
                "$type": "property",
                "name": "model",
                "text": "Name of the <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> associated with this store. See\n<a href='#!/api/Ext.data.Model-property-entityName'>Ext.data.Model#entityName</a>.\n\nMay also be the actual Model subclass.\n\nThis config is required for the store to be able to read data unless you have defined\nthe <a href='#!/api/Ext.data.JsonStore-cfg-fields'>fields</a> config which will create an anonymous <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>.\n",
                "type": "String/Ext.data.Model",
                "src": {
                  "name": "2,38,41",
                  "text": "2,39,12,311",
                  "type": "2,38,18"
                }
              },
              {
                "$type": "property",
                "name": "pageSize",
                "text": "The number of records considered to form a 'page'. This is used to power the built-in\npaging using the nextPage and previousPage functions when the grid is paged using a\n<a href='#!/api/Ext.toolbar.Paging'>Ext.toolbar.Paging</a> Defaults to 25.\n\nTo disable paging, set the pageSize to `0`.\n",
                "type": "Number",
                "src": {
                  "name": "3,114,25",
                  "text": "3,115,11,272",
                  "type": "3,114,17"
                }
              },
              {
                "$type": "property",
                "name": "proxy",
                "since": "1.1.0",
                "text": "The Proxy to use for this Store. This can be either a string, a config object or a Proxy instance -\nsee <a href='#!/api/Ext.data.JsonStore-setProxy'>setProxy</a> for details.\n",
                "type": "String/Ext.data.proxy.Proxy/Object",
                "src": {
                  "name": "2,67,54",
                  "since": "2,70,19",
                  "text": "2,68,12,135",
                  "type": "2,67,18"
                }
              },
              {
                "$type": "property",
                "name": "remoteFilter",
                "optional": true,
                "text": "`true` to defer any filtering operation to the server. If `false`, filtering is done locally on the client.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "3,84,27",
                  "text": "3,85,11,108",
                  "type": "3,84,17",
                  "value": "3,84,40"
                }
              },
              {
                "$type": "property",
                "name": "remoteSort",
                "optional": true,
                "text": "`true` if the sorting should be performed on the server side, false if it is local only.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "3,75,27",
                  "text": "3,76,11,89",
                  "type": "3,75,17",
                  "value": "3,75,38"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "role",
                "optional": true,
                "text": "The role for the <a href='#!/api/Ext.data.JsonStore-cfg-associatedEntity'>associatedEntity</a>.\n",
                "type": "Ext.data.schema.Role",
                "src": {
                  "access": "1,256,12",
                  "name": "1,253,41",
                  "text": "1,254,12,45",
                  "type": "1,253,18"
                }
              },
              {
                "$type": "property",
                "name": "session",
                "since": "5.0.0",
                "text": "The session for this store. By specifying a session, it ensures any records that are\nadded to this store are also included in the session. This store does not become a member\nof the session itself.\n",
                "type": "Ext.data.Session",
                "src": {
                  "name": "1,261,36",
                  "since": "1,266,20",
                  "text": "1,262,12,199",
                  "type": "1,261,18"
                }
              },
              {
                "$type": "property",
                "name": "sortOnLoad",
                "text": "If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired.\nDefaults to true, ignored if <a href='#!/api/Ext.data.Store-cfg-remoteSort'>Ext.data.Store#remoteSort</a> is true\n",
                "type": "Boolean",
                "src": {
                  "name": "2,103,27",
                  "text": "2,104,12,197",
                  "type": "2,103,18"
                }
              },
              {
                "$type": "property",
                "name": "sorters",
                "text": "The initial set of <a href='#!/api/Ext.util.Sorter'>Ext.util.Sorter</a>\n",
                "type": "Ext.util.Sorter[]/Object[]",
                "src": {
                  "name": "3,69,46",
                  "text": "3,70,12,51",
                  "type": "3,69,18"
                }
              },
              {
                "$type": "property",
                "name": "statefulFilters",
                "optional": true,
                "text": "Configure as `true` to have the filters saved when a client <a href='#!/api/Ext.grid.Panel'>Ext.grid.Panel</a> saves its state.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "3,63,28",
                  "text": "3,64,12,105",
                  "type": "3,63,18",
                  "value": "3,63,44"
                }
              },
              {
                "$type": "property",
                "name": "storeId",
                "text": "Unique identifier for this store. If present, this Store will be registered with the <a href='#!/api/Ext.data.StoreManager'>Ext.data.StoreManager</a>,\nmaking it easy to reuse elsewhere.\n\nNote that when a store is instantiated by a Controller, the storeId will default\nto the name of the store if not specified in the class.\n",
                "type": "String",
                "src": {
                  "name": "3,53,26",
                  "text": "3,54,12,289",
                  "type": "3,53,18"
                }
              },
              {
                "$type": "property",
                "name": "trackRemoved",
                "optional": true,
                "text": "This config controls whether removed records are remembered by this store for\nlater saving to the server.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "2,110,28",
                  "text": "2,111,12,106",
                  "type": "2,110,18",
                  "value": "2,110,41"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "add",
                "since": "1.1.0",
                "text": "Fired when a Model instance has been added to this Store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store.\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "3,175,36",
                      "text": "3,175,42,11",
                      "type": "3,175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "The records that were added.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "3,176,38",
                      "text": "3,176,46,29",
                      "type": "3,176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which the records were inserted.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,177,28",
                      "text": "3,177,34,46",
                      "type": "3,177,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,172,19",
                  "since": "3,178,19",
                  "text": "3,173,12,59"
                }
              },
              {
                "$type": "event",
                "name": "beforeload",
                "since": "1.1.0",
                "text": "Fires before a request is made for a new data object. If the beforeload handler returns false the load\naction will be canceled.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "This Store\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "2,190,36",
                      "text": "2,190,42,11",
                      "type": "2,190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The Ext.data.operation.Operation object that will be passed to the Proxy to\nload the Store\n",
                    "type": "Ext.data.operation.Operation",
                    "src": {
                      "name": "2,191,50",
                      "text": "2,191,60,76:2,192,12,15",
                      "type": "2,191,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,187,19",
                  "since": "2,193,19",
                  "text": "2,188,12,128"
                }
              },
              {
                "$type": "event",
                "name": "beforeprefetch",
                "text": "Fires before a prefetch occurs. Return `false` to cancel.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "1,334,36",
                      "type": "1,334,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The associated operation.\n",
                    "type": "Ext.data.operation.Operation",
                    "src": {
                      "name": "1,335,50",
                      "text": "1,335,60,26",
                      "type": "1,335,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,332,19",
                  "text": "1,333,12,58"
                }
              },
              {
                "$type": "event",
                "name": "beforesort",
                "text": "Fires before a store is sorted.\n\nFor <a href='#!/api/Ext.data.JsonStore-cfg-remoteSort'>remoteSort</a> stores, this will be just before the load operation triggered by changing the\nstore's sorters.\n\nFor locally sorted stores, this will be just before the data items in the store's backing collection are sorted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store being sorted\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "3,257,36",
                      "text": "3,257,42,23",
                      "type": "3,257,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "Array of sorters applied to the store\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "name": "3,258,39",
                      "text": "3,258,47,38",
                      "type": "3,258,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,250,19",
                  "text": "3,251,12,282"
                }
              },
              {
                "$type": "event",
                "name": "beforesync",
                "text": "Fired before a call to <a href='#!/api/Ext.data.JsonStore-method-sync'>sync</a> is executed. Return false from any listener to cancel the sync\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "Hash of all records to be synchronized, broken down into create, update and destroy\n",
                    "type": "Object",
                    "src": {
                      "name": "2,220,28",
                      "text": "2,220,36,84",
                      "type": "2,220,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,218,19",
                  "text": "2,219,12,100"
                }
              },
              {
                "$type": "event",
                "name": "beginupdate",
                "text": "Fires when the <a href='#!/api/Ext.data.JsonStore-method-beginUpdate'>beginUpdate</a> method is called. Automatic synchronization as configured\nby the <a href='#!/api/Ext.data.ProxyStore-cfg-autoSync'>Ext.data.ProxyStore#autoSync</a> flag is deferred until the <a href='#!/api/Ext.data.JsonStore-method-endUpdate'>endUpdate</a> method is called, so multiple\nmutations can be coalesced into one synchronization operation.\n",
                "src": {
                  "name": "3,236,19",
                  "text": "3,237,12,286"
                }
              },
              {
                "$type": "event",
                "name": "clear",
                "since": "1.1.0",
                "text": "Fired after the <a href='#!/api/Ext.data.Store-method-removeAll'>Ext.data.Store#removeAll</a> method is called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "3,215,36",
                      "type": "3,215,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,213,19",
                  "since": "3,216,19",
                  "text": "3,214,12,77"
                }
              },
              {
                "$type": "event",
                "name": "datachanged",
                "since": "1.1.0",
                "text": "Fires whenever records are added to or removed from the Store.\n\nTo hook into modifications of records in this Store use the <a href='#!/api/Ext.data.JsonStore-event-update'>update</a> event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The data store\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "3,224,36",
                      "text": "3,224,41,15",
                      "type": "3,224,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,220,19",
                  "since": "3,225,19",
                  "text": "3,221,12,147"
                }
              },
              {
                "$type": "event",
                "name": "endupdate",
                "text": "Fires when the <a href='#!/api/Ext.data.JsonStore-method-endUpdate'>endUpdate</a> method is called. Automatic synchronization as configured\nby the <a href='#!/api/Ext.data.ProxyStore-cfg-autoSync'>Ext.data.ProxyStore#autoSync</a> flag is deferred until the <a href='#!/api/Ext.data.JsonStore-method-endUpdate'>endUpdate</a> method is called, so multiple\nmutations can be coalesced into one synchronization operation.\n",
                "src": {
                  "name": "3,243,19",
                  "text": "3,244,12,284"
                }
              },
              {
                "$type": "event",
                "name": "filterchange",
                "text": "Fired whenever the filter set changes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store.\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "1,354,36",
                      "text": "1,354,42,11",
                      "type": "1,354,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "filters",
                    "text": "The array of Filter objects.\n",
                    "type": "Ext.util.Filter[]",
                    "src": {
                      "name": "1,355,39",
                      "text": "1,355,47,29",
                      "type": "1,355,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,352,19",
                  "text": "1,353,12,39"
                }
              },
              {
                "$type": "event",
                "name": "groupchange",
                "text": "Fired whenever the grouping in the grid changes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store.\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "1,340,36",
                      "text": "1,340,42,11",
                      "type": "1,340,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouper",
                    "text": "The grouper object.\n",
                    "type": "Ext.util.Grouper",
                    "src": {
                      "name": "1,341,38",
                      "text": "1,341,46,20",
                      "type": "1,341,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,338,19",
                  "text": "1,339,12,49"
                }
              },
              {
                "$type": "event",
                "name": "load",
                "since": "1.1.0",
                "text": "Fires whenever the store reads data from a remote data source.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "2,199,36",
                      "type": "2,199,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "An array of records\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "2,200,38",
                      "text": "2,200,46,20",
                      "type": "2,200,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "successful",
                    "text": "True if the operation was successful.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,201,29",
                      "text": "2,201,40,38",
                      "type": "2,201,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The\n<a href='#!/api/Ext.data.operation.Read'>Ext.data.operation.Read</a> object that was used in the data\nload call\n",
                    "type": "Ext.data.operation.Read",
                    "src": {
                      "name": "2,202,45",
                      "text": "2,202,55,4:2,203,12,85",
                      "type": "2,202,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,197,19",
                  "since": "2,205,19",
                  "text": "2,198,12,63"
                }
              },
              {
                "$type": "event",
                "name": "metachange",
                "since": "1.1.0",
                "text": "Fires when this store's underlying reader (available via the proxy) provides new metadata.\nMetadata usually consists of new field definitions, but can include any configuration data\nrequired by an application, and can be processed as needed in the event handler.\nThis event is currently only fired for JsonReaders.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "2,229,36",
                      "type": "2,229,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "meta",
                    "text": "The JSON metadata\n",
                    "type": "Object",
                    "src": {
                      "name": "2,230,28",
                      "text": "2,230,33,18",
                      "type": "2,230,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,224,19",
                  "since": "2,231,19",
                  "text": "2,225,12,315"
                }
              },
              {
                "$type": "event",
                "name": "prefetch",
                "text": "Fires whenever records have been prefetched.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "1,346,36",
                      "type": "1,346,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "An array of records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "1,347,38",
                      "text": "1,347,46,21",
                      "type": "1,347,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "successful",
                    "text": "`true` if the operation was successful.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,348,29",
                      "text": "1,348,40,40",
                      "type": "1,348,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The associated operation.\n",
                    "type": "Ext.data.operation.Operation",
                    "src": {
                      "name": "1,349,50",
                      "text": "1,349,60,26",
                      "type": "1,349,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,344,19",
                  "text": "1,345,12,45"
                }
              },
              {
                "$type": "event",
                "name": "refresh",
                "text": "Fires when the data cache has changed in a bulk manner (e.g., it has been sorted, filtered, etc.) and a\nwidget that is using this Store as a Record cache should refresh its view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The data store\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "3,232,36",
                      "text": "3,232,41,15",
                      "type": "3,232,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,229,19",
                  "text": "3,230,12,179"
                }
              },
              {
                "$type": "event",
                "name": "remove",
                "since": "5.0.0",
                "text": "Fired when one or more records have been removed from this Store.\n\n**The signature for this event has changed in 5.0: **\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The Store object\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "3,187,36",
                      "text": "3,187,42,17",
                      "type": "3,187,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "The records that were removed. In previous\nreleases this was a single record, not an array.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "3,188,38",
                      "text": "3,188,46,43:3,189,12,49",
                      "type": "3,188,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which the records were removed.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,190,28",
                      "text": "3,190,34,45",
                      "type": "3,190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isMove",
                    "text": "`true` if the child node is being removed so it can be\nmoved to another position in this Store.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,191,29",
                      "text": "3,191,36,55:3,192,12,41",
                      "type": "3,191,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,182,19",
                  "since": "3,193,19",
                  "text": "3,183,12,122"
                }
              },
              {
                "$type": "event",
                "name": "sort",
                "text": "Fires after a store is sorted.\n\nFor <a href='#!/api/Ext.data.JsonStore-cfg-remoteSort'>remoteSort</a> stores, this will be upon the success of a load operation triggered by\nchanging the store's sorters.\n\nFor locally sorted stores, this will be just after the data items in the store's backing collection are sorted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store being sorted\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "3,269,36",
                      "text": "3,269,42,23",
                      "type": "3,269,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,262,19",
                  "text": "3,263,12,286"
                }
              },
              {
                "$type": "event",
                "name": "update",
                "since": "1.1.0",
                "text": "Fires when a Model instance has been updated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "3,199,36",
                      "type": "3,199,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The Model instance that was updated\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "3,200,36",
                      "text": "3,200,43,36",
                      "type": "3,200,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The update operation being performed. Value may be one of:\n\n    Ext.data.Model.EDIT\n    Ext.data.Model.REJECT\n    Ext.data.Model.COMMIT\n",
                    "type": "String",
                    "src": {
                      "name": "3,201,28",
                      "text": "3,201,38,59:3,202,12,77",
                      "type": "3,201,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "modifiedFieldNames",
                    "text": "Array of field names changed during edit.\n",
                    "type": "String[]",
                    "src": {
                      "name": "3,206,30",
                      "text": "3,206,49,42",
                      "type": "3,206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "An object describing the change. See the\n<a href='#!/api/Ext.util.Collection-event-itemchange'>Ext.util.Collection#event-itemchange</a> of the store's backing collection\n",
                    "type": "Object",
                    "src": {
                      "name": "3,207,28",
                      "text": "3,207,36,41:3,208,12,96",
                      "type": "3,207,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,197,19",
                  "since": "3,209,19",
                  "text": "3,198,12,46"
                }
              },
              {
                "$type": "event",
                "name": "write",
                "since": "3.4.0",
                "text": "Fires whenever a successful write has been made via the configured <a href='#!/api/Ext.data.JsonStore-cfg-proxy'>proxy</a>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "This Store\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "2,211,36",
                      "text": "2,211,42,11",
                      "type": "2,211,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The <a href='#!/api/Ext.data.operation.Operation'>Ext.data.operation.Operation</a> object that was used in\nthe write\n",
                    "type": "Ext.data.operation.Operation",
                    "src": {
                      "name": "2,212,50",
                      "text": "2,212,60,75:2,213,12,10",
                      "type": "2,212,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,209,19",
                  "since": "2,214,19",
                  "text": "2,210,12,88"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "4,413,27",
                      "type": "4,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,414,30,35",
                      "type": "4,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "4,412,12",
                  "name": "4,416,0",
                  "text": "4,411,12,65"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#add",
                "name": "add",
                "src": {
                  "inheritdoc": "1,611,8",
                  "name": "1,610,16"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for <a href='#!/api/Ext.data.JsonStore-method-onAfter'>onAfter</a>.\n",
                "src": {
                  "name": "4,1236,0",
                  "text": "4,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.data.JsonStore-method-onBefore'>onBefore</a>.\n",
                "src": {
                  "name": "4,1230,0",
                  "text": "4,1228,12,29"
                }
              },
              {
                "$type": "method",
                "name": "addFilter",
                "text": "Adds a new Filter to this Store's <a href='#!/api/Ext.data.JsonStore-cfg-filters'>cfg-filters</a> and\nby default, applies the updated filter set to the Store's unfiltered dataset.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "filters",
                    "text": "The set of filters to add to the current <a href='#!/api/Ext.data.JsonStore-cfg-filters'>cfg-filters</a>.\n",
                    "type": "Object[]/Ext.util.Filter[]",
                    "src": {
                      "name": "3,600,44",
                      "text": "3,600,52,74",
                      "type": "3,600,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "suppressEvent",
                    "optional": true,
                    "text": "If `true` the filter is cleared silently.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,601,26",
                      "text": "3,601,41,42",
                      "type": "3,601,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,603,0",
                  "text": "3,598,8,148"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The <a href='#!/api/Ext.data.JsonStore-method-on'>on</a> method is shorthand for\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "4,835,35",
                      "text": "4,835,45,37:4,836,12,61",
                      "type": "4,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,838,38",
                      "text": "4,838,42,46:4,839,12,166",
                      "type": "4,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "4,843,29",
                      "text": "4,843,36,62:4,844,12,73",
                      "type": "4,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "4,853,36",
                          "text": "4,854,12,139",
                          "type": "4,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,857,36",
                          "text": "4,858,12,94",
                          "type": "4,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "4,861,37",
                          "text": "4,862,12,96",
                          "type": "4,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an <a href='#!/api/Ext.util.DelayedTask'>Ext.util.DelayedTask</a> delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,865,36",
                          "text": "4,866,12,262",
                          "type": "4,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  <a href='#!/api/Ext.Function-method-requestAnimationFrame'>Ext.Function#requestAnimationFrame</a>. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,870,36",
                          "text": "4,871,12,323",
                          "type": "4,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "4,877,49",
                          "text": "4,878,12,135",
                          "type": "4,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.Component'>Ext.Component</a>.**\n  The name of a Component property which references an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of <a href='#!/api/Ext.Component'>Ext.Component</a> which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "4,881,36",
                          "text": "4,882,12,781",
                          "type": "4,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "4,905,37",
                          "text": "4,906,12,295",
                          "type": "4,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopPropagation'>Ext.event.Event#stopPropagation</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "4,914,38",
                          "text": "4,915,12,212",
                          "type": "4,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-preventDefault'>Ext.event.Event#preventDefault</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "4,919,38",
                          "text": "4,920,12,210",
                          "type": "4,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopEvent'>Ext.event.Event#stopEvent</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "4,924,38",
                          "text": "4,925,12,200",
                          "type": "4,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "4,929,36",
                          "text": "4,930,12,179",
                          "type": "4,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `destroy` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using <a href='#!/api/Ext.data.JsonStore-method-un'>un</a>; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See <a href='#!/api/Ext.data.JsonStore-method-un'>un</a> for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "4,934,38",
                          "text": "4,935,12,441",
                          "type": "4,934,20",
                          "value": "4,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "4,942,37",
                          "text": "4,943,12,737",
                          "type": "4,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "4,954,37",
                          "text": "4,955,12,301",
                          "type": "4,954,20",
                          "value": "4,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "4,846,29",
                      "text": "4,846,38,44:4,847,12,154",
                      "type": "4,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "4,962,29",
                      "text": "4,963,12,1831",
                      "type": "4,962,20",
                      "value": "4,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "4,1021,29,54:4,1022,12,516",
                      "type": "4,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "4,1041,0",
                  "text": "4,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use <a href='#!/api/Ext.data.JsonStore-method-mon'>mon</a> or <a href='#!/api/Ext.data.JsonStore-method-addManagedListener'>addManagedListener</a> if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "4,456,56",
                      "text": "4,456,61,47",
                      "type": "4,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "4,457,34",
                      "text": "4,457,40,63",
                      "type": "4,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,458,36",
                      "text": "4,458,39,49:4,459,11,85",
                      "type": "4,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,461,27",
                      "text": "4,461,33,92:4,462,11,43",
                      "type": "4,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> options.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,463,27",
                      "text": "4,463,35,67:4,464,11,61",
                      "type": "4,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "4,465,28,54:4,466,11,513",
                      "type": "4,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,484,0",
                  "text": "4,430,11,1093"
                }
              },
              {
                "$type": "method",
                "name": "addSorted",
                "text": "(Local sort only) Inserts the passed Record into the Store at the index where it\nshould go based on the current sort information.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "1,618,33",
                      "type": "1,618,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,620,0",
                  "text": "1,615,8,131"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterCommit",
                "since": "3.4.0",
                "text": "A model instance should call this method on the Store it has been <a href='#!/api/Ext.data.Model-method-join'>Ext.data.Model#join</a> to.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The model instance that was edited\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "2,888,32",
                      "text": "2,888,39,35",
                      "type": "2,888,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,886,8",
                  "name": "2,891,0",
                  "since": "2,889,15",
                  "text": "2,887,8,105"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterReject",
                "since": "3.4.0",
                "text": "A model instance should call this method on the Store it has been <a href='#!/api/Ext.data.Model-method-join'>Ext.data.Model#join</a> to..\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The model instance that was edited\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "2,869,32",
                      "text": "2,869,39,35",
                      "type": "2,869,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,867,8",
                  "name": "2,872,0",
                  "since": "2,870,15",
                  "text": "2,868,8,106"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#aggregate",
                "name": "aggregate",
                "src": {
                  "inheritdoc": "1,1447,8",
                  "name": "1,1446,16"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyState",
                "text": "Restores state to the passed state\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "src": {
                      "name": "3,795,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,792,8",
                  "name": "3,795,0",
                  "text": "3,793,8,35"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#average",
                "name": "average",
                "src": {
                  "inheritdoc": "1,1442,8",
                  "name": "1,1441,16"
                }
              },
              {
                "$type": "method",
                "name": "beginUpdate",
                "since": "5.0.0",
                "text": "This method may be called to indicate the start of multiple changes to the store.\n\nAutomatic synchronization as configured by the <a href='#!/api/Ext.data.ProxyStore-cfg-autoSync'>Ext.data.ProxyStore#autoSync</a> flag is deferred\nuntil the <a href='#!/api/Ext.data.JsonStore-method-endUpdate'>endUpdate</a> method is called, so multiple mutations can be coalesced\ninto one synchronization operation.\n\nInternally this method increments a counter that is decremented by <a href='#!/api/Ext.data.JsonStore-method-endUpdate'>endUpdate</a>. It\nis important, therefore, that if you call <a href='#!/api/Ext.data.JsonStore-method-beginUpdate'>beginUpdate</a> directly you match that\ncall with a call to <a href='#!/api/Ext.data.JsonStore-method-endUpdate'>endUpdate</a> or you will prevent the collection from updating\nproperly.\n\nFor example:\n\n     var store = Ext.StoreManager.lookup({\n         //...\n         autoSync: true\n     });\n\n     store.beginUpdate();\n\n     record.set('fieldName', 'newValue');\n\n     store.add(item);\n     // ...\n\n     store.insert(index, otherItem);\n     //...\n\n     // Interested parties will listen for the endupdate event\n     store.endUpdate();\n",
                "src": {
                  "name": "3,723,0",
                  "since": "3,721,15",
                  "text": "3,690,8,919"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "clearData",
                "items": [
                  {
                    "$type": "param",
                    "name": "isLoad",
                    "src": {
                      "name": "1,1073,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,1071,8",
                  "name": "1,1073,0"
                }
              },
              {
                "$type": "method",
                "name": "clearFilter",
                "text": "Reverts to a view of the Record cache with no filtering applied.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "suppressEvent",
                    "optional": true,
                    "text": "If `true` the filter is cleared silently.\n\nFor a locally filtered Store, this means that the filter collection is cleared without firing the\n<a href='#!/api/Ext.data.JsonStore-event-datachanged'>datachanged</a> event.\n\nFor a remotely filtered Store, this means that the filter collection is cleared, but the store\nis not reloaded from the server.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,632,26",
                      "text": "3,632,41,42:3,633,8,256",
                      "type": "3,632,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,640,0",
                  "text": "3,631,8,65"
                }
              },
              {
                "$type": "method",
                "name": "clearGrouping",
                "text": "Clear the store grouping\n",
                "src": {
                  "name": "3,1050,0",
                  "text": "3,1048,8,25"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "4,1255,0",
                  "text": "4,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "4,1291,0",
                  "text": "4,1289,11,47"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#collect",
                "name": "collect",
                "src": {
                  "inheritdoc": "1,1377,8",
                  "name": "1,1376,16"
                }
              },
              {
                "$type": "method",
                "name": "commitChanges",
                "text": "Commits all Records with <a href='#!/api/Ext.data.JsonStore-method-getModifiedRecords'>getModifiedRecords</a>. To handle updates for changes,\nsubscribe to the Store's <a href='#!/api/Ext.data.JsonStore-event-update'>event-update</a>, and perform updating when the third parameter is\nExt.data.Record.COMMIT.\n",
                "src": {
                  "name": "1,1118,0",
                  "text": "1,1114,8,239"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates the store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "Config object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,306,25",
                      "text": "1,306,33,15",
                      "type": "1,306,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,308,0",
                  "text": "1,305,8,19"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "text": "Checks if a record is in the current active data set.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "3,317,32",
                      "text": "3,317,39,11",
                      "type": "3,317,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the record is in the current active data set.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,318,26,56",
                      "type": "3,318,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,319,16",
                  "text": "3,316,8,54"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#count",
                "name": "count",
                "src": {
                  "inheritdoc": "1,1427,8",
                  "name": "1,1426,16"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createModel",
                "text": "Converts a literal to a model, if it's not a model already\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record to create\n",
                    "type": "Ext.data.Model/Object",
                    "src": {
                      "name": "5,63,39",
                      "text": "5,63,46,21",
                      "type": "5,63,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Model",
                    "src": {
                      "type": "5,64,17"
                    }
                  }
                ],
                "src": {
                  "access": "5,62,8",
                  "name": "5,66,0",
                  "text": "5,61,8,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "4,1522,27",
                      "text": "4,1522,35,55",
                      "type": "4,1522,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "4,1523,26",
                      "text": "4,1523,35,61",
                      "type": "4,1523,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "4,1524,20"
                    }
                  }
                ],
                "src": {
                  "access": "4,1520,11",
                  "name": "4,1526,0",
                  "text": "4,1521,11,103"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "4,761,27",
                      "type": "4,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "4,762,26",
                      "type": "4,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "4,763,28",
                      "type": "4,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "4,759,11",
                  "name": "4,765,0",
                  "text": "4,758,11,24"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#each",
                "name": "each",
                "src": {
                  "inheritdoc": "1,1372,8",
                  "name": "1,1371,16"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "4,1567,36",
                      "text": "4,1567,47,54",
                      "type": "4,1567,19"
                    }
                  }
                ],
                "src": {
                  "name": "4,1569,0",
                  "text": "4,1534,11,1138"
                }
              },
              {
                "$type": "method",
                "name": "endUpdate",
                "since": "5.0.0",
                "text": "This method is called after modifications are complete on a store. For details\nsee <a href='#!/api/Ext.data.JsonStore-method-beginUpdate'>beginUpdate</a>.\n",
                "src": {
                  "name": "3,734,0",
                  "since": "3,732,15",
                  "text": "3,730,8,107"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fetch",
                "text": "Similar to a load, however no records are added to the store. This is useful\nin allowing the developer to decide what to do with the new records.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "See <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a>.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1235,29",
                      "text": "1,1235,38,39",
                      "type": "1,1235,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,1237,12",
                  "name": "1,1239,0",
                  "text": "1,1233,12,146"
                }
              },
              {
                "$type": "method",
                "name": "filter",
                "text": "Filters the data in the Store by one or more fields. Example usage:\n\n    //filter with a single field\n    myStore.filter('firstName', 'Don');\n\n    //filtering with multiple filters\n    myStore.filter([\n        {\n            property : 'firstName',\n            value    : 'Don'\n        },\n        {\n            property : 'lastName',\n            direction: 'Griffin'\n        }\n    ]);\n\nInternally, Store converts the passed arguments into an array of <a href='#!/api/Ext.util.Filter'>Ext.util.Filter</a> instances, and delegates\nthe actual filtering to its internal <a href='#!/api/Ext.util.MixedCollection'>Ext.util.MixedCollection</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "filters",
                    "optional": true,
                    "text": "Either a string name of one of the fields in this Store's configured\n<a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, or an array of filter configurations.\n",
                    "type": "String/Ext.util.Filter[]",
                    "src": {
                      "name": "3,546,43",
                      "text": "3,546,52,69:3,547,8,68",
                      "type": "3,546,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The property value by which to filter. Only applicable if <a href='#!/api/Ext.data.JsonStore-cfg-filters'>filters</a> is a string.\n",
                    "type": "String",
                    "src": {
                      "name": "3,548,25",
                      "text": "3,548,32,81",
                      "type": "3,548,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,550,0",
                  "text": "3,526,8,571"
                }
              },
              {
                "$type": "method",
                "name": "filterBy",
                "text": "Filters by a function. The specified function will be called for each\nRecord in this Store. If the function returns `true` the Record is included,\notherwise it is filtered out.\n\nWhen store is filtered, most of the methods for accessing store data will be working only\nwithin the set of filtered records. The notable exception is <a href='#!/api/Ext.data.JsonStore-method-getById'>getById</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called. It will be passed the following parameters:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record to test for filtering. Access field values\n using <a href='#!/api/Ext.data.Model-method-get'>Ext.data.Model#get</a>.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "3,618,36",
                          "text": "3,618,43,54:3,619,8,35",
                          "type": "3,618,17"
                        }
                      }
                    ],
                    "src": {
                      "name": "3,617,26",
                      "text": "3,617,29,71",
                      "type": "3,617,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed.\nDefaults to this Store.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,620,25",
                      "text": "3,620,32,62:3,621,8,24",
                      "type": "3,620,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,623,0",
                  "text": "3,610,8,348"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "filterNew",
                "text": "Filter function for new records.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "2,532,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,529,8",
                  "name": "2,532,0",
                  "text": "2,530,8,33"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "filterUpdated",
                "text": "Filter function for updated records.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "2,567,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,564,8",
                  "name": "2,567,0",
                  "text": "2,565,8,37"
                }
              },
              {
                "$type": "method",
                "name": "find",
                "text": "Finds the index of the first matching Record in this store by a specific field value.\n\nWhen store is filtered, finds records only within filter.\n\n**IMPORTANT\n\nIf this store is <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>, this can ONLY find records which happen to be cached in the page cache.\nThis will be parts of the dataset around the currently visible zone, or recently visited zones if the pages\nhave not yet been purged from the cache.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the Record field to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,333,24",
                      "text": "3,333,33,38",
                      "type": "3,333,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Either a string that the field value\nshould begin with, or a RegExp to test against the field.\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "3,334,31",
                      "text": "3,334,37,37:3,335,8,58",
                      "type": "3,334,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startIndex",
                    "optional": true,
                    "text": "The index to start searching at\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,336,25",
                      "text": "3,336,39,32",
                      "type": "3,336,16",
                      "value": "3,336,36"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "optional": true,
                    "text": "True to match any part of the string, not just the\nbeginning.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,337,26",
                      "text": "3,337,42,51:3,338,8,11",
                      "type": "3,337,16",
                      "value": "3,337,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "optional": true,
                    "text": "True for case sensitive comparison\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,339,26",
                      "text": "3,339,47,35",
                      "type": "3,339,16",
                      "value": "3,339,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "exactMatch",
                    "optional": true,
                    "text": "True to force exact match (^ and $ characters\nadded to the regex). Ignored if `anyMatch` is `true`.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,340,26",
                      "text": "3,340,44,46:3,341,8,54",
                      "type": "3,340,16",
                      "value": "3,340,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1\n",
                    "type": "Number",
                    "src": {
                      "text": "3,342,25,24",
                      "type": "3,342,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,344,0",
                  "text": "3,323,8,441"
                }
              },
              {
                "$type": "method",
                "name": "findBy",
                "text": "Find the index of the first matching Record in this Store by a function.\nIf the function returns `true` it is considered a match.\n\nWhen store is filtered, finds records only within filter.\n\n**IMPORTANT\n\nIf this store is <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>, this can ONLY find records which happen to be cached in the page cache.\nThis will be parts of the dataset around the currently visible zone, or recently visited zones if the pages\nhave not yet been purged from the cache.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called. It will be passed the following parameters:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record to test for filtering. Access field values\n using <a href='#!/api/Ext.data.Model-method-get'>Ext.data.Model#get</a>.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "3,421,36",
                          "text": "3,421,43,54:3,422,8,35",
                          "type": "3,421,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "id",
                        "text": "The ID of the Record passed.\n",
                        "type": "Object",
                        "src": {
                          "name": "3,423,28",
                          "text": "3,423,31,29",
                          "type": "3,423,17"
                        }
                      }
                    ],
                    "src": {
                      "name": "3,420,26",
                      "text": "3,420,29,71",
                      "type": "3,420,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed.\nDefaults to this Store.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,424,25",
                      "text": "3,424,32,62:3,425,8,24",
                      "type": "3,424,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startIndex",
                    "optional": true,
                    "text": "The index to start searching at\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,426,25",
                      "text": "3,426,39,32",
                      "type": "3,426,16",
                      "value": "3,426,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1\n",
                    "type": "Number",
                    "src": {
                      "text": "3,427,25,24",
                      "type": "3,427,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,429,0",
                  "text": "3,409,8,485"
                }
              },
              {
                "$type": "method",
                "name": "findExact",
                "text": "Finds the index of the first matching Record in this store by a specific field value.\n\nWhen store is filtered, finds records only within filter.\n\n**IMPORTANT\n\nIf this store is <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>, this can ONLY find records which happen to be cached in the page cache.\nThis will be parts of the dataset around the currently visible zone, or recently visited zones if the pages\nhave not yet been purged from the cache.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fieldName",
                    "text": "The name of the Record field to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,397,24",
                      "text": "3,397,34,38",
                      "type": "3,397,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to match the field against.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,398,24",
                      "text": "3,398,30,38",
                      "type": "3,398,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startIndex",
                    "optional": true,
                    "text": "The index to start searching at\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,399,25",
                      "text": "3,399,39,32",
                      "type": "3,399,16",
                      "value": "3,399,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1\n",
                    "type": "Number",
                    "src": {
                      "text": "3,400,25,24",
                      "type": "3,400,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,402,0",
                  "text": "3,387,8,441"
                }
              },
              {
                "$type": "method",
                "name": "findRecord",
                "text": "Finds the first matching Record in this store by a specific field value.\n\nWhen store is filtered, finds records only within filter.\n\n**IMPORTANT\n\nIf this store is <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>, this can ONLY find records which happen to be cached in the page cache.\nThis will be parts of the dataset around the currently visible zone, or recently visited zones if the pages\nhave not yet been purged from the cache.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fieldName",
                    "text": "The name of the Record field to test.\n",
                    "type": "String",
                    "src": {
                      "name": "3,369,24",
                      "text": "3,369,34,38",
                      "type": "3,369,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Either a string that the field value\nshould begin with, or a RegExp to test against the field.\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "3,370,31",
                      "text": "3,370,37,37:3,371,8,58",
                      "type": "3,370,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startIndex",
                    "optional": true,
                    "text": "The index to start searching at\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "3,372,25",
                      "text": "3,372,39,32",
                      "type": "3,372,16",
                      "value": "3,372,36"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "optional": true,
                    "text": "True to match any part of the string, not just the\nbeginning.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,373,26",
                      "text": "3,373,42,51:3,374,8,11",
                      "type": "3,373,16",
                      "value": "3,373,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "optional": true,
                    "text": "True for case sensitive comparison\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,375,26",
                      "text": "3,375,47,35",
                      "type": "3,375,16",
                      "value": "3,375,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "exactMatch",
                    "optional": true,
                    "text": "True to force exact match (^ and $ characters\nadded to the regex). Ignored if `anyMatch` is `true`.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,376,26",
                      "text": "3,376,44,46:3,377,8,54",
                      "type": "3,376,16",
                      "value": "3,376,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched record or null\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "3,378,33,27",
                      "type": "3,378,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,380,0",
                  "text": "3,359,8,428"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use <a href='#!/api/Ext.data.JsonStore-fireEventAction'>fireEventAction</a> instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "4,640,28",
                      "text": "4,640,38,31",
                      "type": "4,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "4,641,27",
                      "text": "4,641,32,58",
                      "type": "4,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "4,642,30",
                      "text": "4,642,33,21",
                      "type": "4,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "4,643,29",
                      "text": "4,643,36,62:4,644,12,72",
                      "type": "4,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "4,645,29",
                      "text": "4,645,38,52:4,646,12,72",
                      "type": "4,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "4,647,29",
                      "text": "4,647,45,47:4,648,12,394",
                      "type": "4,647,20",
                      "value": "4,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "4,653,12",
                  "deprecatedVersion": "4,653,12",
                  "name": "4,655,0",
                  "text": "4,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>).\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.data.JsonStore-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "4,568,27",
                      "text": "4,568,37,31",
                      "type": "4,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "4,569,30",
                      "text": "4,569,35,54",
                      "type": "4,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,570,29,77",
                      "type": "4,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,572,0",
                  "text": "4,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.data.JsonStore-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "4,605,27",
                      "text": "4,605,37,31",
                      "type": "4,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "4,606,29",
                      "text": "4,606,34,53",
                      "type": "4,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,607,29,77",
                      "type": "4,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,609,0",
                  "text": "4,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "4,721,28",
                      "text": "4,721,38,31",
                      "type": "4,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "4,722,27",
                      "text": "4,722,32,58",
                      "type": "4,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,723,37",
                      "text": "4,723,40,21",
                      "type": "4,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "4,724,29",
                      "text": "4,724,36,62:4,725,12,72",
                      "type": "4,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "4,726,36",
                      "text": "4,726,44,47:4,727,12,201",
                      "type": "4,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,731,0",
                  "text": "4,714,12,409"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#first",
                "name": "first",
                "src": {
                  "inheritdoc": "1,1412,8",
                  "name": "1,1411,16"
                }
              },
              {
                "$type": "method",
                "name": "flushLoad",
                "text": "Called when the event handler which called the <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a> method exits.\n",
                "src": {
                  "name": "2,768,0",
                  "text": "2,766,8,82"
                }
              },
              {
                "$type": "method",
                "name": "getAt",
                "text": "Get the Record at the specified index.\n\nThe index is effected by filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the Record to find.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,438,24",
                      "text": "3,438,30,33",
                      "type": "3,438,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Record at the passed index. Returns null if not found.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "3,439,33,59",
                      "type": "3,439,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,441,0",
                  "text": "3,434,8,77"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBatchListeners",
                "text": "Returns an object which is passed in as the listeners argument to proxy.batch inside this.sync.\nThis is broken out into a separate function to allow for customisation of the listeners\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The listeners object\n",
                    "type": "Object",
                    "src": {
                      "text": "2,673,25,21",
                      "type": "2,673,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,670,8",
                  "name": "2,675,0",
                  "text": "2,671,8,184"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "4,793,41,63",
                      "type": "4,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "4,792,11",
                  "name": "4,795,0",
                  "text": "4,791,11,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#getById",
                "name": "getById",
                "src": {
                  "inheritdoc": "1,1382,8",
                  "name": "1,1381,16"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#getByInternalId",
                "name": "getByInternalId",
                "src": {
                  "inheritdoc": "1,1387,8",
                  "name": "1,1386,16"
                }
              },
              {
                "$type": "method",
                "name": "getCount",
                "text": "Gets the number of records in store.\n\nIf using paging, this may not be the total size of the dataset. If the data object\nused by the Reader contains the dataset size, then the <a href='#!/api/Ext.data.ProxyStore-method-getTotalCount'>Ext.data.ProxyStore#getTotalCount</a> function returns\nthe dataset size.  **Note**: see the Important note in <a href='#!/api/Ext.data.ProxyStore-method-load'>Ext.data.ProxyStore#method-load</a>.\n\nWhen store is filtered, it's the number of records matching the filter.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The number of Records in the Store.\n",
                    "type": "Number",
                    "src": {
                      "text": "3,294,25,36",
                      "type": "3,294,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,296,0",
                  "text": "3,286,8,405"
                }
              },
              {
                "$type": "method",
                "name": "getData",
                "text": "Returns the store's records.\n\n**Note:** If your store has been filtered, getData() will return a filtered\ncollection.  Use `getData().<a href='#!/api/Ext.util.Collection-method-getSource'>Ext.util.Collection#getSource</a> to\nfetch all unfiltered records.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "An Ext.util.Collection of records\n(an empty Collection if no records are held by the store).\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "1,379,38,34:1,380,8,59",
                      "type": "1,379,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,372,16",
                  "text": "1,373,8,219"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getDataSource",
                "text": "Returns the complete unfiltered collection.\n",
                "src": {
                  "access": "5,231,8",
                  "name": "5,233,0",
                  "text": "5,230,8,44"
                }
              },
              {
                "$type": "method",
                "name": "getFilters",
                "text": "Gets the filters for this store.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The filters\n",
                    "type": "Ext.util.FilterCollection",
                    "src": {
                      "text": "3,468,44,12",
                      "type": "3,468,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "autoCreate",
                    "src": {
                      "name": "3,470,0"
                    }
                  }
                ],
                "src": {
                  "name": "3,470,0",
                  "text": "3,467,8,33"
                }
              },
              {
                "$type": "method",
                "name": "getGroups",
                "text": "Returns a collection of readonly sub-collections of your store's records\nwith grouping applied. These sub-collections are maintained internally by\nthe collection.\n\nSee <a href='#!/api/Ext.data.JsonStore-cfg-groupField'>groupField</a>, <a href='#!/api/Ext.data.JsonStore-cfg-groupDir'>groupDir</a>. Example for a store\ncontaining records with a color field:\n\n    var myStore = Ext.create('Ext.data.Store', {\n        groupField: 'color',\n        groupDir  : 'DESC'\n    });\n\n    myStore.getGroups();\n\nThe above should result in the following format:\n\n    [\n        {\n            name: 'yellow',\n            children: [\n                // all records where the color field is 'yellow'\n            ]\n        },\n        {\n            name: 'red',\n            children: [\n                // all records where the color field is 'red'\n            ]\n        }\n    ]\n\nGroup contents are affected by filtering.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The grouped data\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "3,1111,38,17",
                      "type": "3,1111,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,1113,0",
                  "text": "3,1078,8,811"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "6,75,25,3",
                      "type": "6,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "6,77,0",
                  "text": "6,74,8,93"
                }
              },
              {
                "$type": "method",
                "name": "getModifiedRecords",
                "text": "Gets all <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> added or updated since the last commit. Note that the order of records\nreturned is not deterministic and does not indicate the order in which records were modified. Note also that\nremoved records are not included (use <a href='#!/api/Ext.data.JsonStore-method-getRemovedRecords'>getRemovedRecords</a> for that).\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The added and updated Model instances\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "2,557,35,38",
                      "type": "2,557,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,559,0",
                  "text": "2,554,8,296"
                }
              },
              {
                "$type": "method",
                "name": "getNewRecords",
                "text": "Returns all <a href='#!/api/Ext.data.Model-property-phantom'>Ext.data.Model#property-phantom</a> records in this store.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A possibly empty array of `phantom` records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "2,539,35,45",
                      "type": "2,539,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,541,0",
                  "text": "2,538,8,85"
                }
              },
              {
                "$type": "method",
                "name": "getRange",
                "text": "Gathers a range of Records between specified indices.\n\nThis method is affected by filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "start",
                    "text": "The starting index. Defaults to zero.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,450,24",
                      "text": "3,450,30,38",
                      "type": "3,450,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "text": "The ending index. Defaults to the last record. The end index **is included**.\n",
                    "type": "Number",
                    "src": {
                      "name": "3,451,24",
                      "text": "3,451,28,78",
                      "type": "3,451,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "3,452,35,21",
                      "type": "3,452,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,454,0",
                  "text": "3,446,8,94"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getRawRemovedRecords",
                "text": "Returns the array of records which have been removed since the last time this store was synced.\n\nThis is used internally, when purging removed records after a successful sync.\nThis is overridden by TreeStore because TreeStore accumulates deleted records on removal\nof child nodes from their parent, *not* on removal of records from its collection. The collection\nhas records added on expand, and removed on collapse.\n",
                "src": {
                  "access": "2,999,12",
                  "name": "2,1007,0",
                  "text": "2,1000,12,417"
                }
              },
              {
                "$type": "method",
                "name": "getRemovedRecords",
                "text": "Returns any records that have been removed from the store but not yet destroyed on the proxy.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The removed Model instances. Note that this is a *copy* of the store's\narray, so may be mutated.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "2,574,35,71:2,575,8,26",
                      "type": "2,574,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,577,0",
                  "text": "2,573,8,94"
                }
              },
              {
                "$type": "method",
                "name": "getSorters",
                "text": "Gets the sorters for this store.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The sorters\n",
                    "type": "Ext.util.SorterCollection",
                    "src": {
                      "text": "3,497,44,12",
                      "type": "3,497,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "autoCreate",
                    "src": {
                      "name": "3,499,0"
                    }
                  }
                ],
                "src": {
                  "name": "3,499,0",
                  "text": "3,496,8,33"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getState",
                "text": "Returns the grouping, sorting and filtered state of this Store.\n",
                "src": {
                  "access": "3,742,8",
                  "name": "3,745,0",
                  "text": "3,743,8,64"
                }
              },
              {
                "$type": "method",
                "name": "getTotalCount",
                "text": "Returns the total number of <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> instances that the <a href='#!/api/Ext.data.proxy.Proxy'>Ext.data.proxy.Proxy</a>\nindicates exist. This will usually differ from <a href='#!/api/Ext.data.JsonStore-method-getCount'>getCount</a> when using paging - getCount returns the\nnumber of records loaded into the Store at the moment, getTotalCount returns the number of records that\ncould be loaded into the Store if the Store contained all data\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The total number of Model instances available via the Proxy. 0 returned if\nno value has been set via the reader.\n",
                    "type": "Number",
                    "src": {
                      "text": "2,292,25,75:2,293,8,38",
                      "type": "2,292,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,295,0",
                  "text": "2,288,8,384"
                }
              },
              {
                "$type": "method",
                "name": "getUpdatedRecords",
                "text": "Returns all valid, non-phantom Model instances that have been updated in the Store but not yet synchronized with the Proxy.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The updated Model instances\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "2,547,35,28",
                      "type": "2,547,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,549,0",
                  "text": "2,546,8,124"
                }
              },
              {
                "$type": "method",
                "name": "group",
                "text": "Groups data inside the store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouper",
                    "text": "Either a string name of one of the fields in this Store's\nconfigured <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, or an object, or a <a href='#!/api/Ext.util.Grouper'>Ext.util.Grouper</a> configuration object.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,1002,31",
                      "text": "3,1002,39,58:3,1003,8,115",
                      "type": "3,1002,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "direction",
                    "optional": true,
                    "text": "The overall direction to group the data by. Defaults to the value of <a href='#!/api/Ext.data.JsonStore-cfg-groupDir'>groupDir</a>.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1004,25",
                      "text": "3,1004,36,88",
                      "type": "3,1004,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,1006,0",
                  "text": "3,1001,8,30"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "4,1334,27",
                      "text": "4,1334,37,35",
                      "type": "4,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,1335,29,67",
                      "type": "4,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1337,0",
                  "text": "4,1331,11,161"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasPendingLoad",
                "text": "Returns true if the store has a pending load task.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the store has a pending load task.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,932,26,45",
                      "type": "2,932,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,933,8",
                  "name": "2,935,0",
                  "text": "2,931,8,51"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#indexOf",
                "name": "indexOf",
                "src": {
                  "inheritdoc": "1,1392,8",
                  "name": "1,1391,16"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#indexOfId",
                "name": "indexOfId",
                "src": {
                  "inheritdoc": "1,1397,8",
                  "name": "1,1396,16"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#insert",
                "name": "insert",
                "src": {
                  "inheritdoc": "1,473,8",
                  "name": "1,472,16"
                }
              },
              {
                "$type": "method",
                "name": "isFiltered",
                "text": "Tests whether the store currently has any active filters.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the store is filtered.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,654,26,33",
                      "type": "3,654,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,656,0",
                  "text": "3,653,8,58"
                }
              },
              {
                "$type": "method",
                "name": "isGrouped",
                "text": "Tests whether the store currently has an active grouper.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the store is grouped.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,1066,26,32",
                      "type": "3,1066,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,1068,0",
                  "text": "3,1065,8,57"
                }
              },
              {
                "$type": "method",
                "name": "isLoaded",
                "text": "Returns `true` if the Store has been loaded.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the Store has been loaded.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,949,26,37",
                      "type": "2,949,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,951,0",
                  "text": "2,948,8,45"
                }
              },
              {
                "$type": "method",
                "name": "isLoading",
                "text": "Returns true if the Store is currently performing a load operation\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the Store is currently loading\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,941,26,41",
                      "type": "2,941,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,943,0",
                  "text": "2,940,8,67"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isMoving",
                "text": "Checks whether records are being moved within the store. This can be used in conjunction with the\n<a href='#!/api/Ext.data.JsonStore-event-add'>event-add</a> and <a href='#!/api/Ext.data.JsonStore-event-remove'>event-remove</a> events to determine whether the records are being removed/added\nor just having the position changed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "records",
                    "optional": true,
                    "text": "The record(s).\n",
                    "type": "Ext.data.Model[]/Ext.data.Model",
                    "src": {
                      "name": "1,1271,54",
                      "text": "1,1271,63,15",
                      "type": "1,1271,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The number of records being moved. `0` if no records are moving. If records are passed\nthe number will refer to how many of the passed records are moving.\n",
                    "type": "Number",
                    "src": {
                      "text": "1,1272,29,87:1,1273,12,69",
                      "type": "1,1272,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,1275,12",
                  "name": "1,1277,0",
                  "text": "1,1268,12,244"
                }
              },
              {
                "$type": "method",
                "name": "isSorted",
                "text": "Tests whether the store currently has any active sorters.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the store is sorted.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,662,26,31",
                      "type": "3,662,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,664,0",
                  "text": "3,661,8,58"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "4,1344,29",
                      "text": "4,1344,36,40",
                      "type": "4,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,1345,30,31",
                      "type": "4,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "4,1347,0",
                  "text": "4,1343,12,57"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#last",
                "name": "last",
                "src": {
                  "inheritdoc": "1,1417,8",
                  "name": "1,1416,16"
                }
              },
              {
                "$type": "method",
                "name": "load",
                "since": "1.1.0",
                "text": "Marks this store as needing a load. When the current executing event handler exits,\nthis store will send a request to load using its configured <a href='#!/api/Ext.data.JsonStore-cfg-proxy'>proxy</a>.\n\nUpon return of the data from whatever data source the proxy connected to, the retrieved\n<a href='#!/api/Ext.data.Model'>Ext.data.Model</a> will be loaded into this store, and the optional callback will be called.\nExample usage:\n\n    store.load({\n        scope: this,\n        callback: function(records, operation, success) {\n            // the operation object\n            // contains all of the details of the load operation\n            console.log(records);\n        }\n    });\n\nIf the callback scope does not need to be set, a function can simply be passed:\n\n    store.load(function(records, operation, success) {\n        console.log('loaded records');\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "This is passed into the <a href='#!/api/Ext.data.operation.Operation'>Ext.data.operation.Operation</a>\nobject that is created and then sent to the proxy's <a href='#!/api/Ext.data.proxy.Proxy-method-read'>Ext.data.proxy.Proxy#read</a> function.\nIn addition to the options listed below, this object may contain properties to configure the\n<a href='#!/api/Ext.data.operation.Operation'>Ext.data.operation.Operation</a>.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "callback",
                        "optional": true,
                        "text": "A function which is called when the response arrives.\n",
                        "type": "Function",
                        "items": [
                          {
                            "$type": "property",
                            "name": "records",
                            "text": "Array of records.\n",
                            "type": "Ext.data.Model[]",
                            "src": {
                              "name": "2,726,51",
                              "text": "2,726,59,18",
                              "type": "2,726,16"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "operation",
                            "text": "The Operation itself.\n",
                            "type": "Ext.data.operation.Operation",
                            "src": {
                              "name": "2,727,63",
                              "text": "2,727,73,22",
                              "type": "2,727,16"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "success",
                            "text": "`true` when operation completed successfully.\n",
                            "type": "Boolean",
                            "src": {
                              "name": "2,728,42",
                              "text": "2,728,50,46",
                              "type": "2,728,16"
                            }
                          }
                        ],
                        "src": {
                          "name": "2,725,35",
                          "text": "2,725,45,54",
                          "type": "2,725,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "addRecords",
                        "optional": true,
                        "text": "Specify as `true` to *add* the incoming records rather than the\ndefault which is to have the incoming records *replace* the existing stoire contents.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "2,729,34",
                          "text": "2,729,52,64:2,730,8,87",
                          "type": "2,729,16",
                          "value": "2,729,45"
                        }
                      }
                    ],
                    "src": {
                      "name": "2,721,25",
                      "text": "2,721,34,71:2,722,8,237",
                      "type": "2,721,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "text": "2,732,33,5",
                      "type": "2,732,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,735,0",
                  "since": "2,733,15",
                  "text": "2,699,8,804"
                }
              },
              {
                "$type": "method",
                "name": "loadData",
                "text": "Loads an array of data straight into the Store.\n\nUsing this method is great if the data is in the correct format already (e.g. it doesn't need to be\nprocessed by a reader). If your data requires processing to decode the data structure, use a\n<a href='#!/api/Ext.data.proxy.Memory'>Ext.data.proxy.Memory</a> or <a href='#!/api/Ext.data.JsonStore-method-loadRawData'>loadRawData</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "Array of data to load. Any non-model instances will be cast\ninto model instances first.\n",
                    "type": "Ext.data.Model[]/Object[]",
                    "src": {
                      "name": "1,929,43",
                      "text": "1,929,48,60:1,930,8,28",
                      "type": "1,929,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "append",
                    "optional": true,
                    "text": "`true` to add the records to the existing records in the store, `false`\nto remove the old ones first.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,931,26",
                      "text": "1,931,40,72:1,932,8,30",
                      "type": "1,931,16",
                      "value": "1,931,33"
                    }
                  }
                ],
                "src": {
                  "name": "1,934,0",
                  "text": "1,923,8,310"
                }
              },
              {
                "$type": "method",
                "name": "loadPage",
                "text": "Loads a given 'page' of data by setting the start and limit values appropriately. Internally this just causes a normal\nload operation, passing in calculated 'start' and 'limit' params.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "page",
                    "text": "The number of the page to load.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1034,24",
                      "text": "1,1034,29,32",
                      "type": "1,1034,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "See options for <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a>.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1035,25",
                      "text": "1,1035,34,38",
                      "type": "1,1035,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1037,0",
                  "text": "1,1032,8,185"
                }
              },
              {
                "$type": "method",
                "name": "loadRawData",
                "text": "Loads data via the bound Proxy's reader\n\nUse this method if you are attempting to load data and want to utilize the configured data reader.\n\nAs of 4.2, this method will no longer fire the <a href='#!/api/Ext.data.JsonStore-event-load'>event-load</a> event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "The full JSON object you'd like to load into the Data store.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "1,957,26",
                      "text": "1,957,31,61",
                      "type": "1,957,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "append",
                    "optional": true,
                    "text": "`true` to add the records to the existing records in the store, `false`\nto remove the old ones first.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,958,26",
                      "text": "1,958,40,72:1,959,8,31",
                      "type": "1,958,16",
                      "value": "1,958,33"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the reader processed the records correctly. See <a href='#!/api/Ext.data.reader.Reader-cfg-successProperty'>Ext.data.reader.Reader#successProperty</a>.\nIf the reader did not process the records, nothing will be added.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,961,26,106:1,962,8,66",
                      "type": "1,961,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,964,0",
                  "text": "1,951,8,216"
                }
              },
              {
                "$type": "method",
                "name": "loadRecords",
                "text": "Loads an array of <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> instances into the store, fires the datachanged event. This should only usually\nbe called internally when loading from the <a href='#!/api/Ext.data.proxy.Proxy'>Ext.data.proxy.Proxy</a>, when adding records manually use <a href='#!/api/Ext.data.JsonStore-method-add'>method-add</a> instead\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "The array of records to load\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "1,983,34",
                      "text": "1,983,42,29",
                      "type": "1,983,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "addRecords",
                        "optional": true,
                        "text": "Pass `true` to add these records to the existing records, `false` to remove the Store's existing records first.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "1,985,34",
                          "text": "1,985,52,112",
                          "type": "1,985,16",
                          "value": "1,985,45"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,984,24",
                      "type": "1,984,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,987,0",
                  "text": "1,981,8,267"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#max",
                "name": "max",
                "src": {
                  "inheritdoc": "1,1437,8",
                  "name": "1,1436,16"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#min",
                "name": "min",
                "src": {
                  "inheritdoc": "1,1432,8",
                  "name": "1,1431,16"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for <a href='#!/api/Ext.data.JsonStore-method-addManagedListener'>addManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "4,1787,12",
                  "name": "4,1789,0",
                  "text": "4,1786,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for <a href='#!/api/Ext.data.JsonStore-method-removeManagedListener'>removeManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "4,1793,12",
                  "name": "4,1795,0",
                  "text": "4,1792,12,46"
                }
              },
              {
                "$type": "method",
                "name": "nextPage",
                "text": "Loads the next 'page' in the current data set\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "See options for <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1056,24",
                      "text": "1,1056,32,37",
                      "type": "1,1056,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1058,0",
                  "text": "1,1055,8,46"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "4,1775,12",
                  "name": "4,1777,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "4,1190,44",
                      "text": "4,1190,54,37",
                      "type": "4,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,1191,37",
                      "text": "4,1191,40,30",
                      "type": "4,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1192,29",
                      "text": "4,1192,36,20",
                      "type": "4,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1193,29",
                      "text": "4,1193,38,44",
                      "type": "4,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1195,0",
                  "text": "4,1185,12,125"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onBatchComplete",
                "text": "Attached as the 'complete' event listener to a proxy's Batch object. Iterates over the batch operations\nand updates the Store's internal data MixedCollection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "batch",
                    "src": {
                      "name": "2,497,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "src": {
                      "name": "2,497,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,493,8",
                  "name": "2,497,0",
                  "text": "2,494,8,159"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onBatchException",
                "items": [
                  {
                    "$type": "param",
                    "name": "batch",
                    "src": {
                      "name": "2,520,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "src": {
                      "name": "2,520,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,518,8",
                  "name": "2,520,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onBatchOperationComplete",
                "text": "Attached as the 'operationcomplete' event listener to a proxy's Batch object. By default just calls through\nto onProxyWrite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "batch",
                    "src": {
                      "name": "2,488,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "src": {
                      "name": "2,488,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,484,8",
                  "name": "2,488,0",
                  "text": "2,485,8,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "4,1175,44",
                      "text": "4,1175,54,37",
                      "type": "4,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,1176,37",
                      "text": "4,1176,40,30",
                      "type": "4,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1177,29",
                      "text": "4,1177,36,20",
                      "type": "4,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1178,29",
                      "text": "4,1178,38,44",
                      "type": "4,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1180,0",
                  "text": "4,1170,12,183"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onDestroy",
                "src": {
                  "access": "2,911,8",
                  "name": "2,913,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onDestroyRecords",
                "text": "Removes any records when a write is returned from the server.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "The array of removed records\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "2,456,34",
                      "text": "2,456,42,29",
                      "type": "2,456,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The operation that just completed\n",
                    "type": "Ext.data.operation.Operation",
                    "src": {
                      "name": "2,457,46",
                      "text": "2,457,56,34",
                      "type": "2,457,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "success",
                    "text": "True if the operation was successful\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,458,25",
                      "text": "2,458,33,37",
                      "type": "2,458,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,455,8",
                  "name": "2,460,0",
                  "text": "2,454,8,62"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onMetaChange",
                "items": [
                  {
                    "$type": "param",
                    "name": "proxy",
                    "src": {
                      "name": "2,378,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "meta",
                    "src": {
                      "name": "2,378,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,376,8",
                  "name": "2,378,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onProxyLoad",
                "text": "Called internally when a Proxy has completed a load request\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "operation",
                    "src": {
                      "name": "1,864,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,861,8",
                  "name": "1,864,0",
                  "text": "1,862,8,60"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onProxyWrite",
                "text": "Callback for any write Operation over the Proxy. Updates the Store's MixedCollection to reflect\nthe updates provided by the Proxy\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "operation",
                    "src": {
                      "name": "2,424,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,420,8",
                  "name": "2,424,0",
                  "text": "2,421,8,130"
                }
              },
              {
                "$type": "method",
                "name": "previousPage",
                "text": "Loads the previous 'page' in the current data set\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "See options for <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1064,24",
                      "text": "1,1064,32,37",
                      "type": "1,1064,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1066,0",
                  "text": "1,1063,8,50"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#query",
                "name": "query",
                "src": {
                  "inheritdoc": "1,1407,8",
                  "name": "1,1406,16"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#queryBy",
                "name": "queryBy",
                "src": {
                  "inheritdoc": "1,1402,8",
                  "name": "1,1401,16"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queryRecords",
                "text": "Query all the cached records in this Store by field.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field from each record to use.\n",
                    "type": "String",
                    "src": {
                      "name": "5,584,24",
                      "text": "5,584,30,35",
                      "type": "5,584,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to match.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,585,24",
                      "text": "5,585,30,20",
                      "type": "5,585,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "5,586,35,21",
                      "type": "5,586,17"
                    }
                  }
                ],
                "src": {
                  "access": "5,588,8",
                  "name": "5,590,0",
                  "text": "5,579,8,171"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queryRecordsBy",
                "text": "Query all the cached records in this Store using a filtering function. The specified function\nwill be called with each record in this Store. If the function returns `true` the record is\nincluded in the results.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called. It will be passed the following parameters:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record to test for filtering.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "5,554,37",
                          "text": "5,554,44,34",
                          "type": "5,554,18"
                        }
                      }
                    ],
                    "src": {
                      "name": "5,553,26",
                      "text": "5,553,29,71",
                      "type": "5,553,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed\nDefaults to this Store.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,555,25",
                      "text": "5,555,32,61:5,556,8,24",
                      "type": "5,555,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "5,557,35,21",
                      "type": "5,557,17"
                    }
                  }
                ],
                "src": {
                  "access": "5,559,8",
                  "name": "5,561,0",
                  "text": "5,546,8,329"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "rangeCached",
                "text": "Determines if the passed range is available in the page cache.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "start",
                    "text": "The start index\n",
                    "type": "Number",
                    "src": {
                      "name": "3,308,24",
                      "text": "3,308,30,16",
                      "type": "3,308,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "text": "The end index in the range\n",
                    "type": "Number",
                    "src": {
                      "name": "3,309,24",
                      "text": "3,309,28,27",
                      "type": "3,309,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,307,8",
                  "name": "3,311,0",
                  "text": "3,306,8,63"
                }
              },
              {
                "$type": "method",
                "name": "rejectChanges",
                "text": "<a href='#!/api/Ext.data.Model-method-reject'>Ext.data.Model#reject</a> outstanding changes on all <a href='#!/api/Ext.data.JsonStore-method-getModifiedRecords'>getModifiedRecords</a>\nand re-insert any records that were removed locally. Any phantom records will be removed.\n",
                "src": {
                  "name": "1,1148,0",
                  "text": "1,1145,8,200"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1466,27",
                      "text": "4,1466,34,53",
                      "type": "4,1466,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "4,1467,36",
                      "text": "4,1467,43,58:4,1468,11,231",
                      "type": "4,1467,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "4,1473,28",
                      "text": "4,1473,36,60:4,1474,11,164",
                      "type": "4,1473,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "4,1479,28,130:4,1480,11,192",
                      "type": "4,1479,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1490,0",
                  "text": "4,1453,11,651"
                }
              },
              {
                "$type": "method",
                "name": "reload",
                "text": "Reloads the store using the last options passed to the <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a> method. You can use the reload method to reload the\nstore using the parameters from the last load() call. For example:\n\n    store.load({\n        params : {\n            userid : 22216\n        }\n    });\n\n    //...\n\n    store.reload();\n\nThe initial <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a> execution will pass the `userid` parameter in the request. The <a href='#!/api/Ext.data.JsonStore-method-reload'>reload</a> execution\nwill also send the same `userid` parameter in its request as it will reuse the `params` object from the last <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a> call.\n\nYou can override a param by passing in the config object with the `params` object:\n\n    store.load({\n        params : {\n            userid : 22216,\n            foo    : 'bar'\n        }\n    });\n\n    //...\n\n    store.reload({\n        params : {\n            userid : 1234\n        }\n    });\n\nThe initial <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a> execution sends the `userid` and `foo` parameters but in the <a href='#!/api/Ext.data.JsonStore-method-reload'>reload</a> it only sends\nthe `userid` paramter because you are overriding the `params` config not just overriding the one param. To only change a single param\nbut keep other params, you will have to get the last params from the <a href='#!/api/Ext.data.JsonStore-property-lastOptions'>lastOptions</a> property:\n\n    var lastOptions = store.lastOptions,\n        lastParams = Ext.clone(lastOptions.params); // make a copy of the last params so we don't affect future reload() calls\n\n    lastParams.userid = 1234;\n\n    store.reload({\n        params : lastParams\n    });\n\nThis will now send the `userid` parameter as `1234` and the `foo` param as `'bar'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "A config object which contains options which may override the options passed to the previous load call. See the\n<a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a> method for valid configs.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,851,25",
                      "text": "2,851,34,112:2,852,8,47",
                      "type": "2,851,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,854,0",
                  "text": "2,803,8,1557"
                }
              },
              {
                "$type": "method",
                "name": "remove",
                "text": "Removes the specified record(s) from the Store, firing the <a href='#!/api/Ext.data.JsonStore-event-remove'>event-remove</a>\nevent for the removed records.\n\nAfter all records have been removed a single <a href='#!/api/Ext.data.JsonStore-event-datachanged'>datachanged</a> is fired.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "Model instance or\narray of instances to remove or an array of indices from which to remove records.\n",
                    "type": "Ext.data.Model/Ext.data.Model[]/Number/Number[]",
                    "src": {
                      "name": "1,643,65",
                      "text": "1,643,73,18:1,644,8,82",
                      "type": "1,643,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,646,0",
                  "text": "1,638,8,183"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for <a href='#!/api/Ext.data.JsonStore-method-unAfter'>unAfter</a>.\n",
                "src": {
                  "name": "4,1248,0",
                  "text": "4,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeAll",
                "text": "Removes all items from the store.\n\nIndividual record <a href='#!/api/Ext.data.JsonStore-event-remove'>event-remove</a> events are not fired by this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "silent",
                    "optional": true,
                    "text": "Pass `true` to prevent the <a href='#!/api/Ext.data.JsonStore-event-clear'>event-clear</a> event from being fired.\n\nThis method is affected by filtering.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,798,26",
                      "text": "1,798,40,74:1,799,8,40",
                      "type": "1,798,16",
                      "value": "1,798,33"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The removed records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "1,802,35,21",
                      "type": "1,802,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,804,0",
                  "text": "1,794,8,115"
                }
              },
              {
                "$type": "method",
                "name": "removeAt",
                "text": "Removes the model instance(s) at the given index\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The record index\n",
                    "type": "Number",
                    "src": {
                      "name": "1,773,24",
                      "text": "1,773,30,17",
                      "type": "1,773,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "count",
                    "optional": true,
                    "text": "The number of records to delete\n",
                    "type": "Number",
                    "value": "1",
                    "src": {
                      "name": "1,774,25",
                      "text": "1,774,34,32",
                      "type": "1,774,16",
                      "value": "1,774,31"
                    }
                  }
                ],
                "src": {
                  "name": "1,776,0",
                  "text": "1,772,8,49"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.data.JsonStore-method-unBefore'>unBefore</a>.\n",
                "src": {
                  "name": "4,1242,0",
                  "text": "4,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeFilter",
                "text": "Removes an individual Filter from the current <a href='#!/api/Ext.data.JsonStore-cfg-filters'>cfg-filters</a> using the passed Filter/Filter id and\nby default, applies the updated filter set to the Store's unfiltered dataset.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "toRemove",
                    "text": "The id of a Filter to remove from the filter set, or a Filter instance to remove.\n",
                    "type": "String/Ext.util.Filter",
                    "src": {
                      "name": "3,566,40",
                      "text": "3,566,49,82",
                      "type": "3,566,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "suppressEvent",
                    "optional": true,
                    "text": "If `true` the filter is cleared silently.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,567,26",
                      "text": "3,567,41,42",
                      "type": "3,567,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,569,0",
                  "text": "3,563,8,195"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "4,1102,28",
                      "text": "4,1102,38,51",
                      "type": "4,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "4,1103,30",
                      "text": "4,1103,33,66:4,1104,12,76",
                      "type": "4,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1106,28",
                      "text": "4,1106,34,62:4,1107,12,1017",
                      "type": "4,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1145,0",
                  "text": "4,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the <a href='#!/api/Ext.data.JsonStore-method-mon'>mon</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "4,526,56",
                      "text": "4,526,61,52",
                      "type": "4,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "4,527,34",
                      "text": "4,527,40,63",
                      "type": "4,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "4,528,29",
                      "text": "4,528,32,85",
                      "type": "4,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,529,27",
                      "text": "4,529,33,92:4,530,11,43",
                      "type": "4,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "4,532,0",
                  "text": "4,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1307,28",
                      "text": "4,1307,36,44",
                      "type": "4,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1308,27",
                      "text": "4,1308,43,26:4,1309,11,41",
                      "type": "4,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "4,1306,11",
                  "name": "4,1311,0",
                  "text": "4,1305,11,38"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "4,579,29",
                      "text": "4,579,48,46",
                      "type": "4,579,20",
                      "value": "4,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "4,580,29,24",
                      "type": "4,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "4,581,12",
                  "name": "4,583,0",
                  "text": "4,577,12,102"
                }
              },
              {
                "$type": "method",
                "name": "resumeAutoSync",
                "text": "Resumes automatically syncing the Store with its Proxy.  Only applicable if <a href='#!/api/Ext.data.JsonStore-cfg-autoSync'>autoSync</a> is `true`\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "syncNow",
                    "text": "Pass `true` to synchronize now. Only synchronizes with the Proxy if the suspension\ncount has gone to zero (We are not under a higher level of suspension)\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,964,25",
                      "text": "2,964,33,83:2,965,8,72",
                      "type": "2,964,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,968,0",
                  "text": "2,963,8,104"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the <a href='#!/api/Ext.data.JsonStore-method-suspendEvent'>suspendEvent</a> method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "4,1409,32",
                      "text": "4,1409,42,32",
                      "type": "4,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "4,1411,0",
                  "text": "4,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see <a href='#!/api/Ext.data.JsonStore-method-suspendEvents'>suspendEvents</a>).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See <a href='#!/api/Ext.data.JsonStore-method-suspendEvents'>suspendEvents</a>.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1431,29",
                      "text": "4,1431,43,59:4,1432,11,53",
                      "type": "4,1431,19"
                    }
                  }
                ],
                "src": {
                  "name": "4,1434,0",
                  "text": "4,1426,11,198"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Will be removed in the next major version\n",
                "deprecatedVersion": "4.0.0",
                "name": "save",
                "text": "Saves all pending changes via the configured <a href='#!/api/Ext.data.JsonStore-cfg-proxy'>proxy</a>. Use <a href='#!/api/Ext.data.JsonStore-method-sync'>sync</a> instead.\n",
                "src": {
                  "deprecatedMessage": "2,692,8",
                  "deprecatedVersion": "2,692,8",
                  "name": "2,694,0",
                  "text": "2,691,8,88"
                }
              },
              {
                "$type": "method",
                "name": "setData",
                "text": "Loads an array of data directly into the Store.\n\nsetData() is ideal if your data's format is already in its appropriate format (e.g. it doesn't need to be\nprocessed by a reader). If your data's structure requires processing, use a\n<a href='#!/api/Ext.data.proxy.Memory'>Ext.data.proxy.Memory</a> or <a href='#!/api/Ext.data.JsonStore-method-loadRawData'>loadRawData</a>.\n\nUse <a href='#!/api/Ext.data.JsonStore-method-loadData'>loadData</a>, <a href='#!/api/Ext.data.JsonStore-method-add'>method-add</a>, or <a href='#!/api/Ext.data.JsonStore-method-insert'>insert</a> if records need to be\nappended to the current recordset.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "Array of data to load. Any non-model instances will be cast\ninto model instances first.\n",
                    "type": "Ext.data.Model[]/Object[]",
                    "src": {
                      "name": "1,394,43",
                      "text": "1,394,48,60:1,395,8,28",
                      "type": "1,394,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,384,16",
                  "text": "1,385,8,420"
                }
              },
              {
                "$type": "method",
                "name": "setFilters",
                "src": {
                  "name": "3,989,16"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.  In\nversions prior to 5.1, <a href='#!/api/Ext.data.JsonStore-cfg-listeners'>listeners</a> had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the <a href='#!/api/Ext.data.JsonStore-method-on'>on</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1804,28",
                      "text": "4,1804,38,14",
                      "type": "4,1804,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1806,0",
                  "text": "4,1798,12,402"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setRecords",
                "text": "Make a set of records be current in the store. This means that unneeded records\nwill be removed and new records will be added.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "The records to be current in the store.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "1,829,34",
                      "text": "1,829,42,40",
                      "type": "1,829,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,831,8",
                  "name": "1,833,0",
                  "text": "1,827,8,127"
                }
              },
              {
                "$type": "method",
                "name": "setSorters",
                "src": {
                  "name": "3,993,16"
                }
              },
              {
                "$type": "method",
                "name": "sort",
                "text": "Sorts the data in the Store by one or more of its properties. Example usage:\n\n    //sort by a single field\n    myStore.sort('myField', 'DESC');\n\n    //sorting by multiple fields\n    myStore.sort([\n        {\n            property : 'age',\n            direction: 'ASC'\n        },\n        {\n            property : 'name',\n            direction: 'DESC'\n        }\n    ]);\n\nInternally, Store converts the passed arguments into an array of <a href='#!/api/Ext.util.Sorter'>Ext.util.Sorter</a> instances, and delegates\nthe actual sorting to its internal <a href='#!/api/Ext.util.MixedCollection'>Ext.util.MixedCollection</a>.\n\nWhen passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:\n\n    store.sort('myField');\n    store.sort('myField');\n\nIs equivalent to this code, because Store handles the toggling automatically:\n\n    store.sort('myField', 'ASC');\n    store.sort('myField', 'DESC');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "optional": true,
                    "text": "Either a string name of one of the fields in this Store's configured\n<a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, or an array of sorter configurations.\n",
                    "type": "String/Ext.util.Sorter[]",
                    "src": {
                      "name": "3,889,43",
                      "text": "3,889,52,69:3,890,8,68",
                      "type": "3,889,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "direction",
                    "optional": true,
                    "text": "The overall direction to sort the data by.\n",
                    "type": "String",
                    "value": "\"ASC\"",
                    "src": {
                      "name": "3,891,25",
                      "text": "3,891,42,43",
                      "type": "3,891,16",
                      "value": "3,891,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "type": "3,892,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,894,0",
                  "text": "3,859,8,863"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "splice",
                "text": "This method is basically the same as the JavaScript Array splice method.\n\nNegative indexes are interpreted starting at the end of the collection. That is,\na value of -1 indicates the last item, or equivalent to `length - 1`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which to add or remove items.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,850,24",
                      "text": "1,850,30,43",
                      "type": "1,850,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "toRemove",
                    "text": "The number of items to remove or an array of the\nitems to remove.\n",
                    "type": "Number/Object[]",
                    "src": {
                      "name": "1,851,33",
                      "text": "1,851,42,49:1,852,8,17",
                      "type": "1,851,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "toAdd",
                    "optional": true,
                    "text": "The items to insert at the given `index`.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "1,853,28",
                      "text": "1,853,35,42",
                      "type": "1,853,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,854,8",
                  "name": "1,856,0",
                  "text": "1,845,8,226"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.data.LocalStore#sum",
                "name": "sum",
                "src": {
                  "inheritdoc": "1,1422,8",
                  "name": "1,1421,16"
                }
              },
              {
                "$type": "method",
                "name": "suspendAutoSync",
                "text": "Suspends automatically syncing the Store with its Proxy.  Only applicable if <a href='#!/api/Ext.data.JsonStore-cfg-autoSync'>autoSync</a> is `true`\n",
                "src": {
                  "name": "2,958,0",
                  "text": "2,956,8,105"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n<a href='#!/api/Ext.data.JsonStore-method-resumeEvent'>resumeEvent</a> will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "4,1381,32",
                      "text": "4,1381,42,33",
                      "type": "4,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "4,1383,0",
                  "text": "4,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see <a href='#!/api/Ext.data.JsonStore-method-resumeEvents'>resumeEvents</a>)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the <a href='#!/api/Ext.data.JsonStore-method-resumeEvents'>resumeEvents</a> call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "4,1363,28",
                      "text": "4,1363,43,48:4,1364,11,81",
                      "type": "4,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "4,1366,0",
                  "text": "4,1361,11,64"
                }
              },
              {
                "$type": "method",
                "name": "sync",
                "text": "Synchronizes the store with its <a href='#!/api/Ext.data.JsonStore-cfg-proxy'>proxy</a>. This asks the proxy to batch together any new, updated\nand deleted records in the store, updating the store's internal representation of the records\nas each operation completes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Object containing one or more properties supported by the sync method (these get\npassed along to the underlying proxy's <a href='#!/api/Ext.data.proxy.Proxy-method-batch'>Ext.data.Proxy#batch</a> method):\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "batch",
                        "optional": true,
                        "text": "A <a href='#!/api/Ext.data.Batch'>Ext.data.Batch</a> object (or batch config to apply\nto the created batch). If unspecified a default batch will be auto-created as needed.\n",
                        "type": "Ext.data.Batch/Object",
                        "src": {
                          "name": "2,591,48",
                          "text": "2,591,55,58:2,592,8,87",
                          "type": "2,591,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "callback",
                        "optional": true,
                        "text": "The function to be called upon completion of the sync.\nThe callback is called regardless of success or failure and is passed the following parameters:\n",
                        "type": "Function",
                        "items": [
                          {
                            "$type": "property",
                            "name": "batch",
                            "text": "The <a href='#!/api/Ext.data.Batch'>Ext.data.Batch</a> that was processed,\ncontaining all operations in their current state after processing\n",
                            "type": "Ext.data.Batch",
                            "src": {
                              "name": "2,596,49",
                              "text": "2,596,55,53:2,597,8,66",
                              "type": "2,596,16"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "options",
                            "text": "The options argument that was originally passed into sync\n",
                            "type": "Object",
                            "src": {
                              "name": "2,598,41",
                              "text": "2,598,49,58",
                              "type": "2,598,16"
                            }
                          }
                        ],
                        "src": {
                          "name": "2,594,35",
                          "text": "2,594,45,55:2,595,8,96",
                          "type": "2,594,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "success",
                        "optional": true,
                        "text": "The function to be called upon successful completion of the sync. The\nsuccess function is called only if no exceptions were reported in any operations. If one or more exceptions\noccurred then the failure function will be called instead. The success function is called\nwith the following parameters:\n",
                        "type": "Function",
                        "items": [
                          {
                            "$type": "property",
                            "name": "batch",
                            "text": "The <a href='#!/api/Ext.data.Batch'>Ext.data.Batch</a> that was processed,\ncontaining all operations in their current state after processing\n",
                            "type": "Ext.data.Batch",
                            "src": {
                              "name": "2,604,48",
                              "text": "2,604,54,53:2,605,8,66",
                              "type": "2,604,16"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "options",
                            "text": "The options argument that was originally passed into sync\n",
                            "type": "Object",
                            "src": {
                              "name": "2,606,40",
                              "text": "2,606,48,58",
                              "type": "2,606,16"
                            }
                          }
                        ],
                        "src": {
                          "name": "2,600,35",
                          "text": "2,600,44,70:2,601,8,229",
                          "type": "2,600,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "failure",
                        "optional": true,
                        "text": "The function to be called upon unsuccessful completion of the sync. The\nfailure function is called when one or more operations returns an exception during processing (even if some\noperations were also successful). In this case you can check the batch's <a href='#!/api/Ext.data.Batch-property-exceptions'>Ext.data.Batch#exceptions</a> array to see exactly which operations had exceptions. The failure function is called with the\nfollowing parameters:\n",
                        "type": "Function",
                        "items": [
                          {
                            "$type": "property",
                            "name": "batch",
                            "text": "The <a href='#!/api/Ext.data.Batch'>Ext.data.Batch</a> that was processed, containing all\noperations in their current state after processing\n",
                            "type": "Ext.data.Batch",
                            "src": {
                              "name": "2,613,48",
                              "text": "2,613,54,62:2,614,8,51",
                              "type": "2,613,16"
                            }
                          },
                          {
                            "$type": "property",
                            "name": "options",
                            "text": "The options argument that was originally passed into sync\n",
                            "type": "Object",
                            "src": {
                              "name": "2,615,40",
                              "text": "2,615,48,58",
                              "type": "2,615,16"
                            }
                          }
                        ],
                        "src": {
                          "name": "2,608,35",
                          "text": "2,608,44,72:2,609,8,342",
                          "type": "2,608,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "params",
                        "optional": true,
                        "text": "Additional params to send during the sync Operation(s).\n",
                        "type": "Object",
                        "src": {
                          "name": "2,617,33",
                          "text": "2,617,41,56",
                          "type": "2,617,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "scope",
                        "optional": true,
                        "text": "The scope in which to execute any callbacks (i.e. the `this` object inside\nthe callback, success and/or failure functions). Defaults to the store's proxy.\n",
                        "type": "Object",
                        "src": {
                          "name": "2,619,33",
                          "text": "2,619,40,75:2,620,8,81",
                          "type": "2,619,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "2,588,25",
                      "text": "2,588,34,81:2,589,8,84",
                      "type": "2,588,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "text": "2,622,33,5",
                      "type": "2,622,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,624,0",
                  "text": "2,584,8,227"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for <a href='#!/api/Ext.data.JsonStore-method-removeListener'>removeListener</a>.\n",
                "src": {
                  "inheritdoc": "4,1781,12",
                  "name": "4,1783,0",
                  "text": "4,1780,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.data.JsonStore-method-removeListener'>removeListener</a> with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "4,1218,44",
                      "text": "4,1218,54,55",
                      "type": "4,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,1219,37",
                      "text": "4,1219,40,23",
                      "type": "4,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1220,29",
                      "text": "4,1220,36,41",
                      "type": "4,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1221,29",
                      "text": "4,1221,38,22",
                      "type": "4,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1223,0",
                  "text": "4,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.data.JsonStore-method-removeListener'>removeListener</a> with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "4,1204,44",
                      "text": "4,1204,54,55",
                      "type": "4,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "4,1205,37",
                      "text": "4,1205,40,23",
                      "type": "4,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1206,29",
                      "text": "4,1206,36,41",
                      "type": "4,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,1207,29",
                      "text": "4,1207,38,22",
                      "type": "4,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "4,1209,0",
                  "text": "4,1200,12,98"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "4,389,12",
                  "name": "4,392,0",
                  "text": "4,390,12,126"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "addRecordsOptions",
                "text": "Used as a parameter to loadRecords\n",
                "src": {
                  "access": "1,279,8",
                  "name": "1,282,0",
                  "text": "1,280,8,35"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "autoSyncSuspended",
                "text": "A counter to track suspensions.\n",
                "type": "Number",
                "src": {
                  "access": "2,174,8",
                  "name": "2,172,27",
                  "text": "2,173,8,32",
                  "type": "2,172,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "complete",
                "text": "`true` once the store has loaded data from the server.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,298,8",
                  "name": "1,296,28",
                  "text": "1,295,8,55",
                  "type": "1,296,19"
                }
              },
              {
                "$type": "property",
                "name": "currentPage",
                "text": "The page that the Store has most recently loaded (see <a href='#!/api/Ext.data.Store-method-loadPage'>Ext.data.Store#loadPage</a>)\n",
                "type": "Number",
                "src": {
                  "name": "3,137,27",
                  "text": "3,138,8,96",
                  "type": "3,137,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "data",
                "readonly": true,
                "text": "The `data` property is a `Collection` which holds this store's local cache of records.\n",
                "type": "Ext.util.Collection",
                "src": {
                  "access": "1,274,8",
                  "name": "1,272,40",
                  "readonly": "1,275,8",
                  "text": "1,273,8,87",
                  "type": "1,272,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when <a href='#!/api/Ext.data.JsonStore-method-suspendEvents'>suspendEvents</a> is called, decremented when <a href='#!/api/Ext.data.JsonStore-method-resumeEvents'>resumeEvents</a> is called.\n",
                "src": {
                  "access": "4,284,11",
                  "name": "4,287,0",
                  "text": "4,285,11,131"
                }
              },
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "7,295,28",
                  "text": "7,296,8,128",
                  "type": "7,295,19"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via <a href='#!/api/Ext.data.JsonStore-observe'>observe</a>) or\non the <a href='#!/api/Ext.app.EventBus'>Ext.app.EventBus</a>. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "4,290,30",
                  "readonly": "4,291,11",
                  "text": "4,292,11,790",
                  "type": "4,290,22"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "implicitModel",
                "text": "The class name of the model that this store uses if no explicit <a href='#!/api/Ext.data.JsonStore-cfg-model'>model</a> is given\n",
                "type": "Boolean",
                "src": {
                  "access": "2,159,8",
                  "name": "2,163,0",
                  "text": "2,161,8,88",
                  "type": "2,160,19"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,278,31",
                  "text": "4,279,11,95",
                  "type": "4,278,22"
                }
              },
              {
                "$type": "property",
                "name": "isStore",
                "text": "`true` in this class to identify an object as an instantiated Store, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,150,28",
                  "text": "3,151,8,90",
                  "type": "3,150,19"
                }
              },
              {
                "$type": "property",
                "name": "lastOptions",
                "text": "Property to hold the last options from a <a href='#!/api/Ext.data.JsonStore-method-load'>method-load</a> method call. This object is used for the <a href='#!/api/Ext.data.JsonStore-method-reload'>method-reload</a>\nto reuse the same options. Please see <a href='#!/api/Ext.data.JsonStore-method-reload'>method-reload</a> for a simple example on how to use the lastOptions property.\n",
                "type": "Object",
                "src": {
                  "name": "2,166,27",
                  "text": "2,167,8,248",
                  "type": "2,166,19"
                }
              },
              {
                "$type": "property",
                "name": "loadCount",
                "readonly": true,
                "text": "The number of times records have been loaded into the store. This includes loads via\n<a href='#!/api/Ext.data.JsonStore-method-loadData'>loadData</a> & <a href='#!/api/Ext.data.JsonStore-method-loadRecords'>loadRecords</a>.\n",
                "type": "Number",
                "src": {
                  "name": "1,287,27",
                  "readonly": "1,290,8",
                  "text": "1,288,8,127",
                  "type": "1,287,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "loading",
                "text": "`true` if the Store is currently loading via its Proxy.\n",
                "type": "Boolean",
                "src": {
                  "access": "3,145,8",
                  "name": "3,143,28",
                  "text": "3,144,8,56",
                  "type": "3,143,19"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "removed",
                "text": "Temporary cache in which removed model instances are kept until successfully\nsynchronised with a Proxy, at which point this is cleared.\n\nThis cache is maintained unless you set <a href='#!/api/Ext.data.JsonStore-cfg-trackRemoved'>trackRemoved</a> to `false`.\n",
                "type": "Ext.data.Model[]",
                "src": {
                  "access": "2,241,12",
                  "name": "2,242,41",
                  "text": "2,236,12,205",
                  "type": "2,242,23"
                }
              },
              {
                "$type": "property",
                "name": "updating",
                "readonly": true,
                "since": "5.0.0",
                "text": "A counter that is increased by <a href='#!/api/Ext.data.JsonStore-method-beginUpdate'>beginUpdate</a> and decreased by <a href='#!/api/Ext.data.JsonStore-method-endUpdate'>endUpdate</a>. When\nthis transitions from 0 to 1 the <a href='#!/api/Ext.data.JsonStore-event-beginupdate'>event-beginupdate</a> event is\nfired. When it transitions back from 1 to 0 the <a href='#!/api/Ext.data.JsonStore-event-endupdate'>event-endupdate</a>\nevent is fired.\n",
                "type": "Number",
                "src": {
                  "name": "3,156,27",
                  "readonly": "3,161,8",
                  "since": "3,162,15",
                  "text": "3,157,8,264",
                  "type": "3,156,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods"
          }
        ],
        "src": {
          "alias": "0,37,0",
          "extends": "0,36,0",
          "name": "0,35,0",
          "requires": "0,39,0,0:0,40,0,0:0,41,0,0",
          "text": "0,2,4,1097"
        }
      }
    ]
  },
  "version": 1
}