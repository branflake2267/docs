{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/LocalStore.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extends": "Ext.Mixin",
        "name": "Ext.data.LocalStore",
        "text": "A mixin that provides common store methods for Ext.data.Store & Ext.data.ChainedStore.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "add",
                "text": "Adds Model instance to the Store. This method accepts either:\n\n- An array of Model instances or Model configuration objects.\n- Any number of Model instance or Model configuration object arguments.\n\nThe new Model instances will be added at the end of the existing collection.\n\nSample usage:\n\n    myStore.add({some: 'data'}, {some: 'other data'});\n\nNote that if this Store is sorted, the new Model instances will be inserted\nat the correct point in the Store to maintain the sort order.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "model",
                    "text": "An array of Model instances\nor Model configuration objects, or variable number of Model instance or config arguments.\n",
                    "type": "Ext.data.Model[]/Ext.data.Model.../Object[]/Object...",
                    "src": {
                      "name": "0,46,71",
                      "text": "0,46,77,28:0,47,8,90",
                      "type": "0,46,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The model instances that were added\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,48,35,36",
                      "type": "0,48,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,50,0",
                  "text": "0,32,8,486"
                }
              },
              {
                "$type": "method",
                "name": "aggregate",
                "text": "Runs the aggregate function for all the records in the store.\n\nWhen store is filtered, only items within the filter are aggregated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to execute. The function is called with a single parameter,\nan array of records for that group.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,464,26",
                      "text": "0,464,29,73:0,465,8,36",
                      "type": "0,464,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope to execute the function in. Defaults to the store.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,466,25",
                      "text": "0,466,32,61",
                      "type": "0,466,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the group average being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,467,26",
                      "text": "0,467,35,45:0,468,8,201",
                      "type": "0,467,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field to get the value from\n",
                    "type": "String",
                    "src": {
                      "name": "0,471,24",
                      "text": "0,471,30,32",
                      "type": "0,471,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object literal with the group names and their appropriate values.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,472,25,69",
                      "type": "0,472,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,474,0",
                  "text": "0,460,8,133"
                }
              },
              {
                "$type": "method",
                "name": "average",
                "text": "Gets the average value in the store.\n\nWhen store is filtered, only items within the filter are aggregated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field in each record\n",
                    "type": "String",
                    "src": {
                      "name": "0,447,24",
                      "text": "0,447,30,25",
                      "type": "0,447,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the group average being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,448,26",
                      "text": "0,448,35,45:0,449,8,201",
                      "type": "0,448,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The average value, if no items exist, 0.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,452,25,41",
                      "type": "0,452,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,454,0",
                  "text": "0,443,8,108"
                }
              },
              {
                "$type": "method",
                "name": "collect",
                "text": "Collects unique values for a particular dataIndex from this store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dataIndex",
                    "text": "The property to collect\n",
                    "type": "String",
                    "src": {
                      "name": "0,154,24",
                      "text": "0,154,34,24",
                      "type": "0,154,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "includeOptions",
                    "optional": true,
                    "text": "An object which contains options which modify how the store is traversed.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "allowNull",
                        "optional": true,
                        "text": "Pass true to allow null, undefined or empty string values.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,156,41",
                          "text": "0,156,52,59",
                          "type": "0,156,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "filtered",
                        "optional": true,
                        "text": "Pass `true` to collect from all records, even ones which are filtered.\n\nNote that the `filtered` option can also be passed as a separate parameter for\ncompatibility with previous versions.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,157,41",
                          "text": "0,157,51,71:0,158,8,119",
                          "type": "0,157,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,155,25",
                      "text": "0,155,41,74",
                      "type": "0,155,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of the unique values\n",
                    "type": "Object[]",
                    "src": {
                      "text": "0,162,27,30",
                      "type": "0,162,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,164,0",
                  "text": "0,152,8,68"
                }
              },
              {
                "$type": "method",
                "name": "count",
                "text": "Gets the count of items in the store.\n\nWhen store is filtered, only items within the filter are counted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the count for each group being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,397,26",
                      "text": "0,397,35,45:0,398,8,208",
                      "type": "0,397,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the count\n",
                    "type": "Number",
                    "src": {
                      "text": "0,401,25,10",
                      "type": "0,401,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,403,0",
                  "text": "0,393,8,106"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createModel",
                "text": "Converts a literal to a model, if it's not a model already\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record to create\n",
                    "type": "Ext.data.Model/Object",
                    "src": {
                      "name": "0,63,39",
                      "text": "0,63,46,21",
                      "type": "0,63,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.data.Model",
                    "src": {
                      "type": "0,64,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,62,8",
                  "name": "0,66,0",
                  "text": "0,61,8,59"
                }
              },
              {
                "$type": "method",
                "name": "each",
                "text": "Calls the specified function for each <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> in the store.\n\nWhen store is filtered, only loops over the filtered records.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call. The <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> is passed as the first parameter.\nReturning `false` aborts and exits the iteration.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,117,26",
                      "text": "0,117,29,90:0,118,8,50",
                      "type": "0,117,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the function is executed.\nDefaults to the current <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> in the iteration.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,119,25",
                      "text": "0,119,32,64:0,120,8,72",
                      "type": "0,119,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "includeOptions",
                    "optional": true,
                    "text": "An object which contains options which modify how the store is traversed.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "filtered",
                        "optional": true,
                        "text": "Pass `true` to include filtered out nodes in the iteration.\n\nNote that the `filtered` option can also be passed as a separate parameter for\ncompatibility with previous versions.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,122,41",
                          "text": "0,122,51,60:0,123,8,119",
                          "type": "0,122,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,121,25",
                      "text": "0,121,41,74",
                      "type": "0,121,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,128,0",
                  "text": "0,113,8,146"
                }
              },
              {
                "$type": "method",
                "name": "first",
                "text": "Convenience function for getting the first model instance in the store.\n\nWhen store is filtered, will return first item within the filter.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the first record being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,349,26",
                      "text": "0,349,35,45:0,350,8,200",
                      "type": "0,349,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first model instance in the store, or undefined\n",
                    "type": "Ext.data.Model/undefined",
                    "src": {
                      "text": "0,353,43,52",
                      "type": "0,353,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,355,0",
                  "text": "0,345,8,140"
                }
              },
              {
                "$type": "method",
                "name": "getById",
                "text": "Get the Record with the specified id.\n\nThis method is not affected by filtering, lookup will be performed from all records\ninside the store, filtered or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the Record to find.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,186,23",
                      "text": "0,186,26,30",
                      "type": "0,186,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Record with the passed id. Returns null if not found.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,187,33,58",
                      "type": "0,187,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,189,0",
                  "text": "0,181,8,159"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getByInternalId",
                "text": "Get the Record with the specified internalId.\n\nThis method is not affected by filtering, lookup will be performed from all records\ninside the store, filtered or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "internalId",
                    "text": "The id of the Record to find.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,205,23",
                      "text": "0,205,34,30",
                      "type": "0,205,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Record with the passed internalId. Returns null if not found.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,206,33,66",
                      "type": "0,206,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,199,8",
                  "name": "0,208,0",
                  "text": "0,200,8,167"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getDataSource",
                "text": "Returns the complete unfiltered collection.\n",
                "src": {
                  "access": "0,231,8",
                  "name": "0,233,0",
                  "text": "0,230,8,44"
                }
              },
              {
                "$type": "method",
                "name": "indexOf",
                "text": "Get the index of the record within the store.\n\nWhen store is filtered, records outside of filter will not be found.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The Ext.data.Model object to find.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,243,32",
                      "text": "0,243,39,35",
                      "type": "0,243,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of the passed Record. Returns -1 if not found.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,244,25,57",
                      "type": "0,244,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,246,0",
                  "text": "0,239,8,117"
                }
              },
              {
                "$type": "method",
                "name": "indexOfId",
                "text": "Get the index within the store of the Record with the passed id.\n\nLike #indexOf, this method is effected by filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the Record to find.\n",
                    "type": "String",
                    "src": {
                      "name": "0,255,24",
                      "text": "0,255,27,30",
                      "type": "0,255,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index of the Record. Returns -1 if not found.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,256,25,50",
                      "type": "0,256,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,258,0",
                  "text": "0,251,8,120"
                }
              },
              {
                "$type": "method",
                "name": "insert",
                "text": "Inserts Model instances into the Store at the given index and fires the add event.\nSee also <a href='#!/api/Ext.data.LocalStore-method-add'>method-add</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The start index at which to insert the passed Records.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,266,24",
                      "text": "0,266,30,55",
                      "type": "0,266,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "An <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> instance, the\ndata needed to populate an instance or an array of either of these.\n",
                    "type": "Ext.data.Model/Ext.data.Model[]/Object/Object[]",
                    "src": {
                      "name": "0,267,65",
                      "text": "0,267,73,34:0,268,8,69",
                      "type": "0,267,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "records The added records\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,270,35,26",
                      "type": "0,270,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,272,0",
                  "text": "0,263,8,114"
                }
              },
              {
                "$type": "method",
                "name": "last",
                "text": "Convenience function for getting the last model instance in the store.\n\nWhen store is filtered, will return last item within the filter.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the last record being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,364,26",
                      "text": "0,364,35,45:0,365,8,199",
                      "type": "0,364,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The last model instance in the store, or undefined\n",
                    "type": "Ext.data.Model/undefined",
                    "src": {
                      "text": "0,368,43,51",
                      "type": "0,368,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,370,0",
                  "text": "0,360,8,138"
                }
              },
              {
                "$type": "method",
                "name": "max",
                "text": "Gets the maximum value in the store.\n\nWhen store is filtered, only items within the filter are aggregated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field in each record\n",
                    "type": "String",
                    "src": {
                      "name": "0,430,24",
                      "text": "0,430,30,25",
                      "type": "0,430,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the maximum in the group being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,431,26",
                      "text": "0,431,35,45:0,432,8,208",
                      "type": "0,431,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The maximum value, if no items exist, undefined.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,435,25,49",
                      "type": "0,435,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,437,0",
                  "text": "0,426,8,108"
                }
              },
              {
                "$type": "method",
                "name": "min",
                "text": "Gets the minimum value in the store.\n\nWhen store is filtered, only items within the filter are aggregated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field in each record\n",
                    "type": "String",
                    "src": {
                      "name": "0,413,24",
                      "text": "0,413,30,25",
                      "type": "0,413,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the minimum in the group being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,414,26",
                      "text": "0,414,35,45:0,415,8,208",
                      "type": "0,414,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The minimum value, if no items exist, undefined.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,418,25,49",
                      "type": "0,418,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,420,0",
                  "text": "0,409,8,108"
                }
              },
              {
                "$type": "method",
                "name": "query",
                "text": "Query all the cached records in this Store by name/value pair.\nThe parameters will be used to generated a filter function that is given\nto the queryBy method.\n\nThis method complements queryBy by generating the query function automatically.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The property to create the filter function for\n",
                    "type": "String",
                    "src": {
                      "name": "0,329,24",
                      "text": "0,329,33,47",
                      "type": "0,329,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The string/regex to compare the property value to\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "0,330,31",
                      "text": "0,330,37,50",
                      "type": "0,330,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "optional": true,
                    "text": "True to match any part of the string, not just the\nbeginning.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,331,26",
                      "text": "0,331,42,51:0,332,8,11",
                      "type": "0,331,16",
                      "value": "0,331,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "optional": true,
                    "text": "`true` to create a case-sensitive regex.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,333,26",
                      "text": "0,333,47,41",
                      "type": "0,333,16",
                      "value": "0,333,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "exactMatch",
                    "optional": true,
                    "text": "True to force exact match (^ and $ characters\nadded to the regex). Ignored if `anyMatch` is `true`.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,334,26",
                      "text": "0,334,44,46:0,335,8,54",
                      "type": "0,334,16",
                      "value": "0,334,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "0,336,38,20",
                      "type": "0,336,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,338,0",
                  "text": "0,320,8,358"
                }
              },
              {
                "$type": "method",
                "name": "queryBy",
                "text": "Query all the cached records in this Store using a filtering function. The specified function\nwill be called with each record in this Store. If the function returns `true` the record is\nincluded in the results.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called. It will be passed the following parameters:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record to test for filtering. Access field values\n using <a href='#!/api/Ext.data.Model-method-get'>Ext.data.Model#get</a>.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "0,306,36",
                          "text": "0,306,43,54:0,307,8,35",
                          "type": "0,306,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "id",
                        "text": "The ID of the Record passed.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,308,28",
                          "text": "0,308,31,29",
                          "type": "0,308,17"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,305,26",
                      "text": "0,305,29,71",
                      "type": "0,305,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed\nDefaults to this Store.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,309,25",
                      "text": "0,309,32,61:0,310,8,24",
                      "type": "0,309,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "0,311,38,20",
                      "type": "0,311,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,313,0",
                  "text": "0,298,8,329"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queryRecords",
                "text": "Query all the cached records in this Store by field.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field from each record to use.\n",
                    "type": "String",
                    "src": {
                      "name": "0,584,24",
                      "text": "0,584,30,35",
                      "type": "0,584,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to match.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,585,24",
                      "text": "0,585,30,20",
                      "type": "0,585,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,586,35,21",
                      "type": "0,586,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,588,8",
                  "name": "0,590,0",
                  "text": "0,579,8,171"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "queryRecordsBy",
                "text": "Query all the cached records in this Store using a filtering function. The specified function\nwill be called with each record in this Store. If the function returns `true` the record is\nincluded in the results.\n\nThis method is not affected by filtering, it will always search *all* records in the store\nregardless of filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called. It will be passed the following parameters:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record to test for filtering.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "0,554,37",
                          "text": "0,554,44,34",
                          "type": "0,554,18"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,553,26",
                      "text": "0,553,29,71",
                      "type": "0,553,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed\nDefaults to this Store.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,555,25",
                      "text": "0,555,32,61:0,556,8,24",
                      "type": "0,555,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,557,35,21",
                      "type": "0,557,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,559,8",
                  "name": "0,561,0",
                  "text": "0,546,8,329"
                }
              },
              {
                "$type": "method",
                "name": "sum",
                "text": "Sums the value of `field` for each <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> in store\nand returns the result.\n\nWhen store is filtered, only sums items within the filter.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "A field in each record\n",
                    "type": "String",
                    "src": {
                      "name": "0,380,24",
                      "text": "0,380,30,23",
                      "type": "0,380,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "grouped",
                    "optional": true,
                    "text": "True to perform the operation for each group\nin the store. The value returned will be an object literal with the key being the group\nname and the sum for that group being the value. The grouped parameter is only honored if\nthe store has a groupField.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,381,26",
                      "text": "0,381,35,45:0,382,8,206",
                      "type": "0,381,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The sum\n",
                    "type": "Number",
                    "src": {
                      "text": "0,385,25,8",
                      "type": "0,385,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,387,0",
                  "text": "0,375,8,159"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,3,4",
          "extends": "0,6,0",
          "name": "0,5,0",
          "text": "0,2,4,87"
        }
      }
    ]
  },
  "version": 1
}