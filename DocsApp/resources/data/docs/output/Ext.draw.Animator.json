{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/draw/Animator.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Ext.draw.Animator",
        "singleton": true,
        "text": "\nSingleton class that manages the animation pool.\n",
        "uses": "Ext.draw.Draw",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "animationTime",
                "text": "Cross platform <a href='#!/api/Ext.draw.Animator-method-animationTime'>animationTime</a> implementation.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,19,18"
                    }
                  }
                ],
                "src": {
                  "name": "0,21,0",
                  "text": "0,18,9,47"
                }
              },
              {
                "$type": "method",
                "name": "add",
                "text": "Adds an animated object to the animation pool.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animation",
                    "text": "The animation descriptor to add to the pool.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,28,24",
                      "text": "0,28,34,45",
                      "type": "0,28,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,30,0",
                  "text": "0,26,8,48"
                }
              },
              {
                "$type": "method",
                "name": "remove",
                "text": "Removes an animation from the pool.\nTODO: This is broken when called within <a href='#!/api/Ext.draw.Animator-method-step'>step</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animation",
                    "text": "The animation to remove from the pool.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,44,24",
                      "text": "0,44,34,39",
                      "type": "0,44,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,46,0",
                  "text": "0,42,8,91"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "text": "Returns `true` or `false` whether it contains the given animation or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animation",
                    "text": "The animation to check for.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,66,24",
                      "text": "0,66,34,28",
                      "type": "0,66,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,67,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,69,0",
                  "text": "0,64,8,75"
                }
              },
              {
                "$type": "method",
                "name": "empty",
                "text": "Returns `true` or `false` whether the pool is empty or not.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,77,0",
                  "text": "0,74,8,60"
                }
              },
              {
                "$type": "method",
                "name": "step",
                "text": "Given a frame time it will filter out finished animations from the pool.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "frameTime",
                    "text": "The frame's start time, in milliseconds.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,84,24",
                      "text": "0,84,34,41",
                      "type": "0,84,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,86,0",
                  "text": "0,82,8,74"
                }
              },
              {
                "$type": "method",
                "name": "schedule",
                "text": "Register a one-time callback that will be called at the next frame.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "callback",
                    "type": "Function/String",
                    "src": {
                      "name": "0,109,33",
                      "type": "0,109,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "type": "Object",
                    "src": {
                      "name": "0,110,24",
                      "type": "0,110,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The ID of the scheduled callback.\n",
                    "type": "String",
                    "src": {
                      "text": "0,111,25,34",
                      "type": "0,111,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,113,0",
                  "text": "0,108,8,68"
                }
              },
              {
                "$type": "method",
                "name": "scheduleIf",
                "text": "Register a one-time callback that will be called at the next frame,\nif that callback (with a matching function and scope) isn't already scheduled.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "callback",
                    "type": "Function/String",
                    "src": {
                      "name": "0,129,33",
                      "type": "0,129,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "type": "Object",
                    "src": {
                      "name": "0,130,24",
                      "type": "0,130,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The ID of the scheduled callback or null, if that callback has already been scheduled.\n",
                    "type": "String/null",
                    "src": {
                      "text": "0,131,30,87",
                      "type": "0,131,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,133,0",
                  "text": "0,127,8,147"
                }
              },
              {
                "$type": "method",
                "name": "cancel",
                "text": "Cancel a registered one-time callback\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "type": "String",
                    "src": {
                      "name": "0,152,24",
                      "type": "0,152,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,154,0",
                  "text": "0,151,8,38"
                }
              },
              {
                "$type": "method",
                "name": "addFrameCallback",
                "text": "Register a recursive callback that will be called at every frame.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "callback",
                    "type": "Function",
                    "src": {
                      "name": "0,164,26",
                      "type": "0,164,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "type": "Object",
                    "src": {
                      "name": "0,165,24",
                      "type": "0,165,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,166,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,168,0",
                  "text": "0,162,8,67"
                }
              },
              {
                "$type": "method",
                "name": "removeFrameCallback",
                "text": "Unregister a recursive callback.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "type": "String",
                    "src": {
                      "name": "0,181,24",
                      "type": "0,181,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,183,0",
                  "text": "0,180,8,33"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fireFrameCallbacks",
                "src": {
                  "access": "0,188,8",
                  "name": "0,190,0"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,2,11",
          "singleton": "0,8,0",
          "text": "0,3,4,50",
          "uses": "0,7,0"
        }
      }
    ]
  },
  "version": 1
}