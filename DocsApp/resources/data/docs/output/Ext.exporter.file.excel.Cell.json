{
  "$type": "doxi",
  "files": [
    "../../../packages/exporter/src/exporter/file/excel/Cell.js",
    "../../../packages/exporter/src/exporter/file/Base.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extends": "Ext.exporter.file.Base",
        "name": "Ext.exporter.file.excel.Cell",
        "text": "This class is used to create an xml Excel Cell.\n\nThe data type of the cell value is automatically determined.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "dataType",
                "text": "(required)\n\nExcel data type for the cell value\n",
                "type": "String",
                "src": {
                  "name": "0,12,26",
                  "text": "0,12,35,11:0,13,12,36",
                  "type": "0,12,18"
                }
              },
              {
                "$type": "property",
                "name": "formula",
                "text": "\nSpecifies the formula stored in this cell. All formulas are persisted in R1C1 notation because they are\nsignificantly easier to parse and generate than A1-style formulas. The formula is calculated upon reload\nunless calculation is set to manual. Recalculation of the formula overrides the value in this cell's Value config.\n\nExamples:\n\n- \"=SUM(R1C1:R2C2)\": sums up values from Row1/Column1 to Row2/Column2\n- \"=SUM(R[-2]C:R[-1]C[1])\": sums up values from 2 rows above the current row and current column to\nvalues from 1 row above the current row and 1 column after the current column\n- \"=SUM(R[-1]C,R[-1]C[1])\": sums up values from cell positioned one row above current row and current column,\nand the cell positioned one row above current row and next column\n\nCheck Excel for more formulas.\n",
                "type": "String",
                "src": {
                  "name": "0,18,26",
                  "text": "0,19,12,792",
                  "type": "0,18,18"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "text": "\nUnique id for this object. Auto generated when missing.\n",
                "type": "String",
                "src": {
                  "name": "1,14,26",
                  "text": "1,15,12,57",
                  "type": "1,14,18"
                }
              },
              {
                "$type": "property",
                "name": "index",
                "text": "\nSpecifies the column index of this cell within the containing row. If this tag is not specified, the first\ninstance of a Cell element within a row has an assumed Index=\"1\". Each additional Cell element has an assumed\nIndex that is one higher.\n\nIndices must appear in strictly increasing order. Failure to do so will result in an XML Spreadsheet\ndocument that is invalid. Indices do not need to be sequential, however. Omitted indices are formatted with\neither the default format, the column's format, or the table's format (depending on what has been specified).\n\nIndices must not overlap. If duplicates exist, the behavior is unspecified and the XML Spreadsheet document\nis considered invalid. If the previous cell is a merged cell and no index is specified on this cell, its\nstart index is assumed to be the first cell after the merge.\n",
                "type": "Number",
                "src": {
                  "name": "0,36,26",
                  "text": "0,37,12,839",
                  "type": "0,36,18"
                }
              },
              {
                "$type": "property",
                "name": "mergeAcross",
                "text": "\nNumber of cells to merge to the right side of this cell\n",
                "type": "Number",
                "src": {
                  "name": "0,58,26",
                  "text": "0,59,12,57",
                  "type": "0,58,18"
                }
              },
              {
                "$type": "property",
                "name": "mergeDown",
                "text": "\nNumber of cells to merge below this cell\n",
                "type": "Number",
                "src": {
                  "name": "0,64,26",
                  "text": "0,65,12,42",
                  "type": "0,64,18"
                }
              },
              {
                "$type": "property",
                "name": "styleId",
                "text": "\nExcel style attached to this cell\n",
                "type": "String",
                "src": {
                  "name": "0,52,26",
                  "text": "0,53,12,35",
                  "type": "0,52,18"
                }
              },
              {
                "$type": "property",
                "name": "value",
                "text": "(required)\n\nValue assigned to this cell\n",
                "type": "Number/Date/String",
                "src": {
                  "name": "0,70,38",
                  "text": "0,70,44,11:0,71,12,29",
                  "type": "0,70,18"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "checkCollection",
                "text": "This method could be used in config appliers that need to initialize a\nCollection that has items of type className.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "src": {
                      "name": "1,44,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dataCollection",
                    "src": {
                      "name": "1,45,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "className",
                    "src": {
                      "name": "1,46,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "*",
                    "src": {
                      "type": "1,47,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,49,0",
                  "text": "1,41,8,117"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constructCollection",
                "text": "Create a new Collection with a decoder for the specified className.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "src": {
                      "name": "1,64,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Collection",
                    "src": {
                      "type": "1,65,18"
                    }
                  }
                ],
                "src": {
                  "access": "1,67,8",
                  "name": "1,69,0",
                  "text": "1,62,8,69"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCollectionDecoder",
                "text": "Builds a Collection decoder for the specified className.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "src": {
                      "name": "1,78,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "1,79,18"
                    }
                  }
                ],
                "src": {
                  "access": "1,81,8",
                  "name": "1,83,0",
                  "text": "1,76,8,58"
                }
              },
              {
                "$type": "method",
                "name": "getRenderData",
                "text": "Return the data used when rendering the template\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,101,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,103,0",
                  "text": "1,99,8,50"
                }
              },
              {
                "$type": "method",
                "name": "render",
                "text": "Renders the content according to the template provided to the class\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "1,92,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,94,0",
                  "text": "1,90,8,69"
                }
              }
            ]
          }
        ],
        "src": {
          "extends": "0,8,0",
          "name": "0,7,0",
          "text": "0,2,4,111"
        }
      }
    ]
  },
  "version": 1
}