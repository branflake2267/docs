{
  "$type": "doxi",
  "files": [
    "../../../packages/exporter/src/exporter/file/excel/Style.js",
    "../../../packages/exporter/src/exporter/file/Base.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extends": "Ext.exporter.file.Base",
        "name": "Ext.exporter.file.excel.Style",
        "text": "This class defines a single style in the current workbook. This element is optional,\nbut is required to perform any custom formatting.\n\n\nA style can be either standalone or based on one other style (this is called the parent style), in which case,\nall base properties are first inherited from the parent, then the properties in the style are treated as overrides.\nParent styles must be specified before they are first referenced.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "alignment",
                "text": "\nFollowing keys are allowed on this object and are all optional:\n\n- **Horizontal** (String): specifies the left-to-right alignment of text within a cell. The Spreadsheet component\ndoes not support `CenterAcrossSelection`, `Fill`, `Justify`, `Distributed`, and `JustifyDistributed`.\nPossible values: `Automatic`, `Left`, `Center`, `Right`, `Fill`, `Justify`, `CenterAcrossSelection`, `Distributed`,\nand `JustifyDistributed`. Default is `Automatic`.\n\n- **Indent** (Integer): specifies the number of indents. This attribute is not supported by the Spreadsheet component.\nDefaults to `0`.\n\n- **ReadingOrder** (String): specifies the default right-to-left text entry mode for a cell. The Spreadsheet component\ndoes not support `Context`. Possible values: `RightToLeft`, `LeftToRight`, and `Context`. Defaults to `Context`.\n\n- **Rotate** (Double): Specifies the rotation of the text within the cell. `90` is straight up, `0` is horizontal,\nand `-90` is straight down. The Spreadsheet component does not support this attribute. Defaults to `0`.\n\n- **ShrinkToFit** (Boolean): `true` means that the text size should be shrunk so that all of the text fits within the cell.\n`false` means that the font within the cell should behave normally. The Spreadsheet component does not support this attribute.\nDefaults to `false`.\n\n- **Vertical** (String): specifies the top-to-bottom alignment of text within a cell. `Distributed` and\n`JustifyDistributed` are only legitimate values when **VerticalText** is `1`. The Spreadsheet component does\nnot support `Justify`, `Distributed`, or `JustifyDistributed`. Possible values: `Automatic`, `Top`, `Bottom`,\n`Center`, `Justify`, `Distributed`, and `JustifyDistributed`. Defaults to `Automatic`.\n\n- **VerticalText** (Boolean): `true` specifies whether the text is drawn \"downwards\", whereby each letter is drawn horizontally,\none above the other. The Spreadsheet component does not support this attribute. Defaults to `false`.\n\n- **WrapText** (Boolean): specifies whether the text in this cell should wrap at the cell boundary. `false` means that\ntext either spills or gets truncated at the cell boundary (depending on whether the adjacent cell(s) have content).\nThe Spreadsheet component does not support this attribute. Defaults to `false`.\n",
                "type": "Object",
                "src": {
                  "name": "0,56,26",
                  "text": "0,57,12,2270",
                  "type": "0,56,18"
                }
              },
              {
                "$type": "property",
                "name": "borders",
                "text": "\nArray of border objects. Following keys are allowed for border objects:\n\n- **Position** (String): Specifies which of the six possible borders this element represents. Duplicate\nborders are not permitted and are considered invalid. The Spreadsheet component does not support\n`DiagonalLeft` or `DiagonalRight`. Possible values: `Left`, `Top`, `Right`, `Bottom`, `DiagonalLeft`, and\n`DiagonalRight`\n\n- **Color** (String): Specifies the color of this border. This value can be either a 6-hexadecimal digit\nnumber in \"#rrggbb\" format or it can be any of the Microsoft® Internet Explorer named colors\n(including the named Microsoft Windows® colors). This string can also be the special value of `Automatic`.\nThis string is case insensitive.\n\n- **LineStyle** (String): Specifies the appearance of this border. The Spreadsheet component does\nnot support `SlantDashDot` and `Double`. Possible values: `None`, `Continuous`, `Dash`, `Dot`, `DashDot`,\n`DashDotDot`, `SlantDashDot`, and `Double`.\n\n- **Weight** (Number): Specifies the weight (or thickness) of this border. This measurement is specified in points,\nand the following values map to Excel: `0`—Hairline, `1`—Thin, `2`—Medium, `3`—Thick.\n",
                "type": "Object[]",
                "src": {
                  "name": "0,187,28",
                  "text": "0,188,12,1189",
                  "type": "0,187,18"
                }
              },
              {
                "$type": "property",
                "name": "font",
                "text": "Defines the font attributes to use in this style. Each attribute that is specified is\nconsidered an override from the default.\n\n\nFollowing keys are allowed on this object:\n\n- **Bold** (Boolean): Specifies the bold state of the font. If the parent style has **Bold**: `true` and the child style wants\nto override the setting, it must explicitly set the value to **Bold**: `false`. If this attribute is not specified\nwithin an element, the default is assumed. Defaults to `false`.\n\n- **Color** (String): Specifies the color of the font. This value can be either a 6-hexadecimal digit number\nin \"#rrggbb\" format or it can be any of the Internet Explorer named colors (including the named Windows colors).\nThis string can also be special value of `Automatic`. This string is case insensitive. If this attribute is not\nspecified within an element, the default is assumed. Defaults to `Automatic`.\n\n- **FontName** (String): Specifies the name of the font. This string is case insensitive. If this attribute is\nnot specified within an element, the default is assumed. Defaults to `Arial`.\n\n- **Italic** (Boolean): Similar to **Bold** in behavior, this attribute specifies the italic state of the font.\nIf this attribute is not specified within an element, the default is assumed. Defaults to `false`.\n\n- **Outline** (Boolean): Similar to **Bold** in behavior, this attribute specifies whether the font is rendered as an\noutline. This property originates in Macintosh Office, and is not used on Windows. If this attribute is not\nspecified within an element, the default is assumed. The Spreadsheet component does not support this attribute.\nDefaults to `false`.\n\n- **Shadow** (Boolean): Similar to **Bold** in behavior, this attribute specifies whether the font is shadowed.\nThis property originates in Macintosh Office, and is not used on Windows. If this attribute is not\nspecified within an element, the default is assumed. The Spreadsheet component does not support this attribute.\nDefaults to `false`.\n\n- **Size** (Number): Specifies the size of the font in points. This value must be strictly greater than 0.\nIf this attribute is not specified within an element, the default is assumed. Defaults to `10`.\n\n- **StrikeThrough** (Boolean): Similar to **Bold** in behavior, this attribute specifies the strike-through state\nof the font. If this attribute is not specified within an element, the default is assumed. The Spreadsheet\ncomponent does not support this attribute. Defaults to `false`.\n\n- **Underline** (String): Specifies the underline state of the font. If the parent style is something other than\nNone and a child style wants to override the value, it must explicitly reset the value. If this attribute is\nnot specified within an element, the default is assumed. Possible values: `None`, `Single`, `Double`,\n`SingleAccounting`, and `DoubleAccounting`. Defaults to `None`.\n\n- **VerticalAlign** (String): This attribute specifies the subscript or superscript state of the font. If this\nattribute is not specified within an element, the default is assumed. The Spreadsheet component does not\nsupport this attribute. Possible values: `None`, `Subscript`, and `Superscript`. Defaults to `None`.\n\n- **CharSet** (Number): Win32-dependent character set value. Defaults to `0`.\n\n- **Family** (String): Win32-dependent font family. Possible values: `Automatic`, `Decorative`, `Modern`,\n`Roman`, `Script`, and `Swiss`. Defaults to `Automatic`.\n",
                "type": "Object",
                "src": {
                  "name": "0,93,26",
                  "text": "0,93,31,86:0,94,12,3354",
                  "type": "0,93,18"
                }
              },
              {
                "$type": "property",
                "name": "format",
                "text": "\nA number format code in the Excel number format syntax. This can also be one of the following values:\n`General`, `General Number`, `General Date`, `Long Date`, `Medium Date`, `Short Date`, `Long Time`, `Medium Time`,\n`Short Time`, `Currency`, `Euro Currency`, `Fixed`, `Standard`, `Percent`, `Scientific`, `Yes/No`,\n`True/False`, or `On/Off`. All special values are the same as the HTML number formats, with the exception\nof `Currency` and `Euro Currency`.\n\n`Currency` is the currency format with two decimal places and red text with parenthesis for negative values.\n\n`Euro Currency` is the same as `Currency` using the Euro currency symbol instead.\n",
                "type": "String",
                "src": {
                  "name": "0,172,26",
                  "text": "0,173,12,652",
                  "type": "0,172,18"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "text": "A unique name within this XML document that identifies this style. This string can be any valid\nidentifier and there is no notion of order. The special value of \"Default\" indicates that this style\nrepresents the default formatting for this workbook.\n",
                "type": "String",
                "src": {
                  "name": "0,16,26",
                  "text": "0,17,12,251",
                  "type": "0,16,18"
                }
              },
              {
                "$type": "property",
                "name": "interior",
                "text": "Defines the fill properties to use in this style. Each attribute that is specified is\nconsidered an override from the default.\n\nFollowing keys are allowed on this object:\n\n- **Color** (String): Specifies the fill color of the cell. This value can be either a 6-hexadecimal digit\nnumber in \"#rrggbb\" format or it can be any of the Internet Explorer named colors (including the named\nWindows colors). This string can also be special value of `Automatic`. This string is case insensitive.\nIf **Pattern**: \"Solid\", this value is the fill color of the cell. Otherwise, the cell is filled with a blend of\n**Color** and **PatternColor**, with the **Pattern** attribute choosing the appearance.\n\n- **Pattern** (String): Specifies the fill pattern in the cell. The fill pattern determines how to blend the\n**Color** and **PatternColor** attributes to produce the cell's appearance. The Spreadsheet component does not\nsupport this attribute. Possible values: `None`, `Solid`, `Gray75`, `Gray50`, `Gray25`, `Gray125`, `Gray0625`,\n`HorzStripe`, `VertStripe`, `ReverseDiagStripe`, `DiagStripe`, `DiagCross`, `ThickDiagCross`,\n`ThinHorzStripe`, `ThinVertStripe`, `ThinReverseDiagStripe`, `ThinDiagStripe`, `ThinHorzCross`, and\n`ThinDiagCross`. Defaults to `None`.\n\n- **PatternColor** (String): Specifies the secondary fill color of the cell when **Pattern** does not equal `Solid`.\nThe Spreadsheet component does not support this attribute. Defaults to `Automatic`.\n",
                "type": "Object",
                "src": {
                  "name": "0,148,26",
                  "text": "0,148,35,86:0,149,12,1367",
                  "type": "0,148,18"
                }
              },
              {
                "$type": "property",
                "name": "name",
                "text": "\nThis property identifies this style as a named style that was created in Excel using the Style\ncommand (Format menu). Duplicate names are illegal.\n",
                "type": "String",
                "src": {
                  "name": "0,33,26",
                  "text": "0,34,12,149",
                  "type": "0,33,18"
                }
              },
              {
                "$type": "property",
                "name": "parentId",
                "text": "\nPresence of this element indicates that this style should first inherit it's default formatting settings\nfrom the specified parent style. Then, after the parent settings are inherited, we apply the settings in\nthis style as overrides. This attribute refers to a predefined style ID.\n",
                "type": "String",
                "src": {
                  "name": "0,24,26",
                  "text": "0,25,12,285",
                  "type": "0,24,18"
                }
              },
              {
                "$type": "property",
                "name": "protection",
                "text": "Defines the protection properties that should be used in cells referencing this style.\nThis element exists as a short-hand way to apply protection to an entire table, row, or column, by simply adding it to a style.\n\nFollowing keys are allowed on this object and are all optional:\n\n- **Protected** (Boolean): This attribute indicates whether or not this cell is protected. When the worksheet is\nunprotected, cell-level protection has no effect. When a cell is protected, it will not allow the user to\nenter information into it. Defaults to `true`.\n\n- **HideFormula** (Boolean): This attribute indicates whether or not this cell's formula should be hidden when\nworksheet protection is enabled. Defaults to `false`.\n",
                "type": "Object",
                "src": {
                  "name": "0,41,26",
                  "text": "0,41,37,87:0,42,12,627",
                  "type": "0,41,18"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "checkCollection",
                "text": "This method could be used in config appliers that need to initialize a\nCollection that has items of type className.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "src": {
                      "name": "1,44,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dataCollection",
                    "src": {
                      "name": "1,45,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "className",
                    "src": {
                      "name": "1,46,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "*",
                    "src": {
                      "type": "1,47,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,49,0",
                  "text": "1,41,8,117"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constructCollection",
                "text": "Create a new Collection with a decoder for the specified className.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "src": {
                      "name": "1,64,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Collection",
                    "src": {
                      "type": "1,65,18"
                    }
                  }
                ],
                "src": {
                  "access": "1,67,8",
                  "name": "1,69,0",
                  "text": "1,62,8,69"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getCollectionDecoder",
                "text": "Builds a Collection decoder for the specified className.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "src": {
                      "name": "1,78,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "1,79,18"
                    }
                  }
                ],
                "src": {
                  "access": "1,81,8",
                  "name": "1,83,0",
                  "text": "1,76,8,58"
                }
              },
              {
                "$type": "method",
                "name": "getRenderData",
                "text": "Return the data used when rendering the template\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,101,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,103,0",
                  "text": "1,99,8,50"
                }
              },
              {
                "$type": "method",
                "name": "render",
                "text": "Renders the content according to the template provided to the class\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "1,92,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,94,0",
                  "text": "1,90,8,69"
                }
              }
            ]
          }
        ],
        "src": {
          "extends": "0,12,0",
          "name": "0,11,0",
          "text": "0,2,4,431"
        }
      }
    ]
  },
  "version": 1
}