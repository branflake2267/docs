{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/layout/container/Accordion.js",
    "../../../ext/classic/theme-neutral/sass/var/layout/container/Accordion.scss",
    "../../../ext/classic/classic/src/layout/container/Box.js",
    "../../../ext/classic/classic/src/layout/Layout.js",
    "../../../ext/classic/classic/src/util/ElementContainer.js",
    "../../../ext/classic/classic/src/layout/container/Container.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "layout.accordion",
        "alternateClassNames": "Ext.layout.AccordionLayout",
        "extends": "Ext.layout.container.VBox",
        "name": "Ext.layout.container.Accordion",
        "text": "This is a layout that manages multiple Panels in an expandable accordion style such that by default only\none Panel can be expanded at any given time (set <a href='#!/api/Ext.layout.container.Accordion-cfg-multi'>multi</a> config to have more open). Each Panel has\nbuilt-in support for expanding and collapsing.\n\nNote: Only Ext Panels and all subclasses of Ext.panel.Panel may be used in an accordion layout Container.\n\n    @example\n    Ext.create('Ext.panel.Panel', {\n        title: 'Accordion Layout',\n        width: 300,\n        height: 300,\n        defaults: {\n            // applied to each contained panel\n            bodyStyle: 'padding:15px'\n        },\n        layout: {\n            // layout-specific configs go here\n            type: 'accordion',\n            titleCollapse: false,\n            animate: true,\n            activeOnTop: true\n        },\n        items: [{\n            title: 'Panel 1',\n            html: 'Panel content!'\n        },{\n            title: 'Panel 2',\n            html: 'Panel content!'\n        },{\n            title: 'Panel 3',\n            html: 'Panel content!'\n        }],\n        renderTo: Ext.getBody()\n    });\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "activeOnTop",
                "text": "Only valid when <a href='#!/api/Ext.layout.container.Accordion-cfg-multi'>multi</a> is `false` and <a href='#!/api/Ext.layout.container.Accordion-cfg-animate'>animate</a> is `false`.\n\nTrue to swap the position of each panel as it is expanded so that it becomes the first item in the container,\nfalse to keep the panels in the rendered order.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,98,23",
                  "text": "0,99,8,234",
                  "type": "0,98,14"
                }
              },
              {
                "$type": "property",
                "name": "align",
                "optional": true,
                "text": "Controls how the child items of the container are aligned. The value is used to\nposition items \"perpendicularly\". That is, for horizontal boxes (where <a href='#!/api/Ext.layout.container.Accordion-cfg-vertical'>vertical</a>\nis `false`), then this will position items vertically. Otherwise, this will position\nitems horizontally. The acceptable values for this property are best explained in\ncontext with the value of <a href='#!/api/Ext.layout.container.Accordion-cfg-vertical'>vertical</a>.\n\nIf <a href='#!/api/Ext.layout.container.Accordion-cfg-vertical'>vertical</a> is `false` then this layout is behaving as an `hbox` and this config\noperates as follows:\n\n- **begin** : Child items are aligned vertically at the top of the container.\n- **middle** : Child items are vertically centered in the container.\n- **end** : Child items are aligned vertically at the bottom of the container.\n- **stretch** : Child items are stretched vertically to fill the height of the container.\n- **stretchmax** : Child items are stretched vertically to the height of the largest item.\n\nIf <a href='#!/api/Ext.layout.container.Accordion-cfg-vertical'>vertical</a> is `true` then this layout is behaving as an `vbox` and this config\noperates as follows:\n\n- **begin** : Child items are aligned horizontally at the left side of the container.\n- **middle** : Child items are horizontally centered in the container.\n- **end** : Child items are aligned horizontally at the right of the container.\n- **stretch** : Child items are stretched horizontally to fill the width of the container.\n- **stretchmax** : Child items are stretched horizontally to the size of the largest item.\n\nFor backwards compatibility, the following values are also recognized:\n\n- **left** : Same as **begin**.\n- **top** : Same as **begin**.\n- **center** : Same as **middle**.\n- **right** : Same as **end**.\n- **bottom** : Same as **end**.\n",
                "type": "String",
                "value": "\"begin\"",
                "src": {
                  "name": "2,23,27",
                  "text": "2,24,12,1638",
                  "type": "2,23,18",
                  "value": "2,23,33"
                }
              },
              {
                "$type": "property",
                "name": "alignRoundingMethod",
                "optional": true,
                "text": "The Math method\nto use for rounding fractional pixels when <a href='#!/api/Ext.layout.container.Accordion-cfg-align'>align</a>:middle` is used.\nThe possible values are:\n\n - [round](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n - [floor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n - [ceil](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n",
                "type": "\"round\"/\"floor\"/\"ceil\"",
                "value": "'round'",
                "src": {
                  "name": "2,161,43",
                  "text": "2,161,72,16:2,162,12,412",
                  "type": "2,161,18",
                  "value": "2,161,63"
                }
              },
              {
                "$type": "property",
                "name": "animate",
                "text": "True to slide the contained panels open and closed during expand/collapse using animation, false to open and\nclose directly with no animation. Note: The layout performs animated collapsing\nand expanding, *not* the child Panels.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,90,23",
                  "text": "0,91,8,228",
                  "type": "0,90,14"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "animatePolicy",
                "since": "4.1.0",
                "text": "An object that contains as keys the names of the properties that can be animated\nby child items as a consequence of a layout. This config is used internally by the\n<a href='#!/api/Ext.layout.container.Accordion'>Ext.layout.container.Accordion</a> layout to cause the child panels\nto animate to their proper size and position after a collapse/expand event.\n",
                "type": "Object",
                "src": {
                  "access": "3,233,8",
                  "name": "3,228,22",
                  "since": "3,234,15",
                  "text": "3,229,8,322",
                  "type": "3,228,14"
                }
              },
              {
                "$type": "property",
                "name": "autoWidth",
                "removedMessage": "config is ignored in ExtJS 4\n",
                "removedVersion": "This",
                "text": "Child Panels have their width actively managed to fit within the accordion's width.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,59,23",
                  "removedMessage": "0,61,8",
                  "removedVersion": "0,61,8",
                  "text": "0,60,8,84",
                  "type": "0,59,14"
                }
              },
              {
                "$type": "property",
                "name": "childEls",
                "text": "The canonical form of <a href='#!/api/Ext.layout.container.Accordion-cfg-childEls'>childEls</a> is an object keyed by child's property name\nwith values that are objects with the following properties.\n\n- `itemId` - The id to combine with the Component's id that is the id of the\n  child element.\n- `id` - The id of the child element.\n- `leaf` - Set to `true` to ignore content when scanning for childEls. This\n should be set on things like the generated content for an <a href='#!/api/Ext.view.View'>Ext.view.View</a>.\n- `select`: A selector that will be passed to <a href='#!/api/Ext.dom.Element-method-select'>Ext.dom.Element#method-select</a>.\n- `selectNode`: A selector that will be passed to <a href='#!/api/Ext.dom.Element-method-selectNode'>Ext.dom.Element#method-selectNode</a>.\n\nFor example:\n\n     childEls: {\n         button: true,\n         buttonText: 'text',\n         buttonImage: {\n             itemId: 'image'\n         }\n     }\n\nThe above is translated into the following complete form:\n\n     childEls: {\n         button: {\n             name: 'button',\n             itemId: 'button'\n         },\n         buttonText: {\n             name: 'buttonText',\n             itemId: 'text'\n         },\n         buttonImage: {\n             name: 'buttonImage',\n             itemId: 'image'\n         }\n     }\n\nThe above can be provided as an array like so:\n\n     childEls: [\n         'button',\n         { name: 'buttonText', itemId: 'text' },\n         { name: 'buttonImage', itemId: 'image' }\n     }\n\nFor example, a Component which renders a title and body text:\n\n    @example\n    Ext.create('Ext.Component', {\n        renderTo: Ext.getBody(),\n        renderTpl: [\n            '<h1 id=\"{id}-title\" data-ref=\"title\">{title}</h1>',\n            '<p>{msg}</p>',\n        ],\n        renderData: {\n            title: \"Error\",\n            msg: \"Something went wrong\"\n        },\n        childEls: [\"title\"],\n        listeners: {\n            afterrender: function(cmp){\n                // After rendering the component will have a title property\n                cmp.title.setStyle({color: \"red\"});\n            }\n        }\n    });\n\n**Note:** `childEl`s in the <a href='#!/api/Ext.Component-cfg-renderTpl'>Ext.Component#cfg-renderTpl</a>\nmust be referenced in a **data-ref** attribute.  Notice in the above example\nthat the \"title\" `childEl` is set in the `renderTpl` using\n**data-ref=\"title\"**.\n\nWhen using `select`, the property will be an instance of <a href='#!/api/Ext.dom.CompositeElement'>Ext.CompositeElement</a>.\nIn all other cases, the property will be an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> or <a href='#!/api/null'>null</a>\nif not found.\n\nCare should be taken when using `select` or `selectNode` to find child elements.\nThe following issues should be considered:\n\n- Performance: using selectors can be 10x slower than id lookup.\n- Over-selecting: selectors are applied after the DOM elements for all children\n  have been rendered, so selectors can match elements from child components\n  (including nested versions of the same component) accidentally.\n\nThis above issues are most important when using `select` since it returns multiple\nelements.\n",
                "type": "Object/String[]/Object[]",
                "src": {
                  "name": "4,70,44",
                  "text": "4,71,12,2854",
                  "type": "4,70,18"
                }
              },
              {
                "$type": "property",
                "name": "collapseFirst",
                "text": "True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools\nin the contained Panels' title bars, false to render it last. By default, this will use the\n<a href='#!/api/Ext.panel.Panel-cfg-collapseFirst'>Ext.panel.Panel#collapseFirst</a> setting on the panel. If the config option is specified on the layout,\nit will override the panel value.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,81,23",
                  "text": "0,82,8,341",
                  "type": "0,81,14"
                }
              },
              {
                "$type": "property",
                "name": "constrainAlign",
                "text": "Limits the size of <a href='#!/api/Ext.layout.container.Accordion-cfg-align'>align</a> components to the size of the container\nunder certain circumstances. Firstly, the container's height (for `hbox`) or width\n(for `vbox`) must not be determined by the size of the child components. Secondly,\nthe child components must have <a href='#!/api/Ext.Component-cfg-shrinkWrap'>Ext.AbstractComponent#shrinkWrap</a>\nenabled for this dimension.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,59,27",
                  "text": "2,60,12,359",
                  "type": "2,59,18"
                }
              },
              {
                "$type": "property",
                "name": "enableSplitters",
                "optional": true,
                "text": "This flag can be set to `false` to ignore the `split` config on box items. This is\nset to `false` by <a href='#!/api/Ext.layout.container.Accordion'>Ext.layout.container.Accordion</a>.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "2,69,28",
                  "text": "2,70,12,135",
                  "type": "2,69,18",
                  "value": "2,69,44"
                }
              },
              {
                "$type": "property",
                "name": "fill",
                "text": "True to adjust the active item's height to fill the available space in the container, false to use the\nitem's current height, or auto height if not explicitly set.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,52,23",
                  "text": "0,53,8,164",
                  "type": "0,52,14"
                }
              },
              {
                "$type": "property",
                "name": "hideCollapseTool",
                "text": "True to hide the contained Panels' collapse/expand toggle buttons, false to display them.\nWhen set to true, <a href='#!/api/Ext.layout.container.Accordion-cfg-titleCollapse'>titleCollapse</a> is automatically set to true.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,74,23",
                  "text": "0,75,8,161",
                  "type": "0,74,14"
                }
              },
              {
                "$type": "property",
                "name": "itemCls",
                "text": "An optional extra CSS class that will be added to the container. This can be useful for\nadding customized styles to the container or any of its children using standard CSS\nrules. See <a href='#!/api/Ext.Component'>Ext.Component</a>.<a href='#!/api/Ext.Component-cfg-componentCls'>Ext.Component#componentCls</a> also.\n",
                "type": "String",
                "src": {
                  "name": "5,25,22",
                  "text": "5,26,8,259",
                  "type": "5,25,14"
                }
              },
              {
                "$type": "property",
                "name": "multi",
                "text": "Set to true to enable multiple accordion items to be open at once.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,107,23",
                  "text": "0,108,8,67",
                  "type": "0,107,14"
                }
              },
              {
                "$type": "property",
                "name": "overflowHandler",
                "text": "An overflow handler or config object for an overflow handler.  This is typically\nspecified as one of the following strings:\n\n- `scroller` - Scroller buttons are rendered before and after the content.\n- `menu` - Overflowing items are rendered into a menu, and a button is rendered\n   after the items, which shows the menu when clicked.\n\nNOTE: This config is currently only supported when box layout is used by the\nfollowing components:\n\n- <a href='#!/api/Ext.toolbar.Toolbar'>Ext.toolbar.Toolbar</a>\n- <a href='#!/api/Ext.menu.Menu'>Ext.menu.Menu</a>\n- <a href='#!/api/Ext.toolbar.Breadcrumb'>Ext.toolbar.Breadcrumb</a>\n- <a href='#!/api/Ext.tab.Bar'>Ext.tab.Bar</a>\n\nComponents where <a href='#!/api/Ext.layout.container.Accordion-cfg-overflowHandler'>overflowHandler</a> is not supported should use\n<a href='#!/api/Ext.Component-cfg-scrollable'>Ext.Component#scrollable</a>:true` if they have overflowing\ncontent.\n",
                "type": "String/Ext.layout.container.boxOverflow.None",
                "src": {
                  "name": "2,97,0",
                  "text": "2,78,12,694",
                  "type": "2,77,18"
                }
              },
              {
                "$type": "property",
                "name": "pack",
                "text": "Controls how the child items of the container are packed together. Acceptable\nconfiguration values for this property are:\n\n  - **start** - child items are packed together at **left** (HBox) or **top**\n    (VBox) side of container (*default**)\n  - **center** - child items are packed together at **mid-width** (HBox) or\n    **mid-height** (VBox) of container\n  - **end** - child items are packed together at **right** (HBox) or **bottom**\n    (VBox) side of container\n",
                "type": "String",
                "src": {
                  "name": "2,129,26",
                  "text": "2,130,12,467",
                  "type": "2,129,18"
                }
              },
              {
                "$type": "property",
                "name": "padding",
                "text": "Sets the padding to be applied to all child items managed by this layout.\n\nThis property must be specified as a string containing space-separated, numeric\npadding values. The order of the sides associated with each value matches the\nway CSS processes padding values:\n\n  - If there is only one value, it applies to all sides.\n  - If there are two values, the top and bottom borders are set to the first\n    value and the right and left are set to the second.\n  - If there are three values, the top is set to the first value, the left and\n    right are set to the second, and the bottom is set to the third.\n  - If there are four values, they apply to the top, right, bottom, and left,\n    respectively.\n",
                "type": "String",
                "src": {
                  "name": "2,111,26",
                  "text": "2,112,12,702",
                  "type": "2,111,18"
                }
              },
              {
                "$type": "property",
                "name": "stretchMaxPartner",
                "text": "Allows stretchMax calculation to take into account the max perpendicular size\n(height for HBox layout and width for VBox layout) of another Box layout when\ncalculating its maximum perpendicular child size.\n\nIf specified as a string, this may be either a known Container ID, or a\nComponentQuery selector which is rooted at this layout's Container (ie, to find\na sibling, use `\"^>#siblingItemId`).\n",
                "type": "String/Ext.Component",
                "src": {
                  "name": "2,143,40",
                  "text": "2,144,12,396",
                  "type": "2,143,18"
                }
              },
              {
                "$type": "property",
                "name": "titleCollapse",
                "text": "True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow\nexpand/collapse only when the toggle tool button is clicked.  When set to false,\n<a href='#!/api/Ext.layout.container.Accordion-cfg-hideCollapseTool'>hideCollapseTool</a> should be false also. An explicit <a href='#!/api/Ext.panel.Panel-cfg-titleCollapse'>Ext.panel.Panel#titleCollapse</a> declared\non the panel will override this setting.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,65,23",
                  "text": "0,66,8,337",
                  "type": "0,65,14"
                }
              },
              {
                "$type": "property",
                "name": "vertical",
                "optional": true,
                "text": "Set to `true` to switch the layout to `vbox`.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "2,155,28",
                  "text": "2,156,12,46",
                  "type": "2,155,18",
                  "value": "2,155,37"
                }
              },
              {
                "$type": "property",
                "name": "wrapOver",
                "optional": true,
                "text": "When `true`, pressing Down or Right arrow key on the\nfocused last accordion panel header will navigate to the first panel; pressing Up\nor Left arrow key on the focused first accordion panel header will navigate to the\nlast panel.\nSet this to `false` to prevent keyboard navigation from wrapping over the edges.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,113,24",
                  "text": "0,113,39,53:0,114,8,258",
                  "type": "0,113,14",
                  "value": "0,113,33"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addChildEl",
                "since": "6.0.0",
                "text": "Add a childEl specific to this instance. This must be called before render.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "childEl",
                    "src": {
                      "name": "4,231,19"
                    }
                  }
                ],
                "src": {
                  "access": "4,232,12",
                  "name": "4,235,0",
                  "since": "4,233,19",
                  "text": "4,230,12,76"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterClassMixedIn",
                "text": "Called after the mixin is applied. We need to see if <a href='#!/api/Ext.layout.container.Accordion-cfg-childEls'>childEls</a> were used by\nthe `targetClass` and apply them to the config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetClass",
                    "type": "Ext.Class",
                    "src": {
                      "name": "4,253,31",
                      "type": "4,253,20"
                    }
                  }
                ],
                "src": {
                  "access": "4,254,12",
                  "name": "4,256,0",
                  "text": "4,251,12,125"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterCollapse",
                "text": "Called by an owning Panel after the Panel finishes its collapse process.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "3,563,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animated",
                    "src": {
                      "name": "3,563,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,560,8",
                  "name": "3,563,0",
                  "text": "3,561,8,73"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterExpand",
                "text": "Called by an owning Panel after the Panel finishes its expand process.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "3,573,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animated",
                    "src": {
                      "name": "3,573,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,570,8",
                  "name": "3,573,0",
                  "text": "3,571,8,71"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterRemove",
                "text": "Removes layout's itemCls and owning Container's itemCls.\nClears the managed dimensions flags\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "3,540,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,538,8",
                  "name": "3,540,0",
                  "text": "3,536,8,93"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "attachChildEls",
                "text": "Sets references to elements inside the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "src": {
                      "name": "4,274,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "4,274,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,272,12",
                  "name": "4,274,0",
                  "text": "4,271,12,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beginCollapse",
                "text": "Called by an owning Panel before the Panel begins its collapse process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "src": {
                      "name": "2,355,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,351,8",
                  "name": "2,355,0",
                  "text": "2,352,8,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beginExpand",
                "text": "Called by an owning Panel before the Panel begins its expand process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "src": {
                      "name": "2,372,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,368,8",
                  "name": "2,372,0",
                  "text": "2,369,8,149"
                }
              },
              {
                "$type": "method",
                "name": "beginLayout",
                "text": "In addition to work done by our base classes, containers benefit from some extra\ncached data. The following properties are added to the ownerContext:\n\n - visibleItems: the result of <a href='#!/api/Ext.layout.container.Accordion-method-getVisibleItems'>getVisibleItems</a>\n - childItems: the ContextItem[] for each visible item\n - targetContext: the ContextItem for the <a href='#!/api/Ext.layout.container.Accordion-method-getTarget'>getTarget</a> element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "src": {
                      "name": "5,92,0"
                    }
                  }
                ],
                "src": {
                  "name": "5,92,0",
                  "text": "5,85,8,331"
                }
              },
              {
                "$type": "method",
                "name": "beginLayoutCycle",
                "text": "Called before any calculation cycles to reset DOM values and prepare for calculation.\n\nThis is a write phase and DOM reads should be strictly avoided when overridding\nthis method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "3,98,40",
                      "text": "3,98,53,40:3,99,8,11",
                      "type": "3,98,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,100,16",
                  "text": "3,93,8,181"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "cacheFlexes",
                "text": "This method is called to (re)cache our understanding of flexes. This happens during beginLayoutCycle and may need to\nbe called again if the flexes are changed during the layout (e.g., like ColumnLayout).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "type": "Object",
                    "src": {
                      "name": "2,524,24",
                      "type": "2,524,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,525,8",
                  "name": "2,527,0",
                  "text": "2,522,8,204"
                }
              },
              {
                "$type": "method",
                "abstract": true,
                "name": "calculate",
                "text": "Called to perform the calculations for this layout. This method will be called at\nleast once and may be called repeatedly if the <a href='#!/api/Ext.layout.container.Accordion-property-done'>done</a> property is cleared\nbefore return to indicate that this layout is not yet done. The <a href='#!/api/Ext.layout.container.Accordion-property-done'>done</a> property\nis always set to `true` before entering this method.\n\nThis is a read phase and DOM writes should be strictly avoided in derived classes.\nInstead, DOM writes need to be written to <a href='#!/api/Ext.layout.ContextItem'>Ext.layout.ContextItem</a> objects to\n be flushed at the next opportunity.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "3,138,40",
                      "text": "3,138,53,40:3,139,8,11",
                      "type": "3,138,16"
                    }
                  }
                ],
                "src": {
                  "abstract": "3,141,8",
                  "name": "3,140,16",
                  "text": "3,129,8,509"
                }
              },
              {
                "$type": "method",
                "name": "completeLayout",
                "text": "This method (if implemented) is called at the end of the cycle in which this layout\ncompletes (by not setting <a href='#!/api/Ext.layout.container.Accordion-property-done'>done</a> to `false` in <a href='#!/api/Ext.layout.container.Accordion-method-calculate'>calculate</a>). It is\npossible for the layout to complete and yet become invalid before the end of the cycle,\nin which case, this method will not be called. It is also possible for this method to\nbe called and then later the layout becomes invalidated. This will result in\n<a href='#!/api/Ext.layout.container.Accordion-method-calculate'>calculate</a> being called again, followed by another call to this method.\n\nThis is a read phase and DOM writes should be strictly avoided in derived classes.\nInstead, DOM writes need to be written to <a href='#!/api/Ext.layout.ContextItem'>Ext.layout.ContextItem</a> objects to\nbe flushed at the next opportunity.\n\nThis method need not be implemented by derived classes and, in fact, should only be\nimplemented when needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "3,159,40",
                      "text": "3,159,53,40:3,160,8,11",
                      "type": "3,159,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,161,16",
                  "text": "3,145,8,811"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "configureItem",
                "text": "Adds layout's itemCls and owning Container's itemCls\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "5,156,0"
                    }
                  }
                ],
                "src": {
                  "access": "5,154,8",
                  "name": "5,156,0",
                  "text": "5,153,8,53"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "destroy",
                "text": "Destroys this layout. This method removes a `targetCls` from the `target`\nelement and calls `onDestroy`.\n\nA derived class can override either this method or `onDestroy` but in all\ncases must call the base class versions of these methods to allow the base class to\nperform its cleanup.\n\nThis method (or `onDestroy`) are overridden by subclasses most often to purge\nevent handlers or remove unmanged DOM nodes.\n",
                "src": {
                  "access": "3,590,8",
                  "name": "3,592,0",
                  "text": "3,580,8,410"
                }
              },
              {
                "$type": "method",
                "name": "finalizeLayout",
                "text": "This method (if implemented) is called after all layouts have completed. In most\nways this is similar to <a href='#!/api/Ext.layout.container.Accordion-method-completeLayout'>completeLayout</a>. This call can cause this (or any\nlayout) to be become invalid (see <a href='#!/api/Ext.layout.Context-method-invalidate'>Ext.layout.Context#invalidate</a>), but this\nis best avoided. This method is intended to be where final reads are made and so it\nis best to avoid invalidating layouts at this point whenever possible. Even so, this\nmethod can be used to perform final checks that may require all other layouts to be\ncomplete and then invalidate some results.\n\nThis is a read phase and DOM writes should be strictly avoided in derived classes.\nInstead, DOM writes need to be written to <a href='#!/api/Ext.layout.ContextItem'>Ext.layout.ContextItem</a> objects to\nbe flushed at the next opportunity.\n\nThis method need not be implemented by derived classes and, in fact, should only be\nimplemented when needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "3,180,40",
                      "text": "3,180,53,40:3,181,8,11",
                      "type": "3,180,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,182,16",
                  "text": "3,165,8,857"
                }
              },
              {
                "$type": "method",
                "name": "finishedLayout",
                "text": "This method is called after all layouts are complete and their calculations flushed\nto the DOM. No further layouts will be run and this method is only called once per\nlayout run. The base component layout caches `lastComponentSize`.\n\nThis is a write phase and DOM reads should be avoided if possible when overridding\nthis method.\n\nThis method need not be implemented by derived classes and, in fact, should only be\nimplemented when needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "3,196,40",
                      "text": "3,196,53,40:3,197,8,11",
                      "type": "3,196,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,199,0",
                  "text": "3,186,8,441"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getContainerSize",
                "text": "Returns the container size (that of the target). Only the fixed-sized dimensions can\nbe returned because the shrinkWrap dimensions are based on the contentWidth/Height\nas determined by the container layout.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The owner's context item.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "5,251,40",
                      "text": "5,251,53,26",
                      "type": "5,251,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "inDom",
                    "optional": true,
                    "text": "True if the container size must be in the DOM.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "5,252,26",
                      "text": "5,252,39,47",
                      "type": "5,252,16",
                      "value": "5,252,32"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The size\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "text": "The width\n",
                        "type": "Number",
                        "src": {
                          "name": "5,254,32",
                          "text": "5,254,38,10",
                          "type": "5,254,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "text": "The height\n",
                        "type": "Number",
                        "src": {
                          "name": "5,255,32",
                          "text": "5,255,39,11",
                          "type": "5,255,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "5,253,25,9",
                      "type": "5,253,17"
                    }
                  }
                ],
                "src": {
                  "access": "5,256,8",
                  "name": "5,258,0",
                  "text": "5,247,8,208"
                }
              },
              {
                "$type": "method",
                "name": "getElementTarget",
                "text": "Returns the element into which extra functional DOM elements can be inserted. Defaults to the owner Component's encapsulating element.\n\nMay be overridden in Component layout managers which implement a <a href='#!/api/Ext.layout.container.Accordion-method-getRenderTarget'>getRenderTarget</a> which must only\ncontain child components.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "5,397,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,399,0",
                  "text": "5,393,8,292"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getItemLayoutEl",
                "text": "For a given item, returns the element that participates in the childNodes array\nof the layout's target element.  This is usually the component's \"el\", but can\nalso be a wrapper\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,430,31",
                      "type": "3,430,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "HTMLElement",
                    "src": {
                      "type": "3,431,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,429,8",
                  "name": "3,433,0",
                  "text": "3,426,8,177"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getItemSizePolicy",
                "text": "Returns an object describing how this layout manages the size of the given component.\nThis method must be implemented by any layout that manages components.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,245,31",
                      "type": "3,245,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object describing the sizing done by the layout\nfor this item.\n",
                    "type": "Ext.layout.SizePolicy",
                    "src": {
                      "text": "3,246,40,51:3,247,8,15",
                      "type": "3,246,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,248,8",
                  "name": "3,250,0",
                  "text": "3,242,8,158"
                }
              },
              {
                "$type": "method",
                "name": "getLayoutItems",
                "text": "Returns an array of child components either for a render phase (Performed in the beforeLayout\nmethod of the layout's base class), or the layout phase (onLayout).\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "of child components\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "5,338,34,20",
                      "type": "5,338,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,340,0",
                  "text": "5,336,8,162"
                }
              },
              {
                "$type": "method",
                "name": "getRenderTarget",
                "text": "Returns the element into which rendering must take place. Defaults to the owner Container's\ntarget element.\n\nMay be overridden in layout managers which implement an inner element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "5,386,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,388,0",
                  "text": "5,381,8,181"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getRenderedItems",
                "text": "Returns all items that are rendered\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "All matching items\n",
                    "type": "Array",
                    "src": {
                      "text": "5,360,24,19",
                      "type": "5,360,17"
                    }
                  }
                ],
                "src": {
                  "access": "5,358,8",
                  "name": "5,362,0",
                  "text": "5,359,8,36"
                }
              },
              {
                "$type": "method",
                "name": "getTarget",
                "text": "Returns the owner component's resize element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "5,476,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,478,0",
                  "text": "5,475,8,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getVisibleItems",
                "text": "Returns all items that are both rendered and visible\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "All matching items\n",
                    "type": "Array",
                    "src": {
                      "text": "5,485,24,19",
                      "type": "5,485,17"
                    }
                  }
                ],
                "src": {
                  "access": "5,483,8",
                  "name": "5,487,0",
                  "text": "5,484,8,53"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initLayout",
                "text": "A one-time initialization method called just before rendering.\n",
                "src": {
                  "access": "3,506,8",
                  "name": "3,508,0",
                  "text": "3,505,8,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "insertSplitter",
                "text": "Inserts the splitter for a given region. A reference to the splitter is also stored\non the component as \"splitter\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "2,1278,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "src": {
                      "name": "2,1278,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "hidden",
                    "src": {
                      "name": "2,1278,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "splitterCfg",
                    "src": {
                      "name": "2,1278,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,1276,8",
                  "name": "2,1278,0",
                  "text": "2,1274,8,116"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "isValidParent",
                "text": "Validates item is in the proper place in the dom.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "3,409,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "3,409,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "src": {
                      "name": "3,409,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,407,8",
                  "name": "3,409,0",
                  "text": "3,406,8,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "moveItem",
                "text": "Moves Component to the provided target instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "3,482,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "3,482,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "src": {
                      "name": "3,482,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,480,8",
                  "name": "3,482,0",
                  "text": "3,479,8,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "notifyOwner",
                "text": "Called for every layout in the layout context after all the layouts have been finally flushed\n",
                "src": {
                  "access": "5,233,8",
                  "name": "5,236,0",
                  "text": "5,234,8,94"
                }
              },
              {
                "$type": "method",
                "name": "onContentChange",
                "text": "This method is called when a child item changes in some way. By default this calls\n<a href='#!/api/Ext.Component-updateLayout'>Ext.Component#updateLayout</a> on this layout's owner.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "text": "The child item that has changed.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,496,31",
                      "text": "3,496,37,33",
                      "type": "3,496,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if this layout has handled the content change.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,497,26,52",
                      "type": "3,497,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,499,0",
                  "text": "3,493,8,143"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "renderItem",
                "text": "Renders the given Component into the target Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The Component to render\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "3,463,31",
                      "text": "3,463,36,24",
                      "type": "3,463,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The target Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "3,464,33",
                      "text": "3,464,40,19",
                      "type": "3,464,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "text": "The position within the target to render the item to\n",
                    "type": "Number",
                    "src": {
                      "name": "3,465,24",
                      "text": "3,465,33,53",
                      "type": "3,465,16"
                    }
                  }
                ],
                "src": {
                  "access": "3,466,8",
                  "name": "3,468,0",
                  "text": "3,462,8,53"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "renderItems",
                "text": "Iterates over all passed items, ensuring they are rendered.  If the items are already rendered,\nalso determines if the items are in the proper place in the dom.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "items",
                    "src": {
                      "name": "3,382,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "3,382,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,380,8",
                  "name": "3,382,0",
                  "text": "3,378,8,161"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setOwner",
                "text": "Sets the layout owner\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "3,516,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,513,8",
                  "name": "3,516,0",
                  "text": "3,514,8,22"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "activeItemCount",
                "text": "tracks the number of child items that do not use \"liquid\" CSS layout\n",
                "src": {
                  "access": "5,60,8",
                  "name": "5,63,0",
                  "text": "5,61,8,69"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "animatePolicy",
                "text": "An object which contains boolean properties specifying which properties are to be\nanimated upon flush of child Component ContextItems. For example, Accordion would\nhave:\n\n     {\n         y: true,\n         height: true\n     }\n",
                "src": {
                  "access": "5,55,8",
                  "name": "5,57,0",
                  "text": "5,46,8,226"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "beginCollapse",
                "text": "Called by an owning Panel before the Panel begins its collapse process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "src": {
                  "access": "5,32,8",
                  "name": "5,36,0",
                  "text": "5,33,8,151"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "beginExpand",
                "text": "Called by an owning Panel before the Panel begins its expand process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "src": {
                  "access": "5,39,8",
                  "name": "5,43,0",
                  "text": "5,40,8,149"
                }
              },
              {
                "$type": "property",
                "name": "done",
                "text": "Used only during a layout run, this value indicates that a\nlayout has finished its calculations. This flag is set to true prior to the call to\n<a href='#!/api/Ext.layout.container.Accordion-method-calculate'>calculate</a> and should be set to false if this layout has more work to do.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,75,28",
                  "text": "3,75,33,59:3,76,8,166",
                  "type": "3,75,19"
                }
              },
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "6,295,28",
                  "text": "6,296,8,128",
                  "type": "6,295,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "getScrollerEl",
                "text": "Returns the element that wraps the contents for the purposes of touch scrolling.\nOnly applicable when the layout adds the scroller element as part of its renderTpl\n(e.g. autocontainer and box)\n",
                "src": {
                  "access": "3,258,8",
                  "name": "3,260,0",
                  "text": "3,255,8,193"
                }
              },
              {
                "$type": "property",
                "name": "isLayout",
                "readonly": true,
                "text": "`true` in this class to identify an object as an instantiated Layout, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,22,28",
                  "readonly": "3,24,8",
                  "text": "3,23,8,91",
                  "type": "3,22,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "needsItemSize",
                "text": "`true` if this layout may need to incorporate the dimensions of individual child\nitems into its layout calculations.  Layouts that handle the size of their children\nas a group (autocontainer, form) can set this to false for an additional performance\noptimization.  When `false` the layout system will not recurse into the child\nitems if <a href='#!/api/Ext.layout.container.Container-property-activeItemCount'>Ext.layout.container.Container#activeItemCount</a> is `0`, which will be the case if all child items\nuse \"liquid\" CSS layout, e.g. form fields.  (See Ext.Component#liquidLayout)\n",
                "src": {
                  "access": "3,31,8",
                  "name": "3,39,0",
                  "text": "3,32,8,519"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "setsItemSize",
                "text": "`true` if this layout may set the size of its child items.  Layouts that do not\nset the size of their child items (autocontainer, form) can set this to false\nfor an additional performance optimization.  When `true` the layout system will\nnot create a context item for children that use liquid layout, because there is\nno need for a context item if item size is neither read nor set by the owning layout.\n",
                "src": {
                  "access": "3,42,8",
                  "name": "3,49,0",
                  "text": "3,43,8,404"
                }
              }
            ]
          },
          {
            "$type": "vars",
            "items": [
              {
                "$type": "property",
                "name": "$accordion-background-color",
                "text": "The background-color of the Accordion layout element\n",
                "type": "color",
                "value": "#fff",
                "src": {
                  "name": "1,75,1",
                  "text": "1,73,4,53",
                  "type": "1,72,10",
                  "value": "1,75,38"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-body-border-width",
                "text": "The body border-width of Accordion layout element\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "1,69,1",
                  "text": "1,67,4,50",
                  "type": "1,66,10",
                  "value": "1,69,39"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-background-color",
                "text": "The background-color of Accordion headers\n",
                "type": "color",
                "value": "$base-color",
                "src": {
                  "name": "1,15,1",
                  "text": "1,13,4,42",
                  "type": "1,12,10",
                  "value": "1,15,45"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-border-color",
                "text": "The border-color of Accordion headers\n",
                "type": "Number/list",
                "value": "$panel-header-border-color",
                "src": {
                  "name": "1,39,1",
                  "text": "1,37,4,38",
                  "type": "1,36,10",
                  "value": "1,39,41"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-border-width",
                "text": "The border-width of Accordion headers\n",
                "type": "Number/list",
                "value": "1px 0",
                "src": {
                  "name": "1,33,1",
                  "text": "1,31,4,38",
                  "type": "1,30,10",
                  "value": "1,33,41"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-color",
                "text": "The text color of Accordion headers\n",
                "type": "color",
                "value": "#000",
                "src": {
                  "name": "1,9,1",
                  "text": "1,7,4,36",
                  "type": "1,6,10",
                  "value": "1,9,34"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-font-family",
                "text": "The font-family of Accordion headers\n",
                "type": "String",
                "value": "$font-family",
                "src": {
                  "name": "1,57,1",
                  "text": "1,55,4,37",
                  "type": "1,54,10",
                  "value": "1,57,40"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-font-weight",
                "text": "The font-weight of Accordion headers\n",
                "type": "String",
                "value": "$font-weight",
                "src": {
                  "name": "1,51,1",
                  "text": "1,49,4,37",
                  "type": "1,48,10",
                  "value": "1,51,40"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-over-background-color",
                "text": "The background-color of Accordion headers when hovered\n",
                "type": "color",
                "value": "$accordion-header-background-color",
                "src": {
                  "name": "1,21,1",
                  "text": "1,19,4,55",
                  "type": "1,18,10",
                  "value": "1,21,50"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-padding",
                "text": "The padding of Accordion headers\n",
                "type": "Number/list",
                "value": "4px 5px",
                "src": {
                  "name": "1,45,1",
                  "text": "1,43,4,33",
                  "type": "1,42,10",
                  "value": "1,45,36"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-text-transform",
                "text": "The text-transform property of Accordion headers\n",
                "type": "String",
                "value": "none",
                "src": {
                  "name": "1,63,1",
                  "text": "1,61,4,49",
                  "type": "1,60,10",
                  "value": "1,63,43"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-header-tool-size",
                "text": "The size of <a href='#!/api/Ext.panel.Tool'>Ext.panel.Tool</a> in Accordion headers\n",
                "type": "Number",
                "value": "$tool-size",
                "src": {
                  "name": "1,27,1",
                  "text": "1,25,4,62",
                  "type": "1,24,10",
                  "value": "1,27,38"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-item-margin",
                "text": "The padding of the Accordion layout element\n",
                "type": "Number/list",
                "value": "0",
                "src": {
                  "name": "1,87,1",
                  "text": "1,85,4,44",
                  "type": "1,84,10",
                  "value": "1,87,33"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-padding",
                "text": "The background-color of the Accordion layout element\n",
                "type": "color",
                "value": "0",
                "src": {
                  "name": "1,81,1",
                  "text": "1,79,4,53",
                  "type": "1,78,10",
                  "value": "1,81,29"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-tool-background-image",
                "text": "The sprite image to use for <a href='#!/api/Ext.panel.Tool'>Ext.panel.Tool</a> in Accordion headers\n",
                "type": "String",
                "value": "'tools/tool-sprites'",
                "src": {
                  "name": "1,93,1",
                  "text": "1,91,4,78",
                  "type": "1,90,10",
                  "value": "1,93,43"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-tool-collapse-glyph",
                "text": "Glyph for the Accordion's \"collapse\" tool icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-minus $accordion-tool-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,117,1",
                  "text": "1,115,4,101",
                  "type": "1,114,10",
                  "value": "1,117,41"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-tool-expand-glyph",
                "text": "Glyph for the Accordion's \"expand\" tool icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-plus $accordion-tool-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,111,1",
                  "text": "1,109,4,99",
                  "type": "1,108,10",
                  "value": "1,111,39"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-tool-glyph-color",
                "text": "The color to use for Accordion expand/collapse tool icons when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "color",
                "value": "$base-color",
                "src": {
                  "name": "1,99,1",
                  "text": "1,97,4,112",
                  "type": "1,96,10",
                  "value": "1,99,38"
                }
              },
              {
                "$type": "property",
                "name": "$accordion-tool-glyph-font-size",
                "text": "The font size to use for Accordion expand/collapse tool icons when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "Number",
                "value": "16px",
                "src": {
                  "name": "1,105,1",
                  "text": "1,103,4,116",
                  "type": "1,102,10",
                  "value": "1,105,42"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,39,0",
          "alternateClassNames": "0,42,0",
          "extends": "0,38,0",
          "name": "1,2,11",
          "text": "0,2,4,1094"
        }
      }
    ]
  },
  "version": 1
}