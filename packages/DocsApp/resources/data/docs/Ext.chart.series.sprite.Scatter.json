{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/chart/series/sprite/Scatter.js",
    "../../../ext/packages/charts/src/draw/sprite/Sprite.js",
    "../../../ext/packages/charts/src/chart/series/sprite/Cartesian.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "sprite.scatterSeries",
        "extended": "Ext.chart.series.sprite.Cartesian,Ext.draw.sprite.Sprite,Object",
        "extends": "Ext.chart.series.sprite.Cartesian",
        "name": "Ext.chart.series.sprite.Scatter",
        "text": "\nScatter series sprite.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "accessor": true,
                "name": "animation",
                "type": "Ext.draw.modifier.Animation",
                "src": {
                  "accessor": "1,672,8",
                  "name": "1,671,43",
                  "type": "1,671,14"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "accessor": true,
                "name": "dirty",
                "text": "Current state of the sprite.\nSet to `true` if the sprite needs to be repainted.\n",
                "type": "Boolean",
                "src": {
                  "access": "1,747,8",
                  "accessor": "1,751,8",
                  "name": "1,750,23",
                  "text": "1,748,8,80",
                  "type": "1,750,14"
                }
              },
              {
                "$type": "property",
                "name": "fillOpacity",
                "optional": true,
                "text": "The opacity of the fill. Limited from 0 to 1.\n",
                "type": "Number",
                "value": "1",
                "src": {
                  "name": "1,151,35",
                  "text": "1,151,50,46",
                  "type": "1,151,26",
                  "value": "1,151,47"
                }
              },
              {
                "$type": "property",
                "name": "fillStyle",
                "optional": true,
                "text": "The color of the shape (a CSS color value).\n",
                "type": "String",
                "value": "\"none\"",
                "src": {
                  "name": "1,141,35",
                  "text": "1,141,53,44",
                  "type": "1,141,26",
                  "value": "1,141,45"
                }
              },
              {
                "$type": "property",
                "name": "flipXY",
                "text": "If flipXY is 'true', the series is flipped.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,30,35",
                  "text": "2,30,42,44",
                  "type": "2,30,26"
                }
              },
              {
                "$type": "property",
                "name": "globalAlpha",
                "optional": true,
                "text": "The opacity of the sprite. Limited from 0 to 1.\n",
                "type": "Number",
                "value": "1",
                "src": {
                  "name": "1,214,35",
                  "text": "1,214,50,48",
                  "type": "1,214,26",
                  "value": "1,214,47"
                }
              },
              {
                "$type": "property",
                "name": "globalCompositeOperation",
                "optional": true,
                "text": "Indicates how source images are drawn onto a destination image.\nglobalCompositeOperation attribute is not supported by the SVG and VML (excanvas) engines.\n",
                "type": "String",
                "value": "source-over",
                "src": {
                  "name": "1,219,35",
                  "text": "1,220,20,155",
                  "type": "1,219,26",
                  "value": "1,219,60"
                }
              },
              {
                "$type": "property",
                "name": "hidden",
                "optional": true,
                "text": "Determines whether or not the sprite is hidden.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,226,36",
                  "text": "1,226,50,48",
                  "type": "1,226,26",
                  "value": "1,226,43"
                }
              },
              {
                "$type": "property",
                "name": "labelOverflowPadding",
                "optional": true,
                "text": "Padding around labels to determine overlap.\n",
                "type": "Number",
                "value": "10",
                "src": {
                  "name": "2,19,35",
                  "text": "2,19,60,44",
                  "type": "2,19,26",
                  "value": "2,19,56"
                }
              },
              {
                "$type": "property",
                "name": "labels",
                "optional": true,
                "text": "Labels used in the series.\n",
                "type": "Object",
                "value": "null",
                "src": {
                  "name": "2,14,35",
                  "text": "2,14,48,27",
                  "type": "2,14,26",
                  "value": "2,14,42"
                }
              },
              {
                "$type": "property",
                "name": "lineCap",
                "optional": true,
                "text": "The style of the line caps.\n",
                "type": "String",
                "value": "\"butt\"",
                "src": {
                  "name": "1,161,35",
                  "text": "1,161,51,28",
                  "type": "1,161,26",
                  "value": "1,161,43"
                }
              },
              {
                "$type": "property",
                "name": "lineDash",
                "text": "[lineDash=[]]\nAn even number of non-negative numbers specifying a dash/space sequence.\nNote that while this is supported in IE8 (VML engine), the behavior is\ndifferent from Canvas and SVG. Please refer to this document for details:\nhttp://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\nAlthough IE9 and IE10 have Canvas support, the 'lineDash'\nattribute is not supported in those browsers.\n",
                "type": "Array",
                "src": {
                  "name": "1,179,0",
                  "text": "1,171,33,14:1,172,20,385",
                  "type": "1,171,26"
                }
              },
              {
                "$type": "property",
                "name": "lineDashOffset",
                "optional": true,
                "text": "A number specifying how far into the line dash sequence drawing commences.\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "1,182,35",
                  "text": "1,183,20,75",
                  "type": "1,182,26",
                  "value": "1,182,50"
                }
              },
              {
                "$type": "property",
                "name": "lineJoin",
                "optional": true,
                "text": "The style of the line join.\n",
                "type": "String",
                "value": "\"miter\"",
                "src": {
                  "name": "1,166,35",
                  "text": "1,166,53,28",
                  "type": "1,166,26",
                  "value": "1,166,44"
                }
              },
              {
                "$type": "property",
                "name": "lineWidth",
                "optional": true,
                "text": "The width of the line stroke.\n",
                "type": "Number",
                "value": "1",
                "src": {
                  "name": "1,156,35",
                  "text": "1,156,48,30",
                  "type": "1,156,26",
                  "value": "1,156,45"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS <a href='#!/api/Ext.Component'>Ext.Component</a>**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the <a href='#!/api/Ext.view.View'>Ext.view.View</a>s **<a href='#!/api/Ext.view.View-event-itemclick'>Ext.view.View#itemclick</a>** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "3,243,25",
                  "text": "3,244,11,1325",
                  "type": "3,243,17"
                }
              },
              {
                "$type": "property",
                "name": "miterLimit",
                "optional": true,
                "text": "Sets the distance between the inner corner and the outer corner where two lines meet.\n",
                "type": "Number",
                "value": "10",
                "src": {
                  "name": "1,188,35",
                  "text": "1,189,20,86",
                  "type": "1,188,26",
                  "value": "1,188,46"
                }
              },
              {
                "$type": "property",
                "name": "parent",
                "text": "The immediate parent of the sprite. Not necessarily a surface.\n",
                "type": "Ext.draw.Surface/Ext.draw.sprite.Instancing/Ext.draw.sprite.Composite",
                "src": {
                  "name": "1,677,89",
                  "text": "1,678,12,63",
                  "type": "1,677,18"
                }
              },
              {
                "$type": "property",
                "name": "rotation",
                "text": "Applies an initial angle of rotation to the sprite.  May be a number\nspecifying the rotation in degrees.  Or may be a config object using\nthe below config options.\n\n**Note:** Rotation config options will be overridden by values set on\nthe <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationRads'>rotationRads</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationCenterX'>rotationCenterX</a>, and\n<a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationCenterY'>rotationCenterY</a> configs.\n\n    Ext.create({\n        xtype: 'draw',\n        renderTo: Ext.getBody(),\n        width: 600,\n        height: 400,\n        sprites: [{\n            type: 'rect',\n            x: 50,\n            y: 50,\n            width: 100,\n            height: 100,\n            fillStyle: '#1F6D91',\n            //rotation: 45\n            rotation: {\n                degrees: 45,\n                //rads: Math.PI / 4,\n                //centerX: 50,\n                //centerY: 50\n            }\n        }]\n    });\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n",
                "type": "Number/Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "rads",
                    "text": "The angle in radians to rotate the sprite\n",
                    "type": "Number",
                    "src": {
                      "name": "1,431,43",
                      "text": "1,432,20,43",
                      "type": "1,431,26"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "degrees",
                    "text": "The angle in degrees to rotate the sprite (is ignored if rads or\n<a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationRads'>rotationRads</a> is set\n",
                    "type": "Number",
                    "src": {
                      "name": "1,434,43",
                      "text": "1,435,20,95",
                      "type": "1,434,26"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "centerX",
                    "text": "The central coordinate of the sprite's rotation on the x-axis.\nUnless explicitly set, will default to the calculated center of the\nsprite along the x-axis.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,438,43",
                      "text": "1,439,20,157",
                      "type": "1,438,26"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "centerY",
                    "text": "The central coordinate of the sprite's rotation on the y-axis.\nUnless explicitly set, will default to the calculated center of the\nsprite along the y-axis.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,443,43",
                      "text": "1,444,20,156",
                      "type": "1,443,26"
                    }
                  }
                ],
                "src": {
                  "name": "1,393,41",
                  "text": "1,394,20,938",
                  "type": "1,393,26"
                }
              },
              {
                "$type": "property",
                "name": "rotationCenterX",
                "optional": true,
                "text": "The central coordinate of the sprite's scale operation on the x-axis.\nUnless explicitly set, will default to the calculated center of the\nsprite along the x-axis.\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotation'>rotation</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationRads'>rotationRads</a>, and\n<a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationCenterY'>rotationCenterY</a>\n",
                "type": "Number",
                "value": "null",
                "src": {
                  "name": "1,289,35",
                  "text": "1,290,20,363",
                  "type": "1,289,26",
                  "value": "1,289,51"
                }
              },
              {
                "$type": "property",
                "name": "rotationCenterY",
                "optional": true,
                "text": "The central coordinate of the sprite's rotate operation on the y-axis.\nUnless explicitly set, will default to the calculated center of the\nsprite along the y-axis.\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotation'>rotation</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationRads'>rotationRads</a>, and\n<a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationCenterX'>rotationCenterX</a>\n",
                "type": "Number",
                "value": "null",
                "src": {
                  "name": "1,307,35",
                  "text": "1,308,20,364",
                  "type": "1,307,26",
                  "value": "1,307,51"
                }
              },
              {
                "$type": "property",
                "name": "rotationRads",
                "optional": true,
                "text": "The angle of rotation of the sprite in radians.\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotation'>rotation</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationCenterX'>rotationCenterX</a>, and\n<a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-rotationCenterY'>rotationCenterY</a>\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "1,273,35",
                  "text": "1,274,20,251",
                  "type": "1,273,26",
                  "value": "1,273,48"
                }
              },
              {
                "$type": "property",
                "name": "scaling",
                "text": "Applies initial scaling to the sprite.  May be a number specifying\nthe amount to scale both the x and y-axis.  The number value\nrepresents a percentage by which to scale the sprite.  **1** is equal\nto 100%, **2** would be 200%, etc.  Or may be a config object using\nthe below config options.\n\n**Note:** Scaling config options will be overridden by values set on\nthe <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingX'>scalingX</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingY'>scalingY</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingCenterX'>scalingCenterX</a>,\nand <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingCenterY'>scalingCenterY</a> configs.\n\n    Ext.create({\n        xtype: 'draw',\n        renderTo: Ext.getBody(),\n        width: 600,\n        height: 400,\n        sprites: [{\n            type: 'rect',\n            x: 50,\n            y: 50,\n            width: 100,\n            height: 100,\n            fillStyle: '#1F6D91',\n            //scaling: 2,\n            scaling: {\n                x: 2,\n                y: 2\n                //centerX: 100,\n                //centerY: 100\n            }\n        }]\n    });\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n",
                "type": "Number/Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "x",
                    "text": "The amount by which to scale the sprite along the x-axis.  The number\nvalue represents a percentage by which to scale the sprite.  **1** is\nequal to 100%, **2** would be 200%, etc.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,490,42",
                      "text": "1,491,20,182",
                      "type": "1,490,26"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "y",
                    "text": "The amount by which to scale the sprite along the y-axis.  The number\nvalue represents a percentage by which to scale the sprite.  **1** is\nequal to 100%, **2** would be 200%, etc.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,495,42",
                      "text": "1,496,20,182",
                      "type": "1,495,26"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "centerX",
                    "text": "The central coordinate of the sprite's scaling on the x-axis.  Unless\nexplicitly set, will default to the calculated center of the sprite\nalong the x-axis.\n",
                    "src": {
                      "name": "1,500,33",
                      "text": "1,501,20,157"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "centerY",
                    "text": "The central coordinate of the sprite's scaling on the y-axis.  Unless\nexplicitly set, will default to the calculated center of the sprite\nalong the y-axis.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,505,42",
                      "text": "1,506,20,156",
                      "type": "1,505,26"
                    }
                  }
                ],
                "src": {
                  "name": "1,450,41",
                  "text": "1,451,20,819:1,476,17,21:1,477,20,215",
                  "type": "1,450,26"
                }
              },
              {
                "$type": "property",
                "name": "scalingCenterX",
                "optional": true,
                "text": "The central coordinate of the sprite's scale operation on the x-axis.\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scaling'>scaling</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingX'>scalingX</a>,\n<a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingY'>scalingY</a>, and <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingCenterY'>scalingCenterY</a>\n",
                "type": "Number",
                "value": "null",
                "src": {
                  "name": "1,359,35",
                  "text": "1,360,20,283",
                  "type": "1,359,26",
                  "value": "1,359,50"
                }
              },
              {
                "$type": "property",
                "name": "scalingCenterY",
                "optional": true,
                "text": "The central coordinate of the sprite's scale operation on the y-axis.\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scaling'>scaling</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingX'>scalingX</a>,\n<a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingY'>scalingY</a>, and <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingCenterX'>scalingCenterX</a>\n",
                "type": "Number",
                "value": "null",
                "src": {
                  "name": "1,375,35",
                  "text": "1,376,20,283",
                  "type": "1,375,26",
                  "value": "1,375,50"
                }
              },
              {
                "$type": "property",
                "name": "scalingX",
                "optional": true,
                "text": "The scaling of the sprite on the x-axis.\nThe number value represents a percentage by which to scale the\nsprite.  **1** is equal to 100%, **2** would be 200%, etc.\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scaling'>scaling</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingY'>scalingY</a>,\n<a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingCenterX'>scalingCenterX</a>, and <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingCenterY'>scalingCenterY</a>\n",
                "type": "Number",
                "value": "1",
                "src": {
                  "name": "1,325,35",
                  "text": "1,325,47,41:1,326,20,341",
                  "type": "1,325,26",
                  "value": "1,325,44"
                }
              },
              {
                "$type": "property",
                "name": "scalingY",
                "optional": true,
                "text": "The scaling of the sprite on the y-axis.\nThe number value represents a percentage by which to scale the\nsprite.  **1** is equal to 100%, **2** would be 200%, etc.\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scaling'>scaling</a>, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingX'>scalingX</a>,\n<a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingCenterX'>scalingCenterX</a>, and <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-scalingCenterY'>scalingCenterY</a>\n",
                "type": "Number",
                "value": "1",
                "src": {
                  "name": "1,342,35",
                  "text": "1,342,47,41:1,343,20,341",
                  "type": "1,342,26",
                  "value": "1,342,44"
                }
              },
              {
                "$type": "property",
                "name": "selectionTolerance",
                "optional": true,
                "text": "The distance from the event position to the sprite's data points to trigger interactions (used for 'iteminfo', etc).\n",
                "type": "Number",
                "value": "20",
                "src": {
                  "name": "2,24,35",
                  "text": "2,25,20,117",
                  "type": "2,24,26",
                  "value": "2,24,54"
                }
              },
              {
                "$type": "property",
                "name": "shadowBlur",
                "optional": true,
                "text": "The amount blur used on the shadow.\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "1,209,35",
                  "text": "1,209,49,36",
                  "type": "1,209,26",
                  "value": "1,209,46"
                }
              },
              {
                "$type": "property",
                "name": "shadowColor",
                "optional": true,
                "text": "The color of the shadow (a CSS color value).\n",
                "type": "String",
                "value": "\"none\"",
                "src": {
                  "name": "1,194,35",
                  "text": "1,194,55,45",
                  "type": "1,194,26",
                  "value": "1,194,47"
                }
              },
              {
                "$type": "property",
                "name": "shadowOffsetX",
                "optional": true,
                "text": "The offset of the sprite's shadow on the x-axis.\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "1,199,35",
                  "text": "1,199,52,49",
                  "type": "1,199,26",
                  "value": "1,199,49"
                }
              },
              {
                "$type": "property",
                "name": "shadowOffsetY",
                "optional": true,
                "text": "The offset of the sprite's shadow on the y-axis.\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "1,204,35",
                  "text": "1,204,52,49",
                  "type": "1,204,26",
                  "value": "1,204,49"
                }
              },
              {
                "$type": "property",
                "name": "strokeOpacity",
                "optional": true,
                "text": "The opacity of the stroke. Limited from 0 to 1.\n",
                "type": "Number",
                "value": "1",
                "src": {
                  "name": "1,146,35",
                  "text": "1,146,52,48",
                  "type": "1,146,26",
                  "value": "1,146,49"
                }
              },
              {
                "$type": "property",
                "name": "strokeStyle",
                "optional": true,
                "text": "The color of the stroke (a CSS color value).\n",
                "type": "String",
                "value": "\"none\"",
                "src": {
                  "name": "1,136,35",
                  "text": "1,136,55,45",
                  "type": "1,136,26",
                  "value": "1,136,47"
                }
              },
              {
                "$type": "property",
                "name": "surface",
                "text": "The surface that this sprite is rendered into.\n",
                "type": "Ext.draw.Surface",
                "src": {
                  "name": "1,682,36",
                  "text": "1,683,12,47",
                  "type": "1,682,18"
                }
              },
              {
                "$type": "property",
                "name": "transformFillStroke",
                "optional": true,
                "text": "Determines whether the fill and stroke are affected by sprite transformations.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,231,36",
                  "text": "1,232,20,79",
                  "type": "1,231,26",
                  "value": "1,231,56"
                }
              },
              {
                "$type": "property",
                "name": "translation",
                "text": "Applies an initial translation, adjustment in x/y positioning, to the\nsprite.\n\n**Note:** Translation config options will be overridden by values set\non the <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-translationX'>translationX</a> and <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-translationY'>translationY</a> configs.\n\n    Ext.create({\n        xtype: 'draw',\n        renderTo: Ext.getBody(),\n        width: 600,\n        height: 400,\n            sprites: [{\n            type: 'rect',\n            x: 50,\n            y: 50,\n            width: 100,\n            height: 100,\n            fillStyle: '#1F6D91',\n            translation: {\n                x: 50,\n                y: 50\n            }\n        }]\n    });\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n",
                "type": "Object",
                "items": [
                  {
                    "$type": "property",
                    "name": "x",
                    "text": "The amount to translate the sprite along the x-axis.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,545,46",
                      "text": "1,546,20,54",
                      "type": "1,545,26"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "y",
                    "text": "The amount to translate the sprite along the y-axis.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,548,46",
                      "text": "1,549,20,53",
                      "type": "1,548,26"
                    }
                  }
                ],
                "src": {
                  "name": "1,512,34",
                  "text": "1,513,20,723",
                  "type": "1,512,26"
                }
              },
              {
                "$type": "property",
                "name": "translationX",
                "optional": true,
                "text": "The translation, position offset, of the sprite on the x-axis.\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-translation'>translation</a> and <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-translationY'>translationY</a>\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "1,243,35",
                  "text": "1,244,20,239",
                  "type": "1,243,26",
                  "value": "1,243,48"
                }
              },
              {
                "$type": "property",
                "name": "translationY",
                "optional": true,
                "text": "The translation, position offset, of the sprite on the y-axis.\n\n**Note:** Transform configs are *always* performed in the following\norder:\n\n 1. Scaling\n 2. Rotation\n 3. Translation\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-translation'>translation</a> and <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-translationX'>translationX</a>\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "1,258,35",
                  "text": "1,259,20,239",
                  "type": "1,258,26",
                  "value": "1,258,48"
                }
              },
              {
                "$type": "property",
                "name": "zIndex",
                "optional": true,
                "text": "The stacking order of the sprite.\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "1,237,35",
                  "text": "1,238,20,34",
                  "type": "1,237,26",
                  "value": "1,237,42"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "3,413,27",
                      "type": "3,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,414,30,35",
                      "type": "3,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,412,12",
                  "name": "3,416,0",
                  "text": "3,411,12,65"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for <a href='#!/api/Ext.chart.series.sprite.Scatter-method-onAfter'>onAfter</a>.\n",
                "src": {
                  "name": "3,1236,0",
                  "text": "3,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.chart.series.sprite.Scatter-method-onBefore'>onBefore</a>.\n",
                "src": {
                  "name": "3,1230,0",
                  "text": "3,1228,12,29"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The <a href='#!/api/Ext.chart.series.sprite.Scatter-method-on'>on</a> method is shorthand for\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "3,835,35",
                      "text": "3,835,45,37:3,836,12,61",
                      "type": "3,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,838,38",
                      "text": "3,838,42,46:3,839,12,166",
                      "type": "3,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "3,843,29",
                      "text": "3,843,36,62:3,844,12,73",
                      "type": "3,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "3,853,36",
                          "text": "3,854,12,139",
                          "type": "3,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,857,36",
                          "text": "3,858,12,94",
                          "type": "3,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,861,37",
                          "text": "3,862,12,96",
                          "type": "3,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an <a href='#!/api/Ext.util.DelayedTask'>Ext.util.DelayedTask</a> delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,865,36",
                          "text": "3,866,12,262",
                          "type": "3,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  <a href='#!/api/Ext.Function-method-requestAnimationFrame'>Ext.Function#requestAnimationFrame</a>. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,870,36",
                          "text": "3,871,12,323",
                          "type": "3,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "3,877,49",
                          "text": "3,878,12,135",
                          "type": "3,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.Component'>Ext.Component</a>.**\n  The name of a Component property which references an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of <a href='#!/api/Ext.Component'>Ext.Component</a> which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "3,881,36",
                          "text": "3,882,12,781",
                          "type": "3,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "3,905,37",
                          "text": "3,906,12,295",
                          "type": "3,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopPropagation'>Ext.event.Event#stopPropagation</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,914,38",
                          "text": "3,915,12,212",
                          "type": "3,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-preventDefault'>Ext.event.Event#preventDefault</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,919,38",
                          "text": "3,920,12,210",
                          "type": "3,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopEvent'>Ext.event.Event#stopEvent</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "3,924,38",
                          "text": "3,925,12,200",
                          "type": "3,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "3,929,36",
                          "text": "3,930,12,179",
                          "type": "3,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-destroy'>destroy</a> method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using <a href='#!/api/Ext.chart.series.sprite.Scatter-method-un'>un</a>; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See <a href='#!/api/Ext.chart.series.sprite.Scatter-method-un'>un</a> for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "3,934,38",
                          "text": "3,935,12,441",
                          "type": "3,934,20",
                          "value": "3,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "3,942,37",
                          "text": "3,943,12,737",
                          "type": "3,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "3,954,37",
                          "text": "3,955,12,301",
                          "type": "3,954,20",
                          "value": "3,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "3,846,29",
                      "text": "3,846,38,44:3,847,12,154",
                      "type": "3,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "3,962,29",
                      "text": "3,963,12,1831",
                      "type": "3,962,20",
                      "value": "3,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-destroy'>destroy</a> method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1021,29,54:3,1022,12,516",
                      "type": "3,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1041,0",
                  "text": "3,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use <a href='#!/api/Ext.chart.series.sprite.Scatter-method-mon'>mon</a> or <a href='#!/api/Ext.chart.series.sprite.Scatter-method-addManagedListener'>addManagedListener</a> if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "3,456,56",
                      "text": "3,456,61,47",
                      "type": "3,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "3,457,34",
                      "text": "3,457,40,63",
                      "type": "3,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,458,36",
                      "text": "3,458,39,49:3,459,11,85",
                      "type": "3,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,461,27",
                      "text": "3,461,33,92:3,462,11,43",
                      "type": "3,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> options.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,463,27",
                      "text": "3,463,35,67:3,464,11,61",
                      "type": "3,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-destroy'>destroy</a> method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "3,465,28,54:3,466,11,513",
                      "type": "3,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,484,0",
                  "text": "3,430,11,1093"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyTransformations",
                "text": "Calculates forward and inverse transform matrices from sprite's attributes.\nTransformations are applied in the following order: Scaling, Rotation, Translation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "force",
                    "optional": true,
                    "text": "Forces recalculation of transform matrices even when\nsprite's transform attributes supposedly haven't changed.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1226,26",
                      "text": "1,1226,39,53:1,1227,8,58",
                      "type": "1,1226,16",
                      "value": "1,1226,32"
                    }
                  }
                ],
                "src": {
                  "access": "1,1222,8",
                  "name": "1,1229,0",
                  "text": "1,1224,8,160"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "bboxUpdater",
                "items": [
                  {
                    "$type": "param",
                    "name": "attr",
                    "src": {
                      "name": "1,1034,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,1032,8",
                  "name": "1,1034,0"
                }
              },
              {
                "$type": "method",
                "name": "binarySearch",
                "text": "Does a binary search of the data on the x-axis using the given key.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "type": "String",
                    "src": {
                      "name": "2,117,24",
                      "type": "2,117,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "*",
                    "src": {
                      "type": "2,118,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,120,0",
                  "text": "2,116,8,68"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "callUpdaters",
                "text": "Calls updaters triggered by changes to sprite attributes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "attr",
                    "text": "The attributes of a sprite or its instance.\n",
                    "src": {
                      "name": "1,866,15",
                      "text": "1,866,20,44"
                    }
                  }
                ],
                "src": {
                  "access": "1,864,8",
                  "name": "1,868,0",
                  "text": "1,865,8,58"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "3,1255,0",
                  "text": "3,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "3,1291,0",
                  "text": "3,1289,11,47"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,40,21",
                      "text": "4,40,28,19",
                      "type": "4,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "4,38,12",
                  "text": "4,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1524,27",
                      "text": "3,1524,35,55",
                      "type": "3,1524,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,1525,26",
                      "text": "3,1525,35,61",
                      "type": "3,1525,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "3,1526,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,1522,11",
                  "name": "3,1528,0",
                  "text": "3,1523,11,103"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "Removes the sprite and clears all listeners.\n",
                "src": {
                  "name": "1,1702,0",
                  "text": "1,1700,8,45"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "3,761,27",
                      "type": "3,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "3,762,26",
                      "type": "3,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "3,763,28",
                      "type": "3,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,759,11",
                  "name": "3,765,0",
                  "text": "3,758,11,24"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "3,1569,36",
                      "text": "3,1569,47,54",
                      "type": "3,1569,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,1571,0",
                  "text": "3,1536,11,1138"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use <a href='#!/api/Ext.chart.series.sprite.Scatter-fireEventAction'>fireEventAction</a> instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,640,28",
                      "text": "3,640,38,31",
                      "type": "3,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,641,27",
                      "text": "3,641,32,58",
                      "type": "3,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,642,30",
                      "text": "3,642,33,21",
                      "type": "3,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "3,643,29",
                      "text": "3,643,36,62:3,644,12,72",
                      "type": "3,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "3,645,29",
                      "text": "3,645,38,52:3,646,12,72",
                      "type": "3,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "3,647,29",
                      "text": "3,647,45,47:3,648,12,394",
                      "type": "3,647,20",
                      "value": "3,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "3,653,12",
                  "deprecatedVersion": "3,653,12",
                  "name": "3,655,0",
                  "text": "3,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>).\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.chart.series.sprite.Scatter-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,568,27",
                      "text": "3,568,37,31",
                      "type": "3,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "3,569,30",
                      "text": "3,569,35,54",
                      "type": "3,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,570,29,77",
                      "type": "3,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,572,0",
                  "text": "3,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.chart.series.sprite.Scatter-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,605,27",
                      "text": "3,605,37,31",
                      "type": "3,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "3,606,29",
                      "text": "3,606,34,53",
                      "type": "3,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,607,29,77",
                      "type": "3,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,609,0",
                  "text": "3,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "3,721,28",
                      "text": "3,721,38,31",
                      "type": "3,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "3,722,27",
                      "text": "3,722,32,58",
                      "type": "3,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,723,37",
                      "text": "3,723,40,21",
                      "type": "3,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "3,724,29",
                      "text": "3,724,36,62:3,725,12,72",
                      "type": "3,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "3,726,36",
                      "text": "3,726,44,47:3,727,12,201",
                      "type": "3,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,731,0",
                  "text": "3,714,12,409"
                }
              },
              {
                "$type": "method",
                "name": "getAnimation",
                "text": "Returns the current animation instance.\nreturn {Ext.draw.modifier.Animation} The animation modifier used to animate the\nsprite\n",
                "src": {
                  "name": "1,816,0",
                  "text": "1,812,8,127"
                }
              },
              {
                "$type": "method",
                "name": "getBBox",
                "text": "Returns the bounding box for the given Sprite as calculated with the Canvas engine.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isWithoutTransform",
                    "optional": true,
                    "text": "Whether to calculate the bounding box with the current transforms or not.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1071,26",
                      "text": "1,1071,46,74",
                      "type": "1,1071,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1073,0",
                  "text": "1,1069,8,85"
                }
              },
              {
                "$type": "method",
                "name": "getBBoxCenter",
                "text": "Subclass can rewrite this function to gain better performance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isWithoutTransform",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1124,25",
                      "type": "1,1124,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "1,1125,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1127,0",
                  "text": "1,1123,8,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "3,793,41,63",
                      "type": "3,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,792,11",
                  "name": "3,795,0",
                  "text": "3,791,11,43"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "5,75,25,3",
                      "type": "5,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,77,0",
                  "text": "5,74,8,93"
                }
              },
              {
                "$type": "method",
                "name": "getIndexNearPoint",
                "text": "Get the nearest item index from point (x, y). -1 as not found.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "2,185,24",
                      "type": "2,185,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "2,186,24",
                      "type": "2,186,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The index\n",
                    "type": "Number",
                    "src": {
                      "text": "2,187,25,10",
                      "type": "2,187,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,189,0",
                  "text": "2,184,8,63"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "3,1334,27",
                      "text": "3,1334,37,35",
                      "type": "3,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,1335,29,67",
                      "type": "3,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1337,0",
                  "text": "3,1331,11,161"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "4,100,20",
                      "text": "4,100,25,34",
                      "type": "4,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,101,22,57:4,102,4,15",
                      "type": "4,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,53,12",
                  "text": "4,54,4,1520"
                }
              },
              {
                "$type": "method",
                "chainable": true,
                "name": "hide",
                "text": "Hide the sprite.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.sprite.Sprite",
                    "src": {
                      "text": "1,1141,41,5",
                      "type": "1,1141,17"
                    }
                  }
                ],
                "src": {
                  "chainable": "1,1142,8",
                  "name": "1,1144,0",
                  "text": "1,1140,8,17"
                }
              },
              {
                "$type": "method",
                "name": "hitTest",
                "text": "Performs a hit test on the sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "point",
                    "text": "A two-item array containing x and y coordinates of the point.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,1631,23",
                      "text": "1,1631,29,62",
                      "type": "1,1631,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "Hit testing options.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1632,24",
                      "text": "1,1632,32,21",
                      "type": "1,1632,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A hit result object that contains more information about what\nexactly was hit or null if nothing was hit.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1633,25,62:1,1634,8,44",
                      "type": "1,1633,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1636,0",
                  "text": "1,1630,8,35"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.chart.series.sprite.Scatter-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "4,148,20",
                      "text": "4,148,30,71:4,149,4,18",
                      "type": "4,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "4,150,20",
                      "text": "4,150,27,50",
                      "type": "4,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,151,22,56",
                      "type": "4,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,106,12",
                  "text": "4,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "3,1344,29",
                      "text": "3,1344,36,40",
                      "type": "3,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "3,1345,30,31",
                      "type": "3,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1347,0",
                  "text": "3,1343,12,57"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isVisible",
                "text": "Checks if the sprite can be seen.\nThis includes the <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-hidden'>hidden</a> attribute check, alpha/opacity checks,\nfill/stroke color checks and surface/parent checks.\nThe method doesn't check if the sprite is off-screen.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns `true`, if the sprite can be seen.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1661,26,43",
                      "type": "1,1661,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,1656,8",
                  "name": "1,1663,0",
                  "text": "1,1657,8,206"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for <a href='#!/api/Ext.chart.series.sprite.Scatter-method-addManagedListener'>addManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "3,1789,12",
                  "name": "3,1791,0",
                  "text": "3,1788,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for <a href='#!/api/Ext.chart.series.sprite.Scatter-method-removeManagedListener'>removeManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "3,1795,12",
                  "name": "3,1797,0",
                  "text": "3,1794,12,46"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "3,1777,12",
                  "name": "3,1779,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1190,44",
                      "text": "3,1190,54,37",
                      "type": "3,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1191,37",
                      "text": "3,1191,40,30",
                      "type": "3,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1192,29",
                      "text": "3,1192,36,20",
                      "type": "3,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1193,29",
                      "text": "3,1193,38,44",
                      "type": "3,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1195,0",
                  "text": "3,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1175,44",
                      "text": "3,1175,54,37",
                      "type": "3,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1176,37",
                      "text": "3,1176,40,30",
                      "type": "3,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1177,29",
                      "text": "3,1177,36,20",
                      "type": "3,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1178,29",
                      "text": "3,1178,38,44",
                      "type": "3,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1180,0",
                  "text": "3,1170,12,183"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.chart.series.sprite.Scatter-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.chart.series.sprite.Scatter-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "4,220,20",
                      "text": "4,220,25,34",
                      "type": "4,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "4,221,22,57:4,222,4,22",
                      "type": "4,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,155,12",
                  "text": "4,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1468,27",
                      "text": "3,1468,34,53",
                      "type": "3,1468,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "3,1469,36",
                      "text": "3,1469,43,58:3,1470,11,231",
                      "type": "3,1469,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1475,28",
                      "text": "3,1475,36,60:3,1476,11,164",
                      "type": "3,1475,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-destroy'>destroy</a> method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "3,1481,28,130:3,1482,11,192",
                      "type": "3,1481,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1492,0",
                  "text": "3,1455,11,651"
                }
              },
              {
                "$type": "method",
                "name": "remove",
                "text": "Removes this sprite from its surface.\nThe sprite itself is not destroyed.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns the removed sprite or <a href='#!/api/null'>null</a> otherwise.\n",
                    "type": "Ext.draw.sprite.Sprite",
                    "src": {
                      "text": "1,1687,41,48",
                      "type": "1,1687,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1689,0",
                  "text": "1,1685,8,74"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for <a href='#!/api/Ext.chart.series.sprite.Scatter-method-unAfter'>unAfter</a>.\n",
                "src": {
                  "name": "3,1248,0",
                  "text": "3,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.chart.series.sprite.Scatter-method-unBefore'>unBefore</a>.\n",
                "src": {
                  "name": "3,1242,0",
                  "text": "3,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "3,1102,28",
                      "text": "3,1102,38,51",
                      "type": "3,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "3,1103,30",
                      "text": "3,1103,33,66:3,1104,12,76",
                      "type": "3,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1106,28",
                      "text": "3,1106,34,62:3,1107,12,1017",
                      "type": "3,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1145,0",
                  "text": "3,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-mon'>mon</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "3,526,56",
                      "text": "3,526,61,52",
                      "type": "3,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "3,527,34",
                      "text": "3,527,40,63",
                      "type": "3,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "3,528,29",
                      "text": "3,528,32,85",
                      "type": "3,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,529,27",
                      "text": "3,529,33,92:3,530,11,43",
                      "type": "3,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,532,0",
                  "text": "3,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1307,28",
                      "text": "3,1307,36,44",
                      "type": "3,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1308,27",
                      "text": "3,1308,43,26:3,1309,11,41",
                      "type": "3,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,1306,11",
                  "name": "3,1311,0",
                  "text": "3,1305,11,38"
                }
              },
              {
                "$type": "method",
                "name": "render",
                "text": "Render method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "surface",
                    "text": "The surface.\n",
                    "type": "Ext.draw.Surface",
                    "src": {
                      "name": "1,1596,34",
                      "text": "1,1596,42,13",
                      "type": "1,1596,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ctx",
                    "text": "A context object compatible with CanvasRenderingContext2D.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1597,24",
                      "text": "1,1597,28,59",
                      "type": "1,1597,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rect",
                    "text": "The clip rect (or called dirty rect) of the current rendering. Not to be confused\nwith `surface.getRect()`.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,1598,23",
                      "text": "1,1598,28,82:1,1599,8,27",
                      "type": "1,1598,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns `false` to stop rendering in this frame.\nAll the sprites that haven't been rendered will have their dirty flag untouched.\n",
                    "type": "*",
                    "src": {
                      "text": "1,1601,20,49:1,1602,8,81",
                      "type": "1,1601,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1604,0",
                  "text": "1,1595,8,15"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "renderBBox",
                "text": "Renders the bounding box of transformed sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "surface",
                    "src": {
                      "name": "1,1611,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ctx",
                    "src": {
                      "name": "1,1611,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,1608,8",
                  "name": "1,1611,0",
                  "text": "1,1609,8,48"
                }
              },
              {
                "$type": "method",
                "name": "renderClipped",
                "text": "Render the given visible clip range.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "surface",
                    "type": "Ext.draw.Surface",
                    "src": {
                      "name": "2,176,34",
                      "type": "2,176,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ctx",
                    "type": "Ext.draw.engine.Canvas/Ext.draw.engine.SvgContext",
                    "src": {
                      "name": "2,177,67",
                      "type": "2,177,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "clip",
                    "type": "Array",
                    "src": {
                      "name": "2,178,23",
                      "type": "2,178,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rect",
                    "type": "Array",
                    "src": {
                      "name": "2,179,23",
                      "type": "2,179,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,181,0",
                  "text": "2,175,8,37"
                }
              },
              {
                "$type": "method",
                "name": "resetTransform",
                "text": "Resets current transformation matrix of a sprite to the identify matrix.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isSplit",
                    "optional": true,
                    "text": "If 'true', transformation attributes are updated.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1359,26",
                      "text": "1,1359,41,50",
                      "type": "1,1359,16",
                      "value": "1,1359,34"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This sprite.\n",
                    "type": "Ext.draw.sprite.Sprite",
                    "src": {
                      "text": "1,1360,41,13",
                      "type": "1,1360,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1362,0",
                  "text": "1,1358,8,73"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "3,579,29",
                      "text": "3,579,48,46",
                      "type": "3,579,20",
                      "value": "3,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "3,580,29,24",
                      "type": "3,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "3,581,12",
                  "name": "3,583,0",
                  "text": "3,577,12,102"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-suspendEvent'>suspendEvent</a> method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "3,1409,32",
                      "text": "3,1409,42,32",
                      "type": "3,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1411,0",
                  "text": "3,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see <a href='#!/api/Ext.chart.series.sprite.Scatter-method-suspendEvents'>suspendEvents</a>).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See <a href='#!/api/Ext.chart.series.sprite.Scatter-method-suspendEvents'>suspendEvents</a>.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1433,29",
                      "text": "3,1433,43,59:3,1434,11,53",
                      "type": "3,1433,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,1436,0",
                  "text": "3,1428,11,198"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "scheduleUpdater",
                "items": [
                  {
                    "$type": "param",
                    "name": "attr",
                    "text": "The attributes object (not necesseraly of a sprite, but of its instance).\n",
                    "type": "Object",
                    "src": {
                      "name": "1,949,15",
                      "text": "1,949,29,74",
                      "type": "1,949,21"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "updater",
                    "text": "Updater to be called.\n",
                    "type": "String",
                    "src": {
                      "name": "1,950,15",
                      "text": "1,950,32,22",
                      "type": "1,950,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "triggers",
                    "optional": true,
                    "text": "Attributes that triggered the update.\n",
                    "type": "String[]",
                    "src": {
                      "name": "1,951,27",
                      "text": "1,951,37,38",
                      "type": "1,951,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,948,8",
                  "name": "1,953,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "scheduleUpdaters",
                "text": "Schedules specified updaters to be called.\nUpdaters are called implicitly as a result of a change to sprite attributes.\nBut sometimes it may be required to call an updater without setting an attribute,\nand without messing up the updater call order (by calling the updater immediately).\nFor example:\n\n    updaters: {\n         onDataX: function (attr) {\n             this.processDataX();\n             // Process data Y every time data X is processed.\n             // Call the onDataY updater as if changes to dataY attribute itself\n             // triggered the update.\n             this.scheduleUpdaters(attr, {onDataY: ['dataY']});\n             // Alternatively:\n             // this.scheduleUpdaters(attr, ['onDataY'], ['dataY']);\n         }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "attr",
                    "text": "The attributes object (not necesseraly of a sprite, but of its instance).\n",
                    "type": "Object",
                    "src": {
                      "name": "1,926,24",
                      "text": "1,926,29,74",
                      "type": "1,926,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "updaters",
                    "text": "A map of updaters to be called to attributes that triggered the update.\n",
                    "type": "Object/String[]",
                    "src": {
                      "name": "1,927,33",
                      "text": "1,927,42,72",
                      "type": "1,927,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "triggers",
                    "optional": true,
                    "text": "Attributes that triggered the update. An optional parameter.\nIf used, the `updaters` parameter will be treated as an array of updaters to be called.\n",
                    "type": "String[]",
                    "src": {
                      "name": "1,928,27",
                      "text": "1,928,37,61:1,929,8,88",
                      "type": "1,928,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,907,8",
                  "name": "1,931,0",
                  "text": "1,908,8,750"
                }
              },
              {
                "$type": "method",
                "name": "setAnimation",
                "text": "Sets the animation config used by the sprite when animating the sprite's\nattributes and transformation properties.\n\n    var drawCt = Ext.create({\n        xtype: 'draw',\n        renderTo: document.body,\n        width: 400,\n        height: 400,\n        sprites: [{\n            type: 'rect',\n            x: 50,\n            y: 50,\n            width: 100,\n            height: 100,\n            fillStyle: '#1F6D91'\n        }]\n    });\n\n    var rect = drawCt.getSurface().getItems()[0];\n\n    rect.setAnimation({\n        duration: 1000,\n        easing: 'elasticOut'\n    });\n\n    Ext.defer(function () {\n        rect.setAttributes({\n            width: 250\n        });\n    }, 500);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The Ext.draw.modifier.Animation config for this sprite's\nanimations.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,852,24",
                      "text": "1,852,31,57:1,853,8,12",
                      "type": "1,852,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,855,0",
                  "text": "1,821,8,672"
                }
              },
              {
                "$type": "method",
                "name": "setAttributes",
                "text": "Set attributes of the sprite.\nBy default only the attributes that have processors will be set\nand all other attributes will be filtered out as a result of the\nnormalization process.\nThe normalization process can be skipped. In that case all the given\nattributes will be set unprocessed. This will result in better\nperformance, but might also pollute the sprite's attributes with\nunwanted attributes or attributes with invalid values, if one is not\ncareful. See also <a href='#!/api/Ext.chart.series.sprite.Scatter-method-setAttributesBypassingNormalization'>setAttributesBypassingNormalization</a>.\nIf normalization is skipped, one may also chose to avoid copying\nthe given object. This may result in even better performance, but\nonly in cases where most of the attributes have values that are\ndifferent from the old values, because copying additionally checks\nif the value has changed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "changes",
                    "text": "The content of the change.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,983,24",
                      "text": "1,983,32,27",
                      "type": "1,983,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bypassNormalization",
                    "optional": true,
                    "text": "`true` to avoid normalization of the given changes.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,984,26",
                      "text": "1,984,47,52",
                      "type": "1,984,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "avoidCopy",
                    "optional": true,
                    "text": "`true` to avoid copying the `changes` object.\n`bypassNormalization` should also be `true`. The content of object may be destroyed.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,985,26",
                      "text": "1,985,37,46:1,986,8,85",
                      "type": "1,985,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,988,0",
                  "text": "1,968,8,801"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "setAttributes directy with bypassNormalization argument being `true`.\n",
                "deprecatedVersion": "Use",
                "name": "setAttributesBypassingNormalization",
                "text": "Set attributes of the sprite, assuming the names and values have already been\nnormalized.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "changes",
                    "text": "The content of the change.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1023,24",
                      "text": "1,1023,32,27",
                      "type": "1,1023,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "avoidCopy",
                    "optional": true,
                    "text": "`true` to avoid copying the `changes` object.\nThe content of object may be destroyed.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1024,26",
                      "text": "1,1024,37,46:1,1025,8,40",
                      "type": "1,1024,16"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "1,1022,8",
                  "deprecatedVersion": "1,1022,8",
                  "name": "1,1027,0",
                  "text": "1,1019,8,91"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.  In\nversions prior to 5.1, <a href='#!/api/Ext.chart.series.sprite.Scatter-cfg-listeners'>listeners</a> had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-on'>on</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1806,28",
                      "text": "3,1806,38,14",
                      "type": "3,1806,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1808,0",
                  "text": "3,1800,12,402"
                }
              },
              {
                "$type": "method",
                "name": "setTransform",
                "text": "Resets current transformation matrix of a sprite to the identify matrix\nand pre-multiplies it with the given matrix.\nThis is effectively the same as calling <a href='#!/api/Ext.chart.series.sprite.Scatter-method-resetTransform'>resetTransform</a>,\nfollowed by <a href='#!/api/Ext.chart.series.sprite.Scatter-method-transform'>transform</a> with the same arguments.\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-method-transform'>transform</a>\n\n    var drawContainer = new Ext.draw.Container({\n        renderTo: Ext.getBody(),\n        width: 380,\n        height: 380,\n        sprites: [{\n            type: 'rect',\n            width: 100,\n            height: 100,\n            fillStyle: 'red'\n        }]\n    });\n\n    var main = drawContainer.getSurface();\n    var rect = main.getItems()[0];\n\n    var m = new Ext.draw.Matrix().rotate(Math.PI, 100, 100);\n\n    rect.setTransform(m);\n    main.renderFrame();\n\nThere may be times where the transformation you need to apply cannot easily be\naccomplished using the sprite’s convenience transform methods.  Or, you may want\nto pass a matrix directly to the sprite in order to set a transformation.  The\n<a href='#!/api/Ext.chart.series.sprite.Scatter-method-setTransform'>setTransform</a> method allows for this sort of advanced usage as well.  The\nfollowing tables show each transformation matrix used when applying\ntransformations to a sprite.\n\n### Translate\n<table style=\"text-align: center;\">\n    <tr>\n        <td style=\"font-weight: normal;\">1</td>\n        <td style=\"font-weight: normal;\">0</td>\n        <td style=\"font-weight: normal;\">tx</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>1</td>\n        <td>ty</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td>1</td>\n    </tr>\n</table>\n\n### Rotate (θ is the angle of rotation)\n<table style=\"text-align: center;\">\n    <tr>\n        <td style=\"font-weight: normal;\">cos(θ)</td>\n        <td style=\"font-weight: normal;\">-sin(θ)</td>\n        <td style=\"font-weight: normal;\">0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>cos(θ)</td>\n        <td>0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td>1</td>\n    </tr>\n</table>\n\n### Scale\n<table style=\"text-align: center;\">\n    <tr>\n        <td style=\"font-weight: normal;\">sx</td>\n        <td style=\"font-weight: normal;\">0</td>\n        <td style=\"font-weight: normal;\">0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>cos(θ)</td>\n        <td>0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td>1</td>\n    </tr>\n</table>\n\n### Shear X _(λ is the distance on the x axis to shear by)_\n<table style=\"text-align: center;\">\n    <tr>\n        <td style=\"font-weight: normal;\">1</td>\n        <td style=\"font-weight: normal;\">λx</td>\n        <td style=\"font-weight: normal;\">0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>1</td>\n        <td>0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td>1</td>\n    </tr>\n</table>\n\n### Shear Y (λ is the distance on the y axis to shear by)\n<table style=\"text-align: center;\">\n    <tr>\n        <td style=\"font-weight: normal;\">1</td>\n        <td style=\"font-weight: normal;\">0</td>\n        <td style=\"font-weight: normal;\">0</td>\n    </tr>\n    <tr>\n        <td>λy</td>\n        <td>1</td>\n        <td>0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td>1</td>\n    </tr>\n</table>\n\n### Skew X (θ is the angle to skew by)\n<table style=\"text-align: center;\">\n    <tr>\n        <td style=\"font-weight: normal;\">1</td>\n        <td style=\"font-weight: normal;\">tan(θ)</td>\n        <td style=\"font-weight: normal;\">0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>1</td>\n        <td>0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td>1</td>\n    </tr>\n</table>\n\n### Skew Y (θ is the angle to skew by)\n<table style=\"text-align: center;\">\n    <tr>\n        <td style=\"font-weight: normal;\">1</td>\n        <td style=\"font-weight: normal;\">0</td>\n        <td style=\"font-weight: normal;\">0</td>\n    </tr>\n    <tr>\n        <td>tan(θ)</td>\n        <td>1</td>\n        <td>0</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td>1</td>\n    </tr>\n</table>\n\nMultiplying matrices for translation, rotation, scaling, and shearing / skewing\nany number of times in the desired order produces a single matrix for a composite\ntransformation.  You can use the product as a value for the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-setTransform'>setTransform</a>method\nof a sprite:\n\n    mySprite.setTransform([a, b, c, d, e, f]);\n\nWhere `a`, `b`, `c`, `d`, `e`, `f` are numeric values that correspond to the\nfollowing transformation matrix components:\n\n<table style=\"text-align: center;\">\n    <tr>\n        <td style=\"font-weight: normal;\">a</td>\n        <td style=\"font-weight: normal;\">c</td>\n        <td style=\"font-weight: normal;\">e</td>\n    </tr>\n    <tr>\n        <td>b</td>\n        <td>d</td>\n        <td>f</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td>1</td>\n    </tr>\n</table>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matrix",
                    "text": "The transformation matrix to apply or its\nraw elements as an array.\n",
                    "type": "Ext.draw.Matrix/Number[]",
                    "src": {
                      "name": "1,1576,42",
                      "text": "1,1576,49,42:1,1577,8,26",
                      "type": "1,1576,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isSplit",
                    "optional": true,
                    "text": "If `true`, transformation attributes are updated.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1578,26",
                      "text": "1,1578,41,50",
                      "type": "1,1578,16",
                      "value": "1,1578,34"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This sprite.\n",
                    "type": "Ext.draw.sprite.Sprite",
                    "src": {
                      "text": "1,1579,41,13",
                      "type": "1,1579,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1581,0",
                  "text": "1,1381,8,4751"
                }
              },
              {
                "$type": "method",
                "chainable": true,
                "name": "show",
                "text": "Show the sprite.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.draw.sprite.Sprite",
                    "src": {
                      "text": "1,1152,41,5",
                      "type": "1,1152,17"
                    }
                  }
                ],
                "src": {
                  "chainable": "1,1153,8",
                  "name": "1,1155,0",
                  "text": "1,1151,8,17"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n<a href='#!/api/Ext.chart.series.sprite.Scatter-method-resumeEvent'>resumeEvent</a> will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "3,1381,32",
                      "text": "3,1381,42,33",
                      "type": "3,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "3,1383,0",
                  "text": "3,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see <a href='#!/api/Ext.chart.series.sprite.Scatter-method-resumeEvents'>resumeEvents</a>)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-resumeEvents'>resumeEvents</a> call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,1363,28",
                      "text": "3,1363,43,48:3,1364,11,81",
                      "type": "3,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "3,1366,0",
                  "text": "3,1361,11,64"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.chart.series.sprite.Scatter-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.chart.series.sprite.Scatter-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.chart.series.sprite.Scatter-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.chart.series.sprite.Scatter-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "4,235,21,32",
                      "type": "4,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,226,12",
                  "text": "4,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "4,297,21,32",
                      "type": "4,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,239,12",
                  "text": "4,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "transform",
                "text": "Pre-multiplies the current transformation matrix of a sprite with the given matrix.\nIf `isSplit` parameter is `true`, the resulting matrix is also split into\nindividual components (scaling, rotation, translation) and corresponding sprite\nattributes are updated. The shearing component is not extracted.\nNote, that transformation attributes work as if transformations are applied to the\nlocal coordinate system of a sprite, while matrix transformations transform\nthe global coordinate space or the surface grid.\nSince the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-transform'>transform</a> method returns the sprite itself, calls to the method\ncan be chained. And if updating sprite transformation attributes is desired,\nit can be achieved by setting the `isSplit` parameter of the last call to `true`.\nFor example:\n\n    sprite.transform(matrixA).transform(matrixB).transform(matrixC, true);\n\nSee also: <a href='#!/api/Ext.chart.series.sprite.Scatter-method-setTransform'>setTransform</a>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matrix",
                    "text": "A transformation matrix or array of its elements.\n",
                    "type": "Ext.draw.Matrix/Number[]",
                    "src": {
                      "name": "1,1304,42",
                      "text": "1,1304,49,50",
                      "type": "1,1304,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isSplit",
                    "optional": true,
                    "text": "If 'true', transformation attributes are updated.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1305,26",
                      "text": "1,1305,41,50",
                      "type": "1,1305,16",
                      "value": "1,1305,34"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This sprite.\n",
                    "type": "Ext.draw.sprite.Sprite",
                    "src": {
                      "text": "1,1306,41,13",
                      "type": "1,1306,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,1308,0",
                  "text": "1,1288,8,869"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for <a href='#!/api/Ext.chart.series.sprite.Scatter-method-removeListener'>removeListener</a>.\n",
                "src": {
                  "inheritdoc": "3,1783,12",
                  "name": "3,1785,0",
                  "text": "3,1782,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.chart.series.sprite.Scatter-method-removeListener'>removeListener</a> with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1218,44",
                      "text": "3,1218,54,55",
                      "type": "3,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1219,37",
                      "text": "3,1219,40,23",
                      "type": "3,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1220,29",
                      "text": "3,1220,36,41",
                      "type": "3,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1221,29",
                      "text": "3,1221,38,22",
                      "type": "3,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1223,0",
                  "text": "3,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.chart.series.sprite.Scatter-method-removeListener'>removeListener</a> with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "3,1204,44",
                      "text": "3,1204,54,55",
                      "type": "3,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "3,1205,37",
                      "text": "3,1205,40,23",
                      "type": "3,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1206,29",
                      "text": "3,1206,36,41",
                      "type": "3,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,1207,29",
                      "text": "3,1207,38,22",
                      "type": "3,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "3,1209,0",
                  "text": "3,1200,12,98"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "updatePlainBBox",
                "text": "Subclass will fill the plain object with `x`, `y`, `width`, `height` information\nof the plain bounding box of this sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "plain",
                    "text": "Target object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1106,24",
                      "text": "1,1106,30,15",
                      "type": "1,1106,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,1102,8",
                  "name": "1,1108,0",
                  "text": "1,1103,8,124"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "updateTransformAttributes",
                "src": {
                  "access": "1,1340,8",
                  "name": "1,1342,0"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "updateTransformedBBox",
                "text": "Subclass will fill the plain object with `x`, `y`, `width`, `height` information\nof the transformed bounding box of this sprite.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "transform",
                    "text": "Target object (transformed bounding box) to populate.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1115,24",
                      "text": "1,1115,34,54",
                      "type": "1,1115,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "plain",
                    "text": "Untransformed bounding box.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1116,24",
                      "text": "1,1116,30,28",
                      "type": "1,1116,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,1111,8",
                  "name": "1,1118,0",
                  "text": "1,1112,8,130"
                }
              },
              {
                "$type": "method",
                "name": "useAttributes",
                "text": "Applies sprite's attributes to the given context.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ctx",
                    "text": "Context to apply sprite's attributes to.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1163,24",
                      "text": "1,1163,28,41",
                      "type": "1,1163,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rect",
                    "text": "The rect of the context to be affected by gradients.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,1164,23",
                      "text": "1,1164,28,53",
                      "type": "1,1164,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,1166,0",
                  "text": "1,1162,8,50"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.chart.series.sprite.Scatter-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.chart.series.sprite.Scatter-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.chart.series.sprite.Scatter-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.chart.series.sprite.Scatter-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.chart.series.sprite.Scatter-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.chart.series.sprite.Scatter-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.chart.series.sprite.Scatter-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "4,340,21,50",
                      "type": "4,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "4,301,12",
                  "text": "4,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "3,389,12",
                  "name": "3,392,0",
                  "text": "3,390,12,126"
                }
              },
              {
                "$type": "property",
                "name": "attr",
                "text": "The visual attributes of the sprite, e.g. strokeStyle, fillStyle, lineWidth...\n",
                "type": "Object",
                "src": {
                  "name": "1,666,27",
                  "text": "1,667,8,79",
                  "type": "1,666,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.chart.series.sprite.Scatter-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "4,346,14",
                  "text": "4,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when <a href='#!/api/Ext.chart.series.sprite.Scatter-method-suspendEvents'>suspendEvents</a> is called, decremented when <a href='#!/api/Ext.chart.series.sprite.Scatter-method-resumeEvents'>resumeEvents</a> is called.\n",
                "src": {
                  "access": "3,284,11",
                  "name": "3,287,0",
                  "text": "3,285,11,131"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via <a href='#!/api/Ext.chart.series.sprite.Scatter-observe'>observe</a>) or\non the <a href='#!/api/Ext.app.EventBus'>Ext.app.EventBus</a>. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "3,290,30",
                  "readonly": "3,291,11",
                  "text": "3,292,11,790",
                  "type": "3,290,22"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,278,31",
                  "text": "3,279,11,95",
                  "type": "3,278,22"
                }
              },
              {
                "$type": "property",
                "name": "preRender",
                "text": "Called before rendering.\n",
                "src": {
                  "name": "1,1591,0",
                  "text": "1,1589,8,25"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "4,46,14",
                  "text": "4,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,8,0",
          "extends": "0,3,13",
          "name": "0,2,11",
          "text": "0,4,4,24"
        }
      }
    ]
  },
  "version": 1
}