{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/amf/src/data/amf/Encoder.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "data.amf.Encoder",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.data.amf.Encoder",
        "text": "This class serializes data in the Action Message Format (AMF) format.\nIt can write simple and complex objects, to be used in conjunction with an\nAMF-compliant server.\nTo encode a byte array, first construct an Encoder, optionally setting the format:\n\n    var encoder = Ext.create('Ext.data.amf.Encoder', {\n      format: 3\n    });\n\nThen use the writer methods to out data to the :\n\n    encoder.writeObject(1);\n\nAnd access the data through the #bytes property:\n    encoder.bytes;\n\nYou can also reset the class to start a new byte array:\n\n    encoder.clear();\n\nCurrent limitations:\nAMF3 format (format:3)\n- writeObject will write out XML object, not legacy XMLDocument objects. A\n  writeXmlDocument method is provided for explicitly writing XMLDocument\n  objects.\n- Each object is written out explicitly, not using the reference tables\n  supported by the AMF format. This means the function does NOT support\n  circular reference objects.\n- Array objects: only the numbered indices and data will be written out.\n  Associative values will be ignored.\n- Objects that aren't Arrays, Dates, Strings, Document (XML) or primitive\n  values will be written out as anonymous objects with dynamic data.\n- There's no JavaScript equivalent to the ByteArray type in ActionScript,\n  hence data will never be searialized as ByteArrays by the writeObject\n  function. A writeByteArray method is provided for writing out ByteArray objects.\n\nAMF0 format (format:0)\n- Each object is written out explicitly, not using the reference tables\n  supported by the AMF format. This means the function does NOT support\n  circular reference objects.\n- Array objects: the function always writes an associative array (following\n  the behavior of flex).\n- Objects that aren't Arrays, Dates, Strings, Document (XML) or primitive\n  values will be written out as anonymous objects.\n\nFor more information on working with AMF data please refer to the\n[AMF Guide](#/guide/amf).\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "applyFormat",
                "text": "Sets the functions that will correctly serialize for the relevant\nprotocol version.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "protocol_version",
                    "text": "the protocol version to support\n",
                    "type": "Number",
                    "src": {
                      "name": "0,88,24",
                      "text": "0,88,41,32",
                      "type": "0,88,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,90,0",
                  "text": "0,86,8,84"
                }
              },
              {
                "$type": "method",
                "name": "clear",
                "text": "Reset all class states and starts a new empty array for encoding data.\nThe method generates a new array for encoding, so it's safe to keep a\nreference to the old one.\n",
                "src": {
                  "name": "0,81,0",
                  "text": "0,77,8,167"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Encoder.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "Configuration options\n",
                    "type": "Object",
                    "src": {
                      "name": "0,69,24",
                      "text": "0,69,31,22",
                      "type": "0,69,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,71,0",
                  "text": "0,68,8,21"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "convertXmlToString",
                "text": "Converts an XML Document object to a string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xml",
                    "text": "XML document (type Document typically) to convert\n",
                    "type": "Object",
                    "src": {
                      "name": "0,881,24",
                      "text": "0,881,28,50",
                      "type": "0,881,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A string representing the document\n",
                    "type": "String",
                    "src": {
                      "text": "0,882,25,35",
                      "type": "0,882,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,883,8",
                  "name": "0,885,0",
                  "text": "0,880,8,45"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "encode29Int",
                "text": "Encodes a U29 int, returning a byte array with the encoded number.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "unsigned int value\n",
                    "src": {
                      "name": "0,242,15",
                      "text": "0,242,20,19"
                    }
                  }
                ],
                "src": {
                  "access": "0,243,8",
                  "name": "0,245,0",
                  "text": "0,241,8,67"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "encode3Utf8StringLen",
                "text": "Encode the length of a UTF-8 string in AMF3 format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "utf8Data",
                    "text": "byte array with the encoded data\n",
                    "type": "Array",
                    "src": {
                      "name": "0,401,23",
                      "text": "0,401,32,33",
                      "type": "0,401,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "byte array encoding of length\n",
                    "type": "Array",
                    "src": {
                      "text": "0,402,24,30",
                      "type": "0,402,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,404,8",
                  "name": "0,406,0",
                  "text": "0,400,8,52"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "encodeDouble",
                "text": "Encodes an IEEE-754 double-precision number.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "num",
                    "text": "the number to encode\n",
                    "type": "Number",
                    "src": {
                      "name": "0,945,24",
                      "text": "0,945,28,21",
                      "type": "0,945,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "byte array containing the encoded number\n",
                    "type": "Array",
                    "src": {
                      "text": "0,946,24,41",
                      "type": "0,946,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,947,8",
                  "name": "0,949,0",
                  "text": "0,944,8,45"
                }
              },
              {
                "$type": "method",
                "name": "encodeUtf8Char",
                "text": "Convert a UTF 16 char to a UTF 8 char\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "c",
                    "text": "char 16-bit code to convert\n",
                    "type": "Number",
                    "src": {
                      "name": "0,336,24",
                      "text": "0,336,26,28",
                      "type": "0,336,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "byte array with the UTF 8 values\n",
                    "type": "Array",
                    "src": {
                      "text": "0,337,24,33",
                      "type": "0,337,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,339,0",
                  "text": "0,335,8,38"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "encodeUtf8String",
                "text": "Accepts a string and returns a byte array encoded in UTF-8\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "str",
                    "text": "String to encode\n",
                    "type": "String",
                    "src": {
                      "name": "0,379,24",
                      "text": "0,379,28,17",
                      "type": "0,379,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "byte array with string encoded in UTF-8 format\n",
                    "type": "Array",
                    "src": {
                      "text": "0,380,24,47",
                      "type": "0,380,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,381,8",
                  "name": "0,383,0",
                  "text": "0,378,8,59"
                }
              },
              {
                "$type": "method",
                "name": "encodeXInt",
                "text": "Encode 16- or 32-bit integers into big-endian (network order) bytes\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "the number to encode.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,451,24",
                      "text": "0,451,30,22",
                      "type": "0,451,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "byte_count",
                    "text": "2 or 4 byte encoding\n",
                    "type": "Number",
                    "src": {
                      "name": "0,452,24",
                      "text": "0,452,35,21",
                      "type": "0,452,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "byte array with encoded number\n",
                    "type": "Array",
                    "src": {
                      "text": "0,453,24,31",
                      "type": "0,453,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,455,0",
                  "text": "0,450,8,68"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.data.amf.Encoder-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.data.amf.Encoder-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isXmlDocument",
                "text": "Tries to determine if an object is an XML document\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "to identify\n",
                    "type": "Object",
                    "src": {
                      "name": "0,900,24",
                      "text": "0,900,29,12",
                      "type": "0,900,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if it's an XML document, false otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,901,26,46",
                      "type": "0,901,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,903,0",
                  "text": "0,899,8,51"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.data.amf.Encoder-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.data.amf.Encoder-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.data.amf.Encoder-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.data.amf.Encoder-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.data.amf.Encoder-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.data.amf.Encoder-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.data.amf.Encoder-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.data.amf.Encoder-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.data.amf.Encoder-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.data.amf.Encoder-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.data.amf.Encoder-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.data.amf.Encoder-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.data.amf.Encoder-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.data.amf.Encoder-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.data.amf.Encoder-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.data.amf.Encoder-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write0Array",
                "text": "Writes an associative array in AMF0 format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "arr",
                    "text": "the array to serialize.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,662,23",
                      "text": "0,662,27,24",
                      "type": "0,662,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,663,8",
                  "name": "0,665,0",
                  "text": "0,661,8,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write0Boolean",
                "text": "Writes the appropriate AMF0 boolean value to the byte array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The value to write\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,223,25",
                      "text": "0,223,30,19",
                      "type": "0,223,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,224,8",
                  "name": "0,226,0",
                  "text": "0,222,8,61"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write0Date",
                "text": "Writes a date in AMF0 format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "date",
                    "text": "the date object\n",
                    "type": "Date",
                    "src": {
                      "name": "0,592,22",
                      "text": "0,592,27,16",
                      "type": "0,592,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,593,8",
                  "name": "0,595,0",
                  "text": "0,591,8,30"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write0GenericObject",
                "text": "Write an object to the byte array in AMF0 format.\nSince we don't have the class information form Flex, the object\nis written as an anonymous object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "text": "the object to serialize.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,815,23",
                      "text": "0,815,27,25",
                      "type": "0,815,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,816,8",
                  "name": "0,818,0",
                  "text": "0,812,8,149"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write0Null",
                "text": "Writes the AMF0 null value to the byte array.\n",
                "src": {
                  "access": "0,197,8",
                  "name": "0,199,0",
                  "text": "0,196,8,46"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write0Number",
                "text": "Writes a numberic value to the byte array in AMF0 format\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "A native numeric value, Number instance or one of Infinity, -Infinity or NaN\n",
                    "src": {
                      "name": "0,313,15",
                      "text": "0,313,20,77"
                    }
                  }
                ],
                "src": {
                  "access": "0,314,8",
                  "name": "0,316,0",
                  "text": "0,312,8,57"
                }
              },
              {
                "$type": "method",
                "name": "write0ObjectProperty",
                "text": "Writes a key-value pair in AMF0 format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "the name of the property\n",
                    "type": "String",
                    "src": {
                      "name": "0,642,24",
                      "text": "0,642,28,25",
                      "type": "0,642,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "to write in AMF0 format\n",
                    "type": "Object",
                    "src": {
                      "name": "0,643,24",
                      "text": "0,643,30,24",
                      "type": "0,643,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,645,0",
                  "text": "0,641,8,40"
                }
              },
              {
                "$type": "method",
                "name": "write0ShortUtf8String",
                "text": "Writes a short UTF8 string preceded with a 16-bit length.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "str",
                    "text": "the string to write\n",
                    "type": "String",
                    "src": {
                      "name": "0,1010,24",
                      "text": "0,1010,28,20",
                      "type": "0,1010,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,1012,0",
                  "text": "0,1009,8,58"
                }
              },
              {
                "$type": "method",
                "name": "write0StrictArray",
                "text": "Writes a strict-array in AMF0 format. Unordered parts are ignored (e.g.\na[\"hello\"] will not be encoded). This function is included for\ncompleteness and will never be called by writeObject.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "arr",
                    "text": "the array to serialize.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,707,23",
                      "text": "0,707,27,24",
                      "type": "0,707,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,709,0",
                  "text": "0,704,8,189"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write0String",
                "text": "Write an AMF0 UTF-8 string to the byte array\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The string to write\n",
                    "type": "String",
                    "src": {
                      "name": "0,467,24",
                      "text": "0,467,29,20",
                      "type": "0,467,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,468,8",
                  "name": "0,470,0",
                  "text": "0,466,8,45"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write0Undefined",
                "text": "Writes the AMF0 undefined value to the byte array.\n",
                "src": {
                  "access": "0,181,8",
                  "name": "0,183,0",
                  "text": "0,180,8,51"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write0Xml",
                "text": "Writes an XMLDocument in AMF0 format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xml",
                    "text": "XML document (type Document typically) to write\n",
                    "type": "Object",
                    "src": {
                      "name": "0,551,24",
                      "text": "0,551,28,48",
                      "type": "0,551,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,552,8",
                  "name": "0,554,0",
                  "text": "0,550,8,38"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3Array",
                "text": "Writes an array in AMF3 format. Only the ordered part of the array use handled.\nUnordered parts are ignored (e.g. a[\"hello\"] will not be encoded).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "arr",
                    "text": "the array to serialize.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,611,23",
                      "text": "0,611,27,24",
                      "type": "0,611,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,612,8",
                  "name": "0,614,0",
                  "text": "0,609,8,147"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3Boolean",
                "text": "Writes the appropriate AMF3 boolean value to the byte array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The value to write\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,205,25",
                      "text": "0,205,30,19",
                      "type": "0,205,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,206,8",
                  "name": "0,208,0",
                  "text": "0,204,8,61"
                }
              },
              {
                "$type": "method",
                "name": "write3ByteArray",
                "text": "Write a byte array in AMF3 format. This function is never called directly\nby writeObject since there's no way to distinguish a regular array from a\nbyte array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "arr",
                    "text": "the object to serialize.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,733,23",
                      "text": "0,733,27,25",
                      "type": "0,733,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,735,0",
                  "text": "0,730,8,160"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3Date",
                "text": "Writes a date in AMF3 format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "date",
                    "text": "the date object\n",
                    "type": "Date",
                    "src": {
                      "name": "0,574,22",
                      "text": "0,574,27,16",
                      "type": "0,574,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,575,8",
                  "name": "0,577,0",
                  "text": "0,573,8,30"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3GenericObject",
                "text": "Write an object to the byte array in AMF3 format.\nSince we don't have the class information form Flex, the object\nis written as an anonymous object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "obj",
                    "text": "the object to serialize.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,762,23",
                      "text": "0,762,27,25",
                      "type": "0,762,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,763,8",
                  "name": "0,765,0",
                  "text": "0,759,8,149"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3Null",
                "text": "Writes the AMF3 null value to the byte array.\n",
                "src": {
                  "access": "0,189,8",
                  "name": "0,191,0",
                  "text": "0,188,8,46"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3Number",
                "text": "Writes a numberic value to the byte array in AMF3 format\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "A native numeric value, Number instance or one of Infinity, -Infinity or NaN\n",
                    "src": {
                      "name": "0,276,15",
                      "text": "0,276,20,77"
                    }
                  }
                ],
                "src": {
                  "access": "0,277,8",
                  "name": "0,279,0",
                  "text": "0,275,8,57"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3String",
                "text": "Write an AMF3 UTF-8 string to the byte array\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The string to write\n",
                    "type": "String",
                    "src": {
                      "name": "0,426,24",
                      "text": "0,426,29,20",
                      "type": "0,426,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,427,8",
                  "name": "0,429,0",
                  "text": "0,425,8,45"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3Undefined",
                "text": "Writes the AMF3 undefined value to the byte array.\n",
                "src": {
                  "access": "0,173,8",
                  "name": "0,175,0",
                  "text": "0,172,8,51"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3Xml",
                "text": "Writes an XML object (ActionScript 3 new XML object) in AMF3 format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xml",
                    "text": "XML document (type Document typically) to write\n",
                    "type": "Object",
                    "src": {
                      "name": "0,542,24",
                      "text": "0,542,28,48",
                      "type": "0,542,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,543,8",
                  "name": "0,545,0",
                  "text": "0,541,8,69"
                }
              },
              {
                "$type": "method",
                "name": "write3XmlDocument",
                "text": "Writes an Legacy XMLDocument (ActionScript Legacy XML object) in AMF3\nformat. Must be called explicitly.\nThe writeObject method will call writeXml and not writeXmlDocument.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xml",
                    "text": "XML document (type Document typically) to write\n",
                    "type": "Object",
                    "src": {
                      "name": "0,534,24",
                      "text": "0,534,28,48",
                      "type": "0,534,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,536,0",
                  "text": "0,531,8,173"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "write3XmlWithType",
                "text": "Writes an XML document in AMF3 format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xml",
                    "text": "XML document (type Document typically)\n",
                    "type": "Object",
                    "src": {
                      "name": "0,501,24",
                      "text": "0,501,28,39",
                      "type": "0,501,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "amfType",
                    "text": "Either 0x07 or 0x0B - the AMF3 object type to use\n",
                    "type": "Number",
                    "src": {
                      "name": "0,502,24",
                      "text": "0,502,32,50",
                      "type": "0,502,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,503,8",
                  "name": "0,505,0",
                  "text": "0,500,8,39"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "writeAmfHeader",
                "text": "Write an AMF header to the byte array. AMF headers are always encoded in AMF0.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "headerName",
                    "text": "the header name\n",
                    "type": "String",
                    "src": {
                      "name": "0,1060,24",
                      "text": "0,1060,35,16",
                      "type": "0,1060,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "mustUnderstand",
                    "text": "true if the receiver must understand this header or else reject it, false otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,1061,25",
                      "text": "0,1061,40,84",
                      "type": "0,1061,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "the value to serialize. Must be an object that can be serialized by AMF\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1062,24",
                      "text": "0,1062,30,72",
                      "type": "0,1062,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,1063,8",
                  "name": "0,1065,0",
                  "text": "0,1059,8,79"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "writeAmfMessage",
                "text": "Writes an AMF message to the byte array. AMF messages are always encoded in AMF0.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetUri",
                    "text": "the class / method to call\n",
                    "type": "String",
                    "src": {
                      "name": "0,1090,24",
                      "text": "0,1090,34,27",
                      "type": "0,1090,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "responseUri",
                    "text": "the response should call here\n",
                    "type": "String",
                    "src": {
                      "name": "0,1091,24",
                      "text": "0,1091,36,30",
                      "type": "0,1091,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "body",
                    "text": "the parameters to pass to the called method, wrapped in an array\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1092,23",
                      "text": "0,1092,28,65",
                      "type": "0,1092,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,1093,8",
                  "name": "0,1095,0",
                  "text": "0,1089,8,82"
                }
              },
              {
                "$type": "method",
                "name": "writeAmfPacket",
                "text": "Writes an AMF packet to the byte array\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "headers",
                    "text": "the headers to serialize. Each item in the array\n               should be an object with three fields:\n               name, mustUnderstand, value\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1022,23",
                      "text": "0,1022,31,49:0,1023,8,97",
                      "type": "0,1022,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "messages",
                    "text": "the messages to serialize. Each item in the array\n               should be an object with three fields:\n               targetUri, responseUri, body\n",
                    "type": "Array",
                    "src": {
                      "name": "0,1025,23",
                      "text": "0,1025,32,50:0,1026,8,98",
                      "type": "0,1025,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,1029,0",
                  "text": "0,1021,8,39"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "writeByte",
                "text": "Writes a byte to the byte array\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "b",
                    "text": "Byte to write to the array\n",
                    "type": "Number",
                    "src": {
                      "name": "0,846,24",
                      "text": "0,846,26,27",
                      "type": "0,846,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,847,8",
                  "name": "0,849,0",
                  "text": "0,845,8,32"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "writeBytes",
                "text": "Writes a byte array to the byte array\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "b",
                    "text": "Byte array to append to the array\n",
                    "type": "Number",
                    "src": {
                      "name": "0,861,24",
                      "text": "0,861,26,34",
                      "type": "0,861,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,862,8",
                  "name": "0,864,0",
                  "text": "0,860,8,38"
                }
              },
              {
                "$type": "method",
                "name": "writeObject",
                "text": "Write the appropriate data items to the byte array. Supported types:\n- undefined\n- null\n- boolean\n- integer (if AMF3 - limited by 29-bit int, otherwise passed as double)\n- double\n- UTF-8 string\n- XML Document (identified by being instaneof Document. Can be generated with: new DOMParser()).parseFromString(xml, \"text/xml\");\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "A primitive or object to write to the stream\n",
                    "type": "Object",
                    "src": {
                      "name": "0,137,24",
                      "text": "0,137,29,45",
                      "type": "0,137,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,139,0",
                  "text": "0,129,8,324"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "bytes",
                "readonly": true,
                "text": "The constructed byte array.\n",
                "type": "Array",
                "src": {
                  "name": "0,61,26",
                  "readonly": "0,62,8",
                  "text": "0,63,8,28",
                  "type": "0,61,19"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.data.amf.Encoder-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,54,0",
          "name": "0,3,11",
          "text": "0,4,4,1935"
        }
      }
    ]
  },
  "version": 1
}