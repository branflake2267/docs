{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/writer/Json.js",
    "../../../ext/packages/core/src/data/writer/Writer.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "writer.json",
        "alternateClassNames": "Ext.data.JsonWriter",
        "extended": "Ext.data.writer.Writer,Object",
        "extends": "Ext.data.writer.Writer",
        "name": "Ext.data.writer.Json",
        "text": "This class is used to write <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> data to the server in a JSON format.\nThe <a href='#!/api/Ext.data.writer.Json-cfg-allowSingle'>allowSingle</a> configuration can be set to false to force the records to always\nbe encoded in an array, even if there is only a single record being sent.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "allDataOptions",
                "text": "This object contains the options passed to <a href='#!/api/Ext.data.Model-method-getData'>Ext.data.Model#getData</a> when\nwriting <a href='#!/api/Ext.data.Model-property-phantom'>Ext.data.Model#phantom</a> records or when <a href='#!/api/Ext.data.writer.Json-cfg-writeAllFields'>writeAllFields</a> is set\nto `true`.\n\n*NOTE:* The `serialize` option cannot be used here.\n",
                "type": "Object",
                "src": {
                  "name": "1,107,26",
                  "text": "1,108,12,226",
                  "type": "1,107,18"
                }
              },
              {
                "$type": "property",
                "name": "allowSingle",
                "optional": true,
                "text": "Configure with `false` to ensure that records are always wrapped in an array, even if there is only\none record being sent. When there is more than one record, they will always be encoded into an array.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,29,27",
                  "text": "0,29,45,100:0,30,11,102",
                  "type": "0,29,17",
                  "value": "0,29,39"
                }
              },
              {
                "$type": "property",
                "name": "clientIdProperty",
                "text": "When specified this property causes the <a href='#!/api/Ext.data.Model-cfg-idProperty'>Ext.data.Model#idProperty</a> of\nnewly created records to be sent to the server as this name instead of the\nvalue of the `idProperty`.\n\nFor example, by default, the following code:\n\n     Ext.define('Person', {\n         idProperty: 'id',  // this is the default value (for clarity)\n\n         fields: [ 'name' ]\n     });\n\n     var person = new Person({\n         // no id provided, so one is generated\n         name: 'Clark Kent'\n     });\n\nWill send this to the server:\n\n     {\n         id: 'Person-1',\n         name: 'Clark Kent'\n     }\n\nThis can be an issue if the server expects an integer for the \"id\" property.\nYou can use <a href='#!/api/Ext.data.Model-cfg-identifier'>Ext.data.Model#identifier</a> to produce identifiers that\nthe server would recognize or use this config to send the client's id in a\ndifferent property.\n\n     Ext.define('Person', {\n         idProperty: 'id',  // this is the default value (for clarity)\n\n         proxy: {\n             writer: {\n                 clientIdProperty: 'clientId'\n             }\n         },\n\n         fields: [ 'name' ]\n     });\n\nGiven the above, the server is sent this data now:\n\n     {\n         clientId: 'Person-1',\n         name: 'Clark Kent'\n     }\n\nWhile this config provides the behavior of <a href='#!/api/Ext.data.Model-cfg-clientIdProperty'>Ext.data.Model#clientIdProperty</a>\nfrom previous releases, this property is not as useful as a suitable\n<a href='#!/api/Ext.data.Model-cfg-identifier'>Ext.data.Model#identifier</a> due to id's appearing in foreign-key fields\nand in <a href='#!/api/Ext.data.Model-cfg-manyToMany'>Ext.data.Model#manyToMany</a> associations.\n\nSee <a href='#!/api/Ext.data.Model-cfg-identifier'>Ext.data.Model#identifier</a> for more on id generation.\n",
                "type": "String",
                "src": {
                  "name": "1,48,26",
                  "text": "1,49,12,1569",
                  "type": "1,48,18"
                }
              },
              {
                "$type": "property",
                "name": "dateFormat",
                "text": "This is used for each field of type date in the model to format the value before\nit is sent to the server.\n",
                "type": "String",
                "src": {
                  "name": "1,151,26",
                  "text": "1,152,12,107",
                  "type": "1,151,18"
                }
              },
              {
                "$type": "property",
                "name": "encode",
                "optional": true,
                "text": "Configure `true` to send record data (all record fields if <a href='#!/api/Ext.data.writer.Json-cfg-writeAllFields'>writeAllFields</a> is `true`)\nas a JSON encoded HTTP parameter named by the <a href='#!/api/Ext.data.writer.Json-cfg-rootProperty'>rootProperty</a> configuration.\n\nThe encode option should only be set to true when a <a href='#!/api/Ext.data.writer.Json-cfg-rootProperty'>rootProperty</a> is defined, because the values will be\nsent as part of the request parameters as opposed to a raw post. The root will be the name of the parameter\nsent to the server.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,19,27",
                  "text": "0,19,41,94:0,20,11,325",
                  "type": "0,19,17",
                  "value": "0,19,34"
                }
              },
              {
                "$type": "property",
                "name": "expandData",
                "optional": true,
                "text": "By default, when dot-delimited field <a href='#!/api/Ext.data.writer.Json-cfg-nameProperty'>nameProperty</a> are\nused (e.g. `name: 'myProperty', mapping: 'my.nested.property'`) the writer will simply output a flat data\nobject containing the mapping string literal as the property name (e.g. `{ 'my.nested.property': 'foo' }`).\n\nMappings are used to map incoming nested JSON to flat Ext models. In many case, the data output by the\nwriter should preferrably match the original nested data format. Setting this config to `true` will ensure\nthat the output will instead look like `{ my: { nested: { property: 'foo' }}}`. The output is generated\nby <a href='#!/api/Ext.data.writer.Json-method-getExpandedData'>getExpandedData</a>, which can optionally be overridden to apply more customized logic.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,35,27",
                  "text": "0,35,45,72:0,36,11,625",
                  "type": "0,35,17",
                  "value": "0,35,38"
                }
              },
              {
                "$type": "property",
                "name": "nameProperty",
                "text": "This property is used to read the key for each value that will be sent to the\nserver.\n\nFor example:\n\n    Ext.define('Person', {\n        extend: 'Ext.data.Model',\n        fields: [{\n            name: 'first',\n            mapping: 'firstName'\n        }, {\n            name: 'last',\n            mapping: 'lastName'\n        }, {\n            name: 'age'\n        }]\n    });\n\n    new Ext.data.writer.Writer({\n        nameProperty: 'mapping'\n    });\n\n    // This will be sent to the server\n    {\n        firstName: 'first name value',\n        lastName: 'last name value',\n        age: 1\n    }\n\nIf the value is not present, the field name will always be used.\n",
                "type": "String",
                "src": {
                  "name": "1,158,26",
                  "text": "1,159,12,651",
                  "type": "1,158,18"
                }
              },
              {
                "$type": "property",
                "name": "partialDataOptions",
                "text": "This object contains the options passed to <a href='#!/api/Ext.data.Model-method-getData'>Ext.data.Model#getData</a> when\nwriting non <a href='#!/api/Ext.data.Model-property-phantom'>Ext.data.Model#phantom</a> records or when <a href='#!/api/Ext.data.writer.Json-cfg-writeAllFields'>writeAllFields</a> is\nset to `false`.\n\n*NOTE:* The `serialize` option cannot be used here.\n",
                "type": "Object",
                "src": {
                  "name": "1,119,26",
                  "text": "1,120,12,231",
                  "type": "1,119,18"
                }
              },
              {
                "$type": "property",
                "name": "rootProperty",
                "text": "The HTTP parameter name by which JSON encoded records will be passed to the server if the\n<a href='#!/api/Ext.data.writer.Json-cfg-encode'>encode</a> option is `true`.\n",
                "type": "String",
                "src": {
                  "name": "0,13,25",
                  "text": "0,13,38,90:0,14,11,34",
                  "type": "0,13,17"
                }
              },
              {
                "$type": "property",
                "name": "transform",
                "optional": true,
                "text": "If a transform function is set, it will be invoked just before <a href='#!/api/Ext.data.writer.Json-method-writeRecords'>writeRecords</a>\nexecutes. It is passed the unserialized data object and the <a href='#!/api/Ext.data.Request'>Ext.data.Request</a>\nobject. The transform function returns a data object, which can be a modified version of the original\ndata object, or a completely new data object. The transform can be a function, or an object\nwith a 'fn' key and an optional 'scope' key. Example usage:\n\n    Ext.create('Ext.data.Store', {\n        model: 'User',\n        proxy: {\n            type: 'ajax',\n            url : 'users.json',\n            writer: {\n                type: 'json',\n                transform: {\n                    fn: function(data, request) {\n                        // do some manipulation of the unserialized data object\n                        return data;\n                    },\n                    scope: this\n                }\n            }\n        },\n    });\n",
                "type": "Function/Object",
                "src": {
                  "name": "1,207,36",
                  "text": "1,208,12,921",
                  "type": "1,207,18"
                }
              },
              {
                "$type": "property",
                "name": "writeAllFields",
                "text": "`true` to write all fields from the record to the\nserver. If set to `false` it will only send the fields that were modified. Note\nthat any fields that have <a href='#!/api/Ext.data.field.Field-cfg-persist'>Ext.data.field.Field#persist</a> set to `false`\nwill still be ignored while those with <a href='#!/api/Ext.data.field.Field-cfg-critical'>Ext.data.field.Field#critical</a>\nset to `true` will be included.\n\nThe exact set of fields written is determined by <a href='#!/api/Ext.data.writer.Json-cfg-allDataOptions'>allDataOptions</a> (when `true`)\nor <a href='#!/api/Ext.data.writer.Json-cfg-partialDataOptions'>partialDataOptions</a> (when `false`). This option is ignored and treated as\n`true` when writing <a href='#!/api/Ext.data.Model-property-phantom'>Ext.data.Model#phantom</a> records.\n\nIt is seldom a good idea to use this config. Rather use <a href='#!/api/Ext.data.writer.Json-cfg-allDataOptions'>allDataOptions</a> or\n<a href='#!/api/Ext.data.writer.Json-cfg-partialDataOptions'>partialDataOptions</a> to control what fields are sent for records based on their\n<a href='#!/api/Ext.data.Model-property-phantom'>Ext.data.Model#phantom</a> state.\n\nIn the previous release, this was default `true`.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,132,27",
                  "text": "1,132,42,50:1,133,12,740",
                  "type": "1,132,18"
                }
              },
              {
                "$type": "property",
                "name": "writeRecordId",
                "optional": true,
                "text": "By default, each record's id is always included in the output for non-phantom\nrecords since in most cases the id will be required on the server to process\nthe record action. This is helpful since the id will normally not be modified,\nand so would not be sent to the server unless <a href='#!/api/Ext.data.writer.Json-cfg-writeAllFields'>writeAllFields</a> was\nexplicitly enabled.\n\nHowever, there are cases where it is not desirable for the record id to be passed\nin the data directly. For example, when using a RESTful API the record id would\ntypically be appended to the url instead.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,193,28",
                  "text": "1,194,12,533",
                  "type": "1,193,18"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Writer.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "Config object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,244,25",
                      "text": "1,244,33,15",
                      "type": "1,244,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,246,0",
                  "text": "1,243,8,20"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getExpandedData",
                "text": "The Reader classes support dot-delimited data mappings for extracting nested raw data into fields, so the\nwriter must support converting the flat <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> structure back into the original nested data\nformat. Using the same mappings when available, the Writer will simply split each delimiter into a nested\nobject in the output, which should exactly match the input format. For example, record data like this:\n\n    my.nested.property: 'foo',\n    my.nested.another: 'bar',\n    my.somethingElse: 123\n\nshould write out as...\n\n    my: {\n        nested: {\n            property: 'foo',\n            another: 'bar\n        },\n        somethingElse: 123\n    }\n\nThis behavior is governed by the <a href='#!/api/Ext.data.writer.Json-cfg-expandData'>expandData</a> config. By default, this option is `false` for\ncompatibility reasons, and will output a flat structure matching the flat record format. Setting this config\nto `true` will enable the expanded mapping behavior as shown here. This method could also be overridden\nto provide an even more customized output data structure.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "data",
                    "src": {
                      "name": "0,85,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,60,8",
                  "name": "0,85,0",
                  "text": "0,61,8,1035"
                }
              },
              {
                "$type": "method",
                "name": "getRecordData",
                "text": "Formats the data for each record before sending it to the server. This method should\nbe overridden to format the data in a way that differs from the default.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record that we are writing to the server.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "1,294,32",
                      "text": "1,294,39,46",
                      "type": "1,294,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "optional": true,
                    "text": "An operation object.\n",
                    "type": "Ext.data.operation.Operation",
                    "src": {
                      "name": "1,295,47",
                      "text": "1,295,58,21",
                      "type": "1,295,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object literal of name/value keys to be written to the server.\nBy default this method returns the data property on the record.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,296,25,66:1,297,8,64",
                      "type": "1,296,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,299,0",
                  "text": "1,291,8,159"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.data.writer.Json-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,100,20",
                      "text": "2,100,25,34",
                      "type": "2,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,101,22,57:2,102,4,15",
                      "type": "2,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,53,12",
                  "text": "2,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.data.writer.Json-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "2,148,20",
                      "text": "2,148,30,71:2,149,4,18",
                      "type": "2,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "2,150,20",
                      "text": "2,150,27,50",
                      "type": "2,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,151,22,56",
                      "type": "2,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,106,12",
                  "text": "2,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.data.writer.Json-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.data.writer.Json-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "2,220,20",
                      "text": "2,220,25,34",
                      "type": "2,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,221,22,57:2,222,4,22",
                      "type": "2,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,155,12",
                  "text": "2,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.data.writer.Json-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.data.writer.Json-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.data.writer.Json-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.data.writer.Json-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,235,21,32",
                      "type": "2,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,226,12",
                  "text": "2,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "2,297,21,32",
                      "type": "2,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,239,12",
                  "text": "2,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.data.writer.Json-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.data.writer.Json-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.data.writer.Json-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.data.writer.Json-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.data.writer.Json-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.data.writer.Json-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.data.writer.Json-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.data.writer.Json-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.data.writer.Json-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.data.writer.Json-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "2,340,21,50",
                      "type": "2,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "2,301,12",
                  "text": "2,302,4,1821"
                }
              },
              {
                "$type": "method",
                "name": "write",
                "text": "Prepares a Proxy's Ext.data.Request object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "request",
                    "text": "The request object.\n",
                    "type": "Ext.data.Request",
                    "src": {
                      "name": "1,262,34",
                      "text": "1,262,42,20",
                      "type": "1,262,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The modified request object.\n",
                    "type": "Ext.data.Request",
                    "src": {
                      "text": "1,263,35,29",
                      "type": "1,263,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,265,0",
                  "text": "1,261,8,44"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "writeRecords",
                "text": "\nWrite the record data to the request in the appropriate format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "request",
                    "text": "The request.\n",
                    "type": "Ext.data.Request",
                    "src": {
                      "name": "1,284,34",
                      "text": "1,284,42,13",
                      "type": "1,284,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "data",
                    "text": "An array of objects containing data.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,285,23",
                      "text": "1,285,28,37",
                      "type": "1,285,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The request.\n",
                    "type": "Ext.data.Request",
                    "src": {
                      "text": "1,286,35,13",
                      "type": "1,286,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,283,8",
                  "name": "1,288,0",
                  "text": "1,281,8,65"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.data.writer.Json-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "2,346,14",
                  "text": "2,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "3,295,28",
                  "text": "3,296,8,128",
                  "type": "3,295,19"
                }
              },
              {
                "$type": "property",
                "name": "isWriter",
                "text": "`true` in this class to identify an object as an instantiated Writer, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,237,28",
                  "text": "1,238,8,92",
                  "type": "1,237,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "2,46,14",
                  "text": "2,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,9,0",
          "alternateClassNames": "0,8,0",
          "extends": "0,7,0",
          "name": "0,6,0",
          "text": "0,2,4,252"
        }
      }
    ]
  },
  "version": 1
}