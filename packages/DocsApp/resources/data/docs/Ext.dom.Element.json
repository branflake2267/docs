{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/dom/Element.js",
    "../../../ext/classic/classic/overrides/dom/Element.js",
    "../../../ext/packages/core/src/event/gesture/DoubleTap.js",
    "../../../ext/packages/core/src/event/gesture/LongPress.js",
    "../../../ext/packages/core/src/event/gesture/Pinch.js",
    "../../../ext/packages/core/src/event/gesture/Rotate.js",
    "../../../ext/packages/core/src/event/gesture/Swipe.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/packages/core/src/util/Positionable.js",
    "../../../ext/classic/classic/src/util/Animate.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js",
    "../../../ext/packages/core/src/util/TextMetrics.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Ext.Element",
        "extended": "Object",
        "extends": "Object",
        "mixed": "Ext.util.Positionable,Ext.mixin.Observable,Ext.util.Animate,Ext.mixin.Identifiable",
        "mixins": "Ext.util.Positionable,Ext.mixin.Observable,Ext.util.Animate",
        "name": "Ext.dom.Element",
        "override": "Ext.dom.Element",
        "requires": "Ext.dom.Shadow,Ext.dom.Shim,Ext.dom.ElementEvent,Ext.event.publisher.Dom,Ext.event.publisher.Gesture,Ext.event.publisher.ElementSize,Ext.event.publisher.ElementPaint",
        "text": "\nEncapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.\n\n**Note:** The events included in this Class are the ones we've found to be the most commonly used. Many events are\nnot listed here due to the expedient rate of change across browsers. For a more comprehensive list, please visit the\nfollowing resources:\n\n+ [Mozilla Event Reference Guide](https://developer.mozilla.org/en-US/docs/Web/Events)\n+ [W3 Pointer Events](http://www.w3.org/TR/pointerevents/)\n+ [W3 Touch Events](http://www.w3.org/TR/touch-events/)\n+ [W3 DOM 2 Events](http://www.w3.org/TR/DOM-Level-2-Events/)\n+ [W3 DOM 3 Events](http://www.w3.org/TR/DOM-Level-3-Events/)\n\n## Usage\n\n    // by id\n    var el = Ext.get(\"my-div\");\n\n    // by DOM element reference\n    var el = Ext.get(myDivElement);\n\n## Selecting Descendant Elements\n\nExt.dom.Element instances can be used to select descendant nodes using CSS selectors.\nThere are 3 methods that can be used for this purpose, each with a slightly different\ntwist:\n\n- <a href='#!/api/Ext.dom.Element-method-query'>method-query</a>\n- <a href='#!/api/Ext.dom.Element-method-selectNode'>method-selectNode</a>\n- <a href='#!/api/Ext.dom.Element-method-select'>method-select</a>\n\nThese methods can accept any valid CSS selector since they all use\n[querySelectorAll](http://www.w3.org/TR/css3-selectors/) under the hood. The primary\ndifference between these three methods is their return type:\n\nTo get an array of HTMLElement instances matching the selector '.foo' use the query\nmethod:\n\n    element.query('.foo');\n\nThis can easily be transformed into an array of Ext.dom.Element instances by setting\nthe `asDom` parameter to `false`:\n\n    element.query('.foo', false);\n\nIf the desired result is only the first matching HTMLElement use the selectNode method:\n\n    element.selectNode('.foo');\n\nOnce again, the dom node can be wrapped in an Ext.dom.Element by setting the `asDom`\nparameter to `false`:\n\n    element.selectNode('.foo', false);\n\nThe `select` method is used when the desired return type is a <a href='#!/api/Ext.dom.CompositeElementLite'>Ext.CompositeElementLite</a> or a <a href='#!/api/Ext.dom.CompositeElement'>Ext.CompositeElement</a>.  These are collections of elements that can be operated on as a\ngroup using any of the methods of Ext.dom.Element.  The only difference between the two\nis that CompositeElementLite is a collection of HTMLElement instances, while\nCompositeElement is a collection of Ext.dom.Element instances.  To retrieve a\nCompositeElementLite that represents a collection of HTMLElements for selector '.foo':\n\n    element.select('.foo');\n\nFor a <a href='#!/api/Ext.dom.CompositeElement'>Ext.CompositeElement</a> simply pass `true` as the\n`composite` parameter:\n\n    element.select('.foo', true);\n\nThe query selection methods can be used even if you don't have a Ext.dom.Element to\nstart with For example to select an array of all HTMLElements in the document that match the\nselector '.foo', simply wrap the document object in an Ext.dom.Element instance using\n<a href='#!/api/Ext-method-fly'>Ext#fly</a>:\n\n    Ext.fly(document).query('.foo');\n\n# Animations\n\nWhen an element is manipulated, by default there is no animation.\n\n    var el = Ext.get(\"my-div\");\n\n    // no animation\n    el.setWidth(100);\n\nspecified as boolean (true) for default animation effects.\n\n    // default animation\n    el.setWidth(100, true);\n\nTo configure the effects, an object literal with animation options to use as the Element animation configuration\nobject can also be specified. Note that the supported Element animation configuration options are a subset of the\n<a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> animation options specific to Fx effects. The supported Element animation configuration options\nare:\n\n    Option    Default   Description\n    --------- --------  ---------------------------------------------\n    duration  350       The duration of the animation in milliseconds\n    easing    easeOut   The easing method\n    callback  none      A function to execute when the anim completes\n    scope     this      The scope (this) of the callback function\n\nUsage:\n\n    // Element animation options object\n    var opt = {\n        duration: 1000,\n        easing: 'elasticIn',\n        callback: this.foo,\n        scope: this\n    };\n    // animation with some options set\n    el.setWidth(100, opt);\n\nThe Element animation object being used for the animation will be set on the options object as \"anim\", which allows\nyou to stop or manipulate the animation. Here is an example:\n\n    // using the \"anim\" property to get the Anim object\n    if(opt.anim.isAnimated()){\n        opt.anim.stop();\n    }\n",
        "uses": "Ext.dom.Helper,Ext.dom.CompositeElement,Ext.dom.Fly,Ext.event.publisher.Focus,Ext.dom.GarbageCollector,Ext.dom.Fly,Ext.event.publisher.MouseEnterLeave,Ext.fx.Manager,Ext.fx.Anim",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "hide": true,
                "name": "listeners",
                "src": {
                  "hide": "0,3199,12",
                  "name": "0,3198,17"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "abort",
                "text": "Fires when an object/image is stopped from loading before completely loaded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,389,37",
                      "text": "0,389,39,57",
                      "type": "0,389,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,390,33",
                      "text": "0,390,35,25",
                      "type": "0,390,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,387,19",
                  "text": "0,388,12,77"
                }
              },
              {
                "$type": "event",
                "name": "blur",
                "text": "Fires when an element loses focus either via the pointing device or by tabbing navigation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,459,37",
                      "text": "0,459,39,57",
                      "type": "0,459,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,460,33",
                      "text": "0,460,35,25",
                      "type": "0,460,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,457,19",
                  "text": "0,458,12,91"
                }
              },
              {
                "$type": "event",
                "name": "change",
                "text": "Fires when a control loses the input focus and its value has been modified since gaining focus.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,435,37",
                      "text": "0,435,39,57",
                      "type": "0,435,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,436,33",
                      "text": "0,436,35,25",
                      "type": "0,436,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,433,19",
                  "text": "0,434,12,96"
                }
              },
              {
                "$type": "event",
                "name": "click",
                "text": "Fires when a mouse click is detected within the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,293,37",
                      "text": "0,293,39,57",
                      "type": "0,293,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,294,33",
                      "text": "0,294,35,25",
                      "type": "0,294,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,291,19",
                  "text": "0,292,12,57"
                }
              },
              {
                "$type": "event",
                "name": "contextmenu",
                "text": "Fires when a right click is detected within the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,299,37",
                      "text": "0,299,39,57",
                      "type": "0,299,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,300,33",
                      "text": "0,300,35,25",
                      "type": "0,300,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,297,19",
                  "text": "0,298,12,57"
                }
              },
              {
                "$type": "event",
                "name": "dblclick",
                "text": "Fires when a mouse double click is detected within the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,305,37",
                      "text": "0,305,39,57",
                      "type": "0,305,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,306,33",
                      "text": "0,306,35,25",
                      "type": "0,306,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,303,19",
                  "text": "0,304,12,64"
                }
              },
              {
                "$type": "event",
                "name": "DOMActivate",
                "text": "Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,487,37",
                      "text": "0,487,39,57",
                      "type": "0,487,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,488,33",
                      "text": "0,488,35,25",
                      "type": "0,488,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,485,19",
                  "text": "0,486,12,104"
                }
              },
              {
                "$type": "event",
                "name": "DOMAttrModified",
                "text": "Where supported. Fires when an attribute has been modified.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,525,37",
                      "text": "0,525,39,57",
                      "type": "0,525,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,526,33",
                      "text": "0,526,35,25",
                      "type": "0,526,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,523,19",
                  "text": "0,524,12,60"
                }
              },
              {
                "$type": "event",
                "name": "DOMCharacterDataModified",
                "text": "Where supported. Fires when the character data has been modified.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,531,37",
                      "text": "0,531,39,57",
                      "type": "0,531,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,532,33",
                      "text": "0,532,35,25",
                      "type": "0,532,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,529,19",
                  "text": "0,530,12,66"
                }
              },
              {
                "$type": "event",
                "name": "DOMFocusIn",
                "text": "Where supported. Similar to HTML focus event, but can be applied to any focusable element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,475,37",
                      "text": "0,475,39,57",
                      "type": "0,475,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,476,33",
                      "text": "0,476,35,25",
                      "type": "0,476,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,473,19",
                  "text": "0,474,12,91"
                }
              },
              {
                "$type": "event",
                "name": "DOMFocusOut",
                "text": "Where supported. Similar to HTML blur event, but can be applied to any focusable element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,481,37",
                      "text": "0,481,39,57",
                      "type": "0,481,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,482,33",
                      "text": "0,482,35,25",
                      "type": "0,482,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,479,19",
                  "text": "0,480,12,90"
                }
              },
              {
                "$type": "event",
                "name": "DOMNodeInserted",
                "text": "Where supported. Fires when a node has been added as a child of another node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,501,37",
                      "text": "0,501,39,57",
                      "type": "0,501,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,502,33",
                      "text": "0,502,35,25",
                      "type": "0,502,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,499,19",
                  "text": "0,500,12,78"
                }
              },
              {
                "$type": "event",
                "name": "DOMNodeInsertedIntoDocument",
                "text": "Where supported. Fires when a node is being inserted into a document.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,519,37",
                      "text": "0,519,39,57",
                      "type": "0,519,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,520,33",
                      "text": "0,520,35,25",
                      "type": "0,520,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,517,19",
                  "text": "0,518,12,70"
                }
              },
              {
                "$type": "event",
                "name": "DOMNodeRemoved",
                "text": "Where supported. Fires when a descendant node of the element is removed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,507,37",
                      "text": "0,507,39,57",
                      "type": "0,507,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,508,33",
                      "text": "0,508,35,25",
                      "type": "0,508,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,505,19",
                  "text": "0,506,12,73"
                }
              },
              {
                "$type": "event",
                "name": "DOMNodeRemovedFromDocument",
                "text": "Where supported. Fires when a node is being removed from a document.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,513,37",
                      "text": "0,513,39,57",
                      "type": "0,513,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,514,33",
                      "text": "0,514,35,25",
                      "type": "0,514,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,511,19",
                  "text": "0,512,12,69"
                }
              },
              {
                "$type": "event",
                "name": "DOMSubtreeModified",
                "text": "Where supported. Fires when the subtree is modified.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,495,37",
                      "text": "0,495,39,57",
                      "type": "0,495,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,496,33",
                      "text": "0,496,35,25",
                      "type": "0,496,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,493,19",
                  "text": "0,494,12,53"
                }
              },
              {
                "$type": "event",
                "name": "doubletap",
                "text": "Fires when there is a double tap.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "2,49,33",
                      "text": "2,49,39,63",
                      "type": "2,49,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "2,50,29",
                      "text": "2,50,34,25",
                      "type": "2,50,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,51,24",
                      "text": "2,51,32,63",
                      "type": "2,51,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,47,15",
                  "text": "2,48,8,34"
                }
              },
              {
                "$type": "event",
                "name": "error",
                "text": "Fires when an object/image/frame cannot be loaded properly.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,395,37",
                      "text": "0,395,39,57",
                      "type": "0,395,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,396,33",
                      "text": "0,396,35,25",
                      "type": "0,396,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,393,19",
                  "text": "0,394,12,60"
                }
              },
              {
                "$type": "event",
                "name": "focus",
                "text": "Fires when an element receives focus either via the pointing device or by tab navigation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,453,37",
                      "text": "0,453,39,57",
                      "type": "0,453,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,454,33",
                      "text": "0,454,35,25",
                      "type": "0,454,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,451,19",
                  "text": "0,452,12,90"
                }
              },
              {
                "$type": "event",
                "name": "focusmove",
                "text": "Fires when focus is moved *within* an element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "items": [
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "The <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> element which *recieved* focus.\n",
                        "type": "Ext.dom.Element",
                        "src": {
                          "name": "0,466,39",
                          "text": "0,466,46,60",
                          "type": "0,466,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "relatedTarget",
                        "text": "The <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> element which *lost* focus.\n",
                        "type": "Ext.dom.Element",
                        "src": {
                          "name": "0,467,39",
                          "text": "0,467,53,56",
                          "type": "0,467,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,465,37",
                      "text": "0,465,39,57",
                      "type": "0,465,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,468,33",
                      "text": "0,468,35,25",
                      "type": "0,468,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,463,19",
                  "text": "0,464,12,47"
                }
              },
              {
                "$type": "event",
                "name": "keydown",
                "text": "Fires when a keydown is detected within the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,361,37",
                      "text": "0,361,39,57",
                      "type": "0,361,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,362,33",
                      "text": "0,362,35,25",
                      "type": "0,362,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,359,19",
                  "text": "0,360,12,53"
                }
              },
              {
                "$type": "event",
                "name": "keypress",
                "text": "Fires when a keypress is detected within the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,355,37",
                      "text": "0,355,39,57",
                      "type": "0,355,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,356,33",
                      "text": "0,356,35,25",
                      "type": "0,356,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,353,19",
                  "text": "0,354,12,54"
                }
              },
              {
                "$type": "event",
                "name": "keyup",
                "text": "Fires when a keyup is detected within the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,367,37",
                      "text": "0,367,39,57",
                      "type": "0,367,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,368,33",
                      "text": "0,368,35,25",
                      "type": "0,368,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,365,19",
                  "text": "0,366,12,51"
                }
              },
              {
                "$type": "event",
                "name": "load",
                "text": "Fires when the user agent finishes loading all content within the element. Only supported by window, frames,\nobjects and images.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,376,37",
                      "text": "0,376,39,57",
                      "type": "0,376,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,377,33",
                      "text": "0,377,35,25",
                      "type": "0,377,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,373,19",
                  "text": "0,374,12,129"
                }
              },
              {
                "$type": "event",
                "name": "longpress",
                "text": "Fires when you touch and hold still for more than 1 second.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "3,29,33",
                      "text": "3,29,39,63",
                      "type": "3,29,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "3,30,29",
                      "text": "3,30,34,25",
                      "type": "3,30,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "3,31,24",
                      "text": "3,31,32,63",
                      "type": "3,31,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,27,15",
                  "text": "3,28,8,60"
                }
              },
              {
                "$type": "event",
                "name": "mousedown",
                "text": "Fires when a mousedown is detected within the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,311,37",
                      "text": "0,311,39,57",
                      "type": "0,311,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,312,33",
                      "text": "0,312,35,25",
                      "type": "0,312,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,309,19",
                  "text": "0,310,12,55"
                }
              },
              {
                "$type": "event",
                "name": "mouseenter",
                "text": "Fires when the mouse enters the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,341,37",
                      "text": "0,341,39,57",
                      "type": "0,341,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,342,33",
                      "text": "0,342,35,25",
                      "type": "0,342,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,339,19",
                  "text": "0,340,12,41"
                }
              },
              {
                "$type": "event",
                "name": "mouseleave",
                "text": "Fires when the mouse leaves the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,347,37",
                      "text": "0,347,39,57",
                      "type": "0,347,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,348,33",
                      "text": "0,348,35,25",
                      "type": "0,348,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,345,19",
                  "text": "0,346,12,41"
                }
              },
              {
                "$type": "event",
                "name": "mousemove",
                "text": "Fires when a mousemove is detected with the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,329,37",
                      "text": "0,329,39,57",
                      "type": "0,329,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,330,33",
                      "text": "0,330,35,25",
                      "type": "0,330,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,327,19",
                  "text": "0,328,12,53"
                }
              },
              {
                "$type": "event",
                "name": "mouseout",
                "text": "Fires when a mouseout is detected with the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,335,37",
                      "text": "0,335,39,57",
                      "type": "0,335,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,336,33",
                      "text": "0,336,35,25",
                      "type": "0,336,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,333,19",
                  "text": "0,334,12,52"
                }
              },
              {
                "$type": "event",
                "name": "mouseover",
                "text": "Fires when a mouseover is detected within the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,323,37",
                      "text": "0,323,39,57",
                      "type": "0,323,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,324,33",
                      "text": "0,324,35,25",
                      "type": "0,324,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,321,19",
                  "text": "0,322,12,55"
                }
              },
              {
                "$type": "event",
                "name": "mouseup",
                "text": "Fires when a mouseup is detected within the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,317,37",
                      "text": "0,317,39,57",
                      "type": "0,317,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,318,33",
                      "text": "0,318,35,25",
                      "type": "0,318,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,315,19",
                  "text": "0,316,12,53"
                }
              },
              {
                "$type": "event",
                "name": "painted",
                "text": "Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to\nperform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.\n\n__Note:__ This event is not available to be used with event delegation. Instead <a href='#!/api/Ext.dom.Element-event-painted'>painted</a> only fires if you explicitly\nadd at least one listener to it, for performance reasons.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The component instance.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "0,406,37",
                      "text": "0,406,42,24",
                      "type": "0,406,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,399,19",
                  "text": "0,400,12,383"
                }
              },
              {
                "$type": "event",
                "name": "pinch",
                "text": "Fires continuously when there is pinching (the touch must move for this to be fired).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "4,24,33",
                      "text": "4,24,39,63",
                      "type": "4,24,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "4,25,29",
                      "text": "4,25,34,25",
                      "type": "4,25,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,26,24",
                      "text": "4,26,32,63",
                      "type": "4,26,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,22,15",
                  "text": "4,23,8,86"
                }
              },
              {
                "$type": "event",
                "name": "pinchend",
                "text": "Fires when a pinch has ended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "4,33,33",
                      "text": "4,33,39,63",
                      "type": "4,33,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "4,34,29",
                      "text": "4,34,34,25",
                      "type": "4,34,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,35,24",
                      "text": "4,35,32,63",
                      "type": "4,35,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,31,15",
                  "text": "4,32,8,30"
                }
              },
              {
                "$type": "event",
                "name": "pinchstart",
                "text": "Fired once when a pinch has started.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "4,15,33",
                      "text": "4,15,39,63",
                      "type": "4,15,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "4,16,29",
                      "text": "4,16,34,25",
                      "type": "4,16,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "4,17,24",
                      "text": "4,17,32,63",
                      "type": "4,17,16"
                    }
                  }
                ],
                "src": {
                  "name": "4,13,15",
                  "text": "4,14,8,37"
                }
              },
              {
                "$type": "event",
                "name": "reset",
                "text": "Fires when a form is reset.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,447,37",
                      "text": "0,447,39,57",
                      "type": "0,447,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,448,33",
                      "text": "0,448,35,25",
                      "type": "0,448,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,445,19",
                  "text": "0,446,12,28"
                }
              },
              {
                "$type": "event",
                "name": "resize",
                "text": "Important note: For the best performance on mobile devices, use this only when you absolutely need to monitor\na Element's size.\n\n__Note:__ This event is not available to be used with event delegation. Instead <a href='#!/api/Ext.dom.Element-event-resize'>resize</a> only fires if you explicitly\nadd at least one listener to it, for performance reasons.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The component instance.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "0,416,37",
                      "text": "0,416,42,24",
                      "type": "0,416,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,409,19",
                  "text": "0,410,12,306"
                }
              },
              {
                "$type": "event",
                "name": "rotate",
                "text": "Fires continuously when there is rotation (the touch must move for this to be fired).\nWhen listening to this, ensure you know about the <a href='#!/api/Ext.event.Event-property-angle'>Ext.event.Event#angle</a> and <a href='#!/api/Ext.event.Event-property-rotation'>Ext.event.Event#rotation</a>\nproperties in the `event` object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "5,26,33",
                      "text": "5,26,39,63",
                      "type": "5,26,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "5,27,29",
                      "text": "5,27,34,25",
                      "type": "5,27,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,28,24",
                      "text": "5,28,32,63",
                      "type": "5,28,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,22,15",
                  "text": "5,23,8,237"
                }
              },
              {
                "$type": "event",
                "name": "rotateend",
                "text": "Fires when a rotation event has ended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "5,35,33",
                      "text": "5,35,39,63",
                      "type": "5,35,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "5,36,29",
                      "text": "5,36,34,25",
                      "type": "5,36,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,37,24",
                      "text": "5,37,32,63",
                      "type": "5,37,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,33,15",
                  "text": "5,34,8,39"
                }
              },
              {
                "$type": "event",
                "name": "rotatestart",
                "text": "Fired once when a rotation has started.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "5,15,33",
                      "text": "5,15,39,63",
                      "type": "5,15,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "5,16,29",
                      "text": "5,16,34,25",
                      "type": "5,16,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,17,24",
                      "text": "5,17,32,63",
                      "type": "5,17,16"
                    }
                  }
                ],
                "src": {
                  "name": "5,13,15",
                  "text": "5,14,8,40"
                }
              },
              {
                "$type": "event",
                "name": "scroll",
                "text": "Fires when a document view is scrolled.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,421,37",
                      "text": "0,421,39,57",
                      "type": "0,421,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,422,33",
                      "text": "0,422,35,25",
                      "type": "0,422,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,419,19",
                  "text": "0,420,12,40"
                }
              },
              {
                "$type": "event",
                "name": "select",
                "text": "Fires when a user selects some text in a text field, including input and textarea.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,429,37",
                      "text": "0,429,39,57",
                      "type": "0,429,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,430,33",
                      "text": "0,430,35,25",
                      "type": "0,430,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,427,19",
                  "text": "0,428,12,83"
                }
              },
              {
                "$type": "event",
                "name": "singletap",
                "text": "Fires when there is a single tap.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "2,40,33",
                      "text": "2,40,39,63",
                      "type": "2,40,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "2,41,29",
                      "text": "2,41,34,25",
                      "type": "2,41,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,42,24",
                      "text": "2,42,32,63",
                      "type": "2,42,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,38,15",
                  "text": "2,39,8,34"
                }
              },
              {
                "$type": "event",
                "name": "submit",
                "text": "Fires when a form is submitted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,441,37",
                      "text": "0,441,39,57",
                      "type": "0,441,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,442,33",
                      "text": "0,442,35,25",
                      "type": "0,442,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,439,19",
                  "text": "0,440,12,32"
                }
              },
              {
                "$type": "event",
                "name": "swipe",
                "text": "Fires when there is a swipe\nWhen listening to this, ensure you know about the <a href='#!/api/Ext.event.Event-property-direction'>Ext.event.Event#direction</a> property in the `event` object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> event encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "6,16,33",
                      "text": "6,16,39,63",
                      "type": "6,16,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "6,17,29",
                      "text": "6,17,34,25",
                      "type": "6,17,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "The options object passed to Ext.mixin.Observable.addListener.\n",
                    "type": "Object",
                    "src": {
                      "name": "6,18,24",
                      "text": "6,18,32,63",
                      "type": "6,18,16"
                    }
                  }
                ],
                "src": {
                  "name": "6,13,15",
                  "text": "6,14,8,144"
                }
              },
              {
                "$type": "event",
                "inheritdoc": "Ext.dom.Element#longpress",
                "name": "taphold",
                "src": {
                  "inheritdoc": "3,37,8",
                  "name": "3,36,15"
                }
              },
              {
                "$type": "event",
                "name": "unload",
                "text": "Fires when the user agent removes all content from a window or frame. For elements, it fires when the target\nelement or any of its content has been removed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "The <a href='#!/api/Ext.event.Event'>Ext.event.Event</a> encapsulating the DOM event.\n",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,383,37",
                      "text": "0,383,39,57",
                      "type": "0,383,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "text": "The target of the event.\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,384,33",
                      "text": "0,384,35,25",
                      "type": "0,384,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,380,19",
                  "text": "0,381,12,157"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "7,413,27",
                      "type": "7,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "7,414,30,35",
                      "type": "7,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "7,412,12",
                  "name": "7,416,0",
                  "text": "7,411,12,65"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_getPublisher",
                "text": "Returns the publisher for a given event\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "0,5048,32",
                      "type": "0,5048,24"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.event.publisher.Publisher",
                    "src": {
                      "type": "0,5050,25"
                    }
                  }
                ],
                "src": {
                  "access": "0,5049,16",
                  "name": "0,5052,0",
                  "text": "0,5047,16,40"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for <a href='#!/api/Ext.dom.Element-method-onAfter'>onAfter</a>.\n",
                "src": {
                  "name": "7,1236,0",
                  "text": "7,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addAnimation",
                "text": "Starts a custom animation on this Element.\n\nThe following properties may be specified in `from`, `to`, and `keyframe` objects:\n\n  - `x` - The page X position in pixels.\n  - `y` - The page Y position in pixels\n  - `left` - The element's CSS `left` value. Units must be supplied.\n  - `top` - The element's CSS `top` value. Units must be supplied.\n  - `width` - The element's CSS `width` value. Units must be supplied.\n  - `height` - The element's CSS `height` value. Units must be supplied.\n  - `scrollLeft` - The element's `scrollLeft` value.\n  - `scrollTop` - The element's `scrollTop` value.\n  - `opacity` - The element's `opacity` value (between `0` and `1`).\n\n**Be aware** that animating an Element which is being used by an Ext Component\nwithout in some way informing the Component about the changed element state will\nresult in incorrect Component behaviour. This is because the Component will be\nusing the old state of the element. To avoid this problem, it is now possible\nto directly animate certain properties of Components.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "Configuration for <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a>.\nNote that the <a href='#!/api/Ext.fx.Anim-cfg-to'>Ext.fx.Anim#to</a> config is required.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,421,28",
                      "text": "1,421,35,39:1,422,12,60",
                      "type": "1,421,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new animation.\n",
                    "type": "Ext.fx.Anim",
                    "src": {
                      "text": "1,423,34,19",
                      "type": "1,423,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,425,0",
                  "text": "1,401,12,1035"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.dom.Element-method-onBefore'>onBefore</a>.\n",
                "src": {
                  "name": "7,1230,0",
                  "text": "7,1228,12,29"
                }
              },
              {
                "$type": "method",
                "name": "addCls",
                "text": "Adds the given CSS class(es) to this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The CSS classes to add separated by space,\nor an array of classes\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "0,1457,37",
                      "text": "0,1457,43,43:0,1458,12,23",
                      "type": "0,1457,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "Prefix to prepend to each class. The separator `-` will be\nappended to the prefix.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1459,29",
                      "text": "0,1459,37,59:0,1460,12,24",
                      "type": "0,1459,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "suffix",
                    "optional": true,
                    "text": "Suffix to append to each class. The separator `-` will be\nprepended to the suffix.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1461,29",
                      "text": "0,1461,37,58:0,1462,12,25",
                      "type": "0,1461,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,1463,38,5",
                      "type": "0,1463,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1465,0",
                  "text": "0,1456,12,46"
                }
              },
              {
                "$type": "method",
                "name": "addClsOnClick",
                "text": "Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The class to add\n",
                    "type": "String",
                    "src": {
                      "name": "1,176,28",
                      "text": "1,176,38,17",
                      "type": "1,176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "testFn",
                    "optional": true,
                    "text": "A test function to execute before adding the class. The passed parameter\nwill be the Element instance. If this functions returns false, the class will not be added.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,177,31",
                      "text": "1,177,39,73:1,178,12,92",
                      "type": "1,177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope to execute the testFn in.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,179,29",
                      "text": "1,179,36,36",
                      "type": "1,179,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,180,38,5",
                      "type": "1,180,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,182,0",
                  "text": "1,175,12,121"
                }
              },
              {
                "$type": "method",
                "name": "addClsOnFocus",
                "text": "Sets up event handlers to add and remove a css class when this element has the focus\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The class to add\n",
                    "type": "String",
                    "src": {
                      "name": "1,204,28",
                      "text": "1,204,38,17",
                      "type": "1,204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "testFn",
                    "optional": true,
                    "text": "A test function to execute before adding the class. The passed parameter\nwill be the Element instance. If this functions returns false, the class will not be added.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,205,31",
                      "text": "1,205,39,73:1,206,12,92",
                      "type": "1,205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope to execute the testFn in.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,207,29",
                      "text": "1,207,36,36",
                      "type": "1,207,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,208,38,5",
                      "type": "1,208,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,210,0",
                  "text": "1,203,12,85"
                }
              },
              {
                "$type": "method",
                "name": "addClsOnOver",
                "text": "Sets up event handlers to add and remove a css class when the mouse is over this element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The class to add\n",
                    "type": "String",
                    "src": {
                      "name": "1,229,28",
                      "text": "1,229,38,17",
                      "type": "1,229,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "testFn",
                    "optional": true,
                    "text": "A test function to execute before adding the class. The passed parameter\nwill be the Element instance. If this functions returns false, the class will not be added.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,230,31",
                      "text": "1,230,39,73:1,231,12,92",
                      "type": "1,230,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope to execute the testFn in.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,232,29",
                      "text": "1,232,36,36",
                      "type": "1,232,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,233,38,5",
                      "type": "1,233,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,235,0",
                  "text": "1,228,12,89"
                }
              },
              {
                "$type": "method",
                "name": "addKeyListener",
                "text": "Convenience method for constructing a KeyMap\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "Either a string with the keys to listen for, the numeric key code,\narray of key codes or an object with the following options:\n",
                    "type": "String/Number/Number[]/Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "key",
                        "type": "Number/Array",
                        "src": {
                          "name": "1,258,38",
                          "type": "1,258,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "shift",
                        "type": "Boolean",
                        "src": {
                          "name": "1,259,33",
                          "type": "1,259,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "ctrl",
                        "type": "Boolean",
                        "src": {
                          "name": "1,260,33",
                          "type": "1,260,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "alt",
                        "type": "Boolean",
                        "src": {
                          "name": "1,261,33",
                          "type": "1,261,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,256,51",
                      "text": "1,256,55,67:1,257,12,60",
                      "type": "1,256,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call\n",
                    "type": "Function",
                    "src": {
                      "name": "1,262,30",
                      "text": "1,262,33,21",
                      "type": "1,262,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the specified function is executed. Defaults to this Element.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,263,29",
                      "text": "1,263,36,100",
                      "type": "1,263,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The KeyMap created\n",
                    "type": "Ext.util.KeyMap",
                    "src": {
                      "text": "1,264,38,19",
                      "type": "1,264,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,266,0",
                  "text": "1,255,12,45"
                }
              },
              {
                "$type": "method",
                "name": "addKeyMap",
                "text": "Creates a KeyMap for this element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The KeyMap config. See <a href='#!/api/Ext.util.KeyMap'>Ext.util.KeyMap</a> for more details\n",
                    "type": "Object",
                    "src": {
                      "name": "1,291,28",
                      "text": "1,291,35,64",
                      "type": "1,291,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The KeyMap created\n",
                    "type": "Ext.util.KeyMap",
                    "src": {
                      "text": "1,292,38,19",
                      "type": "1,292,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,294,0",
                  "text": "1,290,12,34"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The <a href='#!/api/Ext.dom.Element-method-on'>on</a> method is shorthand for\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "7,835,35",
                      "text": "7,835,45,37:7,836,12,61",
                      "type": "7,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "7,838,38",
                      "text": "7,838,42,46:7,839,12,166",
                      "type": "7,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "7,843,29",
                      "text": "7,843,36,62:7,844,12,73",
                      "type": "7,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "7,853,36",
                          "text": "7,854,12,139",
                          "type": "7,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "7,857,36",
                          "text": "7,858,12,94",
                          "type": "7,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "7,861,37",
                          "text": "7,862,12,96",
                          "type": "7,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an <a href='#!/api/Ext.util.DelayedTask'>Ext.util.DelayedTask</a> delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "7,865,36",
                          "text": "7,866,12,262",
                          "type": "7,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  <a href='#!/api/Ext.Function-method-requestAnimationFrame'>Ext.Function#requestAnimationFrame</a>. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "7,870,36",
                          "text": "7,871,12,323",
                          "type": "7,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "7,877,49",
                          "text": "7,878,12,135",
                          "type": "7,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.Component'>Ext.Component</a>.**\n  The name of a Component property which references an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of <a href='#!/api/Ext.Component'>Ext.Component</a> which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "7,881,36",
                          "text": "7,882,12,781",
                          "type": "7,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "7,905,37",
                          "text": "7,906,12,295",
                          "type": "7,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopPropagation'>Ext.event.Event#stopPropagation</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "7,914,38",
                          "text": "7,915,12,212",
                          "type": "7,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-preventDefault'>Ext.event.Event#preventDefault</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "7,919,38",
                          "text": "7,920,12,210",
                          "type": "7,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopEvent'>Ext.event.Event#stopEvent</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "7,924,38",
                          "text": "7,925,12,200",
                          "type": "7,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "7,929,36",
                          "text": "7,930,12,179",
                          "type": "7,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the <a href='#!/api/Ext.dom.Element-method-destroy'>destroy</a> method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using <a href='#!/api/Ext.dom.Element-method-un'>un</a>; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See <a href='#!/api/Ext.dom.Element-method-un'>un</a> for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "7,934,38",
                          "text": "7,935,12,441",
                          "type": "7,934,20",
                          "value": "7,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "7,942,37",
                          "text": "7,943,12,737",
                          "type": "7,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "7,954,37",
                          "text": "7,955,12,301",
                          "type": "7,954,20",
                          "value": "7,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "7,846,29",
                      "text": "7,846,38,44:7,847,12,154",
                      "type": "7,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "7,962,29",
                      "text": "7,963,12,1831",
                      "type": "7,962,20",
                      "value": "7,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the <a href='#!/api/Ext.dom.Element-method-destroy'>destroy</a> method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "7,1021,29,54:7,1022,12,516",
                      "type": "7,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "7,1041,0",
                  "text": "7,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use <a href='#!/api/Ext.dom.Element-method-mon'>mon</a> or <a href='#!/api/Ext.dom.Element-method-addManagedListener'>addManagedListener</a> if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "7,456,56",
                      "text": "7,456,61,47",
                      "type": "7,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "7,457,34",
                      "text": "7,457,40,63",
                      "type": "7,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "7,458,36",
                      "text": "7,458,39,49:7,459,11,85",
                      "type": "7,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,461,27",
                      "text": "7,461,33,92:7,462,11,43",
                      "type": "7,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> options.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,463,27",
                      "text": "7,463,35,67:7,464,11,61",
                      "type": "7,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the <a href='#!/api/Ext.dom.Element-method-destroy'>destroy</a> method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "7,465,28,54:7,466,11,513",
                      "type": "7,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,484,0",
                  "text": "7,430,11,1093"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "adjustDirect2DDimension",
                "text": "Returns the fractional portion of this element's measurement in the given dimension.\n(IE9+ only)\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,1545,21"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dimension",
                    "src": {
                      "name": "0,1547,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1542,12",
                  "name": "0,1547,0",
                  "text": "0,1543,12,97"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "adjustForConstraints",
                "items": [
                  {
                    "$type": "param",
                    "name": "xy",
                    "src": {
                      "name": "8,175,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "parent",
                    "src": {
                      "name": "8,175,0"
                    }
                  }
                ],
                "src": {
                  "access": "8,173,8",
                  "name": "8,175,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterAnimate",
                "src": {
                  "access": "1,301,12",
                  "name": "1,303,0"
                }
              },
              {
                "$type": "method",
                "name": "alignTo",
                "text": "Aligns the element with another element relative to the specified anchor points. If\nthe other element is the document it aligns it to the viewport. The position\nparameter is optional, and can be specified in any one of the following formats:\n\n- **Blank**: Defaults to aligning the element's top-left corner to the target's\n  bottom-left corner (\"tl-bl\").\n- **One anchor (deprecated)**: The passed anchor position is used as the target\n  element's anchor point.  The element being aligned will position its top-left\n  corner (tl) to that point. *This method has been deprecated in favor of the newer\n  two anchor syntax below*.\n- **Two anchors**: If two values from the table below are passed separated by a dash,\n  the first value is used as the element's anchor point, and the second value is\n  used as the target's anchor point.\n\nIn addition to the anchor points, the position parameter also supports the \"?\"\ncharacter. If \"?\" is passed at the end of the position string, the element will\nattempt to align as specified, but the position will be adjusted to constrain to\nthe viewport if necessary. Note that the element being aligned might be swapped to\nalign to a different position than that specified in order to enforce the viewport\nconstraints. Following are all of the supported anchor positions:\n\n<pre>\nValue  Description\n-----  -----------------------------\ntl     The top left corner (default)\nt      The center of the top edge\ntr     The top right corner\nl      The center of the left edge\nc      In the center of the element\nr      The center of the right edge\nbl     The bottom left corner\nb      The center of the bottom edge\nbr     The bottom right corner\n</pre>\n\nExample Usage:\n\n    // align el to other-el using the default positioning\n    // (\"tl-bl\", non-constrained)\n    el.alignTo(\"other-el\");\n\n    // align the top left corner of el with the top right corner of other-el\n    // (constrained to viewport)\n    el.alignTo(\"other-el\", \"tr?\");\n\n    // align the bottom right corner of el with the center left edge of other-el\n    el.alignTo(\"other-el\", \"br-l?\");\n\n    // align the center of el with the bottom left corner of other-el and\n    // adjust the x position by -6 pixels (and the y position by 0)\n    el.alignTo(\"other-el\", \"c-bl\", [-6, 0]);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "text": "The Positionable,\nHTMLElement, or id of the element to align to.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String",
                    "src": {
                      "name": "8,237,58",
                      "text": "8,237,66,18:8,238,8,47",
                      "type": "8,237,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "The position to align to\n",
                    "type": "String",
                    "value": "\"tl-bl?\"",
                    "src": {
                      "name": "8,239,25",
                      "text": "8,239,44,25",
                      "type": "8,239,16",
                      "value": "8,239,34"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "offsets",
                    "optional": true,
                    "text": "Offset the positioning by [x, y]\nElement animation config object\n",
                    "type": "Number[]",
                    "src": {
                      "name": "8,240,27",
                      "text": "8,240,36,33:8,241,8,32",
                      "type": "8,240,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "8,242,40,5",
                      "type": "8,242,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,244,0",
                  "text": "8,185,8,2269"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "anchorAnimX",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "src": {
                      "name": "1,314,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,312,12",
                  "name": "1,314,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "anim",
                "text": "process the passed fx configuration.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "src": {
                      "name": "1,323,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,320,12",
                  "name": "1,323,0",
                  "text": "1,321,12,37"
                }
              },
              {
                "$type": "method",
                "name": "animate",
                "text": "Calls <a href='#!/api/Ext.dom.Element-method-addAnimation'>addAnimation</a> and returns this Element (for call chaining). For\ndetails, see <a href='#!/api/Ext.dom.Element-method-addAnimation'>addAnimation</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "Configuration for <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a>.\nNote that the <a href='#!/api/Ext.fx.Anim-cfg-to'>Ext.fx.Anim#to</a> config is required.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,391,28",
                      "text": "1,391,35,39:1,392,12,60",
                      "type": "1,391,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,393,38,5",
                      "type": "1,393,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,395,0",
                  "text": "1,388,12,119"
                }
              },
              {
                "$type": "method",
                "name": "appendChild",
                "text": "Appends the passed element(s) to this element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The id or element to insert\nor a DomHelper config\n",
                    "type": "String/HTMLElement/Ext.dom.Element/Object",
                    "src": {
                      "name": "0,1607,63",
                      "text": "0,1607,66,28:0,1608,12,22",
                      "type": "0,1607,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "True to return the raw DOM element instead\nof Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1609,30",
                      "text": "0,1609,47,43:0,1610,12,19",
                      "type": "0,1609,20",
                      "value": "0,1609,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The inserted Ext.dom.Element (or\nHTMLElement if _returnDom_ is _true_).\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,1611,50,33:0,1612,12,39",
                      "type": "0,1611,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1614,0",
                  "text": "0,1606,12,46"
                }
              },
              {
                "$type": "method",
                "name": "appendTo",
                "text": "Appends this element to the passed element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The new parent element.\nThe id of the node, a DOM Node or an existing Element.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,1641,56",
                      "text": "0,1641,59,24:0,1642,12,55",
                      "type": "0,1641,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This element.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,1643,38,14",
                      "type": "0,1643,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1645,0",
                  "text": "0,1640,12,44"
                }
              },
              {
                "$type": "method",
                "name": "applyStyles",
                "text": "More flexible version of <a href='#!/api/Ext.dom.Element-method-setStyle'>setStyle</a> for setting style properties.\n\nStyles in object form should be a valid DOM element style property.\n[Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)\n(_along with the supported CSS version for each_)\n\n    // <div id=\"my-el\">Phineas Flynn</div>\n\n    var el = Ext.get('my-el');\n\n    el.applyStyles('color: white;');\n\n    el.applyStyles({\n        fontWeight: 'bold',\n        backgroundColor: 'gray',\n        padding: '10px'\n    });\n\n    el.applyStyles(function () {\n        if (name.initialConfig.html === 'Phineas Flynn') {\n            return 'font-style: italic;';\n            // OR return { fontStyle: 'italic' };\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "styles",
                    "text": "A style specification string, e.g. \"width:100px\", or object in the form `{width:\"100px\"}`, or\na function which returns such a specification.\n",
                    "type": "String/Object/Function",
                    "src": {
                      "name": "0,1676,44",
                      "text": "0,1676,51,94:0,1677,12,47",
                      "type": "0,1676,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,1678,38,5",
                      "type": "0,1678,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1680,0",
                  "text": "0,1651,12,704"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beforeAnimate",
                "src": {
                  "access": "1,462,12",
                  "name": "1,464,0"
                }
              },
              {
                "$type": "method",
                "name": "blur",
                "text": "Tries to blur the element. Any exceptions are caught and ignored.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,1697,38,5",
                      "type": "0,1697,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1699,0",
                  "text": "0,1696,12,66"
                }
              },
              {
                "$type": "method",
                "name": "boxWrap",
                "text": "Wraps the specified element with a special 9 element markup/CSS block that renders by default as\na gray container with a gradient background, rounded corners and a 4-way shadow.\n\nThis special markup is used throughout Ext when box wrapping elements (<a href='#!/api/Ext.button.Button'>Ext.button.Button</a>,\n<a href='#!/api/Ext.panel.Panel'>Ext.panel.Panel</a> when <a href='#!/api/Ext.panel.Panel-cfg-frame'>Ext.panel.Panel#frame</a>, <a href='#!/api/Ext.window.Window'>Ext.window.Window</a>).\nThe markup is of this form:\n\n    <div class=\"{0}-tl\"><div class=\"{0}-tr\"><div class=\"{0}-tc\"></div></div></div>\n    <div class=\"{0}-ml\"><div class=\"{0}-mr\"><div class=\"{0}-mc\"></div></div></div>\n    <div class=\"{0}-bl\"><div class=\"{0}-br\"><div class=\"{0}-bc\"></div></div></div>\n\nExample usage:\n\n    // Basic box wrap\n    Ext.get(\"foo\").boxWrap();\n\n    // You can also add a custom class and use CSS inheritance rules to customize the box look.\n    // 'x-box-blue' is a built-in alternative -- look at the related CSS definitions as an example\n    // for how to create a custom box wrap style.\n    Ext.get(\"foo\").boxWrap().addCls(\"x-box-blue\");\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "class",
                    "optional": true,
                    "text": "A base CSS class to apply to the containing wrapper element.\nNote that there are a number of CSS rules that are dependent on this name to make the overall effect work,\nso if you supply an alternate base class, make sure you also supply all of the necessary rules.\n",
                    "type": "String",
                    "value": "'x-box'",
                    "src": {
                      "name": "1,494,29",
                      "text": "1,494,44,61:1,495,12,203",
                      "type": "1,494,20",
                      "value": "1,494,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The outermost wrapping element of the created box structure.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,497,38,61",
                      "type": "1,497,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,499,0",
                  "text": "1,473,12,1021"
                }
              },
              {
                "$type": "method",
                "name": "cacheScrollValues",
                "text": "When an element is moved around in the DOM, or is hidden using `display:none`, it loses layout, and therefore\nall scroll positions of all descendant elements are lost.\n\nThis function caches them, and returns a function, which when run will restore the cached positions.\nIn the following example, the Panel is moved from one Container to another which will cause it to lose all scroll positions:\n\n    var restoreScroll = myPanel.el.cacheScrollValues();\n    myOtherContainer.add(myPanel);\n    restoreScroll();\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A function which will restore all descendant elements of this Element to their scroll\npositions recorded when this function was executed. Be aware that the returned function is a closure which has\ncaptured the scope of <a href='#!/api/Ext.dom.Element-method-cacheScrollValues'>cacheScrollValues</a>, so take care to dereference it as soon as not needed - if is it is a `var`\nit will drop out of scope, and the reference will be freed.\n",
                    "type": "Function",
                    "src": {
                      "text": "0,1726,31,86:0,1727,12,289",
                      "type": "0,1726,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1731,0",
                  "text": "0,1716,12,509"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "calculateAnchorXY",
                "text": "Calculates x,y coordinates specified by the anchor position on the element, adding\nextraX and extraY values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "optional": true,
                    "text": "The specified anchor position.\nSee <a href='#!/api/Ext.dom.Element-method-alignTo'>alignTo</a> for details on supported anchor positions.\n",
                    "type": "String",
                    "value": "'tl'",
                    "src": {
                      "name": "8,255,25",
                      "text": "8,255,38,31:8,256,8,64",
                      "type": "8,255,16",
                      "value": "8,255,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraX",
                    "optional": true,
                    "text": "value to be added to the x coordinate\n",
                    "type": "Number",
                    "src": {
                      "name": "8,257,25",
                      "text": "8,257,33,38",
                      "type": "8,257,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraY",
                    "optional": true,
                    "text": "value to be added to the y coordinate\n",
                    "type": "Number",
                    "src": {
                      "name": "8,258,25",
                      "text": "8,258,33,38",
                      "type": "8,258,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "optional": true,
                    "text": "An object containing the size to use for calculating anchor\nposition {width: (target width), height: (target height)} (defaults to the\nelement's current size)\n",
                    "type": "Object",
                    "src": {
                      "name": "8,259,25",
                      "text": "8,259,31,60:8,260,8,99",
                      "type": "8,259,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y] An array containing the element's x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "8,262,27,61",
                      "type": "8,262,17"
                    }
                  }
                ],
                "src": {
                  "access": "8,263,8",
                  "name": "8,265,0",
                  "text": "8,253,8,109"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "calculateConstrainedPosition",
                "text": "Calculates the new [x,y] position to move this Positionable into a constrain region.\n\nBy default, this Positionable is constrained to be within the container it was added to, or the element it was\nrendered to.\n\nPriority is given to constraining the top and left within the constraint.\n\nAn alternative constraint may be passed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "optional": true,
                    "text": "The Element or <a href='#!/api/Ext.util.Region'>Ext.util.Region</a>\ninto which this Component is to be constrained. Defaults to the element into which this Positionable\nwas rendered, or this Component's {@link Ext.Component#constrainTo.\n",
                    "type": "String/HTMLElement/Ext.dom.Element/Ext.util.Region",
                    "src": {
                      "name": "8,533,69",
                      "text": "8,533,82,46:8,534,8,169",
                      "type": "8,533,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedPosition",
                    "optional": true,
                    "text": "A proposed `[X, Y]` position to test for validity\nand to coerce into constraints instead of using this Positionable's current position.\n",
                    "type": "Number[]",
                    "src": {
                      "name": "8,536,27",
                      "text": "8,536,45,50:8,537,8,86",
                      "type": "8,536,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "The proposedPosition is local *(relative to floatParent if a floating Component)*\n",
                    "type": "Boolean",
                    "src": {
                      "name": "8,538,26",
                      "text": "8,538,33,82",
                      "type": "8,538,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedSize",
                    "optional": true,
                    "text": "A proposed `[width, height]` size to use when calculating\nconstraints instead of using this Positionable's current size.\n",
                    "type": "Number[]",
                    "src": {
                      "name": "8,539,27",
                      "text": "8,539,41,58:8,540,8,63",
                      "type": "8,539,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**If** the element *needs* to be translated, the new `[X, Y]` position within\nconstraints if possible, giving priority to keeping the top and left edge in the constrain region.\nOtherwise, `false`.\n",
                    "type": "Number[]",
                    "src": {
                      "text": "8,541,27,78:8,542,8,119",
                      "type": "8,541,17"
                    }
                  }
                ],
                "src": {
                  "access": "8,544,8",
                  "name": "8,546,0",
                  "text": "8,525,8,327"
                }
              },
              {
                "$type": "method",
                "name": "center",
                "text": "Centers the Element in either the viewport, or another Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "centerIn",
                    "text": "element in\nwhich to center the element.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,1764,56",
                      "text": "0,1764,65,11:0,1765,12,29",
                      "type": "0,1764,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,1766,38,13",
                      "type": "0,1766,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1768,0",
                  "text": "0,1763,12,64"
                }
              },
              {
                "$type": "method",
                "name": "child",
                "text": "Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The CSS selector.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1774,28",
                      "text": "0,1774,37,18",
                      "type": "0,1774,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "`true` to return the DOM node instead of Ext.dom.Element.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1775,30",
                      "text": "0,1775,47,58",
                      "type": "0,1775,20",
                      "value": "0,1775,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The child Ext.dom.Element (or DOM node if `returnDom` is `true`)\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,1776,50,65",
                      "type": "0,1776,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1778,0",
                  "text": "0,1773,12,106"
                }
              },
              {
                "$type": "method",
                "name": "clean",
                "text": "Removes Empty, or whitespace filled text nodes. Combines adjacent text nodes.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "forceReclean",
                    "optional": true,
                    "text": "By default the element keeps track if it has been cleaned already\nso you can call this over and over. However, if you update the element and need to force a re-clean, you\ncan pass true.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,508,30",
                      "text": "1,508,50,66:1,509,12,120",
                      "type": "1,508,20",
                      "value": "1,508,43"
                    }
                  }
                ],
                "src": {
                  "name": "1,512,0",
                  "text": "1,507,12,78"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "7,1255,0",
                  "text": "7,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "7,1291,0",
                  "text": "7,1289,11,47"
                }
              },
              {
                "$type": "method",
                "name": "clearOpacity",
                "text": "Clears any opacity settings from this element. Required in some cases for IE.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,616,38,5",
                      "type": "1,616,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,618,0",
                  "text": "1,615,12,78"
                }
              },
              {
                "$type": "method",
                "name": "clearPositioning",
                "text": "Clears positioning back to the default when the document was loaded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to use for the left, right, top, bottom.\nYou could use 'auto'.\n",
                    "type": "String",
                    "value": "''",
                    "src": {
                      "name": "1,575,29",
                      "text": "1,575,39,51:1,576,12,22",
                      "type": "1,575,20",
                      "value": "1,575,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,577,38,5",
                      "type": "1,577,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,579,0",
                  "text": "1,574,12,69"
                }
              },
              {
                "$type": "method",
                "name": "clip",
                "text": "Store the current overflow setting and clip overflow on the element - use <a href='#!/api/Ext.dom.Element-method-unclip'>unclip</a> to remove\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,624,38,5",
                      "type": "1,624,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,626,0",
                  "text": "1,623,12,100"
                }
              },
              {
                "$type": "method",
                "name": "clone",
                "text": "Clone this element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "`true` if the children of the node should also be cloned.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1789,30",
                      "text": "0,1789,42,58",
                      "type": "0,1789,20",
                      "value": "0,1789,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "`true` to return the DOM node instead of Ext.dom.Element.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1790,30",
                      "text": "0,1790,47,58",
                      "type": "0,1790,20",
                      "value": "0,1790,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The newly cloned Ext.dom.Element (or DOM node if `returnDom` is `true`).\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,1791,50,73",
                      "type": "0,1791,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1793,0",
                  "text": "0,1788,12,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "collect",
                "text": "Removes the element from the cache and removes listeners.\nUsed for cleaning up orphaned elements after they have been removed from the dom.\nSimilar to <a href='#!/api/Ext.dom.Element-method-destroy'>destroy</a> except it assumes the element has already been\nremoved from the dom.\n",
                "src": {
                  "access": "0,2182,12",
                  "name": "0,2188,0",
                  "text": "0,2183,12,237"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "constrainBox",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "src": {
                      "name": "8,863,0"
                    }
                  }
                ],
                "src": {
                  "access": "8,861,8",
                  "name": "8,863,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "constructor": true,
                "name": "constructor",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "type": "String/HTMLElement",
                    "src": {
                      "name": "0,568,40",
                      "type": "0,568,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,569,12",
                  "constructor": "0,536,12",
                  "name": "0,571,0"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "text": "Returns `true` if this element is an ancestor of the passed element, or is\nthe element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "text": "The dom element,\nExt.dom.Element, or id (string) of the dom element to check.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,1836,56",
                      "text": "0,1836,64,17:0,1837,12,61",
                      "type": "0,1836,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if this element is an ancestor of el or the el itself, else false\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1838,30,71",
                      "type": "0,1838,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1840,0",
                  "text": "0,1834,12,88"
                }
              },
              {
                "$type": "method",
                "name": "createChild",
                "text": "Creates the passed DomHelper config and appends it to this element or optionally\ninserts it before the passed child element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "DomHelper element config object.  If no tag is specified\n(e.g., {tag:'input'}) then a div will be automatically generated with the specified\nattributes.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1814,28",
                      "text": "0,1814,35,57:0,1815,12,96",
                      "type": "0,1814,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "insertBefore",
                    "optional": true,
                    "text": "a child element of this element\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,1817,34",
                      "text": "0,1817,48,32",
                      "type": "0,1817,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "true to return the dom node instead of creating\nan Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1818,30",
                      "text": "0,1818,47,48:0,1819,12,11",
                      "type": "0,1818,20",
                      "value": "0,1818,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new child element (or HTMLElement if\n_returnDom_ is _true_)\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,1820,50,41:0,1821,12,23",
                      "type": "0,1820,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,1823,0",
                  "text": "0,1812,12,125"
                }
              },
              {
                "$type": "method",
                "name": "createProxy",
                "text": "Creates a proxy element of this element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The class name of the proxy element or a DomHelper config object\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,593,35",
                      "text": "1,593,42,65",
                      "type": "1,593,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "renderTo",
                    "optional": true,
                    "text": "The element or element id to render the proxy to. Defaults to: document.body.\n",
                    "type": "String/HTMLElement",
                    "src": {
                      "name": "1,594,41",
                      "text": "1,594,51,78",
                      "type": "1,594,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "matchBox",
                    "optional": true,
                    "text": "True to align and size the proxy to this element now.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,595,30",
                      "text": "1,595,46,54",
                      "type": "1,595,20",
                      "value": "1,595,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new proxy element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,596,38,22",
                      "type": "1,596,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,598,0",
                  "text": "1,592,12,40"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "7,1524,27",
                      "text": "7,1524,35,55",
                      "type": "7,1524,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "7,1525,26",
                      "text": "7,1525,35,61",
                      "type": "7,1525,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "7,1526,20"
                    }
                  }
                ],
                "src": {
                  "access": "7,1522,11",
                  "name": "7,1528,0",
                  "text": "7,1523,11,103"
                }
              },
              {
                "$type": "method",
                "name": "cssTranslate",
                "removedVersion": "5.0.0",
                "text": "Translates an element using CSS 3 in 2D.\n",
                "src": {
                  "name": "0,5111,32",
                  "removedVersion": "0,5113,24",
                  "text": "0,5112,24,41"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "Destroys this element by removing it from the cache, removing its DOM reference,\nand removing all of its event listeners.\n",
                "src": {
                  "name": "0,1857,0",
                  "text": "0,1854,12,122"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "disableShadow",
                "text": "Disables the shadow element created by <a href='#!/api/Ext.dom.Element-method-enableShadow'>enableShadow</a>.\n",
                "src": {
                  "access": "0,1903,12",
                  "name": "0,1905,0",
                  "text": "0,1902,12,62"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "disableShim",
                "text": "Disables the shim element created by <a href='#!/api/Ext.dom.Element-method-enableShim'>enableShim</a>.\n",
                "src": {
                  "access": "0,1916,12",
                  "name": "0,1918,0",
                  "text": "0,1915,12,58"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "disableTouchContextMenu",
                "src": {
                  "access": "0,1928,12",
                  "name": "0,1930,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "disableTouchScroll",
                "text": "Disables native scrolling of an overflowing element using touch-screen input\n",
                "src": {
                  "access": "0,1943,12",
                  "name": "0,1945,0",
                  "text": "0,1942,12,77"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "7,761,27",
                      "type": "7,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "7,762,26",
                      "type": "7,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "7,763,28",
                      "type": "7,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "7,759,11",
                  "name": "7,765,0",
                  "text": "7,758,11,24"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doReplaceWith",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "src": {
                      "name": "0,1962,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1960,12",
                  "name": "0,1962,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doScrollIntoView",
                "text": "A scrollIntoView implementation for scrollIntoView/rtlScrollIntoView to call\nafter current scrollX has been determined.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "container",
                    "src": {
                      "name": "0,1972,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "hscroll",
                    "src": {
                      "name": "0,1972,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "src": {
                      "name": "0,1972,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "highlight",
                    "src": {
                      "name": "0,1972,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "getScrollX",
                    "src": {
                      "name": "0,1972,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scrollTo",
                    "src": {
                      "name": "0,1972,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1968,12",
                  "name": "0,1972,0",
                  "text": "0,1969,12,120"
                }
              },
              {
                "$type": "method",
                "name": "down",
                "text": "Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The CSS selector\n",
                    "type": "String",
                    "src": {
                      "name": "0,2010,28",
                      "text": "0,2010,37,17",
                      "type": "0,2010,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "`true` to return the DOM node instead of Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2011,30",
                      "text": "0,2011,47,57",
                      "type": "0,2011,20",
                      "value": "0,2011,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The child Ext.dom.Element (or DOM node if `returnDom` is `true`)\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,2012,50,65",
                      "type": "0,2012,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2014,0",
                  "text": "0,2009,12,129"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "7,1569,36",
                      "text": "7,1569,47,54",
                      "type": "7,1569,19"
                    }
                  }
                ],
                "src": {
                  "name": "7,1571,0",
                  "text": "7,1536,11,1138"
                }
              },
              {
                "$type": "method",
                "name": "enableDisplayMode",
                "text": "Convenience method for setVisibilityMode(Element.DISPLAY).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "display",
                    "optional": true,
                    "text": "What to set display to when visible\n",
                    "type": "String",
                    "src": {
                      "name": "1,691,29",
                      "text": "1,691,38,36",
                      "type": "1,691,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,692,38,5",
                      "type": "1,692,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,694,0",
                  "text": "1,690,12,59"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "enableShadow",
                "text": "Enables a shadow element that will always display behind this element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Configuration options for the shadow\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "offset",
                        "optional": true,
                        "text": "Number of pixels to offset the shadow\n",
                        "type": "Number",
                        "value": "4",
                        "src": {
                          "name": "0,2021,37",
                          "text": "0,2021,47,38",
                          "type": "0,2021,20",
                          "value": "0,2021,44"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "mode",
                        "optional": true,
                        "text": "The shadow display mode.  Supports the following\noptions:\n\n    - `'sides'`: Shadow displays on both sides and bottom only\n    - `'frame'`: Shadow displays equally on all four sides\n    - `'drop'`: Traditional bottom-right drop shadow\n    - `'bottom'`: Shadow is offset to the bottom\n",
                        "type": "String",
                        "value": "'sides'",
                        "src": {
                          "name": "0,2022,37",
                          "text": "0,2022,51,49:0,2023,12,235",
                          "type": "0,2022,20",
                          "value": "0,2022,42"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "animate",
                        "optional": true,
                        "text": "`true` to animate the shadow while\nthe element is animating.  By default the shadow will be hidden during animation.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "0,2030,38",
                          "text": "0,2030,53,35:0,2031,12,82",
                          "type": "0,2030,20",
                          "value": "0,2030,46"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,2020,29",
                      "text": "0,2020,38,37",
                      "type": "0,2020,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,2032,12",
                  "name": "0,2034,0",
                  "text": "0,2019,12,70"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "enableShim",
                "text": "Enables an iframe shim for this element to keep windowed objects from\nshowing through.  The position, size, and visibility of the shim will be\nautomatically synchronized as the position, size, and visibility of this\nElement are changed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Configuration options for the shim\n",
                    "type": "Object",
                    "src": {
                      "name": "0,2065,29",
                      "text": "0,2065,38,35",
                      "type": "0,2065,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new shim element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,2066,38,21",
                      "type": "0,2066,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,2067,12",
                  "name": "0,2069,0",
                  "text": "0,2061,12,237"
                }
              },
              {
                "$type": "method",
                "name": "fadeIn",
                "text": "Fade an element in (from transparent to opaque). The ending opacity can be specified using the `opacity`\nconfig option. Usage:\n\n    // default: fade in from opacity 0 to 100%\n    el.fadeIn();\n\n    // custom: fade in from opacity 0 to 75% over 2 seconds\n    el.fadeIn({ opacity: .75, duration: 2000});\n\n    // common config options shown with default values\n    el.fadeIn({\n        opacity: 1, //can be any value between 0 and 1 (e.g. .5)\n        easing: 'easeOut',\n        duration: 500\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) Object literal with any of the <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> config options\n",
                    "type": "Object",
                    "src": {
                      "name": "1,723,28",
                      "text": "1,723,36,77",
                      "type": "1,723,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,724,38,12",
                      "type": "1,724,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,726,0",
                  "text": "1,707,12,496"
                }
              },
              {
                "$type": "method",
                "name": "fadeOut",
                "text": "Fade an element out (from opaque to transparent). The ending opacity can be specified using the `opacity`\nconfig option. Note that IE may require `useDisplay:true` in order to redisplay correctly.\nUsage:\n\n    // default: fade out from the element's current opacity to 0\n    el.fadeOut();\n\n    // custom: fade out from the element's current opacity to 25% over 2 seconds\n    el.fadeOut({ opacity: .25, duration: 2000});\n\n    // common config options shown with default values\n    el.fadeOut({\n        opacity: 0, //can be any value between 0 and 1 (e.g. .5)\n        easing: 'easeOut',\n        duration: 500,\n        remove: false,\n        useDisplay: false\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) Object literal with any of the <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> config options\n",
                    "type": "Object",
                    "src": {
                      "name": "1,768,28",
                      "text": "1,768,36,77",
                      "type": "1,768,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,769,38,12",
                      "type": "1,769,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,771,0",
                  "text": "1,749,12,665"
                }
              },
              {
                "$type": "method",
                "name": "findParent",
                "text": "Looks at this node and then at parent nodes for a match of the passed simple selector.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The simple selector to test. See <a href='#!/api/Ext.dom.Query'>Ext.dom.Query</a> for information about simple selectors.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2097,28",
                      "text": "0,2097,37,95",
                      "type": "0,2097,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "limit",
                    "optional": true,
                    "text": "The max depth to search as a number or an element which causes the upward traversal to stop\nand is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)\n",
                    "type": "Number/String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,2098,64",
                      "text": "0,2099,12,192",
                      "type": "0,2098,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnEl",
                    "optional": true,
                    "text": "True to return a Ext.dom.Element object instead of DOM node\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2101,30",
                      "text": "0,2101,46,60",
                      "type": "0,2101,20",
                      "value": "0,2101,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching DOM node (or\nExt.dom.Element if _returnEl_ is _true_).  Or null if no match was found.\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,2102,50,26:0,2103,12,74",
                      "type": "0,2102,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2105,0",
                  "text": "0,2096,12,87"
                }
              },
              {
                "$type": "method",
                "name": "findParentNode",
                "text": "Looks at parent nodes for a match of the passed simple selector.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The simple selector to test. See <a href='#!/api/Ext.dom.Query'>Ext.dom.Query</a> for information about simple selectors.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2133,28",
                      "text": "0,2133,37,95",
                      "type": "0,2133,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "limit",
                    "optional": true,
                    "text": "The max depth to search as a number or an element which causes the upward traversal to stop\nand is **not** considered for inclusion as the result. (defaults to 50 || document.documentElement)\n",
                    "type": "Number/String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,2134,64",
                      "text": "0,2135,12,192",
                      "type": "0,2134,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnEl",
                    "optional": true,
                    "text": "True to return a Ext.dom.Element object instead of DOM node\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2137,30",
                      "text": "0,2137,46,60",
                      "type": "0,2137,20",
                      "value": "0,2137,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching DOM node (or\nExt.dom.Element if _returnEl_ is _true_).  Or null if no match was found.\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,2138,50,26:0,2139,12,74",
                      "type": "0,2138,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2141,0",
                  "text": "0,2132,12,65"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "findTabbableElements",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "src": {
                      "name": "1,2724,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,2722,16",
                  "name": "1,2724,0"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use <a href='#!/api/Ext.dom.Element-fireEventAction'>fireEventAction</a> instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "7,640,28",
                      "text": "7,640,38,31",
                      "type": "7,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "7,641,27",
                      "text": "7,641,32,58",
                      "type": "7,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "7,642,30",
                      "text": "7,642,33,21",
                      "type": "7,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "7,643,29",
                      "text": "7,643,36,62:7,644,12,72",
                      "type": "7,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "7,645,29",
                      "text": "7,645,38,52:7,646,12,72",
                      "type": "7,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "7,647,29",
                      "text": "7,647,45,47:7,648,12,394",
                      "type": "7,647,20",
                      "value": "7,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "7,653,12",
                  "deprecatedVersion": "7,653,12",
                  "name": "7,655,0",
                  "text": "7,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>).\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.dom.Element-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "7,568,27",
                      "text": "7,568,37,31",
                      "type": "7,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "7,569,30",
                      "text": "7,569,35,54",
                      "type": "7,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "7,570,29,77",
                      "type": "7,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,572,0",
                  "text": "7,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.dom.Element-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "7,605,27",
                      "text": "7,605,37,31",
                      "type": "7,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "7,606,29",
                      "text": "7,606,34,53",
                      "type": "7,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "7,607,29,77",
                      "type": "7,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,609,0",
                  "text": "7,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "7,721,28",
                      "text": "7,721,38,31",
                      "type": "7,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "7,722,27",
                      "text": "7,722,32,58",
                      "type": "7,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "7,723,37",
                      "text": "7,723,40,21",
                      "type": "7,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "7,724,29",
                      "text": "7,724,36,62:7,725,12,72",
                      "type": "7,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "7,726,36",
                      "text": "7,726,44,47:7,727,12,201",
                      "type": "7,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,731,0",
                  "text": "7,714,12,409"
                }
              },
              {
                "$type": "method",
                "name": "first",
                "text": "Gets the first child, skipping text nodes\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "Find the next sibling that matches the passed simple selector.\nSee <a href='#!/api/Ext.dom.Query'>Ext.dom.Query</a> for information about simple selectors.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2148,29",
                      "text": "0,2148,39,63:0,2149,12,66",
                      "type": "0,2148,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "`true` to return a raw DOM node instead of an Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2150,30",
                      "text": "0,2150,47,62",
                      "type": "0,2150,20",
                      "value": "0,2150,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The first child or null\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,2151,50,24",
                      "type": "0,2151,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2153,0",
                  "text": "0,2147,12,42"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fixDisplay",
                "src": {
                  "access": "1,795,12",
                  "name": "1,797,0"
                }
              },
              {
                "$type": "method",
                "name": "focus",
                "text": "Try to focus the element either immediately or after a timeout\nif `defer` argument is specified.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defer",
                    "optional": true,
                    "text": "Milliseconds to defer the focus\n",
                    "type": "Number",
                    "src": {
                      "name": "0,2161,29",
                      "text": "0,2161,36,32",
                      "type": "0,2161,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,2163,38,5",
                      "type": "0,2163,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2165,0",
                  "text": "0,2158,12,98"
                }
              },
              {
                "$type": "method",
                "name": "frame",
                "text": "Shows a ripple of exploding, attenuating borders to draw attention to an Element. Usage:\n\n    // default: a single light blue ripple\n    el.frame();\n\n    // custom: 3 red ripples lasting 3 seconds total\n    el.frame(\"#ff0000\", 3, { duration: 3000 });\n\n    // common config options shown with default values\n    el.frame(\"#C3DAF9\", 1, {\n        duration: 1000 // duration of each individual ripple.\n        // Note: Easing is not configurable and will be ignored if included\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "color",
                    "optional": true,
                    "text": "The hex color value for the border.\n",
                    "type": "String",
                    "value": "'#C3DAF9'",
                    "src": {
                      "name": "1,823,29",
                      "text": "1,823,46,36",
                      "type": "1,823,20",
                      "value": "1,823,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "count",
                    "optional": true,
                    "text": "The number of ripples to display.\n",
                    "type": "Number",
                    "value": "1",
                    "src": {
                      "name": "1,824,29",
                      "text": "1,824,38,34",
                      "type": "1,824,20",
                      "value": "1,824,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Object literal with any of the <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> config options\n",
                    "type": "Object",
                    "src": {
                      "name": "1,825,29",
                      "text": "1,825,38,66",
                      "type": "1,825,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,826,38,12",
                      "type": "1,826,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,828,0",
                  "text": "1,809,12,483"
                }
              },
              {
                "$type": "method",
                "name": "getActiveAnimation",
                "text": "Returns the current animation if this object has any effects actively running or queued, else returns false.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Anim if element has active effects, else false\n",
                    "type": "Ext.fx.Anim/Boolean",
                    "src": {
                      "text": "9,370,38,47",
                      "type": "9,370,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,372,0",
                  "text": "9,369,8,109"
                }
              },
              {
                "$type": "method",
                "name": "getAlignToXY",
                "text": "Gets the x,y coordinates to align this element with another element. See\n<a href='#!/api/Ext.dom.Element-method-alignTo'>alignTo</a> for more info on the supported position values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "element",
                    "text": "The Positionable,\nHTMLElement, or id of the element to align to.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String",
                    "src": {
                      "name": "8,319,58",
                      "text": "8,319,66,18:8,320,8,47",
                      "type": "8,319,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "optional": true,
                    "text": "The position to align to\n",
                    "type": "String",
                    "value": "\"tl-bl?\"",
                    "src": {
                      "name": "8,321,25",
                      "text": "8,321,44,25",
                      "type": "8,321,16",
                      "value": "8,321,34"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "offsets",
                    "optional": true,
                    "text": "Offset the positioning by [x, y]\n",
                    "type": "Number[]",
                    "src": {
                      "name": "8,322,27",
                      "text": "8,322,36,33",
                      "type": "8,322,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y]\n",
                    "type": "Number[]",
                    "src": {
                      "text": "8,323,27,7",
                      "type": "8,323,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,325,0",
                  "text": "8,317,8,138"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAnchorToXY",
                "text": "Gets the x,y coordinates of an element specified by the anchor position on the\nelement.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "8,25,33",
                      "text": "8,25,36,12",
                      "type": "8,25,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anchor",
                    "optional": true,
                    "text": "The specified anchor position.\nSee <a href='#!/api/Ext.dom.Element-method-alignTo'>alignTo</a> for details on supported anchor positions.\n",
                    "type": "String",
                    "value": "'tl'",
                    "src": {
                      "name": "8,26,25",
                      "text": "8,26,38,31:8,27,8,64",
                      "type": "8,26,16",
                      "value": "8,26,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "True to get the local (element top/left-relative) anchor\nposition instead of page coordinates\n",
                    "type": "Boolean",
                    "src": {
                      "name": "8,28,26",
                      "text": "8,28,33,57:8,29,8,37",
                      "type": "8,28,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "optional": true,
                    "text": "An object containing the size to use for calculating anchor\nposition {width: (target width), height: (target height)} (defaults to the\nelement's current size)\n",
                    "type": "Object",
                    "src": {
                      "name": "8,30,25",
                      "text": "8,30,31,60:8,31,8,99",
                      "type": "8,30,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y] An array containing the element's x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "8,33,27,61",
                      "type": "8,33,17"
                    }
                  }
                ],
                "src": {
                  "access": "8,34,8",
                  "name": "8,36,0",
                  "text": "8,23,8,88"
                }
              },
              {
                "$type": "method",
                "name": "getAnchorXY",
                "text": "Gets the x,y coordinates specified by the anchor position on the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "optional": true,
                    "text": "The specified anchor position.\nSee <a href='#!/api/Ext.dom.Element-method-alignTo'>alignTo</a> for details on supported anchor positions.\n",
                    "type": "String",
                    "value": "'tl'",
                    "src": {
                      "name": "8,448,25",
                      "text": "8,448,38,31:8,449,8,64",
                      "type": "8,448,16",
                      "value": "8,448,32"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "True to get the local (element top/left-relative) anchor\nposition instead of page coordinates\n",
                    "type": "Boolean",
                    "src": {
                      "name": "8,450,26",
                      "text": "8,450,33,57:8,451,8,37",
                      "type": "8,450,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "size",
                    "optional": true,
                    "text": "An object containing the size to use for calculating anchor\nposition {width: (target width), height: (target height)} (defaults to the\nelement's current size)\n",
                    "type": "Object",
                    "src": {
                      "name": "8,452,25",
                      "text": "8,452,31,60:8,453,8,99",
                      "type": "8,452,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "[x, y] An array containing the element's x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "8,455,27,61",
                      "type": "8,455,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,457,0",
                  "text": "8,447,8,74"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getAnimationProps",
                "text": "Get animation properties\n",
                "src": {
                  "access": "9,308,8",
                  "name": "9,311,0",
                  "text": "9,309,8,25"
                }
              },
              {
                "$type": "method",
                "name": "getAttribute",
                "text": "Returns the value of an attribute from the element's underlying DOM node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The attribute name.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2224,28",
                      "text": "0,2224,33,20",
                      "type": "0,2224,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "namespace",
                    "optional": true,
                    "text": "The namespace in which to look for the attribute.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2225,29",
                      "text": "0,2225,40,50",
                      "type": "0,2225,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The attribute value.\n",
                    "type": "String",
                    "src": {
                      "text": "0,2226,29,21",
                      "type": "0,2226,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2228,0",
                  "text": "0,2223,12,74"
                }
              },
              {
                "$type": "method",
                "name": "getAttributes",
                "text": "Returns an object containing a map of all attributes of this element's DOM node.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Key/value pairs of attribute names and their values.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,2239,29,53",
                      "type": "0,2239,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2241,0",
                  "text": "0,2237,12,82"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBorderPadding",
                "text": "Returns the size of the element's borders and padding.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "an object with the following numeric properties\n- beforeX\n- afterX\n- beforeY\n- afterY\n",
                    "type": "Object",
                    "src": {
                      "text": "8,42,25,48:8,43,8,38",
                      "type": "8,42,17"
                    }
                  }
                ],
                "src": {
                  "access": "8,47,8",
                  "name": "8,49,0",
                  "text": "8,41,8,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBorders",
                "src": {
                  "access": "0,2294,12",
                  "name": "0,2296,0"
                }
              },
              {
                "$type": "method",
                "name": "getBorderWidth",
                "text": "Gets the width of the border(s) for the specified side(s)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "side",
                    "text": "Can be t, l, r, b or any combination of those to add\nmultiple values. For example, passing `'lr'` would get the border **l**eft\nwidth + the border **r**ight width.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2309,28",
                      "text": "0,2309,33,53:0,2310,12,111",
                      "type": "0,2309,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The width of the sides passed added together\n",
                    "type": "Number",
                    "src": {
                      "text": "0,2312,29,45",
                      "type": "0,2312,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2314,0",
                  "text": "0,2308,12,58"
                }
              },
              {
                "$type": "method",
                "name": "getBottom",
                "text": "Gets the bottom Y coordinate of the element (element Y position + element height)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "local",
                    "text": "True to get the local css position instead of page\ncoordinate\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,2257,29",
                      "text": "0,2257,35,51:0,2258,12,11",
                      "type": "0,2257,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,2259,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2261,0",
                  "text": "0,2256,12,82"
                }
              },
              {
                "$type": "method",
                "name": "getBox",
                "text": "Return an object defining the area of this Element which can be passed to\n<a href='#!/api/Ext.dom.Element-method-setBox'>setBox</a> to set another Element's size/location to match this element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "contentBox",
                    "optional": true,
                    "text": "If true a box for the content of the element is\nreturned.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "8,474,26",
                      "text": "8,474,38,48:8,475,8,10",
                      "type": "8,474,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "local",
                    "optional": true,
                    "text": "If true the element's left and top relative to its\n`offsetParent` are returned instead of page x/y.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "8,476,26",
                      "text": "8,476,33,51:8,477,8,49",
                      "type": "8,476,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object in the format\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "x",
                        "text": "The element's X position.\n",
                        "type": "Number",
                        "src": {
                          "name": "8,479,32",
                          "text": "8,479,34,26",
                          "type": "8,479,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "y",
                        "text": "The element's Y position.\n",
                        "type": "Number",
                        "src": {
                          "name": "8,480,32",
                          "text": "8,480,34,26",
                          "type": "8,480,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "width",
                        "text": "The element's width.\n",
                        "type": "Number",
                        "src": {
                          "name": "8,481,32",
                          "text": "8,481,38,21",
                          "type": "8,481,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "text": "The element's height.\n",
                        "type": "Number",
                        "src": {
                          "name": "8,482,32",
                          "text": "8,482,39,22",
                          "type": "8,482,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "bottom",
                        "text": "The element's lower bound.\n",
                        "type": "Number",
                        "src": {
                          "name": "8,483,32",
                          "text": "8,483,39,27",
                          "type": "8,483,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "right",
                        "text": "The element's rightmost bound.\n\nThe returned object may also be addressed as an Array where index 0 contains the X\nposition and index 1 contains the Y position. The result may also be used for\n<a href='#!/api/Ext.dom.Element-method-setXY'>setXY</a>\n",
                        "type": "Number",
                        "src": {
                          "name": "8,484,32",
                          "text": "8,484,38,31:8,485,8,177",
                          "type": "8,484,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "8,478,25,24",
                      "type": "8,478,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,490,0",
                  "text": "8,471,8,153"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "7,793,41,63",
                      "type": "7,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "7,792,11",
                  "name": "7,795,0",
                  "text": "7,791,11,43"
                }
              },
              {
                "$type": "method",
                "name": "getById",
                "text": "Returns a child element of this element given its <a href='#!/api/Ext.dom.Element-property-id'>id</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the desired child element.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2267,28",
                      "text": "0,2267,31,37",
                      "type": "0,2267,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "asDom",
                    "optional": true,
                    "text": "True to return the DOM element, false to return a\nwrapped Element object.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2268,30",
                      "text": "0,2268,43,50:0,2269,12,24",
                      "type": "0,2268,20",
                      "value": "0,2268,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The child element (or HTMLElement if\n_asDom_ is _true_).  Or null if no match was found.\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,2270,50,37:0,2271,12,52",
                      "type": "0,2270,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2273,0",
                  "text": "0,2266,12,56"
                }
              },
              {
                "$type": "method",
                "name": "getClientRegion",
                "text": "Returns a region object that defines the client area of this element.\n\nThat is, the area *within* any scrollbars.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A Region containing \"top, left, bottom, right\" properties.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "8,732,34,59",
                      "type": "8,732,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,734,0",
                  "text": "8,729,8,114"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getColor",
                "text": "Return the CSS color for the specified CSS attribute. rgb, 3 digit (like `#fff`)\nand valid values are convert to standard 6 digit hex color.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "attr",
                    "text": "The css attribute\n",
                    "type": "String",
                    "src": {
                      "name": "1,901,28",
                      "text": "1,901,33,18",
                      "type": "1,901,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultValue",
                    "text": "The default value to use when a valid color isn't found\n",
                    "type": "String",
                    "src": {
                      "name": "1,902,28",
                      "text": "1,902,41,56",
                      "type": "1,902,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "defaults to #. Use an empty string when working with\ncolor anims.\n",
                    "type": "String",
                    "src": {
                      "name": "1,903,29",
                      "text": "1,903,37,53:1,904,12,13",
                      "type": "1,903,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,905,12",
                  "name": "1,907,0",
                  "text": "1,899,12,141"
                }
              },
              {
                "$type": "method",
                "name": "getConstrainRegion",
                "text": "Returns the content region of this element for purposes of constraining or clipping floating\nchildren.  That is the region within the borders and scrollbars, but not within the padding.\n",
                "src": {
                  "name": "8,596,0",
                  "text": "8,593,8,186"
                }
              },
              {
                "$type": "method",
                "name": "getConstrainVector",
                "text": "Returns the `[X, Y]` vector by which this Positionable's element must be translated to make a best\nattempt to constrain within the passed constraint. Returns `false` if the element\ndoes not need to be moved.\n\nPriority is given to constraining the top and left within the constraint.\n\nThe constraint may either be an existing element into which the element is to be\nconstrained, or a <a href='#!/api/Ext.util.Region'>Ext.util.Region</a> into which this element is to be\nconstrained.\n\nBy default, any extra shadow around the element is **not** included in the constrain calculations - the edges\nof the element are used as the element bounds. To constrain the shadow within the constrain region, set the\n`constrainShadow` property on this element to `true`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "constrainTo",
                    "optional": true,
                    "text": "The\nPositionable, HTMLElement, element id, or Region into which the element is to be\nconstrained.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String/Ext.util.Region",
                    "src": {
                      "name": "8,637,75",
                      "text": "8,637,88,4:8,638,8,94",
                      "type": "8,637,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedPosition",
                    "optional": true,
                    "text": "A proposed `[X, Y]` position to test for validity\nand to produce a vector for instead of using the element's current position\n",
                    "type": "Number[]",
                    "src": {
                      "name": "8,640,27",
                      "text": "8,640,45,50:8,641,8,76",
                      "type": "8,640,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "proposedSize",
                    "optional": true,
                    "text": "A proposed `[width, height]` size to constrain\ninstead of using the element's current size\n",
                    "type": "Number[]",
                    "src": {
                      "name": "8,642,27",
                      "text": "8,642,41,47:8,643,8,44",
                      "type": "8,642,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**If** the element *needs* to be translated, an `[X, Y]`\nvector by which this element must be translated. Otherwise, `false`.\n",
                    "type": "Number[]/Boolean",
                    "src": {
                      "text": "8,644,35,57:8,645,8,69",
                      "type": "8,644,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,647,0",
                  "text": "8,623,8,734"
                }
              },
              {
                "$type": "method",
                "name": "getHeight",
                "text": "Returns the offset height of the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "contentHeight",
                    "optional": true,
                    "text": "`true` to get the height minus borders and padding.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,2337,30",
                      "text": "0,2337,45,52",
                      "type": "0,2337,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The element's height.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,2338,29,22",
                      "type": "0,2338,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2340,0",
                  "text": "0,2336,12,42"
                }
              },
              {
                "$type": "method",
                "name": "getHtml",
                "text": "Returns the `innerHTML` of an Element or an empty string if the element's\ndom no longer exists.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,2373,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2375,0",
                  "text": "0,2371,12,96"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Please use <a href='#!/api/Ext.dom.Element-getHtml'>getHtml</a> instead.\n",
                "deprecatedVersion": "5.0.0",
                "inheritdoc": "Ext.dom.Element#getHtml",
                "name": "getHTML",
                "src": {
                  "deprecatedMessage": "0,5120,24",
                  "deprecatedVersion": "0,5120,24",
                  "inheritdoc": "0,5119,24",
                  "name": "0,5118,32"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "10,75,25,3",
                      "type": "10,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "10,77,0",
                  "text": "10,74,8,93"
                }
              },
              {
                "$type": "method",
                "name": "getLeft",
                "text": "Gets the left X coordinate\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "local",
                    "text": "True to get the local css position instead of\npage coordinate\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,2381,29",
                      "text": "0,2381,35,46:0,2382,12,16",
                      "type": "0,2381,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,2383,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2385,0",
                  "text": "0,2380,12,27"
                }
              },
              {
                "$type": "method",
                "name": "getLoader",
                "text": "Gets this element's <a href='#!/api/Ext.ElementLoader'>Ext.ElementLoader</a>\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The loader\n",
                    "type": "Ext.ElementLoader",
                    "src": {
                      "text": "1,931,40,11",
                      "type": "1,931,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,933,0",
                  "text": "1,930,12,60"
                }
              },
              {
                "$type": "method",
                "name": "getLocalX",
                "text": "Returns the x coordinate of this element reletive to its `offsetParent`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The local x coordinate\n",
                    "type": "Number",
                    "src": {
                      "text": "8,55,25,23",
                      "type": "8,55,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,57,0",
                  "text": "8,54,8,73"
                }
              },
              {
                "$type": "method",
                "name": "getLocalXY",
                "text": "Returns the x and y coordinates of this element relative to its `offsetParent`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The local XY position of the element\n",
                    "type": "Number[]",
                    "src": {
                      "text": "8,63,27,37",
                      "type": "8,63,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,65,0",
                  "text": "8,62,8,80"
                }
              },
              {
                "$type": "method",
                "name": "getLocalY",
                "text": "Returns the y coordinate of this element reletive to its `offsetParent`.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The local y coordinate\n",
                    "type": "Number",
                    "src": {
                      "text": "8,71,25,23",
                      "type": "8,71,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,73,0",
                  "text": "8,70,8,73"
                }
              },
              {
                "$type": "method",
                "name": "getMargin",
                "text": "\nReturns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,\nthen it returns the calculated width of the sides (see <a href='#!/api/Ext.dom.Element-method-getPadding'>getPadding</a>).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sides",
                    "optional": true,
                    "text": "Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2480,29",
                      "text": "0,2480,36,69",
                      "type": "0,2480,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object/Number",
                    "src": {
                      "type": "0,2481,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2483,0",
                  "text": "0,2477,12,205"
                }
              },
              {
                "$type": "method",
                "name": "getOffsetsTo",
                "text": "Returns the offsets of this element from the passed element. The element must both\nbe part of the DOM tree and not have display:none to have page coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "offsetsTo",
                    "text": "The Positionable,\nHTMLElement, or element id to get get the offsets from.\n",
                    "type": "Ext.util.Positionable/HTMLElement/String",
                    "src": {
                      "name": "8,709,59",
                      "text": "8,709,69,18:8,710,9,56",
                      "type": "8,709,17"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The XY page offsets (e.g. `[100, -200]`)\n",
                    "type": "Number[]",
                    "src": {
                      "text": "8,711,28,41",
                      "type": "8,711,18"
                    }
                  }
                ],
                "src": {
                  "name": "8,713,0",
                  "text": "8,707,9,159"
                }
              },
              {
                "$type": "method",
                "name": "getOuterHeight",
                "removedVersion": "5.0.0",
                "text": "Retrieves the height of the element account for the top and bottom margins.\n",
                "src": {
                  "name": "0,5125,32",
                  "removedVersion": "0,5127,24",
                  "text": "0,5126,24,76"
                }
              },
              {
                "$type": "method",
                "name": "getOuterWidth",
                "removedVersion": "5.0.0",
                "text": "Retrieves the width of the element accounting for the left and right margins.\n",
                "src": {
                  "name": "0,5132,32",
                  "removedVersion": "0,5134,24",
                  "text": "0,5133,24,78"
                }
              },
              {
                "$type": "method",
                "name": "getPadding",
                "text": "Gets the width of the padding(s) for the specified side(s).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "side",
                    "text": "Can be t, l, r, b or any combination of those to add\nmultiple values. For example, passing `'lr'` would get the padding **l**eft +\nthe padding **r**ight.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2509,28",
                      "text": "0,2509,33,53:0,2510,12,101",
                      "type": "0,2509,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The padding of the sides passed added together.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,2512,29,48",
                      "type": "0,2512,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2514,0",
                  "text": "0,2508,12,60"
                }
              },
              {
                "$type": "method",
                "name": "getPositioning",
                "text": "Gets an object with all CSS positioning properties. Useful along with\n#setPostioning to get snapshot before performing an update and then restoring\nthe element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "autoPx",
                    "optional": true,
                    "text": "true to return pixel values for \"auto\" styles.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,950,30",
                      "text": "1,950,44,47",
                      "type": "1,950,20",
                      "value": "1,950,37"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,951,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,953,0",
                  "text": "1,947,12,161"
                }
              },
              {
                "$type": "method",
                "name": "getRegion",
                "text": "Returns a region object that defines the area of this element.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A Region containing \"top, left, bottom, right\" properties.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "8,721,34,59",
                      "type": "8,721,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,723,0",
                  "text": "8,720,8,63"
                }
              },
              {
                "$type": "method",
                "name": "getRight",
                "text": "Gets the right X coordinate of the element (element X position + element width)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "local",
                    "text": "True to get the local css position instead of page\ncoordinates\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,2524,29",
                      "text": "0,2524,35,51:0,2525,12,12",
                      "type": "0,2524,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,2526,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2528,0",
                  "text": "0,2523,12,80"
                }
              },
              {
                "$type": "method",
                "name": "getScroll",
                "text": "Returns the current scroll position of the element.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "An object containing the scroll position in the format\n`{left: (scrollLeft), top: (scrollTop)}`\n",
                    "type": "Object",
                    "src": {
                      "text": "0,2534,29,55:0,2535,12,41",
                      "type": "0,2534,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2537,0",
                  "text": "0,2533,12,52"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getScrollIntoViewXY",
                "text": "Gets the x and y coordinates needed for scrolling an element into view within\na given container.  These coordinates translate into the scrollLeft and scrollTop\npositions that will need to be set on an ancestor of the element in order to make\nthis element visible within its container.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "container",
                    "text": "The container\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,2571,52",
                      "text": "0,2571,62,14",
                      "type": "0,2571,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scrollX",
                    "text": "The container's current scroll position on the x axis\n",
                    "type": "Number",
                    "src": {
                      "name": "0,2572,28",
                      "text": "0,2572,36,54",
                      "type": "0,2572,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scrollY",
                    "text": "The container's current scroll position on the y axis\n",
                    "type": "Number",
                    "src": {
                      "name": "0,2573,28",
                      "text": "0,2573,36,54",
                      "type": "0,2573,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with \"x\" and \"y\" properties\n",
                    "type": "Object",
                    "src": {
                      "text": "0,2574,29,38",
                      "type": "0,2574,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,2575,12",
                  "name": "0,2577,0",
                  "text": "0,2567,12,285"
                }
              },
              {
                "$type": "method",
                "name": "getScrollLeft",
                "text": "Gets the left scroll position\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The left scroll position\n",
                    "type": "Number",
                    "src": {
                      "text": "0,2617,29,25",
                      "type": "0,2617,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2619,0",
                  "text": "0,2616,12,30"
                }
              },
              {
                "$type": "method",
                "name": "getScrollParent",
                "removedVersion": "5.0.0",
                "text": "Gets the Scroller instance of the first parent that has one.\n",
                "src": {
                  "name": "0,5188,32",
                  "removedVersion": "0,5190,24",
                  "text": "0,5189,24,61"
                }
              },
              {
                "$type": "method",
                "name": "getScrollTop",
                "text": "Gets the top scroll position\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The top scroll position\n",
                    "type": "Number",
                    "src": {
                      "text": "0,2631,29,24",
                      "type": "0,2631,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2633,0",
                  "text": "0,2630,12,29"
                }
              },
              {
                "$type": "method",
                "name": "getSize",
                "text": "Returns the size of the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "contentSize",
                    "optional": true,
                    "text": "`true` to get the width/size minus borders and padding.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,2645,30",
                      "text": "0,2645,43,56",
                      "type": "0,2645,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object containing the element's size:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "type": "Number",
                        "src": {
                          "name": "0,2647,36",
                          "type": "0,2647,21"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "type": "Number",
                        "src": {
                          "name": "0,2648,36",
                          "type": "0,2648,21"
                        }
                      }
                    ],
                    "src": {
                      "text": "0,2646,29,41",
                      "type": "0,2646,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2650,0",
                  "text": "0,2644,12,33"
                }
              },
              {
                "$type": "method",
                "name": "getStyle",
                "text": "Returns a named style property based on computed/currentStyle (primary) and\ninline-style if primary is not available.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The style property (or multiple property names\nin an array) whose value is returned.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "0,2658,37",
                      "text": "0,2658,46,47:0,2659,12,38",
                      "type": "0,2658,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "inline",
                    "optional": true,
                    "text": "if `true` only inline styles will be returned.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2660,30",
                      "text": "0,2660,44,47",
                      "type": "0,2660,20",
                      "value": "0,2660,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The current value of the style property for this element\n(or a hash of named style values if multiple property arguments are requested).\n",
                    "type": "String/Object",
                    "src": {
                      "text": "0,2661,36,57:0,2662,12,80",
                      "type": "0,2661,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2665,0",
                  "text": "0,2655,12,119"
                }
              },
              {
                "$type": "method",
                "name": "getTextWidth",
                "text": "Returns the width in pixels of the passed text, or the width of the text in this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "text",
                    "text": "The text to measure. Defaults to the innerHTML of the element.\n",
                    "type": "String",
                    "src": {
                      "name": "11,267,28",
                      "text": "11,267,33,63",
                      "type": "11,267,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "min",
                    "optional": true,
                    "text": "The minumum value to return.\n",
                    "type": "Number",
                    "src": {
                      "name": "11,268,29",
                      "text": "11,268,34,29",
                      "type": "11,268,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "max",
                    "optional": true,
                    "text": "The maximum value to return.\n",
                    "type": "Number",
                    "src": {
                      "name": "11,269,29",
                      "text": "11,269,34,29",
                      "type": "11,269,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The text width in pixels.\n",
                    "type": "Number",
                    "src": {
                      "text": "11,270,29,26",
                      "type": "11,270,21"
                    }
                  }
                ],
                "src": {
                  "name": "11,273,0",
                  "text": "11,266,12,90"
                }
              },
              {
                "$type": "method",
                "name": "getTop",
                "text": "Gets the top Y coordinate\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "local",
                    "text": "True to get the local css position instead of page\ncoordinates\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,2737,29",
                      "text": "0,2737,35,51:0,2738,12,12",
                      "type": "0,2737,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,2739,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2741,0",
                  "text": "0,2736,12,26"
                }
              },
              {
                "$type": "method",
                "name": "getValue",
                "text": "Returns the value of the `value` attribute.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "asNumber",
                    "text": "`true` to parse the value as a number.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,2747,29",
                      "text": "0,2747,38,39",
                      "type": "0,2747,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String/Number",
                    "src": {
                      "type": "0,2748,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2750,0",
                  "text": "0,2746,12,44"
                }
              },
              {
                "$type": "method",
                "name": "getViewRegion",
                "text": "Returns the **content** region of this element. That is the region within the borders\nand padding.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A Region containing \"top, left, bottom, right\" member data.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "8,765,34,60",
                      "type": "8,765,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,767,0",
                  "text": "8,763,8,99"
                }
              },
              {
                "$type": "method",
                "name": "getViewSize",
                "text": "Returns the dimensions of the element available to lay content out in.  For\nmost elements this is the clientHeight/clientWidth.  If the element is\nthe document/document.body the window's innerHeight/innerWidth is returned\n\nIf the element (or any ancestor element) has CSS style `display: none`, the\ndimensions will be zero.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object describing width and height.\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "type": "Number",
                        "src": {
                          "name": "0,2765,36",
                          "type": "0,2765,21"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "type": "Number",
                        "src": {
                          "name": "0,2766,36",
                          "type": "0,2766,21"
                        }
                      }
                    ],
                    "src": {
                      "text": "0,2764,29,36",
                      "type": "0,2764,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2768,0",
                  "text": "0,2757,12,325"
                }
              },
              {
                "$type": "method",
                "name": "getWidth",
                "text": "Returns the offset width of the element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "contentWidth",
                    "optional": true,
                    "text": "`true` to get the width minus borders and padding.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,2799,30",
                      "text": "0,2799,44,51",
                      "type": "0,2799,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The element's width.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,2800,29,21",
                      "type": "0,2800,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2802,0",
                  "text": "0,2798,12,41"
                }
              },
              {
                "$type": "method",
                "name": "getX",
                "text": "Gets element X position in page coordinates\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,2854,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2856,0",
                  "text": "0,2852,12,45"
                }
              },
              {
                "$type": "method",
                "name": "getXY",
                "text": "Gets element X and Y positions in page coordinates\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "[x, y]\n",
                    "type": "Array",
                    "src": {
                      "text": "0,2863,28,7",
                      "type": "0,2863,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2865,0",
                  "text": "0,2861,12,52"
                }
              },
              {
                "$type": "method",
                "name": "getY",
                "text": "Gets element Y position in page coordinates\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,2895,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2897,0",
                  "text": "0,2893,12,45"
                }
              },
              {
                "$type": "method",
                "name": "getZIndex",
                "text": "Returns this element's z-index\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,2903,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2905,0",
                  "text": "0,2902,12,31"
                }
              },
              {
                "$type": "method",
                "name": "ghost",
                "text": "Slides the element while fading it out of view. An anchor point can be optionally passed to set the ending point\nof the effect. Usage:\n\n    // default: slide the element downward while fading out\n    el.ghost();\n\n    // custom: slide the element out to the right with a 2-second duration\n    el.ghost('r', { duration: 2000 });\n\n    // common config options shown with default values\n    el.ghost('b', {\n        easing: 'easeOut',\n        duration: 500\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "text": "(optional) One of the valid <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> anchor positions (defaults to bottom: 'b')\n",
                    "type": "String",
                    "src": {
                      "name": "1,985,28",
                      "text": "1,985,35,91",
                      "type": "1,985,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) Object literal with any of the <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> config options\n",
                    "type": "Object",
                    "src": {
                      "name": "1,986,28",
                      "text": "1,986,36,77",
                      "type": "1,986,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,987,38,12",
                      "type": "1,987,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,989,0",
                  "text": "1,970,12,461"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Replaced by <a href='#!/api/Ext.dom.Element-getActiveAnimation'>getActiveAnimation</a>\n",
                "deprecatedVersion": "4.0",
                "inheritdoc": "Ext.util.Animate#getActiveAnimation",
                "name": "hasActiveFx",
                "src": {
                  "deprecatedMessage": "9,362,8",
                  "deprecatedVersion": "9,362,8",
                  "inheritdoc": "9,363,8",
                  "name": "9,366,0"
                }
              },
              {
                "$type": "method",
                "name": "hasCls",
                "text": "Checks if the specified CSS class exists on this element's DOM node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "name",
                    "text": "The CSS class to check for.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2911,28",
                      "text": "0,2911,33,28",
                      "type": "0,2911,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the class exists, else `false`.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,2912,30,42",
                      "type": "0,2912,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2914,0",
                  "text": "0,2910,12,69"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "7,1334,27",
                      "text": "7,1334,37,35",
                      "type": "7,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "7,1335,29,67",
                      "type": "7,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,1337,0",
                  "text": "7,1331,11,161"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.dom.Element-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "12,100,20",
                      "text": "12,100,25,34",
                      "type": "12,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "12,101,22,57:12,102,4,15",
                      "type": "12,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "12,53,12",
                  "text": "12,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "hide",
                "text": "Hide this element - Uses display mode to determine whether to use \"display\",\n\"visibility\", or \"offsets\". See <a href='#!/api/Ext.dom.Element-method-setVisible'>setVisible</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,2927,38,5",
                      "type": "0,2927,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2929,0",
                  "text": "0,2925,12,130"
                }
              },
              {
                "$type": "method",
                "name": "hide",
                "text": "Hide this element - Uses display mode to determine whether to use \"display\",\n\"visibility\", \"offsets\", or \"clip\". See <a href='#!/api/Ext.dom.Element-method-setVisible'>setVisible</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard\nElement animation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "1,1059,37",
                      "text": "1,1059,46,45:1,1060,12,32",
                      "type": "1,1059,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1061,38,5",
                      "type": "1,1061,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1063,0",
                  "text": "1,1057,12,138"
                }
              },
              {
                "$type": "method",
                "name": "highlight",
                "text": "Highlights the Element by setting a color (applies to the background-color by default, but can be changed using\nthe \"attr\" config option) and then fading back to the original color. If no original color is available, you\nshould provide the \"endColor\" config option which will be cleared after the animation. Usage:\n\n    // default: highlight background to yellow\n    el.highlight();\n\n    // custom: highlight foreground text to blue for 2 seconds\n    el.highlight(\"0000ff\", { attr: 'color', duration: 2000 });\n\n    // common config options shown with default values\n    el.highlight(\"ffff9c\", {\n        attr: \"backgroundColor\", //can be any valid CSS property (attribute) that supports a color value\n        endColor: (current color) or \"ffffff\",\n        easing: 'easeIn',\n        duration: 1000\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "color",
                    "text": "(optional) The highlight color. Should be a 6 char hex color without the leading #\n(defaults to yellow: 'ffff9c')\n",
                    "type": "String",
                    "src": {
                      "name": "1,1092,28",
                      "text": "1,1092,34,83:1,1093,12,31",
                      "type": "1,1092,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) Object literal with any of the <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> config options\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1094,28",
                      "text": "1,1094,36,77",
                      "type": "1,1094,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1095,38,12",
                      "type": "1,1095,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1097,0",
                  "text": "1,1074,12,805"
                }
              },
              {
                "$type": "method",
                "name": "hover",
                "text": "Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "overFn",
                    "text": "The function to call when the mouse enters the Element.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,1154,30",
                      "text": "1,1154,37,56",
                      "type": "1,1154,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "outFn",
                    "text": "The function to call when the mouse leaves the Element.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,1155,30",
                      "text": "1,1155,36,56",
                      "type": "1,1155,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the functions are executed. Defaults\nto the Element's DOM element.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1156,29",
                      "text": "1,1156,36,75:1,1157,12,30",
                      "type": "1,1156,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Options for the listener. See <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1158,29",
                      "text": "1,1158,38,73:1,1159,12,20",
                      "type": "1,1158,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1160,38,5",
                      "type": "1,1160,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1162,0",
                  "text": "1,1153,12,105"
                }
              },
              {
                "$type": "method",
                "name": "initDD",
                "text": "Initializes a <a href='#!/api/Ext.dd.DD'>Ext.dd.DD</a> drag drop object for this element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "group",
                    "text": "The group the DD object is member of\n",
                    "type": "String",
                    "src": {
                      "name": "1,1171,28",
                      "text": "1,1171,34,37",
                      "type": "1,1171,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The DD config object\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1172,28",
                      "text": "1,1172,35,21",
                      "type": "1,1172,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "overrides",
                    "text": "An object containing methods to override/implement on the DD object\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1173,28",
                      "text": "1,1173,38,68",
                      "type": "1,1173,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The DD object\n",
                    "type": "Ext.dd.DD",
                    "src": {
                      "text": "1,1174,32,14",
                      "type": "1,1174,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1176,0",
                  "text": "1,1170,12,67"
                }
              },
              {
                "$type": "method",
                "name": "initDDProxy",
                "text": "Initializes a <a href='#!/api/Ext.dd.DDProxy'>Ext.dd.DDProxy</a> object for this element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "group",
                    "text": "The group the DDProxy object is member of\n",
                    "type": "String",
                    "src": {
                      "name": "1,1183,28",
                      "text": "1,1183,34,42",
                      "type": "1,1183,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The DDProxy config object\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1184,28",
                      "text": "1,1184,35,26",
                      "type": "1,1184,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "overrides",
                    "text": "An object containing methods to override/implement on the DDProxy object\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1185,28",
                      "text": "1,1185,38,73",
                      "type": "1,1185,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The DDProxy object\n",
                    "type": "Ext.dd.DDProxy",
                    "src": {
                      "text": "1,1186,37,19",
                      "type": "1,1186,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1188,0",
                  "text": "1,1182,12,62"
                }
              },
              {
                "$type": "method",
                "name": "initDDTarget",
                "text": "Initializes a <a href='#!/api/Ext.dd.DDTarget'>Ext.dd.DDTarget</a> object for this element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "group",
                    "text": "The group the DDTarget object is member of\n",
                    "type": "String",
                    "src": {
                      "name": "1,1195,28",
                      "text": "1,1195,34,43",
                      "type": "1,1195,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "config",
                    "text": "The DDTarget config object\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1196,28",
                      "text": "1,1196,35,27",
                      "type": "1,1196,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "overrides",
                    "text": "An object containing methods to override/implement on the DDTarget object\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1197,28",
                      "text": "1,1197,38,74",
                      "type": "1,1197,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The DDTarget object\n",
                    "type": "Ext.dd.DDTarget",
                    "src": {
                      "text": "1,1198,38,20",
                      "type": "1,1198,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1200,0",
                  "text": "1,1194,12,63"
                }
              },
              {
                "$type": "method",
                "name": "insertAfter",
                "text": "Inserts this element after the passed element in the DOM.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element to insert after.\nThe <a href='#!/api/Ext.dom.Element-property-id'>id</a> of the node, a DOM Node or an existing Element.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,2936,56",
                      "text": "0,2936,59,29:0,2937,12,57",
                      "type": "0,2936,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This element.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,2938,38,14",
                      "type": "0,2938,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2940,0",
                  "text": "0,2935,12,58"
                }
              },
              {
                "$type": "method",
                "name": "insertBefore",
                "text": "Inserts this element before the passed element in the DOM.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element before which this element will be inserted.\nThe id of the node, a DOM Node or an existing Element.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,2948,56",
                      "text": "0,2948,59,56:0,2949,12,55",
                      "type": "0,2948,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This element.\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,2950,38,14",
                      "type": "0,2950,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2952,0",
                  "text": "0,2947,12,59"
                }
              },
              {
                "$type": "method",
                "name": "insertFirst",
                "text": "Inserts (or creates) an element as the first child of this element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The id or element to insert\nor a DomHelper config to create and insert\n",
                    "type": "String/HTMLElement/Ext.dom.Element/Object",
                    "src": {
                      "name": "0,2960,63",
                      "text": "0,2960,66,28:0,2961,12,43",
                      "type": "0,2960,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "True to return the raw DOM element instead\nof Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2962,30",
                      "text": "0,2962,47,43:0,2963,12,19",
                      "type": "0,2962,20",
                      "value": "0,2962,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new child element (or HTMLElement if\n_returnDom_ is _true_).\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,2964,50,41:0,2965,12,24",
                      "type": "0,2964,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2967,0",
                  "text": "0,2959,12,67"
                }
              },
              {
                "$type": "method",
                "name": "insertHtml",
                "text": "Inserts an html fragment into this element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "where",
                    "text": "Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.\nSee <a href='#!/api/Ext.dom.Helper-method-insertHtml'>Ext.dom.Helper#insertHtml</a> for details.\n",
                    "type": "String",
                    "src": {
                      "name": "0,2981,28",
                      "text": "0,2981,34,101:0,2982,12,51",
                      "type": "0,2981,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "html",
                    "text": "The HTML fragment\n",
                    "type": "String",
                    "src": {
                      "name": "0,2983,28",
                      "text": "0,2983,33,18",
                      "type": "0,2983,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnEl",
                    "optional": true,
                    "text": "True to return an Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2984,30",
                      "text": "0,2984,46,34",
                      "type": "0,2984,20",
                      "value": "0,2984,39"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The inserted node (or nearest related if more than 1 inserted)\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,2985,50,63",
                      "type": "0,2985,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,2987,0",
                  "text": "0,2980,12,43"
                }
              },
              {
                "$type": "method",
                "name": "insertSibling",
                "text": "Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The id, element to insert or a DomHelper config\nto create and insert *or* an array of any of those.\n",
                    "type": "String/HTMLElement/Ext.dom.Element/Object/Array",
                    "src": {
                      "name": "0,2994,69",
                      "text": "0,2994,72,48:0,2995,12,52",
                      "type": "0,2994,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "where",
                    "optional": true,
                    "text": "'before' or 'after'\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "0,2996,29",
                      "text": "0,2996,45,20",
                      "type": "0,2996,20",
                      "value": "0,2996,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "True to return the raw DOM element instead of Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,2997,30",
                      "text": "0,2997,47,62",
                      "type": "0,2997,20",
                      "value": "0,2997,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The inserted Ext.dom.Element (or\nHTMLElement if _returnDom_ is _true_). If an array is passed, the last\ninserted element is returned.\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,2998,50,33:0,2999,12,101",
                      "type": "0,2998,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3002,0",
                  "text": "0,2993,12,91"
                }
              },
              {
                "$type": "method",
                "name": "is",
                "text": "Returns `true` if this element matches the passed simple selector\n(e.g. 'div.some-class' or 'span:first-child').\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The simple selector to test or a function which is passed\ncandidate nodes, and should return `true` for nodes which match.\n",
                    "type": "String/Function",
                    "src": {
                      "name": "0,3054,37",
                      "text": "0,3054,46,58:0,3055,12,65",
                      "type": "0,3054,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if this element matches the selector, else `false`.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,3056,30,59",
                      "type": "0,3056,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3058,0",
                  "text": "0,3052,12,113"
                }
              },
              {
                "$type": "method",
                "name": "isAncestor",
                "text": "Returns `true` if this element is an ancestor of the passed element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element or id of the element\nto search for in this elements descendants.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,3085,56",
                      "text": "0,3085,59,33:0,3086,12,44",
                      "type": "0,3085,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,3087,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3089,0",
                  "text": "0,3084,12,68"
                }
              },
              {
                "$type": "method",
                "name": "isDescendent",
                "removedVersion": "5.0.0",
                "text": "Determines if this element is a descendant of the passed in Element.\n",
                "src": {
                  "name": "0,5195,32",
                  "removedVersion": "0,5197,24",
                  "text": "0,5196,24,69"
                }
              },
              {
                "$type": "method",
                "name": "isFocusable",
                "text": "Checks whether this element can be focused programmatically or by clicking.\nTo check if an element is in the document tab flow, use <a href='#!/api/Ext.dom.Element-method-isTabbable'>isTabbable</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "True if the element is focusable\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1209,30,33",
                      "type": "1,1209,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1211,0",
                  "text": "1,1206,12,154"
                }
              },
              {
                "$type": "method",
                "name": "isInputField",
                "text": "Returns `true` if this Element is an input field, or is editable in any way.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if this Element is an input field, or is editable in any way.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1250,30,69",
                      "type": "1,1250,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1252,0",
                  "text": "1,1249,12,77"
                }
              },
              {
                "$type": "method",
                "name": "isMasked",
                "text": "Returns true if this element is masked. Also re-centers any displayed message\nwithin the mask.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "Go up the DOM hierarchy to determine if any parent\nelement is masked.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1349,30",
                      "text": "1,1349,36,51:1,1350,12,20",
                      "type": "1,1349,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "1,1352,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1354,0",
                  "text": "1,1346,12,96"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.dom.Element-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "12,148,20",
                      "text": "12,148,30,71:12,149,4,18",
                      "type": "12,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "12,150,20",
                      "text": "12,150,27,50",
                      "type": "12,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "12,151,22,56",
                      "type": "12,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "12,106,12",
                  "text": "12,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "isScrollable",
                "text": "Returns true if this element is scrollable.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,3120,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3122,0",
                  "text": "0,3119,12,44"
                }
              },
              {
                "$type": "method",
                "name": "isStyle",
                "text": "Checks if the current value of a style is equal to a given value.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "style",
                    "text": "property whose value is returned.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3129,28",
                      "text": "0,3129,34,34",
                      "type": "0,3129,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "to check against.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3130,28",
                      "text": "0,3130,34,18",
                      "type": "0,3130,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` for when the current value equals the given value.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,3131,30,58",
                      "type": "0,3131,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3133,0",
                  "text": "0,3128,12,66"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "7,1344,29",
                      "text": "7,1344,36,40",
                      "type": "7,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "7,1345,30,31",
                      "type": "7,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "7,1347,0",
                  "text": "7,1343,12,57"
                }
              },
              {
                "$type": "method",
                "name": "isTabbable",
                "text": "Checks whether this element participates in the sequential focus navigation,\nand can be reached by using Tab key.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "includeHidden",
                    "optional": true,
                    "text": "pass `true` if hidden, or unattached elements should be returned.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "1,1272,30",
                      "text": "1,1272,51,66",
                      "type": "1,1272,20",
                      "value": "1,1272,44"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the element is tabbable.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1273,30,33",
                      "type": "1,1273,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1275,0",
                  "text": "1,1269,12,115"
                }
              },
              {
                "$type": "method",
                "name": "isVisible",
                "text": "Checks whether the element is currently visible using both visibility and display properties.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deep",
                    "optional": true,
                    "text": "True to walk the dom and see if parent elements are hidden.\nIf false, the function only checks the visibility of the element itself and it may return\n`true` even though a parent is not visible.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,3139,30",
                      "text": "0,3139,42,60:0,3140,12,134",
                      "type": "0,3139,20",
                      "value": "0,3139,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the element is currently visible, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,3142,30,57",
                      "type": "0,3142,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3144,0",
                  "text": "0,3138,12,94"
                }
              },
              {
                "$type": "method",
                "name": "last",
                "text": "Gets the last child, skipping text nodes\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "Find the previous sibling that matches the passed simple selector.\nSee <a href='#!/api/Ext.dom.Query'>Ext.dom.Query</a> for information about simple selectors.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3172,29",
                      "text": "0,3172,39,67:0,3173,12,66",
                      "type": "0,3172,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "`true` to return a raw DOM node instead of an Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,3174,30",
                      "text": "0,3174,47,62",
                      "type": "0,3174,20",
                      "value": "0,3174,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The last child Ext.dom.Element (or\nHTMLElement if _returnDom_ is _true_).  Or null if no match is found.\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,3175,50,35:0,3176,12,70",
                      "type": "0,3175,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3178,0",
                  "text": "0,3171,12,41"
                }
              },
              {
                "$type": "method",
                "name": "load",
                "text": "Direct access to the Ext.ElementLoader <a href='#!/api/Ext.ElementLoader-method-load'>Ext.ElementLoader#method-load</a> method.\nThe method takes the same object parameter as <a href='#!/api/Ext.ElementLoader-method-load'>Ext.ElementLoader#method-load</a>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "a options object for Ext.ElementLoader <a href='#!/api/Ext.ElementLoader-method-load'>Ext.ElementLoader#method-load</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1382,28",
                      "text": "1,1382,36,77",
                      "type": "1,1382,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1383,38,5",
                      "type": "1,1383,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1385,0",
                  "text": "1,1380,12,169"
                }
              },
              {
                "$type": "method",
                "name": "mask",
                "text": "Puts a mask over this element to disable user interaction.\nThis method can only be applied to elements which accept child nodes. Use\n<a href='#!/api/Ext.dom.Element-method-unmask'>unmask</a> to remove the mask.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "msg",
                    "optional": true,
                    "text": "A message to display in the mask\n",
                    "type": "String",
                    "src": {
                      "name": "1,1395,28",
                      "text": "1,1395,33,33",
                      "type": "1,1395,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "msgCls",
                    "optional": true,
                    "text": "A css class to apply to the msg element\n",
                    "type": "String",
                    "src": {
                      "name": "1,1396,28",
                      "text": "1,1396,36,40",
                      "type": "1,1396,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The mask element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1397,37,17",
                      "type": "1,1397,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1399,0",
                  "text": "1,1391,11,170"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "maskIframes",
                "text": "Mask iframes when shim is true. See <a href='#!/api/Ext.util.Floating-cfg-shim'>Ext.util.Floating#shim</a>.\n",
                "src": {
                  "access": "0,3184,11",
                  "name": "0,3186,0",
                  "text": "0,3183,11,68"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for <a href='#!/api/Ext.dom.Element-method-addManagedListener'>addManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "7,1789,12",
                  "name": "7,1791,0",
                  "text": "7,1788,12,43"
                }
              },
              {
                "$type": "method",
                "name": "monitorMouseLeave",
                "text": "Monitors this Element for the mouse leaving. Calls the function after the specified delay only if\nthe mouse was not moved back into the Element within the delay. If the mouse *was* moved\nback in, the function is not called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "delay",
                    "text": "The delay **in milliseconds** to wait for possible mouse re-entry before calling the handler function.\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1468,28",
                      "text": "1,1468,34,103",
                      "type": "1,1468,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "handler",
                    "text": "The function to call if the mouse remains outside of this Element for the specified time.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,1469,30",
                      "text": "1,1469,38,90",
                      "type": "1,1469,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function executes. Defaults to this Element.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1470,29",
                      "text": "1,1470,36,95",
                      "type": "1,1470,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The listeners object which was added to this element so that monitoring can be stopped. Example usage:\n\n    // Hide the menu if the mouse moves out for 250ms or more\n    this.mouseLeaveMonitor = this.menuEl.monitorMouseLeave(250, this.hideMenu, this);\n\n    ...\n    // Remove mouseleave monitor on menu destroy\n    this.menuEl.un(this.mouseLeaveMonitor);\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1471,29,103:1,1472,12,252",
                      "type": "1,1471,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1481,0",
                  "text": "1,1465,12,224"
                }
              },
              {
                "$type": "method",
                "name": "move",
                "text": "Move the element relative to its current position.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "direction",
                    "text": "Possible values are:\n\n- `\"l\"` (or `\"left\"`)\n- `\"r\"` (or `\"right\"`)\n- `\"t\"` (or `\"top\"`, or `\"up\"`)\n- `\"b\"` (or `\"bottom\"`, or `\"down\"`)\n",
                    "type": "String",
                    "src": {
                      "name": "8,795,24",
                      "text": "8,795,34,21:8,796,8,116",
                      "type": "8,795,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "distance",
                    "text": "How far to move the element in pixels\n",
                    "type": "Number",
                    "src": {
                      "name": "8,802,24",
                      "text": "8,802,33,38",
                      "type": "8,802,16"
                    }
                  }
                ],
                "src": {
                  "name": "8,804,0",
                  "text": "8,794,8,51"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for <a href='#!/api/Ext.dom.Element-method-removeManagedListener'>removeManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "7,1795,12",
                  "name": "7,1797,0",
                  "text": "7,1794,12,46"
                }
              },
              {
                "$type": "method",
                "name": "next",
                "text": "Gets the next sibling, skipping text nodes\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "Find the next sibling that matches the passed simple selector.\nSee <a href='#!/api/Ext.dom.Query'>Ext.dom.Query</a> for information about simple selectors.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3221,29",
                      "text": "0,3221,39,63:0,3222,12,66",
                      "type": "0,3221,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "`true` to return a raw dom node instead of an Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,3223,30",
                      "text": "0,3223,47,62",
                      "type": "0,3223,20",
                      "value": "0,3223,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The next sibling Ext.dom.Element (or\nHTMLElement if _asDom_ is _true_).  Or null if no match is found.\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,3224,50,37:0,3225,12,66",
                      "type": "0,3224,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3227,0",
                  "text": "0,3220,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "7,1777,12",
                  "name": "7,1779,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "7,1190,44",
                      "text": "7,1190,54,37",
                      "type": "7,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "7,1191,37",
                      "text": "7,1191,40,30",
                      "type": "7,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1192,29",
                      "text": "7,1192,36,20",
                      "type": "7,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1193,29",
                      "text": "7,1193,38,44",
                      "type": "7,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,1195,0",
                  "text": "7,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "7,1175,44",
                      "text": "7,1175,54,37",
                      "type": "7,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "7,1176,37",
                      "text": "7,1176,40,30",
                      "type": "7,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1177,29",
                      "text": "7,1177,36,20",
                      "type": "7,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1178,29",
                      "text": "7,1178,38,44",
                      "type": "7,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,1180,0",
                  "text": "7,1170,12,183"
                }
              },
              {
                "$type": "method",
                "name": "parent",
                "text": "Gets the parent node for this element, optionally chaining up trying to match a selector\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "Find a parent node that matches the passed simple selector.\nSee <a href='#!/api/Ext.dom.Query'>Ext.dom.Query</a> for information about simple selectors.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3233,29",
                      "text": "0,3233,39,60:0,3234,12,66",
                      "type": "0,3233,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "True to return a raw dom node instead of an Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,3235,30",
                      "text": "0,3235,47,60",
                      "type": "0,3235,20",
                      "value": "0,3235,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The parent node (Ext.dom.Element or\nHTMLElement if _returnDom_ is _true_).  Or null if no match is found.\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,3236,50,36:0,3237,12,70",
                      "type": "0,3236,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3239,0",
                  "text": "0,3232,12,89"
                }
              },
              {
                "$type": "method",
                "name": "position",
                "text": "Initializes positioning on this element. If a desired position is not passed,\nit will make the the element positioned relative IF it is not already positioned.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pos",
                    "optional": true,
                    "text": "Positioning to use \"relative\", \"absolute\" or \"fixed\"\n",
                    "type": "String",
                    "src": {
                      "name": "0,3246,29",
                      "text": "0,3246,34,53",
                      "type": "0,3246,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "zIndex",
                    "optional": true,
                    "text": "The zIndex to apply\n",
                    "type": "Number",
                    "src": {
                      "name": "0,3247,29",
                      "text": "0,3247,37,20",
                      "type": "0,3247,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x",
                    "optional": true,
                    "text": "Set the page X position\n",
                    "type": "Number",
                    "src": {
                      "name": "0,3248,29",
                      "text": "0,3248,32,24",
                      "type": "0,3248,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "Set the page Y position\n",
                    "type": "Number",
                    "src": {
                      "name": "0,3249,29",
                      "text": "0,3249,32,24",
                      "type": "0,3249,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,3251,0",
                  "text": "0,3244,12,160"
                }
              },
              {
                "$type": "method",
                "name": "prev",
                "text": "Gets the previous sibling, skipping text nodes\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "Find the previous sibling that matches the passed simple selector.\nSee <a href='#!/api/Ext.dom.Query'>Ext.dom.Query</a> for information about simple selectors.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3271,29",
                      "text": "0,3271,39,67:0,3272,12,66",
                      "type": "0,3271,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "`true` to return a raw DOM node instead of an Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,3273,30",
                      "text": "0,3273,47,62",
                      "type": "0,3273,20",
                      "value": "0,3273,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The previous sibling (Ext.dom.Element or\nHTMLElement if _returnDom_ is _true_).  Or null if no match is found.\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,3274,50,41:0,3275,12,70",
                      "type": "0,3274,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3277,0",
                  "text": "0,3270,12,47"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.dom.Element-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.dom.Element-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "12,220,20",
                      "text": "12,220,25,34",
                      "type": "12,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "12,221,22,57:12,222,4,22",
                      "type": "12,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "12,155,12",
                  "text": "12,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "puff",
                "text": "Fades the element out while slowly expanding it in all directions. When the effect is completed, the element will\nbe hidden (visibility = 'hidden') but block elements will still take up space in the document. Usage:\n\n    // default\n    el.puff();\n\n    // common config options shown with default values\n    el.puff({\n        easing: 'easeOut',\n        duration: 500,\n        useDisplay: false\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) Object literal with any of the <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> config options\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1516,28",
                      "text": "1,1516,36,77",
                      "type": "1,1516,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1517,38,12",
                      "type": "1,1517,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1519,0",
                  "text": "1,1503,12,402"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Please use <a href='#!/api/Ext.dom.Element-clearListeners'>clearListeners</a> instead.\n",
                "deprecatedVersion": "5.0.0",
                "inheritdoc": "Ext.dom.Element#clearListeners",
                "name": "purgeAllListeners",
                "src": {
                  "deprecatedMessage": "0,5218,24",
                  "deprecatedVersion": "0,5218,24",
                  "inheritdoc": "0,5217,24",
                  "name": "0,5216,32"
                }
              },
              {
                "$type": "method",
                "name": "query",
                "text": "Selects child nodes based on the passed CSS selector.\nDelegates to document.querySelectorAll. More information can be found at\n[http://www.w3.org/TR/css3-selectors/](http://www.w3.org/TR/css3-selectors/)\n\nAll selectors, attribute filters and pseudos below can be combined infinitely\nin any order. For example `div.foo:nth-child(odd)[@foo=bar].bar:first` would be\na perfectly valid selector.\n\n## Element Selectors:\n\n* \\* any element\n* E an element with the tag E\n* E F All descendant elements of E that have the tag F\n* E > F or E/F all direct children elements of E that have the tag F\n* E + F all elements with the tag F that are immediately preceded by an element with the tag E\n* E ~ F all elements with the tag F that are preceded by a sibling element with the tag E\n\n## Attribute Selectors:\n\nThe use of @ and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.\n\n* E[foo] has an attribute \"foo\"\n* E[foo=bar] has an attribute \"foo\" that equals \"bar\"\n* E[foo^=bar] has an attribute \"foo\" that starts with \"bar\"\n* E[foo$=bar] has an attribute \"foo\" that ends with \"bar\"\n* E[foo*=bar] has an attribute \"foo\" that contains the substring \"bar\"\n* E[foo%=2] has an attribute \"foo\" that is evenly divisible by 2\n* E[foo!=bar] has an attribute \"foo\" that does not equal \"bar\"\n\n## Pseudo Classes:\n\n* E:first-child E is the first child of its parent\n* E:last-child E is the last child of its parent\n* E:nth-child(n) E is the nth child of its parent (1 based as per the spec)\n* E:nth-child(odd) E is an odd child of its parent\n* E:nth-child(even) E is an even child of its parent\n* E:only-child E is the only child of its parent\n* E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)\n* E:first the first E in the resultset\n* E:last the last E in the resultset\n* E:nth(n) the nth E in the resultset (1 based)\n* E:odd shortcut for :nth-child(odd)\n* E:even shortcut for :nth-child(even)\n* E:not(S) an E element that does not match simple selector S\n* E:has(S) an E element that has a descendant that matches simple selector S\n* E:next(S) an E element whose next sibling matches simple selector S\n* E:prev(S) an E element whose previous sibling matches simple selector S\n* E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\\\\\n\n## CSS Value Selectors:\n\n* E{display=none} CSS value \"display\" that equals \"none\"\n* E{display^=none} CSS value \"display\" that starts with \"none\"\n* E{display$=none} CSS value \"display\" that ends with \"none\"\n* E{display*=none} CSS value \"display\" that contains the substring \"none\"\n* E{display%=2} CSS value \"display\" that is evenly divisible by 2\n* E{display!=none} CSS value \"display\" that does not equal \"none\"\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The CSS selector.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3340,28",
                      "text": "0,3340,37,18",
                      "type": "0,3340,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "asDom",
                    "optional": true,
                    "text": "`false` to return an array of Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,3341,30",
                      "text": "0,3341,42,46",
                      "type": "0,3341,20",
                      "value": "0,3341,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An Array of elements (\nHTMLElement or Ext.dom.Element if _asDom_ is _false_) that match the selector.\nIf there are no matches, an empty Array is returned.\n",
                    "type": "HTMLElement[]/Ext.dom.Element[]",
                    "src": {
                      "text": "0,3342,54,23:0,3343,12,132",
                      "type": "0,3342,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3346,0",
                  "text": "0,3282,12,2741"
                }
              },
              {
                "$type": "method",
                "name": "radioCls",
                "text": "Adds one or more CSS classes to this element and removes the same class(es) from all siblings.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The CSS class to add, or an array of classes.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "0,3385,37",
                      "text": "0,3385,47,46",
                      "type": "0,3385,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3386,38,5",
                      "type": "0,3386,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3388,0",
                  "text": "0,3384,12,95"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1468,27",
                      "text": "7,1468,34,53",
                      "type": "7,1468,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "7,1469,36",
                      "text": "7,1469,43,58:7,1470,11,231",
                      "type": "7,1469,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "7,1475,28",
                      "text": "7,1475,36,60:7,1476,11,164",
                      "type": "7,1475,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the <a href='#!/api/Ext.dom.Element-method-destroy'>destroy</a> method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "7,1481,28,130:7,1482,11,192",
                      "type": "7,1481,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,1492,0",
                  "text": "7,1455,11,651"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Please use <a href='#!/api/Ext.dom.Element-destroy'>destroy</a> instead.\n",
                "deprecatedVersion": "5.0.0",
                "inheritdoc": "Ext.dom.Element#destroy",
                "name": "remove",
                "src": {
                  "deprecatedMessage": "0,3413,12",
                  "deprecatedVersion": "0,3413,12",
                  "inheritdoc": "0,3412,12",
                  "name": "0,3415,0"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for <a href='#!/api/Ext.dom.Element-method-unAfter'>unAfter</a>.\n",
                "src": {
                  "name": "7,1248,0",
                  "text": "7,1246,12,28"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Please use <a href='#!/api/Ext.dom.Element-clearListeners'>clearListeners</a> instead.\n",
                "deprecatedVersion": "5.0.0",
                "inheritdoc": "Ext.dom.Element#clearListeners",
                "name": "removeAllListeners",
                "src": {
                  "deprecatedMessage": "0,5225,24",
                  "deprecatedVersion": "0,5225,24",
                  "inheritdoc": "0,5224,24",
                  "name": "0,5223,32"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.dom.Element-method-unBefore'>unBefore</a>.\n",
                "src": {
                  "name": "7,1242,0",
                  "text": "7,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeCls",
                "text": "Removes the given CSS class(es) from this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "names",
                    "text": "The CSS classes to remove separated by space,\nor an array of classes\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "0,3427,37",
                      "text": "0,3427,43,46:0,3428,12,23",
                      "type": "0,3427,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "Prefix to prepend to each class. The separator `-` will be\nappended to the prefix.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3429,29",
                      "text": "0,3429,37,59:0,3430,12,24",
                      "type": "0,3429,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "suffix",
                    "optional": true,
                    "text": "Suffix to append to each class. The separator `-` will be\nprepended to the suffix.\nreturn {Ext.dom.Element} this\n",
                    "type": "String",
                    "src": {
                      "name": "0,3431,29",
                      "text": "0,3431,37,58:0,3432,12,55",
                      "type": "0,3431,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,3435,0",
                  "text": "0,3426,12,51"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "7,1102,28",
                      "text": "7,1102,38,51",
                      "type": "7,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "7,1103,30",
                      "text": "7,1103,33,66:7,1104,12,76",
                      "type": "7,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1106,28",
                      "text": "7,1106,34,62:7,1107,12,1017",
                      "type": "7,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,1145,0",
                  "text": "7,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the <a href='#!/api/Ext.dom.Element-method-mon'>mon</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "7,526,56",
                      "text": "7,526,61,52",
                      "type": "7,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "7,527,34",
                      "text": "7,527,40,63",
                      "type": "7,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "7,528,29",
                      "text": "7,528,32,85",
                      "type": "7,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,529,27",
                      "text": "7,529,33,92:7,530,11,43",
                      "type": "7,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "7,532,0",
                  "text": "7,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "7,1307,28",
                      "text": "7,1307,36,44",
                      "type": "7,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1308,27",
                      "text": "7,1308,43,26:7,1309,11,41",
                      "type": "7,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "7,1306,11",
                  "name": "7,1311,0",
                  "text": "7,1305,11,38"
                }
              },
              {
                "$type": "method",
                "name": "repaint",
                "text": "Forces the browser to repaint this element.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3481,38,5",
                      "type": "0,3481,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3483,0",
                  "text": "0,3480,12,44"
                }
              },
              {
                "$type": "method",
                "name": "replace",
                "text": "Replaces the passed element with this element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element to replace.\nThe id of the node, a DOM Node or an existing Element.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,3496,56",
                      "text": "0,3496,59,24:0,3497,12,55",
                      "type": "0,3496,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "destroy",
                    "optional": true,
                    "text": "`false` to prevent destruction of the replaced\nelement\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,3498,30",
                      "text": "0,3498,44,47:0,3499,12,8",
                      "type": "0,3498,20",
                      "value": "0,3498,38"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3500,38,13",
                      "type": "0,3500,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3502,0",
                  "text": "0,3495,12,46"
                }
              },
              {
                "$type": "method",
                "name": "replaceCls",
                "text": "Replaces a CSS class on the element with another.\nIf the old name does not exist, the new name will simply be added.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oldName",
                    "text": "The CSS class to replace.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3528,28",
                      "text": "0,3528,36,26",
                      "type": "0,3528,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The replacement CSS class.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3529,28",
                      "text": "0,3529,36,27",
                      "type": "0,3529,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "Prefix to prepend to each class to be replaced.\n",
                    "type": "String",
                    "value": "''",
                    "src": {
                      "name": "0,3530,29",
                      "text": "0,3530,40,48",
                      "type": "0,3530,20",
                      "value": "0,3530,36"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "suffix",
                    "optional": true,
                    "text": "Suffix to append to each class to be replaced.\n",
                    "type": "String",
                    "value": "''",
                    "src": {
                      "name": "0,3531,29",
                      "text": "0,3531,40,47",
                      "type": "0,3531,20",
                      "value": "0,3531,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3532,38,5",
                      "type": "0,3532,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3534,0",
                  "text": "0,3526,12,117"
                }
              },
              {
                "$type": "method",
                "name": "replaceWith",
                "text": "Replaces this element with the passed element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The new element (id of the\nnode, a DOM Node or an existing Element) or a DomHelper config of an element to create\n",
                    "type": "String/HTMLElement/Ext.dom.Element/Object",
                    "src": {
                      "name": "0,3597,63",
                      "text": "0,3597,66,27:0,3598,12,87",
                      "type": "0,3597,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "This element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3599,38,13",
                      "type": "0,3599,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3601,0",
                  "text": "0,3596,12,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "7,579,29",
                      "text": "7,579,48,46",
                      "type": "7,579,20",
                      "value": "7,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "7,580,29,24",
                      "type": "7,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "7,581,12",
                  "name": "7,583,0",
                  "text": "7,577,12,102"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "restoreTabbableState",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipSelf",
                    "src": {
                      "name": "1,2856,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "skipChildren",
                    "src": {
                      "name": "1,2856,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,2854,16",
                  "name": "1,2856,0"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the <a href='#!/api/Ext.dom.Element-method-suspendEvent'>suspendEvent</a> method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "7,1409,32",
                      "text": "7,1409,42,32",
                      "type": "7,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "7,1411,0",
                  "text": "7,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see <a href='#!/api/Ext.dom.Element-method-suspendEvents'>suspendEvents</a>).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See <a href='#!/api/Ext.dom.Element-method-suspendEvents'>suspendEvents</a>.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "7,1433,29",
                      "text": "7,1433,43,59:7,1434,11,53",
                      "type": "7,1433,19"
                    }
                  }
                ],
                "src": {
                  "name": "7,1436,0",
                  "text": "7,1428,11,198"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "reverseTranslateXY",
                "text": "Converts local coordinates into page-level coordinates\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xy",
                    "text": "The local x and y coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "name": "8,940,26",
                      "text": "8,940,29,30",
                      "type": "8,940,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The translated coordinates\n",
                    "type": "Number[]",
                    "src": {
                      "text": "8,941,27,27",
                      "type": "8,941,17"
                    }
                  }
                ],
                "src": {
                  "access": "8,942,8",
                  "name": "8,944,0",
                  "text": "8,939,8,55"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "saveTabbableState",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "src": {
                      "name": "1,2805,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,2803,16",
                  "name": "1,2805,0"
                }
              },
              {
                "$type": "method",
                "name": "scroll",
                "text": "Scrolls this element the specified direction. Does bounds checking to make sure the scroll is\nwithin this element's scrollable range.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "direction",
                    "text": "Possible values are:\n\n- `\"l\"` (or `\"left\"`)\n- `\"r\"` (or `\"right\"`)\n- `\"t\"` (or `\"top\"`, or `\"up\"`)\n- `\"b\"` (or `\"bottom\"`, or `\"down\"`)\n",
                    "type": "String",
                    "src": {
                      "name": "0,3637,28",
                      "text": "0,3637,38,21:0,3638,12,116",
                      "type": "0,3637,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "distance",
                    "text": "How far to scroll the element in pixels\n",
                    "type": "Number",
                    "src": {
                      "name": "0,3644,28",
                      "text": "0,3644,37,40",
                      "type": "0,3644,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard Element\nanimation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "0,3645,37",
                      "text": "0,3645,46,53:0,3646,12,24",
                      "type": "0,3645,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if a scroll was triggered or false if the element\nwas scrolled as far as it could go.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,3647,30,63:0,3648,12,36",
                      "type": "0,3647,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3650,0",
                  "text": "0,3635,12,134"
                }
              },
              {
                "$type": "method",
                "name": "scrollBy",
                "text": "Scrolls this element by the passed delta values, optionally animating.\n\nAll of the following are equivalent:\n\n     el.scrollBy(10, 10, true);\n     el.scrollBy([10, 10], true);\n     el.scrollBy({ x: 10, y: 10 }, true);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "deltaX",
                    "text": "Either the x delta, an Array specifying x and y deltas or\nan object with \"x\" and \"y\" properties.\n",
                    "type": "Number/Number[]/Object",
                    "src": {
                      "name": "0,3693,44",
                      "text": "0,3693,51,58:0,3694,12,39",
                      "type": "0,3693,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "deltaY",
                    "text": "Either the y delta, or an animate flag or config object.\n",
                    "type": "Number/Boolean/Object",
                    "src": {
                      "name": "0,3695,43",
                      "text": "0,3695,50,57",
                      "type": "0,3695,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "text": "Animate flag/config object if the delta values were passed separately.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "0,3696,36",
                      "text": "0,3696,44,71",
                      "type": "0,3696,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3697,38,5",
                      "type": "0,3697,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3699,0",
                  "text": "0,3685,12,219"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "scrollChildIntoView",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "src": {
                      "name": "0,3727,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "hscroll",
                    "src": {
                      "name": "0,3727,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,3725,12",
                  "name": "0,3727,0"
                }
              },
              {
                "$type": "method",
                "name": "scrollIntoView",
                "text": "Scrolls this element into view within the passed container.\n\n      Ext.create('Ext.data.Store', {\n          storeId:'simpsonsStore',\n          fields:['name', 'email', 'phone'],\n          data:{'items':[\n              { 'name': 'Lisa',  \"email\":\"lisa@simpsons.com\",  \"phone\":\"555-111-1224\"  },\n              { 'name': 'Bart',  \"email\":\"bart@simpsons.com\",  \"phone\":\"555-222-1234\" },\n              { 'name': 'Homer', \"email\":\"homer@simpsons.com\",  \"phone\":\"555-222-1244\"  },\n              { 'name': 'Marge', \"email\":\"marge@simpsons.com\", \"phone\":\"555-222-1254\"  },\n              { 'name': 'Milhouse', \"email\":\"milhouse@simpsons.com\",  \"phone\":\"555-222-1244\"  },\n              { 'name': 'Willy', \"email\":\"willy@simpsons.com\", \"phone\":\"555-222-1254\"  },\n              { 'name': 'Skinner', \"email\":\"skinner@simpsons.com\",  \"phone\":\"555-222-1244\"  },\n              { 'name': 'Hank (last row)', \"email\":\"hank@simpsons.com\", \"phone\":\"555-222-1254\"  }\n          ]},\n          proxy: {\n              type: 'memory',\n              reader: {\n                  type: 'json',\n                  rootProperty: 'items'\n              }\n          }\n      });\n\n      var grid = Ext.create('Ext.grid.Panel', {\n          title: 'Simpsons',\n          store: Ext.data.StoreManager.lookup('simpsonsStore'),\n          columns: [\n              { text: 'Name',  dataIndex: 'name', width: 125 },\n              { text: 'Email', dataIndex: 'email', flex: 1 },\n              { text: 'Phone', dataIndex: 'phone' }\n          ],\n          height: 190,\n          width: 400,\n          renderTo: Ext.getBody(),\n          tbar: [{\n              text: 'Scroll row 7 into view',\n              handler: function () {\n                  var view = grid.getView();\n\n                  Ext.get(view.getRow(7)).scrollIntoView(view.getEl(), null, true);\n              }\n          }]\n      });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "container",
                    "optional": true,
                    "text": "The container element\nto scroll.  Should be a string (id), dom node, or Ext.Element.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "value": "document.body",
                    "src": {
                      "name": "0,3778,53",
                      "text": "0,3778,78,22:0,3779,12,63",
                      "type": "0,3778,20",
                      "value": "0,3778,63"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "hscroll",
                    "optional": true,
                    "text": "False to disable horizontal scroll.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,3780,30",
                      "text": "0,3780,44,36",
                      "type": "0,3780,20",
                      "value": "0,3780,38"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard Element\nanimation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "0,3781,37",
                      "text": "0,3781,46,53:0,3782,12,24",
                      "type": "0,3781,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "highlight",
                    "optional": true,
                    "text": "true to <a href='#!/api/Ext.dom.Element-method-highlight'>highlight</a> the element when it is in view.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,3783,30",
                      "text": "0,3783,47,59",
                      "type": "0,3783,20",
                      "value": "0,3783,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3784,38,5",
                      "type": "0,3784,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3786,0",
                  "text": "0,3733,12,1847"
                }
              },
              {
                "$type": "method",
                "name": "scrollTo",
                "text": "Scrolls this element the specified scroll point. It does NOT do bounds checking so\nif you scroll to a weird value it will try to do it. For auto bounds checking, use #scroll.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "side",
                    "text": "Either \"left\" for scrollLeft values or \"top\" for scrollTop values.\n",
                    "type": "String",
                    "src": {
                      "name": "0,3802,28",
                      "text": "0,3802,33,67",
                      "type": "0,3802,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The new scroll value\n",
                    "type": "Number",
                    "src": {
                      "name": "0,3803,28",
                      "text": "0,3803,34,21",
                      "type": "0,3803,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard Element\nanimation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "0,3804,37",
                      "text": "0,3804,46,53:0,3805,12,24",
                      "type": "0,3804,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3806,38,5",
                      "type": "0,3806,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3808,0",
                  "text": "0,3800,12,175"
                }
              },
              {
                "$type": "method",
                "name": "select",
                "text": "Selects descendant elements of this element based on the passed CSS selector to\nenable <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> methods to be applied to many related\nelements in one statement through the returned\n<a href='#!/api/Ext.dom.CompositeElementLite'>Ext.dom.CompositeElementLite</a> object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The CSS selector or an array of elements\n",
                    "type": "String/HTMLElement[]",
                    "src": {
                      "name": "0,3840,42",
                      "text": "0,3840,51,41",
                      "type": "0,3840,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "composite",
                    "text": "Return a CompositeElement as opposed to a\nCompositeElementLite. Defaults to false.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,3841,29",
                      "text": "0,3841,39,42:0,3842,12,41",
                      "type": "0,3841,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.dom.CompositeElementLite/Ext.dom.CompositeElement",
                    "src": {
                      "type": "0,3843,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3845,0",
                  "text": "0,3835,12,271"
                }
              },
              {
                "$type": "method",
                "name": "selectable",
                "text": "Enable text selection for this element (normalized across browsers)\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1573,38,5",
                      "type": "1,1573,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1575,0",
                  "text": "1,1572,12,68"
                }
              },
              {
                "$type": "method",
                "name": "selectNode",
                "text": "Selects a single descendant element of this element using a CSS selector\n(see <a href='#!/api/Ext.dom.Element-query'>query</a>).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The selector query\n",
                    "type": "String",
                    "src": {
                      "name": "0,3876,28",
                      "text": "0,3876,37,19",
                      "type": "0,3876,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "asDom",
                    "optional": true,
                    "text": "`false` to return an Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,3877,30",
                      "text": "0,3877,42,37",
                      "type": "0,3877,20",
                      "value": "0,3877,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The DOM element (or Ext.dom.Element if\n_asDom_ is _false_) which matched the selector.\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,3878,50,39:0,3879,12,48",
                      "type": "0,3878,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3881,0",
                  "text": "0,3874,12,95"
                }
              },
              {
                "$type": "method",
                "name": "sequenceFx",
                "text": "Ensures that all effects queued after sequenceFx is called on this object are run in sequence. This is the\nopposite of <a href='#!/api/Ext.dom.Element-method-syncFx'>syncFx</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Object",
                    "src": {
                      "text": "9,352,25,5",
                      "type": "9,352,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,354,0",
                  "text": "9,350,8,136"
                }
              },
              {
                "$type": "method",
                "name": "set",
                "text": "Sets the passed attributes as attributes of this element (a `style` attribute\ncan be a string, object or function).\n\nExample component (though any Ext.dom.Element would suffice):\n\n    var cmp = Ext.create({\n        xtype: 'component',\n        html: 'test',\n        renderTo: Ext.getBody()\n    });\n\nOnce the component is rendered, you can fetch a reference to its outer\nelement to use <a href='#!/api/Ext.dom.Element-method-set'>set</a>:\n\n    cmp.el.set({\n        foo: 'bar'\n    });\n\nThis sets an attribute on the element of **foo=\"bar\"**:\n\n    <div class=\"x-component x-component-default x-border-box\" id=\"component-1009\" foo=\"bar\">test</div>\n\nTo remove the attribute pass a value of **undefined**:\n\n    cmp.el.set({\n        foo: undefined\n    });\n\n**Note:**\n\n - You cannot remove an attribute by passing <a href='#!/api/undefined'>undefined</a> when the\n`expandos` param is set to **false**.\n - Passing an attribute of `style` results in the request being handed off to\n<a href='#!/api/Ext.dom.Element-method-applyStyles'>method-applyStyles</a>.\n - Passing an attribute of `cls` results in the element's dom's\n[className](http://www.w3schools.com/jsref/prop_html_classname.asp) property\nbeing set directly.  For additional flexibility when setting / removing\nclasses see:\n    - <a href='#!/api/Ext.dom.Element-method-addCls'>method-addCls</a>\n    - <a href='#!/api/Ext.dom.Element-method-removeCls'>method-removeCls</a>\n    - <a href='#!/api/Ext.dom.Element-method-replaceCls'>method-replaceCls</a>\n    - <a href='#!/api/Ext.dom.Element-method-setCls'>method-setCls</a>\n    - <a href='#!/api/Ext.dom.Element-method-toggleCls'>method-toggleCls</a>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "attributes",
                    "text": "The object with the attributes.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,3930,28",
                      "text": "0,3930,39,32",
                      "type": "0,3930,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "useSet",
                    "optional": true,
                    "text": "`false` to override the default `setAttribute`\nto use [expandos](http://help.dottoro.com/ljvovanq.php).\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,3931,30",
                      "text": "0,3931,43,47:0,3932,12,57",
                      "type": "0,3931,20",
                      "value": "0,3931,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3933,38,5",
                      "type": "0,3933,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3935,0",
                  "text": "0,3886,12,1307"
                }
              },
              {
                "$type": "method",
                "name": "setBottom",
                "text": "Sets the element's CSS bottom style.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "bottom",
                    "text": "Number of pixels or CSS string value to set as\nthe bottom CSS property value\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,3968,35",
                      "text": "0,3968,42,47:0,3969,12,30",
                      "type": "0,3968,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,3970,38,5",
                      "type": "0,3970,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,3972,0",
                  "text": "0,3967,12,37"
                }
              },
              {
                "$type": "method",
                "name": "setBox",
                "text": "Sets the element's box.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "text": "The box to fill {x, y, width, height}\n",
                    "type": "Object",
                    "src": {
                      "name": "8,832,24",
                      "text": "8,832,28,38",
                      "type": "8,832,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "8,833,40,5",
                      "type": "8,833,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,835,0",
                  "text": "8,831,8,24"
                }
              },
              {
                "$type": "method",
                "name": "setCls",
                "text": "Sets the specified CSS class on this element's DOM node.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The CSS class to set on this element.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "0,3979,37",
                      "text": "0,3979,47,38",
                      "type": "0,3979,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,3981,0",
                  "text": "0,3978,12,57"
                }
              },
              {
                "$type": "method",
                "name": "setDisplayed",
                "text": "Sets the CSS display property. Uses originalDisplay if the specified value is a\nboolean true.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Boolean value to display the element using its\ndefault display, or a string to set the display directly.\n",
                    "type": "Boolean/String",
                    "src": {
                      "name": "0,4006,36",
                      "text": "0,4006,42,47:0,4007,12,58",
                      "type": "0,4006,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4008,38,5",
                      "type": "0,4008,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4010,0",
                  "text": "0,4004,12,94"
                }
              },
              {
                "$type": "method",
                "name": "setHeight",
                "text": "Set the height of this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4027,35",
                      "text": "0,4027,42,16",
                      "type": "0,4027,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4028,38,5",
                      "type": "0,4028,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4030,0",
                  "text": "0,4026,12,32"
                }
              },
              {
                "$type": "method",
                "name": "setHeight",
                "text": "Set the height of this Element.\n\n    // change the height to 200px and animate with default configuration\n    Ext.fly('elementId').setHeight(200, true);\n\n    // change the height to 150px and animate with a custom configuration\n    Ext.fly('elId').setHeight(150, {\n        duration : 500, // animation will have a duration of .5 seconds\n        // will change the content to \"finished\"\n        callback: function(){ this.setHtml(\"finished\"); }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height. This may be one of:\n\n- A Number specifying the new height in pixels.\n- A String used to set the CSS height style. Animation may **not** be used.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "1,1616,35",
                      "text": "1,1616,42,36:1,1617,12,126",
                      "type": "1,1616,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "a standard Element animation config object or `true` for\nthe default animation (`{duration: 350, easing: 'ease-in'}`)\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "1,1621,37",
                      "text": "1,1621,46,57:1,1622,12,61",
                      "type": "1,1621,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1623,38,5",
                      "type": "1,1623,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1625,0",
                  "text": "1,1604,12,453"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setHorizontal",
                "text": "Removes \"vertical\" state from this element (reverses everything done\nby <a href='#!/api/Ext.dom.Element-method-setVertical'>setVertical</a>).\n",
                "src": {
                  "access": "1,1648,12",
                  "name": "1,1650,0",
                  "text": "1,1646,12,95"
                }
              },
              {
                "$type": "method",
                "name": "setHtml",
                "text": "Sets the `innerHTML` of this element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "html",
                    "text": "The new HTML.\n",
                    "type": "String",
                    "src": {
                      "name": "0,4044,28",
                      "text": "0,4044,33,14",
                      "type": "0,4044,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4045,38,5",
                      "type": "0,4045,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4047,0",
                  "text": "0,4043,12,38"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Please use <a href='#!/api/Ext.dom.Element-setHtml'>setHtml</a> instead.\n",
                "deprecatedVersion": "5.0.0",
                "inheritdoc": "Ext.dom.Element#setHtml",
                "name": "setHTML",
                "src": {
                  "deprecatedMessage": "0,5232,24",
                  "deprecatedVersion": "0,5232,24",
                  "inheritdoc": "0,5231,24",
                  "name": "0,5230,32"
                }
              },
              {
                "$type": "method",
                "name": "setHtml",
                "text": "Updates the innerHTML of this element, optionally searching for and processing scripts.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "html",
                    "text": "The new HTML\n",
                    "type": "String",
                    "src": {
                      "name": "1,1697,28",
                      "text": "1,1697,33,13",
                      "type": "1,1697,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "loadScripts",
                    "optional": true,
                    "text": "Pass `true` to look for and process scripts.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1698,30",
                      "text": "1,1698,43,45",
                      "type": "1,1698,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "callback",
                    "optional": true,
                    "text": "For async script loading you can be notified when the update completes.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,1699,31",
                      "text": "1,1699,41,72",
                      "type": "1,1699,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which to execute the callback.\n\nAlso used as the scope for any *inline* script source if the `loadScripts` parameter is `true`.\nScripts with a `src` attribute cannot be executed in this scope.\n\nDefaults to this Element.\n",
                    "type": "Object",
                    "value": "`this`",
                    "src": {
                      "name": "1,1700,29",
                      "text": "1,1700,43,63:1,1701,12,189",
                      "type": "1,1700,20",
                      "value": "1,1700,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1706,38,5",
                      "type": "1,1706,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1708,0",
                  "text": "1,1696,12,88"
                }
              },
              {
                "$type": "method",
                "name": "setLeft",
                "text": "Sets the element's left position directly using CSS style\n(instead of <a href='#!/api/Ext.dom.Element-method-setX'>setX</a>).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "left",
                    "text": "Number of pixels or CSS string value to\nset as the left CSS property value\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4080,35",
                      "text": "0,4080,40,40:0,4081,12,35",
                      "type": "0,4080,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4082,38,5",
                      "type": "0,4082,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4084,0",
                  "text": "0,4078,12,86"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.  In\nversions prior to 5.1, <a href='#!/api/Ext.dom.Element-cfg-listeners'>listeners</a> had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the <a href='#!/api/Ext.dom.Element-method-on'>on</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1806,28",
                      "text": "7,1806,38,14",
                      "type": "7,1806,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,1808,0",
                  "text": "7,1800,12,402"
                }
              },
              {
                "$type": "method",
                "name": "setLocalX",
                "text": "Sets the local x coordinate of this element using CSS style. When used on an\nabsolute positioned element this method is symmetrical with <a href='#!/api/Ext.dom.Element-method-getLocalX'>getLocalX</a>, but\nmay not be symmetrical when used on a relatively positioned element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The x coordinate. A value of <a href='#!/api/null'>null</a> sets the left style to 'auto'.\n",
                    "type": "Number",
                    "src": {
                      "name": "8,105,24",
                      "text": "8,105,26,67",
                      "type": "8,105,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "8,106,40,5",
                      "type": "8,106,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,108,0",
                  "text": "8,102,8,230"
                }
              },
              {
                "$type": "method",
                "name": "setLocalXY",
                "text": "Sets the local x and y coordinates of this element using CSS style. When used on an\nabsolute positioned element this method is symmetrical with <a href='#!/api/Ext.dom.Element-method-getLocalXY'>getLocalXY</a>, but\nmay not be symmetrical when used on a relatively positioned element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The x coordinate or an array containing [x, y]. A value of\n<a href='#!/api/null'>null</a> sets the left style to 'auto'\n",
                    "type": "Number/Array",
                    "src": {
                      "name": "8,116,30",
                      "text": "8,116,32,59:8,117,8,37",
                      "type": "8,116,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The y coordinate, required if x is not an array. A value of\n<a href='#!/api/null'>null</a> sets the top style to 'auto'\n",
                    "type": "Number",
                    "src": {
                      "name": "8,118,25",
                      "text": "8,118,28,60:8,119,8,36",
                      "type": "8,118,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "8,120,40,5",
                      "type": "8,120,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,122,0",
                  "text": "8,113,8,238"
                }
              },
              {
                "$type": "method",
                "name": "setLocalY",
                "text": "Sets the local y coordinate of this element using CSS style. When used on an\nabsolute positioned element this method is symmetrical with <a href='#!/api/Ext.dom.Element-method-getLocalY'>getLocalY</a>, but\nmay not be symmetrical when used on a relatively positioned element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The y coordinate. A value of <a href='#!/api/null'>null</a> sets the top style to 'auto'.\n",
                    "type": "Number",
                    "src": {
                      "name": "8,130,24",
                      "text": "8,130,26,66",
                      "type": "8,130,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.util.Positionable",
                    "src": {
                      "text": "8,131,40,5",
                      "type": "8,131,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,133,0",
                  "text": "8,127,8,230"
                }
              },
              {
                "$type": "method",
                "name": "setMaxHeight",
                "text": "Set the maximum height of this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new maximum height.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4172,35",
                      "text": "0,4172,42,24",
                      "type": "0,4172,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4173,38,5",
                      "type": "0,4173,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4175,0",
                  "text": "0,4171,12,40"
                }
              },
              {
                "$type": "method",
                "name": "setMaxWidth",
                "text": "Set the maximum width of this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new maximum width.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4182,35",
                      "text": "0,4182,41,23",
                      "type": "0,4182,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4183,38,5",
                      "type": "0,4183,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4185,0",
                  "text": "0,4181,12,39"
                }
              },
              {
                "$type": "method",
                "name": "setMinHeight",
                "text": "Set the minimum height of this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new minimum height.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4192,35",
                      "text": "0,4192,42,24",
                      "type": "0,4192,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4193,38,5",
                      "type": "0,4193,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4195,0",
                  "text": "0,4191,12,40"
                }
              },
              {
                "$type": "method",
                "name": "setMinWidth",
                "text": "Set the minimum width of this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new minimum width.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4202,35",
                      "text": "0,4202,41,23",
                      "type": "0,4202,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4203,38,5",
                      "type": "0,4203,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4205,0",
                  "text": "0,4201,12,39"
                }
              },
              {
                "$type": "method",
                "name": "setOpacity",
                "text": "Set the opacity of the element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "opacity",
                    "text": "The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc\n",
                    "type": "Number",
                    "src": {
                      "name": "0,4212,28",
                      "text": "0,4212,36,76",
                      "type": "0,4212,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4213,38,5",
                      "type": "0,4213,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4215,0",
                  "text": "0,4211,12,31"
                }
              },
              {
                "$type": "method",
                "name": "setOpacity",
                "text": "Set the opacity of the element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "opacity",
                    "text": "The new opacity. 0 = transparent, .5 = 50% visible, 1 = fully visible, etc\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1771,28",
                      "text": "1,1771,36,75",
                      "type": "1,1771,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "a standard Element animation config object or `true` for\nthe default animation (`{duration: 350, easing: 'ease-in'}`)\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "1,1772,37",
                      "text": "1,1772,46,57:1,1773,12,61",
                      "type": "1,1772,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1774,38,5",
                      "type": "1,1774,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1776,0",
                  "text": "1,1770,12,31"
                }
              },
              {
                "$type": "method",
                "name": "setPositioning",
                "text": "Set positioning with an object returned by #getPositioning.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "posCfg",
                    "type": "Object",
                    "src": {
                      "name": "1,1805,28",
                      "type": "1,1805,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1806,38,5",
                      "type": "1,1806,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1808,0",
                  "text": "1,1804,12,60"
                }
              },
              {
                "$type": "method",
                "name": "setRight",
                "text": "Sets the element's CSS right style.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "right",
                    "text": "Number of pixels or CSS string value to\nset as the right CSS property value\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4243,35",
                      "text": "0,4243,41,40:0,4244,12,36",
                      "type": "0,4243,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4245,38,5",
                      "type": "0,4245,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4247,0",
                  "text": "0,4242,12,36"
                }
              },
              {
                "$type": "method",
                "name": "setScrollLeft",
                "text": "Sets the left scroll position\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "left",
                    "text": "The left scroll position\n",
                    "type": "Number",
                    "src": {
                      "name": "0,4254,28",
                      "text": "0,4254,33,25",
                      "type": "0,4254,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4255,38,5",
                      "type": "0,4255,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4257,0",
                  "text": "0,4253,12,30"
                }
              },
              {
                "$type": "method",
                "name": "setScrollTop",
                "text": "Sets the top scroll position\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "top",
                    "text": "The top scroll position\n",
                    "type": "Number",
                    "src": {
                      "name": "0,4264,28",
                      "text": "0,4264,32,24",
                      "type": "0,4264,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4265,38,5",
                      "type": "0,4265,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4267,0",
                  "text": "0,4263,12,29"
                }
              },
              {
                "$type": "method",
                "name": "setSize",
                "text": "Set the size of this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width. This may be one of:\n\n- A Number specifying the new width in pixels.\n- A String used to set the CSS width style. Animation may **not** be used.\n- A size object in the format `{width: widthValue, height: heightValue}`.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4275,35",
                      "text": "0,4275,41,35:0,4276,12,198",
                      "type": "0,4275,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height. This may be one of:\n\n- A Number specifying the new height in pixels.\n- A String used to set the CSS height style. Animation may **not** be used.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4281,35",
                      "text": "0,4281,42,36:0,4282,12,125",
                      "type": "0,4281,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4285,38,5",
                      "type": "0,4285,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4287,0",
                  "text": "0,4273,12,31"
                }
              },
              {
                "$type": "method",
                "name": "setSize",
                "text": "Set the size of this Element. If animation is true, both width and height will be animated concurrently.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width. This may be one of:\n\n- A Number specifying the new width in pixels.\n- A String used to set the CSS width style. Animation may **not** be used.\n- A size object in the format `{width: widthValue, height: heightValue}`.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "1,1853,35",
                      "text": "1,1853,41,35:1,1854,12,198",
                      "type": "1,1853,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "height",
                    "text": "The new height. This may be one of:\n\n- A Number specifying the new height in  pixels.\n- A String used to set the CSS height style. Animation may **not** be used.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "1,1859,35",
                      "text": "1,1859,42,36:1,1860,12,127",
                      "type": "1,1859,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "a standard Element animation config object or `true` for\nthe default animation (`{duration: 350, easing: 'ease-in'}`)\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "1,1864,37",
                      "text": "1,1864,46,57:1,1865,12,62",
                      "type": "1,1864,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1867,38,5",
                      "type": "1,1867,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1869,0",
                  "text": "1,1852,12,105"
                }
              },
              {
                "$type": "method",
                "name": "setStyle",
                "text": "Wrapper for setting style properties, also takes single object parameter of\nmultiple styles.\n\nStyles should be a valid DOM element style property.\n[Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)\n(_along with the supported CSS version for each_)\n\n    // <div id=\"my-el\">Phineas Flynn</div>\n\n    var el = Ext.get('my-el');\n\n    // two-param syntax\n    el.setStyle('color', 'white');\n\n    // single-param syntax\n    el.setStyle({\n        fontWeight: 'bold',\n        backgroundColor: 'gray',\n        padding: '10px'\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The style property to be set, or an object of\nmultiple styles.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "0,4353,35",
                      "text": "0,4353,44,46:0,4354,12,17",
                      "type": "0,4353,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to apply to the given property, or null if\nan object was passed.\n",
                    "type": "String",
                    "src": {
                      "name": "0,4355,29",
                      "text": "0,4355,36,53:0,4356,12,22",
                      "type": "0,4355,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4357,38,5",
                      "type": "0,4357,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4359,0",
                  "text": "0,4332,12,552"
                }
              },
              {
                "$type": "method",
                "name": "setTop",
                "text": "Sets the element's top position directly using CSS style\n(instead of <a href='#!/api/Ext.dom.Element-method-setY'>setY</a>).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "top",
                    "text": "Number of pixels or CSS string value to\nset as the top CSS property value\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4413,35",
                      "text": "0,4413,39,40:0,4414,12,34",
                      "type": "0,4413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4415,38,5",
                      "type": "0,4415,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4417,0",
                  "text": "0,4411,12,85"
                }
              },
              {
                "$type": "method",
                "name": "setTopLeft",
                "removedVersion": "5.0.0",
                "text": "Sets the element's top and left positions directly using CSS style.\n",
                "src": {
                  "name": "0,5237,32",
                  "removedVersion": "0,5239,24",
                  "text": "0,5238,24,68"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setVertical",
                "text": "Changes this Element's state to \"vertical\" (rotated 90 or 270 degrees).\nThis involves inverting the getters and setters for height and width,\nand applying hooks for rotating getters and setters for border/margin/padding.\n(getWidth becomes getHeight and vice versa), setStyle and getStyle will\nalso return the inverse when height or width are being operated on.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "angle",
                    "text": "the angle of rotation - either 90 or 270\n",
                    "type": "Number",
                    "src": {
                      "name": "1,1819,28",
                      "text": "1,1819,34,41",
                      "type": "1,1819,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "cls",
                    "text": "an optional css class that contains the required\nstyles for switching the element to vertical orientation. Omit this if\nthe element already contains vertical styling.  If cls is provided,\nit will be removed from the element when <a href='#!/api/Ext.dom.Element-method-setHorizontal'>setHorizontal</a> is called.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1820,28",
                      "text": "1,1820,32,49:1,1821,12,214",
                      "type": "1,1820,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,1824,12",
                  "name": "1,1826,0",
                  "text": "1,1813,12,362"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setVisibility",
                "items": [
                  {
                    "$type": "param",
                    "name": "isVisible",
                    "src": {
                      "name": "0,4453,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,4451,12",
                  "name": "0,4453,0"
                }
              },
              {
                "$type": "method",
                "name": "setVisibilityMode",
                "text": "Use this to change the visibility mode between <a href='#!/api/Ext.dom.Element-static-property-VISIBILITY'>VISIBILITY</a>,\n<a href='#!/api/Ext.dom.Element-static-property-DISPLAY'>DISPLAY</a>, <a href='#!/api/Ext.dom.Element-static-property-OFFSETS'>OFFSETS</a>, or <a href='#!/api/Ext.dom.Element-static-property-CLIP'>CLIP</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "mode",
                    "text": "The method by which the element will be <a href='#!/api/Ext.dom.Element-method-hide'>hide</a> (you can\nalso use the <a href='#!/api/Ext.dom.Element-method-setVisible'>setVisible</a> or <a href='#!/api/Ext.dom.Element-method-toggle'>toggle</a> method to toggle element\nvisibility).\n",
                    "type": "Ext.dom.Element.VISIBILITY/Ext.dom.Element.DISPLAY/Ext.dom.Element.OFFSETS/Ext.dom.Element.CLIP",
                    "src": {
                      "name": "0,4468,117",
                      "text": "0,4469,12,161",
                      "type": "0,4468,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4473,38,5",
                      "type": "0,4473,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4475,0",
                  "text": "0,4465,12,123"
                }
              },
              {
                "$type": "method",
                "name": "setVisible",
                "text": "Sets the visibility of the element based on the current visibility mode. Use\n<a href='#!/api/Ext.dom.Element-method-setVisibilityMode'>setVisibilityMode</a> to switch between the following visibility modes:\n\n- <a href='#!/api/Ext.dom.Element-static-property-DISPLAY'>DISPLAY</a> (the default)\n- <a href='#!/api/Ext.dom.Element-static-property-VISIBILITY'>VISIBILITY</a>\n- <a href='#!/api/Ext.dom.Element-static-property-OFFSETS'>OFFSETS</a>\n- <a href='#!/api/Ext.dom.Element-static-property-CLIP'>CLIP</a>\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "visible",
                    "text": "Whether the element is visible.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,4496,29",
                      "text": "0,4496,37,32",
                      "type": "0,4496,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4497,38,5",
                      "type": "0,4497,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4499,0",
                  "text": "0,4488,12,246"
                }
              },
              {
                "$type": "method",
                "name": "setVisible",
                "text": "Sets the visibility of the element (see details). If the visibilityMode is set\nto Element.DISPLAY, it will use the display property to hide the element,\notherwise it uses visibility. The default is to hide and show using the\nvisibility property.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "visible",
                    "text": "Whether the element is visible\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1907,29",
                      "text": "1,1907,37,31",
                      "type": "1,1907,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "True for the default animation,\nor a standard Element animation config object.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "1,1908,37",
                      "text": "1,1908,46,32:1,1909,12,48",
                      "type": "1,1908,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,1911,38,5",
                      "type": "1,1911,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1913,0",
                  "text": "1,1902,12,247"
                }
              },
              {
                "$type": "method",
                "name": "setWidth",
                "text": "Set the width of this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,4535,35",
                      "text": "0,4535,41,15",
                      "type": "0,4535,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4536,38,5",
                      "type": "0,4536,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4538,0",
                  "text": "0,4534,12,31"
                }
              },
              {
                "$type": "method",
                "name": "setWidth",
                "text": "Set the width of this Element.\n\n    // change the width to 200px and animate with default configuration\n    Ext.fly('elementId').setWidth(200, true);\n\n    // change the width to 150px and animate with a custom configuration\n    Ext.fly('elId').setWidth(150, {\n        duration : 500, // animation will have a duration of .5 seconds\n        // will change the content to \"finished\"\n        callback: function(){ this.setHtml(\"finished\"); }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "width",
                    "text": "The new width. This may be one of:\n\n- A Number specifying the new width in pixels.\n- A String used to set the CSS width style. Animation may **not** be used.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "1,2000,35",
                      "text": "1,2000,41,35:1,2001,12,124",
                      "type": "1,2000,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "a standard Element animation config object or `true` for\nthe default animation (`{duration: 350, easing: 'ease-in'}`)\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "1,2005,37",
                      "text": "1,2005,46,57:1,2006,12,61",
                      "type": "1,2005,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,2007,38,5",
                      "type": "1,2007,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,2009,0",
                  "text": "1,1988,12,448"
                }
              },
              {
                "$type": "method",
                "name": "setX",
                "text": "Sets this Element's page-level x coordinate\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,4552,28",
                      "type": "0,4552,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4553,38,5",
                      "type": "0,4553,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4555,0",
                  "text": "0,4551,12,44"
                }
              },
              {
                "$type": "method",
                "name": "setXY",
                "text": "Sets this Element's page-level x and y coordinates\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "xy",
                    "type": "Number[]",
                    "src": {
                      "name": "0,4561,30",
                      "type": "0,4561,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4562,38,5",
                      "type": "0,4562,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4564,0",
                  "text": "0,4560,12,51"
                }
              },
              {
                "$type": "method",
                "name": "setY",
                "text": "Sets this Element's page-level y coordinate\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,4590,28",
                      "type": "0,4590,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4591,38,5",
                      "type": "0,4591,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4593,0",
                  "text": "0,4589,12,44"
                }
              },
              {
                "$type": "method",
                "name": "setZIndex",
                "text": "Sets the z-index of this Element and synchronizes the z-index of shadow and/or\nshim if present.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "zindex",
                    "text": "The new z-index to set\n",
                    "type": "Number",
                    "src": {
                      "name": "0,4601,28",
                      "text": "0,4601,35,23",
                      "type": "0,4601,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4602,38,5",
                      "type": "0,4602,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4604,0",
                  "text": "0,4598,12,97"
                }
              },
              {
                "$type": "method",
                "name": "show",
                "text": "Show this element - Uses display mode to determine whether to use \"display\",\n\"visibility\", \"offsets\", or \"clip\". See <a href='#!/api/Ext.dom.Element-method-setVisible'>setVisible</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4622,38,5",
                      "type": "0,4622,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4624,0",
                  "text": "0,4619,12,139"
                }
              },
              {
                "$type": "method",
                "name": "show",
                "text": "Show this element - Uses display mode to determine whether to use \"display\",\n\"visibility\", \"offsets\", or \"clip\". See <a href='#!/api/Ext.dom.Element-method-setVisible'>setVisible</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "true for the default animation or a standard\nElement animation config object.\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "1,2053,37",
                      "text": "1,2053,46,45:1,2054,12,34",
                      "type": "1,2053,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,2056,38,5",
                      "type": "1,2056,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,2058,0",
                  "text": "1,2050,12,139"
                }
              },
              {
                "$type": "method",
                "name": "slideIn",
                "text": "Slides the element into view. An anchor point can be optionally passed to set the point of origin for the slide\neffect. This function automatically handles wrapping the element with a fixed-size container if needed. See the\n<a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> class overview for valid anchor point options. Usage:\n\n    // default: slide the element in from the top\n    el.slideIn();\n\n    // custom: slide the element in from the right with a 2-second duration\n    el.slideIn('r', { duration: 2000 });\n\n    // common config options shown with default values\n    el.slideIn('t', {\n        easing: 'easeOut',\n        duration: 500\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "text": "(optional) One of the valid <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> anchor positions (defaults to top: 't')\n",
                    "type": "String",
                    "src": {
                      "name": "1,2085,28",
                      "text": "1,2085,35,88",
                      "type": "1,2085,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) Object literal with any of the <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> config options\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "preserveScroll",
                        "text": "Set to true if preservation of any descendant elements'\n`scrollTop` values is required. By default the DOM wrapping operation performed by <a href='#!/api/Ext.dom.Element-method-slideIn'>slideIn</a> and\n<a href='#!/api/Ext.dom.Element-method-slideOut'>slideOut</a> causes the browser to lose all scroll positions.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,2087,37",
                          "text": "1,2087,52,56:1,2088,12,157",
                          "type": "1,2087,20"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,2086,28",
                      "text": "1,2086,36,77",
                      "type": "1,2086,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,2090,38,12",
                      "type": "1,2090,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,2092,0",
                  "text": "1,2069,12,621"
                }
              },
              {
                "$type": "method",
                "name": "slideOut",
                "text": "Slides the element out of view. An anchor point can be optionally passed to set the end point for the slide\neffect. When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will\nstill take up space in the document. The element must be removed from the DOM using the 'remove' config option if\ndesired. This function automatically handles wrapping the element with a fixed-size container if needed. See the\n<a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> class overview for valid anchor point options. Usage:\n\n    // default: slide the element out to the top\n    el.slideOut();\n\n    // custom: slide the element out to the right with a 2-second duration\n    el.slideOut('r', { duration: 2000 });\n\n    // common config options shown with default values\n    el.slideOut('t', {\n        easing: 'easeOut',\n        duration: 500,\n        remove: false,\n        useDisplay: false\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "anchor",
                    "text": "(optional) One of the valid <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> anchor positions (defaults to top: 't')\n",
                    "type": "String",
                    "src": {
                      "name": "1,2358,28",
                      "text": "1,2358,35,88",
                      "type": "1,2358,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) Object literal with any of the <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> config options\n",
                    "type": "Object",
                    "src": {
                      "name": "1,2359,28",
                      "text": "1,2359,36,77",
                      "type": "1,2359,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,2360,38,12",
                      "type": "1,2360,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,2362,0",
                  "text": "1,2338,12,896"
                }
              },
              {
                "$type": "method",
                "name": "stopAnimation",
                "text": "Stops any running effects and clears this object's internal effects queue if it contains any additional effects\nthat haven't started yet.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "9,330,34,12",
                      "type": "9,330,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,332,0",
                  "text": "9,328,8,138"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Replaced by <a href='#!/api/Ext.dom.Element-stopAnimation'>stopAnimation</a>\n",
                "deprecatedVersion": "4.0",
                "name": "stopFx",
                "text": "Stops any running effects and clears this object's internal effects queue if it contains any additional effects\nthat haven't started yet.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "9,322,34,12",
                      "type": "9,322,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "9,321,8",
                  "deprecatedVersion": "9,321,8",
                  "name": "9,325,0",
                  "text": "9,319,8,138"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n<a href='#!/api/Ext.dom.Element-method-resumeEvent'>resumeEvent</a> will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "7,1381,32",
                      "text": "7,1381,42,33",
                      "type": "7,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "7,1383,0",
                  "text": "7,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see <a href='#!/api/Ext.dom.Element-method-resumeEvents'>resumeEvents</a>)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the <a href='#!/api/Ext.dom.Element-method-resumeEvents'>resumeEvents</a> call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "7,1363,28",
                      "text": "7,1363,43,48:7,1364,11,81",
                      "type": "7,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "7,1366,0",
                  "text": "7,1361,11,64"
                }
              },
              {
                "$type": "method",
                "name": "swallowEvent",
                "text": "Stops the specified event(s) from bubbling and optionally prevents the default action\n\n    var store = Ext.create('Ext.data.Store', {\n        fields: ['name', 'email'],\n        data: [{\n            'name': 'Finn',\n            \"email\": \"finn@adventuretime.com\"\n        }]\n    });\n\n    Ext.create('Ext.grid.Panel', {\n        title: 'Land of Ooo',\n        store: store,\n        columns: [{\n            text: 'Name',\n            dataIndex: 'name'\n        }, {\n            text: 'Email <img style=\"vertical-align:middle;\" src=\"{some-help-image-src}\" />',\n            dataIndex: 'email',\n            flex: 1,\n            listeners: {\n                render: function(col) {\n                    // Swallow the click event when the click occurs on the\n                    // help icon - preventing the sorting of data by that\n                    // column and instead performing an action specific to\n                    // the help icon\n                    var img = col.getEl().down('img');\n                    img.swallowEvent(['click', 'mousedown'], true);\n                    col.on('click', function() {\n                        // logic to show a help dialog\n                        console.log('image click handler');\n                    }, col);\n                }\n            }\n        }],\n        height: 200,\n        width: 400,\n        renderTo: document.body\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "an event / array of events to stop from bubbling\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "1,2407,37",
                      "text": "1,2407,47,49",
                      "type": "1,2407,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "preventDefault",
                    "optional": true,
                    "text": "true to prevent the default action too\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,2408,30",
                      "text": "1,2408,46,39",
                      "type": "1,2408,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,2409,38,5",
                      "type": "1,2409,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,2411,0",
                  "text": "1,2367,12,1372"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "swapCls",
                "items": [
                  {
                    "$type": "param",
                    "name": "firstClass",
                    "type": "String",
                    "src": {
                      "name": "0,4631,28",
                      "type": "0,4631,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "secondClass",
                    "type": "String",
                    "src": {
                      "name": "0,4632,28",
                      "type": "0,4632,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "flag",
                    "type": "Boolean",
                    "src": {
                      "name": "0,4633,29",
                      "type": "0,4633,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "type": "String",
                    "src": {
                      "name": "0,4634,28",
                      "type": "0,4634,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Mixed",
                    "src": {
                      "type": "0,4635,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,4630,12",
                  "name": "0,4637,0"
                }
              },
              {
                "$type": "method",
                "name": "switchOff",
                "text": "Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).\nWhen the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still\ntake up space in the document. The element must be removed from the DOM using the 'remove' config option if\ndesired. Usage:\n\n    // default\n    el.switchOff();\n\n    // all config options shown with default values\n    el.switchOff({\n        easing: 'easeIn',\n        duration: .3,\n        remove: false,\n        useDisplay: false\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) Object literal with any of the <a href='#!/api/Ext.fx.Anim'>Ext.fx.Anim</a> config options\n",
                    "type": "Object",
                    "src": {
                      "name": "1,2451,28",
                      "text": "1,2451,36,77",
                      "type": "1,2451,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,2452,38,12",
                      "type": "1,2452,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,2454,0",
                  "text": "1,2435,12,563"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "syncContent",
                "text": "Currently used for updating grid cells without modifying DOM structure\n\nSynchronizes content of this Element with the content of the passed element.\n\nStyle and CSS class are copied from source into this Element, and contents are synced\nrecursively. If a child node is a text node, the textual data is copied.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "source",
                    "src": {
                      "name": "1,2533,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,2525,12",
                  "name": "1,2533,0",
                  "text": "1,2526,12,309"
                }
              },
              {
                "$type": "method",
                "name": "syncFx",
                "text": "Ensures that all effects queued after syncFx is called on this object are run concurrently. This is the opposite\nof <a href='#!/api/Ext.dom.Element-method-sequenceFx'>sequenceFx</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Object",
                    "src": {
                      "text": "9,340,25,5",
                      "type": "9,340,17"
                    }
                  }
                ],
                "src": {
                  "name": "9,342,0",
                  "text": "9,338,8,137"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "synchronize",
                "src": {
                  "access": "0,4658,12",
                  "name": "0,4660,0"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "syncUnderlays",
                "src": {
                  "access": "0,4688,12",
                  "name": "0,4690,0"
                }
              },
              {
                "$type": "method",
                "name": "toggle",
                "text": "Toggles the element's visibility, depending on visibility mode.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4731,38,5",
                      "type": "0,4731,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4733,0",
                  "text": "0,4730,12,64"
                }
              },
              {
                "$type": "method",
                "name": "toggle",
                "text": "Toggles the element's visibility, depending on visibility mode.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "animate",
                    "optional": true,
                    "text": "True for the default animation, or a standard Element animation config object\n",
                    "type": "Boolean/Object",
                    "src": {
                      "name": "1,2607,37",
                      "text": "1,2607,46,78",
                      "type": "1,2607,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,2608,38,5",
                      "type": "1,2608,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,2610,0",
                  "text": "1,2606,12,64"
                }
              },
              {
                "$type": "method",
                "name": "toggleCls",
                "text": "Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "className",
                    "text": "The CSS class to toggle.\n",
                    "type": "String",
                    "src": {
                      "name": "0,4716,28",
                      "text": "0,4716,38,25",
                      "type": "0,4716,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "state",
                    "optional": true,
                    "text": "If specified as `true`, causes the class to be added. If specified as `false`, causes\nthe class to be removed.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,4717,30",
                      "text": "0,4717,37,86:0,4718,12,25",
                      "type": "0,4717,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,4719,38,5",
                      "type": "0,4719,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4721,0",
                  "text": "0,4715,12,102"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.dom.Element-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.dom.Element-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.dom.Element-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.dom.Element-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "12,235,21,32",
                      "type": "12,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "12,226,12",
                  "text": "12,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "12,297,21,32",
                      "type": "12,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "12,239,12",
                  "text": "12,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "translatePoints",
                "text": "Translates the passed page coordinates into left/top css values for the element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The page x or an array containing [x, y]\n",
                    "type": "Number/Array",
                    "src": {
                      "name": "8,889,30",
                      "text": "8,889,32,41",
                      "type": "8,889,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The page y, required if x is not an array\n",
                    "type": "Number",
                    "src": {
                      "name": "8,890,25",
                      "text": "8,890,28,42",
                      "type": "8,890,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with left and top properties. e.g.\n{left: (value), top: (value)}\n",
                    "type": "Object",
                    "src": {
                      "text": "8,891,25,45:8,892,8,30",
                      "type": "8,891,17"
                    }
                  }
                ],
                "src": {
                  "name": "8,894,0",
                  "text": "8,888,8,80"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "translateXY",
                "text": "Translates the passed page coordinates into x and y css values for the element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The page x or an array containing [x, y]\n",
                    "type": "Number/Array",
                    "src": {
                      "name": "8,905,30",
                      "text": "8,905,32,41",
                      "type": "8,905,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "optional": true,
                    "text": "The page y, required if x is not an array\n",
                    "type": "Number",
                    "src": {
                      "name": "8,906,25",
                      "text": "8,906,28,42",
                      "type": "8,906,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with x and y properties. e.g.\n{x: (value), y: (value)}\n",
                    "type": "Object",
                    "src": {
                      "text": "8,907,25,40:8,908,8,25",
                      "type": "8,907,17"
                    }
                  }
                ],
                "src": {
                  "access": "8,909,8",
                  "name": "8,911,0",
                  "text": "8,904,8,79"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for <a href='#!/api/Ext.dom.Element-method-removeListener'>removeListener</a>.\n",
                "src": {
                  "inheritdoc": "7,1783,12",
                  "name": "7,1785,0",
                  "text": "7,1782,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.dom.Element-method-removeListener'>removeListener</a> with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "7,1218,44",
                      "text": "7,1218,54,55",
                      "type": "7,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "7,1219,37",
                      "text": "7,1219,40,23",
                      "type": "7,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1220,29",
                      "text": "7,1220,36,41",
                      "type": "7,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1221,29",
                      "text": "7,1221,38,22",
                      "type": "7,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,1223,0",
                  "text": "7,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.dom.Element-method-removeListener'>removeListener</a> with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "7,1204,44",
                      "text": "7,1204,54,55",
                      "type": "7,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "7,1205,37",
                      "text": "7,1205,40,23",
                      "type": "7,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1206,29",
                      "text": "7,1206,36,41",
                      "type": "7,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "7,1207,29",
                      "text": "7,1207,38,22",
                      "type": "7,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "7,1209,0",
                  "text": "7,1200,12,98"
                }
              },
              {
                "$type": "method",
                "name": "unclip",
                "text": "Return clipping (overflow) to original clipping before <a href='#!/api/Ext.dom.Element-method-clip'>clip</a> was called\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,2646,38,5",
                      "type": "1,2646,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,2648,0",
                  "text": "1,2645,12,80"
                }
              },
              {
                "$type": "method",
                "name": "unmask",
                "text": "Hides a previously applied mask.\n",
                "src": {
                  "name": "1,2619,0",
                  "text": "1,2617,12,33"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unmaskIframes",
                "text": "Unmask iframes when shim is true. See <a href='#!/api/Ext.util.Floating-cfg-shim'>Ext.util.Floating#shim</a>.\n",
                "src": {
                  "access": "0,4748,12",
                  "name": "0,4750,0",
                  "text": "0,4747,12,70"
                }
              },
              {
                "$type": "method",
                "name": "unselectable",
                "text": "Disables text selection for this element (normalized across browsers)\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "this\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "1,2684,38,5",
                      "type": "1,2684,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,2686,0",
                  "text": "1,2683,12,70"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unwrap",
                "src": {
                  "access": "0,4761,12",
                  "name": "0,4763,0"
                }
              },
              {
                "$type": "method",
                "name": "up",
                "text": ".\n Walks up the dom looking for a parent node that matches the passed simple selector (e.g. 'div.some-class' or 'span:first-child').\n This is a shortcut for findParentNode() that always returns an Ext.dom.Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The simple selector to test. See <a href='#!/api/Ext.dom.Query'>Ext.dom.Query</a> for information about simple selectors.\n",
                    "type": "String",
                    "src": {
                      "name": "0,4829,28",
                      "text": "0,4829,37,95",
                      "type": "0,4829,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "limit",
                    "optional": true,
                    "text": " The max depth to search as a number or an element that causes the upward\n traversal to stop and is **not** considered for inclusion as the result.\n (defaults to 50 || document.documentElement)\n",
                    "type": "Number/String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,4830,64",
                      "text": "0,4831,11,194",
                      "type": "0,4830,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "True to return the DOM node instead of Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,4834,30",
                      "text": "0,4834,47,55",
                      "type": "0,4834,20",
                      "value": "0,4834,40"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching DOM node (or HTMLElement if\n _returnDom_ is _true_).  Or null if no match was found.\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,4835,50,41:0,4836,11,57",
                      "type": "0,4835,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4838,0",
                  "text": "0,4826,1,2:0,4827,11,212"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Please use <a href='#!/api/Ext.dom.Element-setHtml'>setHtml</a> instead.\n",
                "deprecatedVersion": "5.0.0",
                "inheritdoc": "Ext.dom.Element#setHtml",
                "name": "update",
                "items": [
                  {
                    "$type": "param",
                    "name": "html",
                    "src": {
                      "name": "0,4846,0"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "0,4844,12",
                  "deprecatedVersion": "0,4844,12",
                  "inheritdoc": "0,4843,12",
                  "name": "0,4846,0"
                }
              },
              {
                "$type": "method",
                "name": "updateText",
                "text": "Updates the *text* value of this element.\nReplaces the content of this element with a *single text node* containing the passed text.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "text",
                    "text": "The text to display in this Element.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1675,28",
                      "text": "1,1675,33,37",
                      "type": "1,1675,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1677,0",
                  "text": "1,1673,12,133"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.dom.Element-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.dom.Element-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.dom.Element-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.dom.Element-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.dom.Element-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.dom.Element-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.dom.Element-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.dom.Element-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.dom.Element-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.dom.Element-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "12,340,21,50",
                      "type": "12,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "12,301,12",
                  "text": "12,302,4,1821"
                }
              },
              {
                "$type": "method",
                "name": "wrap",
                "text": "Creates and wraps this element with another element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "DomHelper element config object for the wrapper element or null for an empty div\n",
                    "type": "Object",
                    "src": {
                      "name": "0,4852,29",
                      "text": "0,4852,37,81",
                      "type": "0,4852,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "optional": true,
                    "text": "True to return the raw DOM element instead of Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,4853,30",
                      "text": "0,4853,47,62",
                      "type": "0,4853,20",
                      "value": "0,4853,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "A CSS selector to select a descendant node within the created element to use as the wrapping element.\n",
                    "type": "String",
                    "src": {
                      "name": "0,4854,29",
                      "text": "0,4854,39,102",
                      "type": "0,4854,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The newly created wrapper element\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,4855,50,34",
                      "type": "0,4855,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,4857,0",
                  "text": "0,4851,12,52"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "7,389,12",
                  "name": "7,392,0",
                  "text": "7,390,12,126"
                }
              },
              {
                "$type": "property",
                "name": "component",
                "text": "A reference to the `Component` that owns this element. This is <a href='#!/api/null'>null</a> if there\nis no direct owner.\n",
                "type": "Ext.Component",
                "src": {
                  "name": "0,284,38",
                  "text": "0,285,12,99",
                  "type": "0,284,23"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.dom.Element-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "12,346,14",
                  "text": "12,347,3,1996"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "convertPositionSpec",
                "text": "By default this method does nothing but return the position spec passed to it. In\nrtl mode it is overridden to convert \"l\" to \"r\" and vice versa when required.\n",
                "src": {
                  "access": "8,312,8",
                  "name": "8,314,0",
                  "text": "8,310,8,160"
                }
              },
              {
                "$type": "property",
                "name": "dom",
                "text": "The DOM element\n",
                "type": "HTMLElement",
                "src": {
                  "name": "0,594,26",
                  "text": "0,593,16,16",
                  "type": "0,595,22"
                }
              },
              {
                "$type": "property",
                "name": "empty",
                "text": "Empties this element. Removes all child nodes.\n",
                "src": {
                  "name": "1,552,0",
                  "text": "1,550,12,47"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when <a href='#!/api/Ext.dom.Element-method-suspendEvents'>suspendEvents</a> is called, decremented when <a href='#!/api/Ext.dom.Element-method-resumeEvents'>resumeEvents</a> is called.\n",
                "src": {
                  "access": "7,284,11",
                  "name": "7,287,0",
                  "text": "7,285,11,131"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via <a href='#!/api/Ext.dom.Element-observe'>observe</a>) or\non the <a href='#!/api/Ext.app.EventBus'>Ext.app.EventBus</a>. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "7,290,30",
                  "readonly": "7,291,11",
                  "text": "7,292,11,790",
                  "type": "7,290,22"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "text": "The DOM element ID\n",
                "type": "String",
                "src": {
                  "name": "0,4067,26",
                  "text": "0,4066,16,19",
                  "type": "0,4068,22"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "7,278,31",
                  "text": "7,279,11,95",
                  "type": "7,278,22"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "12,46,14",
                  "text": "12,47,4,65"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "_onWindowFocusChange",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,1191,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1187,16",
                  "inheritable": "0,1189,16",
                  "name": "0,1191,0",
                  "static": "0,1188,16"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "_onWindowResize",
                "static": true,
                "src": {
                  "access": "0,1203,16",
                  "inheritable": "0,1205,16",
                  "name": "0,1207,0",
                  "static": "0,1204,16"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "addUnits",
                "static": true,
                "text": "Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "size",
                    "text": "The size to set.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,726,32",
                      "text": "0,726,37,17",
                      "type": "0,726,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "units",
                    "text": "The units to append to a numeric size value.\n",
                    "type": "String",
                    "src": {
                      "name": "0,727,32",
                      "text": "0,727,38,45",
                      "type": "0,727,24"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,728,25"
                    }
                  }
                ],
                "src": {
                  "access": "0,729,16",
                  "inheritable": "0,731,16",
                  "name": "0,733,0",
                  "static": "0,730,16",
                  "text": "0,725,16,100"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "create",
                "static": true,
                "text": "Create method to add support for a DomHelper config. Creates\nand appends elements/children using document.createElement/appendChild.\nThis method is used by Sencha Touch for a significant performance gain\nin webkit browsers as opposed to using DomQuery which generates HTML\nmarkup and sets it as innerHTML.\n\nHowever, the createElement/appendChild\nmethod of creating elements is significantly slower in all versions of IE\nat the time of this writing (6 - 11), so Ext JS should not use this method,\nbut should instead use DomHelper methods, or Element methods that use\nDomHelper under the hood (e.g. createChild).\nsee https:*fiddle.sencha.com/#fiddle/tj\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "attributes",
                    "src": {
                      "name": "0,783,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "domNode",
                    "src": {
                      "name": "0,783,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,766,16",
                  "inheritable": "0,781,16",
                  "name": "0,783,0",
                  "static": "0,780,16",
                  "text": "0,767,16,652"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "inheritable": true,
                "name": "detach",
                "static": true,
                "src": {
                  "access": "0,884,16",
                  "inheritable": "0,883,16",
                  "name": "0,886,0",
                  "static": "0,882,16"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "inheritdoc": "Ext#fly",
                "name": "fly",
                "static": true,
                "items": [
                  {
                    "$type": "param",
                    "name": "dom",
                    "src": {
                      "name": "0,901,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "named",
                    "src": {
                      "name": "0,901,0"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,898,16",
                  "inheritdoc": "0,897,16",
                  "name": "0,901,0",
                  "static": "0,899,16"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "fromPoint",
                "static": true,
                "text": "Returns the top Element that is located at the passed coordinates\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "The x coordinate\n",
                    "type": "Number",
                    "src": {
                      "name": "0,909,32",
                      "text": "0,909,34,17",
                      "type": "0,909,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "The y coordinate\n",
                    "type": "Number",
                    "src": {
                      "name": "0,910,32",
                      "text": "0,910,34,17",
                      "type": "0,910,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The found Element\n",
                    "type": "String",
                    "src": {
                      "text": "0,911,33,18",
                      "type": "0,911,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,908,16",
                  "name": "0,913,0",
                  "static": "0,907,16",
                  "text": "0,906,16,66"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "get",
                "static": true,
                "text": "Retrieves Ext.dom.Element objects. <a href='#!/api/Ext-method-get'>Ext#get</a> is alias for <a href='#!/api/Ext.dom.Element-static-method-get'>Ext.dom.Element#get</a>.\n\n**This method does not retrieve <a href='#!/api/Ext.Component'>Ext.Component</a>s.** This method retrieves Ext.dom.Element\nobjects which encapsulate DOM elements. To retrieve a Component by its ID, use <a href='#!/api/Ext.ComponentManager-method-get'>Ext.ComponentManager#get</a>.\n\nWhen passing an id, it should not include the `#` character that is used for a css selector.\n\n    // For an element with id 'foo'\n    Ext.get('foo'); // Correct\n    Ext.get('#foo'); // Incorrect\n\nUses simple caching to consistently return the same object. Automatically fixes if an object was recreated with\nthe same id via AJAX or DOM.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The <a href='#!/api/Ext.dom.Element-property-id'>id</a> of the node, a DOM Node or an existing Element.\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,932,60",
                      "text": "0,932,63,57",
                      "type": "0,932,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Element object (or <a href='#!/api/null'>null</a> if no matching element was found).\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "text": "0,933,42,65",
                      "type": "0,933,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,935,16",
                  "name": "0,937,0",
                  "static": "0,934,16",
                  "text": "0,918,16,652"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getActiveElement",
                "static": true,
                "text": "Returns the active element in the DOM. If the browser supports activeElement\non the document, this is returned. If not, the focus is tracked and the active\nelement is maintained internally.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "asElement",
                    "text": "Return Ext.Element instance instead of DOM node.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,1067,33",
                      "text": "0,1067,43,49",
                      "type": "0,1067,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The active (focused) element in the document.\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "0,1069,38,46",
                      "type": "0,1069,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1065,16",
                  "name": "0,1071,0",
                  "static": "0,1064,16",
                  "text": "0,1061,16,190"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getCommonAncestor",
                "static": true,
                "text": "Returns the common ancestor of the two passed elements.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "nodeA",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "name": "0,1433,53",
                      "type": "0,1433,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "nodeB",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "name": "0,1434,53",
                      "type": "0,1434,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnDom",
                    "text": "Pass `true` to return a DOM element. Otherwise An <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> will be returned.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,1435,33",
                      "text": "0,1435,43,100",
                      "type": "0,1435,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The common ancestor.\n",
                    "type": "Ext.dom.Element/HTMLElement",
                    "src": {
                      "text": "0,1436,54,21",
                      "type": "0,1436,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1431,16",
                  "name": "0,1438,0",
                  "static": "0,1430,16",
                  "text": "0,1429,16,56"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getDocumentHeight",
                "static": true,
                "text": "Retrieves the document height\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "documentHeight\n",
                    "type": "Number",
                    "src": {
                      "text": "0,1089,33,15",
                      "type": "0,1089,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1088,16",
                  "name": "0,1091,0",
                  "static": "0,1087,16",
                  "text": "0,1086,16,30"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getDocumentWidth",
                "static": true,
                "text": "Retrieves the document width\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "documentWidth\n",
                    "type": "Number",
                    "src": {
                      "text": "0,1099,33,14",
                      "type": "0,1099,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1098,16",
                  "name": "0,1101,0",
                  "static": "0,1097,16",
                  "text": "0,1096,16,29"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getOrientation",
                "static": true,
                "text": "Retrieves the current orientation of the window. This is calculated by\ndetermining if the height is greater than the width.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Orientation of window: 'portrait' or 'landscape'\n",
                    "type": "String",
                    "src": {
                      "text": "0,1110,33,49",
                      "type": "0,1110,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1109,16",
                  "name": "0,1112,0",
                  "static": "0,1108,16",
                  "text": "0,1106,16,124"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getViewportHeight",
                "static": true,
                "text": "Retrieves the viewport height of the window.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "viewportHeight\n",
                    "type": "Number",
                    "src": {
                      "text": "0,1124,33,15",
                      "type": "0,1124,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1123,16",
                  "name": "0,1126,0",
                  "static": "0,1122,16",
                  "text": "0,1121,16,45"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getViewportWidth",
                "static": true,
                "text": "Retrieves the viewport width of the window.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "viewportWidth\n",
                    "type": "Number",
                    "src": {
                      "text": "0,1142,33,14",
                      "type": "0,1142,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1141,16",
                  "name": "0,1144,0",
                  "static": "0,1140,16",
                  "text": "0,1139,16,44"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "getViewSize",
                "static": true,
                "text": "Retrieves the viewport size of the window.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "object containing width and height properties\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1160,33,46",
                      "type": "0,1160,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1159,16",
                  "name": "0,1162,0",
                  "static": "0,1158,16",
                  "text": "0,1157,16,43"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "normalize",
                "static": true,
                "text": "Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.\nFor example:\n\n- border-width -> borderWidth\n- padding-top -> paddingTop\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The property to normalize\n",
                    "type": "String",
                    "src": {
                      "name": "0,1178,32",
                      "text": "0,1178,37,26",
                      "type": "0,1178,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The normalized string\n",
                    "type": "String",
                    "src": {
                      "text": "0,1179,33,22",
                      "type": "0,1179,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1177,16",
                  "name": "0,1181,0",
                  "static": "0,1176,16",
                  "text": "0,1170,16,155"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "parseBox",
                "static": true,
                "text": "Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations\n(e.g. 10, \"10\", \"10 10\", \"10 10 10\" and \"10 10 10 10\" are all valid options and would return the same result)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "text": "The encoded margins\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,1259,39",
                      "text": "0,1259,43,20",
                      "type": "0,1259,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with margin sizes for top, right, bottom and left containing the unit\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1260,33,80",
                      "type": "0,1260,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1258,16",
                  "name": "0,1262,0",
                  "static": "0,1257,16",
                  "text": "0,1255,16,217"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "parseStyles",
                "static": true,
                "text": "Converts a CSS string into an object with a property for each style.\n\nThe sample code below would return an object with 2 properties, one\nfor background-color and one for color.\n\n    var css = 'background-color: red; color: blue;';\n    console.log(Ext.dom.Element.parseStyles(css));\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "styles",
                    "text": "A CSS string\n",
                    "type": "String",
                    "src": {
                      "name": "0,1312,32",
                      "text": "0,1312,39,13",
                      "type": "0,1312,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "styles\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1313,33,7",
                      "type": "0,1313,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1311,16",
                  "name": "0,1315,0",
                  "static": "0,1310,16",
                  "text": "0,1302,16,284"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "query",
                "static": true,
                "text": "Selects child nodes of a given root based on the passed CSS selector.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The CSS selector.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1355,32",
                      "text": "0,1355,41,18",
                      "type": "0,1355,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "asDom",
                    "optional": true,
                    "text": "`false` to return an array of Ext.dom.Element\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,1356,34",
                      "text": "0,1356,46,46",
                      "type": "0,1356,24",
                      "value": "0,1356,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "The root element of the query or id of\nthe root\n",
                    "type": "HTMLElement/String",
                    "src": {
                      "name": "0,1357,45",
                      "text": "0,1357,51,39:0,1358,16,9",
                      "type": "0,1357,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An Array of elements that match\nthe selector.  If there are no matches, an empty Array is returned.\n",
                    "type": "HTMLElement[]/Ext.dom.Element[]",
                    "src": {
                      "text": "0,1359,58,32:0,1360,16,68",
                      "type": "0,1359,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1354,16",
                  "name": "0,1362,0",
                  "static": "0,1353,16",
                  "text": "0,1352,16,70"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "select",
                "static": true,
                "text": "Selects elements based on the passed CSS selector to enable\n<a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> methods to be applied to many related\nelements in one statement through the returned\n<a href='#!/api/Ext.dom.CompositeElementLite'>Ext.dom.CompositeElementLite</a> object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "The CSS selector or an array of\nelements\n",
                    "type": "String/HTMLElement[]",
                    "src": {
                      "name": "0,1339,46",
                      "text": "0,1339,55,32:0,1340,16,9",
                      "type": "0,1339,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "composite",
                    "optional": true,
                    "text": "Return a CompositeElement as opposed to\na CompositeElementLite. Defaults to false.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,1341,34",
                      "text": "0,1341,51,40:0,1342,16,43",
                      "type": "0,1341,24",
                      "value": "0,1341,44"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "root",
                    "optional": true,
                    "text": "The root element of the query or id of\nthe root\n",
                    "type": "HTMLElement/String",
                    "src": {
                      "name": "0,1343,45",
                      "text": "0,1343,51,39:0,1344,16,9",
                      "type": "0,1343,24"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.dom.CompositeElementLite/Ext.dom.CompositeElement",
                    "src": {
                      "type": "0,1345,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1338,16",
                  "name": "0,1347,0",
                  "static": "0,1337,16",
                  "text": "0,1333,16,243"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "serializeForm",
                "static": true,
                "text": "Serializes a DOM form into a url encoded string\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "form",
                    "text": "The form\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1387,32",
                      "text": "0,1387,37,9",
                      "type": "0,1387,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The url encoded form\n",
                    "type": "String",
                    "src": {
                      "text": "0,1388,33,21",
                      "type": "0,1388,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1390,16",
                  "name": "0,1392,0",
                  "static": "0,1389,16",
                  "text": "0,1386,16,48"
                }
              },
              {
                "$type": "method",
                "inheritable": true,
                "name": "unitizeBox",
                "static": true,
                "text": "Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations\n(e.g. 10, \"10\", \"10 10\", \"10 10 10\" and \"10 10 10 10\" are all valid options and would return the same result)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "text": "The encoded margins, or an object with top, right,\n",
                    "type": "Number/String/Object",
                    "src": {
                      "name": "0,1371,46",
                      "text": "0,1371,50,51",
                      "type": "0,1371,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "units",
                    "text": "The type of units to add\n",
                    "type": "String",
                    "src": {
                      "name": "0,1372,32",
                      "text": "0,1372,38,25",
                      "type": "0,1372,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An string with unitized (px if units is not specified) metrics for top, right, bottom and left\n",
                    "type": "String",
                    "src": {
                      "text": "0,1373,33,95",
                      "type": "0,1373,25"
                    }
                  }
                ],
                "src": {
                  "inheritable": "0,1370,16",
                  "name": "0,1375,0",
                  "static": "0,1369,16",
                  "text": "0,1367,16,217"
                }
              }
            ]
          },
          {
            "$type": "static-properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "9",
                "static": true,
                "text": "The list of valid nodeTypes that are allowed to be wrapped\n",
                "type": "Object",
                "src": {
                  "access": "0,714,16",
                  "inheritable": "0,716,16",
                  "name": "0,719,0",
                  "static": "0,715,16",
                  "text": "0,717,16,59",
                  "type": "0,713,27"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "cache",
                "static": true,
                "src": {
                  "access": "0,625,16",
                  "inheritable": "0,627,16",
                  "name": "0,629,0",
                  "static": "0,626,16"
                }
              },
              {
                "$type": "property",
                "inheritable": true,
                "name": "CLIP",
                "static": true,
                "text": "Visibility mode constant for use with <a href='#!/api/Ext.dom.Element-method-setVisibilityMode'>Ext.dom.Element#setVisibilityMode</a>.\nUse CSS <a href='#!/api/Ext.dom.Element-method-clip'>clip</a> property to reduce element's dimensions to 0px by 0px, effectively\nmaking it hidden while not being truly invisible. This is useful when an element\nneeds to be published to the Assistive Technologies such as screen readers.\n",
                "type": "Number",
                "src": {
                  "inheritable": "0,677,16",
                  "name": "0,679,0",
                  "static": "0,676,16",
                  "text": "0,672,16,320",
                  "type": "0,671,27"
                }
              },
              {
                "$type": "property",
                "inheritable": true,
                "name": "DISPLAY",
                "static": true,
                "text": "Visibility mode constant for use with <a href='#!/api/Ext.dom.Element-method-setVisibilityMode'>Ext.dom.Element#setVisibilityMode</a>.\nUse the CSS 'display' property to hide the element.\n",
                "type": "Number",
                "src": {
                  "inheritable": "0,657,16",
                  "name": "0,659,0",
                  "static": "0,656,16",
                  "text": "0,654,16,133",
                  "type": "0,653,27"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "editableSelector",
                "static": true,
                "src": {
                  "access": "0,634,16",
                  "inheritable": "0,635,16",
                  "name": "0,637,0",
                  "static": "0,633,16"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "minKeyboardHeight",
                "static": true,
                "text": "This property indicates a minimum threshold of vertical resize movement for\nvirtual keyboard detection.\n\nOn some mobile browsers the framework needs to keep track of whether window\nresize events were triggered by the opening or closing of a virtual keyboard\nso that it can prevent unnecessary re-layout of the viewport.  It does this\nby detecting resize events in the horizontal direction that occur immediately\nafter an editable element is focused or blurred.\n",
                "src": {
                  "access": "0,685,16",
                  "inheritable": "0,684,16",
                  "name": "0,695,0",
                  "static": "0,683,16",
                  "text": "0,686,16,461"
                }
              },
              {
                "$type": "property",
                "inheritable": true,
                "name": "OFFSETS",
                "static": true,
                "text": "Visibility mode constant for use with <a href='#!/api/Ext.dom.Element-method-setVisibilityMode'>Ext.dom.Element#setVisibilityMode</a>.\nUse CSS absolute positioning and top/left offsets to hide the element.\n",
                "type": "Number",
                "src": {
                  "inheritable": "0,666,16",
                  "name": "0,668,0",
                  "static": "0,665,16",
                  "text": "0,663,16,152",
                  "type": "0,662,27"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "inheritable": true,
                "name": "useDelegatedEvents",
                "static": true,
                "text": "True to globally disable the delegated event system.  The results of\nsetting this to false are unpredictable since the Gesture publisher relies\non delegated events in order to work correctly.  Disabling delegated events\nmay cause Gestures to function incorrectly or to stop working completely.\nUse at your own risk!\n",
                "type": "Boolean",
                "src": {
                  "access": "0,701,16",
                  "inheritable": "0,703,16",
                  "name": "0,710,0",
                  "static": "0,702,16",
                  "text": "0,704,16,316",
                  "type": "0,700,27"
                }
              },
              {
                "$type": "property",
                "inheritable": true,
                "name": "VISIBILITY",
                "static": true,
                "text": "Visibility mode constant for use with <a href='#!/api/Ext.dom.Element-method-setVisibilityMode'>Ext.dom.Element#setVisibilityMode</a>.\nUse the CSS 'visibility' property to hide the element.\n\nNote that in this mode, <a href='#!/api/Ext.dom.Element-method-isVisible'>Ext.dom.Element#isVisible</a> may return true\nfor an element even though it actually has a parent element that is hidden. For this\nreason, and in most cases, using the <a href='#!/api/Ext.dom.Element-static-property-OFFSETS'>OFFSETS</a> mode is a better choice.\n",
                "type": "Number",
                "src": {
                  "inheritable": "0,648,16",
                  "name": "0,650,0",
                  "static": "0,647,16",
                  "text": "0,641,16,385",
                  "type": "0,640,27"
                }
              }
            ]
          }
        ],
        "src": {
          "alternateClassNames": "0,3,24",
          "mixins": "0,4,12,12:0,5,12,12:1,100,0,0",
          "name": "1,2,11",
          "override": "1,3,14",
          "requires": "0,239,0,0:0,240,0,0:0,241,0,0:0,242,0,0:0,243,0,0:0,244,0,0:0,245,0,0",
          "text": "0,6,4,4427",
          "uses": "0,249,0,0:0,250,0,0:0,251,0,0:0,252,0,0:1,104,0,0:1,105,0,0:1,106,0,0:1,107,0,0:1,108,0,0"
        }
      }
    ]
  },
  "version": 1
}