{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/dom/Helper.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/classic/classic/overrides/dom/Helper.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Ext.DomHelper",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.dom.Helper",
        "singleton": true,
        "text": "The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or\nusing HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.\n\n## DomHelper element specification object\n\nA specification object is used when creating elements. Attributes of this object are assumed to be element\nattributes, except for 4 special attributes:\n\n* **tag**: The tag name of the element\n* **children (or cn)**: An array of the same kind of element definition objects to be created and appended. These\ncan be nested as deep as you want.\n* **cls**: The class attribute of the element. This will end up being either the \"class\" attribute on a HTML\nfragment or className for a DOM node, depending on whether DomHelper is using fragments or DOM.\n* **html**: The innerHTML for the element\n\n## Insertion methods\n\nCommonly used insertion methods:\n\n* <a href='#!/api/Ext.dom.Helper-method-append'>append</a>\n* <a href='#!/api/Ext.dom.Helper-method-insertBefore'>insertBefore</a>\n* <a href='#!/api/Ext.dom.Helper-method-insertAfter'>insertAfter</a>\n* <a href='#!/api/Ext.dom.Helper-method-overwrite'>overwrite</a>\n* <a href='#!/api/Ext.dom.Helper-method-insertHtml'>insertHtml</a>\n\n## Example\n\nThis is an example, where an unordered list with 3 children items is appended to an existing element with id\n'my-div':\n\n    var dh = Ext.DomHelper; // create shorthand alias\n    // specification object\n    var spec = {\n        id: 'my-ul',\n        tag: 'ul',\n        cls: 'my-list',\n        // append children after creating\n        children: [     // may also specify 'cn' instead of 'children'\n            {tag: 'li', id: 'item0', html: 'List Item 0'},\n            {tag: 'li', id: 'item1', html: 'List Item 1'},\n            {tag: 'li', id: 'item2', html: 'List Item 2'}\n        ]\n    };\n    var list = dh.append(\n        'my-div', // the context element 'my-div' can either be the id or the actual node\n        spec      // the specification object\n    );\n\nElement creation specification parameters in this class may also be passed as an Array of specification objects.\nThis can be used to insert multiple sibling nodes into an existing container very efficiently. For example, to add\nmore list items to the example above:\n\n    dh.append('my-ul', [\n        {tag: 'li', id: 'item3', html: 'List Item 3'},\n        {tag: 'li', id: 'item4', html: 'List Item 4'}\n    ]);\n\n## Templating\n\nThe real power is in the built-in templating. Instead of creating or appending any elements, createTemplate returns\na Template object which can be used over and over to insert new elements. Revisiting the example above, we could\nutilize templating this time:\n\n    // create the node\n    var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});\n    // get template\n    var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});\n\n    for(var i = 0; i < 5; i++){\n        tpl.append(list, i); // use template to append to the actual node\n    }\n\nAn example using a template:\n\n    var html = '\"{0}\" href=\"{1}\" class=\"nav\">{2}';\n\n    var tpl = new Ext.DomHelper.createTemplate(html);\n    tpl.append('blog-roll', ['link1', 'http://www.foxmulder.com/', \"Fox's Site\"]);\n    tpl.append('blog-roll', ['link2', 'http://www.danascully.org/', \"Scully's Site\"]);\n\nThe same example using named parameters:\n\n    var html = '\"{id}\" href=\"{url}\" class=\"nav\">{text}';\n\n    var tpl = new Ext.DomHelper.createTemplate(html);\n    tpl.append('blog-roll', {\n        id: 'link1',\n        url: 'http://www.danascully.org/',\n        text: \"Scully's Site\"\n    });\n    tpl.append('blog-roll', {\n        id: 'link2',\n        url: 'http://www.foxmulder.com/',\n        text: \"Fox's Site\"\n    });\n\n## Compiling Templates\n\nTemplates are applied using regular expressions. The performance is great, but if you are adding a bunch of DOM\nelements using the same template, you can increase performance even further by \"compiling\" the template. The way\n\"compile()\" works is the template is parsed and broken up at the different variable points and a dynamic function is\ncreated and eval'ed. The generated function performs string concatenation of these parts and the passed variables\ninstead of using regular expressions.\n\n    var html = '\"{id}\" href=\"{url}\" class=\"nav\">{text}';\n\n    var tpl = new Ext.DomHelper.createTemplate(html);\n    tpl.compile();\n\n    // ... use template like normal\n\n## Performance Boost\n\nDomHelper will transparently create HTML fragments when it can. Using HTML fragments instead of DOM can\nsignificantly boost performance.\n\nElement creation specification parameters may also be strings which are used as innerHTML.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "append",
                "text": "Creates new DOM element(s) and appends them to el.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,514,56",
                      "text": "0,514,59,20",
                      "type": "0,514,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The DOM object spec (and children) or raw HTML blob\n",
                    "type": "Object/String",
                    "src": {
                      "name": "0,515,35",
                      "text": "0,515,37,52",
                      "type": "0,515,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "optional": true,
                    "text": "true to return a Ext.Element\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,516,30",
                      "text": "0,516,45,29",
                      "type": "0,516,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,517,50,13",
                      "type": "0,517,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,519,0",
                  "text": "0,513,12,51"
                }
              },
              {
                "$type": "method",
                "name": "applyStyles",
                "text": "Applies a style specification to an element.\n\nStyles in object form should be a valid DOM element style property.\n[Valid style property names](http://www.w3schools.com/jsref/dom_obj_style.asp)\n(_along with the supported CSS version for each_)\n\n    // <div id=\"my-el\">Phineas Flynn</div>\n\n    var el = Ext.get('my-el'),\n        dh = Ext.dom.Helper;\n\n    dh.applyStyles(el, 'color: white;');\n\n    dh.applyStyles(el, {\n        fontWeight: 'bold',\n        backgroundColor: 'gray',\n        padding: '10px'\n    });\n\n    dh.applyStyles(el, function () {\n        if (name.initialConfig.html === 'Phineas Flynn') {\n            return 'font-style: italic;';\n            // OR return { fontStyle: 'italic' };\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element to apply styles to\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,323,56",
                      "text": "0,323,59,31",
                      "type": "0,323,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "styles",
                    "text": "A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or\na function which returns such a specification.\n",
                    "type": "String/Object/Function",
                    "src": {
                      "name": "0,324,44",
                      "text": "0,324,51,91:0,325,12,47",
                      "type": "0,324,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,327,0",
                  "text": "0,297,12,717"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createContextualFragment",
                "text": "Fix for browsers which do not support createContextualFragment\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "html",
                    "src": {
                      "name": "0,335,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,332,12",
                  "name": "0,335,0",
                  "text": "0,333,12,63"
                }
              },
              {
                "$type": "method",
                "name": "createDom",
                "text": "Creates new DOM element(s) without inserting them to the document.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The DOM object spec (and children) or raw HTML blob\n",
                    "type": "Object/String",
                    "src": {
                      "name": "0,353,35",
                      "text": "0,353,37,52",
                      "type": "0,353,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new uninserted node\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "0,354,34,24",
                      "type": "0,354,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,356,0",
                  "text": "0,352,12,67"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "5.0.0",
                "name": "createHtml",
                "text": "Alias for <a href='#!/api/Ext.dom.Helper-method-markup'>markup</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "spec",
                    "src": {
                      "name": "0,596,0"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,594,12",
                  "name": "0,592,20",
                  "text": "0,593,12,27"
                }
              },
              {
                "$type": "method",
                "name": "createTemplate",
                "text": "Creates a new Ext.Template from the DOM object spec.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The DOM object spec (and children)\n",
                    "type": "Object",
                    "src": {
                      "name": "0,583,28",
                      "text": "0,583,30,35",
                      "type": "0,583,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new template\n",
                    "type": "Ext.Template",
                    "src": {
                      "text": "0,584,35,17",
                      "type": "0,584,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,586,0",
                  "text": "0,582,12,53"
                }
              },
              {
                "$type": "method",
                "name": "generateStyles",
                "text": "Converts the styles from the given object to text. The styles are CSS style names\nwith their associated value.\n\nThe basic form of this method returns a string:\n\n     var s = Ext.DomHelper.generateStyles({\n         backgroundColor: 'red'\n     });\n\n     // s = 'background-color:red;'\n\nAlternatively, this method can append to an output array.\n\n     var buf = [];\n\n     ...\n\n     Ext.DomHelper.generateStyles({\n         backgroundColor: 'red'\n     }, buf);\n\nIn this case, the style text is pushed on to the array and the array is returned.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "styles",
                    "text": "The object describing the styles.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,254,28",
                      "text": "0,254,35,34",
                      "type": "0,254,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "buffer",
                    "optional": true,
                    "text": "The output buffer.\n",
                    "type": "String[]",
                    "src": {
                      "name": "0,255,31",
                      "text": "0,255,39,19",
                      "type": "0,255,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "encode",
                    "optional": true,
                    "text": "`true` to <a href='#!/api/Ext.String-method-htmlEncode'>Ext.String#htmlEncode</a> property values if they\nare going to be inserted as HTML attributes.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,256,30",
                      "text": "0,256,38,64:0,257,12,45",
                      "type": "0,256,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If buffer is passed, it is returned. Otherwise the style\nstring is returned.\n",
                    "type": "String/String[]",
                    "src": {
                      "text": "0,258,38,57:0,259,12,20",
                      "type": "0,258,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,261,0",
                  "text": "0,231,12,539"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.dom.Helper-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "insertAfter",
                "text": "Creates new DOM element(s) and inserts them after el.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,492,56",
                      "text": "0,492,59,20",
                      "type": "0,492,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The DOM object spec (and children)\n",
                    "type": "Object",
                    "src": {
                      "name": "0,493,28",
                      "text": "0,493,30,35",
                      "type": "0,493,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "optional": true,
                    "text": "true to return a Ext.Element\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,494,30",
                      "text": "0,494,45,29",
                      "type": "0,494,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,495,50,13",
                      "type": "0,495,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,497,0",
                  "text": "0,491,12,54"
                }
              },
              {
                "$type": "method",
                "name": "insertBefore",
                "text": "Creates new DOM element(s) and inserts them before el.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,481,56",
                      "text": "0,481,59,20",
                      "type": "0,481,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The DOM object spec (and children) or raw HTML blob\n",
                    "type": "Object/String",
                    "src": {
                      "name": "0,482,35",
                      "text": "0,482,37,52",
                      "type": "0,482,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "optional": true,
                    "text": "true to return a Ext.Element\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,483,30",
                      "text": "0,483,45,29",
                      "type": "0,483,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,484,50,13",
                      "type": "0,484,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,486,0",
                  "text": "0,480,12,55"
                }
              },
              {
                "$type": "method",
                "name": "insertFirst",
                "text": "Creates new DOM element(s) and inserts them as the first child of el.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,503,56",
                      "text": "0,503,59,20",
                      "type": "0,503,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The DOM object spec (and children) or raw HTML blob\n",
                    "type": "Object/String",
                    "src": {
                      "name": "0,504,35",
                      "text": "0,504,37,52",
                      "type": "0,504,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "optional": true,
                    "text": "true to return a Ext.Element\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,505,30",
                      "text": "0,505,45,29",
                      "type": "0,505,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,506,50,13",
                      "type": "0,506,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,508,0",
                  "text": "0,502,12,70"
                }
              },
              {
                "$type": "method",
                "name": "insertHtml",
                "text": "Inserts an HTML fragment into the DOM.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "where",
                    "text": "Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.\n\nFor example take the following HTML: `<div>Contents</div>`\n\nUsing different `where` values inserts element to the following places:\n\n- beforeBegin: `<HERE><div>Contents</div>`\n- afterBegin: `<div><HERE>Contents</div>`\n- beforeEnd: `<div>Contents<HERE></div>`\n- afterEnd: `<div>Contents</div><HERE>`\n",
                    "type": "String",
                    "src": {
                      "name": "0,380,28",
                      "text": "0,380,34,91:0,381,12,301",
                      "type": "0,380,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "HTMLElement/TextNode",
                    "src": {
                      "name": "0,391,42",
                      "text": "0,391,45,20",
                      "type": "0,391,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "html",
                    "text": "The HTML fragment\n",
                    "type": "String",
                    "src": {
                      "name": "0,392,28",
                      "text": "0,392,33,18",
                      "type": "0,392,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node\n",
                    "type": "HTMLElement",
                    "src": {
                      "text": "0,393,34,13",
                      "type": "0,393,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,395,0",
                  "text": "0,379,12,39"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "insertIntoTable",
                "text": "workaround for broken table implementation in IE9m\nhttp://www.ericvasilik.com/2006/07/code-karma.html\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "tag",
                    "src": {
                      "name": "2,71,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "where",
                    "src": {
                      "name": "2,71,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "destinationEl",
                    "src": {
                      "name": "2,71,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "html",
                    "src": {
                      "name": "2,71,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,65,12",
                  "name": "2,66,20",
                  "text": "2,68,12,102"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.dom.Helper-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "markup",
                "text": "Returns the markup for the passed Element(s) config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "spec",
                    "text": "The DOM object spec (and children).\n",
                    "type": "Object",
                    "src": {
                      "name": "0,284,28",
                      "text": "0,284,33,36",
                      "type": "0,284,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,285,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,287,0",
                  "text": "0,283,12,53"
                }
              },
              {
                "$type": "method",
                "name": "overwrite",
                "text": "Creates new DOM element(s) and overwrites the contents of el with them.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The context element\n",
                    "type": "String/HTMLElement/Ext.dom.Element",
                    "src": {
                      "name": "0,525,56",
                      "text": "0,525,59,20",
                      "type": "0,525,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "o",
                    "text": "The DOM object spec (and children) or raw HTML blob\n",
                    "type": "Object/String",
                    "src": {
                      "name": "0,526,35",
                      "text": "0,526,37,52",
                      "type": "0,526,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "returnElement",
                    "optional": true,
                    "text": "true to return an Ext.Element\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,527,30",
                      "text": "0,527,51,30",
                      "type": "0,527,20",
                      "value": "0,527,44"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new node\n",
                    "type": "HTMLElement/Ext.dom.Element",
                    "src": {
                      "text": "0,528,50,13",
                      "type": "0,528,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,530,0",
                  "text": "0,524,12,72"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.dom.Helper-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.dom.Helper-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.dom.Helper-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.dom.Helper-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.dom.Helper-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.dom.Helper-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.dom.Helper-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.dom.Helper-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.dom.Helper-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.dom.Helper-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.dom.Helper-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.dom.Helper-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.dom.Helper-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.dom.Helper-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.dom.Helper-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.dom.Helper-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.dom.Helper-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "alternateClassNames": "0,2,24",
          "name": "0,123,0",
          "singleton": "0,3,4",
          "text": "0,5,4,4447"
        }
      }
    ]
  },
  "version": 1
}