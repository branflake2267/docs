{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/charts/src/draw/PathUtil.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.draw.PathUtil",
        "requires": "Ext.draw.overrides.Path,Ext.draw.overrides.sprite.Path",
        "singleton": true,
        "text": "Singleton that provides methods used by the Ext.draw.Path\nfor hit testing and finding path intersection points.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "bezierCoeffs",
                "text": "Calculates the coefficients of a cubic function for the given coordinates.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "P0",
                    "type": "Number",
                    "src": {
                      "name": "0,138,19",
                      "type": "0,138,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "P1",
                    "type": "Number",
                    "src": {
                      "name": "0,139,19",
                      "type": "0,139,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "P2",
                    "type": "Number",
                    "src": {
                      "name": "0,140,19",
                      "type": "0,140,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "P3",
                    "type": "Number",
                    "src": {
                      "name": "0,141,19",
                      "type": "0,141,23"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "0,142,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,136,12",
                  "name": "0,144,0",
                  "text": "0,137,12,75"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "cubicDimension",
                "text": "Returns the dimension of a cubic Bezier curve in a single direction.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "a",
                    "type": "Number",
                    "src": {
                      "name": "0,268,19",
                      "type": "0,268,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "b",
                    "type": "Number",
                    "src": {
                      "name": "0,269,19",
                      "type": "0,269,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "c",
                    "type": "Number",
                    "src": {
                      "name": "0,270,19",
                      "type": "0,270,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "d",
                    "type": "Number",
                    "src": {
                      "name": "0,271,19",
                      "type": "0,271,22"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Two-item array representing cubic's range in the given direction.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,272,28,66",
                      "type": "0,272,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,266,12",
                  "name": "0,274,0",
                  "text": "0,267,12,69"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "cubicLineIntersections",
                "text": "Computes intersection points between a cubic spline and a line segment.\nTakes in x/y components of cubic control points and line segment start/end points\nas parameters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "px1",
                    "type": "Number",
                    "src": {
                      "name": "0,158,19",
                      "type": "0,158,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "px2",
                    "type": "Number",
                    "src": {
                      "name": "0,159,19",
                      "type": "0,159,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "px3",
                    "type": "Number",
                    "src": {
                      "name": "0,160,19",
                      "type": "0,160,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "px4",
                    "type": "Number",
                    "src": {
                      "name": "0,161,19",
                      "type": "0,161,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "py1",
                    "type": "Number",
                    "src": {
                      "name": "0,162,19",
                      "type": "0,162,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "py2",
                    "type": "Number",
                    "src": {
                      "name": "0,163,19",
                      "type": "0,163,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "py3",
                    "type": "Number",
                    "src": {
                      "name": "0,164,19",
                      "type": "0,164,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "py4",
                    "type": "Number",
                    "src": {
                      "name": "0,165,19",
                      "type": "0,165,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x1",
                    "type": "Number",
                    "src": {
                      "name": "0,166,19",
                      "type": "0,166,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1",
                    "type": "Number",
                    "src": {
                      "name": "0,167,19",
                      "type": "0,167,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x2",
                    "type": "Number",
                    "src": {
                      "name": "0,168,19",
                      "type": "0,168,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y2",
                    "type": "Number",
                    "src": {
                      "name": "0,169,19",
                      "type": "0,169,23"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Array of intersection points, where each intersection point\n                 is itself a two-item array [x,y].\n",
                    "type": "Array",
                    "src": {
                      "text": "0,170,28,60:0,171,12,51",
                      "type": "0,170,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,154,12",
                  "name": "0,173,0",
                  "text": "0,155,12,169"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "cubicRoots",
                "text": "Finds roots of a cubic equation in t, where t lies in the interval of [0,1].\nBased on http://www.particleincell.com/blog/2013/cubic-line-intersection/\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "P",
                    "text": "Cubic equation coefficients.\n",
                    "type": "Number[]",
                    "src": {
                      "name": "0,28,19",
                      "text": "0,28,32,29",
                      "type": "0,28,22"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns an array of parametric intersection locations along the cubic,\n                 with -1 indicating an out-of-bounds intersection\n                 (before or after the end point or in the imaginary plane).\n",
                    "type": "Number[]",
                    "src": {
                      "text": "0,29,31,71:0,30,12,142",
                      "type": "0,29,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,25,12",
                  "name": "0,33,0",
                  "text": "0,26,12,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "cubicsIntersections",
                "text": "Computes intersection points between two cubic Bezier curve segments.\nTakes x/y components of control points for two Bezier curve segments.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ax1",
                    "type": "Number",
                    "src": {
                      "name": "0,342,19",
                      "type": "0,342,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ax2",
                    "type": "Number",
                    "src": {
                      "name": "0,343,19",
                      "type": "0,343,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ax3",
                    "type": "Number",
                    "src": {
                      "name": "0,344,19",
                      "type": "0,344,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ax4",
                    "type": "Number",
                    "src": {
                      "name": "0,345,19",
                      "type": "0,345,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ay1",
                    "type": "Number",
                    "src": {
                      "name": "0,346,19",
                      "type": "0,346,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ay2",
                    "type": "Number",
                    "src": {
                      "name": "0,347,19",
                      "type": "0,347,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ay3",
                    "type": "Number",
                    "src": {
                      "name": "0,348,19",
                      "type": "0,348,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ay4",
                    "type": "Number",
                    "src": {
                      "name": "0,349,19",
                      "type": "0,349,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bx1",
                    "type": "Number",
                    "src": {
                      "name": "0,350,19",
                      "type": "0,350,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bx2",
                    "type": "Number",
                    "src": {
                      "name": "0,351,19",
                      "type": "0,351,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bx3",
                    "type": "Number",
                    "src": {
                      "name": "0,352,19",
                      "type": "0,352,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bx4",
                    "type": "Number",
                    "src": {
                      "name": "0,353,19",
                      "type": "0,353,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "by1",
                    "type": "Number",
                    "src": {
                      "name": "0,354,19",
                      "type": "0,354,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "by2",
                    "type": "Number",
                    "src": {
                      "name": "0,355,19",
                      "type": "0,355,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "by3",
                    "type": "Number",
                    "src": {
                      "name": "0,356,19",
                      "type": "0,356,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "by4",
                    "type": "Number",
                    "src": {
                      "name": "0,357,19",
                      "type": "0,357,24"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Array of intersection points, where each intersection point\n                 is itself a two-item array [x,y].\n",
                    "type": "Array",
                    "src": {
                      "text": "0,358,28,60:0,359,12,51",
                      "type": "0,358,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,339,12",
                  "name": "0,361,0",
                  "text": "0,340,12,140"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.draw.PathUtil-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "interpolateCubic",
                "text": "Calculates a value of a cubic function at the given point t. In other words\nreturns a * (1 - t) ^ 3 + 3 * b (1 - t) ^ 2 * t + 3 * c (1 - t) * t ^ 3 + d * t ^ 3\nfor given a, b, c, d and t, where t belongs to an interval of [0, 1].\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "a",
                    "type": "Number",
                    "src": {
                      "name": "0,320,19",
                      "type": "0,320,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "b",
                    "type": "Number",
                    "src": {
                      "name": "0,321,19",
                      "type": "0,321,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "c",
                    "type": "Number",
                    "src": {
                      "name": "0,322,19",
                      "type": "0,322,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "d",
                    "type": "Number",
                    "src": {
                      "name": "0,323,19",
                      "type": "0,323,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "t",
                    "type": "Number",
                    "src": {
                      "name": "0,324,19",
                      "type": "0,324,22"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,325,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,316,12",
                  "name": "0,327,0",
                  "text": "0,317,12,230"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.draw.PathUtil-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "linearRoot",
                "text": "Finds roots of a linear equation in t, where t lies in the interval of [0,1].\nTakes two linear equation coefficients as parameters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "a",
                    "type": "Number",
                    "src": {
                      "name": "0,123,19",
                      "type": "0,123,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "b",
                    "type": "Number",
                    "src": {
                      "name": "0,124,19",
                      "type": "0,124,22"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "0,125,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,120,12",
                  "name": "0,127,0",
                  "text": "0,121,12,132"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "linesIntersection",
                "text": "Returns the point [x,y] where two line segments intersect or null.\nTakes x/y components of the start and end point of the segments as parameters.\nBased on Paul Bourke's explanation:\nhttp://paulbourke.net/geometry/pointlineplane/\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x1",
                    "type": "Number",
                    "src": {
                      "name": "0,400,19",
                      "type": "0,400,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1",
                    "type": "Number",
                    "src": {
                      "name": "0,401,19",
                      "type": "0,401,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x2",
                    "type": "Number",
                    "src": {
                      "name": "0,402,19",
                      "type": "0,402,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y2",
                    "type": "Number",
                    "src": {
                      "name": "0,403,19",
                      "type": "0,403,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x3",
                    "type": "Number",
                    "src": {
                      "name": "0,404,19",
                      "type": "0,404,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y3",
                    "type": "Number",
                    "src": {
                      "name": "0,405,19",
                      "type": "0,405,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x4",
                    "type": "Number",
                    "src": {
                      "name": "0,406,19",
                      "type": "0,406,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y4",
                    "type": "Number",
                    "src": {
                      "name": "0,407,19",
                      "type": "0,407,23"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number[]/null",
                    "src": {
                      "type": "0,408,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,395,12",
                  "name": "0,410,0",
                  "text": "0,396,12,229"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "pointOnCubic",
                "text": "Checks if a point belongs to a cubic Bezier curve segment.\nTakes x/y components of the control points of the segment and the point's\ncoordinates as parameters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "px1",
                    "type": "Number",
                    "src": {
                      "name": "0,465,19",
                      "type": "0,465,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "px2",
                    "type": "Number",
                    "src": {
                      "name": "0,466,19",
                      "type": "0,466,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "px3",
                    "type": "Number",
                    "src": {
                      "name": "0,467,19",
                      "type": "0,467,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "px4",
                    "type": "Number",
                    "src": {
                      "name": "0,468,19",
                      "type": "0,468,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "py1",
                    "type": "Number",
                    "src": {
                      "name": "0,469,19",
                      "type": "0,469,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "py2",
                    "type": "Number",
                    "src": {
                      "name": "0,470,19",
                      "type": "0,470,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "py3",
                    "type": "Number",
                    "src": {
                      "name": "0,471,19",
                      "type": "0,471,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "py4",
                    "type": "Number",
                    "src": {
                      "name": "0,472,19",
                      "type": "0,472,24"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,473,19",
                      "type": "0,473,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,474,19",
                      "type": "0,474,22"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,475,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,461,12",
                  "name": "0,477,0",
                  "text": "0,462,12,160"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "pointOnLine",
                "text": "Checks if a point belongs to a line segment.\nTakes x/y components of the start and end points of the segment and the point's\ncoordinates as parameters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x1",
                    "type": "Number",
                    "src": {
                      "name": "0,432,19",
                      "type": "0,432,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y1",
                    "type": "Number",
                    "src": {
                      "name": "0,433,19",
                      "type": "0,433,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x2",
                    "type": "Number",
                    "src": {
                      "name": "0,434,19",
                      "type": "0,434,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y2",
                    "type": "Number",
                    "src": {
                      "name": "0,435,19",
                      "type": "0,435,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "x",
                    "type": "Number",
                    "src": {
                      "name": "0,436,19",
                      "type": "0,436,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "type": "Number",
                    "src": {
                      "name": "0,437,19",
                      "type": "0,437,22"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,438,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,428,12",
                  "name": "0,440,0",
                  "text": "0,429,12,152"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.draw.PathUtil-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.draw.PathUtil-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "quadraticRoots",
                "text": "Finds roots of a quadratic equation in t, where t lies in the interval of [0,1].\nTakes three quadratic equation coefficients as parameters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "a",
                    "type": "Number",
                    "src": {
                      "name": "0,92,19",
                      "type": "0,92,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "b",
                    "type": "Number",
                    "src": {
                      "name": "0,93,19",
                      "type": "0,93,22"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "c",
                    "type": "Number",
                    "src": {
                      "name": "0,94,19",
                      "type": "0,94,22"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Array",
                    "src": {
                      "type": "0,95,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,89,12",
                  "name": "0,97,0",
                  "text": "0,90,12,140"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "splitCubic",
                "text": "Splits cubic Bezier curve into two cubic Bezier curves at point z,\nwhere z belongs to a range of [0, 1].\nAccepts cubic coefficients and point z as parameters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "P1",
                    "type": "Number",
                    "src": {
                      "name": "0,232,19",
                      "type": "0,232,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "P2",
                    "type": "Number",
                    "src": {
                      "name": "0,233,19",
                      "type": "0,233,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "P3",
                    "type": "Number",
                    "src": {
                      "name": "0,234,19",
                      "type": "0,234,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "P4",
                    "type": "Number",
                    "src": {
                      "name": "0,235,19",
                      "type": "0,235,23"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "z",
                    "text": "Point to split the given curve at.\n",
                    "src": {
                      "name": "0,236,19",
                      "text": "0,236,21,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Two-item array, where each item is itself an array\n                 of cubic coefficients.\n",
                    "type": "Array",
                    "src": {
                      "text": "0,237,28,51:0,238,12,40",
                      "type": "0,237,21"
                    }
                  }
                ],
                "src": {
                  "access": "0,228,12",
                  "name": "0,240,0",
                  "text": "0,229,12,159"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.draw.PathUtil-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.draw.PathUtil-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.draw.PathUtil-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.draw.PathUtil-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.draw.PathUtil-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.draw.PathUtil-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.draw.PathUtil-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.draw.PathUtil-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.draw.PathUtil-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.draw.PathUtil-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.draw.PathUtil-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.draw.PathUtil-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.draw.PathUtil-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.draw.PathUtil-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.draw.PathUtil-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,2,4",
          "name": "0,6,0",
          "requires": "0,20,0,0:0,21,0,0",
          "singleton": "0,17,0",
          "text": "0,3,4,112"
        }
      }
    ]
  },
  "version": 1
}