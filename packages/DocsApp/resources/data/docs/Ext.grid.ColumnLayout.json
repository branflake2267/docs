{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/grid/ColumnLayout.js",
    "../../../ext/classic/classic/src/layout/container/Box.js",
    "../../../ext/classic/classic/src/layout/Layout.js",
    "../../../ext/classic/classic/src/util/ElementContainer.js",
    "../../../ext/classic/classic/src/layout/container/Container.js",
    "../../../../docs/docs/js/primitives/Object.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "alias": "layout.gridcolumn",
        "extended": "Ext.layout.container.HBox,Ext.layout.container.Box,Ext.layout.container.Container,Ext.layout.Layout,Object",
        "extends": "Ext.layout.container.HBox",
        "name": "Ext.grid.ColumnLayout",
        "requires": "Ext.panel.Table",
        "text": "This class is used only by the grid's HeaderContainer docked child.\n\nIt adds the ability to shrink the vertical size of the inner container element back if a grouped\ncolumn header has all its child columns dragged out, and the whole HeaderContainer needs to shrink back down.\n\nAlso, after every layout, after all headers have attained their 'stretchmax' height, it goes through and calls\n`setPadding` on the columns so that they lay out correctly.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "align",
                "optional": true,
                "text": "Controls how the child items of the container are aligned. The value is used to\nposition items \"perpendicularly\". That is, for horizontal boxes (where <a href='#!/api/Ext.grid.ColumnLayout-cfg-vertical'>vertical</a>\nis `false`), then this will position items vertically. Otherwise, this will position\nitems horizontally. The acceptable values for this property are best explained in\ncontext with the value of <a href='#!/api/Ext.grid.ColumnLayout-cfg-vertical'>vertical</a>.\n\nIf <a href='#!/api/Ext.grid.ColumnLayout-cfg-vertical'>vertical</a> is `false` then this layout is behaving as an `hbox` and this config\noperates as follows:\n\n- **begin** : Child items are aligned vertically at the top of the container.\n- **middle** : Child items are vertically centered in the container.\n- **end** : Child items are aligned vertically at the bottom of the container.\n- **stretch** : Child items are stretched vertically to fill the height of the container.\n- **stretchmax** : Child items are stretched vertically to the height of the largest item.\n\nIf <a href='#!/api/Ext.grid.ColumnLayout-cfg-vertical'>vertical</a> is `true` then this layout is behaving as an `vbox` and this config\noperates as follows:\n\n- **begin** : Child items are aligned horizontally at the left side of the container.\n- **middle** : Child items are horizontally centered in the container.\n- **end** : Child items are aligned horizontally at the right of the container.\n- **stretch** : Child items are stretched horizontally to fill the width of the container.\n- **stretchmax** : Child items are stretched horizontally to the size of the largest item.\n\nFor backwards compatibility, the following values are also recognized:\n\n- **left** : Same as **begin**.\n- **top** : Same as **begin**.\n- **center** : Same as **middle**.\n- **right** : Same as **end**.\n- **bottom** : Same as **end**.\n",
                "type": "String",
                "value": "\"begin\"",
                "src": {
                  "name": "1,23,27",
                  "text": "1,24,12,1638",
                  "type": "1,23,18",
                  "value": "1,23,33"
                }
              },
              {
                "$type": "property",
                "name": "alignRoundingMethod",
                "optional": true,
                "text": "The Math method\nto use for rounding fractional pixels when <a href='#!/api/Ext.grid.ColumnLayout-cfg-align'>align</a>:middle` is used.\nThe possible values are:\n\n - [round](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n - [floor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n - [ceil](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n",
                "type": "\"round\"/\"floor\"/\"ceil\"",
                "value": "'round'",
                "src": {
                  "name": "1,161,43",
                  "text": "1,161,72,16:1,162,12,412",
                  "type": "1,161,18",
                  "value": "1,161,63"
                }
              },
              {
                "$type": "property",
                "access": "protected",
                "name": "animatePolicy",
                "since": "4.1.0",
                "text": "An object that contains as keys the names of the properties that can be animated\nby child items as a consequence of a layout. This config is used internally by the\n<a href='#!/api/Ext.layout.container.Accordion'>Ext.layout.container.Accordion</a> layout to cause the child panels\nto animate to their proper size and position after a collapse/expand event.\n",
                "type": "Object",
                "src": {
                  "access": "2,233,8",
                  "name": "2,228,22",
                  "since": "2,234,15",
                  "text": "2,229,8,322",
                  "type": "2,228,14"
                }
              },
              {
                "$type": "property",
                "name": "childEls",
                "text": "The canonical form of <a href='#!/api/Ext.grid.ColumnLayout-cfg-childEls'>childEls</a> is an object keyed by child's property name\nwith values that are objects with the following properties.\n\n- `itemId` - The id to combine with the Component's id that is the id of the\n  child element.\n- `id` - The id of the child element.\n- `leaf` - Set to `true` to ignore content when scanning for childEls. This\n should be set on things like the generated content for an <a href='#!/api/Ext.view.View'>Ext.view.View</a>.\n- `select`: A selector that will be passed to <a href='#!/api/Ext.dom.Element-method-select'>Ext.dom.Element#method-select</a>.\n- `selectNode`: A selector that will be passed to <a href='#!/api/Ext.dom.Element-method-selectNode'>Ext.dom.Element#method-selectNode</a>.\n\nFor example:\n\n     childEls: {\n         button: true,\n         buttonText: 'text',\n         buttonImage: {\n             itemId: 'image'\n         }\n     }\n\nThe above is translated into the following complete form:\n\n     childEls: {\n         button: {\n             name: 'button',\n             itemId: 'button'\n         },\n         buttonText: {\n             name: 'buttonText',\n             itemId: 'text'\n         },\n         buttonImage: {\n             name: 'buttonImage',\n             itemId: 'image'\n         }\n     }\n\nThe above can be provided as an array like so:\n\n     childEls: [\n         'button',\n         { name: 'buttonText', itemId: 'text' },\n         { name: 'buttonImage', itemId: 'image' }\n     }\n\nFor example, a Component which renders a title and body text:\n\n    @example\n    Ext.create('Ext.Component', {\n        renderTo: Ext.getBody(),\n        renderTpl: [\n            '<h1 id=\"{id}-title\" data-ref=\"title\">{title}</h1>',\n            '<p>{msg}</p>',\n        ],\n        renderData: {\n            title: \"Error\",\n            msg: \"Something went wrong\"\n        },\n        childEls: [\"title\"],\n        listeners: {\n            afterrender: function(cmp){\n                // After rendering the component will have a title property\n                cmp.title.setStyle({color: \"red\"});\n            }\n        }\n    });\n\n**Note:** `childEl`s in the <a href='#!/api/Ext.Component-cfg-renderTpl'>Ext.Component#cfg-renderTpl</a>\nmust be referenced in a **data-ref** attribute.  Notice in the above example\nthat the \"title\" `childEl` is set in the `renderTpl` using\n**data-ref=\"title\"**.\n\nWhen using `select`, the property will be an instance of <a href='#!/api/Ext.dom.CompositeElement'>Ext.CompositeElement</a>.\nIn all other cases, the property will be an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> or <a href='#!/api/null'>null</a>\nif not found.\n\nCare should be taken when using `select` or `selectNode` to find child elements.\nThe following issues should be considered:\n\n- Performance: using selectors can be 10x slower than id lookup.\n- Over-selecting: selectors are applied after the DOM elements for all children\n  have been rendered, so selectors can match elements from child components\n  (including nested versions of the same component) accidentally.\n\nThis above issues are most important when using `select` since it returns multiple\nelements.\n",
                "type": "Object/String[]/Object[]",
                "src": {
                  "name": "3,70,44",
                  "text": "3,71,12,2854",
                  "type": "3,70,18"
                }
              },
              {
                "$type": "property",
                "name": "constrainAlign",
                "text": "Limits the size of <a href='#!/api/Ext.grid.ColumnLayout-cfg-align'>align</a> components to the size of the container\nunder certain circumstances. Firstly, the container's height (for `hbox`) or width\n(for `vbox`) must not be determined by the size of the child components. Secondly,\nthe child components must have <a href='#!/api/Ext.Component-cfg-shrinkWrap'>Ext.AbstractComponent#shrinkWrap</a>\nenabled for this dimension.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,59,27",
                  "text": "1,60,12,359",
                  "type": "1,59,18"
                }
              },
              {
                "$type": "property",
                "name": "enableSplitters",
                "optional": true,
                "text": "This flag can be set to `false` to ignore the `split` config on box items. This is\nset to `false` by <a href='#!/api/Ext.layout.container.Accordion'>Ext.layout.container.Accordion</a>.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "1,69,28",
                  "text": "1,70,12,135",
                  "type": "1,69,18",
                  "value": "1,69,44"
                }
              },
              {
                "$type": "property",
                "name": "itemCls",
                "text": "An optional extra CSS class that will be added to the container. This can be useful for\nadding customized styles to the container or any of its children using standard CSS\nrules. See <a href='#!/api/Ext.Component'>Ext.Component</a>.<a href='#!/api/Ext.Component-cfg-componentCls'>Ext.Component#componentCls</a> also.\n",
                "type": "String",
                "src": {
                  "name": "4,25,22",
                  "text": "4,26,8,259",
                  "type": "4,25,14"
                }
              },
              {
                "$type": "property",
                "name": "overflowHandler",
                "text": "An overflow handler or config object for an overflow handler.  This is typically\nspecified as one of the following strings:\n\n- `scroller` - Scroller buttons are rendered before and after the content.\n- `menu` - Overflowing items are rendered into a menu, and a button is rendered\n   after the items, which shows the menu when clicked.\n\nNOTE: This config is currently only supported when box layout is used by the\nfollowing components:\n\n- <a href='#!/api/Ext.toolbar.Toolbar'>Ext.toolbar.Toolbar</a>\n- <a href='#!/api/Ext.menu.Menu'>Ext.menu.Menu</a>\n- <a href='#!/api/Ext.toolbar.Breadcrumb'>Ext.toolbar.Breadcrumb</a>\n- <a href='#!/api/Ext.tab.Bar'>Ext.tab.Bar</a>\n\nComponents where <a href='#!/api/Ext.grid.ColumnLayout-cfg-overflowHandler'>overflowHandler</a> is not supported should use\n<a href='#!/api/Ext.Component-cfg-scrollable'>Ext.Component#scrollable</a>:true` if they have overflowing\ncontent.\n",
                "type": "String/Ext.layout.container.boxOverflow.None",
                "src": {
                  "name": "1,97,0",
                  "text": "1,78,12,694",
                  "type": "1,77,18"
                }
              },
              {
                "$type": "property",
                "name": "pack",
                "text": "Controls how the child items of the container are packed together. Acceptable\nconfiguration values for this property are:\n\n  - **start** - child items are packed together at **left** (HBox) or **top**\n    (VBox) side of container (*default**)\n  - **center** - child items are packed together at **mid-width** (HBox) or\n    **mid-height** (VBox) of container\n  - **end** - child items are packed together at **right** (HBox) or **bottom**\n    (VBox) side of container\n",
                "type": "String",
                "src": {
                  "name": "1,129,26",
                  "text": "1,130,12,467",
                  "type": "1,129,18"
                }
              },
              {
                "$type": "property",
                "name": "padding",
                "text": "Sets the padding to be applied to all child items managed by this layout.\n\nThis property must be specified as a string containing space-separated, numeric\npadding values. The order of the sides associated with each value matches the\nway CSS processes padding values:\n\n  - If there is only one value, it applies to all sides.\n  - If there are two values, the top and bottom borders are set to the first\n    value and the right and left are set to the second.\n  - If there are three values, the top is set to the first value, the left and\n    right are set to the second, and the bottom is set to the third.\n  - If there are four values, they apply to the top, right, bottom, and left,\n    respectively.\n",
                "type": "String",
                "src": {
                  "name": "1,111,26",
                  "text": "1,112,12,702",
                  "type": "1,111,18"
                }
              },
              {
                "$type": "property",
                "name": "stretchMaxPartner",
                "text": "Allows stretchMax calculation to take into account the max perpendicular size\n(height for HBox layout and width for VBox layout) of another Box layout when\ncalculating its maximum perpendicular child size.\n\nIf specified as a string, this may be either a known Container ID, or a\nComponentQuery selector which is rooted at this layout's Container (ie, to find\na sibling, use `\"^>#siblingItemId`).\n",
                "type": "String/Ext.Component",
                "src": {
                  "name": "1,143,40",
                  "text": "1,144,12,396",
                  "type": "1,143,18"
                }
              },
              {
                "$type": "property",
                "name": "vertical",
                "optional": true,
                "text": "Set to `true` to switch the layout to `vbox`.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "1,155,28",
                  "text": "1,156,12,46",
                  "type": "1,155,18",
                  "value": "1,155,37"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addChildEl",
                "since": "6.0.0",
                "text": "Add a childEl specific to this instance. This must be called before render.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "childEl",
                    "src": {
                      "name": "3,231,19"
                    }
                  }
                ],
                "src": {
                  "access": "3,232,12",
                  "name": "3,235,0",
                  "since": "3,233,19",
                  "text": "3,230,12,76"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterClassMixedIn",
                "text": "Called after the mixin is applied. We need to see if <a href='#!/api/Ext.grid.ColumnLayout-cfg-childEls'>childEls</a> were used by\nthe `targetClass` and apply them to the config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetClass",
                    "type": "Ext.Class",
                    "src": {
                      "name": "3,253,31",
                      "type": "3,253,20"
                    }
                  }
                ],
                "src": {
                  "access": "3,254,12",
                  "name": "3,256,0",
                  "text": "3,251,12,125"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterCollapse",
                "text": "Called by an owning Panel after the Panel finishes its collapse process.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "2,563,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animated",
                    "src": {
                      "name": "2,563,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,560,8",
                  "name": "2,563,0",
                  "text": "2,561,8,73"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterExpand",
                "text": "Called by an owning Panel after the Panel finishes its expand process.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "2,573,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animated",
                    "src": {
                      "name": "2,573,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,570,8",
                  "name": "2,573,0",
                  "text": "2,571,8,71"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterRemove",
                "text": "Removes layout's itemCls and owning Container's itemCls.\nClears the managed dimensions flags\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "2,540,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,538,8",
                  "name": "2,540,0",
                  "text": "2,536,8,93"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "attachChildEls",
                "text": "Sets references to elements inside the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "src": {
                      "name": "3,274,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "3,274,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,272,12",
                  "name": "3,274,0",
                  "text": "3,271,12,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beginCollapse",
                "text": "Called by an owning Panel before the Panel begins its collapse process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "src": {
                      "name": "1,355,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,351,8",
                  "name": "1,355,0",
                  "text": "1,352,8,151"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "beginExpand",
                "text": "Called by an owning Panel before the Panel begins its expand process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "src": {
                      "name": "1,372,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,368,8",
                  "name": "1,372,0",
                  "text": "1,369,8,149"
                }
              },
              {
                "$type": "method",
                "name": "beginLayout",
                "text": "In addition to work done by our base classes, containers benefit from some extra\ncached data. The following properties are added to the ownerContext:\n\n - visibleItems: the result of <a href='#!/api/Ext.grid.ColumnLayout-method-getVisibleItems'>getVisibleItems</a>\n - childItems: the ContextItem[] for each visible item\n - targetContext: the ContextItem for the <a href='#!/api/Ext.grid.ColumnLayout-method-getTarget'>getTarget</a> element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "src": {
                      "name": "4,92,0"
                    }
                  }
                ],
                "src": {
                  "name": "4,92,0",
                  "text": "4,85,8,331"
                }
              },
              {
                "$type": "method",
                "name": "beginLayoutCycle",
                "text": "Called before any calculation cycles to reset DOM values and prepare for calculation.\n\nThis is a write phase and DOM reads should be strictly avoided when overridding\nthis method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "2,98,40",
                      "text": "2,98,53,40:2,99,8,11",
                      "type": "2,98,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,100,16",
                  "text": "2,93,8,181"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "cacheFlexes",
                "text": "This method is called to (re)cache our understanding of flexes. This happens during beginLayoutCycle and may need to\nbe called again if the flexes are changed during the layout (e.g., like ColumnLayout).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "type": "Object",
                    "src": {
                      "name": "1,524,24",
                      "type": "1,524,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,525,8",
                  "name": "1,527,0",
                  "text": "1,522,8,204"
                }
              },
              {
                "$type": "method",
                "abstract": true,
                "name": "calculate",
                "text": "Called to perform the calculations for this layout. This method will be called at\nleast once and may be called repeatedly if the <a href='#!/api/Ext.grid.ColumnLayout-property-done'>done</a> property is cleared\nbefore return to indicate that this layout is not yet done. The <a href='#!/api/Ext.grid.ColumnLayout-property-done'>done</a> property\nis always set to `true` before entering this method.\n\nThis is a read phase and DOM writes should be strictly avoided in derived classes.\nInstead, DOM writes need to be written to <a href='#!/api/Ext.layout.ContextItem'>Ext.layout.ContextItem</a> objects to\n be flushed at the next opportunity.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "2,138,40",
                      "text": "2,138,53,40:2,139,8,11",
                      "type": "2,138,16"
                    }
                  }
                ],
                "src": {
                  "abstract": "2,141,8",
                  "name": "2,140,16",
                  "text": "2,129,8,509"
                }
              },
              {
                "$type": "method",
                "name": "completeLayout",
                "text": "This method (if implemented) is called at the end of the cycle in which this layout\ncompletes (by not setting <a href='#!/api/Ext.grid.ColumnLayout-property-done'>done</a> to `false` in <a href='#!/api/Ext.grid.ColumnLayout-method-calculate'>calculate</a>). It is\npossible for the layout to complete and yet become invalid before the end of the cycle,\nin which case, this method will not be called. It is also possible for this method to\nbe called and then later the layout becomes invalidated. This will result in\n<a href='#!/api/Ext.grid.ColumnLayout-method-calculate'>calculate</a> being called again, followed by another call to this method.\n\nThis is a read phase and DOM writes should be strictly avoided in derived classes.\nInstead, DOM writes need to be written to <a href='#!/api/Ext.layout.ContextItem'>Ext.layout.ContextItem</a> objects to\nbe flushed at the next opportunity.\n\nThis method need not be implemented by derived classes and, in fact, should only be\nimplemented when needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "2,159,40",
                      "text": "2,159,53,40:2,160,8,11",
                      "type": "2,159,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,161,16",
                  "text": "2,145,8,811"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "configureItem",
                "text": "Adds layout's itemCls and owning Container's itemCls\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "4,156,0"
                    }
                  }
                ],
                "src": {
                  "access": "4,154,8",
                  "name": "4,156,0",
                  "text": "4,153,8,53"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "5,40,21",
                      "text": "5,40,28,19",
                      "type": "5,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "5,38,12",
                  "text": "5,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "destroy",
                "text": "Destroys this layout. This method removes a `targetCls` from the `target`\nelement and calls `onDestroy`.\n\nA derived class can override either this method or `onDestroy` but in all\ncases must call the base class versions of these methods to allow the base class to\nperform its cleanup.\n\nThis method (or `onDestroy`) are overridden by subclasses most often to purge\nevent handlers or remove unmanged DOM nodes.\n",
                "src": {
                  "access": "2,590,8",
                  "name": "2,592,0",
                  "text": "2,580,8,410"
                }
              },
              {
                "$type": "method",
                "name": "finalizeLayout",
                "text": "This method (if implemented) is called after all layouts have completed. In most\nways this is similar to <a href='#!/api/Ext.grid.ColumnLayout-method-completeLayout'>completeLayout</a>. This call can cause this (or any\nlayout) to be become invalid (see <a href='#!/api/Ext.layout.Context-method-invalidate'>Ext.layout.Context#invalidate</a>), but this\nis best avoided. This method is intended to be where final reads are made and so it\nis best to avoid invalidating layouts at this point whenever possible. Even so, this\nmethod can be used to perform final checks that may require all other layouts to be\ncomplete and then invalidate some results.\n\nThis is a read phase and DOM writes should be strictly avoided in derived classes.\nInstead, DOM writes need to be written to <a href='#!/api/Ext.layout.ContextItem'>Ext.layout.ContextItem</a> objects to\nbe flushed at the next opportunity.\n\nThis method need not be implemented by derived classes and, in fact, should only be\nimplemented when needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "2,180,40",
                      "text": "2,180,53,40:2,181,8,11",
                      "type": "2,180,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,182,16",
                  "text": "2,165,8,857"
                }
              },
              {
                "$type": "method",
                "name": "finishedLayout",
                "text": "This method is called after all layouts are complete and their calculations flushed\nto the DOM. No further layouts will be run and this method is only called once per\nlayout run. The base component layout caches `lastComponentSize`.\n\nThis is a write phase and DOM reads should be avoided if possible when overridding\nthis method.\n\nThis method need not be implemented by derived classes and, in fact, should only be\nimplemented when needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "2,196,40",
                      "text": "2,196,53,40:2,197,8,11",
                      "type": "2,196,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,199,0",
                  "text": "2,186,8,441"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getContainerSize",
                "text": "Local getContainerSize implementation accounts for vertical scrollbar in the view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "src": {
                      "name": "0,301,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,298,8",
                  "name": "0,301,0",
                  "text": "0,299,8,83"
                }
              },
              {
                "$type": "method",
                "name": "getElementTarget",
                "text": "Returns the element into which extra functional DOM elements can be inserted. Defaults to the owner Component's encapsulating element.\n\nMay be overridden in Component layout managers which implement a <a href='#!/api/Ext.grid.ColumnLayout-method-getRenderTarget'>getRenderTarget</a> which must only\ncontain child components.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "4,397,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,399,0",
                  "text": "4,393,8,292"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getItemLayoutEl",
                "text": "For a given item, returns the element that participates in the childNodes array\nof the layout's target element.  This is usually the component's \"el\", but can\nalso be a wrapper\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,430,31",
                      "type": "2,430,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "HTMLElement",
                    "src": {
                      "type": "2,431,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,429,8",
                  "name": "2,433,0",
                  "text": "2,426,8,177"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getItemSizePolicy",
                "text": "Returns an object describing how this layout manages the size of the given component.\nThis method must be implemented by any layout that manages components.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,245,31",
                      "type": "2,245,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object describing the sizing done by the layout\nfor this item.\n",
                    "type": "Ext.layout.SizePolicy",
                    "src": {
                      "text": "2,246,40,51:2,247,8,15",
                      "type": "2,246,17"
                    }
                  }
                ],
                "src": {
                  "access": "2,248,8",
                  "name": "2,250,0",
                  "text": "2,242,8,158"
                }
              },
              {
                "$type": "method",
                "name": "getLayoutItems",
                "text": "Returns an array of child components either for a render phase (Performed in the beforeLayout\nmethod of the layout's base class), or the layout phase (onLayout).\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "of child components\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "4,338,34,20",
                      "type": "4,338,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,340,0",
                  "text": "4,336,8,162"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getRenderedItems",
                "text": "Returns all items that are rendered\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "All matching items\n",
                    "type": "Array",
                    "src": {
                      "text": "4,360,24,19",
                      "type": "4,360,17"
                    }
                  }
                ],
                "src": {
                  "access": "4,358,8",
                  "name": "4,362,0",
                  "text": "4,359,8,36"
                }
              },
              {
                "$type": "method",
                "name": "getRenderTarget",
                "text": "Returns the element into which rendering must take place. Defaults to the owner Container's\ntarget element.\n\nMay be overridden in layout managers which implement an inner element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "4,386,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,388,0",
                  "text": "4,381,8,181"
                }
              },
              {
                "$type": "method",
                "name": "getTarget",
                "text": "Returns the owner component's resize element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "4,476,17"
                    }
                  }
                ],
                "src": {
                  "name": "4,478,0",
                  "text": "4,475,8,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getVisibleItems",
                "text": "Returns all items that are both rendered and visible\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "All matching items\n",
                    "type": "Array",
                    "src": {
                      "text": "4,485,24,19",
                      "type": "4,485,17"
                    }
                  }
                ],
                "src": {
                  "access": "4,483,8",
                  "name": "4,487,0",
                  "text": "4,484,8,53"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.grid.ColumnLayout-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "5,100,20",
                      "text": "5,100,25,34",
                      "type": "5,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "5,101,22,57:5,102,4,15",
                      "type": "5,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,53,12",
                  "text": "5,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initLayout",
                "text": "A one-time initialization method called just before rendering.\n",
                "src": {
                  "access": "2,506,8",
                  "name": "2,508,0",
                  "text": "2,505,8,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "insertSplitter",
                "text": "Inserts the splitter for a given region. A reference to the splitter is also stored\non the component as \"splitter\".\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "1,1278,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "src": {
                      "name": "1,1278,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "hidden",
                    "src": {
                      "name": "1,1278,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "splitterCfg",
                    "src": {
                      "name": "1,1278,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,1276,8",
                  "name": "1,1278,0",
                  "text": "1,1274,8,116"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.grid.ColumnLayout-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "5,148,20",
                      "text": "5,148,30,71:5,149,4,18",
                      "type": "5,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "5,150,20",
                      "text": "5,150,27,50",
                      "type": "5,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "5,151,22,56",
                      "type": "5,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,106,12",
                  "text": "5,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "isValidParent",
                "text": "Validates item is in the proper place in the dom.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "2,409,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "2,409,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "src": {
                      "name": "2,409,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,407,8",
                  "name": "2,409,0",
                  "text": "2,406,8,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "moveItem",
                "text": "Moves Component to the provided target instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "2,482,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "2,482,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "src": {
                      "name": "2,482,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,480,8",
                  "name": "2,482,0",
                  "text": "2,479,8,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "notifyOwner",
                "text": "Called for every layout in the layout context after all the layouts have been finally flushed\n",
                "src": {
                  "access": "4,233,8",
                  "name": "4,236,0",
                  "text": "4,234,8,94"
                }
              },
              {
                "$type": "method",
                "name": "onContentChange",
                "text": "This method is called when a child item changes in some way. By default this calls\n<a href='#!/api/Ext.Component-updateLayout'>Ext.Component#updateLayout</a> on this layout's owner.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "text": "The child item that has changed.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,496,31",
                      "text": "2,496,37,33",
                      "type": "2,496,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if this layout has handled the content change.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,497,26,52",
                      "type": "2,497,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,499,0",
                  "text": "2,493,8,143"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.grid.ColumnLayout-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.grid.ColumnLayout-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "5,220,20",
                      "text": "5,220,25,34",
                      "type": "5,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "5,221,22,57:5,222,4,22",
                      "type": "5,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,155,12",
                  "text": "5,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "renderItem",
                "text": "Renders the given Component into the target Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The Component to render\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "2,463,31",
                      "text": "2,463,36,24",
                      "type": "2,463,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The target Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "2,464,33",
                      "text": "2,464,40,19",
                      "type": "2,464,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "text": "The position within the target to render the item to\n",
                    "type": "Number",
                    "src": {
                      "name": "2,465,24",
                      "text": "2,465,33,53",
                      "type": "2,465,16"
                    }
                  }
                ],
                "src": {
                  "access": "2,466,8",
                  "name": "2,468,0",
                  "text": "2,462,8,53"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "renderItems",
                "text": "Iterates over all passed items, ensuring they are rendered.  If the items are already rendered,\nalso determines if the items are in the proper place in the dom.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "items",
                    "src": {
                      "name": "2,382,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "2,382,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,380,8",
                  "name": "2,382,0",
                  "text": "2,378,8,161"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setOwner",
                "text": "Sets the layout owner\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "2,516,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,513,8",
                  "name": "2,516,0",
                  "text": "2,514,8,22"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.grid.ColumnLayout-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.grid.ColumnLayout-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.grid.ColumnLayout-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.grid.ColumnLayout-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "5,235,21,32",
                      "type": "5,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,226,12",
                  "text": "5,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "5,297,21,32",
                      "type": "5,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,239,12",
                  "text": "5,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.grid.ColumnLayout-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.grid.ColumnLayout-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.grid.ColumnLayout-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.grid.ColumnLayout-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.grid.ColumnLayout-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.grid.ColumnLayout-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.grid.ColumnLayout-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.grid.ColumnLayout-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.grid.ColumnLayout-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.grid.ColumnLayout-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "5,340,21,50",
                      "type": "5,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "5,301,12",
                  "text": "5,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "activeItemCount",
                "text": "tracks the number of child items that do not use \"liquid\" CSS layout\n",
                "src": {
                  "access": "4,60,8",
                  "name": "4,63,0",
                  "text": "4,61,8,69"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "animatePolicy",
                "text": "An object which contains boolean properties specifying which properties are to be\nanimated upon flush of child Component ContextItems. For example, Accordion would\nhave:\n\n     {\n         y: true,\n         height: true\n     }\n",
                "src": {
                  "access": "4,55,8",
                  "name": "4,57,0",
                  "text": "4,46,8,226"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "beginCollapse",
                "text": "Called by an owning Panel before the Panel begins its collapse process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "src": {
                  "access": "4,32,8",
                  "name": "4,36,0",
                  "text": "4,33,8,151"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "beginExpand",
                "text": "Called by an owning Panel before the Panel begins its expand process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "src": {
                  "access": "4,39,8",
                  "name": "4,43,0",
                  "text": "4,40,8,149"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.grid.ColumnLayout-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "5,346,14",
                  "text": "5,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "done",
                "text": "Used only during a layout run, this value indicates that a\nlayout has finished its calculations. This flag is set to true prior to the call to\n<a href='#!/api/Ext.grid.ColumnLayout-method-calculate'>calculate</a> and should be set to false if this layout has more work to do.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,75,28",
                  "text": "2,75,33,59:2,76,8,166",
                  "type": "2,75,19"
                }
              },
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "6,295,28",
                  "text": "6,296,8,128",
                  "type": "6,295,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "getScrollerEl",
                "text": "Returns the element that wraps the contents for the purposes of touch scrolling.\nOnly applicable when the layout adds the scroller element as part of its renderTpl\n(e.g. autocontainer and box)\n",
                "src": {
                  "access": "2,258,8",
                  "name": "2,260,0",
                  "text": "2,255,8,193"
                }
              },
              {
                "$type": "property",
                "name": "isLayout",
                "readonly": true,
                "text": "`true` in this class to identify an object as an instantiated Layout, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,22,28",
                  "readonly": "2,24,8",
                  "text": "2,23,8,91",
                  "type": "2,22,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "needsItemSize",
                "text": "`true` if this layout may need to incorporate the dimensions of individual child\nitems into its layout calculations.  Layouts that handle the size of their children\nas a group (autocontainer, form) can set this to false for an additional performance\noptimization.  When `false` the layout system will not recurse into the child\nitems if <a href='#!/api/Ext.layout.container.Container-property-activeItemCount'>Ext.layout.container.Container#activeItemCount</a> is `0`, which will be the case if all child items\nuse \"liquid\" CSS layout, e.g. form fields.  (See Ext.Component#liquidLayout)\n",
                "src": {
                  "access": "2,31,8",
                  "name": "2,39,0",
                  "text": "2,32,8,519"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "5,46,14",
                  "text": "5,47,4,65"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "setsItemSize",
                "text": "`true` if this layout may set the size of its child items.  Layouts that do not\nset the size of their child items (autocontainer, form) can set this to false\nfor an additional performance optimization.  When `true` the layout system will\nnot create a context item for children that use liquid layout, because there is\nno need for a context item if item size is neither read nor set by the owning layout.\n",
                "src": {
                  "access": "2,42,8",
                  "name": "2,49,0",
                  "text": "2,43,8,404"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,2,4",
          "alias": "0,14,0",
          "extends": "0,13,0",
          "name": "0,12,0",
          "requires": "0,18,0",
          "text": "0,4,4,448"
        }
      }
    ]
  },
  "version": 1
}