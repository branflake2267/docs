{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/mixin/Inheritable.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "extended": "Ext.Mixin,Object",
        "extends": "Ext.Mixin",
        "name": "Ext.mixin.Inheritable",
        "since": "5.0.0",
        "text": "A mixin that provides the functionality for inheritable configs. This allows linking\ncomponents and containers via a prototype-chained object for accessing inherited\nvalues.\n\n## Getting Inherited Properties\n\nA component's inherited state is used to keep track of aspects of a component's state\nthat might be influenced by its ancestors like \"collapsed\" and \"hidden\". For example:\n\n     var hidden = this.getInheritedConfig('hidden');\n\nThe above will produce `true` if this or any ancestor component has its `hidden` config\nset to `true`.\n\n## Chained Objects\n\nInheritable properties are implemented by chaining each component's inherited state\nobject to its parent container's inherited state object via the prototype. The result\nis such that if a component's `inheritedState` does not have it's own property, it\ninherits the property from the nearest ancestor that does.\n\nIn the case of a Container, two state objects are created. The primary (\"outer\") object\nis used for reading inherited properties. It is also what a child will prototype chain\nto if that child is not part of the container's `items` collection. Anything in the\n`items` collection will chain to the inheritedStateInner object instead. This object is\nprototype chained to inheritedState but allows for Container's layout to set inherited\nproperties that specifically apply only to children of the container. This inner object\nis unlikely to be needed by user code.\n\n## Publishing Inherited Properties\n\nThe first step to publishing inherited properties is to override <a href='#!/api/Ext.mixin.Inheritable-method-initInheritedState'>initInheritedState</a>\nand add properties that have inheritable values.\n\n     initInheritedState: function (inheritedState) {\n         this.callParent(arguments);\n\n         if (this.getHidden()) {\n             inheritedState.hidden = true;\n         }\n     }\n\nThe above is important because <a href='#!/api/Ext.mixin.Inheritable-method-initInheritedState'>initInheritedState</a> is called whenever the object needs\nto be repopulated. As you can see, only `true` values are added to `inheritedState` in\nthis case because `false` would mask a `hidden` value of `true` from an ancestor.\n\nIf these values change dynamically, these properties must be maintained. For example:\n\n     updateHidden: function (hidden) {\n         var inherited = this.getInherited();\n\n         if (hidden) {\n             inherited.hidden = true;\n         } else {\n             // Unmask whatever may be inherited:\n             delete inherited.hidden;\n         }\n     }\n\n## Proper Usage\n\nALWAYS access inherited state using <a href='#!/api/Ext.mixin.Inheritable-method-getInherited'>getInherited</a> or <a href='#!/api/Ext.mixin.Inheritable-method-getInheritedConfig'>getInheritedConfig</a>, not by\naccessing `inheritedState` directly.\n\nThe `inheritedState` property does not exist until the first call to <a href='#!/api/Ext.mixin.Inheritable-method-getInherited'>getInherited</a>. At\nthat point <a href='#!/api/Ext.mixin.Inheritable-method-getInherited'>getInherited</a> walks up the component tree to establish the `inheritedState`\nprototype chain. Additionally the `inheritedState` property should NOT be relied upon\neven after the initial call to <a href='#!/api/Ext.mixin.Inheritable-method-getInherited'>getInherited</a> because it is possible for it to become\ninvalid.\n\nInvalidation typically happens when a component is moved to a new container. In such a\ncase the `inheritedState` remains invalid until the next time <a href='#!/api/Ext.mixin.Inheritable-method-getInherited'>getInherited</a> is called\non the component or one of its descendants.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fixReference",
                "text": "Sets up a reference on our current reference holder.\n",
                "src": {
                  "access": "0,335,12",
                  "name": "0,337,0",
                  "text": "0,333,12,54"
                }
              },
              {
                "$type": "method",
                "name": "getInherited",
                "since": "5.0.0",
                "text": "This method returns an object containing the inherited properties for this instance.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "inner",
                    "optional": true,
                    "text": "Pass `true` to return `inheritedStateInner` instead\nof the normal `inheritedState` object. This is only needed internally and should\nnot be passed by user code.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,88,26",
                      "text": "0,88,39,52:0,89,8,110",
                      "type": "0,88,16",
                      "value": "0,88,32"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The `inheritedState` object containing inherited properties.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,92,25,61",
                      "type": "0,92,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,95,0",
                  "since": "0,93,15",
                  "text": "0,86,8,86"
                }
              },
              {
                "$type": "method",
                "name": "getInheritedConfig",
                "since": "5.0.0",
                "text": "This method returns the value of a config property that may be inherited from some\nancestor.\n\nIn some cases, a config may be explicitly set on a component with the intent of\n*only* being presented to its children while that component should act upon the\ninherited value (see `referenceHolder` for example). In these cases the `skipThis`\nparameter should be specified as `true`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the config property to return.\n",
                    "type": "String",
                    "src": {
                      "name": "0,152,24",
                      "text": "0,152,33,43",
                      "type": "0,152,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "Pass `true` if the property should be ignored if\nfound on this instance. In other words, `true` means the property must be inherited\nand not explicitly set on this instance.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,153,26",
                      "text": "0,153,42,49:0,154,8,125",
                      "type": "0,153,16",
                      "value": "0,153,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The value of the requested `property`.\n",
                    "type": "Mixed",
                    "src": {
                      "text": "0,156,24,39",
                      "type": "0,156,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,159,0",
                  "since": "0,157,15",
                  "text": "0,144,8,379"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getRefOwner",
                "text": "Used by <a href='#!/api/Ext.ComponentQuery'>Ext.ComponentQuery</a>, and the <a href='#!/api/Ext.Component-method-up'>Ext.Component#up</a>\nmethod to find the owning Component in the linkage hierarchy.\n\nBy default this returns the Container which contains this Component.\n\nThis may be overridden by Component authors who implement ownership hierarchies\nwhich are not based upon ownerCt, such as BoundLists being owned by Fields or Menus\nbeing owned by Buttons.\n",
                "src": {
                  "access": "0,285,8",
                  "name": "0,287,0",
                  "text": "0,277,8,408"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.mixin.Inheritable-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initInheritedState",
                "since": "5.0.0",
                "text": "This method is called to initialize the `inheritedState` objects for this instance.\nThis amounts to typically copying certain properties from the instance to the given\nobject.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "inheritedState",
                    "text": "The state object for this instance.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,300,24",
                      "text": "0,300,39,36",
                      "type": "0,300,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "inheritedStateInner",
                    "optional": true,
                    "text": "This object is only provided for containers.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,301,25",
                      "text": "0,301,46,45",
                      "type": "0,301,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,303,8",
                  "name": "0,302,16",
                  "since": "0,304,15",
                  "text": "0,296,8,177"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "invalidateInheritedState",
                "since": "5.0.0",
                "text": "This method marks the current inherited state as invalid. The next time a call is\nmade to <a href='#!/api/Ext.mixin.Inheritable-method-getInherited'>getInherited</a> the objects will be recreated and initialized.\n",
                "src": {
                  "access": "0,310,8",
                  "name": "0,313,0",
                  "since": "0,311,15",
                  "text": "0,308,8,152"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.mixin.Inheritable-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "lookupReferenceHolder",
                "since": "5.0.0",
                "text": "Gets the Controller or Component that is used as the reference holder for this view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "skipThis",
                    "optional": true,
                    "text": "`false` to return this as the reference holder if\nthis instance has set `referenceHolder`. Unlike <a href='#!/api/Ext.mixin.Inheritable-method-getInheritedConfig'>getInheritedConfig</a> this method\ndefaults to `true` because it is possible that a `reference` property set by the\nowner of a component that is also a `referenceHolder` itself. In this case, the\n`reference` connects not to this component but to the parent referenceHolder.\n",
                    "type": "Boolean",
                    "value": "true",
                    "src": {
                      "name": "0,261,26",
                      "text": "0,261,41,50:0,262,8,321",
                      "type": "0,261,16",
                      "value": "0,261,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The reference holder.\n",
                    "type": "Ext.app.ViewController/Ext.container.Container",
                    "src": {
                      "text": "0,267,65,22",
                      "type": "0,267,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,269,8",
                  "name": "0,272,0",
                  "since": "0,270,15",
                  "text": "0,259,8,86"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onInheritedAdd",
                "text": "Called when this Inheritable is added to a parent\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "instanced",
                    "type": "Boolean",
                    "src": {
                      "name": "0,351,29",
                      "type": "0,351,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,330,-1",
                  "name": "0,353,0",
                  "text": "0,350,12,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onInheritedRemove",
                "text": "Called when this inheritable is removed from a parent\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "destroying",
                    "text": "`true` if this item will be destroyed by it's container\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,369,29",
                      "text": "0,369,40,56",
                      "type": "0,369,20"
                    }
                  }
                ],
                "src": {
                  "access": "0,330,-1",
                  "name": "0,371,0",
                  "text": "0,368,12,54"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.mixin.Inheritable-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.mixin.Inheritable-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "since": "5.0.0",
                "text": "Gets the Controller or Component that is used as the event root for this view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "0,185,25",
                      "text": "0,185,44,46",
                      "type": "0,185,16",
                      "value": "0,185,38"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default listener scope.\n",
                    "type": "Ext.app.ViewController/Ext.container.Container",
                    "src": {
                      "text": "0,186,65,28",
                      "type": "0,186,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,188,8",
                  "name": "0,191,0",
                  "since": "0,189,15",
                  "text": "0,183,8,80"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveSatelliteListenerScope",
                "since": "5.1.1",
                "text": "Returns the default listener scope for a \"satellite\" of this component.\nUsed for resolving scope for observable objects that are not part of the normal\nContainer/Component hierarchy (for example, plugins)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "satellite",
                    "type": "Ext.mixin.Observable",
                    "src": {
                      "name": "0,227,38",
                      "type": "0,227,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "type": "Object",
                    "src": {
                      "name": "0,228,25",
                      "type": "0,228,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The listener scope\n",
                    "type": "Object",
                    "src": {
                      "text": "0,229,25,19",
                      "type": "0,229,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,230,8",
                  "name": "0,233,0",
                  "since": "0,231,15",
                  "text": "0,223,8,206"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.mixin.Inheritable-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.mixin.Inheritable-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.mixin.Inheritable-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.mixin.Inheritable-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.mixin.Inheritable-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.mixin.Inheritable-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.mixin.Inheritable-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.mixin.Inheritable-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.mixin.Inheritable-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.mixin.Inheritable-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.mixin.Inheritable-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.mixin.Inheritable-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.mixin.Inheritable-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.mixin.Inheritable-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.mixin.Inheritable-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,75,4",
          "extends": "0,79,0",
          "name": "0,78,0",
          "since": "0,76,11",
          "text": "0,2,4,3123"
        }
      }
    ]
  },
  "version": 1
}