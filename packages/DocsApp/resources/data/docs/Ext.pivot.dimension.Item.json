{
  "$type": "doxi",
  "files": [
    "../../../packages/pivot/src/pivot/dimension/Item.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Mz.aggregate.dimension.Item",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.pivot.dimension.Item",
        "requires": "Ext.pivot.MixedCollection,Ext.pivot.filter.Label,Ext.pivot.filter.Value",
        "text": "This class is used to initialize the dimensions defined on the pivot grid leftAxis,\ntopAxis and aggregate.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "aggregator",
                "optional": true,
                "text": "This is the function that should be used to aggregate when this is an aggregate dimension.\nYou can either provide a function name available in <a href='#!/api/Ext.pivot.Aggregators'>Ext.pivot.Aggregators</a> or\nset your own function.\n\nIt's probably best to override <a href='#!/api/Ext.pivot.Aggregators'>Ext.pivot.Aggregators</a> to add you own function\nand use that function name on this config. This way the stateles pivot will save this value.\n",
                "type": "String/Function",
                "value": "\"sum\"",
                "src": {
                  "name": "0,182,32",
                  "text": "0,183,8,378",
                  "type": "0,182,14",
                  "value": "0,182,43"
                }
              },
              {
                "$type": "property",
                "name": "align",
                "optional": true,
                "text": "Column alignment when this dimension is used on the top/left axis.\nUsed by the generated columns.\n",
                "type": "String",
                "value": "\"left\"",
                "src": {
                  "name": "0,64,23",
                  "text": "0,65,8,98",
                  "type": "0,64,14",
                  "value": "0,64,29"
                }
              },
              {
                "$type": "property",
                "name": "blankText",
                "optional": true,
                "text": "Default text to use when a group name is blank. This value is applied even if you set your own group renderer.\n",
                "type": "String",
                "value": "\"(blank)\"",
                "src": {
                  "name": "0,169,23",
                  "text": "0,170,8,111",
                  "type": "0,169,14",
                  "value": "0,169,33"
                }
              },
              {
                "$type": "property",
                "name": "caseSensitiveSort",
                "optional": true,
                "text": "If this dimension is sortable, should we do a case sensitive sort?\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,90,24",
                  "text": "0,91,8,67",
                  "type": "0,90,14",
                  "value": "0,90,42"
                }
              },
              {
                "$type": "property",
                "name": "dataIndex",
                "text": "(required)\nThe field name on the record from where this dimension extracts data.\n",
                "type": "String",
                "src": {
                  "name": "0,37,22",
                  "text": "0,37,32,11:0,38,8,70",
                  "type": "0,37,14"
                }
              },
              {
                "$type": "property",
                "name": "direction",
                "optional": true,
                "text": "If this dimension is sortable then this is the type of sorting.\n",
                "type": "\"ASC\"/\"DESC\"",
                "value": "\"ASC\"",
                "src": {
                  "name": "0,77,29",
                  "text": "0,78,8,64",
                  "type": "0,77,14",
                  "value": "0,77,39"
                }
              },
              {
                "$type": "property",
                "name": "filter",
                "text": "Provide a filter configuration to filter your axis items.\nThis works only on left/top axis dimensions.\n\nExample for a label filter:\n\n     {\n         dataIndex:  'year',\n         header:     'Year',\n         filter: {\n             type:       'label',\n             operator:   '=',\n             value:      2012\n         }\n     }\n\n\nExample for a value filter:\n\n     {\n         dataIndex:  'year',\n         header:     'Year',\n         filter: {\n             type:       'value',\n             operator:   'between',\n             value:      [2012, 2015]\n         }\n     }\n\n\nExample for a top 10 value filter:\n\n     {\n         dataIndex:  'year',\n         header:     'Year',\n         filter: {\n             type:           'value',\n             operator:       'top10',\n             dimensionId:    'value',   // this is the id of an aggregate dimension\n             topType:        'items',\n             topOrder:       'bottom'\n         }\n     }\n",
                "type": "Ext.pivot.filter.Base",
                "src": {
                  "name": "0,96,37",
                  "text": "0,97,8,946",
                  "type": "0,96,14"
                }
              },
              {
                "$type": "property",
                "name": "flex",
                "optional": true,
                "text": "Column flex when this dimension is used on the top/left axis.\nUsed by the generated columns.\n",
                "type": "Number",
                "value": "0",
                "src": {
                  "name": "0,57,23",
                  "text": "0,58,8,93",
                  "type": "0,57,14",
                  "value": "0,57,28"
                }
              },
              {
                "$type": "property",
                "name": "grouperFn",
                "text": "This function is used when the groups are generated for the axis.\nIt will return the value that will uniquely identify a group on the axis.\nie: you have a Date field that you want to group by year.\nThis renderer could return the year from that Date value.\n\nThe function receives one parameter and that is the record.\n",
                "type": "Function",
                "src": {
                  "name": "0,158,24",
                  "text": "0,159,8,317",
                  "type": "0,158,14"
                }
              },
              {
                "$type": "property",
                "name": "header",
                "text": "(required)\n\nThis text is visible in the pivot grid in the following cases:\n\n- the dimension is defined on the left axis. The pivot grid will generate one grid column per dimension and\nthis header will go into the grid column header.\n\n- the dimension is defined on the aggregate. The pivot grid will generate one grid column per dimension per top\naxis label. If there are at least 2 aggregate dimensions then this header will be visible. When only one is\ndefined the aggregate dimension header is replaced by the top axis label.\n\n- if the <a href='#!/api/Ext.pivot.plugin.Configurator'>Ext.pivot.plugin.Configurator</a> is used then this header will be visible\nin the axis panels.\n",
                "type": "String",
                "src": {
                  "name": "0,19,22",
                  "text": "0,19,29,11:0,20,8,647",
                  "type": "0,19,14"
                }
              },
              {
                "$type": "property",
                "name": "id",
                "text": "Unique id of this dimension.\n",
                "type": "String",
                "src": {
                  "name": "0,199,22",
                  "text": "0,200,8,29",
                  "type": "0,199,14"
                }
              },
              {
                "$type": "property",
                "name": "renderer",
                "text": "Default renderer for this dimension. This renderer is used when displaying the data in the pivot table.\nYou can either provide a string value with a number format or your own function.\nThe renderer function will have only one parameter and that is the value that need to be formatted.\nThe renderer function is running in the Dimension scope.\n\nIf a renderer function is defined for a left or top axis dimension then this is NOT used in the grid.\nIt is instead used for formatting the value as you wish.\n\nOn the other hand if you define a renderer function on an aggregate dimension then this will be\nused in the grid and allows you to change cell formatting as well.\n",
                "type": "String/Function",
                "src": {
                  "name": "0,143,31",
                  "text": "0,144,8,666",
                  "type": "0,143,14"
                }
              },
              {
                "$type": "property",
                "name": "showZeroAsBlank",
                "optional": true,
                "text": "Should 0 values be displayed as blank? This config is used when\nthis is an aggregate dimension.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,175,24",
                  "text": "0,176,8,96",
                  "type": "0,175,14",
                  "value": "0,175,40"
                }
              },
              {
                "$type": "property",
                "name": "sortable",
                "optional": true,
                "text": "Is this dimension sortable when the pivot is generated?\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,71,24",
                  "text": "0,72,8,56",
                  "type": "0,71,14",
                  "value": "0,71,33"
                }
              },
              {
                "$type": "property",
                "name": "sorterFn",
                "text": "Provide here your own sorting function for this dimension.\nIf none is specified then the defaultSorterFn is used.\n",
                "type": "Function",
                "src": {
                  "name": "0,83,24",
                  "text": "0,84,8,114",
                  "type": "0,83,14"
                }
              },
              {
                "$type": "property",
                "name": "sortIndex",
                "text": "Field name on the record used when sorting this dimension results. Defaults to <a href='#!/api/Ext.pivot.dimension.Item-cfg-dataIndex'>dataIndex</a> if\nnone is specified.\n",
                "type": "String",
                "src": {
                  "name": "0,43,22",
                  "text": "0,44,8,120",
                  "type": "0,43,14"
                }
              },
              {
                "$type": "property",
                "name": "values",
                "text": "Collection of unique values on this dimension; each item has a \"value\" and a \"display\".\n",
                "type": "Object[]",
                "src": {
                  "name": "0,205,24",
                  "text": "0,206,8,88",
                  "type": "0,205,14"
                }
              },
              {
                "$type": "property",
                "name": "width",
                "optional": true,
                "text": "Default column width when this dimension is used on the top/left axis.\nUsed by the generated columns.\n",
                "type": "Number",
                "value": "100",
                "src": {
                  "name": "0,50,23",
                  "text": "0,51,8,102",
                  "type": "0,50,14",
                  "value": "0,50,29"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "addValue",
                "text": "Add unique values available for this dimension. These are used when filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "src": {
                      "name": "0,316,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "display",
                    "src": {
                      "name": "0,317,15"
                    }
                  }
                ],
                "src": {
                  "name": "0,319,0",
                  "text": "0,314,8,80"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "defaultGrouperFn",
                "text": "Default grouper function used for rendering axis item values.\nThe grouper function can be used to group together multiple items.\nReturns a group value\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "src": {
                      "name": "0,417,15"
                    }
                  }
                ],
                "src": {
                  "name": "0,419,0",
                  "text": "0,413,8,152"
                }
              },
              {
                "$type": "method",
                "name": "defaultSorterFn",
                "text": "Default sorter function used to sort the axis dimensions on the same tree level.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "o1",
                    "src": {
                      "name": "0,345,15"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "o2",
                    "src": {
                      "name": "0,346,15"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Number",
                    "src": {
                      "type": "0,348,18"
                    }
                  }
                ],
                "src": {
                  "name": "0,350,0",
                  "text": "0,343,8,82"
                }
              },
              {
                "$type": "method",
                "name": "getDefaultFormatRenderer",
                "text": "Builds a renderer function by using the specified format.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "format",
                    "text": "Could be either a function or a string\n",
                    "src": {
                      "name": "0,380,15",
                      "text": "0,380,22,39"
                    }
                  }
                ],
                "src": {
                  "name": "0,382,0",
                  "text": "0,378,8,59"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Returns the internal id of this dimension.\n",
                "src": {
                  "name": "0,338,0",
                  "text": "0,336,8,43"
                }
              },
              {
                "$type": "method",
                "name": "getValues",
                "text": "Returns the collection of unique values available for this dimension.\n",
                "src": {
                  "name": "0,331,0",
                  "text": "0,329,8,70"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.pivot.dimension.Item-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.pivot.dimension.Item-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.pivot.dimension.Item-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.pivot.dimension.Item-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "serialize",
                "text": "Returns the serialized dimension data.\n",
                "src": {
                  "name": "0,293,0",
                  "text": "0,291,8,39"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.pivot.dimension.Item-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.pivot.dimension.Item-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.pivot.dimension.Item-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.pivot.dimension.Item-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.pivot.dimension.Item-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.pivot.dimension.Item-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.pivot.dimension.Item-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.pivot.dimension.Item-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.pivot.dimension.Item-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.pivot.dimension.Item-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.pivot.dimension.Item-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.pivot.dimension.Item-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.pivot.dimension.Item-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.pivot.dimension.Item-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.pivot.dimension.Item-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "isAggregate",
                "text": "True to identify a dimension of an aggregate configuration.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,193,28",
                  "text": "0,194,8,60",
                  "type": "0,193,19"
                }
              },
              {
                "$type": "property",
                "name": "matrix",
                "readonly": true,
                "text": "Reference to the matrix object.\n",
                "type": "Ext.pivot.matrix.Base",
                "src": {
                  "name": "0,211,42",
                  "readonly": "0,212,8",
                  "text": "0,213,8,32",
                  "type": "0,211,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "alternateClassNames": "0,9,0",
          "name": "0,7,0",
          "requires": "0,13,0,0:0,14,0,0:0,15,0,0",
          "text": "0,2,4,109"
        }
      }
    ]
  },
  "version": 1
}