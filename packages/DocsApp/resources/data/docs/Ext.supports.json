{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/env/Feature.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.supports",
        "singleton": true,
        "text": "\nContains information about features supported in the current environment as well\nas bugs detected.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.supports-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.supports-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.supports-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.supports-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.supports-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.supports-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.supports-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.supports-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.supports-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.supports-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.supports-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.supports-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.supports-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.supports-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.supports-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.supports-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.supports-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.supports-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "AsyncFocusEvents",
                "text": "`true` if the browser fires focus events (focus, blur, focusin, focusout)\nasynchronously, i.e. in a separate event loop invocation. This is only true\nfor all versions Internet Explorer; Microsoft Edge and other browsers fire\nfocus events synchronously.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,1333,28",
                  "text": "0,1334,8,253",
                  "type": "0,1333,19"
                }
              },
              {
                "$type": "property",
                "name": "Audio",
                "text": "`true` if the device supports the HTML5 `audio` tag.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,570,22",
                  "text": "0,570,28,53:0,571,12,77",
                  "type": "0,573,19"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "`Audio` instead.\n",
                "deprecatedVersion": "Use",
                "name": "AudioTag",
                "text": "`true` if the device supports the HTML5 `audio` tag.\n",
                "type": "Boolean",
                "src": {
                  "deprecatedMessage": "0,578,12",
                  "deprecatedVersion": "0,578,12",
                  "name": "0,576,22",
                  "text": "0,576,31,53",
                  "type": "0,577,19"
                }
              },
              {
                "$type": "property",
                "name": "BoundingClientRect",
                "text": "`true` if the browser supports the getBoundingClientRect method on elements\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,916,18",
                  "text": "0,916,37,76:0,918,8,77",
                  "type": "0,917,15"
                }
              },
              {
                "$type": "property",
                "name": "Canvas",
                "text": "`true` if the device supports Canvas.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,302,22",
                  "text": "0,302,29,38:0,303,12,77",
                  "type": "0,305,19"
                }
              },
              {
                "$type": "property",
                "name": "ChildContentClearedWhenSettingInnerHTML",
                "text": "`true` if created child elements\nlose their innerHTML when modifying the innerHTML of the parent element.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,964,18",
                  "text": "0,964,58,33:0,965,8,73:0,967,8,97",
                  "type": "0,966,15"
                }
              },
              {
                "$type": "property",
                "name": "ClassList",
                "text": "`true` if document environment supports the HTML5\nclassList API.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,290,22",
                  "text": "0,290,32,50:0,291,12,92",
                  "type": "0,294,19"
                }
              },
              {
                "$type": "property",
                "name": "CloneNodeCopiesExpando",
                "text": "`true` if the native DOM cloneNode method copies\nexpando properties to the newly cloned node.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,240,22",
                  "text": "0,240,45,49:0,241,12,122",
                  "type": "0,244,19"
                }
              },
              {
                "$type": "property",
                "name": "ComputedStyle",
                "text": "`true` if the browser supports document.defaultView.getComputedStyle().\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,771,18",
                  "text": "0,771,32,72:0,773,8,97",
                  "type": "0,772,15"
                }
              },
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.supports-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "CreateContextualFragment",
                "text": "`true` if browser support CreateContextualFragment\nrange native methods.\nSee https://developer.mozilla.org/en/DOM/range.createContextualFragment\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,503,22",
                  "text": "0,503,47,51:0,504,12,171",
                  "type": "0,508,19"
                }
              },
              {
                "$type": "property",
                "name": "CSS3BorderRadius",
                "text": "`true` if the device supports CSS3 border radius.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,799,18",
                  "text": "0,799,35,50:0,801,8,97",
                  "type": "0,800,15"
                }
              },
              {
                "$type": "property",
                "name": "CSS3BoxShadow",
                "text": "`true` if document environment supports the CSS3\nbox-shadow style.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,266,22",
                  "text": "0,266,36,49:0,267,12,95",
                  "type": "0,270,19"
                }
              },
              {
                "$type": "property",
                "name": "Css3DTransforms",
                "text": "`true` if the device supports CSS3DTransform.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,529,22",
                  "text": "0,529,38,46:0,531,12,77",
                  "type": "0,530,19"
                }
              },
              {
                "$type": "property",
                "name": "CSS3LinearGradient",
                "text": "`true` if the device supports CSS3 linear gradients.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,822,18",
                  "text": "0,822,37,53:0,824,8,77",
                  "type": "0,823,15"
                }
              },
              {
                "$type": "property",
                "name": "CSSPointerEvents",
                "text": "`true` if document environment supports the CSS3\npointer-events style.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,254,22",
                  "text": "0,254,39,49:0,255,12,99",
                  "type": "0,258,19"
                }
              },
              {
                "$type": "property",
                "name": "DeviceMotion",
                "text": "`true` if the device supports device motion (acceleration\nand rotation rate).\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,453,22",
                  "text": "0,453,35,58:0,454,12,97",
                  "type": "0,457,19"
                }
              },
              {
                "$type": "property",
                "name": "Direct2DBug",
                "text": "`true` if when asking for an element's dimension via offsetWidth or offsetHeight,\ngetBoundingClientRect, etc. the browser returns the subpixel width rounded to the nearest pixel.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,902,18",
                  "text": "0,902,30,82:0,903,8,174",
                  "type": "0,906,15"
                }
              },
              {
                "$type": "property",
                "name": "DisplayChangeInputSelectionBug",
                "text": "`true` if INPUT elements lose their\nselection when their display style is changed. Essentially, if a text input\nhas focus and its display style is changed, the I-beam disappears.\n\nThis bug is encountered due to the work around in place for the <a href='#!/api/Ext.supports-property-RightMargin'>RightMargin</a>\nbug. This has been observed in Safari 4.0.4 and older, and appears to be fixed\nin Safari 5. It's not clear if Safari 4.1 has the bug, but it has the same WebKit\nversion number as Safari 5 (according to http://unixpapa.com/js/gecko.html).\n\nThis property is available at application boot time, before document ready.\n",
                "src": {
                  "name": "0,699,18",
                  "text": "0,699,49,36:0,700,8,544"
                }
              },
              {
                "$type": "property",
                "name": "DisplayChangeTextAreaSelectionBug",
                "text": "`true` if TEXTAREA elements lose their\nselection when their display style is changed. Essentially, if a text area has\nfocus and its display style is changed, the I-beam disappears.\n\nThis bug is encountered due to the work around in place for the <a href='#!/api/Ext.supports-property-RightMargin'>RightMargin</a>\nbug. This has been observed in Chrome 10 and Safari 5 and older, and appears to\nbe fixed in Chrome 11.\n\nThis property is available at application boot time, before document ready.\n",
                "src": {
                  "name": "0,720,18",
                  "text": "0,720,52,39:0,721,8,408"
                }
              },
              {
                "$type": "property",
                "name": "EmulatedMouseOver",
                "text": "True if the browser emulates a mouseover event on tap (mobile safari)\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,1242,28",
                  "text": "0,1243,8,147",
                  "type": "0,1242,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "FixedTableWidthBug",
                "text": "`true` if the browser has this bug: https://bugs.webkit.org/show_bug.cgi?id=130239\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,1273,8",
                  "name": "0,1272,18",
                  "text": "0,1275,8,180",
                  "type": "0,1274,15"
                }
              },
              {
                "$type": "property",
                "name": "Float",
                "text": "`true` if the device supports CSS float.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,786,18",
                  "text": "0,786,24,41:0,788,8,77",
                  "type": "0,787,15"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "FocusinFocusoutEvents",
                "text": "`true` if the browser supports focusin and focusout events:\nhttps://developer.mozilla.org/en-US/docs/Web/Events/focusin\nAt this point, only Firefox does not, see this bug:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=687787\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,1312,8",
                  "name": "0,1311,18",
                  "text": "0,1314,8,301",
                  "type": "0,1313,15"
                }
              },
              {
                "$type": "property",
                "name": "Geolocation",
                "text": "`true` if the device supports GeoLocation.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,465,22",
                  "text": "0,465,34,43:0,467,12,77",
                  "type": "0,466,19"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "`Geolocation` instead (notice the lower-casing of 'L').\n",
                "deprecatedVersion": "Use",
                "name": "GeoLocation",
                "text": "`true` if the device supports Geo-location.\n",
                "type": "Boolean",
                "src": {
                  "deprecatedMessage": "0,473,12",
                  "deprecatedVersion": "0,473,12",
                  "name": "0,471,22",
                  "text": "0,471,34,44",
                  "type": "0,472,19"
                }
              },
              {
                "$type": "property",
                "name": "GetPositionPercentage",
                "text": "`true` if the browser will return the left/top/right/bottom\nposition as a percentage when explicitly set as a percentage value.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,1012,18",
                  "text": "0,1012,40,60:0,1013,8,165",
                  "type": "0,1016,15"
                }
              },
              {
                "$type": "property",
                "name": "Hashchange",
                "text": "True if the user agent supports the hashchange event\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,1256,18",
                  "text": "0,1256,29,53:0,1257,8,77",
                  "type": "0,1259,15"
                }
              },
              {
                "$type": "property",
                "name": "HighContrastMode",
                "text": "`true` if the browser is currently\nrunning in Windows High Contrast accessibility mode.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,1353,28",
                  "text": "0,1353,45,35:0,1354,8,54",
                  "type": "0,1353,19"
                }
              },
              {
                "$type": "property",
                "name": "History",
                "text": "`true` if the device supports HTML5 history. See\nhttps://developer.mozilla.org/en/DOM/Manipulating_the_browser_history\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,517,22",
                  "text": "0,517,30,49:0,518,12,147",
                  "type": "0,521,19"
                }
              },
              {
                "$type": "property",
                "name": "LocalStorage",
                "text": "`true` if localStorage is supported.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,597,22",
                  "text": "0,597,35,37:0,598,12,77",
                  "type": "0,600,19"
                }
              },
              {
                "$type": "property",
                "name": "matchesSelector",
                "text": "The method name which matches an element against a selector if implemented in this environment.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "String",
                "src": {
                  "name": "0,663,27",
                  "text": "0,664,8,173",
                  "type": "0,663,19"
                }
              },
              {
                "$type": "property",
                "name": "MouseEnterLeave",
                "text": "`true` if the browser supports mouseenter and mouseleave events\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,845,18",
                  "text": "0,845,34,64:0,847,8,77",
                  "type": "0,846,15"
                }
              },
              {
                "$type": "property",
                "name": "MouseWheel",
                "text": "`true` if the browser supports the mousewheel event\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,858,18",
                  "text": "0,858,29,52:0,860,8,77",
                  "type": "0,859,15"
                }
              },
              {
                "$type": "property",
                "name": "NumericInputPlaceHolder",
                "text": "`true` if the browser supports placeholders\non numeric input fields\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,650,22",
                  "text": "0,650,46,44:0,651,12,101",
                  "type": "0,654,19"
                }
              },
              {
                "$type": "property",
                "name": "Opacity",
                "text": "`true` if the browser supports normal css opacity\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,871,18",
                  "text": "0,871,26,50:0,873,8,77",
                  "type": "0,872,15"
                }
              },
              {
                "$type": "property",
                "name": "Orientation",
                "text": "`true` if the device supports different orientations.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,430,22",
                  "text": "0,430,34,54:0,432,12,77",
                  "type": "0,431,19"
                }
              },
              {
                "$type": "property",
                "name": "OrientationChange",
                "text": "`true` if the device supports the `orientationchange`\nevent.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,441,22",
                  "text": "0,441,40,54:0,442,12,84",
                  "type": "0,445,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "PercentageHeightOverflowBug",
                "text": "In some browsers (IE quirks, IE6, IE7, IE9, chrome, safari and opera at the time\nof this writing) a percentage-height element ignores the horizontal scrollbar\nof its parent element.  This method returns true if the browser is affected\nby this bug.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,1034,8",
                  "name": "0,1027,28",
                  "text": "0,1028,8,345",
                  "type": "0,1027,19"
                }
              },
              {
                "$type": "property",
                "name": "Placeholder",
                "text": "`true` if the browser supports the HTML5 placeholder attribute on inputs\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,889,18",
                  "text": "0,889,30,73:0,891,8,77",
                  "type": "0,890,15"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              },
              {
                "$type": "property",
                "name": "Range",
                "text": "`true` if browser support document.createRange native method.\nSee https://developer.mozilla.org/en/DOM/range.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,491,22",
                  "text": "0,491,28,62:0,492,12,125",
                  "type": "0,495,19"
                }
              },
              {
                "$type": "property",
                "name": "RightMargin",
                "text": "`true` if the device supports right margin.\nSee https://bugs.webkit.org/show_bug.cgi?id=13343 for why this is needed.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,683,18",
                  "text": "0,683,30,44:0,684,8,171",
                  "type": "0,687,15"
                }
              },
              {
                "$type": "property",
                "name": "RotatedBoundingClientRect",
                "text": "`true` if the BoundingClientRect is\nrotated when the element is rotated using a CSS transform.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,929,18",
                  "text": "0,929,44,36:0,930,8,59:0,932,8,97",
                  "type": "0,931,15"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "rtlVertScrollbarOnRight",
                "text": "Safari, in RTL mode keeps the scrollbar at the right side.\nThis means that when two elements must keep their left/right positions synched, if one has no vert\nscrollbar, it must have some extra padding.\nSee https://sencha.jira.com/browse/EXTJSIV-11245\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,1147,8",
                  "name": "0,1140,28",
                  "text": "0,1141,8,348",
                  "type": "0,1140,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "rtlVertScrollbarOverflowBug",
                "text": "In Chrome, in RTL mode, horizontal overflow only into the vertical scrollbar does NOT trigger horizontal scrollability.\nSee https://code.google.com/p/chromium/issues/detail?id=179332\nWe need to detect this for when a grid header needs to have exactly the same horizontal scrolling range as its table view.\nSee <a href='#!/api/Ext.grid.ColumnLayout-publishInnerCtSize'>Ext.grid.ColumnLayout#publishInnerCtSize</a>\nTODO: Remove this when all supported Chrome versions are fixed.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,1173,8",
                  "name": "0,1165,28",
                  "text": "0,1166,8,520",
                  "type": "0,1165,19"
                }
              },
              {
                "$type": "property",
                "name": "ScrollWidthInlinePaddingBug",
                "text": "In some browsers the right padding of an overflowing element is not accounted\nfor in its scrollWidth.  The result can vary depending on whether or not\nThe element contains block-level children.  This method tests the effect\nof padding on scrollWidth when there are no block-level children inside the\noverflowing element.\n\nThis method returns true if the browser is affected by this bug.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,1101,28",
                  "text": "0,1102,8,484",
                  "type": "0,1101,19"
                }
              },
              {
                "$type": "property",
                "name": "SpecialKeyDownRepeat",
                "text": "True if the browser fires the keydown event on specialkey autorepeat\n\nnote 1: IE fires ONLY the keydown event on specialkey autorepeat\nnote 2: Safari < 3.1, Gecko (Mac/Linux) & Opera fire only the keypress event on\nspecialkey autorepeat (research done by Jan Wolter at\nhttp://unixpapa.com/js/key.html)\nnote 3: Opera 12 behaves like other modern browsers so this workaround does not\nwork anymore\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,1221,28",
                  "text": "0,1222,8,472",
                  "type": "0,1221,19"
                }
              },
              {
                "$type": "property",
                "name": "Svg",
                "text": "`true` if the device supports SVG.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,314,22",
                  "text": "0,314,26,35:0,315,12,77",
                  "type": "0,317,19"
                }
              },
              {
                "$type": "property",
                "name": "TextAreaMaxLength",
                "text": "`true` if the browser supports maxlength on textareas.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,1000,18",
                  "text": "0,1000,36,55:0,1002,8,77",
                  "type": "0,1001,15"
                }
              },
              {
                "$type": "property",
                "name": "Touch",
                "text": "`true` if the browser supports touch input.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,381,22",
                  "text": "0,381,28,44:0,382,12,77",
                  "type": "0,384,19"
                }
              },
              {
                "$type": "property",
                "name": "TouchEvents",
                "text": "`true` if the device supports touch events (`touchstart`,\n`touchmove`, `touchend`).\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,408,22",
                  "text": "0,408,34,58:0,409,12,103",
                  "type": "0,412,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "touchScroll",
                "text": "\nThis property is used to trigger touch scrolling support via Ext.scroll.TouchScroller.\nThere are three possible values for this property:\n\n- `0` - Touch scrolling disabled.\n\n- `1` - enables partial scroller support.  In this mode the touch scroller\nsimply controls the scroll positions of naturally overflowing elements.\nThis mode is typically used on multi-input devices where native scrolling\nusing the mouse is desired, but native touch-scrolling must be disabled to\navoid cancelling gesture recognition inside of scrollable elements (e.g.\nIE10 and up on touch-screen laptops and tablets)\n\n- `2` - enables full scroller support.  In this mode, scrolling is entirely\n\"virtual\", that is natural browser scrolling of elements is disabled\n(overflow: hidden) and the contents of scrollable elements are wrapped in a\n\"scrollerEl\"`.  Scrolling is simulated by translating the scrollerEl using\nCSS, and <a href='#!/api/Ext.scroll.Indicator'>Ext.scroll.Indicator</a> will be shown while\nscrolling since there are no native scrollbars in this mode.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Number",
                "src": {
                  "access": "0,366,12",
                  "name": "0,343,22",
                  "text": "0,345,12,1104",
                  "type": "0,344,19"
                }
              },
              {
                "$type": "property",
                "name": "Transitions",
                "text": "`true` if the device supports CSS3 Transitions.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,559,22",
                  "text": "0,559,34,48:0,560,12,77",
                  "type": "0,562,19"
                }
              },
              {
                "$type": "property",
                "name": "TransparentColor",
                "text": "`true` if the device supports transparent color.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,756,18",
                  "text": "0,756,35,49:0,758,8,97",
                  "type": "0,757,15"
                }
              },
              {
                "$type": "property",
                "name": "Video",
                "text": "`true` if the device supports the HTML5 `video` tag.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,586,22",
                  "text": "0,586,28,53:0,587,12,77",
                  "type": "0,589,19"
                }
              },
              {
                "$type": "property",
                "name": "Vml",
                "text": "`true` if the device supports VML.\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,325,22",
                  "text": "0,325,26,35:0,327,12,77",
                  "type": "0,326,19"
                }
              },
              {
                "$type": "property",
                "name": "XHR2",
                "text": "`true` if the browser supports XMLHttpRequest\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,622,22",
                  "text": "0,622,27,46:0,623,12,77",
                  "type": "0,625,19"
                }
              },
              {
                "$type": "property",
                "name": "XHRUploadProgress",
                "text": "`true` if the browser supports XMLHttpRequest\nupload progress info\n\nThis property is available at application boot time, before document ready.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,634,22",
                  "text": "0,634,40,46:0,635,12,98",
                  "type": "0,638,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "xOriginBug",
                "text": "In Chrome 24.0, an RTL element which has vertical overflow positions its right X origin incorrectly.\nIt skips a non-existent scrollbar which has been moved to the left edge due to the RTL setting.\n\nhttp://code.google.com/p/chromium/issues/detail?id=174656\n\nThis method returns true if the browser is affected by this bug.\n\nThis property is *NOT* available at application boot time. Only after the document ready event.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,1081,8",
                  "name": "0,1072,28",
                  "text": "0,1073,8,419",
                  "type": "0,1072,19"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,231,15",
          "singleton": "0,236,8",
          "text": "0,232,8,101"
        }
      }
    ]
  },
  "version": 1
}