{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/util/KeyMap.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Ext.KeyMap",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.util.KeyMap",
        "text": "Handles mapping key events to handling functions for an element or a Component. One KeyMap can be used for multiple\nactions.\n\nA KeyMap must be configured with a <a href='#!/api/Ext.util.KeyMap-cfg-target'>target</a> as an event source which may be an Element or a Component.\n\nIf the target is an element, then the `keydown` event will trigger the invocation of <a href='#!/api/Ext.util.KeyMap-cfg-binding'>binding</a>s.\n\nIt is possible to configure the KeyMap with a custom <a href='#!/api/Ext.util.KeyMap-cfg-eventName'>eventName</a> to listen for. This may be useful when the\n<a href='#!/api/Ext.util.KeyMap-cfg-target'>target</a> is a Component.\n\nThe KeyMap's event handling requires that the first parameter passed is a key event. So if the Component's event\nsignature is different, specify a <a href='#!/api/Ext.util.KeyMap-cfg-processEvent'>processEvent</a> configuration which accepts the event's parameters and\nreturns a key event.\n\nFunctions specified in <a href='#!/api/Ext.util.KeyMap-cfg-binding'>binding</a>s are called with this signature : `(String key, Ext.event.Event e)` (if the\nmatch is a multi-key combination the callback will still be called only once). A KeyMap can also handle a string\nrepresentation of keys. By default KeyMap starts enabled.\n\nUsage:\n\n    // map one key by key code\n    var map = new Ext.util.KeyMap({\n        target: \"my-element\",\n        key: 13, // or Ext.event.Event.ENTER\n        fn: myHandler,\n        scope: myObject\n    });\n\n    // map multiple keys to one action by string\n    var map = new Ext.util.KeyMap({\n        target: \"my-element\",\n        key: \"a\\r\\n\\t\",\n        fn: myHandler,\n        scope: myObject\n    });\n\n    // map multiple keys to multiple actions by strings and array of codes\n    var map = new Ext.util.KeyMap({\n        target: \"my-element\",\n        binding: [{\n            key: [10,13],\n            fn: function(){ alert(\"Return was pressed\"); }\n        }, {\n            key: \"abc\",\n            fn: function(){ alert('a, b or c was pressed'); }\n        }, {\n            key: \"\\t\",\n            ctrl:true,\n            shift:true,\n            fn: function(){ alert('Control + shift + tab was pressed.'); }\n        }]\n    });\n\nSince 4.1.0, KeyMaps can bind to Components and process key-based events fired by Components.\n\nTo bind to a Component, use the single parameter form of constructor and include the Component event name\nto listen for, and a <a href='#!/api/Ext.util.KeyMap-cfg-processEvent'>processEvent</a> implementation which returns the key event for further processing by\nthe KeyMap:\n\n    var map = new Ext.util.KeyMap({\n        target: myGridView,\n        eventName: 'itemkeydown',\n        processEvent: function(view, record, node, index, event) {\n\n            // Load the event with the extra information needed by the mappings\n            event.view = view;\n            event.store = view.getStore();\n            event.record = record;\n            event.index = index;\n            return event;\n        },\n        binding: {\n            key: Ext.event.Event.DELETE,\n            fn: function(keyCode, e) {\n                e.store.remove(e.record);\n\n                // Attempt to select the record that's now in its place\n                e.view.getSelectionModel().select(e.index);\n                e.view.el.focus();\n            }\n        }\n    });\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "binding",
                "text": "Either a single object describing a handling function for s specified key (or set of keys), or\nan array of such objects.\n",
                "type": "Object/Object[][]",
                "items": [
                  {
                    "$type": "property",
                    "name": "key",
                    "text": "A single keycode or an array of keycodes to handle, or a RegExp\nwhich specifies characters to handle, eg `/[a-z]/`.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "0,102,39",
                      "text": "0,102,43,64:0,103,8,52",
                      "type": "0,102,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "shift",
                    "text": "True to handle key only when shift is pressed, False to handle the\n key only when shift is not pressed (defaults to undefined)\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,104,32",
                      "text": "0,104,38,67:0,105,8,60",
                      "type": "0,104,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "ctrl",
                    "text": "True to handle key only when ctrl is pressed, False to handle the\n key only when ctrl is not pressed (defaults to undefined)\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,106,32",
                      "text": "0,106,37,66:0,107,8,59",
                      "type": "0,106,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "alt",
                    "text": "True to handle key only when alt is pressed, False to handle the key\n only when alt is not pressed (defaults to undefined)\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,108,32",
                      "text": "0,108,36,69:0,109,8,54",
                      "type": "0,108,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "handler",
                    "text": "The function to call when KeyMap finds the expected key combination\n",
                    "type": "Function",
                    "src": {
                      "name": "0,110,32",
                      "text": "0,110,40,68",
                      "type": "0,110,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "fn",
                    "text": "Alias of handler (for backwards-compatibility)\n",
                    "type": "Function",
                    "src": {
                      "name": "0,111,32",
                      "text": "0,111,35,47",
                      "type": "0,111,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "scope",
                    "text": "The scope (`this` context) in which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,112,32",
                      "text": "0,112,38,70",
                      "type": "0,112,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "defaultEventAction",
                    "text": "A default action to apply to the event *when the handler returns `true`*. Possible values\n are: stopEvent, stopPropagation, preventDefault. If no value is set no action is performed.\n",
                    "type": "String",
                    "src": {
                      "name": "0,113,32",
                      "text": "0,113,51,90:0,114,8,93",
                      "type": "0,113,14"
                    }
                  }
                ],
                "src": {
                  "name": "0,99,33",
                  "text": "0,100,8,121",
                  "type": "0,99,14"
                }
              },
              {
                "$type": "property",
                "name": "eventName",
                "text": "The event to listen for to pick up key events.\n",
                "type": "String",
                "src": {
                  "name": "0,135,22",
                  "text": "0,136,8,47",
                  "type": "0,135,14"
                }
              },
              {
                "$type": "property",
                "name": "ignoreInputFields",
                "optional": true,
                "text": "Configure this as `true` if there are any input fields within the <a href='#!/api/Ext.util.KeyMap-cfg-target'>target</a>, and this KeyNav\nshould not process events from input fields, (`&lt;input>, &lt;textarea> and elements with `contentEditable=\"true\"`)\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,123,24",
                  "text": "0,124,8,216",
                  "type": "0,123,14",
                  "value": "0,123,42"
                }
              },
              {
                "$type": "property",
                "name": "priority",
                "optional": true,
                "text": "The priority to set on this KeyMap's listener. Listeners with a higher priority are fired before those with\nlower priority.\n",
                "type": "Number",
                "src": {
                  "name": "0,129,23",
                  "text": "0,130,8,124",
                  "type": "0,129,14"
                }
              },
              {
                "$type": "property",
                "name": "processEvent",
                "text": "An optional event processor function which accepts the argument list provided by the\n<a href='#!/api/Ext.util.KeyMap-cfg-eventName'>eventName</a> of the <a href='#!/api/Ext.util.KeyMap-cfg-target'>target</a>, and returns a keyEvent for processing by the KeyMap.\n\nThis may be useful when the <a href='#!/api/Ext.util.KeyMap-cfg-target'>target</a> is a Component with a complex event signature, where the event is not\nthe first parameter. Extra information from the event arguments may be injected into the event for use by the handler\nfunctions before returning it.\n\nIf <a href='#!/api/null'>null</a> is returned the KeyMap stops processing the event.\n",
                "type": "Function",
                "src": {
                  "name": "0,361,24",
                  "text": "0,362,8,524",
                  "type": "0,361,14"
                }
              },
              {
                "$type": "property",
                "name": "processEventScope",
                "optional": true,
                "text": "The scope (`this` context) in which the <a href='#!/api/Ext.util.KeyMap-cfg-processEvent'>processEvent</a> method is executed.\n",
                "type": "Object",
                "value": "this",
                "src": {
                  "name": "0,118,23",
                  "text": "0,119,8,82",
                  "type": "0,118,14",
                  "value": "0,118,41"
                }
              },
              {
                "$type": "property",
                "name": "target",
                "text": "The object on which to listen for the event specified by the <a href='#!/api/Ext.util.KeyMap-cfg-eventName'>eventName</a> config option.\n",
                "type": "Ext.Component/Ext.dom.Element/HTMLElement/String",
                "src": {
                  "name": "0,94,64",
                  "text": "0,95,8,95",
                  "type": "0,94,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "addBinding",
                "text": "Add a new binding to this KeyMap.\n\nUsage:\n\n    // Create a KeyMap\n    var map = new Ext.util.KeyMap(document, {\n        key: Ext.event.Event.ENTER,\n        fn: handleKey,\n        scope: this\n    });\n\n    //Add a new binding to the existing KeyMap later\n    map.addBinding({\n        key: 'abc',\n        shift: true,\n        fn: handleKey,\n        scope: this\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "binding",
                    "text": "A single KeyMap config or an array of configs.\nThe following config object properties are supported:\n",
                    "type": "Object/Object[]",
                    "items": [
                      {
                        "$type": "property",
                        "name": "key",
                        "text": "A single keycode or an array of keycodes to handle, or a RegExp\nwhich specifies characters to handle, eg `/[a-z]/`.\n",
                        "type": "String/Array",
                        "src": {
                          "name": "0,208,38",
                          "text": "0,208,42,64:0,209,8,52",
                          "type": "0,208,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "shift",
                        "text": "True to handle key only when shift is pressed,\nFalse to handle the keyonly when shift is not pressed (defaults to undefined).\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,210,33",
                          "text": "0,210,39,47:0,211,8,79",
                          "type": "0,210,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "ctrl",
                        "text": "True to handle key only when ctrl is pressed,\nFalse to handle the key only when ctrl is not pressed (defaults to undefined).\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,212,33",
                          "text": "0,212,38,46:0,213,8,79",
                          "type": "0,212,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "alt",
                        "text": "True to handle key only when alt is pressed,\nFalse to handle the key only when alt is not pressed (defaults to undefined).\n",
                        "type": "Boolean",
                        "src": {
                          "name": "0,214,33",
                          "text": "0,214,37,45:0,215,8,78",
                          "type": "0,214,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "handler",
                        "text": "The function to call when KeyMap finds the\nexpected key combination.\n",
                        "type": "Function",
                        "src": {
                          "name": "0,216,34",
                          "text": "0,216,42,43:0,217,8,26",
                          "type": "0,216,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "fn",
                        "text": "Alias of handler (for backwards-compatibility).\n",
                        "type": "Function",
                        "src": {
                          "name": "0,218,34",
                          "text": "0,218,37,48",
                          "type": "0,218,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "The scope (`this` context) in which the handler function is executed.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,219,32",
                          "text": "0,219,38,70",
                          "type": "0,219,16"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "defaultEventAction",
                        "text": "A default action to apply to the event *when the handler returns `true`*.\nPossible values are: stopEvent, stopPropagation, preventDefault. If no value is\nset no action is performed..\n",
                        "type": "String",
                        "src": {
                          "name": "0,220,32",
                          "text": "0,220,51,74:0,221,8,109",
                          "type": "0,220,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,206,33",
                      "text": "0,206,41,47:0,207,8,54",
                      "type": "0,206,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,224,0",
                  "text": "0,187,8,367"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "checkModifiers",
                "text": "Check if the modifiers on the event match those on the binding\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "binding",
                    "type": "Object",
                    "src": {
                      "name": "0,426,24",
                      "type": "0,426,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,427,33",
                      "type": "0,427,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the event matches the binding\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,428,26,38",
                      "type": "0,428,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,425,8",
                  "name": "0,430,0",
                  "text": "0,424,8,63"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "Destroys the KeyMap instance and removes all handlers.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "removeTarget",
                    "text": "True to also remove the <a href='#!/api/Ext.util.KeyMap-cfg-target'>target</a>\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,550,25",
                      "text": "0,550,38,40",
                      "type": "0,550,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,552,0",
                  "text": "0,549,8,55"
                }
              },
              {
                "$type": "method",
                "name": "disable",
                "text": "Disable this KeyMap\n",
                "src": {
                  "name": "0,527,0",
                  "text": "0,525,8,20"
                }
              },
              {
                "$type": "method",
                "name": "enable",
                "text": "Enables this KeyMap\n",
                "src": {
                  "name": "0,515,0",
                  "text": "0,513,8,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleTargetEvent",
                "text": "Process the <a href='#!/api/Ext.util.KeyMap-cfg-eventName'>eventName</a> from the <a href='#!/api/Ext.util.KeyMap-cfg-target'>target</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,314,33",
                      "type": "0,314,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,313,8",
                  "name": "0,316,0",
                  "text": "0,312,8,63"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.util.KeyMap-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isEnabled",
                "text": "Returns true if this KeyMap is enabled\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,506,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,508,0",
                  "text": "0,505,8,39"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.util.KeyMap-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "legacyConstructor",
                "text": "Old constructor signature\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "The element or its ID, or Component to bind to\n",
                    "type": "String/HTMLElement/Ext.dom.Element/Ext.Component",
                    "src": {
                      "name": "0,168,66",
                      "text": "0,168,69,47",
                      "type": "0,168,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "binding",
                    "text": "The binding (see <a href='#!/api/Ext.util.KeyMap-method-addBinding'>addBinding</a>)\n",
                    "type": "Object",
                    "src": {
                      "name": "0,169,24",
                      "text": "0,169,32,38",
                      "type": "0,169,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "eventName",
                    "optional": true,
                    "text": "The event to bind to\n",
                    "type": "String",
                    "value": "\"keydown\"",
                    "src": {
                      "name": "0,170,25",
                      "text": "0,170,46,21",
                      "type": "0,170,16",
                      "value": "0,170,35"
                    }
                  }
                ],
                "src": {
                  "access": "0,166,8",
                  "name": "0,172,0",
                  "text": "0,167,8,26"
                }
              },
              {
                "$type": "method",
                "name": "on",
                "text": "Shorthand for adding a single key listener.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "Either the numeric key code, array of key codes or an object with the\nfollowing options: `{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}`\n",
                    "type": "Number/Number[]/Object",
                    "src": {
                      "name": "0,449,40",
                      "text": "0,449,44,70:0,450,8,106",
                      "type": "0,449,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call\n",
                    "type": "Function",
                    "src": {
                      "name": "0,451,26",
                      "text": "0,451,29,21",
                      "type": "0,451,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the function is executed.\nDefaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,452,25",
                      "text": "0,452,32,64:0,453,8,32",
                      "type": "0,452,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,455,0",
                  "text": "0,447,8,45"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "processBinding",
                "text": "Process a particular binding and fire the handler if necessary.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "binding",
                    "text": "The binding information\n",
                    "type": "Object",
                    "src": {
                      "name": "0,376,24",
                      "text": "0,376,32,24",
                      "type": "0,376,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "event",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,377,33",
                      "type": "0,377,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,375,8",
                  "name": "0,379,0",
                  "text": "0,374,8,64"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.util.KeyMap-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.util.KeyMap-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "removeBinding",
                "text": "Remove a binding from this KeyMap.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "binding",
                    "text": "See <a href='#!/api/Ext.util.KeyMap-method-addBinding'>addBinding</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "0,248,24",
                      "text": "0,248,32,36",
                      "type": "0,248,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,250,0",
                  "text": "0,247,8,35"
                }
              },
              {
                "$type": "method",
                "name": "setDisabled",
                "text": "Convenience function for setting disabled/enabled by boolean.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "disabled",
                    "type": "Boolean",
                    "src": {
                      "name": "0,538,25",
                      "type": "0,538,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,540,0",
                  "text": "0,537,8,62"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.util.KeyMap-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.util.KeyMap-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.util.KeyMap-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.util.KeyMap-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "un",
                "text": "Shorthand for removing a single key listener.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "key",
                    "text": "Either the numeric key code, array of key codes or an object with the\nfollowing options: `{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}`\n",
                    "type": "Number/Number[]/Object",
                    "src": {
                      "name": "0,478,40",
                      "text": "0,478,44,70:0,479,8,106",
                      "type": "0,478,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call\n",
                    "type": "Function",
                    "src": {
                      "name": "0,480,26",
                      "text": "0,480,29,21",
                      "type": "0,480,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the function is executed.\nDefaults to the browser window.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,481,25",
                      "text": "0,481,32,64:0,482,8,32",
                      "type": "0,481,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,484,0",
                  "text": "0,476,8,47"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.util.KeyMap-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.util.KeyMap-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.util.KeyMap-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.util.KeyMap-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.util.KeyMap-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.util.KeyMap-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.util.KeyMap-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.util.KeyMap-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.util.KeyMap-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.util.KeyMap-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.util.KeyMap-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "lastKeyEvent",
                "text": "The last key event that this KeyMap handled.\n",
                "type": "Ext.event.Event",
                "src": {
                  "name": "0,89,36",
                  "text": "0,90,8,45",
                  "type": "0,89,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          }
        ],
        "src": {
          "alternateClassNames": "0,86,0",
          "name": "0,85,0",
          "text": "0,2,4,3033"
        }
      }
    ]
  },
  "version": 1
}