{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/Sortable.js",
    "../../../../docs/docs/js/primitives/Object.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "extended": "Object",
        "extends": "Object",
        "name": "Ext.util.Sortable",
        "requires": "Ext.util.Sorter",
        "text": "A mixin which allows a data component to be sorted. This is used by e.g. <a href='#!/api/Ext.data.Store'>Ext.data.Store</a> and <a href='#!/api/Ext.data.TreeStore'>Ext.data.TreeStore</a>.\n\n**NOTE**: This mixin is mainly for internal use and most users should not need to use it directly. It\nis more likely you will want to use one of the component classes that import this mixin, such as\n<a href='#!/api/Ext.data.Store'>Ext.data.Store</a> or <a href='#!/api/Ext.data.TreeStore'>Ext.data.TreeStore</a>.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "defaultSortDirection",
                "text": "The default sort direction to use if one is not specified.\n",
                "type": "String",
                "src": {
                  "name": "0,35,22",
                  "text": "0,36,8,59",
                  "type": "0,35,14"
                }
              },
              {
                "$type": "property",
                "name": "multiSortLimit",
                "optional": true,
                "text": "The maximum number of sorters which may be applied to this Sortable when using the \"multi\" insertion position\nwhen adding sorters.\n\nNew sorters added using the \"multi\" insertion position are inserted at the top of the sorters list becoming the\nnew primary sort key.\n\nIf the sorters collection has grown to longer then **<a href='#!/api/Ext.util.Sortable-cfg-multiSortLimit'>multiSortLimit</a>**, then the it is trimmed.\n",
                "type": "Number",
                "value": "3",
                "src": {
                  "name": "0,52,23",
                  "text": "0,53,8,365",
                  "type": "0,52,14",
                  "value": "0,52,38"
                }
              },
              {
                "$type": "property",
                "name": "sorters",
                "text": "The initial set of <a href='#!/api/Ext.util.Sorter'>Ext.util.Sorter</a>.\n\n    sorters: [{\n        property: 'age',\n        direction: 'DESC'\n    }, {\n        property: 'firstName',\n        direction: 'ASC'\n    }]\n",
                "type": "Ext.util.Sorter[]/Object[]",
                "src": {
                  "name": "0,20,46",
                  "text": "0,21,12,192",
                  "type": "0,20,18"
                }
              },
              {
                "$type": "property",
                "name": "sortRoot",
                "text": "The property in each item that contains the data to sort.\n",
                "type": "String",
                "src": {
                  "name": "0,90,22",
                  "text": "0,91,8,58",
                  "type": "0,90,14"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "beforesort",
                "text": "Fires before a sort occurs.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "me",
                    "text": "This object.\n",
                    "type": "Ext.util.Sortable",
                    "src": {
                      "name": "0,47,35",
                      "text": "0,47,38,13",
                      "type": "0,47,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "The collection of Sorters being used to generate the comparator function.\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "name": "0,48,35",
                      "text": "0,48,43,74",
                      "type": "0,48,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,45,15",
                  "text": "0,46,8,28"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Creates new Object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The value to wrap.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,40,21",
                      "text": "1,40,28,19",
                      "type": "1,40,12"
                    }
                  }
                ],
                "src": {
                  "name": "1,38,12",
                  "text": "1,39,4,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "decodeSorters",
                "text": "Normalizes an array of sorter objects, ensuring that they are all Ext.util.Sorter instances\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "The sorters array\n",
                    "type": "Object[]",
                    "src": {
                      "name": "0,274,26",
                      "text": "0,274,34,18",
                      "type": "0,274,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Array of Ext.util.Sorter objects\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "text": "0,275,36,33",
                      "type": "0,275,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,272,8",
                  "name": "0,277,0",
                  "text": "0,273,8,92"
                }
              },
              {
                "$type": "method",
                "name": "generateComparator",
                "text": "Returns a comparator function which compares two items and returns -1, 0, or 1 depending\non the currently defined set of <a href='#!/api/Ext.util.Sortable-cfg-sorters'>cfg-sorters</a>.\n\nIf there are no <a href='#!/api/Ext.util.Sortable-cfg-sorters'>cfg-sorters</a> defined, it returns a function which returns `0` meaning\nthat no sorting will occur.\n",
                "src": {
                  "name": "0,260,0",
                  "text": "0,254,8,266"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getFirstSorter",
                "text": "Gets the first sorter from the sorters collection, excluding\nany groupers that may be in place\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The sorter, null if none exist\n",
                    "type": "Ext.util.Sorter",
                    "src": {
                      "text": "0,335,34,31",
                      "type": "0,335,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,334,8",
                  "name": "0,337,0",
                  "text": "0,332,8,95"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getSorterCount",
                "text": "Returns the number of Sorters which apply to this Sortable.\n\nMay be overridden in subclasses. <a href='#!/api/Ext.data.Store'>Ext.data.Store</a> in particlar overrides\nthis because its groupers must contribute to the sorter count so that the sort method above executes doSort.\n",
                "src": {
                  "access": "0,243,8",
                  "name": "0,249,0",
                  "text": "0,244,8,255"
                }
              },
              {
                "$type": "method",
                "name": "hasOwnProperty",
                "text": "Returns a boolean indicating whether an object contains the specified property as a direct property\nof that object and not inherited through the prototype chain.\n\nEvery object descended from <a href='#!/api/Object'>Object</a> inherits the <a href='#!/api/Ext.util.Sortable-method-hasOwnProperty'>hasOwnProperty</a> method. This method can be used\nto determine whether an object has the specified property as a direct property of that object;\nunlike the `in` operator, this method does not check down the object's prototype chain.\n\nThe following example determines whether the o object contains a property named prop:\n\n    o = new Object();\n    o.prop = 'exists';\n\n    function changeO() {\n        o.newprop = o.prop;\n        delete o.prop;\n    }\n\n    o.hasOwnProperty('prop');   //returns true\n    changeO();\n    o.hasOwnProperty('prop');   //returns false\n\nThe following example differentiates between direct properties and properties inherited through the\nprototype chain:\n\n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n\nThe following example shows how to iterate over the properties of an object without executing on\ninherit properties.\n\n    var buz = {\n        fog: 'stack'\n    };\n\n    for (var name in buz) {\n        if (buz.hasOwnProperty(name)) {\n            alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);\n        }\n        else {\n            alert(name); // toString or something else\n        }\n    }\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,100,20",
                      "text": "1,100,25,34",
                      "type": "1,100,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object contains specified property; else\nreturns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,101,22,57:1,102,4,15",
                      "type": "1,101,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,53,12",
                  "text": "1,54,4,1520"
                }
              },
              {
                "$type": "method",
                "name": "isPrototypeOf",
                "text": "Returns a boolean indication whether the specified object is in the prototype chain of the object\nthis method is called upon.\n\n<a href='#!/api/Ext.util.Sortable-method-isPrototypeOf'>isPrototypeOf</a> allows you to check whether or not an object exists within another object's\nprototype chain.\n\nFor example, consider the following prototype chain:\n\n    function Fee() {\n        // . . .\n    }\n\n    function Fi() {\n        // . . .\n    }\n    Fi.prototype = new Fee();\n\n    function Fo() {\n        // . . .\n    }\n    Fo.prototype = new Fi();\n\n    function Fum() {\n        // . . .\n    }\n    Fum.prototype = new Fo();\n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists\nwithin the `Fum` prototype chain, you could do this:\n\n    var fum = new Fum();\n    . . .\n\n    if (Fi.prototype.isPrototypeOf(fum)) {\n    // do something safe\n    }\n\nThis, along with the `instanceof` operator particularly comes in handy if you have code that can\nonly function when dealing with objects descended from a specific prototype chain, e.g., to\nguarantee that certain methods or properties will be present on that object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prototype",
                    "text": "an object to be tested against each link in the prototype chain of the\n*object* argument\n",
                    "type": "Object",
                    "src": {
                      "name": "1,148,20",
                      "text": "1,148,30,71:1,149,4,18",
                      "type": "1,148,12"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "object",
                    "text": "the object whose prototype chain will be searched\n",
                    "type": "Object",
                    "src": {
                      "name": "1,150,20",
                      "text": "1,150,27,50",
                      "type": "1,150,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Returns true if object is a prototype and false if not.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,151,22,56",
                      "type": "1,151,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,106,12",
                  "text": "1,107,4,1084"
                }
              },
              {
                "$type": "method",
                "name": "propertyIsEnumerable",
                "text": "Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\nEvery object has a <a href='#!/api/Ext.util.Sortable-method-propertyIsEnumerable'>propertyIsEnumerable</a> method. This method can determine whether the specified\nproperty in an object can be enumerated by a `for...in` loop, with the exception of properties\ninherited through the prototype chain. If the object does not have the specified property, this\nmethod returns false.\n\nThe following example shows the use of <a href='#!/api/Ext.util.Sortable-method-propertyIsEnumerable'>propertyIsEnumerable</a> on objects and arrays:\n\n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n\n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\n    var a = ['is enumerable'];\n\n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n\n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n\nDirect versus inherited properties\n\n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n\n    function firstConstructor()\n    {\n        this.property = 'is not enumerable';\n    }\n    firstConstructor.prototype.firstMethod = function () {};\n\n    function secondConstructor()\n    {\n        this.method = function method() { return 'is enumerable'; };\n    }\n\n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n\n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n\n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n\n    o.property = 'is enumerable';\n\n    o.propertyIsEnumerable('property');            // returns true\n\n    // These return false as they are on the prototype which\n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "prop",
                    "text": "The name of the property to test.\n",
                    "type": "String",
                    "src": {
                      "name": "1,220,20",
                      "text": "1,220,25,34",
                      "type": "1,220,12"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "If the object does not have the specified property, this\nmethod returns false.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,221,22,57:1,222,4,22",
                      "type": "1,221,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,155,12",
                  "text": "1,156,4,2313"
                }
              },
              {
                "$type": "method",
                "name": "sort",
                "text": "Updates the sorters collection and triggers sorting of this Sortable. Example usage:\n\n    //sort by a single field\n    myStore.sort('myField', 'DESC');\n\n    //sorting by multiple fields\n    myStore.sort([{\n        property : 'age',\n        direction: 'ASC'\n    }, {\n        property : 'name',\n        direction: 'DESC'\n    }]);\n\nClasses which use this mixin must implement a **`soSort`** method which accepts a comparator function computed from\nthe full sorter set which performs the sort in an implementation-specific way.\n\nWhen passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:\n\n    store.sort('myField');\n    store.sort('myField');\n\nIs equivalent to this code, because Store handles the toggling automatically:\n\n    store.sort('myField', 'ASC');\n    store.sort('myField', 'DESC');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "optional": true,
                    "text": "Either a string name of one of the fields in this Store's configured <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, or an array of sorter configurations.\n",
                    "type": "String/Ext.util.Sorter[]",
                    "src": {
                      "name": "0,133,43",
                      "text": "0,133,52,137",
                      "type": "0,133,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "direction",
                    "optional": true,
                    "text": "The overall direction to sort the data by.\n",
                    "type": "String",
                    "value": "\"ASC\"",
                    "src": {
                      "name": "0,134,25",
                      "text": "0,134,42,43",
                      "type": "0,134,16",
                      "value": "0,134,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "insertionPosition",
                    "optional": true,
                    "text": "Where to put the new sorter in the collection of sorters.\nThis may take the following values:\n\n* `replace` : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode\n          to programatically sort by multiple fields.\n\n* `prepend` : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer.\n\n* `multi` :  This is mainly useful for implementing intuitive \"Sort by this\" user interfaces such as the <a href='#!/api/Ext.grid.Panel'>Ext.grid.Panel</a>s column sorting UI.\n\n    This mode is only supported when passing a property name and a direction.\n\n    This means that the new sorter is becomes the primary sorter. If the sorter was **already** the primary sorter, the direction\n    of sort is toggled if no direction parameter is specified.\n\n    The number of sorters maintained is limited by the <a href='#!/api/Ext.util.Sortable-cfg-multiSortLimit'>multiSortLimit</a> configuration.\n\n* `append` : This means that the new sorter becomes the last sorter.\n",
                    "type": "String",
                    "value": "\"replace\"",
                    "src": {
                      "name": "0,135,25",
                      "text": "0,135,54,58:0,136,8,977",
                      "type": "0,135,16",
                      "value": "0,135,43"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The new sorters.\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "text": "0,153,36,17",
                      "type": "0,153,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,155,0",
                  "text": "0,106,8,837"
                }
              },
              {
                "$type": "method",
                "name": "toLocaleString",
                "text": "Returns a string representing the object. This method is meant to be overridden by derived objects\nfor locale-specific purposes.\n\n<a href='#!/api/Object'>Object</a>s <a href='#!/api/Ext.util.Sortable-method-toLocaleString'>toLocaleString</a> returns the result of calling <a href='#!/api/Ext.util.Sortable-method-toString'>toString</a>.\n\nThis function is provided to give objects a generic <a href='#!/api/Ext.util.Sortable-method-toLocaleString'>toLocaleString</a> method, even though not all\nmay use it. Currently, only <a href='#!/api/Array'>Array</a>, <a href='#!/api/Number'>Number</a>, and <a href='#!/api/Date'>Date</a> override <a href='#!/api/Ext.util.Sortable-method-toLocaleString'>toLocaleString</a>.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,235,21,32",
                      "type": "1,235,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,226,12",
                  "text": "1,227,4,384"
                }
              },
              {
                "$type": "method",
                "name": "toString",
                "text": "Returns a string representation of the object.\n\nEvery object has a `toString()` method that is automatically called when the object is to be\nrepresented as a text value or when an object is referred to in a manner in which a string is\nexpected. By default, the `toString()` method is inherited by every object descended from <a href='#!/api/Object'>Object</a>.\nIf this method is not overridden in a custom object, `toString()` returns \"[object type]\", where\n`type` is the object type. The following code illustrates this:\n\n    var o = new Object();\n    o.toString();           // returns [object Object]\n\nYou can create a function to be called in place of the default `toString()` method. The\n`toString()` method takes no arguments and should return a string. The `toString()` method you\ncreate can be any value you want, but it will be most useful if it carries information about the\nobject.\n\nThe following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:\n\n    function Dog(name,breed,color,sex) {\n        this.name=name;\n        this.breed=breed;\n        this.color=color;\n        this.sex=sex;\n    }\n\n    theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\nIf you call the `toString()` method on this custom object, it returns the default value inherited\nfrom <a href='#!/api/Object'>Object</a>:\n\n    theDog.toString(); //returns [object Object]\n\nThe following code creates and assigns `dogToString()` to override the default `toString()` method.\nThis function generates a string containing the name, breed, color, and sex of the object, in the\nform `\"property = value;\"`.\n\n    Dog.prototype.toString = function dogToString() {\n        var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n        return ret;\n    }\n\nWith the preceding code in place, any time theDog is used in a string context, JavaScript\nautomatically calls the `dogToString()` function, which returns the following string:\n\n    Dog Gabby is a female chocolate Lab\n\n`toString()` can be used with every object and allows you to get its class. To use the\n`Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or\n`Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter\ncalled `thisArg`.\n\n    var toString = Object.prototype.toString;\n\n    toString.call(new Date); // [object Date]\n    toString.call(new String); // [object String]\n    toString.call(Math); // [object Math]\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Object represented as a string.\n",
                    "type": "String",
                    "src": {
                      "text": "1,297,21,32",
                      "type": "1,297,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,239,12",
                  "text": "1,240,4,2445"
                }
              },
              {
                "$type": "method",
                "name": "valueOf",
                "text": "Returns the primitive value of the specified object.\n\nJavaScript calls the <a href='#!/api/Ext.util.Sortable-method-valueOf'>valueOf</a> method to convert an object to a primitive value. You rarely need to\ninvoke the <a href='#!/api/Ext.util.Sortable-method-valueOf'>valueOf</a> method yourself; JavaScript automatically invokes it when encountering an\nobject where a primitive value is expected.\n\nBy default, the <a href='#!/api/Ext.util.Sortable-method-valueOf'>valueOf</a> method is inherited by every object descended from <a href='#!/api/Object'>Object</a>. Every built-\nin core object overrides this method to return an appropriate value. If an object has no primitive\nvalue, <a href='#!/api/Ext.util.Sortable-method-valueOf'>valueOf</a> returns the object itself, which is displayed as:\n\n    [object Object]\n\nYou can use <a href='#!/api/Ext.util.Sortable-method-valueOf'>valueOf</a> within your own code to convert a built-in object into a primitive value.\nWhen you create a custom object, you can override `Object.valueOf` to call a custom method instead\nof the default <a href='#!/api/Object'>Object</a> method.\n\nYou can create a function to be called in place of the default <a href='#!/api/Ext.util.Sortable-method-valueOf'>valueOf</a> method. Your function must\ntake no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a <a href='#!/api/Ext.util.Sortable-method-valueOf'>valueOf</a> method for it.\nThe following code assigns a user-defined function to the object's valueOf method:\n\n    myNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type `myNumberType` is used in a context\nwhere it is to be represented as a primitive value, JavaScript automatically calls the function\ndefined in the preceding code.\n\nAn object's <a href='#!/api/Ext.util.Sortable-method-valueOf'>valueOf</a> method is usually invoked by JavaScript, but you can invoke it yourself as\nfollows:\n\n    myNumber.valueOf()\n\nNote: Objects in string contexts convert via the <a href='#!/api/Ext.util.Sortable-method-toString'>toString</a> method, which is different from\n<a href='#!/api/String'>String</a> objects converting to string primitives using <a href='#!/api/Ext.util.Sortable-method-valueOf'>valueOf</a>. All objects have a string\nconversion, if only `\"[object type]\"`. But many objects do not convert to number, boolean, or\nfunction.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Returns value of the object or the object itself.\n",
                    "type": "Object",
                    "src": {
                      "text": "1,340,21,50",
                      "type": "1,340,13"
                    }
                  }
                ],
                "src": {
                  "name": "1,301,12",
                  "text": "1,302,4,1821"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "constructor",
                "text": " Specifies the function that creates an object's prototype.\n\n Returns a reference to the Object function that created the instance's prototype. Note that the\n value of this property is a reference to the function itself, not a string containing the\n function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1,\n true, \"read-only\").\n\n All objects inherit a `constructor` property from their <a href='#!/api/Ext.util.Sortable-property-prototype'>prototype</a>:\n\n     o = new Object // or o = {} in JavaScript 1.2\n     o.constructor == Object\n     a = new Array // or a = [] in JavaScript 1.2\n     a.constructor == Array\n     n = new Number(3)\n     n.constructor == Number\n\n Even though you cannot construct most HTML objects, you can do comparisons. For example,\n\n     document.constructor == Document\n     document.form3.constructor == Form\n\n The following example creates a prototype, `Tree`, and an object of that type, theTree. The example then displays the `constructor` property for the object `theTree`.\n\n     function Tree(name) {\n         this.name = name;\n     }\n     theTree = new Tree(\"Redwood\");\n     console.log(\"theTree.constructor is \" + theTree.constructor);\n\n This example displays the following output:\n\n     theTree.constructor is function Tree(name) {\n         this.name = name;\n     }\n\n The following example shows how to modify constructor value of generic objects. Only true, 1 and\n \"test\" variable constructors will not be changed. This example explains that is not always so safe\n to believe in constructor function.\n\n     function Type(){};\n     var\ttypes = [\n \t    new Array,\t[],\n\t    new Boolean,\ttrue,\n\t    new Date,\n\t    new Error,\n\t    new Function,\tfunction(){},\n\t    Math,\n\t    new Number,\t1,\n\t    new Object,\t{},\n\t    new RegExp,\t/(?:)/,\n\t    new String,\t\"test\"\n     ];\n     for(var i = 0; i < types.length; i++){\n         types[i].constructor = Type;\n         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n     };\n     alert(types.join(\"\\n\"));\n",
                "src": {
                  "name": "1,346,14",
                  "text": "1,347,3,1996"
                }
              },
              {
                "$type": "property",
                "name": "isSortable",
                "text": "`true` in this class to identify an object as an instantiated Sortable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,10,28",
                  "text": "0,11,8,93",
                  "type": "0,10,19"
                }
              },
              {
                "$type": "property",
                "name": "prototype",
                "text": "Allows the addition of properties to all objects of type Object.\n",
                "src": {
                  "name": "1,46,14",
                  "text": "1,47,4,65"
                }
              }
            ]
          },
          {
            "$type": "static-methods",
            "items": [
              {
                "$type": "method",
                "name": "createComparator",
                "static": true,
                "text": "Creates a single comparator function which encapsulates the passed Sorter array.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "The sorter set for which to create a comparator function\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "name": "0,67,39",
                      "text": "0,67,47,57",
                      "type": "0,67,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "a function, which when passed two comparable objects returns the result\nof the whole sorter comparator functions.\n",
                    "type": "Function",
                    "src": {
                      "text": "0,68,31,72:0,69,12,42",
                      "type": "0,68,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,71,0",
                  "static": "0,63,-1",
                  "text": "0,66,12,81"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,8,0",
          "requires": "0,41,0",
          "text": "0,2,4,382"
        }
      }
    ]
  },
  "version": 1
}