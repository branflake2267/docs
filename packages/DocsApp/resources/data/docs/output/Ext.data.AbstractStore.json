{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/data/AbstractStore.js",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "mixins": "Ext.mixin.Observable,Ext.mixin.Factoryable",
        "name": "Ext.data.AbstractStore",
        "requires": "Ext.util.Collection,Ext.data.schema.Schema,Ext.util.Filter",
        "text": "AbstractStore is a superclass of <a href='#!/api/Ext.data.ProxyStore'>Ext.data.ProxyStore</a> and <a href='#!/api/Ext.data.ChainedStore'>Ext.data.ChainedStore</a>. It's never used directly,\nbut offers a set of methods used by both of those subclasses.\n\nWe've left it here in the docs for reference purposes, but unless you need to make a whole new type of Store, what\nyou're probably looking for is <a href='#!/api/Ext.data.Store'>Ext.data.Store</a>.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "autoDestroy",
                "optional": true,
                "text": "When a Store is used by only one <a href='#!/api/Ext.view.View'>Ext.view.View</a>, and should only exist for the lifetime of that view, then\nconfigure the autoDestroy flag as `true`. This causes the destruction of the view to trigger the destruction of its Store.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,46,28",
                  "text": "0,47,12,246",
                  "type": "0,46,18"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "autoSort",
                "optional": true,
                "text": "`true` to maintain sorted order when records\nare added regardless of requested insertion point, or when an item mutation\nresults in a new sort position.\n\nThis does not affect a ChainedStore's reaction to mutations of the source\nStore. If sorters are present when the source Store is mutated, this ChainedStore's\nsort order will always be maintained.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "access": "0,131,12",
                  "name": "0,124,28",
                  "text": "0,124,43,45:0,125,12,305",
                  "type": "0,124,18",
                  "value": "0,124,37"
                }
              },
              {
                "$type": "property",
                "name": "filters",
                "text": "Array of <a href='#!/api/Ext.util.Filter'>Ext.util.Filter</a> for this store. Can also be passed array of\nfunctions which will be used as the <a href='#!/api/Ext.util.Filter-cfg-filterFn'>Ext.util.Filter#filterFn</a> config\nfor filters:\n\n    filters: [\n        function(item) {\n            return item.weight > 0;\n        }\n    ]\n\nTo filter after the grid is loaded use the <a href='#!/api/Ext.data.Store-method-filterBy'>Ext.data.Store#filterBy</a> function.\n",
                "type": "Object[]/Function[]",
                "src": {
                  "name": "0,30,39",
                  "text": "0,31,12,371",
                  "type": "0,30,18"
                }
              },
              {
                "$type": "property",
                "name": "groupDir",
                "text": "The direction in which sorting should be applied when grouping. Supported values are \"ASC\" and \"DESC\".\n",
                "type": "String",
                "src": {
                  "name": "0,101,25",
                  "text": "0,102,11,103",
                  "type": "0,101,17"
                }
              },
              {
                "$type": "property",
                "name": "groupField",
                "text": "The field by which to group data in the store. Internally, grouping is very similar to sorting - the\ngroupField and <a href='#!/api/Ext.data.AbstractStore-cfg-groupDir'>groupDir</a> are injected as the first sorter (see <a href='#!/api/Ext.data.AbstractStore-method-sort'>method-sort</a>). Stores support a single\nlevel of grouping, and groups can be fetched via the <a href='#!/api/Ext.data.AbstractStore-method-getGroups'>getGroups</a> method.\n",
                "type": "String",
                "src": {
                  "name": "0,93,25",
                  "text": "0,94,11,299",
                  "type": "0,93,17"
                }
              },
              {
                "$type": "property",
                "name": "grouper",
                "text": "The grouper by which to group the data store. May also be specified by the <a href='#!/api/Ext.data.AbstractStore-cfg-groupField'>groupField</a> config, however\nthey should not be used together.\n",
                "type": "Object/Ext.util.Grouper",
                "src": {
                  "name": "0,107,43",
                  "text": "0,108,12,145",
                  "type": "0,107,18"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS <a href='#!/api/Ext.Component'>Ext.Component</a>**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the <a href='#!/api/Ext.view.View'>Ext.view.View</a>s **<a href='#!/api/Ext.view.View-event-itemclick'>Ext.view.View#itemclick</a>** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "1,243,25",
                  "text": "1,244,11,1325",
                  "type": "1,243,17"
                }
              },
              {
                "$type": "property",
                "name": "pageSize",
                "text": "The number of records considered to form a 'page'. This is used to power the built-in\npaging using the nextPage and previousPage functions when the grid is paged using a\n<a href='#!/api/Ext.toolbar.Paging'>Ext.toolbar.Paging</a> Defaults to 25.\n\nTo disable paging, set the pageSize to `0`.\n",
                "type": "Number",
                "src": {
                  "name": "0,114,25",
                  "text": "0,115,11,272",
                  "type": "0,114,17"
                }
              },
              {
                "$type": "property",
                "name": "remoteFilter",
                "optional": true,
                "text": "`true` to defer any filtering operation to the server. If `false`, filtering is done locally on the client.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,84,27",
                  "text": "0,85,11,108",
                  "type": "0,84,17",
                  "value": "0,84,40"
                }
              },
              {
                "$type": "property",
                "name": "remoteSort",
                "optional": true,
                "text": "`true` if the sorting should be performed on the server side, false if it is local only.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,75,27",
                  "text": "0,76,11,89",
                  "type": "0,75,17",
                  "value": "0,75,38"
                }
              },
              {
                "$type": "property",
                "name": "sorters",
                "text": "The initial set of <a href='#!/api/Ext.util.Sorter'>Ext.util.Sorter</a>\n",
                "type": "Ext.util.Sorter[]/Object[]",
                "src": {
                  "name": "0,69,46",
                  "text": "0,70,12,51",
                  "type": "0,69,18"
                }
              },
              {
                "$type": "property",
                "name": "statefulFilters",
                "optional": true,
                "text": "Configure as `true` to have the filters saved when a client <a href='#!/api/Ext.grid.Panel'>Ext.grid.Panel</a> saves its state.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,63,28",
                  "text": "0,64,12,105",
                  "type": "0,63,18",
                  "value": "0,63,44"
                }
              },
              {
                "$type": "property",
                "name": "storeId",
                "text": "Unique identifier for this store. If present, this Store will be registered with the <a href='#!/api/Ext.data.StoreManager'>Ext.data.StoreManager</a>,\nmaking it easy to reuse elsewhere.\n\nNote that when a store is instantiated by a Controller, the storeId will default\nto the name of the store if not specified in the class.\n",
                "type": "String",
                "src": {
                  "name": "0,53,26",
                  "text": "0,54,12,289",
                  "type": "0,53,18"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "add",
                "since": "1.1.0",
                "text": "Fired when a Model instance has been added to this Store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store.\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "0,175,36",
                      "text": "0,175,42,11",
                      "type": "0,175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "The records that were added.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "0,176,38",
                      "text": "0,176,46,29",
                      "type": "0,176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which the records were inserted.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,177,28",
                      "text": "0,177,34,46",
                      "type": "0,177,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,172,19",
                  "since": "0,178,19",
                  "text": "0,173,12,59"
                }
              },
              {
                "$type": "event",
                "name": "beforesort",
                "text": "Fires before a store is sorted.\n\nFor <a href='#!/api/Ext.data.AbstractStore-cfg-remoteSort'>remoteSort</a> stores, this will be just before the load operation triggered by changing the\nstore's sorters.\n\nFor locally sorted stores, this will be just before the data items in the store's backing collection are sorted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store being sorted\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "0,257,36",
                      "text": "0,257,42,23",
                      "type": "0,257,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sorters",
                    "text": "Array of sorters applied to the store\n",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "name": "0,258,39",
                      "text": "0,258,47,38",
                      "type": "0,258,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,250,19",
                  "text": "0,251,12,282"
                }
              },
              {
                "$type": "event",
                "name": "beginupdate",
                "text": "Fires when the <a href='#!/api/Ext.data.AbstractStore-method-beginUpdate'>beginUpdate</a> method is called. Automatic synchronization as configured\nby the <a href='#!/api/Ext.data.ProxyStore-cfg-autoSync'>Ext.data.ProxyStore#autoSync</a> flag is deferred until the <a href='#!/api/Ext.data.AbstractStore-method-endUpdate'>endUpdate</a> method is called, so multiple\nmutations can be coalesced into one synchronization operation.\n",
                "src": {
                  "name": "0,236,19",
                  "text": "0,237,12,286"
                }
              },
              {
                "$type": "event",
                "name": "clear",
                "since": "1.1.0",
                "text": "Fired after the <a href='#!/api/Ext.data.Store-method-removeAll'>Ext.data.Store#removeAll</a> method is called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "0,215,36",
                      "type": "0,215,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,213,19",
                  "since": "0,216,19",
                  "text": "0,214,12,77"
                }
              },
              {
                "$type": "event",
                "name": "datachanged",
                "since": "1.1.0",
                "text": "Fires whenever records are added to or removed from the Store.\n\nTo hook into modifications of records in this Store use the <a href='#!/api/Ext.data.AbstractStore-event-update'>update</a> event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The data store\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "0,224,36",
                      "text": "0,224,41,15",
                      "type": "0,224,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,220,19",
                  "since": "0,225,19",
                  "text": "0,221,12,147"
                }
              },
              {
                "$type": "event",
                "name": "endupdate",
                "text": "Fires when the <a href='#!/api/Ext.data.AbstractStore-method-endUpdate'>endUpdate</a> method is called. Automatic synchronization as configured\nby the <a href='#!/api/Ext.data.ProxyStore-cfg-autoSync'>Ext.data.ProxyStore#autoSync</a> flag is deferred until the <a href='#!/api/Ext.data.AbstractStore-method-endUpdate'>endUpdate</a> method is called, so multiple\nmutations can be coalesced into one synchronization operation.\n",
                "src": {
                  "name": "0,243,19",
                  "text": "0,244,12,284"
                }
              },
              {
                "$type": "event",
                "name": "refresh",
                "text": "Fires when the data cache has changed in a bulk manner (e.g., it has been sorted, filtered, etc.) and a\nwidget that is using this Store as a Record cache should refresh its view.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "text": "The data store\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "0,232,36",
                      "text": "0,232,41,15",
                      "type": "0,232,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,229,19",
                  "text": "0,230,12,179"
                }
              },
              {
                "$type": "event",
                "name": "remove",
                "since": "5.0.0",
                "text": "Fired when one or more records have been removed from this Store.\n\n**The signature for this event has changed in 5.0: **\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The Store object\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "0,187,36",
                      "text": "0,187,42,17",
                      "type": "0,187,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "records",
                    "text": "The records that were removed. In previous\nreleases this was a single record, not an array.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "0,188,38",
                      "text": "0,188,46,43:0,189,12,49",
                      "type": "0,188,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index at which the records were removed.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,190,28",
                      "text": "0,190,34,45",
                      "type": "0,190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isMove",
                    "text": "`true` if the child node is being removed so it can be\nmoved to another position in this Store.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,191,29",
                      "text": "0,191,36,55:0,192,12,41",
                      "type": "0,191,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,182,19",
                  "since": "0,193,19",
                  "text": "0,183,12,122"
                }
              },
              {
                "$type": "event",
                "name": "sort",
                "text": "Fires after a store is sorted.\n\nFor <a href='#!/api/Ext.data.AbstractStore-cfg-remoteSort'>remoteSort</a> stores, this will be upon the success of a load operation triggered by\nchanging the store's sorters.\n\nFor locally sorted stores, this will be just after the data items in the store's backing collection are sorted.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store being sorted\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "0,269,36",
                      "text": "0,269,42,23",
                      "type": "0,269,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,262,19",
                  "text": "0,263,12,286"
                }
              },
              {
                "$type": "event",
                "name": "update",
                "since": "1.1.0",
                "text": "Fires when a Model instance has been updated.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "this",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "0,199,36",
                      "type": "0,199,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The Model instance that was updated\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,200,36",
                      "text": "0,200,43,36",
                      "type": "0,200,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "operation",
                    "text": "The update operation being performed. Value may be one of:\n\n    Ext.data.Model.EDIT\n    Ext.data.Model.REJECT\n    Ext.data.Model.COMMIT\n",
                    "type": "String",
                    "src": {
                      "name": "0,201,28",
                      "text": "0,201,38,59:0,202,12,77",
                      "type": "0,201,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "modifiedFieldNames",
                    "text": "Array of field names changed during edit.\n",
                    "type": "String[]",
                    "src": {
                      "name": "0,206,30",
                      "text": "0,206,49,42",
                      "type": "0,206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "details",
                    "text": "An object describing the change. See the\n<a href='#!/api/Ext.util.Collection-event-itemchange'>Ext.util.Collection#event-itemchange</a> of the store's backing collection\n",
                    "type": "Object",
                    "src": {
                      "name": "0,207,28",
                      "text": "0,207,36,41:0,208,12,96",
                      "type": "0,207,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,197,19",
                  "since": "0,209,19",
                  "text": "0,198,12,46"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "1,413,27",
                      "type": "1,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,414,30,35",
                      "type": "1,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,412,12",
                  "name": "1,416,0",
                  "text": "1,411,12,65"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for <a href='#!/api/Ext.data.AbstractStore-method-onAfter'>onAfter</a>.\n",
                "src": {
                  "name": "1,1236,0",
                  "text": "1,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.data.AbstractStore-method-onBefore'>onBefore</a>.\n",
                "src": {
                  "name": "1,1230,0",
                  "text": "1,1228,12,29"
                }
              },
              {
                "$type": "method",
                "name": "addFilter",
                "text": "Adds a new Filter to this Store's <a href='#!/api/Ext.data.AbstractStore-cfg-filters'>cfg-filters</a> and\nby default, applies the updated filter set to the Store's unfiltered dataset.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "filters",
                    "text": "The set of filters to add to the current <a href='#!/api/Ext.data.AbstractStore-cfg-filters'>cfg-filters</a>.\n",
                    "type": "Object[]/Ext.util.Filter[]",
                    "src": {
                      "name": "0,600,44",
                      "text": "0,600,52,74",
                      "type": "0,600,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "suppressEvent",
                    "optional": true,
                    "text": "If `true` the filter is cleared silently.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,601,26",
                      "text": "0,601,41,42",
                      "type": "0,601,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,603,0",
                  "text": "0,598,8,148"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The <a href='#!/api/Ext.data.AbstractStore-method-on'>on</a> method is shorthand for\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "1,835,35",
                      "text": "1,835,45,37:1,836,12,61",
                      "type": "1,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,838,38",
                      "text": "1,838,42,46:1,839,12,166",
                      "type": "1,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "1,843,29",
                      "text": "1,843,36,62:1,844,12,73",
                      "type": "1,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "1,853,36",
                          "text": "1,854,12,139",
                          "type": "1,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,857,36",
                          "text": "1,858,12,94",
                          "type": "1,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,861,37",
                          "text": "1,862,12,96",
                          "type": "1,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an <a href='#!/api/Ext.util.DelayedTask'>Ext.util.DelayedTask</a> delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,865,36",
                          "text": "1,866,12,262",
                          "type": "1,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  <a href='#!/api/Ext.Function-method-requestAnimationFrame'>Ext.Function#requestAnimationFrame</a>. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,870,36",
                          "text": "1,871,12,323",
                          "type": "1,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "1,877,49",
                          "text": "1,878,12,135",
                          "type": "1,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.Component'>Ext.Component</a>.**\n  The name of a Component property which references an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of <a href='#!/api/Ext.Component'>Ext.Component</a> which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "1,881,36",
                          "text": "1,882,12,781",
                          "type": "1,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "1,905,37",
                          "text": "1,906,12,295",
                          "type": "1,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopPropagation'>Ext.event.Event#stopPropagation</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,914,38",
                          "text": "1,915,12,212",
                          "type": "1,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-preventDefault'>Ext.event.Event#preventDefault</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,919,38",
                          "text": "1,920,12,210",
                          "type": "1,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopEvent'>Ext.event.Event#stopEvent</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "1,924,38",
                          "text": "1,925,12,200",
                          "type": "1,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "1,929,36",
                          "text": "1,930,12,179",
                          "type": "1,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `destroy` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using <a href='#!/api/Ext.data.AbstractStore-method-un'>un</a>; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See <a href='#!/api/Ext.data.AbstractStore-method-un'>un</a> for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "1,934,38",
                          "text": "1,935,12,441",
                          "type": "1,934,20",
                          "value": "1,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "1,942,37",
                          "text": "1,943,12,737",
                          "type": "1,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "1,954,37",
                          "text": "1,955,12,301",
                          "type": "1,954,20",
                          "value": "1,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "1,846,29",
                      "text": "1,846,38,44:1,847,12,154",
                      "type": "1,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "1,962,29",
                      "text": "1,963,12,1831",
                      "type": "1,962,20",
                      "value": "1,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1021,29,54:1,1022,12,516",
                      "type": "1,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1041,0",
                  "text": "1,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use <a href='#!/api/Ext.data.AbstractStore-method-mon'>mon</a> or <a href='#!/api/Ext.data.AbstractStore-method-addManagedListener'>addManagedListener</a> if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "1,456,56",
                      "text": "1,456,61,47",
                      "type": "1,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "1,457,34",
                      "text": "1,457,40,63",
                      "type": "1,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,458,36",
                      "text": "1,458,39,49:1,459,11,85",
                      "type": "1,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,461,27",
                      "text": "1,461,33,92:1,462,11,43",
                      "type": "1,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> options.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,463,27",
                      "text": "1,463,35,67:1,464,11,61",
                      "type": "1,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "1,465,28,54:1,466,11,513",
                      "type": "1,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,484,0",
                  "text": "1,430,11,1093"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "applyState",
                "text": "Restores state to the passed state\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "src": {
                      "name": "0,795,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,792,8",
                  "name": "0,795,0",
                  "text": "0,793,8,35"
                }
              },
              {
                "$type": "method",
                "name": "beginUpdate",
                "since": "5.0.0",
                "text": "This method may be called to indicate the start of multiple changes to the store.\n\nAutomatic synchronization as configured by the <a href='#!/api/Ext.data.ProxyStore-cfg-autoSync'>Ext.data.ProxyStore#autoSync</a> flag is deferred\nuntil the <a href='#!/api/Ext.data.AbstractStore-method-endUpdate'>endUpdate</a> method is called, so multiple mutations can be coalesced\ninto one synchronization operation.\n\nInternally this method increments a counter that is decremented by <a href='#!/api/Ext.data.AbstractStore-method-endUpdate'>endUpdate</a>. It\nis important, therefore, that if you call <a href='#!/api/Ext.data.AbstractStore-method-beginUpdate'>beginUpdate</a> directly you match that\ncall with a call to <a href='#!/api/Ext.data.AbstractStore-method-endUpdate'>endUpdate</a> or you will prevent the collection from updating\nproperly.\n\nFor example:\n\n     var store = Ext.StoreManager.lookup({\n         //...\n         autoSync: true\n     });\n\n     store.beginUpdate();\n\n     record.set('fieldName', 'newValue');\n\n     store.add(item);\n     // ...\n\n     store.insert(index, otherItem);\n     //...\n\n     // Interested parties will listen for the endupdate event\n     store.endUpdate();\n",
                "src": {
                  "name": "0,723,0",
                  "since": "0,721,15",
                  "text": "0,690,8,919"
                }
              },
              {
                "$type": "method",
                "name": "clearFilter",
                "text": "Reverts to a view of the Record cache with no filtering applied.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "suppressEvent",
                    "optional": true,
                    "text": "If `true` the filter is cleared silently.\n\nFor a locally filtered Store, this means that the filter collection is cleared without firing the\n<a href='#!/api/Ext.data.AbstractStore-event-datachanged'>datachanged</a> event.\n\nFor a remotely filtered Store, this means that the filter collection is cleared, but the store\nis not reloaded from the server.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,632,26",
                      "text": "0,632,41,42:0,633,8,256",
                      "type": "0,632,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,640,0",
                  "text": "0,631,8,65"
                }
              },
              {
                "$type": "method",
                "name": "clearGrouping",
                "text": "Clear the store grouping\n",
                "src": {
                  "name": "0,1050,0",
                  "text": "0,1048,8,25"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "1,1255,0",
                  "text": "1,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "1,1291,0",
                  "text": "1,1289,11,47"
                }
              },
              {
                "$type": "method",
                "name": "contains",
                "text": "Checks if a record is in the current active data set.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,317,32",
                      "text": "0,317,39,11",
                      "type": "0,317,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the record is in the current active data set.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,318,26,56",
                      "type": "0,318,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,319,16",
                  "text": "0,316,8,54"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1522,27",
                      "text": "1,1522,35,55",
                      "type": "1,1522,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,1523,26",
                      "text": "1,1523,35,61",
                      "type": "1,1523,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "1,1524,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,1520,11",
                  "name": "1,1526,0",
                  "text": "1,1521,11,103"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "1,761,27",
                      "type": "1,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "1,762,26",
                      "type": "1,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "1,763,28",
                      "type": "1,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,759,11",
                  "name": "1,765,0",
                  "text": "1,758,11,24"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "1,1567,36",
                      "text": "1,1567,47,54",
                      "type": "1,1567,19"
                    }
                  }
                ],
                "src": {
                  "name": "1,1569,0",
                  "text": "1,1534,11,1138"
                }
              },
              {
                "$type": "method",
                "name": "endUpdate",
                "since": "5.0.0",
                "text": "This method is called after modifications are complete on a store. For details\nsee <a href='#!/api/Ext.data.AbstractStore-method-beginUpdate'>beginUpdate</a>.\n",
                "src": {
                  "name": "0,734,0",
                  "since": "0,732,15",
                  "text": "0,730,8,107"
                }
              },
              {
                "$type": "method",
                "name": "filter",
                "text": "Filters the data in the Store by one or more fields. Example usage:\n\n    //filter with a single field\n    myStore.filter('firstName', 'Don');\n\n    //filtering with multiple filters\n    myStore.filter([\n        {\n            property : 'firstName',\n            value    : 'Don'\n        },\n        {\n            property : 'lastName',\n            direction: 'Griffin'\n        }\n    ]);\n\nInternally, Store converts the passed arguments into an array of <a href='#!/api/Ext.util.Filter'>Ext.util.Filter</a> instances, and delegates\nthe actual filtering to its internal <a href='#!/api/Ext.util.MixedCollection'>Ext.util.MixedCollection</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "filters",
                    "optional": true,
                    "text": "Either a string name of one of the fields in this Store's configured\n<a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, or an array of filter configurations.\n",
                    "type": "String/Ext.util.Filter[]",
                    "src": {
                      "name": "0,546,43",
                      "text": "0,546,52,69:0,547,8,68",
                      "type": "0,546,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "optional": true,
                    "text": "The property value by which to filter. Only applicable if <a href='#!/api/Ext.data.AbstractStore-cfg-filters'>filters</a> is a string.\n",
                    "type": "String",
                    "src": {
                      "name": "0,548,25",
                      "text": "0,548,32,81",
                      "type": "0,548,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,550,0",
                  "text": "0,526,8,571"
                }
              },
              {
                "$type": "method",
                "name": "filterBy",
                "text": "Filters by a function. The specified function will be called for each\nRecord in this Store. If the function returns `true` the Record is included,\notherwise it is filtered out.\n\nWhen store is filtered, most of the methods for accessing store data will be working only\nwithin the set of filtered records. The notable exception is <a href='#!/api/Ext.data.AbstractStore-method-getById'>getById</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called. It will be passed the following parameters:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record to test for filtering. Access field values\n using <a href='#!/api/Ext.data.Model-method-get'>Ext.data.Model#get</a>.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "0,618,36",
                          "text": "0,618,43,54:0,619,8,35",
                          "type": "0,618,17"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,617,26",
                      "text": "0,617,29,71",
                      "type": "0,617,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed.\nDefaults to this Store.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,620,25",
                      "text": "0,620,32,62:0,621,8,24",
                      "type": "0,620,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,623,0",
                  "text": "0,610,8,348"
                }
              },
              {
                "$type": "method",
                "name": "find",
                "text": "Finds the index of the first matching Record in this store by a specific field value.\n\nWhen store is filtered, finds records only within filter.\n\n**IMPORTANT\n\nIf this store is <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>, this can ONLY find records which happen to be cached in the page cache.\nThis will be parts of the dataset around the currently visible zone, or recently visited zones if the pages\nhave not yet been purged from the cache.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "property",
                    "text": "The name of the Record field to test.\n",
                    "type": "String",
                    "src": {
                      "name": "0,333,24",
                      "text": "0,333,33,38",
                      "type": "0,333,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Either a string that the field value\nshould begin with, or a RegExp to test against the field.\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "0,334,31",
                      "text": "0,334,37,37:0,335,8,58",
                      "type": "0,334,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startIndex",
                    "optional": true,
                    "text": "The index to start searching at\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,336,25",
                      "text": "0,336,39,32",
                      "type": "0,336,16",
                      "value": "0,336,36"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "optional": true,
                    "text": "True to match any part of the string, not just the\nbeginning.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,337,26",
                      "text": "0,337,42,51:0,338,8,11",
                      "type": "0,337,16",
                      "value": "0,337,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "optional": true,
                    "text": "True for case sensitive comparison\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,339,26",
                      "text": "0,339,47,35",
                      "type": "0,339,16",
                      "value": "0,339,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "exactMatch",
                    "optional": true,
                    "text": "True to force exact match (^ and $ characters\nadded to the regex). Ignored if `anyMatch` is `true`.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,340,26",
                      "text": "0,340,44,46:0,341,8,54",
                      "type": "0,340,16",
                      "value": "0,340,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1\n",
                    "type": "Number",
                    "src": {
                      "text": "0,342,25,24",
                      "type": "0,342,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,344,0",
                  "text": "0,323,8,441"
                }
              },
              {
                "$type": "method",
                "name": "findBy",
                "text": "Find the index of the first matching Record in this Store by a function.\nIf the function returns `true` it is considered a match.\n\nWhen store is filtered, finds records only within filter.\n\n**IMPORTANT\n\nIf this store is <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>, this can ONLY find records which happen to be cached in the page cache.\nThis will be parts of the dataset around the currently visible zone, or recently visited zones if the pages\nhave not yet been purged from the cache.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to be called. It will be passed the following parameters:\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "record",
                        "text": "The record to test for filtering. Access field values\n using <a href='#!/api/Ext.data.Model-method-get'>Ext.data.Model#get</a>.\n",
                        "type": "Ext.data.Model",
                        "src": {
                          "name": "0,421,36",
                          "text": "0,421,43,54:0,422,8,35",
                          "type": "0,421,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "id",
                        "text": "The ID of the Record passed.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,423,28",
                          "text": "0,423,31,29",
                          "type": "0,423,17"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,420,26",
                      "text": "0,420,29,71",
                      "type": "0,420,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (this reference) in which the function is executed.\nDefaults to this Store.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,424,25",
                      "text": "0,424,32,62:0,425,8,24",
                      "type": "0,424,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startIndex",
                    "optional": true,
                    "text": "The index to start searching at\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,426,25",
                      "text": "0,426,39,32",
                      "type": "0,426,16",
                      "value": "0,426,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1\n",
                    "type": "Number",
                    "src": {
                      "text": "0,427,25,24",
                      "type": "0,427,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,429,0",
                  "text": "0,409,8,485"
                }
              },
              {
                "$type": "method",
                "name": "findExact",
                "text": "Finds the index of the first matching Record in this store by a specific field value.\n\nWhen store is filtered, finds records only within filter.\n\n**IMPORTANT\n\nIf this store is <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>, this can ONLY find records which happen to be cached in the page cache.\nThis will be parts of the dataset around the currently visible zone, or recently visited zones if the pages\nhave not yet been purged from the cache.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fieldName",
                    "text": "The name of the Record field to test.\n",
                    "type": "String",
                    "src": {
                      "name": "0,397,24",
                      "text": "0,397,34,38",
                      "type": "0,397,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to match the field against.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,398,24",
                      "text": "0,398,30,38",
                      "type": "0,398,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startIndex",
                    "optional": true,
                    "text": "The index to start searching at\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,399,25",
                      "text": "0,399,39,32",
                      "type": "0,399,16",
                      "value": "0,399,36"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched index or -1\n",
                    "type": "Number",
                    "src": {
                      "text": "0,400,25,24",
                      "type": "0,400,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,402,0",
                  "text": "0,387,8,441"
                }
              },
              {
                "$type": "method",
                "name": "findRecord",
                "text": "Finds the first matching Record in this store by a specific field value.\n\nWhen store is filtered, finds records only within filter.\n\n**IMPORTANT\n\nIf this store is <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>, this can ONLY find records which happen to be cached in the page cache.\nThis will be parts of the dataset around the currently visible zone, or recently visited zones if the pages\nhave not yet been purged from the cache.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fieldName",
                    "text": "The name of the Record field to test.\n",
                    "type": "String",
                    "src": {
                      "name": "0,369,24",
                      "text": "0,369,34,38",
                      "type": "0,369,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Either a string that the field value\nshould begin with, or a RegExp to test against the field.\n",
                    "type": "String/RegExp",
                    "src": {
                      "name": "0,370,31",
                      "text": "0,370,37,37:0,371,8,58",
                      "type": "0,370,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "startIndex",
                    "optional": true,
                    "text": "The index to start searching at\n",
                    "type": "Number",
                    "value": "0",
                    "src": {
                      "name": "0,372,25",
                      "text": "0,372,39,32",
                      "type": "0,372,16",
                      "value": "0,372,36"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "anyMatch",
                    "optional": true,
                    "text": "True to match any part of the string, not just the\nbeginning.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,373,26",
                      "text": "0,373,42,51:0,374,8,11",
                      "type": "0,373,16",
                      "value": "0,373,35"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "caseSensitive",
                    "optional": true,
                    "text": "True for case sensitive comparison\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,375,26",
                      "text": "0,375,47,35",
                      "type": "0,375,16",
                      "value": "0,375,40"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "exactMatch",
                    "optional": true,
                    "text": "True to force exact match (^ and $ characters\nadded to the regex). Ignored if `anyMatch` is `true`.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,376,26",
                      "text": "0,376,44,46:0,377,8,54",
                      "type": "0,376,16",
                      "value": "0,376,37"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matched record or null\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,378,33,27",
                      "type": "0,378,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,380,0",
                  "text": "0,359,8,428"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use <a href='#!/api/Ext.data.AbstractStore-fireEventAction'>fireEventAction</a> instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "1,640,28",
                      "text": "1,640,38,31",
                      "type": "1,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,641,27",
                      "text": "1,641,32,58",
                      "type": "1,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,642,30",
                      "text": "1,642,33,21",
                      "type": "1,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "1,643,29",
                      "text": "1,643,36,62:1,644,12,72",
                      "type": "1,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "1,645,29",
                      "text": "1,645,38,52:1,646,12,72",
                      "type": "1,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "1,647,29",
                      "text": "1,647,45,47:1,648,12,394",
                      "type": "1,647,20",
                      "value": "1,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "1,653,12",
                  "deprecatedVersion": "1,653,12",
                  "name": "1,655,0",
                  "text": "1,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>).\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.data.AbstractStore-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "1,568,27",
                      "text": "1,568,37,31",
                      "type": "1,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "1,569,30",
                      "text": "1,569,35,54",
                      "type": "1,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,570,29,77",
                      "type": "1,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,572,0",
                  "text": "1,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.data.AbstractStore-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "1,605,27",
                      "text": "1,605,37,31",
                      "type": "1,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "1,606,29",
                      "text": "1,606,34,53",
                      "type": "1,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,607,29,77",
                      "type": "1,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,609,0",
                  "text": "1,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "1,721,28",
                      "text": "1,721,38,31",
                      "type": "1,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "1,722,27",
                      "text": "1,722,32,58",
                      "type": "1,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,723,37",
                      "text": "1,723,40,21",
                      "type": "1,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "1,724,29",
                      "text": "1,724,36,62:1,725,12,72",
                      "type": "1,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "1,726,36",
                      "text": "1,726,44,47:1,727,12,201",
                      "type": "1,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,731,0",
                  "text": "1,714,12,409"
                }
              },
              {
                "$type": "method",
                "name": "getAt",
                "text": "Get the Record at the specified index.\n\nThe index is effected by filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "index",
                    "text": "The index of the Record to find.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,438,24",
                      "text": "0,438,30,33",
                      "type": "0,438,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Record at the passed index. Returns null if not found.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,439,33,59",
                      "type": "0,439,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,441,0",
                  "text": "0,434,8,77"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "1,793,41,63",
                      "type": "1,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "1,792,11",
                  "name": "1,795,0",
                  "text": "1,791,11,43"
                }
              },
              {
                "$type": "method",
                "name": "getById",
                "text": "Get the Record with the specified id.\n\nThis method is not affected by filtering, lookup will be performed from all records\ninside the store, filtered or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id of the Record to find.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,822,23",
                      "text": "0,822,26,30",
                      "type": "0,822,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The Record with the passed id. Returns null if not found.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "text": "0,823,33,58",
                      "type": "0,823,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,824,16",
                  "text": "0,817,8,159"
                }
              },
              {
                "$type": "method",
                "name": "getCount",
                "text": "Gets the number of records in store.\n\nIf using paging, this may not be the total size of the dataset. If the data object\nused by the Reader contains the dataset size, then the <a href='#!/api/Ext.data.ProxyStore-method-getTotalCount'>Ext.data.ProxyStore#getTotalCount</a> function returns\nthe dataset size.  **Note**: see the Important note in <a href='#!/api/Ext.data.ProxyStore-method-load'>Ext.data.ProxyStore#method-load</a>.\n\nWhen store is filtered, it's the number of records matching the filter.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The number of Records in the Store.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,294,25,36",
                      "type": "0,294,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,296,0",
                  "text": "0,286,8,405"
                }
              },
              {
                "$type": "method",
                "name": "getFilters",
                "text": "Gets the filters for this store.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The filters\n",
                    "type": "Ext.util.FilterCollection",
                    "src": {
                      "text": "0,468,44,12",
                      "type": "0,468,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "autoCreate",
                    "src": {
                      "name": "0,470,0"
                    }
                  }
                ],
                "src": {
                  "name": "0,470,0",
                  "text": "0,467,8,33"
                }
              },
              {
                "$type": "method",
                "name": "getGroups",
                "text": "Returns a collection of readonly sub-collections of your store's records\nwith grouping applied. These sub-collections are maintained internally by\nthe collection.\n\nSee <a href='#!/api/Ext.data.AbstractStore-cfg-groupField'>groupField</a>, <a href='#!/api/Ext.data.AbstractStore-cfg-groupDir'>groupDir</a>. Example for a store\ncontaining records with a color field:\n\n    var myStore = Ext.create('Ext.data.Store', {\n        groupField: 'color',\n        groupDir  : 'DESC'\n    });\n\n    myStore.getGroups();\n\nThe above should result in the following format:\n\n    [\n        {\n            name: 'yellow',\n            children: [\n                // all records where the color field is 'yellow'\n            ]\n        },\n        {\n            name: 'red',\n            children: [\n                // all records where the color field is 'red'\n            ]\n        }\n    ]\n\nGroup contents are affected by filtering.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The grouped data\n",
                    "type": "Ext.util.Collection",
                    "src": {
                      "text": "0,1111,38,17",
                      "type": "0,1111,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1113,0",
                  "text": "0,1078,8,811"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "2,75,25,3",
                      "type": "2,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,77,0",
                  "text": "2,74,8,93"
                }
              },
              {
                "$type": "method",
                "name": "getRange",
                "text": "Gathers a range of Records between specified indices.\n\nThis method is affected by filtering.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "start",
                    "text": "The starting index. Defaults to zero.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,450,24",
                      "text": "0,450,30,38",
                      "type": "0,450,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "text": "The ending index. Defaults to the last record. The end index **is included**.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,451,24",
                      "text": "0,451,28,78",
                      "type": "0,451,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An array of records.\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "text": "0,452,35,21",
                      "type": "0,452,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,454,0",
                  "text": "0,446,8,94"
                }
              },
              {
                "$type": "method",
                "name": "getSorters",
                "text": "Gets the sorters for this store.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The sorters\n",
                    "type": "Ext.util.SorterCollection",
                    "src": {
                      "text": "0,497,44,12",
                      "type": "0,497,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "autoCreate",
                    "src": {
                      "name": "0,499,0"
                    }
                  }
                ],
                "src": {
                  "name": "0,499,0",
                  "text": "0,496,8,33"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getState",
                "text": "Returns the grouping, sorting and filtered state of this Store.\n",
                "src": {
                  "access": "0,742,8",
                  "name": "0,745,0",
                  "text": "0,743,8,64"
                }
              },
              {
                "$type": "method",
                "name": "group",
                "text": "Groups data inside the store.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grouper",
                    "text": "Either a string name of one of the fields in this Store's\nconfigured <a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, or an object, or a <a href='#!/api/Ext.util.Grouper'>Ext.util.Grouper</a> configuration object.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "0,1002,31",
                      "text": "0,1002,39,58:0,1003,8,115",
                      "type": "0,1002,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "direction",
                    "optional": true,
                    "text": "The overall direction to group the data by. Defaults to the value of <a href='#!/api/Ext.data.AbstractStore-cfg-groupDir'>groupDir</a>.\n",
                    "type": "String",
                    "src": {
                      "name": "0,1004,25",
                      "text": "0,1004,36,88",
                      "type": "0,1004,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,1006,0",
                  "text": "0,1001,8,30"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "1,1334,27",
                      "text": "1,1334,37,35",
                      "type": "1,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1335,29,67",
                      "type": "1,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1337,0",
                  "text": "1,1331,11,161"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "hasPendingLoad",
                "text": "Returns true if the store has a pending load task.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the store has a pending load task.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,829,26,45",
                      "type": "0,829,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,830,8",
                  "name": "0,833,0",
                  "text": "0,828,8,51"
                }
              },
              {
                "$type": "method",
                "name": "isFiltered",
                "text": "Tests whether the store currently has any active filters.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the store is filtered.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,654,26,33",
                      "type": "0,654,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,656,0",
                  "text": "0,653,8,58"
                }
              },
              {
                "$type": "method",
                "name": "isGrouped",
                "text": "Tests whether the store currently has an active grouper.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the store is grouped.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1066,26,32",
                      "type": "0,1066,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1068,0",
                  "text": "0,1065,8,57"
                }
              },
              {
                "$type": "method",
                "name": "isLoaded",
                "text": "Returns `true` if the Store has been loaded.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the Store has been loaded.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,837,26,37",
                      "type": "0,837,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,840,0",
                  "text": "0,836,8,45"
                }
              },
              {
                "$type": "method",
                "name": "isLoading",
                "text": "Returns `true` if the Store is currently performing a load operation.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the Store is currently loading.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,844,26,42",
                      "type": "0,844,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,847,0",
                  "text": "0,843,8,70"
                }
              },
              {
                "$type": "method",
                "name": "isSorted",
                "text": "Tests whether the store currently has any active sorters.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "`true` if the store is sorted.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,662,26,31",
                      "type": "0,662,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,664,0",
                  "text": "0,661,8,58"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "1,1344,29",
                      "text": "1,1344,36,40",
                      "type": "1,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,1345,30,31",
                      "type": "1,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1347,0",
                  "text": "1,1343,12,57"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for <a href='#!/api/Ext.data.AbstractStore-method-addManagedListener'>addManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "1,1787,12",
                  "name": "1,1789,0",
                  "text": "1,1786,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for <a href='#!/api/Ext.data.AbstractStore-method-removeManagedListener'>removeManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "1,1793,12",
                  "name": "1,1795,0",
                  "text": "1,1792,12,46"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "1,1775,12",
                  "name": "1,1777,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "1,1190,44",
                      "text": "1,1190,54,37",
                      "type": "1,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,1191,37",
                      "text": "1,1191,40,30",
                      "type": "1,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1192,29",
                      "text": "1,1192,36,20",
                      "type": "1,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1193,29",
                      "text": "1,1193,38,44",
                      "type": "1,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1195,0",
                  "text": "1,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "1,1175,44",
                      "text": "1,1175,54,37",
                      "type": "1,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,1176,37",
                      "text": "1,1176,40,30",
                      "type": "1,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1177,29",
                      "text": "1,1177,36,20",
                      "type": "1,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1178,29",
                      "text": "1,1178,38,44",
                      "type": "1,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1180,0",
                  "text": "1,1170,12,183"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "rangeCached",
                "text": "Determines if the passed range is available in the page cache.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "start",
                    "text": "The start index\n",
                    "type": "Number",
                    "src": {
                      "name": "0,308,24",
                      "text": "0,308,30,16",
                      "type": "0,308,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "text": "The end index in the range\n",
                    "type": "Number",
                    "src": {
                      "name": "0,309,24",
                      "text": "0,309,28,27",
                      "type": "0,309,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,307,8",
                  "name": "0,311,0",
                  "text": "0,306,8,63"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1466,27",
                      "text": "1,1466,34,53",
                      "type": "1,1466,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "1,1467,36",
                      "text": "1,1467,43,58:1,1468,11,231",
                      "type": "1,1467,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1473,28",
                      "text": "1,1473,36,60:1,1474,11,164",
                      "type": "1,1473,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "1,1479,28,130:1,1480,11,192",
                      "type": "1,1479,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1490,0",
                  "text": "1,1453,11,651"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for <a href='#!/api/Ext.data.AbstractStore-method-unAfter'>unAfter</a>.\n",
                "src": {
                  "name": "1,1248,0",
                  "text": "1,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.data.AbstractStore-method-unBefore'>unBefore</a>.\n",
                "src": {
                  "name": "1,1242,0",
                  "text": "1,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeFilter",
                "text": "Removes an individual Filter from the current <a href='#!/api/Ext.data.AbstractStore-cfg-filters'>cfg-filters</a> using the passed Filter/Filter id and\nby default, applies the updated filter set to the Store's unfiltered dataset.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "toRemove",
                    "text": "The id of a Filter to remove from the filter set, or a Filter instance to remove.\n",
                    "type": "String/Ext.util.Filter",
                    "src": {
                      "name": "0,566,40",
                      "text": "0,566,49,82",
                      "type": "0,566,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "suppressEvent",
                    "optional": true,
                    "text": "If `true` the filter is cleared silently.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,567,26",
                      "text": "0,567,41,42",
                      "type": "0,567,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,569,0",
                  "text": "0,563,8,195"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "1,1102,28",
                      "text": "1,1102,38,51",
                      "type": "1,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "1,1103,30",
                      "text": "1,1103,33,66:1,1104,12,76",
                      "type": "1,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1106,28",
                      "text": "1,1106,34,62:1,1107,12,1017",
                      "type": "1,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1145,0",
                  "text": "1,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the <a href='#!/api/Ext.data.AbstractStore-method-mon'>mon</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "1,526,56",
                      "text": "1,526,61,52",
                      "type": "1,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "1,527,34",
                      "text": "1,527,40,63",
                      "type": "1,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "1,528,29",
                      "text": "1,528,32,85",
                      "type": "1,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,529,27",
                      "text": "1,529,33,92:1,530,11,43",
                      "type": "1,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "1,532,0",
                  "text": "1,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1307,28",
                      "text": "1,1307,36,44",
                      "type": "1,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1308,27",
                      "text": "1,1308,43,26:1,1309,11,41",
                      "type": "1,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "1,1306,11",
                  "name": "1,1311,0",
                  "text": "1,1305,11,38"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "1,579,29",
                      "text": "1,579,48,46",
                      "type": "1,579,20",
                      "value": "1,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "1,580,29,24",
                      "type": "1,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "1,581,12",
                  "name": "1,583,0",
                  "text": "1,577,12,102"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the <a href='#!/api/Ext.data.AbstractStore-method-suspendEvent'>suspendEvent</a> method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "1,1409,32",
                      "text": "1,1409,42,32",
                      "type": "1,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1411,0",
                  "text": "1,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see <a href='#!/api/Ext.data.AbstractStore-method-suspendEvents'>suspendEvents</a>).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See <a href='#!/api/Ext.data.AbstractStore-method-suspendEvents'>suspendEvents</a>.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1431,29",
                      "text": "1,1431,43,59:1,1432,11,53",
                      "type": "1,1431,19"
                    }
                  }
                ],
                "src": {
                  "name": "1,1434,0",
                  "text": "1,1426,11,198"
                }
              },
              {
                "$type": "method",
                "name": "setFilters",
                "src": {
                  "name": "0,989,16"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.  In\nversions prior to 5.1, <a href='#!/api/Ext.data.AbstractStore-cfg-listeners'>listeners</a> had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the <a href='#!/api/Ext.data.AbstractStore-method-on'>on</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1804,28",
                      "text": "1,1804,38,14",
                      "type": "1,1804,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1806,0",
                  "text": "1,1798,12,402"
                }
              },
              {
                "$type": "method",
                "name": "setSorters",
                "src": {
                  "name": "0,993,16"
                }
              },
              {
                "$type": "method",
                "name": "sort",
                "text": "Sorts the data in the Store by one or more of its properties. Example usage:\n\n    //sort by a single field\n    myStore.sort('myField', 'DESC');\n\n    //sorting by multiple fields\n    myStore.sort([\n        {\n            property : 'age',\n            direction: 'ASC'\n        },\n        {\n            property : 'name',\n            direction: 'DESC'\n        }\n    ]);\n\nInternally, Store converts the passed arguments into an array of <a href='#!/api/Ext.util.Sorter'>Ext.util.Sorter</a> instances, and delegates\nthe actual sorting to its internal <a href='#!/api/Ext.util.MixedCollection'>Ext.util.MixedCollection</a>.\n\nWhen passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:\n\n    store.sort('myField');\n    store.sort('myField');\n\nIs equivalent to this code, because Store handles the toggling automatically:\n\n    store.sort('myField', 'ASC');\n    store.sort('myField', 'DESC');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sorters",
                    "optional": true,
                    "text": "Either a string name of one of the fields in this Store's configured\n<a href='#!/api/Ext.data.Model'>Ext.data.Model</a>, or an array of sorter configurations.\n",
                    "type": "String/Ext.util.Sorter[]",
                    "src": {
                      "name": "0,889,43",
                      "text": "0,889,52,69:0,890,8,68",
                      "type": "0,889,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "direction",
                    "optional": true,
                    "text": "The overall direction to sort the data by.\n",
                    "type": "String",
                    "value": "\"ASC\"",
                    "src": {
                      "name": "0,891,25",
                      "text": "0,891,42,43",
                      "type": "0,891,16",
                      "value": "0,891,35"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Ext.util.Sorter[]",
                    "src": {
                      "type": "0,892,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,894,0",
                  "text": "0,859,8,863"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n<a href='#!/api/Ext.data.AbstractStore-method-resumeEvent'>resumeEvent</a> will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "1,1381,32",
                      "text": "1,1381,42,33",
                      "type": "1,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "1,1383,0",
                  "text": "1,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see <a href='#!/api/Ext.data.AbstractStore-method-resumeEvents'>resumeEvents</a>)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the <a href='#!/api/Ext.data.AbstractStore-method-resumeEvents'>resumeEvents</a> call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "1,1363,28",
                      "text": "1,1363,43,48:1,1364,11,81",
                      "type": "1,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "1,1366,0",
                  "text": "1,1361,11,64"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for <a href='#!/api/Ext.data.AbstractStore-method-removeListener'>removeListener</a>.\n",
                "src": {
                  "inheritdoc": "1,1781,12",
                  "name": "1,1783,0",
                  "text": "1,1780,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.data.AbstractStore-method-removeListener'>removeListener</a> with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "1,1218,44",
                      "text": "1,1218,54,55",
                      "type": "1,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,1219,37",
                      "text": "1,1219,40,23",
                      "type": "1,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1220,29",
                      "text": "1,1220,36,41",
                      "type": "1,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1221,29",
                      "text": "1,1221,38,22",
                      "type": "1,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1223,0",
                  "text": "1,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.data.AbstractStore-method-removeListener'>removeListener</a> with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "1,1204,44",
                      "text": "1,1204,54,55",
                      "type": "1,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "1,1205,37",
                      "text": "1,1205,40,23",
                      "type": "1,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1206,29",
                      "text": "1,1206,36,41",
                      "type": "1,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,1207,29",
                      "text": "1,1207,38,22",
                      "type": "1,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "1,1209,0",
                  "text": "1,1200,12,98"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "1,389,12",
                  "name": "1,392,0",
                  "text": "1,390,12,126"
                }
              },
              {
                "$type": "property",
                "name": "currentPage",
                "text": "The page that the Store has most recently loaded (see <a href='#!/api/Ext.data.Store-method-loadPage'>Ext.data.Store#loadPage</a>)\n",
                "type": "Number",
                "src": {
                  "name": "0,137,27",
                  "text": "0,138,8,96",
                  "type": "0,137,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when <a href='#!/api/Ext.data.AbstractStore-method-suspendEvents'>suspendEvents</a> is called, decremented when <a href='#!/api/Ext.data.AbstractStore-method-resumeEvents'>resumeEvents</a> is called.\n",
                "src": {
                  "access": "1,284,11",
                  "name": "1,287,0",
                  "text": "1,285,11,131"
                }
              },
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "3,295,28",
                  "text": "3,296,8,128",
                  "type": "3,295,19"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via <a href='#!/api/Ext.data.AbstractStore-observe'>observe</a>) or\non the <a href='#!/api/Ext.app.EventBus'>Ext.app.EventBus</a>. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "1,290,30",
                  "readonly": "1,291,11",
                  "text": "1,292,11,790",
                  "type": "1,290,22"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,278,31",
                  "text": "1,279,11,95",
                  "type": "1,278,22"
                }
              },
              {
                "$type": "property",
                "name": "isStore",
                "text": "`true` in this class to identify an object as an instantiated Store, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,150,28",
                  "text": "0,151,8,90",
                  "type": "0,150,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "loading",
                "text": "`true` if the Store is currently loading via its Proxy.\n",
                "type": "Boolean",
                "src": {
                  "access": "0,145,8",
                  "name": "0,143,28",
                  "text": "0,144,8,56",
                  "type": "0,143,19"
                }
              },
              {
                "$type": "property",
                "name": "updating",
                "readonly": true,
                "since": "5.0.0",
                "text": "A counter that is increased by <a href='#!/api/Ext.data.AbstractStore-method-beginUpdate'>beginUpdate</a> and decreased by <a href='#!/api/Ext.data.AbstractStore-method-endUpdate'>endUpdate</a>. When\nthis transitions from 0 to 1 the <a href='#!/api/Ext.data.AbstractStore-event-beginupdate'>event-beginupdate</a> event is\nfired. When it transitions back from 1 to 0 the <a href='#!/api/Ext.data.AbstractStore-event-endupdate'>event-endupdate</a>\nevent is fired.\n",
                "type": "Number",
                "src": {
                  "name": "0,156,27",
                  "readonly": "0,161,8",
                  "since": "0,162,15",
                  "text": "0,157,8,264",
                  "type": "0,156,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods"
          }
        ],
        "src": {
          "mixins": "0,10,0,0:0,11,0,0",
          "name": "0,8,0",
          "requires": "0,15,0,0:0,16,0,0:0,17,0,0",
          "text": "0,2,4,355"
        }
      }
    ]
  },
  "version": 1
}