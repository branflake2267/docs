{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/dd/DragDropManager.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Ext.dd.DragDropMgr,Ext.dd.DDM",
        "name": "Ext.dd.DragDropManager",
        "requires": "Ext.util.Region",
        "singleton": true,
        "text": "DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window.  Generally, you will not call\nthis class directly, but it does have helper methods that could\nbe useful in your DragDrop implementations.\n",
        "uses": "Ext.tip.QuickTipManager",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "init",
                "text": "Called the first time an element is registered.\n",
                "src": {
                  "access": "0,106,8",
                  "name": "0,108,0",
                  "text": "0,105,8,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_execOnAll",
                "text": "Runs method on all drag and drop objects\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sMethod",
                    "src": {
                      "name": "0,156,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "src": {
                      "name": "0,156,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,154,8",
                  "name": "0,156,0",
                  "text": "0,153,8,41"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "addListeners",
                "text": "Drag and drop initialization.  Sets up the global event handlers\n",
                "src": {
                  "access": "0,178,8",
                  "name": "0,180,0",
                  "text": "0,177,8,65"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_onResize",
                "text": "Reset constraints on all drag and drop objs\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,221,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,219,8",
                  "name": "0,221,0",
                  "text": "0,218,8,44"
                }
              },
              {
                "$type": "method",
                "name": "lock",
                "text": "Lock all drag and drop functionality\n",
                "src": {
                  "name": "0,228,0",
                  "text": "0,226,8,37"
                }
              },
              {
                "$type": "method",
                "name": "unlock",
                "text": "Unlock all drag and drop functionality\n",
                "src": {
                  "name": "0,233,0",
                  "text": "0,231,8,39"
                }
              },
              {
                "$type": "method",
                "name": "isLocked",
                "text": "Is drag and drop locked?\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "True if drag and drop is locked, false otherwise.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,237,26,50",
                      "type": "0,237,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,239,0",
                  "text": "0,236,8,25"
                }
              },
              {
                "$type": "method",
                "name": "regDragDrop",
                "text": "Each DragDrop instance must be registered with the DragDropManager.\nThis is executed in DragDrop.init()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "the DragDrop object to register\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,299,33",
                      "text": "0,299,37,32",
                      "type": "0,299,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "text": "the name of the group this element belongs to\n",
                    "type": "String",
                    "src": {
                      "name": "0,300,24",
                      "text": "0,300,31,46",
                      "type": "0,300,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,302,0",
                  "text": "0,297,8,104"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeDDFromGroup",
                "text": "Removes the supplied dd instance from the supplied group. Executed\nby DragDrop.removeFromGroup, so don't call this function directly.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "src": {
                      "name": "0,316,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sGroup",
                    "src": {
                      "name": "0,316,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,314,8",
                  "name": "0,316,0",
                  "text": "0,312,8,134"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_remove",
                "text": "Unregisters a drag and drop item.  This is executed in\nDragDrop.unreg, use that method instead of calling this directly.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "src": {
                      "name": "0,332,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "clearGroup",
                    "src": {
                      "name": "0,332,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,330,8",
                  "name": "0,332,0",
                  "text": "0,328,8,121"
                }
              },
              {
                "$type": "method",
                "name": "regHandle",
                "text": "Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "sDDId",
                    "text": "the DragDrop id this element is a handle for\n",
                    "type": "String",
                    "src": {
                      "name": "0,365,24",
                      "text": "0,365,30,45",
                      "type": "0,365,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sHandleId",
                    "text": "the id of the element that is the drag\nhandle\n",
                    "type": "String",
                    "src": {
                      "name": "0,366,24",
                      "text": "0,366,34,39:0,367,8,7",
                      "type": "0,366,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,369,0",
                  "text": "0,363,8,117"
                }
              },
              {
                "$type": "method",
                "name": "isDragDrop",
                "text": "Utility function to determine if a given element has been\nregistered as a drag drop item.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the element id to check\n",
                    "type": "String",
                    "src": {
                      "name": "0,379,24",
                      "text": "0,379,27,24",
                      "type": "0,379,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if this element is a DragDrop item,\nfalse otherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,380,26,41:0,381,8,16",
                      "type": "0,380,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,383,0",
                  "text": "0,377,8,90"
                }
              },
              {
                "$type": "method",
                "name": "getRelated",
                "text": "Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "p_oDD",
                    "text": "the obj to get related data for\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,390,33",
                      "text": "0,390,39,32",
                      "type": "0,390,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bTargetsOnly",
                    "text": "if true, only return targetable objs\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,391,25",
                      "text": "0,391,38,37",
                      "type": "0,391,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the related instances\n",
                    "type": "Ext.dd.DragDrop[]",
                    "src": {
                      "text": "0,392,36,22",
                      "type": "0,392,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,394,0",
                  "text": "0,388,8,94"
                }
              },
              {
                "$type": "method",
                "name": "isLegalTarget",
                "text": "Returns true if the specified dd target is a legal target for\nthe specifice drag obj\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "the drag obj\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,415,33",
                      "text": "0,415,37,13",
                      "type": "0,415,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oTargetDD",
                    "text": "the target\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,416,33",
                      "text": "0,416,43,11",
                      "type": "0,416,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if the target is a legal target for the\ndd obj\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,417,26,45:0,418,8,7",
                      "type": "0,417,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,420,0",
                  "text": "0,413,8,85"
                }
              },
              {
                "$type": "method",
                "name": "isTypeOfDD",
                "text": "My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof\nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "The object to evaluate\n",
                    "type": "Object",
                    "src": {
                      "name": "0,438,24",
                      "text": "0,438,28,23",
                      "type": "0,438,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if typeof oDD = DragDrop\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,439,26,30",
                      "type": "0,439,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,441,0",
                  "text": "0,433,8,296"
                }
              },
              {
                "$type": "method",
                "name": "isHandle",
                "text": "Utility function to determine if a given element has been\nregistered as a drag drop handle for the given Drag Drop object.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the element id to check\n",
                    "type": "String",
                    "src": {
                      "name": "0,448,24",
                      "text": "0,448,27,24",
                      "type": "0,448,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if this element is a DragDrop handle, false\notherwise\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,449,26,49:0,450,8,10",
                      "type": "0,449,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,452,0",
                  "text": "0,446,8,123"
                }
              },
              {
                "$type": "method",
                "name": "getDDById",
                "text": "Returns the DragDrop instance for a given id\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the DragDrop object\n",
                    "type": "String",
                    "src": {
                      "name": "0,459,24",
                      "text": "0,459,27,30",
                      "type": "0,459,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the drag drop object, null if it is not found\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "text": "0,460,34,46",
                      "type": "0,460,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,462,0",
                  "text": "0,458,8,45"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleMouseDown",
                "text": "Fired after a registered DragDrop object gets the mousedown event.\nSets up the events required to track the object being dragged\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,476,23",
                      "text": "0,476,25,10",
                      "type": "0,476,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "the DragDrop object being dragged\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,477,33",
                      "text": "0,477,37,34",
                      "type": "0,477,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,478,8",
                  "name": "0,480,0",
                  "text": "0,474,8,129"
                }
              },
              {
                "$type": "method",
                "name": "startDrag",
                "text": "Fired when either the drag pixel threshold or the mousedown hold\ntime threshold has been met.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "text": "the X position of the original mousedown\n",
                    "type": "Number",
                    "src": {
                      "name": "0,529,24",
                      "text": "0,529,26,41",
                      "type": "0,529,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "text": "the Y position of the original mousedown\n",
                    "type": "Number",
                    "src": {
                      "name": "0,530,24",
                      "text": "0,530,26,41",
                      "type": "0,530,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,532,0",
                  "text": "0,527,8,94"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleMouseUp",
                "text": "Internal function to handle the mouseup event.  Will be invoked\nfrom the context of the document.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,561,23",
                      "text": "0,561,25,10",
                      "type": "0,561,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,562,8",
                  "name": "0,564,0",
                  "text": "0,559,8,98"
                }
              },
              {
                "$type": "method",
                "name": "stopEvent",
                "text": "Utility to stop event propagation and event default, if these\nfeatures are turned on.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event as returned by this.getEvent()\n",
                    "type": "Event",
                    "src": {
                      "name": "0,597,23",
                      "text": "0,597,25,41",
                      "type": "0,597,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,599,0",
                  "text": "0,595,8,86"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "stopDrag",
                "text": "Internal function to clean up event handlers after the drag\noperation is complete\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,612,23",
                      "text": "0,612,25,10",
                      "type": "0,612,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,613,8",
                  "name": "0,615,0",
                  "text": "0,610,8,82"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "handleMouseMove",
                "text": "Internal function to handle the mousemove event.  Will be invoked\nfrom the context of the html element.\n\nTODO: figure out what we can do about mouse events lost when the\nuser drags objects beyond the window boundary.  Currently we can\ndetect this in internet explorer by verifying that the mouse is\ndown during the mousemove event.  Firefox doesn't give us the\nbutton state on the mousemove event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,655,23",
                      "text": "0,655,25,10",
                      "type": "0,655,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,656,8",
                  "name": "0,658,0",
                  "text": "0,646,8,399"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "fireEvents",
                "text": "Iterates over all of the DragDrop elements to find ones we are\nhovering over or dropping on\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "text": "the event\n",
                    "type": "Event",
                    "src": {
                      "name": "0,698,23",
                      "text": "0,698,25,10",
                      "type": "0,698,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "isDrop",
                    "text": "is this a drop op or a mouseover op?\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,699,25",
                      "text": "0,699,32,37",
                      "type": "0,699,16"
                    }
                  }
                ],
                "src": {
                  "access": "0,700,8",
                  "name": "0,702,0",
                  "text": "0,696,8,92"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "elementFromPoint",
                "text": "Wrap document.elementFromPoint.\n\nThis is because in RTL mode we need to reverse any RTLification of the X coordinate\nbecause document.elementFromPoint uses LTR.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "x",
                    "src": {
                      "name": "0,915,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "y",
                    "src": {
                      "name": "0,915,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,909,8",
                  "name": "0,915,0",
                  "text": "0,910,8,161"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getZIndex",
                "text": "Collects the z-index of the passed element, looking up the parentNode axis to find an absolutely positioned ancestor\nwhich is able to yield a z-index. If found to be not absolutely positionedm returns -1.\n\nThis is used when sorting potential drop targets into z-index order so that only the topmost receives `over` and `drop` events.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The z-index of the element, or of its topmost absolutely positioned ancestor. Returns -1 if the element is not\nabsolutely positioned.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,930,25,111:0,931,8,23",
                      "type": "0,930,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "element",
                    "src": {
                      "name": "0,933,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,924,8",
                  "name": "0,933,0",
                  "text": "0,925,8,335"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "byZIndex",
                "text": "Utility method to pass to <a href='#!/api/Ext.Array-method-sort'>Ext.Array#sort</a> when sorting potential drop targets by z-index.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "d1",
                    "src": {
                      "name": "0,952,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "d2",
                    "src": {
                      "name": "0,952,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,949,8",
                  "name": "0,952,0",
                  "text": "0,950,8,97"
                }
              },
              {
                "$type": "method",
                "name": "getBestMatch",
                "text": "Helper function for getting the best match from the list of drag\nand drop objects returned by the drag and drop events when we are\nin INTERSECT mode.  It returns either the first object that the\ncursor is over, or the object that has the greatest overlap with\nthe dragged element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "dds",
                    "text": "The array of drag and drop objects\ntargeted\n",
                    "type": "Ext.dd.DragDrop[]",
                    "src": {
                      "name": "0,962,36",
                      "text": "0,962,40,35:0,963,8,9",
                      "type": "0,962,17"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The best single match\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "text": "0,964,34,22",
                      "type": "0,964,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,966,0",
                  "text": "0,957,8,281"
                }
              },
              {
                "$type": "method",
                "name": "refreshCache",
                "text": "Refreshes the cache of the top-left and bottom-right points of the\ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical\nusage is:\n\n    Ext.dd.DragDropManager.refreshCache(ddinstance.groups);\n\nAlternatively:\n\n    Ext.dd.DragDropManager.refreshCache({group1:true, group2:true});\n\nTODO: this really should be an indexed array.  Alternatively this\nmethod could accept both.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "groups",
                    "text": "an associative array of groups to refresh\n",
                    "type": "Object",
                    "src": {
                      "name": "0,1017,24",
                      "text": "0,1017,31,42",
                      "type": "0,1017,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,1019,0",
                  "text": "0,1003,8,447"
                }
              },
              {
                "$type": "method",
                "name": "verifyEl",
                "text": "This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "text": "the element to check\n",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,1048,29",
                      "text": "0,1048,32,21",
                      "type": "0,1048,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if the element looks usable\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1049,26,33",
                      "type": "0,1049,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1051,0",
                  "text": "0,1045,8,169"
                }
              },
              {
                "$type": "method",
                "name": "getLocation",
                "text": "Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "oDD",
                    "text": "the drag and drop object to get the location for.\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,1058,33",
                      "text": "0,1058,37,50",
                      "type": "0,1058,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "a Region object representing the total area\nthe element occupies, including any padding\nthe instance is configured for.\n",
                    "type": "Ext.util.Region",
                    "src": {
                      "text": "0,1059,34,44:0,1060,8,76",
                      "type": "0,1059,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1063,0",
                  "text": "0,1056,8,122"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isOverTarget",
                "text": "Checks the cursor location to see if it over the target\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "pt",
                    "text": "The point to evaluate\n",
                    "type": "Ext.util.Point",
                    "src": {
                      "name": "0,1099,32",
                      "text": "0,1099,35,22",
                      "type": "0,1099,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "oTarget",
                    "text": "the DragDrop object we are inspecting\n",
                    "type": "Ext.dd.DragDrop",
                    "src": {
                      "name": "0,1100,33",
                      "text": "0,1100,41,38",
                      "type": "0,1100,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "true if the mouse is over the target\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,1101,26,37",
                      "type": "0,1101,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,1102,8",
                  "name": "0,1104,0",
                  "text": "0,1098,8,56"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "_onUnload",
                "text": "unload event handler\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,1164,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "me",
                    "src": {
                      "name": "0,1164,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1162,8",
                  "name": "0,1164,0",
                  "text": "0,1161,8,21"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "unregAll",
                "text": "Cleans up the drag and drop events and objects.\n",
                "src": {
                  "access": "0,1170,8",
                  "name": "0,1172,0",
                  "text": "0,1169,8,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "deprecatedMessage": "wrapper isn't that useful\n",
                "deprecatedVersion": "This",
                "name": "getElWrapper",
                "text": "Get the wrapper for the DOM element specified\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the element to get\n",
                    "type": "String",
                    "src": {
                      "name": "0,1204,24",
                      "text": "0,1204,27,29",
                      "type": "0,1204,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "the wrapped element\n",
                    "type": "Ext.dd.DragDropManager.ElementWrapper",
                    "src": {
                      "text": "0,1205,56,20",
                      "type": "0,1205,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,1206,8",
                  "deprecatedMessage": "0,1207,8",
                  "deprecatedVersion": "0,1207,8",
                  "name": "0,1209,0",
                  "text": "0,1203,8,46"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Ext.lib.Ext.getDom instead\n",
                "deprecatedVersion": "use",
                "name": "getElement",
                "text": "Returns the actual DOM element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the elment to get\n",
                    "type": "String",
                    "src": {
                      "name": "0,1220,24",
                      "text": "0,1220,27,28",
                      "type": "0,1220,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The element\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1221,25,12",
                      "type": "0,1221,17"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "0,1222,8",
                  "deprecatedVersion": "0,1222,8",
                  "name": "0,1224,0",
                  "text": "0,1219,8,31"
                }
              },
              {
                "$type": "method",
                "name": "getCss",
                "text": "Returns the style property for the DOM element (i.e.,\ndocument.getElById(id).style)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "the id of the elment to get\n",
                    "type": "String",
                    "src": {
                      "name": "0,1231,24",
                      "text": "0,1231,27,28",
                      "type": "0,1231,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The style property of the element\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1232,25,34",
                      "type": "0,1232,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1234,0",
                  "text": "0,1229,8,84"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "ids",
                "text": "Two dimensional Array of registered DragDrop objects.  The first\ndimension is the DragDrop item group, the second the DragDrop\nobject.\n",
                "type": "String[]",
                "src": {
                  "access": "0,31,8",
                  "name": "0,27,29",
                  "text": "0,28,8,135",
                  "type": "0,27,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "handleIds",
                "text": "Array of element ids defined as drag handles.  Used to determine\nif the element that generated the mousedown event is actually the\nhandle and not the html element itself.\n",
                "type": "String[]",
                "src": {
                  "access": "0,40,8",
                  "name": "0,36,29",
                  "text": "0,37,8,171",
                  "type": "0,36,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dragCurrent",
                "text": "the DragDrop object that is currently being dragged\n",
                "type": "Ext.dd.DragDrop",
                "src": {
                  "access": "0,47,8",
                  "name": "0,45,36",
                  "text": "0,46,8,52",
                  "type": "0,45,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dragOvers",
                "text": "the DragDrop object(s) that are being hovered over\n",
                "type": "Ext.dd.DragDrop[]",
                "src": {
                  "access": "0,54,8",
                  "name": "0,52,38",
                  "text": "0,53,8,51",
                  "type": "0,52,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "deltaX",
                "text": "the X distance between the cursor and the object being dragged\n",
                "type": "Number",
                "src": {
                  "access": "0,61,8",
                  "name": "0,59,27",
                  "text": "0,60,8,63",
                  "type": "0,59,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "deltaY",
                "text": "the Y distance between the cursor and the object being dragged\n",
                "type": "Number",
                "src": {
                  "access": "0,68,8",
                  "name": "0,66,27",
                  "text": "0,67,8,63",
                  "type": "0,66,19"
                }
              },
              {
                "$type": "property",
                "name": "preventDefault",
                "text": "Flag to determine if we should prevent the default behavior of the\nevents we define. By default this is true, but this can be set to\nfalse if you need the default behavior (not recommended)\n",
                "type": "Boolean",
                "src": {
                  "name": "0,73,28",
                  "text": "0,74,8,190",
                  "type": "0,73,19"
                }
              },
              {
                "$type": "property",
                "name": "stopPropagation",
                "text": "Flag to determine if we should stop the propagation of the events\nwe generate. This is true by default but you may want to set it to\nfalse if the html element contains other features that require the\nmouse click.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,81,28",
                  "text": "0,82,8,213",
                  "type": "0,81,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "initialized",
                "text": "Internal flag that is set to true when drag and drop has been\nintialized\n",
                "src": {
                  "access": "0,93,8",
                  "name": "0,92,18",
                  "text": "0,90,8,73"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "locked",
                "text": "All drag and drop can be disabled.\n",
                "src": {
                  "access": "0,100,8",
                  "name": "0,99,18",
                  "text": "0,98,8,35"
                }
              },
              {
                "$type": "property",
                "name": "POINT",
                "text": "In point mode, drag and drop interaction is defined by the\nlocation of the cursor during the drag/drop\n",
                "type": "Number",
                "src": {
                  "name": "0,113,27",
                  "text": "0,114,8,103",
                  "type": "0,113,19"
                }
              },
              {
                "$type": "property",
                "name": "INTERSECT",
                "text": "In intersect mode, drag and drop interaction is defined by the\noverlap of two or more drag and drop objects.\n",
                "type": "Number",
                "src": {
                  "name": "0,120,27",
                  "text": "0,121,8,109",
                  "type": "0,120,19"
                }
              },
              {
                "$type": "property",
                "name": "mode",
                "text": "The current drag and drop mode.  Default: POINT\n",
                "type": "Number",
                "src": {
                  "name": "0,127,27",
                  "text": "0,128,8,48",
                  "type": "0,127,19"
                }
              },
              {
                "$type": "property",
                "name": "notifyOccluded",
                "optional": true,
                "text": "This config is only provided to provide old, usually unwanted drag/drop behaviour.\n\nFrom ExtJS 4.1.0 onwards, when drop targets are contained in floating, absolutely positioned elements\nsuch as in <a href='#!/api/Ext.window.Window'>Ext.window.Window</a>, which may overlap each other, `over` and `drop` events\nare only delivered to the topmost drop target at the mouse position.\n\nIf all targets below that in zIndex order should also receive notifications, set\n<a href='#!/api/Ext.dd.DragDropManager-property-notifyOccluded'>notifyOccluded</a> to `true`.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,133,29",
                  "text": "0,134,8,466",
                  "type": "0,133,19",
                  "value": "0,133,44"
                }
              },
              {
                "$type": "property",
                "name": "dragCls",
                "readonly": true,
                "text": "Class to add to the <a href='#!/api/Ext.dd.DragDrop-method-getDragEl'>Ext.dd.DragDrop#getDragEl</a> of a DragDrop instance.\n",
                "type": "String",
                "src": {
                  "name": "0,146,27",
                  "readonly": "0,147,8",
                  "text": "0,148,8,94",
                  "type": "0,146,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "locationCache",
                "text": "Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished.\n",
                "type": "Object",
                "src": {
                  "access": "0,245,8",
                  "name": "0,242,27",
                  "text": "0,243,8,114",
                  "type": "0,242,19"
                }
              },
              {
                "$type": "property",
                "name": "useCache",
                "text": "Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a drag.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,250,28",
                  "text": "0,251,8,124",
                  "type": "0,250,19"
                }
              },
              {
                "$type": "property",
                "name": "clickPixelThresh",
                "text": "The number of pixels that the mouse needs to move after the\nmousedown before the drag is initiated.  Default=8;\ndefaults to the same value used in the LongPress gesture so that drag cannot be\ninitiated if there is a possible pending longpress\n",
                "type": "Number",
                "src": {
                  "name": "0,257,27",
                  "text": "0,258,8,243",
                  "type": "0,257,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "dragThreshMet",
                "text": "Flag that indicates that either the drag pixel threshold or the\nmousdown time threshold has been met\n",
                "type": "Boolean",
                "src": {
                  "access": "0,269,8",
                  "name": "0,266,28",
                  "text": "0,267,8,101",
                  "type": "0,266,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "clickTimeout",
                "text": "Timeout used for the click time threshold\n",
                "type": "Object",
                "src": {
                  "access": "0,276,8",
                  "name": "0,274,27",
                  "text": "0,275,8,42",
                  "type": "0,274,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "startX",
                "text": "The X position of the mousedown event stored for later use when a\ndrag threshold is met.\n",
                "type": "Number",
                "src": {
                  "access": "0,284,8",
                  "name": "0,281,27",
                  "text": "0,282,8,89",
                  "type": "0,281,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "startY",
                "text": "The Y position of the mousedown event stored for later use when a\ndrag threshold is met.\n",
                "type": "Number",
                "src": {
                  "access": "0,292,8",
                  "name": "0,289,27",
                  "text": "0,290,8,89",
                  "type": "0,289,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "elementCache",
                "text": "A cache of DOM elements\n",
                "type": "Object",
                "src": {
                  "access": "0,1198,8",
                  "name": "0,1196,27",
                  "text": "0,1197,8,24",
                  "type": "0,1196,19"
                }
              }
            ]
          }
        ],
        "src": {
          "alternateClassNames": "0,24,0,0:0,24,0,0",
          "name": "0,16,0",
          "requires": "0,19,0",
          "singleton": "0,17,0",
          "text": "0,11,4,243",
          "uses": "0,21,0"
        }
      }
    ]
  },
  "version": 1
}