{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/grid/feature/Grouping.js",
    "../../../ext/classic/theme-neutral/sass/var/grid/feature/Grouping.scss",
    "../../../ext/packages/core/src/mixin/Observable.js",
    "../../../ext/classic/classic/src/grid/feature/AbstractSummary.js",
    "../../../ext/classic/classic/src/grid/feature/Feature.js",
    "../../../ext/packages/core/src/mixin/Identifiable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "feature.grouping",
        "extends": "Ext.grid.feature.Feature",
        "mixins": "Ext.grid.feature.AbstractSummary",
        "name": "Ext.grid.feature.Grouping",
        "requires": "Ext.grid.feature.GroupStore",
        "text": "This feature allows to display the grid rows aggregated into groups as specified by the <a href='#!/api/Ext.data.Store-cfg-grouper'>Ext.data.Store#grouper</a>\n\nunderneath. The groups can also be expanded and collapsed.\n\n## Extra Events\n\nThis feature adds several extra events that will be fired on the grid to interact with the groups:\n\n - <a href='#!/api/Ext.grid.feature.Grouping-event-groupclick'>groupclick</a>\n - <a href='#!/api/Ext.grid.feature.Grouping-event-groupdblclick'>groupdblclick</a>\n - <a href='#!/api/Ext.grid.feature.Grouping-event-groupcontextmenu'>groupcontextmenu</a>\n - <a href='#!/api/Ext.grid.feature.Grouping-event-groupexpand'>groupexpand</a>\n - <a href='#!/api/Ext.grid.feature.Grouping-event-groupcollapse'>groupcollapse</a>\n\n## Menu Augmentation\n\nThis feature adds extra options to the grid column menu to provide the user with functionality to modify the grouping.\nThis can be disabled by setting the <a href='#!/api/Ext.grid.feature.Grouping-cfg-enableGroupingMenu'>enableGroupingMenu</a> option. The option to disallow grouping from being turned off\nby the user is <a href='#!/api/Ext.grid.feature.Grouping-cfg-enableNoGroups'>enableNoGroups</a>.\n\n## Controlling Group Text\n\nThe <a href='#!/api/Ext.grid.feature.Grouping-cfg-groupHeaderTpl'>groupHeaderTpl</a> is used to control the rendered title for each group. It can modified to customized\nthe default display.\n\n## Groupers\n\nBy default, this feature expects that the data field that is mapped to by the\n<a href='#!/api/Ext.data.AbstractStore-cfg-groupField'>Ext.data.AbstractStore#groupField</a> config is a simple data type such as a\nString or a Boolean. However, if you intend to group by a data field that is a\ncomplex data type such as an Object or Array, it is necessary to define one or more\n<a href='#!/api/Ext.util.Grouper'>Ext.util.Grouper</a> on the feature that it can then use to lookup\ninternal group information when grouping by different fields.\n\n    @example\n    var feature = Ext.create('Ext.grid.feature.Grouping', {\n        startCollapsed: true,\n        groupers: [{\n            property: 'asset',\n            groupFn: function (val) {\n                return val.data.name;\n            }\n        }]\n    });\n\n## Example Usage\n\n    @example\n    var store = Ext.create('Ext.data.Store', {\n        fields: ['name', 'seniority', 'department'],\n        groupField: 'department',\n        data: [\n            { name: 'Michael Scott', seniority: 7, department: 'Management' },\n            { name: 'Dwight Schrute', seniority: 2, department: 'Sales' },\n            { name: 'Jim Halpert', seniority: 3, department: 'Sales' },\n            { name: 'Kevin Malone', seniority: 4, department: 'Accounting' },\n            { name: 'Angela Martin', seniority: 5, department: 'Accounting' }\n        ]\n    });\n\n    Ext.create('Ext.grid.Panel', {\n        title: 'Employees',\n        store: store,\n        columns: [\n            { text: 'Name', dataIndex: 'name' },\n            { text: 'Seniority', dataIndex: 'seniority' }\n        ],\n        features: [{ftype:'grouping'}],\n        width: 200,\n        height: 275,\n        renderTo: Ext.getBody()\n    });\n\n**Note:** To use grouping with a grid that has <a href='#!/api/Ext.grid.column.Column-cfg-locked'>Ext.grid.column.Column#locked</a>, you need to supply\nthe grouping feature as a config object - so the grid can create two instances of the grouping feature.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "collapsible",
                "optional": true,
                "text": "Set to `false` to disable collapsing groups from the UI.\n\nThis is set to `false` when the associated <a href='#!/api/Ext.data.Store'>Ext.data.Store</a> is\na <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,225,24",
                  "text": "0,226,8,181",
                  "type": "0,225,14",
                  "value": "0,225,36"
                }
              },
              {
                "$type": "property",
                "name": "depthToIndent",
                "optional": true,
                "text": "Number of pixels to indent per grouping level\n",
                "type": "Number",
                "value": "17",
                "src": {
                  "name": "0,174,23",
                  "text": "0,175,8,46",
                  "type": "0,174,14",
                  "value": "0,174,37"
                }
              },
              {
                "$type": "property",
                "name": "enableGroupingMenu",
                "optional": true,
                "text": "True to enable the grouping control in the header menu.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,213,24",
                  "text": "0,214,8,56",
                  "type": "0,213,14",
                  "value": "0,213,43"
                }
              },
              {
                "$type": "property",
                "name": "enableNoGroups",
                "optional": true,
                "text": "True to allow the user to turn off grouping.\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "0,219,24",
                  "text": "0,220,8,45",
                  "type": "0,219,14",
                  "value": "0,219,39"
                }
              },
              {
                "$type": "property",
                "name": "groupByText",
                "optional": true,
                "text": "Text displayed in the grid header menu for grouping by header.\n",
                "type": "String",
                "value": "\"Group by this field\"",
                "src": {
                  "name": "0,187,23",
                  "text": "0,188,8,63",
                  "type": "0,187,14",
                  "value": "0,187,35"
                }
              },
              {
                "$type": "property",
                "name": "groupHeaderTpl",
                "text": "A string Template snippet, an array of strings (optionally followed by an object containing Template methods) to be used to construct a Template, or a Template instance.\n\n- Example 1 (Template snippet):\n\n      groupHeaderTpl: 'Group: {name}'\n\n- Example 2 (Array):\n\n      groupHeaderTpl: [\n          'Group: ',\n          '<div>{name:this.formatName}</div>',\n          {\n              formatName: function(name) {\n                  return Ext.String.trim(name);\n              }\n          }\n      ]\n\n- Example 3 (Template Instance):\n\n      groupHeaderTpl: Ext.create('Ext.XTemplate',\n          'Group: ',\n          '<div>{name:this.formatName}</div>',\n          {\n              formatName: function(name) {\n                  return Ext.String.trim(name);\n              }\n          }\n      )\n",
                "type": "String/Array/Ext.Template",
                "items": [
                  {
                    "$type": "property",
                    "name": "groupField",
                    "text": "The field name being grouped by.\n",
                    "type": "String",
                    "src": {
                      "name": "0,163,47",
                      "text": "0,163,58,33",
                      "type": "0,163,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "columnName",
                    "text": "The column header associated with the field being grouped by *if there is a column for the field*, falls back to the groupField name.\n",
                    "type": "String",
                    "src": {
                      "name": "0,164,47",
                      "text": "0,164,58,134",
                      "type": "0,164,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "groupValue",
                    "text": "The value of the <a href='#!/api/Ext.data.Store-cfg-groupField'>Ext.data.Store#groupField</a> for the group header being rendered.\n",
                    "type": "Mixed",
                    "src": {
                      "name": "0,165,47",
                      "text": "0,165,58,99",
                      "type": "0,165,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "renderedGroupValue",
                    "text": "The rendered value of the <a href='#!/api/Ext.data.Store-cfg-groupField'>Ext.data.Store#groupField</a> for the group header being rendered, as produced by the column renderer.\n",
                    "type": "String",
                    "src": {
                      "name": "0,166,47",
                      "text": "0,166,66,144",
                      "type": "0,166,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "name",
                    "text": "An alias for renderedGroupValue\n",
                    "type": "String",
                    "src": {
                      "name": "0,167,47",
                      "text": "0,167,52,32",
                      "type": "0,167,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "rows",
                    "text": "Deprecated - use children instead. An array containing the child records for the group being rendered. *Not available if the store is a <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>*\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "0,168,47",
                      "text": "0,168,52,182",
                      "type": "0,168,14"
                    }
                  },
                  {
                    "$type": "property",
                    "name": "children",
                    "text": "An array containing the child records for the group being rendered. *Not available if the store is a <a href='#!/api/Ext.data.BufferedStore'>Ext.data.BufferedStore</a>*\n",
                    "type": "Ext.data.Model[]",
                    "src": {
                      "name": "0,169,47",
                      "text": "0,169,56,147",
                      "type": "0,169,14"
                    }
                  }
                ],
                "src": {
                  "name": "0,132,41",
                  "text": "0,133,8,789",
                  "type": "0,132,14"
                }
              },
              {
                "$type": "property",
                "name": "groupers",
                "optional": true,
                "text": "These are grouper objects defined for the feature. If the group names are derived\nfrom complex data types, it is necessary to convert them as a store would.\n\nHowever, since only one grouper can be defined on the store at a time and\nthis feature clears the current grouper when a new one is added, it is\nnecessary to define a cache of groupers that the feature can lookup as needed.\n\nExpected grouper object properties are `property` and `groupFn`.\n",
                "type": "Array",
                "value": "null",
                "src": {
                  "name": "0,234,22",
                  "text": "0,235,8,448",
                  "type": "0,234,14",
                  "value": "0,234,31"
                }
              },
              {
                "$type": "property",
                "name": "hideGroupedHeader",
                "optional": true,
                "text": "True to hide the header that is currently grouped.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,201,24",
                  "text": "0,202,8,51",
                  "type": "0,201,14",
                  "value": "0,201,42"
                }
              },
              {
                "$type": "property",
                "name": "listeners",
                "text": "\nA config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS <a href='#!/api/Ext.Component'>Ext.Component</a>**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this is usually\nonly done when extra value can be added. For example the <a href='#!/api/Ext.view.View'>Ext.view.View</a>s **<a href='#!/api/Ext.view.View-event-itemclick'>Ext.view.View#itemclick</a>** event passing the node clicked on. To access DOM events directly from a\nchild element of a Component, we need to specify the `element` option to identify the Component property to add a\nDOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n",
                "type": "Object",
                "src": {
                  "name": "2,243,25",
                  "text": "2,244,11,1325",
                  "type": "2,243,17"
                }
              },
              {
                "$type": "property",
                "name": "remoteRoot",
                "optional": true,
                "text": "The name of the property which contains the Array of summary objects.\nIt allows to use server-side calculated summaries.\n",
                "type": "String",
                "value": "undefined",
                "src": {
                  "name": "0,1298,27",
                  "text": "0,1299,12,121",
                  "type": "0,1298,18",
                  "value": "0,1298,38"
                }
              },
              {
                "$type": "property",
                "name": "showGroupsText",
                "optional": true,
                "text": "Text displayed in the grid header for enabling/disabling grouping.\n",
                "type": "String",
                "value": "\"Show in groups\"",
                "src": {
                  "name": "0,194,23",
                  "text": "0,195,8,67",
                  "type": "0,194,14",
                  "value": "0,194,38"
                }
              },
              {
                "$type": "property",
                "name": "showSummaryRow",
                "text": "True to show the summary row.\n",
                "type": "Boolean",
                "src": {
                  "name": "3,35,0",
                  "text": "3,33,7,30",
                  "type": "3,32,13"
                }
              },
              {
                "$type": "property",
                "name": "startCollapsed",
                "optional": true,
                "text": "True to start all groups collapsed.\n",
                "type": "Boolean",
                "value": "false",
                "src": {
                  "name": "0,207,24",
                  "text": "0,208,8,36",
                  "type": "0,207,14",
                  "value": "0,207,39"
                }
              }
            ]
          },
          {
            "$type": "events",
            "items": [
              {
                "$type": "event",
                "name": "groupclick",
                "items": [
                  {
                    "$type": "param",
                    "name": "view",
                    "type": "Ext.view.Table",
                    "src": {
                      "name": "0,95,32",
                      "type": "0,95,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,96,29",
                      "type": "0,96,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "group",
                    "text": "The name of the group\n",
                    "type": "String",
                    "src": {
                      "name": "0,97,24",
                      "text": "0,97,30,22",
                      "type": "0,97,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,98,33",
                      "type": "0,98,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,94,15"
                }
              },
              {
                "$type": "event",
                "name": "groupcollapse",
                "items": [
                  {
                    "$type": "param",
                    "name": "view",
                    "type": "Ext.view.Table",
                    "src": {
                      "name": "0,119,32",
                      "type": "0,119,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,120,29",
                      "type": "0,120,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "group",
                    "text": "The name of the group\n",
                    "type": "String",
                    "src": {
                      "name": "0,121,24",
                      "text": "0,121,30,22",
                      "type": "0,121,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,118,15"
                }
              },
              {
                "$type": "event",
                "name": "groupcontextmenu",
                "items": [
                  {
                    "$type": "param",
                    "name": "view",
                    "type": "Ext.view.Table",
                    "src": {
                      "name": "0,111,32",
                      "type": "0,111,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,112,29",
                      "type": "0,112,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "group",
                    "text": "The name of the group\n",
                    "type": "String",
                    "src": {
                      "name": "0,113,24",
                      "text": "0,113,30,22",
                      "type": "0,113,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,114,33",
                      "type": "0,114,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,110,15"
                }
              },
              {
                "$type": "event",
                "name": "groupdblclick",
                "items": [
                  {
                    "$type": "param",
                    "name": "view",
                    "type": "Ext.view.Table",
                    "src": {
                      "name": "0,103,32",
                      "type": "0,103,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,104,29",
                      "type": "0,104,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "group",
                    "text": "The name of the group\n",
                    "type": "String",
                    "src": {
                      "name": "0,105,24",
                      "text": "0,105,30,22",
                      "type": "0,105,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "type": "Ext.event.Event",
                    "src": {
                      "name": "0,106,33",
                      "type": "0,106,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,102,15"
                }
              },
              {
                "$type": "event",
                "name": "groupexpand",
                "items": [
                  {
                    "$type": "param",
                    "name": "view",
                    "type": "Ext.view.Table",
                    "src": {
                      "name": "0,126,32",
                      "type": "0,126,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "node",
                    "type": "HTMLElement",
                    "src": {
                      "name": "0,127,29",
                      "type": "0,127,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "group",
                    "text": "The name of the group\n",
                    "type": "String",
                    "src": {
                      "name": "0,128,24",
                      "text": "0,128,30,22",
                      "type": "0,128,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,125,15"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "_addDeclaredListeners",
                "text": "Adds declarative listeners as nested arrays of listener objects.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "type": "Array",
                    "src": {
                      "name": "2,413,27",
                      "type": "2,413,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if any listeners were added\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,414,30,35",
                      "type": "2,414,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,412,12",
                  "name": "2,416,0",
                  "text": "2,411,12,65"
                }
              },
              {
                "$type": "method",
                "name": "addAfterListener",
                "text": "Alias for <a href='#!/api/Ext.grid.feature.Grouping-method-onAfter'>onAfter</a>.\n",
                "src": {
                  "name": "2,1236,0",
                  "text": "2,1234,12,28"
                }
              },
              {
                "$type": "method",
                "name": "addBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.grid.feature.Grouping-method-onBefore'>onBefore</a>.\n",
                "src": {
                  "name": "2,1230,0",
                  "text": "2,1228,12,29"
                }
              },
              {
                "$type": "method",
                "name": "addListener",
                "text": "The <a href='#!/api/Ext.grid.feature.Grouping-method-on'>on</a> method is shorthand for\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.\n\nAppends an event handler to this object.  For example:\n\n    myGridPanel.on(\"itemclick\", this.onItemClick, this);\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple events. For example:\n\n    myGridPanel.on({\n        cellclick: this.onCellClick,\n        select: this.onSelect,\n        viewready: this.onViewReady,\n        scope: this // Important. Ensure \"this\" is correct during handler execution\n    });\n\nOne can also specify options for each event handler separately:\n\n    myGridPanel.on({\n        cellclick: {fn: this.onCellClick, scope: this, single: true},\n        viewready: {fn: panel.onViewReady, scope: panel}\n    });\n\n*Names* of methods in a specified scope may also be used:\n\n    myGridPanel.on({\n        cellclick: {fn: 'onCellClick', scope: this, single: true},\n        viewready: {fn: 'onViewReady', scope: panel}\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n",
                    "type": "String/Object",
                    "src": {
                      "name": "2,835,35",
                      "text": "2,835,45,37:2,836,12,61",
                      "type": "2,835,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "optional": true,
                    "text": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> plus the `options` parameter described\nbelow.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,838,38",
                      "text": "2,838,42,46:2,839,12,166",
                      "type": "2,838,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "2,843,29",
                      "text": "2,843,36,62:2,844,12,73",
                      "type": "2,843,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "scope",
                        "text": "  The scope (`this` reference) in which the handler function is executed. **If omitted,\n  defaults to the object which fired the event.**\n",
                        "type": "Object",
                        "src": {
                          "name": "2,853,36",
                          "text": "2,854,12,139",
                          "type": "2,853,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delay",
                        "text": "  The number of milliseconds to delay the invocation of the handler after the event\n  fires.\n",
                        "type": "Number",
                        "src": {
                          "name": "2,857,36",
                          "text": "2,858,12,94",
                          "type": "2,857,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "single",
                        "text": "  True to add a handler to handle just the next firing of the event, and then remove\n  itself.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "2,861,37",
                          "text": "2,862,12,96",
                          "type": "2,861,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "buffer",
                        "text": "  Causes the handler to be scheduled to run in an <a href='#!/api/Ext.util.DelayedTask'>Ext.util.DelayedTask</a> delayed\n  by the specified number of milliseconds. If the event fires again within that time,\n  the original handler is _not_ invoked, but the new handler is scheduled in its place.\n",
                        "type": "Number",
                        "src": {
                          "name": "2,865,36",
                          "text": "2,866,12,262",
                          "type": "2,865,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "onFrame",
                        "text": "  Causes the handler to be scheduled to run at the next\n  <a href='#!/api/Ext.Function-method-requestAnimationFrame'>Ext.Function#requestAnimationFrame</a>. If the\n  event fires again before that time, the handler is not rescheduled - the handler\n  will only be called once when the next animation frame is fired, with the last set\n  of arguments passed.\n",
                        "type": "Number",
                        "src": {
                          "name": "2,870,36",
                          "text": "2,871,12,323",
                          "type": "2,870,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "target",
                        "text": "  Only call the handler if the event was fired on the target Observable, _not_ if the\n  event was bubbled up from a child Observable.\n",
                        "type": "Ext.util.Observable",
                        "src": {
                          "name": "2,877,49",
                          "text": "2,878,12,135",
                          "type": "2,877,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "element",
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.Component'>Ext.Component</a>.**\n  The name of a Component property which references an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>\n  to add a listener to.\n\n  This option is useful during Component construction to add DOM event listeners to\n  elements of <a href='#!/api/Ext.Component'>Ext.Component</a> which will exist only after the\n  Component is rendered.\n\n  For example, to add a click listener to a Panel's body:\n\n      var panel = new Ext.panel.Panel({\n          title: 'The title',\n          listeners: {\n              click: this.handlePanelClick,\n              element: 'body'\n          }\n      });\n\nIn order to remove listeners attached using the element, you'll need to reference\nthe element itself as seen below.\n\n     panel.body.un(...)\n",
                        "type": "String",
                        "src": {
                          "name": "2,881,36",
                          "text": "2,882,12,781",
                          "type": "2,881,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "delegate",
                        "optional": true,
                        "text": "  A simple selector to filter the event target or look for a descendant of the target.\n\n  The \"delegate\" option is only available on Ext.dom.Element instances (or\n  when attaching a listener to a Ext.dom.Element via a Component using the\n  element option).\n\n  See the *delegate* example below.\n",
                        "type": "String",
                        "src": {
                          "name": "2,905,37",
                          "text": "2,906,12,295",
                          "type": "2,905,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopPropagation",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopPropagation'>Ext.event.Event#stopPropagation</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "2,914,38",
                          "text": "2,915,12,212",
                          "type": "2,914,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "preventDefault",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-preventDefault'>Ext.event.Event#preventDefault</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "2,919,38",
                          "text": "2,920,12,210",
                          "type": "2,919,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "stopEvent",
                        "optional": true,
                        "text": "  **This option is only valid for listeners bound to <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a>.**\n  `true` to call <a href='#!/api/Ext.event.Event-method-stopEvent'>Ext.event.Event#stopEvent</a> on the event object\n  before firing the handler.\n",
                        "type": "Boolean",
                        "src": {
                          "name": "2,924,38",
                          "text": "2,925,12,200",
                          "type": "2,924,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "args",
                        "optional": true,
                        "text": "  Optional arguments to pass to the handler function. Any additional arguments\n  passed to <a href='#!/api/Ext.util.Observable-method-fireEvent'>Ext.util.Observable#fireEvent</a> will be appended\n  to these arguments.\n",
                        "type": "Array",
                        "src": {
                          "name": "2,929,36",
                          "text": "2,930,12,179",
                          "type": "2,929,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "destroyable",
                        "optional": true,
                        "text": "  When specified as `true`, the function returns a `destroyable` object. An object\n  which implements the `destroy` method which removes all listeners added in this call.\n  This syntax can be a helpful shortcut to using <a href='#!/api/Ext.grid.feature.Grouping-method-un'>un</a>; particularly when\n  removing multiple listeners.  *NOTE* - not compatible when using the _element_\n  option.  See <a href='#!/api/Ext.grid.feature.Grouping-method-un'>un</a> for the proper syntax for removing listeners added using the\n  _element_ config.\n",
                        "type": "Boolean",
                        "value": "false",
                        "src": {
                          "name": "2,934,38",
                          "text": "2,935,12,441",
                          "type": "2,934,20",
                          "value": "2,934,50"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "priority",
                        "optional": true,
                        "text": "  An optional numeric priority that determines the order in which event handlers\n  are run. Event handlers with no priority will be run as if they had a priority\n  of 0. Handlers with a higher priority will be prioritized to run sooner than\n  those with a lower priority.  Negative numbers can be used to set a priority\n  lower than the default. Internally, the framework uses a range of 1000 or\n  greater, and -1000 or lesser for handlers that are intended to run before or\n  after all others, so it is recommended to stay within the range of -999 to 999\n  when setting the priority of event handlers in application-level code.\n  A priority must be an integer to be valid.  Fractional values are reserved for\n  internal framework use.\n",
                        "type": "Number",
                        "src": {
                          "name": "2,942,37",
                          "text": "2,943,12,737",
                          "type": "2,942,20"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "order",
                        "optional": true,
                        "text": "  A legacy option that is provided for backward compatibility.\n  It is recommended to use the `priority` option instead.  Available options are:\n\n  - `'before'`: equal to a priority of `100`\n  - `'current'`: equal to a priority of `0` or default priority\n  - `'after'`: equal to a priority of `-100`\n",
                        "type": "String",
                        "value": "'current'",
                        "src": {
                          "name": "2,954,37",
                          "text": "2,955,12,301",
                          "type": "2,954,20",
                          "value": "2,954,43"
                        }
                      }
                    ],
                    "src": {
                      "name": "2,846,29",
                      "text": "2,846,38,44:2,847,12,154",
                      "type": "2,846,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n",
                    "type": "String",
                    "value": "'current'",
                    "src": {
                      "name": "2,962,29",
                      "text": "2,963,12,1831",
                      "type": "2,962,20",
                      "value": "2,962,35"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes\n all listeners added in this call. For example:\n\n    this.btnListeners =  = myButton.on({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1021,29,54:2,1022,12,516",
                      "type": "2,1021,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1041,0",
                  "text": "2,804,12,1008"
                }
              },
              {
                "$type": "method",
                "name": "addManagedListener",
                "text": "The addManagedListener method is used when some object (call it \"A\") is listening\nto an event on another observable object (\"B\") and you want to remove that listener\nfrom \"B\" when \"A\" is destroyed. This is not an issue when \"B\" is destroyed because\nall of its listeners will be removed at that time.\n\nExample:\n\n    Ext.define('Foo', {\n        extend: 'Ext.Component',\n\n        initComponent: function () {\n            this.addManagedListener(MyApp.SomeGlobalSharedMenu, 'show', this.doSomething);\n            this.callParent();\n        }\n    });\n\nAs you can see, when an instance of Foo is destroyed, it ensures that the 'show'\nlistener on the menu (`MyApp.SomeGlobalSharedMenu`) is also removed.\n\nAs of version 5.1 it is no longer necessary to use this method in most cases because\nlisteners are automatically managed if the scope object provided to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> is an Observable instance.\nHowever, if the observable instance and scope are not the same object you\nstill need to use <a href='#!/api/Ext.grid.feature.Grouping-method-mon'>mon</a> or <a href='#!/api/Ext.grid.feature.Grouping-method-addManagedListener'>addManagedListener</a> if you want the listener to be\nmanaged.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item to which to add a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "2,456,56",
                      "text": "2,456,61,47",
                      "type": "2,456,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "2,457,34",
                      "text": "2,457,40,63",
                      "type": "2,457,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,458,36",
                      "text": "2,458,39,49:2,459,11,85",
                      "type": "2,458,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,461,27",
                      "text": "2,461,33,92:2,462,11,43",
                      "type": "2,461,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "text": "(optional) If the `ename` parameter was an event name, this is the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> options.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,463,27",
                      "text": "2,463,35,67:2,464,11,61",
                      "type": "2,463,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "**Only when the `destroyable` option is specified. **\n\n A `Destroyable` object. An object which implements the `destroy` method which removes all listeners added in this call. For example:\n\n    this.btnListeners = myButton.mon({\n        destroyable: true\n        mouseover:   function() { console.log('mouseover'); },\n        mouseout:    function() { console.log('mouseout'); },\n        click:       function() { console.log('click'); }\n    });\n\nAnd when those listeners need to be removed:\n\n    Ext.destroy(this.btnListeners);\n\nor\n\n    this.btnListeners.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "2,465,28,54:2,466,11,513",
                      "type": "2,465,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,484,0",
                  "text": "2,430,11,1093"
                }
              },
              {
                "$type": "method",
                "name": "clearListeners",
                "text": "Removes all listeners for this object including the managed listeners\n",
                "src": {
                  "name": "2,1255,0",
                  "text": "2,1253,11,70"
                }
              },
              {
                "$type": "method",
                "name": "clearManagedListeners",
                "text": "Removes all managed listeners for this object.\n",
                "src": {
                  "name": "2,1291,0",
                  "text": "2,1289,11,47"
                }
              },
              {
                "$type": "method",
                "name": "collapse",
                "text": "Collapse a group\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "groupName",
                    "text": "The group name\n",
                    "type": "String",
                    "src": {
                      "name": "0,910,24",
                      "text": "0,910,34,15",
                      "type": "0,910,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "focus",
                    "text": "Pass `true` to focus the group after expand.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,911,25",
                      "text": "0,911,31,45",
                      "type": "0,911,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,913,0",
                  "text": "0,909,8,17"
                }
              },
              {
                "$type": "method",
                "name": "collapseAll",
                "text": "Collapse all groups\n",
                "src": {
                  "name": "0,964,0",
                  "text": "0,962,8,20"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "createRelayer",
                "text": "Creates an event handling function which re-fires the event from this object as the passed event name.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "newName",
                    "text": "The name under which to re-fire the passed parameters.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1522,27",
                      "text": "2,1522,35,55",
                      "type": "2,1522,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "beginEnd",
                    "text": "(optional) The caller can specify on which indices to slice.\n",
                    "type": "Array",
                    "src": {
                      "name": "2,1523,26",
                      "text": "2,1523,35,61",
                      "type": "2,1523,19"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "Function",
                    "src": {
                      "type": "2,1524,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,1520,11",
                  "name": "2,1526,0",
                  "text": "2,1521,11,103"
                }
              },
              {
                "$type": "method",
                "name": "disable",
                "text": "Disables the feature.\n",
                "src": {
                  "name": "4,178,0",
                  "text": "4,176,8,22"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "doFireEvent",
                "text": "Continue to fire event.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "type": "String",
                    "src": {
                      "name": "2,761,27",
                      "type": "2,761,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "type": "Array",
                    "src": {
                      "name": "2,762,26",
                      "type": "2,762,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "bubbles",
                    "type": "Boolean",
                    "src": {
                      "name": "2,763,28",
                      "type": "2,763,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,759,11",
                  "name": "2,765,0",
                  "text": "2,758,11,24"
                }
              },
              {
                "$type": "method",
                "name": "enable",
                "text": "Enables the feature.\n",
                "src": {
                  "name": "4,171,0",
                  "text": "4,169,8,21"
                }
              },
              {
                "$type": "method",
                "name": "enableBubble",
                "text": "Enables events fired by this Observable to bubble up an owner hierarchy by calling `this.getBubbleTarget()` if\npresent. There is no implementation in the Observable base class.\n\nThis is commonly used by Ext.Components to bubble events to owner Containers.\nSee <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>. The default implementation in Ext.Component returns the\nComponent's immediate owner. But if a known target is required, this can be overridden to access the\nrequired target more quickly.\n\nExample:\n\n    Ext.define('Ext.overrides.form.field.Base', {\n        override: 'Ext.form.field.Base',\n\n        //  Add functionality to Field's initComponent to enable the change event to bubble\n        initComponent: function () {\n            this.callParent();\n            this.enableBubble('change');\n        }\n    });\n\n    var myForm = Ext.create('Ext.form.Panel', {\n        title: 'User Details',\n        items: [{\n            ...\n        }],\n        listeners: {\n            change: function() {\n                // Title goes red if form has been modified.\n                myForm.header.setStyle('color', 'red');\n            }\n        }\n    });\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventNames",
                    "text": "The event name to bubble, or an Array of event names.\n",
                    "type": "String/String[]",
                    "src": {
                      "name": "2,1567,36",
                      "text": "2,1567,47,54",
                      "type": "2,1567,19"
                    }
                  }
                ],
                "src": {
                  "name": "2,1569,0",
                  "text": "2,1534,11,1138"
                }
              },
              {
                "$type": "method",
                "name": "expand",
                "text": "Expand a group\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "groupName",
                    "text": "The group name\n",
                    "type": "String",
                    "src": {
                      "name": "0,867,24",
                      "text": "0,867,34,15",
                      "type": "0,867,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "focus",
                    "text": "Pass `true` to focus the group after expand.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,868,25",
                      "text": "0,868,31,45",
                      "type": "0,868,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,870,0",
                  "text": "0,866,8,15"
                }
              },
              {
                "$type": "method",
                "name": "expandAll",
                "text": "Expand all groups\n",
                "src": {
                  "name": "0,877,0",
                  "text": "0,875,8,18"
                }
              },
              {
                "$type": "method",
                "deprecatedMessage": "Use <a href='#!/api/Ext.grid.feature.Grouping-fireEventAction'>fireEventAction</a> instead.\n",
                "deprecatedVersion": "5.5",
                "name": "fireAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nBy default, the action function will be executed after any \"before\" event handlers\n(as specified using the `order` option of\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>), but before any other\nhandlers are fired.  This gives the \"before\" handlers an opportunity to\ncancel the event by returning `false`, and prevent the action function from\nbeing called.\n\nThe action can also be configured to run after normal handlers, but before any \"after\"\nhandlers (as specified using the `order` event option) by passing `'after'`\nas the `order` parameter.  This configuration gives any event handlers except\nfor \"after\" handlers the opportunity to cancel the event and prevent the action\nfunction from being called.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "2,640,28",
                      "text": "2,640,38,31",
                      "type": "2,640,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "2,641,27",
                      "text": "2,641,32,58",
                      "type": "2,641,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function",
                    "src": {
                      "name": "2,642,30",
                      "text": "2,642,33,21",
                      "type": "2,642,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "2,643,29",
                      "text": "2,643,36,62:2,644,12,72",
                      "type": "2,643,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Event options for the action function.  Accepts any\nof the options of <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n",
                    "type": "Object",
                    "src": {
                      "name": "2,645,29",
                      "text": "2,645,38,52:2,646,12,72",
                      "type": "2,645,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "order",
                    "optional": true,
                    "text": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> for more details.\n",
                    "type": "String",
                    "value": "'before'",
                    "src": {
                      "name": "2,647,29",
                      "text": "2,647,45,47:2,648,12,394",
                      "type": "2,647,20",
                      "value": "2,647,35"
                    }
                  }
                ],
                "src": {
                  "deprecatedMessage": "2,653,12",
                  "deprecatedVersion": "2,653,12",
                  "name": "2,655,0",
                  "text": "2,626,12,802"
                }
              },
              {
                "$type": "method",
                "name": "fireEvent",
                "text": "Fires the specified event with the passed parameters (minus the event name, plus the `options` object passed\nto <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>).\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.grid.feature.Grouping-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "2,568,27",
                      "text": "2,568,37,31",
                      "type": "2,568,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Variable number of parameters are passed to handlers.\n",
                    "type": "Object...",
                    "src": {
                      "name": "2,569,30",
                      "text": "2,569,35,54",
                      "type": "2,569,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,570,29,77",
                      "type": "2,570,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,572,0",
                  "text": "2,562,11,310"
                }
              },
              {
                "$type": "method",
                "name": "fireEventArgs",
                "text": "Fires the specified event with the passed parameter list.\n\nAn event may be set to bubble up an Observable parent hierarchy (See <a href='#!/api/Ext.Component-method-getBubbleTarget'>Ext.Component#getBubbleTarget</a>) by\ncalling <a href='#!/api/Ext.grid.feature.Grouping-method-enableBubble'>enableBubble</a>.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "2,605,27",
                      "text": "2,605,37,31",
                      "type": "2,605,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "An array of parameters which are passed to handlers.\n",
                    "type": "Object[]",
                    "src": {
                      "name": "2,606,29",
                      "text": "2,606,34,53",
                      "type": "2,606,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "returns false if any of the handlers return false otherwise it returns true.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,607,29,77",
                      "type": "2,607,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,609,0",
                  "text": "2,600,11,202"
                }
              },
              {
                "$type": "method",
                "name": "fireEventedAction",
                "text": "Fires the specified event with the passed parameters and executes a function (action).\nEvented Actions will automatically dispatch a 'before' event passing. This event will\nbe given a special controller that allows for pausing/resuming of the event flow.\n\nBy pausing the controller the updater and events will not run until resumed. Pausing,\nhowever, will not stop the processing of any other before events.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to fire.\n",
                    "type": "String",
                    "src": {
                      "name": "2,721,28",
                      "text": "2,721,38,31",
                      "type": "2,721,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "args",
                    "text": "Arguments to pass to handlers and to the action function.\n",
                    "type": "Array",
                    "src": {
                      "name": "2,722,27",
                      "text": "2,722,32,58",
                      "type": "2,722,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The action function.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,723,37",
                      "text": "2,723,40,21",
                      "type": "2,723,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n",
                    "type": "Object",
                    "src": {
                      "name": "2,724,29",
                      "text": "2,724,36,62:2,725,12,72",
                      "type": "2,724,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fnArgs",
                    "optional": true,
                    "text": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n",
                    "type": "Array/Boolean",
                    "src": {
                      "name": "2,726,36",
                      "text": "2,726,44,47:2,727,12,201",
                      "type": "2,726,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,731,0",
                  "text": "2,714,12,409"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "generateSummaryData",
                "text": "Used by the Grouping Feature when <a href='#!/api/Ext.grid.feature.Grouping-cfg-showSummaryRow'>showSummaryRow</a> is `true`.\n\nGenerates group summary data for the whole store.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "An object hash keyed by group name containing summary records.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1282,25,63",
                      "type": "0,1282,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,1281,8",
                  "name": "0,1284,0",
                  "text": "0,1278,8,120"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getBubbleParent",
                "text": "Gets the bubbling parent for an Observable\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The bubble parent. null is returned if no bubble target exists\n",
                    "type": "Ext.util.Observable",
                    "src": {
                      "text": "2,793,41,63",
                      "type": "2,793,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,792,11",
                  "name": "2,795,0",
                  "text": "2,791,11,43"
                }
              },
              {
                "$type": "method",
                "name": "getFireEventArgs",
                "template": true,
                "text": "Abstract method to be overriden when a feature should add additional\narguments to its event signature. By default the event will fire:\n\n- view - The underlying Ext.view.Table\n- featureTarget - The matched element by the defined <a href='#!/api/Ext.grid.feature.Grouping-property-eventSelector'>eventSelector</a>\n\nThe method must also return the eventName as the first index of the array\nto be passed to fireEvent.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "src": {
                      "name": "4,162,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "view",
                    "src": {
                      "name": "4,162,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "featureTarget",
                    "src": {
                      "name": "4,162,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "4,162,0"
                    }
                  }
                ],
                "src": {
                  "name": "4,162,0",
                  "template": "4,160,8",
                  "text": "4,152,8,353"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getGrouper",
                "items": [
                  {
                    "$type": "param",
                    "name": "dataIndex",
                    "src": {
                      "name": "0,809,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,806,8",
                  "name": "0,809,0"
                }
              },
              {
                "$type": "method",
                "name": "getId",
                "text": "Retrieves the id of this component. Will autogenerate an id if one has not already been set.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "id\n",
                    "type": "String",
                    "src": {
                      "text": "5,75,25,3",
                      "type": "5,75,17"
                    }
                  }
                ],
                "src": {
                  "name": "5,77,0",
                  "text": "5,74,8,93"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getMenuItem",
                "text": "Gets the related menu item for a dataIndex\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "The header\n",
                    "type": "Ext.grid.header.Container",
                    "src": {
                      "text": "0,1063,44,11",
                      "type": "0,1063,17"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "dataIndex",
                    "src": {
                      "name": "0,1065,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1062,8",
                  "name": "0,1065,0",
                  "text": "0,1061,8,43"
                }
              },
              {
                "$type": "method",
                "name": "getRecordGroup",
                "text": "Returns the group data object for the group to which the passed record belongs **if the Store is grouped**.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "record",
                    "text": "The record for which to return group information.\n",
                    "type": "Ext.data.Model",
                    "src": {
                      "name": "0,1359,32",
                      "text": "0,1359,39,50",
                      "type": "0,1359,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A single group data block as returned from <a href='#!/api/Ext.data.Store-method-getGroups'>Ext.data.Store#getGroups</a>. Returns\n<a href='#!/api/undefined'>undefined</a> if the Store is not grouped.\n",
                    "type": "Object",
                    "src": {
                      "text": "0,1360,25,101:0,1361,8,42",
                      "type": "0,1360,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,1364,0",
                  "text": "0,1357,8,109"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getSummary",
                "text": "Get the summary data for a field.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "store",
                    "text": "The store to get the data from\n",
                    "type": "Ext.data.Store",
                    "src": {
                      "name": "3,173,32",
                      "text": "3,173,38,31",
                      "type": "3,173,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "type",
                    "text": "The type of aggregation. If a function is specified it will\nbe passed to the stores aggregate function.\n",
                    "type": "String/Function",
                    "src": {
                      "name": "3,174,33",
                      "text": "3,174,38,60:3,175,8,44",
                      "type": "3,174,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "field",
                    "text": "The field to aggregate on\n",
                    "type": "String",
                    "src": {
                      "name": "3,176,24",
                      "text": "3,176,30,26",
                      "type": "3,176,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "group",
                    "text": "True to aggregate in grouped mode\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,177,25",
                      "text": "3,177,31,34",
                      "type": "3,177,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "See the return type for the store functions.\nif the group parameter is `true` An object is returned with a property named for each group who's\nvalue is the summary value.\n",
                    "type": "Number/String/Object",
                    "src": {
                      "text": "3,178,39,45:3,179,8,126",
                      "type": "3,178,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,172,8",
                  "name": "3,182,0",
                  "text": "3,171,8,34"
                }
              },
              {
                "$type": "method",
                "name": "hasListener",
                "text": "Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer\nindicates whether the event needs firing or not.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to check for\n",
                    "type": "String",
                    "src": {
                      "name": "2,1334,27",
                      "text": "2,1334,37,35",
                      "type": "2,1334,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the event is being listened for or bubbles, else `false`\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,1335,29,67",
                      "type": "2,1335,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1337,0",
                  "text": "2,1331,11,161"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "init",
                "text": "Protected method called during <a href='#!/api/Ext.view.Table'>Ext.view.Table</a> construction.  The\nowning <a href='#!/api/Ext.grid.Panel'>Ext.grid.Panel</a> is passed as a param.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "grid",
                    "text": "The View's owning Grid.  **Note** that in a\n<a href='#!/api/Ext.grid.Panel-cfg-enableLocking'>Ext.grid.Panel#cfg-enableLocking</a> the passed grid will be\neither the normal grid or the locked grid, which is the view's direct owner.\n",
                    "type": "Ext.grid.Panel",
                    "src": {
                      "name": "4,143,32",
                      "text": "4,143,37,44:4,144,8,155",
                      "type": "4,143,16"
                    }
                  }
                ],
                "src": {
                  "access": "4,147,8",
                  "name": "4,149,0",
                  "text": "4,141,8,135"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isAllCollapsed",
                "text": "Returns true if all groups are collapsed\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,920,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,918,8",
                  "name": "0,922,0",
                  "text": "0,919,8,41"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "isAllExpanded",
                "text": "Returns true if all groups are expanded\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Boolean",
                    "src": {
                      "type": "0,942,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,940,8",
                  "name": "0,944,0",
                  "text": "0,941,8,40"
                }
              },
              {
                "$type": "method",
                "name": "isExpanded",
                "text": "Returns `true` if the named group is expanded.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "groupName",
                    "text": "The group name. This is the value of\nthe <a href='#!/api/Ext.data.Store-cfg-groupField'>Ext.data.Store#groupField</a>.\n",
                    "type": "String",
                    "src": {
                      "name": "0,857,24",
                      "text": "0,857,34,37:0,858,8,50",
                      "type": "0,857,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if the group defined by that value is expanded.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,859,26,55",
                      "type": "0,859,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,861,0",
                  "text": "0,856,8,47"
                }
              },
              {
                "$type": "method",
                "name": "isSuspended",
                "text": "Checks if all events, or a specific event, is suspended.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "event",
                    "optional": true,
                    "text": "The name of the specific event to check\n",
                    "type": "String",
                    "src": {
                      "name": "2,1344,29",
                      "text": "2,1344,36,40",
                      "type": "2,1344,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "`true` if events are suspended\n",
                    "type": "Boolean",
                    "src": {
                      "text": "2,1345,30,31",
                      "type": "2,1345,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1347,0",
                  "text": "2,1343,12,57"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addManagedListener",
                "name": "mon",
                "text": "Shorthand for <a href='#!/api/Ext.grid.feature.Grouping-method-addManagedListener'>addManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "2,1787,12",
                  "name": "2,1789,0",
                  "text": "2,1786,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeManagedListener",
                "name": "mun",
                "text": "Shorthand for <a href='#!/api/Ext.grid.feature.Grouping-method-removeManagedListener'>removeManagedListener</a>.\n",
                "src": {
                  "inheritdoc": "2,1793,12",
                  "name": "2,1795,0",
                  "text": "2,1792,12,46"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#addListener",
                "name": "on",
                "src": {
                  "inheritdoc": "2,1775,12",
                  "name": "2,1777,0"
                }
              },
              {
                "$type": "method",
                "name": "onAfter",
                "text": "Appends an after-event handler.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "2,1190,44",
                      "text": "2,1190,54,37",
                      "type": "2,1190,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,1191,37",
                      "text": "2,1191,40,30",
                      "type": "2,1191,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1192,29",
                      "text": "2,1192,36,20",
                      "type": "2,1192,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1193,29",
                      "text": "2,1193,38,44",
                      "type": "2,1193,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1195,0",
                  "text": "2,1185,12,125"
                }
              },
              {
                "$type": "method",
                "name": "onBefore",
                "text": "Appends a before-event handler.  Returning `false` from the handler will stop the event.\n\nSame as <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> with `order` set\nto `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event to listen for.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "2,1175,44",
                      "text": "2,1175,54,37",
                      "type": "2,1175,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The method the event invokes.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,1176,37",
                      "text": "2,1176,40,30",
                      "type": "2,1176,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1177,29",
                      "text": "2,1177,36,20",
                      "type": "2,1177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "An object containing handler configuration.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1178,29",
                      "text": "2,1178,38,44",
                      "type": "2,1178,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1180,0",
                  "text": "2,1170,12,183"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onGroupClick",
                "text": "Toggle between expanded/collapsed state when clicking on\nthe group.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "view",
                    "src": {
                      "name": "0,1087,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "rowElement",
                    "src": {
                      "name": "0,1087,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "groupName",
                    "src": {
                      "name": "0,1087,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,1087,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,1085,8",
                  "name": "0,1087,0",
                  "text": "0,1083,8,68"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onGroupMenuItemClick",
                "text": "Group by the header the user has clicked on.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "menuItem",
                    "src": {
                      "name": "0,699,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "e",
                    "src": {
                      "name": "0,699,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,697,8",
                  "name": "0,699,0",
                  "text": "0,696,8,45"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "onGroupToggleMenuItemClick",
                "text": "Turn on and off grouping via the menu\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "menuItem",
                    "src": {
                      "name": "0,740,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "checked",
                    "src": {
                      "name": "0,740,0"
                    }
                  }
                ],
                "src": {
                  "access": "0,738,8",
                  "name": "0,740,0",
                  "text": "0,737,8,38"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "pruneGroupedHeader",
                "text": "Prunes the grouped header from the header container\n",
                "src": {
                  "access": "0,746,8",
                  "name": "0,748,0",
                  "text": "0,745,8,52"
                }
              },
              {
                "$type": "method",
                "name": "relayEvents",
                "text": "Relays selected events from the specified Observable as if the events were fired by `this`.\n\nFor example if you are extending Grid, you might decide to forward some events from store.\nSo you can do this inside your initComponent:\n\n    this.relayEvents(this.getStore(), ['load']);\n\nThe grid instance will then have an observable 'load' event which will be passed\nthe parameters of the store's load event and any function fired with the grid's\nload event would have access to the grid using the this keyword (unless the event\nis handled by a controller's control/listen event listener in which case 'this'\nwill be the controller rather than the grid).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "origin",
                    "text": "The Observable whose events this object is to relay.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1466,27",
                      "text": "2,1466,34,53",
                      "type": "2,1466,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "events",
                    "text": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event as a pop event.\n",
                    "type": "String[]/Object",
                    "src": {
                      "name": "2,1467,36",
                      "text": "2,1467,43,58:2,1468,11,231",
                      "type": "2,1467,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "prefix",
                    "optional": true,
                    "text": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1473,28",
                      "text": "2,1473,36,60:2,1474,11,164",
                      "type": "2,1473,19"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "A `Destroyable` object. An object which implements the `destroy` method which, when destroyed, removes all relayers. For example:\n\n    this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nCan be undone by calling\n\n    Ext.destroy(this.storeRelayers);\n\nor\n    this.store.relayers.destroy();\n",
                    "type": "Object",
                    "src": {
                      "text": "2,1479,28,130:2,1480,11,192",
                      "type": "2,1479,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1490,0",
                  "text": "2,1453,11,651"
                }
              },
              {
                "$type": "method",
                "name": "removeAfterListener",
                "text": "Alias for <a href='#!/api/Ext.grid.feature.Grouping-method-unAfter'>unAfter</a>.\n",
                "src": {
                  "name": "2,1248,0",
                  "text": "2,1246,12,28"
                }
              },
              {
                "$type": "method",
                "name": "removeBeforeListener",
                "text": "Alias for <a href='#!/api/Ext.grid.feature.Grouping-method-unBefore'>unBefore</a>.\n",
                "src": {
                  "name": "2,1242,0",
                  "text": "2,1240,12,29"
                }
              },
              {
                "$type": "method",
                "name": "removeListener",
                "text": "Removes an event handler.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The type of event the handler was associated with.\n",
                    "type": "String",
                    "src": {
                      "name": "2,1102,28",
                      "text": "2,1102,38,51",
                      "type": "2,1102,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove. **This must be a reference to the function\npassed into the\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> call.**\n",
                    "type": "Function",
                    "src": {
                      "name": "2,1103,30",
                      "text": "2,1103,33,66:2,1104,12,76",
                      "type": "2,1103,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n<a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> or the listener will not be removed.\n\n**Convenience Syntax**\n\nYou can use the <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a> _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1106,28",
                      "text": "2,1106,34,62:2,1107,12,1017",
                      "type": "2,1106,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1145,0",
                  "text": "2,1100,12,27"
                }
              },
              {
                "$type": "method",
                "name": "removeManagedListener",
                "text": "Removes listeners that were added by the <a href='#!/api/Ext.grid.feature.Grouping-method-mon'>mon</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The item from which to remove a listener/listeners.\n",
                    "type": "Ext.util.Observable/Ext.dom.Element",
                    "src": {
                      "name": "2,526,56",
                      "text": "2,526,61,52",
                      "type": "2,526,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ename",
                    "text": "The event name, or an object containing event name properties.\n",
                    "type": "Object/String",
                    "src": {
                      "name": "2,527,34",
                      "text": "2,527,40,63",
                      "type": "2,527,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "(optional) If the `ename` parameter was an event name, this is the handler function.\n",
                    "type": "Function",
                    "src": {
                      "name": "2,528,29",
                      "text": "2,528,32,85",
                      "type": "2,528,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "text": "(optional) If the `ename` parameter was an event name, this is the scope (`this` reference)\nin which the handler function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,529,27",
                      "text": "2,529,33,92:2,530,11,43",
                      "type": "2,529,19"
                    }
                  }
                ],
                "src": {
                  "name": "2,532,0",
                  "text": "2,524,11,63"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "removeManagedListenerItem",
                "text": "Remove a single managed listener item\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "isClear",
                    "text": "True if this is being called during a clear\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1307,28",
                      "text": "2,1307,36,44",
                      "type": "2,1307,19"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "managedListener",
                    "text": "The managed listener item\nSee removeManagedListener for other args\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1308,27",
                      "text": "2,1308,43,26:2,1309,11,41",
                      "type": "2,1308,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,1306,11",
                  "name": "2,1311,0",
                  "text": "2,1305,11,38"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "resolveListenerScope",
                "text": "Gets the default scope for firing late bound events (string names with\nno scope attached) at runtime.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "defaultScope",
                    "optional": true,
                    "text": "The default scope to return if none is found.\n",
                    "type": "Object",
                    "value": "this",
                    "src": {
                      "name": "2,579,29",
                      "text": "2,579,48,46",
                      "type": "2,579,20",
                      "value": "2,579,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The default event scope\n",
                    "type": "Object",
                    "src": {
                      "text": "2,580,29,24",
                      "type": "2,580,21"
                    }
                  }
                ],
                "src": {
                  "access": "2,581,12",
                  "name": "2,583,0",
                  "text": "2,577,12,102"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvent",
                "text": "Resumes firing of the named event(s).\n\nAfter calling this method to resume events, the events will fire when requested to fire.\n\n**Note that if the <a href='#!/api/Ext.grid.feature.Grouping-method-suspendEvent'>suspendEvent</a> method is called multiple times for a certain event,\nthis converse method will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to resume.\n",
                    "type": "String...",
                    "src": {
                      "name": "2,1409,32",
                      "text": "2,1409,42,32",
                      "type": "2,1409,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1411,0",
                  "text": "2,1402,12,320"
                }
              },
              {
                "$type": "method",
                "name": "resumeEvents",
                "text": "Resumes firing events (see <a href='#!/api/Ext.grid.feature.Grouping-method-suspendEvents'>suspendEvents</a>).\n\nIf events were suspended using the `queueSuspended` parameter, then all events fired\nduring event suspension will be sent to any listeners now.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "discardQueue",
                    "optional": true,
                    "text": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See <a href='#!/api/Ext.grid.feature.Grouping-method-suspendEvents'>suspendEvents</a>.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1431,29",
                      "text": "2,1431,43,59:2,1432,11,53",
                      "type": "2,1431,19"
                    }
                  }
                ],
                "src": {
                  "name": "2,1434,0",
                  "text": "2,1426,11,198"
                }
              },
              {
                "$type": "method",
                "name": "setListeners",
                "text": "An alias for <a href='#!/api/Ext.util.Observable-method-addListener'>Ext.util.Observable#addListener</a>.  In\nversions prior to 5.1, <a href='#!/api/Ext.grid.feature.Grouping-cfg-listeners'>listeners</a> had a generated setter which could\nbe called to add listeners.  In 5.1 the listeners config is not processed\nusing the config system and has no generated setter, so this method is\nprovided for backward compatibility.  The preferred way of adding listeners\nis to use the <a href='#!/api/Ext.grid.feature.Grouping-method-on'>on</a> method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "listeners",
                    "text": "The listeners\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1804,28",
                      "text": "2,1804,38,14",
                      "type": "2,1804,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1806,0",
                  "text": "2,1798,12,402"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvent",
                "text": "Suspends firing of the named event(s).\n\nAfter calling this method to suspend events, the events will no longer fire when requested to fire.\n\n**Note that if this is called multiple times for a certain event, the converse method\n<a href='#!/api/Ext.grid.feature.Grouping-method-resumeEvent'>resumeEvent</a> will have to be called the same number of times for it to resume firing.**\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "Multiple event names to suspend.\n",
                    "type": "String...",
                    "src": {
                      "name": "2,1381,32",
                      "text": "2,1381,42,33",
                      "type": "2,1381,21"
                    }
                  }
                ],
                "src": {
                  "name": "2,1383,0",
                  "text": "2,1374,12,324"
                }
              },
              {
                "$type": "method",
                "name": "suspendEvents",
                "text": "Suspends the firing of all events. (see <a href='#!/api/Ext.grid.feature.Grouping-method-resumeEvents'>resumeEvents</a>)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "queueSuspended",
                    "text": "`true` to queue up suspended events to be fired\nafter the <a href='#!/api/Ext.grid.feature.Grouping-method-resumeEvents'>resumeEvents</a> call instead of discarding all suspended events.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "2,1363,28",
                      "text": "2,1363,43,48:2,1364,11,81",
                      "type": "2,1363,19"
                    }
                  }
                ],
                "src": {
                  "name": "2,1366,0",
                  "text": "2,1361,11,64"
                }
              },
              {
                "$type": "method",
                "name": "toggleSummaryRow",
                "text": "Toggle whether or not to show the summary row.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "visible",
                    "text": "True to show the summary row\n",
                    "type": "Boolean",
                    "src": {
                      "name": "3,82,25",
                      "text": "3,82,33,29",
                      "type": "3,82,16"
                    }
                  }
                ],
                "src": {
                  "name": "3,84,0",
                  "text": "3,81,8,47"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.util.Observable#removeListener",
                "name": "un",
                "text": "Shorthand for <a href='#!/api/Ext.grid.feature.Grouping-method-removeListener'>removeListener</a>.\n",
                "src": {
                  "inheritdoc": "2,1781,12",
                  "name": "2,1783,0",
                  "text": "2,1780,12,39"
                }
              },
              {
                "$type": "method",
                "name": "unAfter",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.grid.feature.Grouping-method-removeListener'>removeListener</a> with `order` set to `'after'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "2,1218,44",
                      "text": "2,1218,54,55",
                      "type": "2,1218,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,1219,37",
                      "text": "2,1219,40,23",
                      "type": "2,1219,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1220,29",
                      "text": "2,1220,36,41",
                      "type": "2,1220,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1221,29",
                      "text": "2,1221,38,22",
                      "type": "2,1221,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1223,0",
                  "text": "2,1214,12,97"
                }
              },
              {
                "$type": "method",
                "name": "unBefore",
                "text": "Removes a before-event handler.\n\nSame as <a href='#!/api/Ext.grid.feature.Grouping-method-removeListener'>removeListener</a> with `order` set to `'before'`.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "eventName",
                    "text": "The name of the event the handler was associated with.\n",
                    "type": "String/String[]/Object",
                    "src": {
                      "name": "2,1204,44",
                      "text": "2,1204,54,55",
                      "type": "2,1204,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The handler to remove.\n",
                    "type": "Function/String",
                    "src": {
                      "name": "2,1205,37",
                      "text": "2,1205,40,23",
                      "type": "2,1205,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope originally specified for `fn`.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1206,29",
                      "text": "2,1206,36,41",
                      "type": "2,1206,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "options",
                    "optional": true,
                    "text": "Extra options object.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,1207,29",
                      "text": "2,1207,38,22",
                      "type": "2,1207,20"
                    }
                  }
                ],
                "src": {
                  "name": "2,1209,0",
                  "text": "2,1200,12,98"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "$eventOptions",
                "text": "Matches options property names within a listeners specification object  - property names which are never used as event names.\n",
                "src": {
                  "access": "2,389,12",
                  "name": "2,392,0",
                  "text": "2,390,12,126"
                }
              },
              {
                "$type": "property",
                "name": "disabled",
                "text": "True when feature is disabled.\n",
                "src": {
                  "name": "4,97,0",
                  "text": "4,95,8,31"
                }
              },
              {
                "$type": "property",
                "name": "eventPrefix",
                "text": "Prefix to use when firing events on the view.\nFor example a prefix of group would expose \"groupclick\", \"groupcontextmenu\", \"groupdblclick\".\n",
                "type": "String",
                "src": {
                  "name": "4,111,0",
                  "text": "4,108,8,140",
                  "type": "4,107,19"
                }
              },
              {
                "$type": "property",
                "name": "eventSelector",
                "text": "Selector used to determine when to fire the event with the eventPrefix.\n",
                "type": "String",
                "src": {
                  "name": "4,117,0",
                  "text": "4,115,8,72",
                  "type": "4,114,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "eventsSuspended",
                "text": "Initial suspended call count. Incremented when <a href='#!/api/Ext.grid.feature.Grouping-method-suspendEvents'>suspendEvents</a> is called, decremented when <a href='#!/api/Ext.grid.feature.Grouping-method-resumeEvents'>resumeEvents</a> is called.\n",
                "src": {
                  "access": "2,284,11",
                  "name": "2,287,0",
                  "text": "2,285,11,131"
                }
              },
              {
                "$type": "property",
                "name": "grid",
                "text": "Reference to the grid panel\n",
                "type": "Ext.grid.Panel",
                "src": {
                  "name": "4,129,0",
                  "text": "4,127,8,28",
                  "type": "4,126,19"
                }
              },
              {
                "$type": "property",
                "name": "hasFeatureEvent",
                "text": "Most features will expose additional events, some may not and will\nneed to change this to false.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,104,0",
                  "text": "4,101,8,97",
                  "type": "4,100,19"
                }
              },
              {
                "$type": "property",
                "name": "hasListeners",
                "readonly": true,
                "text": "This object holds a key for any event that has a listener. The listener may be set\ndirectly on the instance, or on its class or a super class (via <a href='#!/api/Ext.grid.feature.Grouping-observe'>observe</a>) or\non the <a href='#!/api/Ext.app.EventBus'>Ext.app.EventBus</a>. The values of this object are truthy\n(a non-zero number) and falsy (0 or undefined). They do not represent an exact count\nof listeners. The value for an event is truthy if the event must be fired and is\nfalsy if there is no need to fire the event.\n\nThe intended use of this property is to avoid the expense of fireEvent calls when\nthere are no listeners. This can be particularly helpful when one would otherwise\nhave to call fireEvent hundreds or thousands of times. It is used like this:\n\n     if (this.hasListeners.foo) {\n         this.fireEvent('foo', this, arg1);\n     }\n",
                "type": "Object",
                "src": {
                  "name": "2,290,30",
                  "readonly": "2,291,11",
                  "text": "2,292,11,790",
                  "type": "2,290,22"
                }
              },
              {
                "$type": "property",
                "name": "isFeature",
                "text": "`true` in this class to identify an object as an instantiated Feature, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "4,89,28",
                  "text": "4,90,8,92",
                  "type": "4,89,19"
                }
              },
              {
                "$type": "property",
                "name": "isObservable",
                "text": "`true` in this class to identify an object as an instantiated Observable, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "2,278,31",
                  "text": "2,279,11,95",
                  "type": "2,278,22"
                }
              },
              {
                "$type": "property",
                "name": "view",
                "text": "Reference to the TableView.\n",
                "type": "Ext.view.Table",
                "src": {
                  "name": "4,123,0",
                  "text": "4,121,8,28",
                  "type": "4,120,19"
                }
              }
            ]
          },
          {
            "$type": "static-methods"
          },
          {
            "$type": "vars",
            "items": [
              {
                "$type": "property",
                "name": "$grid-grouped-header-background-color",
                "text": "The background color of group headers\n",
                "type": "color",
                "value": "#fff",
                "src": {
                  "name": "1,9,1",
                  "text": "1,7,4,38",
                  "type": "1,6,10",
                  "value": "1,9,48"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-header-border-color",
                "text": "The border-color of group headers\n",
                "type": "color",
                "value": "adjust-color($base-color, $hue: 0.844deg, $saturation: 7.644%, $lightness: -8.627%)",
                "src": {
                  "name": "1,27,1",
                  "text": "1,25,4,34",
                  "type": "1,24,10",
                  "value": "1,27,44"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-header-border-style",
                "text": "The border-style of group headers\n",
                "type": "String",
                "value": "solid",
                "src": {
                  "name": "1,21,1",
                  "text": "1,19,4,34",
                  "type": "1,18,10",
                  "value": "1,21,44"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-header-border-width",
                "text": "The border-width of group headers\n",
                "type": "Number/list",
                "value": "0 0 2px 0",
                "src": {
                  "name": "1,15,1",
                  "text": "1,13,4,34",
                  "type": "1,12,10",
                  "value": "1,15,44"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-header-cursor",
                "text": "The cursor of group headers\n",
                "type": "String",
                "value": "pointer",
                "src": {
                  "name": "1,39,1",
                  "text": "1,37,4,28",
                  "type": "1,36,10",
                  "value": "1,39,38"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-header-padding",
                "text": "The padding of group headers\n",
                "type": "Number/list",
                "value": "10px 4px 4px 4px",
                "src": {
                  "name": "1,33,1",
                  "text": "1,31,4,29",
                  "type": "1,30,10",
                  "value": "1,33,39"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-icon-padding",
                "text": "The amount of padding to add to the group title element.  This is typically used\nto reserve space for an icon by setting the amountof space to be reserved for the icon\nas the left value and setting the remaining sides to 0.\n",
                "type": "Number/list",
                "value": "0 0 0 14px",
                "src": {
                  "name": "1,110,1",
                  "text": "1,106,4,224",
                  "type": "1,105,10",
                  "value": "1,110,37"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-menu-group-by-glyph",
                "text": "Glyph for the \"group by this field\" menu icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$ext-var-group-by $grid-header-menu-glyph-font-size ExtJS",
                "src": {
                  "name": "1,75,1",
                  "text": "1,73,4,100",
                  "type": "1,72,10",
                  "value": "1,75,44"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-title-collapse-glyph",
                "text": "Glyph for the group title's \"collapse\" group icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-minus-square $grid-grouped-title-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,99,1",
                  "text": "1,97,4,104",
                  "type": "1,96,10",
                  "value": "1,99,45"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-title-color",
                "text": "The text color of group header titles\n",
                "type": "color",
                "value": "adjust-color($base-color, $hue: 0.952deg, $saturation: -6.718%, $lightness: -41.961%)",
                "src": {
                  "name": "1,45,1",
                  "text": "1,43,4,38",
                  "type": "1,42,10",
                  "value": "1,45,36"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-title-expand-glyph",
                "text": "Glyph for the group title's \"expand\" group icon when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "String/list",
                "value": "$fa-var-plus-square $grid-grouped-title-glyph-font-size $font-icon-font-family",
                "src": {
                  "name": "1,93,1",
                  "text": "1,91,4,102",
                  "type": "1,90,10",
                  "value": "1,93,43"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-title-font-family",
                "text": "The font-family of group header titles\n",
                "type": "String",
                "value": "$font-family",
                "src": {
                  "name": "1,51,1",
                  "text": "1,49,4,39",
                  "type": "1,48,10",
                  "value": "1,51,42"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-title-font-size",
                "text": "The font-size of group header titles\n",
                "type": "Number",
                "value": "$font-size",
                "src": {
                  "name": "1,57,1",
                  "text": "1,55,4,37",
                  "type": "1,54,10",
                  "value": "1,57,40"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-title-font-weight",
                "text": "The font-weight of group header titles\n",
                "type": "String",
                "value": "$font-weight-bold",
                "src": {
                  "name": "1,63,1",
                  "text": "1,61,4,39",
                  "type": "1,60,10",
                  "value": "1,63,42"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-title-glyph-color",
                "text": "The color to use for the group title's expand and collapse icons when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "color",
                "value": "$color",
                "src": {
                  "name": "1,81,1",
                  "text": "1,79,4,119",
                  "type": "1,78,10",
                  "value": "1,81,42"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-title-glyph-font-size",
                "text": "The font size for the group title's expand and collapse icons when <a href='#!/api/Global_CSS-var-$enable-font-icons'>Global_CSS#$enable-font-icons</a> is `true`.\n",
                "type": "Number",
                "value": "14px",
                "src": {
                  "name": "1,87,1",
                  "text": "1,85,4,116",
                  "type": "1,84,10",
                  "value": "1,87,46"
                }
              },
              {
                "$type": "property",
                "name": "$grid-grouped-title-line-height",
                "text": "The line-height of group header titles\n",
                "type": "Number",
                "value": "round($grid-grouped-title-font-size * 1.15)",
                "src": {
                  "name": "1,69,1",
                  "text": "1,67,4,39",
                  "type": "1,66,10",
                  "value": "1,69,42"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,85,0",
          "extends": "0,79,0",
          "mixins": "0,81,0",
          "name": "1,2,11",
          "requires": "0,83,0",
          "text": "0,2,4,2796"
        }
      }
    ]
  },
  "version": 1
}