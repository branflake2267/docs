{
  "$type": "doxi",
  "files": [
    "../../../ext/classic/classic/src/layout/container/Table.js",
    "../../../ext/classic/classic/src/layout/Layout.js",
    "../../../ext/classic/classic/src/util/ElementContainer.js",
    "../../../ext/classic/classic/src/layout/container/Container.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "layout.table",
        "alternateClassNames": "Ext.layout.TableLayout",
        "extends": "Ext.layout.container.Container",
        "name": "Ext.layout.container.Table",
        "text": "This layout allows you to easily render content into an HTML table. The total number of columns can be specified, and\nrowspan and colspan can be used to create complex layouts within the table. This class is intended to be extended or\ncreated via the `layout: {type: 'table'}` <a href='#!/api/Ext.container.Container-cfg-layout'>Ext.container.Container#layout</a> config, and should generally not\nneed to be created directly via the new keyword.\n\nNote that when creating a layout via config, the layout-specific config properties must be passed in via the <a href='#!/api/Ext.container.Container-cfg-layout'>Ext.container.Container#layout</a> object which will then be applied internally to the layout. In the case of\nTableLayout, the only valid layout config properties are <a href='#!/api/Ext.layout.container.Table-cfg-columns'>columns</a> and <a href='#!/api/Ext.layout.container.Table-cfg-tableAttrs'>tableAttrs</a>. However, the items\nadded to a TableLayout can supply the following table-specific config properties:\n\n  - **rowspan** Applied to the table cell containing the item.\n  - **colspan** Applied to the table cell containing the item.\n  - **cellCls** A CSS class name added to the table cell containing the item.\n\nThe basic concept of building up a TableLayout is conceptually very similar to building up a standard HTML table. You\nsimply add each panel (or \"cell\") that you want to include along with any span attributes specified as the special\nconfig properties of rowspan and colspan which work exactly like their HTML counterparts. Rather than explicitly\ncreating and nesting rows and columns as you would in HTML, you simply specify the total column count in the\nlayout config and start adding panels in their natural order from left to right, top to bottom. The layout will\nautomatically figure out, based on the column count, rowspans and colspans, how to position each panel within the\ntable. Just like with HTML tables, your rowspans and colspans must add up correctly in your overall layout or you'll\nend up with missing and/or extra cells! Example usage:\n\n    @example\n    Ext.create('Ext.panel.Panel', {\n        title: 'Table Layout',\n        width: 300,\n        height: 150,\n        layout: {\n            type: 'table',\n            // The total column count must be specified here\n            columns: 3\n        },\n        defaults: {\n            // applied to each contained panel\n            bodyStyle: 'padding:20px'\n        },\n        items: [{\n            html: 'Cell A content',\n            rowspan: 2\n        },{\n            html: 'Cell B content',\n            colspan: 2\n        },{\n            html: 'Cell C content',\n            cellCls: 'highlight'\n        },{\n            html: 'Cell D content'\n        }],\n        renderTo: Ext.getBody()\n    });\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "access": "protected",
                "name": "animatePolicy",
                "since": "4.1.0",
                "text": "An object that contains as keys the names of the properties that can be animated\nby child items as a consequence of a layout. This config is used internally by the\n<a href='#!/api/Ext.layout.container.Accordion'>Ext.layout.container.Accordion</a> layout to cause the child panels\nto animate to their proper size and position after a collapse/expand event.\n",
                "type": "Object",
                "src": {
                  "access": "1,233,8",
                  "name": "1,228,22",
                  "since": "1,234,15",
                  "text": "1,229,8,322",
                  "type": "1,228,14"
                }
              },
              {
                "$type": "property",
                "name": "childEls",
                "text": "The canonical form of <a href='#!/api/Ext.layout.container.Table-cfg-childEls'>childEls</a> is an object keyed by child's property name\nwith values that are objects with the following properties.\n\n- `itemId` - The id to combine with the Component's id that is the id of the\n  child element.\n- `id` - The id of the child element.\n- `leaf` - Set to `true` to ignore content when scanning for childEls. This\n should be set on things like the generated content for an <a href='#!/api/Ext.view.View'>Ext.view.View</a>.\n- `select`: A selector that will be passed to <a href='#!/api/Ext.dom.Element-method-select'>Ext.dom.Element#method-select</a>.\n- `selectNode`: A selector that will be passed to <a href='#!/api/Ext.dom.Element-method-selectNode'>Ext.dom.Element#method-selectNode</a>.\n\nFor example:\n\n     childEls: {\n         button: true,\n         buttonText: 'text',\n         buttonImage: {\n             itemId: 'image'\n         }\n     }\n\nThe above is translated into the following complete form:\n\n     childEls: {\n         button: {\n             name: 'button',\n             itemId: 'button'\n         },\n         buttonText: {\n             name: 'buttonText',\n             itemId: 'text'\n         },\n         buttonImage: {\n             name: 'buttonImage',\n             itemId: 'image'\n         }\n     }\n\nThe above can be provided as an array like so:\n\n     childEls: [\n         'button',\n         { name: 'buttonText', itemId: 'text' },\n         { name: 'buttonImage', itemId: 'image' }\n     }\n\nFor example, a Component which renders a title and body text:\n\n    @example\n    Ext.create('Ext.Component', {\n        renderTo: Ext.getBody(),\n        renderTpl: [\n            '<h1 id=\"{id}-title\" data-ref=\"title\">{title}</h1>',\n            '<p>{msg}</p>',\n        ],\n        renderData: {\n            title: \"Error\",\n            msg: \"Something went wrong\"\n        },\n        childEls: [\"title\"],\n        listeners: {\n            afterrender: function(cmp){\n                // After rendering the component will have a title property\n                cmp.title.setStyle({color: \"red\"});\n            }\n        }\n    });\n\n**Note:** `childEl`s in the <a href='#!/api/Ext.Component-cfg-renderTpl'>Ext.Component#cfg-renderTpl</a>\nmust be referenced in a **data-ref** attribute.  Notice in the above example\nthat the \"title\" `childEl` is set in the `renderTpl` using\n**data-ref=\"title\"**.\n\nWhen using `select`, the property will be an instance of <a href='#!/api/Ext.dom.CompositeElement'>Ext.CompositeElement</a>.\nIn all other cases, the property will be an <a href='#!/api/Ext.dom.Element'>Ext.dom.Element</a> or <a href='#!/api/null'>null</a>\nif not found.\n\nCare should be taken when using `select` or `selectNode` to find child elements.\nThe following issues should be considered:\n\n- Performance: using selectors can be 10x slower than id lookup.\n- Over-selecting: selectors are applied after the DOM elements for all children\n  have been rendered, so selectors can match elements from child components\n  (including nested versions of the same component) accidentally.\n\nThis above issues are most important when using `select` since it returns multiple\nelements.\n",
                "type": "Object/String[]/Object[]",
                "src": {
                  "name": "2,70,44",
                  "text": "2,71,12,2854",
                  "type": "2,70,18"
                }
              },
              {
                "$type": "property",
                "name": "columns",
                "text": "The total number of columns to create in the table for this layout. If not specified, all Components added to\nthis layout will be rendered into a single row using one column per Component.\n",
                "type": "Number",
                "src": {
                  "name": "0,65,22",
                  "text": "0,66,8,189",
                  "type": "0,65,14"
                }
              },
              {
                "$type": "property",
                "name": "itemCls",
                "text": "An optional extra CSS class that will be added to the container. This can be useful for\nadding customized styles to the container or any of its children using standard CSS\nrules. See <a href='#!/api/Ext.Component'>Ext.Component</a>.<a href='#!/api/Ext.Component-cfg-componentCls'>Ext.Component#componentCls</a> also.\n",
                "type": "String",
                "src": {
                  "name": "3,25,22",
                  "text": "3,26,8,259",
                  "type": "3,25,14"
                }
              },
              {
                "$type": "property",
                "name": "tableAttrs",
                "text": "An object containing properties which are added to the <a href='#!/api/Ext.dom.Helper'>Ext.dom.Helper</a> specification used to\ncreate the layout's `<table>` element. Example:\n\n    {\n        xtype: 'panel',\n        layout: {\n            type: 'table',\n            columns: 3,\n            tableAttrs: {\n                style: {\n                    width: '100%'\n                }\n            }\n        }\n    }\n",
                "type": "Object",
                "src": {
                  "name": "0,81,22",
                  "text": "0,82,8,391",
                  "type": "0,81,14"
                }
              },
              {
                "$type": "property",
                "name": "tdAttrs",
                "text": "An object containing properties which are added to the <a href='#!/api/Ext.dom.Helper'>Ext.dom.Helper</a> specification used to\ncreate the layout's `<td>` elements.\n",
                "type": "Object",
                "src": {
                  "name": "0,107,22",
                  "text": "0,108,8,147",
                  "type": "0,107,14"
                }
              },
              {
                "$type": "property",
                "name": "trAttrs",
                "text": "An object containing properties which are added to the <a href='#!/api/Ext.dom.Helper'>Ext.dom.Helper</a> specification used to\ncreate the layout's `<tr>` elements.\n",
                "type": "Object",
                "src": {
                  "name": "0,101,22",
                  "text": "0,102,8,147",
                  "type": "0,101,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "access": "private",
                "name": "addChildEl",
                "since": "6.0.0",
                "text": "Add a childEl specific to this instance. This must be called before render.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "childEl",
                    "src": {
                      "name": "2,231,19"
                    }
                  }
                ],
                "src": {
                  "access": "2,232,12",
                  "name": "2,235,0",
                  "since": "2,233,19",
                  "text": "2,230,12,76"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterClassMixedIn",
                "text": "Called after the mixin is applied. We need to see if <a href='#!/api/Ext.layout.container.Table-cfg-childEls'>childEls</a> were used by\nthe `targetClass` and apply them to the config.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "targetClass",
                    "type": "Ext.Class",
                    "src": {
                      "name": "2,253,31",
                      "type": "2,253,20"
                    }
                  }
                ],
                "src": {
                  "access": "2,254,12",
                  "name": "2,256,0",
                  "text": "2,251,12,125"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterCollapse",
                "text": "Called by an owning Panel after the Panel finishes its collapse process.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "1,563,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animated",
                    "src": {
                      "name": "1,563,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,560,8",
                  "name": "1,563,0",
                  "text": "1,561,8,73"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "afterExpand",
                "text": "Called by an owning Panel after the Panel finishes its expand process.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "1,573,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "animated",
                    "src": {
                      "name": "1,573,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,570,8",
                  "name": "1,573,0",
                  "text": "1,571,8,71"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "afterRemove",
                "text": "Removes layout's itemCls and owning Container's itemCls.\nClears the managed dimensions flags\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "1,540,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,538,8",
                  "name": "1,540,0",
                  "text": "1,536,8,93"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "attachChildEls",
                "text": "Sets references to elements inside the component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "el",
                    "src": {
                      "name": "2,274,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "2,274,0"
                    }
                  }
                ],
                "src": {
                  "access": "2,272,12",
                  "name": "2,274,0",
                  "text": "2,271,12,50"
                }
              },
              {
                "$type": "method",
                "name": "beginLayout",
                "text": "In addition to work done by our base classes, containers benefit from some extra\ncached data. The following properties are added to the ownerContext:\n\n - visibleItems: the result of <a href='#!/api/Ext.layout.container.Table-method-getVisibleItems'>getVisibleItems</a>\n - childItems: the ContextItem[] for each visible item\n - targetContext: the ContextItem for the <a href='#!/api/Ext.layout.container.Table-method-getTarget'>getTarget</a> element\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "src": {
                      "name": "3,92,0"
                    }
                  }
                ],
                "src": {
                  "name": "3,92,0",
                  "text": "3,85,8,331"
                }
              },
              {
                "$type": "method",
                "name": "beginLayoutCycle",
                "text": "Called before any calculation cycles to reset DOM values and prepare for calculation.\n\nThis is a write phase and DOM reads should be strictly avoided when overridding\nthis method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "1,98,40",
                      "text": "1,98,53,40:1,99,8,11",
                      "type": "1,98,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,100,16",
                  "text": "1,93,8,181"
                }
              },
              {
                "$type": "method",
                "abstract": true,
                "name": "calculate",
                "text": "Called to perform the calculations for this layout. This method will be called at\nleast once and may be called repeatedly if the <a href='#!/api/Ext.layout.container.Table-property-done'>done</a> property is cleared\nbefore return to indicate that this layout is not yet done. The <a href='#!/api/Ext.layout.container.Table-property-done'>done</a> property\nis always set to `true` before entering this method.\n\nThis is a read phase and DOM writes should be strictly avoided in derived classes.\nInstead, DOM writes need to be written to <a href='#!/api/Ext.layout.ContextItem'>Ext.layout.ContextItem</a> objects to\n be flushed at the next opportunity.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "1,138,40",
                      "text": "1,138,53,40:1,139,8,11",
                      "type": "1,138,16"
                    }
                  }
                ],
                "src": {
                  "abstract": "1,141,8",
                  "name": "1,140,16",
                  "text": "1,129,8,509"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "calculateCells",
                "text": "Determine the row and cell indexes for each component, taking into consideration\nthe number of columns and each item's configured colspan/rowspan values.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "items",
                    "text": "The layout components\n",
                    "type": "Array",
                    "src": {
                      "name": "0,268,23",
                      "text": "0,268,29,22",
                      "type": "0,268,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "List of row and cell indexes for each of the components\n",
                    "type": "Object[]",
                    "src": {
                      "text": "0,269,27,56",
                      "type": "0,269,17"
                    }
                  }
                ],
                "src": {
                  "access": "0,265,8",
                  "name": "0,271,0",
                  "text": "0,266,8,154"
                }
              },
              {
                "$type": "method",
                "name": "completeLayout",
                "text": "This method (if implemented) is called at the end of the cycle in which this layout\ncompletes (by not setting <a href='#!/api/Ext.layout.container.Table-property-done'>done</a> to `false` in <a href='#!/api/Ext.layout.container.Table-method-calculate'>calculate</a>). It is\npossible for the layout to complete and yet become invalid before the end of the cycle,\nin which case, this method will not be called. It is also possible for this method to\nbe called and then later the layout becomes invalidated. This will result in\n<a href='#!/api/Ext.layout.container.Table-method-calculate'>calculate</a> being called again, followed by another call to this method.\n\nThis is a read phase and DOM writes should be strictly avoided in derived classes.\nInstead, DOM writes need to be written to <a href='#!/api/Ext.layout.ContextItem'>Ext.layout.ContextItem</a> objects to\nbe flushed at the next opportunity.\n\nThis method need not be implemented by derived classes and, in fact, should only be\nimplemented when needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "1,159,40",
                      "text": "1,159,53,40:1,160,8,11",
                      "type": "1,159,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,161,16",
                  "text": "1,145,8,811"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "configureItem",
                "text": "Adds layout's itemCls and owning Container's itemCls\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "3,156,0"
                    }
                  }
                ],
                "src": {
                  "access": "3,154,8",
                  "name": "3,156,0",
                  "text": "3,153,8,53"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "destroy",
                "text": "Destroys this layout. This method removes a `targetCls` from the `target`\nelement and calls `onDestroy`.\n\nA derived class can override either this method or `onDestroy` but in all\ncases must call the base class versions of these methods to allow the base class to\nperform its cleanup.\n\nThis method (or `onDestroy`) are overridden by subclasses most often to purge\nevent handlers or remove unmanged DOM nodes.\n",
                "src": {
                  "access": "1,590,8",
                  "name": "1,592,0",
                  "text": "1,580,8,410"
                }
              },
              {
                "$type": "method",
                "name": "finalizeLayout",
                "text": "This method (if implemented) is called after all layouts have completed. In most\nways this is similar to <a href='#!/api/Ext.layout.container.Table-method-completeLayout'>completeLayout</a>. This call can cause this (or any\nlayout) to be become invalid (see <a href='#!/api/Ext.layout.Context-method-invalidate'>Ext.layout.Context#invalidate</a>), but this\nis best avoided. This method is intended to be where final reads are made and so it\nis best to avoid invalidating layouts at this point whenever possible. Even so, this\nmethod can be used to perform final checks that may require all other layouts to be\ncomplete and then invalidate some results.\n\nThis is a read phase and DOM writes should be strictly avoided in derived classes.\nInstead, DOM writes need to be written to <a href='#!/api/Ext.layout.ContextItem'>Ext.layout.ContextItem</a> objects to\nbe flushed at the next opportunity.\n\nThis method need not be implemented by derived classes and, in fact, should only be\nimplemented when needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "1,180,40",
                      "text": "1,180,53,40:1,181,8,11",
                      "type": "1,180,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,182,16",
                  "text": "1,165,8,857"
                }
              },
              {
                "$type": "method",
                "name": "finishedLayout",
                "text": "This method is called after all layouts are complete and their calculations flushed\nto the DOM. No further layouts will be run and this method is only called once per\nlayout run. The base component layout caches `lastComponentSize`.\n\nThis is a write phase and DOM reads should be avoided if possible when overridding\nthis method.\n\nThis method need not be implemented by derived classes and, in fact, should only be\nimplemented when needed.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The context item for the layout's owner\ncomponent.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "1,196,40",
                      "text": "1,196,53,40:1,197,8,11",
                      "type": "1,196,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,199,0",
                  "text": "1,186,8,441"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getContainerSize",
                "text": "Returns the container size (that of the target). Only the fixed-sized dimensions can\nbe returned because the shrinkWrap dimensions are based on the contentWidth/Height\nas determined by the container layout.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "ownerContext",
                    "text": "The owner's context item.\n",
                    "type": "Ext.layout.ContextItem",
                    "src": {
                      "name": "3,251,40",
                      "text": "3,251,53,26",
                      "type": "3,251,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "inDom",
                    "optional": true,
                    "text": "True if the container size must be in the DOM.\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "3,252,26",
                      "text": "3,252,39,47",
                      "type": "3,252,16",
                      "value": "3,252,32"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The size\n",
                    "type": "Object",
                    "items": [
                      {
                        "$type": "property",
                        "name": "width",
                        "text": "The width\n",
                        "type": "Number",
                        "src": {
                          "name": "3,254,32",
                          "text": "3,254,38,10",
                          "type": "3,254,17"
                        }
                      },
                      {
                        "$type": "property",
                        "name": "height",
                        "text": "The height\n",
                        "type": "Number",
                        "src": {
                          "name": "3,255,32",
                          "text": "3,255,39,11",
                          "type": "3,255,17"
                        }
                      }
                    ],
                    "src": {
                      "text": "3,253,25,9",
                      "type": "3,253,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,256,8",
                  "name": "3,258,0",
                  "text": "3,247,8,208"
                }
              },
              {
                "$type": "method",
                "name": "getElementTarget",
                "text": "Returns the element into which extra functional DOM elements can be inserted. Defaults to the owner Component's encapsulating element.\n\nMay be overridden in Component layout managers which implement a <a href='#!/api/Ext.layout.container.Table-method-getRenderTarget'>getRenderTarget</a> which must only\ncontain child components.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "3,397,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,399,0",
                  "text": "3,393,8,292"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "getItemLayoutEl",
                "text": "For a given item, returns the element that participates in the childNodes array\nof the layout's target element.  This is usually the component's \"el\", but can\nalso be a wrapper\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.Component",
                    "src": {
                      "name": "1,430,31",
                      "type": "1,430,16"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "HTMLElement",
                    "src": {
                      "type": "1,431,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,429,8",
                  "name": "1,433,0",
                  "text": "1,426,8,177"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getItemSizePolicy",
                "text": "Returns an object describing how this layout manages the size of the given component.\nThis method must be implemented by any layout that manages components.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "type": "Ext.Component",
                    "src": {
                      "name": "1,245,31",
                      "type": "1,245,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object describing the sizing done by the layout\nfor this item.\n",
                    "type": "Ext.layout.SizePolicy",
                    "src": {
                      "text": "1,246,40,51:1,247,8,15",
                      "type": "1,246,17"
                    }
                  }
                ],
                "src": {
                  "access": "1,248,8",
                  "name": "1,250,0",
                  "text": "1,242,8,158"
                }
              },
              {
                "$type": "method",
                "name": "getLayoutItems",
                "text": "Returns an array of child components either for a render phase (Performed in the beforeLayout\nmethod of the layout's base class), or the layout phase (onLayout).\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "of child components\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "3,338,34,20",
                      "type": "3,338,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,340,0",
                  "text": "3,336,8,162"
                }
              },
              {
                "$type": "method",
                "name": "getRenderTarget",
                "text": "Returns the element into which rendering must take place. Defaults to the owner Container's\ntarget element.\n\nMay be overridden in layout managers which implement an inner element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "3,386,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,388,0",
                  "text": "3,381,8,181"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getRenderedItems",
                "text": "Returns all items that are rendered\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "All matching items\n",
                    "type": "Array",
                    "src": {
                      "text": "3,360,24,19",
                      "type": "3,360,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,358,8",
                  "name": "3,362,0",
                  "text": "3,359,8,36"
                }
              },
              {
                "$type": "method",
                "name": "getTarget",
                "text": "Returns the owner component's resize element.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Ext.dom.Element",
                    "src": {
                      "type": "3,476,17"
                    }
                  }
                ],
                "src": {
                  "name": "3,478,0",
                  "text": "3,475,8,46"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "getVisibleItems",
                "text": "Returns all items that are both rendered and visible\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "All matching items\n",
                    "type": "Array",
                    "src": {
                      "text": "3,485,24,19",
                      "type": "3,485,17"
                    }
                  }
                ],
                "src": {
                  "access": "3,483,8",
                  "name": "3,487,0",
                  "text": "3,484,8,53"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "initLayout",
                "text": "A one-time initialization method called just before rendering.\n",
                "src": {
                  "access": "1,506,8",
                  "name": "1,508,0",
                  "text": "1,505,8,63"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "isValidParent",
                "text": "Validates item is in the proper place in the dom.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "1,409,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "1,409,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "src": {
                      "name": "1,409,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,407,8",
                  "name": "1,409,0",
                  "text": "1,406,8,50"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "moveItem",
                "text": "Moves Component to the provided target instead.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "src": {
                      "name": "1,482,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "1,482,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "src": {
                      "name": "1,482,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,480,8",
                  "name": "1,482,0",
                  "text": "1,479,8,48"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "notifyOwner",
                "text": "Called for every layout in the layout context after all the layouts have been finally flushed\n",
                "src": {
                  "access": "3,233,8",
                  "name": "3,236,0",
                  "text": "3,234,8,94"
                }
              },
              {
                "$type": "method",
                "name": "onContentChange",
                "text": "This method is called when a child item changes in some way. By default this calls\n<a href='#!/api/Ext.Component-updateLayout'>Ext.Component#updateLayout</a> on this layout's owner.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "child",
                    "text": "The child item that has changed.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "1,496,31",
                      "text": "1,496,37,33",
                      "type": "1,496,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if this layout has handled the content change.\n",
                    "type": "Boolean",
                    "src": {
                      "text": "1,497,26,52",
                      "type": "1,497,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,499,0",
                  "text": "1,493,8,143"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "renderChildren",
                "text": "Iterates over all passed items, ensuring they are rendered in a cell in the proper\nlocation in the table structure.\n",
                "src": {
                  "access": "0,152,8",
                  "name": "0,156,0",
                  "text": "0,153,8,116"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "renderItem",
                "text": "Renders the given Component into the target Element.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "item",
                    "text": "The Component to render\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "1,463,31",
                      "text": "1,463,36,24",
                      "type": "1,463,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "text": "The target Element\n",
                    "type": "Ext.dom.Element",
                    "src": {
                      "name": "1,464,33",
                      "text": "1,464,40,19",
                      "type": "1,464,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "position",
                    "text": "The position within the target to render the item to\n",
                    "type": "Number",
                    "src": {
                      "name": "1,465,24",
                      "text": "1,465,33,53",
                      "type": "1,465,16"
                    }
                  }
                ],
                "src": {
                  "access": "1,466,8",
                  "name": "1,468,0",
                  "text": "1,462,8,53"
                }
              },
              {
                "$type": "method",
                "access": "protected",
                "name": "renderItems",
                "text": "Iterates over all passed items, ensuring they are rendered.  If the items are already rendered,\nalso determines if the items are in the proper place in the dom.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "items",
                    "src": {
                      "name": "1,382,0"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "target",
                    "src": {
                      "name": "1,382,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,380,8",
                  "name": "1,382,0",
                  "text": "1,378,8,161"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "setOwner",
                "text": "Sets the layout owner\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "owner",
                    "src": {
                      "name": "1,516,0"
                    }
                  }
                ],
                "src": {
                  "access": "1,513,8",
                  "name": "1,516,0",
                  "text": "1,514,8,22"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "activeItemCount",
                "text": "tracks the number of child items that do not use \"liquid\" CSS layout\n",
                "src": {
                  "access": "3,60,8",
                  "name": "3,63,0",
                  "text": "3,61,8,69"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "animatePolicy",
                "text": "An object which contains boolean properties specifying which properties are to be\nanimated upon flush of child Component ContextItems. For example, Accordion would\nhave:\n\n     {\n         y: true,\n         height: true\n     }\n",
                "src": {
                  "access": "3,55,8",
                  "name": "3,57,0",
                  "text": "3,46,8,226"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "beginCollapse",
                "text": "Called by an owning Panel before the Panel begins its collapse process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "src": {
                  "access": "3,32,8",
                  "name": "3,36,0",
                  "text": "3,33,8,151"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "beginExpand",
                "text": "Called by an owning Panel before the Panel begins its expand process.\nMost layouts will not need to override the default Ext.emptyFn implementation.\n",
                "src": {
                  "access": "3,39,8",
                  "name": "3,43,0",
                  "text": "3,40,8,149"
                }
              },
              {
                "$type": "property",
                "name": "done",
                "text": "Used only during a layout run, this value indicates that a\nlayout has finished its calculations. This flag is set to true prior to the call to\n<a href='#!/api/Ext.layout.container.Table-method-calculate'>calculate</a> and should be set to false if this layout has more work to do.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,75,28",
                  "text": "1,75,33,59:1,76,8,166",
                  "type": "1,75,19"
                }
              },
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "4,295,28",
                  "text": "4,296,8,128",
                  "type": "4,295,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "getScrollerEl",
                "text": "Returns the element that wraps the contents for the purposes of touch scrolling.\nOnly applicable when the layout adds the scroller element as part of its renderTpl\n(e.g. autocontainer and box)\n",
                "src": {
                  "access": "1,258,8",
                  "name": "1,260,0",
                  "text": "1,255,8,193"
                }
              },
              {
                "$type": "property",
                "name": "isLayout",
                "readonly": true,
                "text": "`true` in this class to identify an object as an instantiated Layout, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,22,28",
                  "readonly": "1,24,8",
                  "text": "1,23,8,91",
                  "type": "1,22,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "needsItemSize",
                "text": "`true` if this layout may need to incorporate the dimensions of individual child\nitems into its layout calculations.  Layouts that handle the size of their children\nas a group (autocontainer, form) can set this to false for an additional performance\noptimization.  When `false` the layout system will not recurse into the child\nitems if <a href='#!/api/Ext.layout.container.Container-property-activeItemCount'>Ext.layout.container.Container#activeItemCount</a> is `0`, which will be the case if all child items\nuse \"liquid\" CSS layout, e.g. form fields.  (See Ext.Component#liquidLayout)\n",
                "src": {
                  "access": "1,31,8",
                  "name": "1,39,0",
                  "text": "1,32,8,519"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "setsItemSize",
                "text": "`true` if this layout may set the size of its child items.  Layouts that do not\nset the size of their child items (autocontainer, form) can set this to false\nfor an additional performance optimization.  When `true` the layout system will\nnot create a context item for children that use liquid layout, because there is\nno need for a context item if item size is neither read nor set by the owning layout.\n",
                "src": {
                  "access": "1,42,8",
                  "name": "1,49,0",
                  "text": "1,43,8,404"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,58,0",
          "alternateClassNames": "0,60,0",
          "extends": "0,59,0",
          "name": "0,54,0",
          "text": "0,2,4,2587"
        }
      }
    ]
  },
  "version": 1
}