{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/mixin/Queryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "access": "private",
        "name": "Ext.mixin.Queryable",
        "text": "A mixin for providing query related methods for <a href='#!/api/Ext.ComponentQuery'>Ext.ComponentQuery</a> for classes that\nimplement getRefItems.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "query",
                "text": "Retrieves all descendant components which match the passed selector.\nExecutes an Ext.ComponentQuery.query using this container as its root.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "Selector complying to an Ext.ComponentQuery selector.\nIf no selector is specified all items will be returned.\n",
                    "type": "String",
                    "src": {
                      "name": "0,14,25",
                      "text": "0,14,35,54:0,15,8,56",
                      "type": "0,14,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Components which matched the selector\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "0,16,34,38",
                      "type": "0,16,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,18,0",
                  "text": "0,12,8,140"
                }
              },
              {
                "$type": "method",
                "name": "queryBy",
                "text": "Retrieves all descendant components which match the passed function.\nThe function should return false for components that are to be\nexcluded from the selection.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The matcher function. It will be called with a single argument,\nthe component being tested.\n",
                    "type": "Function",
                    "src": {
                      "name": "0,27,26",
                      "text": "0,27,29,64:0,28,8,28",
                      "type": "0,27,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The scope in which to run the function. If not specified,\nit will default to the active component.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,29,25",
                      "text": "0,29,32,58:0,30,8,41",
                      "type": "0,29,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Components matched by the passed function\n",
                    "type": "Ext.Component[]",
                    "src": {
                      "text": "0,31,34,42",
                      "type": "0,31,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,33,0",
                  "text": "0,24,8,161"
                }
              },
              {
                "$type": "method",
                "name": "queryById",
                "text": "Finds a component at any level under this container matching the id/itemId.\nThis is a shorthand for calling ct.down('#' + id);\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "id",
                    "text": "The id to find\n",
                    "type": "String",
                    "src": {
                      "name": "0,52,24",
                      "text": "0,52,27,15",
                      "type": "0,52,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching id, null if not found\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "0,53,32,35",
                      "type": "0,53,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,55,0",
                  "text": "0,50,8,127"
                }
              },
              {
                "$type": "method",
                "name": "child",
                "text": "Retrieves the first direct child of this container which matches the passed selector or component.\nThe passed in selector must comply with an Ext.ComponentQuery selector, or it can be an actual Ext.Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "An Ext.ComponentQuery selector. If no selector is\nspecified, the first child will be returned.\n",
                    "type": "String/Ext.Component",
                    "src": {
                      "name": "0,62,39",
                      "text": "0,62,49,50:0,63,8,45",
                      "type": "0,62,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching child Ext.Component (or <a href='#!/api/null'>null</a> if no match was found).\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "0,64,32,68",
                      "type": "0,64,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,66,0",
                  "text": "0,60,8,209"
                }
              },
              {
                "$type": "method",
                "name": "down",
                "text": "Retrieves the first descendant of this container which matches the passed selector.\nThe passed in selector must comply with an Ext.ComponentQuery selector, or it can be an actual Ext.Component.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "optional": true,
                    "text": "An Ext.ComponentQuery selector or Ext.Component. If no selector is\nspecified, the first child will be returned.\n",
                    "type": "String/Ext.Component",
                    "src": {
                      "name": "0,88,39",
                      "text": "0,88,49,67:0,89,8,45",
                      "type": "0,88,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The matching descendant Ext.Component (or <a href='#!/api/null'>null</a> if no match was found).\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "0,90,32,73",
                      "type": "0,90,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,92,0",
                  "text": "0,86,8,194"
                }
              },
              {
                "$type": "method",
                "name": "visitPreOrder",
                "text": "Traverses the tree rooted at this node in pre-order mode, calling the passed function on the nodes at each level.\nThat is the function is called upon each node **before** being called on its children).\n\nThis method is used at each level down the cascade. Currently <a href='#!/api/Ext.Component'>Ext.Component</a>s\nand <a href='#!/api/Ext.data.TreeModel'>Ext.data.TreeModel</a>s are queryable.\n\nIf you have tree-structured data, you can make your nodes queryable, and use ComponentQuery on them.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "A ComponentQuery selector used to filter candidate nodes before calling the function.\nAn empty string matches any node.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,110,24",
                      "text": "0,110,33,86:0,111,8,34",
                      "type": "0,110,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call. Return `false` to aborl the traverse.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "node",
                        "text": "The node being visited.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,113,27",
                          "text": "0,113,32,24",
                          "type": "0,113,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,112,26",
                      "text": "0,112,29,60",
                      "type": "0,112,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The context (`this` reference) in which the function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,114,25",
                      "text": "0,114,32,66",
                      "type": "0,114,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraArgs",
                    "optional": true,
                    "text": "A set of arguments to be appended to the function's argument list to pass down extra data known to the caller\n**after** the node being visited.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,115,24",
                      "text": "0,115,35,110:0,116,8,34",
                      "type": "0,115,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,118,0",
                  "text": "0,102,8,458"
                }
              },
              {
                "$type": "method",
                "name": "visitPostOrder",
                "text": "Traverses the tree rooted at this node in post-order mode, calling the passed function on the nodes at each level.\nThat is the function is called upon each node **after** being called on its children).\n\nThis method is used at each level down the cascade. Currently <a href='#!/api/Ext.Component'>Ext.Component</a>s\nand <a href='#!/api/Ext.data.TreeModel'>Ext.data.TreeModel</a>s are queryable.\n\nIf you have tree-structured data, you can make your nodes queryable, and use ComponentQuery on them.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "selector",
                    "text": "A ComponentQuery selector used to filter candidate nodes before calling the function.\nAn empty string matches any node.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,131,24",
                      "text": "0,131,33,86:0,132,8,34",
                      "type": "0,131,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "fn",
                    "text": "The function to call. Return `false` to aborl the traverse.\n",
                    "type": "Function",
                    "items": [
                      {
                        "$type": "property",
                        "name": "node",
                        "text": "The node being visited.\n",
                        "type": "Object",
                        "src": {
                          "name": "0,134,27",
                          "text": "0,134,32,24",
                          "type": "0,134,16"
                        }
                      }
                    ],
                    "src": {
                      "name": "0,133,26",
                      "text": "0,133,29,60",
                      "type": "0,133,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "scope",
                    "optional": true,
                    "text": "The context (`this` reference) in which the function is executed.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,135,25",
                      "text": "0,135,32,66",
                      "type": "0,135,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "extraArgs",
                    "optional": true,
                    "text": "A set of arguments to be appended to the function's argument list to pass down extra data known to the caller\n**after** the node being visited.\n",
                    "type": "Array",
                    "src": {
                      "name": "0,136,24",
                      "text": "0,136,35,110:0,137,8,34",
                      "type": "0,136,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,139,0",
                  "text": "0,123,8,458"
                }
              }
            ]
          }
        ],
        "src": {
          "access": "0,2,4",
          "name": "0,6,0",
          "text": "0,3,4,115"
        }
      }
    ]
  },
  "version": 1
}