{
  "$type": "doxi",
  "files": [
    "../../../packages/pivot/src/pivot/filter/Label.js",
    "../../../packages/pivot/src/pivot/filter/Base.js",
    "../../../ext/packages/core/src/mixin/Factoryable.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "pivotfilter.label",
        "alternateClassNames": "Mz.aggregate.filter.Label",
        "extends": "Ext.pivot.filter.Base",
        "name": "Ext.pivot.filter.Label",
        "text": "Label filter class. Use this filter type when you want to filter\nthe left/top axis results by their values.\n\nExample:\n\n     // This example will generate a grid column for the year 2012\n     // instead of columns for all unique years.\n     topAxis: [{\n         dataIndex:  'year',\n         header:     'Year',\n         filter: {\n             type:       'label',\n             operator:   '=',\n             value:      2012\n         }\n     }]\n\n     leftAxis: [{\n         dataIndex:  'country',\n         header:     'Country',\n         filter: {\n             type:       'label',\n             operator:   'in',\n             value:      ['USA', 'Canada', 'Australia']\n         }\n     }]\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "caseSensitive",
                "optional": true,
                "text": "\nDuring filtering should we use case sensitive comparison?\n",
                "type": "Boolean",
                "value": "true",
                "src": {
                  "name": "1,66,24",
                  "text": "1,67,8,60",
                  "type": "1,66,14",
                  "value": "1,66,38"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use <a href='#!/api/Ext.pivot.filter.Label-value'>value</a> instead as an array with 2 values.\n\nUsed in case of a 'between/not between' type of filter\n",
                "deprecatedVersion": "6.0",
                "name": "from",
                "type": "String",
                "src": {
                  "deprecatedMessage": "1,44,8",
                  "deprecatedVersion": "1,44,8",
                  "name": "1,43,22",
                  "type": "1,43,14"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use <a href='#!/api/Ext.pivot.filter.Label-type'>type</a> instead. The old type config was renamed to <a href='#!/api/Ext.pivot.filter.Label-operator'>operator</a>.\n",
                "deprecatedVersion": "6.0",
                "name": "mztype",
                "type": "String",
                "src": {
                  "deprecatedMessage": "1,19,8",
                  "deprecatedVersion": "1,19,8",
                  "name": "1,17,22",
                  "type": "1,17,14"
                }
              },
              {
                "$type": "property",
                "inheritdoc": true,
                "localDoc": " * `begins`\n * `not begins`\n * `ends`\n * `not ends`\n * `contains`\n * `not contains`\n * `in`\n * `not in`\n\nThe `in` and `not in` operators expect this filter's <a href='#!/api/Ext.pivot.filter.Label-value'>value</a> to be an array of values.\n",
                "name": "operator",
                "src": {
                  "inheritdoc": "0,41,8",
                  "localDoc": "0,43,8",
                  "name": "0,40,13"
                }
              },
              {
                "$type": "property",
                "deprecatedMessage": "Use <a href='#!/api/Ext.pivot.filter.Label-value'>value</a> instead as an array with 2 values.\n\nUsed in case of a 'between/not between' operator\n",
                "deprecatedVersion": "6.0",
                "name": "to",
                "type": "String",
                "src": {
                  "deprecatedMessage": "1,52,8",
                  "deprecatedVersion": "1,52,8",
                  "name": "1,51,22",
                  "type": "1,51,14"
                }
              },
              {
                "$type": "property",
                "name": "value",
                "text": "(required)\n\nValue to filter by. For 'between' and 'not between' operators this should be an array of values.\n",
                "type": "String/Array",
                "src": {
                  "name": "1,59,28",
                  "text": "1,59,34,11:1,60,8,98",
                  "type": "1,59,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "deprecatedVersion": "6.0",
                "name": "endsWith",
                "text": "Checks if a string ends with a substring\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "The original string\n",
                    "type": "String",
                    "src": {
                      "name": "0,159,24",
                      "text": "0,159,26,20",
                      "type": "0,159,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "text": "The substring to check\n",
                    "type": "String",
                    "src": {
                      "name": "0,160,24",
                      "text": "0,160,28,23",
                      "type": "0,160,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ignoreCase",
                    "optional": true,
                    "text": "True to ignore the case in the comparison\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,161,26",
                      "text": "0,161,44,42",
                      "type": "0,161,16",
                      "value": "0,161,37"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,156,8",
                  "name": "0,158,16",
                  "text": "0,154,8,42"
                }
              },
              {
                "$type": "method",
                "inheritdoc": true,
                "name": "isMatch",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "src": {
                      "name": "0,60,0"
                    }
                  }
                ],
                "src": {
                  "inheritdoc": "0,58,8",
                  "name": "0,60,0"
                }
              },
              {
                "$type": "method",
                "name": "serialize",
                "text": "Returns the serialized filter data as an object.\n",
                "items": [
                  {
                    "$type": "return",
                    "type": "Object",
                    "src": {
                      "type": "1,94,18"
                    }
                  }
                ],
                "src": {
                  "name": "1,96,0",
                  "text": "1,92,8,50"
                }
              },
              {
                "$type": "method",
                "deprecatedVersion": "6.0",
                "name": "startsWith",
                "text": "Checks if a string starts with a substring\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "The original string\n",
                    "type": "String",
                    "src": {
                      "name": "0,148,24",
                      "text": "0,148,26,20",
                      "type": "0,148,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "text": "The substring to check\n",
                    "type": "String",
                    "src": {
                      "name": "0,149,24",
                      "text": "0,149,30,23",
                      "type": "0,149,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ignoreCase",
                    "optional": true,
                    "text": "True to ignore the case in the comparison\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,150,26",
                      "text": "0,150,44,42",
                      "type": "0,150,16",
                      "value": "0,150,37"
                    }
                  }
                ],
                "src": {
                  "deprecatedVersion": "0,145,8",
                  "name": "0,147,16",
                  "text": "0,143,8,44"
                }
              },
              {
                "$type": "method",
                "access": "private",
                "name": "stringContains",
                "text": "Check if the specified string contains the substring\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "s",
                    "text": "The original string\n",
                    "type": "String",
                    "src": {
                      "name": "0,122,24",
                      "text": "0,122,26,20",
                      "type": "0,122,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "text": "The substring to check\n",
                    "type": "String",
                    "src": {
                      "name": "0,123,24",
                      "text": "0,123,30,23",
                      "type": "0,123,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "ignoreCase",
                    "optional": true,
                    "text": "True to ignore the case in the comparison\n",
                    "type": "Boolean",
                    "value": "false",
                    "src": {
                      "name": "0,124,26",
                      "text": "0,124,44,42",
                      "type": "0,124,16",
                      "value": "0,124,37"
                    }
                  }
                ],
                "src": {
                  "access": "0,126,8",
                  "name": "0,128,0",
                  "text": "0,120,8,54"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "factoryConfig",
                "optional": true,
                "text": "If this property is specified by the target class of this mixin its properties are\nused to configure the created <a href='#!/api/Ext.Factory'>Ext.Factory</a>.\n",
                "type": "Object",
                "src": {
                  "name": "2,295,28",
                  "text": "2,296,8,128",
                  "type": "2,295,19"
                }
              },
              {
                "$type": "property",
                "name": "getSerialArgs",
                "text": "Template method to be implemented by all subclasses that is used to\nget and return serialized filter data.\n\nDefaults to Ext.emptyFn.\n",
                "src": {
                  "name": "1,114,0",
                  "text": "1,108,8,134"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "parent",
                "readonly": true,
                "text": "Reference to the parent dimension object.\n",
                "type": "Ext.pivot.dimension.Item",
                "src": {
                  "access": "1,77,8",
                  "name": "1,74,45",
                  "readonly": "1,75,8",
                  "text": "1,74,52,42",
                  "type": "1,74,19"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,37,0",
          "alternateClassNames": "0,32,0",
          "extends": "0,35,0",
          "name": "0,30,0",
          "text": "0,2,4,685"
        }
      }
    ]
  },
  "version": 1
}