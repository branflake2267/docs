{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/plugin/Abstract.js",
    "../../../ext/classic/classic/overrides/plugin/Abstract.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alternateClassNames": "Ext.AbstractPlugin",
        "name": "Ext.plugin.Abstract",
        "text": "The AbstractPlugin class is the base class from which user-implemented plugins should inherit.\n\nThis class defines the essential API of plugins as used by Components by defining the following methods:\n\n  - <a href='#!/api/Ext.plugin.Abstract-method-init'>init</a> : The plugin initialization method which the owning Component calls at Component initialization time.\n\n    The Component passes itself as the sole parameter.\n\n    Subclasses should set up bidirectional links between the plugin and its client Component here.\n\n  - <a href='#!/api/Ext.plugin.Abstract-method-destroy'>destroy</a> : The plugin cleanup method which the owning Component calls at Component destruction time.\n\n    Use this method to break links between the plugin and the Component and to free any allocated resources.\n",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "pluginId",
                "text": "A name for the plugin that can be set at creation time to then retrieve the plugin\nthrough <a href='#!/api/Ext.Component-method-getPlugin'>Ext.Component#getPlugin</a> method.  For example:\n\n    var grid = Ext.create('Ext.grid.Panel', {\n        plugins: [{\n            ptype: 'cellediting',\n            clicksToEdit: 2,\n            pluginId: 'cellplugin'\n        }]\n    });\n\n    // later on:\n    var plugin = grid.getPlugin('cellplugin');\n",
                "type": "String",
                "src": {
                  "name": "0,61,22",
                  "text": "0,62,8,404",
                  "type": "0,61,14"
                }
              },
              {
                "$type": "property",
                "name": "stateEvents",
                "text": "The configured list of stateEvents used to (optionally) participate in Owner Component's state management.\n",
                "type": "String/Array",
                "src": {
                  "name": "1,13,28",
                  "text": "1,14,8,107",
                  "type": "1,13,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "constructor",
                "text": "Instantiates the plugin.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "Configuration object.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,27,25",
                      "text": "0,27,33,22",
                      "type": "0,27,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,29,0",
                  "text": "0,26,8,25"
                }
              },
              {
                "$type": "method",
                "name": "clonePlugin",
                "text": "Creates clone of the plugin.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "overrideCfg",
                    "optional": true,
                    "text": "Additional config for the derived plugin.\n",
                    "type": "Object",
                    "src": {
                      "name": "0,38,25",
                      "text": "0,38,38,42",
                      "type": "0,38,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,40,0",
                  "text": "0,37,8,29"
                }
              },
              {
                "$type": "method",
                "name": "setCmp",
                "text": "Sets the component to which this plugin is attached.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cmp",
                    "text": "Owner component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "0,46,31",
                      "text": "0,46,35,17",
                      "type": "0,46,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,48,0",
                  "text": "0,45,8,53"
                }
              },
              {
                "$type": "method",
                "name": "getCmp",
                "text": "Returns the component to which this plugin is attached.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Owner component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "0,54,32,17",
                      "type": "0,54,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,56,0",
                  "text": "0,53,8,56"
                }
              },
              {
                "$type": "method",
                "name": "init",
                "text": "The init method is invoked after initComponent method has been run for the client Component.\n\nThe supplied implementation is empty. Subclasses should perform plugin initialization, and set up bidirectional\nlinks between the plugin and its client Component in their own implementation of this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "client",
                    "text": "The client Component which owns this plugin.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "0,83,31",
                      "text": "0,83,38,45",
                      "type": "0,83,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,85,0",
                  "text": "0,79,8,300"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "The destroy method is invoked by the owning Component at the time the Component is\nbeing destroyed.\n",
                "src": {
                  "name": "0,91,16",
                  "text": "0,88,8,101"
                }
              },
              {
                "$type": "method",
                "name": "getState",
                "text": "The getState method is invoked by the client Component's State mixin when one or more of the the specified <a href='#!/api/Ext.plugin.Abstract-cfg-stateEvents'>stateEvents</a> are raised.\n\nThe supplied implementation is empty. If plugin Subclasses are to (optionally) participate in the client Component's\nstate management, implementers should provide a suitable method which returns a state object.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "state\n",
                    "type": "Object",
                    "src": {
                      "text": "1,24,25,6",
                      "type": "1,24,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,27,0",
                  "text": "1,20,8,352"
                }
              },
              {
                "$type": "method",
                "name": "applyState",
                "text": "The applyState method is invoked by the client Component's State mixin after initComponent method has been run for the client.\n\nThe supplied implementation is empty. If plugin Subclasses are to (optionally) participate in the client Component's\nstate management, implementers should provide a suitable method to utilize it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The current plugin state object to be applied.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,35,24",
                      "text": "1,35,30,47",
                      "type": "1,35,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "allState",
                    "text": "The current aggregate state of the Component and all plugins.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,36,24",
                      "text": "1,36,33,62",
                      "type": "1,36,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,39,0",
                  "text": "1,31,8,324"
                }
              },
              {
                "$type": "method",
                "name": "enable",
                "text": "The base implementation just sets the plugin's `disabled` flag to `false`\n\nPlugin subclasses which need more complex processing may implement an overriding implementation.\n",
                "src": {
                  "name": "1,47,0",
                  "text": "1,42,8,172"
                }
              },
              {
                "$type": "method",
                "name": "disable",
                "text": "The base implementation just sets the plugin's `disabled` flag to `true`\n\nPlugin subclasses which need more complex processing may implement an overriding implementation.\n",
                "src": {
                  "name": "1,57,0",
                  "text": "1,52,8,171"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "isPlugin",
                "text": "`true` in this class to identify an object as an instantiated Plugin, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,20,28",
                  "text": "0,21,8,91",
                  "type": "0,20,19"
                }
              }
            ]
          }
        ],
        "src": {
          "alternateClassNames": "0,17,0",
          "name": "0,16,0",
          "text": "0,2,4,688"
        }
      }
    ]
  },
  "version": 1
}