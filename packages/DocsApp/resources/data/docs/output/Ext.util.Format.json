{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/Format.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Ext.util.Format",
        "requires": "Ext.Error,Ext.Number,Ext.String,Ext.Date",
        "singleton": true,
        "text": "\nThis class is a centralized place for formatting functions. It includes\nfunctions to format various different types of data, such as text, dates and numeric values.\n\n## Localization\n\nThis class contains several options for localization. These can be set once the library has loaded,\nall calls to the functions from that point will use the locale settings that were specified.\n\nOptions include:\n\n- thousandSeparator\n- decimalSeparator\n- currenyPrecision\n- currencySign\n- currencyAtEnd\n\nThis class also uses the default date format defined here: <a href='#!/api/Ext.Date-property-defaultFormat'>Ext.Date#defaultFormat</a>.\n\n## Using with renderers\n\nThere are two helper functions that return a new function that can be used in conjunction with\ngrid renderers:\n\n    columns: [{\n        dataIndex: 'date',\n        renderer: Ext.util.Format.dateRenderer('Y-m-d')\n    }, {\n        dataIndex: 'time',\n        renderer: Ext.util.Format.numberRenderer('0.000')\n    }]\n\nFunctions that only take a single argument can also be passed directly:\n\n    columns: [{\n        dataIndex: 'cost',\n        renderer: Ext.util.Format.usMoney\n    }, {\n        dataIndex: 'productCode',\n        renderer: Ext.util.Format.uppercase\n    }]\n\n## Using with XTemplates\n\nXTemplates can also directly use Ext.util.Format functions:\n\n    new Ext.XTemplate([\n        'Date: {startDate:date(\"Y-m-d\")}',\n        'Cost: {cost:usMoney}'\n    ]);\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "undef",
                "text": "Checks a reference and converts it to empty string if it is undefined.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Reference to check\n",
                    "type": "Object",
                    "src": {
                      "name": "0,158,28",
                      "text": "0,158,34,19",
                      "type": "0,158,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "Empty string if converted, otherwise the original value\n",
                    "type": "Object",
                    "src": {
                      "text": "0,159,29,56",
                      "type": "0,159,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,161,0",
                  "text": "0,157,12,71"
                }
              },
              {
                "$type": "method",
                "name": "defaultValue",
                "text": "Checks a reference and converts it to the default value if it's empty.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "Reference to check\n",
                    "type": "Object",
                    "src": {
                      "name": "0,167,28",
                      "text": "0,167,34,19",
                      "type": "0,167,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "defaultValue",
                    "optional": true,
                    "text": "The value to insert of it's undefined.\n",
                    "type": "String",
                    "value": "\"\"",
                    "src": {
                      "name": "0,168,29",
                      "text": "0,168,46,39",
                      "type": "0,168,20",
                      "value": "0,168,42"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,169,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,171,0",
                  "text": "0,166,12,71"
                }
              },
              {
                "$type": "method",
                "name": "substr",
                "text": "Returns a substring from within an original string.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The original text\n",
                    "type": "String",
                    "src": {
                      "name": "0,177,28",
                      "text": "0,177,34,18",
                      "type": "0,177,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "start",
                    "text": "The start index of the substring\n",
                    "type": "Number",
                    "src": {
                      "name": "0,178,28",
                      "text": "0,178,34,33",
                      "type": "0,178,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "length",
                    "text": "The length of the substring\n",
                    "type": "Number",
                    "src": {
                      "name": "0,179,28",
                      "text": "0,179,35,28",
                      "type": "0,179,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The substring\n",
                    "type": "String",
                    "src": {
                      "text": "0,180,29,14",
                      "type": "0,180,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,183,0",
                  "text": "0,176,12,52"
                }
              },
              {
                "$type": "method",
                "name": "lowercase",
                "text": "Converts a string to all lower case letters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The text to convert\n",
                    "type": "String",
                    "src": {
                      "name": "0,196,28",
                      "text": "0,196,34,20",
                      "type": "0,196,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The converted text\n",
                    "type": "String",
                    "src": {
                      "text": "0,197,29,19",
                      "type": "0,197,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,199,0",
                  "text": "0,195,12,45"
                }
              },
              {
                "$type": "method",
                "name": "uppercase",
                "text": "Converts a string to all upper case letters.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The text to convert\n",
                    "type": "String",
                    "src": {
                      "name": "0,205,28",
                      "text": "0,205,34,20",
                      "type": "0,205,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The converted text\n",
                    "type": "String",
                    "src": {
                      "text": "0,206,29,19",
                      "type": "0,206,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,208,0",
                  "text": "0,204,12,45"
                }
              },
              {
                "$type": "method",
                "name": "usMoney",
                "text": "Format a number as US currency.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The numeric value to format\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,214,35",
                      "text": "0,214,41,28",
                      "type": "0,214,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The formatted currency string\n",
                    "type": "String",
                    "src": {
                      "text": "0,215,29,30",
                      "type": "0,215,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,217,0",
                  "text": "0,213,12,32"
                }
              },
              {
                "$type": "method",
                "name": "currency",
                "text": "Format a number as a currency.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The numeric value to format\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,223,35",
                      "text": "0,223,41,28",
                      "type": "0,223,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "sign",
                    "optional": true,
                    "text": "The currency sign to use (defaults to <a href='#!/api/Ext.util.Format-property-currencySign'>currencySign</a>)\n",
                    "type": "String",
                    "src": {
                      "name": "0,224,29",
                      "text": "0,224,35,61",
                      "type": "0,224,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "decimals",
                    "optional": true,
                    "text": "The number of decimals to use for the currency\n(defaults to <a href='#!/api/Ext.util.Format-property-currencyPrecision'>currencyPrecision</a>)\n",
                    "type": "Number",
                    "src": {
                      "name": "0,225,29",
                      "text": "0,225,39,47:0,226,12,41",
                      "type": "0,225,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "end",
                    "optional": true,
                    "text": "True if the currency sign should be at the end of the string\n(defaults to <a href='#!/api/Ext.util.Format-property-currencyAtEnd'>currencyAtEnd</a>)\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,227,30",
                      "text": "0,227,35,61:0,228,12,37",
                      "type": "0,227,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The formatted currency string\n",
                    "type": "String",
                    "src": {
                      "text": "0,229,29,30",
                      "type": "0,229,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,231,0",
                  "text": "0,222,12,31"
                }
              },
              {
                "$type": "method",
                "name": "date",
                "text": "Formats the passed date using the specified format pattern.\nNote that this uses the native Javascript Date.parse() method and is therefore subject to its idiosyncrasies.\nMost formats assume the local timezone unless specified. One notable exception is 'YYYY-MM-DD' (note the dashes)\nwhich is typically interpreted in UTC and can cause date shifting.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to format. Strings must conform to the format\nexpected by the JavaScript Date object's\n[parse() method](http://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/parse).\n",
                    "type": "String/Date",
                    "src": {
                      "name": "0,259,33",
                      "text": "0,259,39,56:0,260,12,147",
                      "type": "0,259,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "format",
                    "optional": true,
                    "text": "Any valid date format string. Defaults to <a href='#!/api/Ext.Date-property-defaultFormat'>Ext.Date#defaultFormat</a>.\n",
                    "type": "String",
                    "src": {
                      "name": "0,262,29",
                      "text": "0,262,37,74",
                      "type": "0,262,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The formatted date string.\n",
                    "type": "String",
                    "src": {
                      "text": "0,263,29,27",
                      "type": "0,263,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,265,0",
                  "text": "0,254,12,351"
                }
              },
              {
                "$type": "method",
                "name": "dateRenderer",
                "text": "Returns a date rendering function that can be reused to apply a date format multiple times efficiently.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "format",
                    "text": "Any valid date format string. Defaults to <a href='#!/api/Ext.Date-property-defaultFormat'>Ext.Date#defaultFormat</a>.\n",
                    "type": "String",
                    "src": {
                      "name": "0,277,28",
                      "text": "0,277,35,74",
                      "type": "0,277,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The date formatting function\n",
                    "type": "Function",
                    "src": {
                      "text": "0,278,31,29",
                      "type": "0,278,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,280,0",
                  "text": "0,276,12,104"
                }
              },
              {
                "$type": "method",
                "name": "hex",
                "text": "Returns the given number as a base 16 string at least `digits` in length. If\nthe number is fewer digits, 0's are prepended as necessary. If `digits` is\nnegative, the absolute value is the *exact* number of digits to return. In this\ncase, if then number has more digits, only the least significant digits are\nreturned.\n\n     expect(Ext.util.Format.hex(0x12e4, 2)).toBe('12e4');\n     expect(Ext.util.Format.hex(0x12e4, -2)).toBe('e4');\n     expect(Ext.util.Format.hex(0x0e, 2)).toBe('0e');\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The number to format in hex.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,297,28",
                      "text": "0,297,34,29",
                      "type": "0,297,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "digits",
                    "type": "Number",
                    "src": {
                      "name": "0,298,28",
                      "type": "0,298,20"
                    }
                  },
                  {
                    "$type": "return",
                    "type": "String",
                    "src": {
                      "type": "0,299,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,301,0",
                  "text": "0,287,12,489"
                }
              },
              {
                "$type": "method",
                "name": "or",
                "text": "Returns this result:\n\n     value || orValue\n\nThe usefulness of this formatter method is in templates. For example:\n\n     {foo:or(\"bar\")}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The \"if\" value.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,326,29",
                      "text": "0,326,35,16",
                      "type": "0,326,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "orValue",
                    "type": "Mixed",
                    "src": {
                      "name": "0,327,27",
                      "type": "0,327,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,329,0",
                  "text": "0,318,12,138"
                }
              },
              {
                "$type": "method",
                "name": "pick",
                "text": "If `value` is a number, returns the argument from that index. For example\n\n     var s = Ext.util.Format.pick(2, 'zero', 'one', 'two');\n     // s === 'two'\n\nOtherwise, `value` is treated in a truthy/falsey manner like so:\n\n     var s = Ext.util.Format.pick(null, 'first', 'second');\n     // s === 'first'\n\n     s = Ext.util.Format.pick({}, 'first', 'second');\n     // s === 'second'\n\nThe usefulness of this formatter method is in templates. For example:\n\n     {foo:pick(\"F\",\"T\")}\n\n     {bar:pick(\"first\",\"second\",\"third\")}\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The \"if\" value.\n",
                    "type": "Boolean",
                    "src": {
                      "name": "0,353,29",
                      "text": "0,353,35,16",
                      "type": "0,353,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "firstValue",
                    "type": "Mixed",
                    "src": {
                      "name": "0,354,27",
                      "type": "0,354,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "secondValue",
                    "type": "Mixed",
                    "src": {
                      "name": "0,355,27",
                      "type": "0,355,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,357,0",
                  "text": "0,334,12,523"
                }
              },
              {
                "$type": "method",
                "name": "stripTags",
                "text": "Strips all HTML tags.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The text from which to strip tags\n",
                    "type": "Object",
                    "src": {
                      "name": "0,369,28",
                      "text": "0,369,34,34",
                      "type": "0,369,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The stripped text\n",
                    "type": "String",
                    "src": {
                      "text": "0,370,29,18",
                      "type": "0,370,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,372,0",
                  "text": "0,368,12,22"
                }
              },
              {
                "$type": "method",
                "name": "stripScripts",
                "text": "Strips all script tags.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The text from which to strip script tags\n",
                    "type": "Object",
                    "src": {
                      "name": "0,378,28",
                      "text": "0,378,34,41",
                      "type": "0,378,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The stripped text\n",
                    "type": "String",
                    "src": {
                      "text": "0,379,29,18",
                      "type": "0,379,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,381,0",
                  "text": "0,377,12,24"
                }
              },
              {
                "$type": "method",
                "name": "fileSize",
                "text": "Simple format for a file size (xxx bytes, xxx KB, xxx MB).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "size",
                    "text": "The numeric value to format\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,388,35",
                      "text": "0,388,40,28",
                      "type": "0,388,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The formatted file size\n",
                    "type": "String",
                    "src": {
                      "text": "0,389,29,24",
                      "type": "0,389,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,391,0",
                  "text": "0,387,12,59"
                }
              },
              {
                "$type": "method",
                "name": "math",
                "text": "It does simple math for use in a template, for example:\n\n    var tpl = new Ext.Template('{value} * 10 = {value:math(\"* 10\")}');\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "A function that operates on the passed value.\n",
                    "type": "Function",
                    "src": {
                      "text": "0,420,31,46",
                      "type": "0,420,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,423,0",
                  "text": "0,416,12,129"
                }
              },
              {
                "$type": "method",
                "name": "round",
                "text": "Rounds the passed number to the required decimal precision.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The numeric value to round.\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,436,35",
                      "text": "0,436,41,28",
                      "type": "0,436,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "precision",
                    "optional": true,
                    "text": "The number of decimal places to which to round the\nfirst parameter's value. If <a href='#!/api/undefined'>undefined</a> the `value` is passed to `Math.round`\notherwise the value is returned unmodified.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,437,29",
                      "text": "0,437,40,51:0,438,12,122",
                      "type": "0,437,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The rounded value.\n",
                    "type": "Number",
                    "src": {
                      "text": "0,440,29,19",
                      "type": "0,440,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,442,0",
                  "text": "0,435,12,60"
                }
              },
              {
                "$type": "method",
                "name": "number",
                "text": "Formats the passed number according to the passed format string.\n\nThe number of digits after the decimal separator character specifies the number of\ndecimal places in the resulting string. The *local-specific* decimal character is\nused in the result.\n\nThe *presence* of a thousand separator character in the format string specifies that\nthe *locale-specific* thousand separator (if any) is inserted separating thousand groups.\n\nBy default, \",\" is expected as the thousand separator, and \".\" is expected as the decimal separator.\n\nLocale-specific characters are always used in the formatted output when inserting\nthousand and decimal separators. These can be set using the <a href='#!/api/Ext.util.Format-property-thousandSeparator'>thousandSeparator</a> and\n<a href='#!/api/Ext.util.Format-property-decimalSeparator'>decimalSeparator</a> options.\n\nThe format string must specify separator characters according to US/UK conventions (\",\" as the\nthousand separator, and \".\" as the decimal separator)\n\nTo allow specification of format strings according to local conventions for separator characters, add\nthe string `/i` to the end of the format string. This format depends on the <a href='#!/api/Ext.util.Format-property-thousandSeparator'>thousandSeparator</a> and\n<a href='#!/api/Ext.util.Format-property-decimalSeparator'>decimalSeparator</a> options. For example, if using European style separators, then the format string\ncan be specified as `'0.000,00'`. This would be equivalent to using `'0,000.00'` when using US style formatting.\n\nExamples (123456.789):\n\n- `0` - (123457) show only digits, no precision\n- `0.00` - (123456.79) show only digits, 2 precision\n- `0.0000` - (123456.7890) show only digits, 4 precision\n- `0,000` - (123,457) show comma and digits, no precision\n- `0,000.00` - (123,456.79) show comma and digits, 2 precision\n- `0,0.00` - (123,456.79) shortcut method, show comma and digits, 2 precision\n- `0.####` - (123,456.789) Allow maximum 4 decimal places, but do not right pad with zeroes\n- `0.00##` - (123456.789) Show at least 2 decimal places, maximum 4, but do not right pad with zeroes\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "v",
                    "text": "The number to format.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,488,28",
                      "text": "0,488,30,22",
                      "type": "0,488,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "formatString",
                    "text": "The way you would like to format this text.\n",
                    "type": "String",
                    "src": {
                      "name": "0,489,28",
                      "text": "0,489,41,44",
                      "type": "0,489,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The formatted number.\n",
                    "type": "String",
                    "src": {
                      "text": "0,490,29,22",
                      "type": "0,490,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,492,0",
                  "text": "0,454,12,1895"
                }
              },
              {
                "$type": "method",
                "name": "numberRenderer",
                "text": "Returns a number rendering function that can be reused to apply a number format multiple\ntimes efficiently.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "format",
                    "text": "Any valid number format string for <a href='#!/api/Ext.util.Format-method-number'>number</a>\n",
                    "type": "String",
                    "src": {
                      "name": "0,637,28",
                      "text": "0,637,35,51",
                      "type": "0,637,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The number formatting function\n",
                    "type": "Function",
                    "src": {
                      "text": "0,638,31,31",
                      "type": "0,638,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,640,0",
                  "text": "0,634,12,109"
                }
              },
              {
                "$type": "method",
                "name": "percent",
                "text": "Formats the passed number as a percentage according to the passed format string.\nThe number should be between 0 and 1 to represent 0% to 100%.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The percentage to format.\n",
                    "type": "Number",
                    "src": {
                      "name": "0,650,28",
                      "text": "0,650,34,26",
                      "type": "0,650,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "formatString",
                    "optional": true,
                    "text": "See <a href='#!/api/Ext.util.Format-method-number'>number</a> for details.\n",
                    "type": "String",
                    "value": "\"0\"",
                    "src": {
                      "name": "0,651,29",
                      "text": "0,651,47,33",
                      "type": "0,651,20",
                      "value": "0,651,42"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The formatted percentage.\n",
                    "type": "String",
                    "src": {
                      "text": "0,652,29,26",
                      "type": "0,652,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,654,0",
                  "text": "0,647,12,144"
                }
              },
              {
                "$type": "method",
                "name": "attributes",
                "text": "Formats an object of name value properties as HTML element attribute values suitable for using when creating textual markup.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "attributes",
                    "text": "An object containing the HTML attributes as properties eg: `{height:40, vAlign:'top'}`\n",
                    "type": "Object",
                    "src": {
                      "name": "0,660,28",
                      "text": "0,660,39,87",
                      "type": "0,660,20"
                    }
                  }
                ],
                "src": {
                  "name": "0,662,0",
                  "text": "0,659,12,125"
                }
              },
              {
                "$type": "method",
                "name": "plural",
                "text": "Selectively return the plural form of a word based on a numeric value.\n\nFor example, the following template would result in \"1 Comment\".  If the\nvalue of `count` was 0 or greater than 1, the result would be \"x Comments\".\n\n    var tpl = new Ext.XTemplate('{count:plural(\"Comment\")}');\n\n    tpl.apply({\n        count: 1\n    }); // returns \"1 Comment\"\n\nExamples using the static <a href='#!/api/Ext.util.Format-method-plural'>plural</a> method call:\n\n    Ext.util.Format.plural(2, 'Comment');\n    // returns \"2 Comments\"\n\n    Ext.util.Format.plural(4, 'person', 'people');\n    // returns \"4 people\"\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "value",
                    "text": "The value to compare against\n",
                    "type": "Number",
                    "src": {
                      "name": "0,699,28",
                      "text": "0,699,34,29",
                      "type": "0,699,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "singular",
                    "text": "The singular form of the word\n",
                    "type": "String",
                    "src": {
                      "name": "0,700,28",
                      "text": "0,700,37,30",
                      "type": "0,700,20"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "plural",
                    "optional": true,
                    "text": "The plural form of the word (defaults to the\nsingular form with an \"s\" appended)\n",
                    "type": "String",
                    "src": {
                      "name": "0,701,29",
                      "text": "0,701,37,45:0,702,12,36",
                      "type": "0,701,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "output The pluralized output of the passed singular form\n",
                    "type": "String",
                    "src": {
                      "text": "0,703,29,57",
                      "type": "0,703,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,705,0",
                  "text": "0,680,12,548"
                }
              },
              {
                "$type": "method",
                "name": "nl2br",
                "text": "Converts newline characters to the HTML tag `<br/>`\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "v",
                    "text": "The string value to format.\n",
                    "type": "String",
                    "src": {
                      "name": "0,712,28",
                      "text": "0,712,30,28",
                      "type": "0,712,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The string with embedded `<br/>` tags in place of newlines.\n",
                    "type": "String",
                    "src": {
                      "text": "0,713,29,60",
                      "type": "0,713,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,715,0",
                  "text": "0,710,12,53"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#capitalize",
                "name": "capitalize",
                "text": "Alias for <a href='#!/api/Ext.String-method-capitalize'>Ext.String#capitalize</a>.\n",
                "src": {
                  "inheritdoc": "0,722,12",
                  "name": "0,724,0",
                  "text": "0,720,12,41"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#uncapitalize",
                "name": "uncapitalize",
                "text": "Alias for <a href='#!/api/Ext.String-method-uncapitalize'>Ext.String#uncapitalize</a>.\n",
                "src": {
                  "inheritdoc": "0,729,12",
                  "name": "0,731,0",
                  "text": "0,727,12,43"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#ellipsis",
                "name": "ellipsis",
                "text": "Alias for <a href='#!/api/Ext.String-method-ellipsis'>Ext.String#ellipsis</a>.\n",
                "src": {
                  "inheritdoc": "0,736,12",
                  "name": "0,738,0",
                  "text": "0,734,12,39"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#escape",
                "name": "escape",
                "text": "Alias for <a href='#!/api/Ext.String-method-escape'>Ext.String#escape</a>.\n",
                "src": {
                  "inheritdoc": "0,743,12",
                  "name": "0,745,0",
                  "text": "0,741,12,37"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#escapeRegex",
                "name": "escapeRegex",
                "text": "Alias for <a href='#!/api/Ext.String-method-escapeRegex'>Ext.String#escapeRegex</a>.\n",
                "src": {
                  "inheritdoc": "0,750,12",
                  "name": "0,752,0",
                  "text": "0,748,12,42"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#htmlDecode",
                "name": "htmlDecode",
                "text": "Alias for <a href='#!/api/Ext.String-method-htmlDecode'>Ext.String#htmlDecode</a>.\n",
                "src": {
                  "inheritdoc": "0,757,12",
                  "name": "0,759,0",
                  "text": "0,755,12,41"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#htmlEncode",
                "name": "htmlEncode",
                "text": "Alias for <a href='#!/api/Ext.String-method-htmlEncode'>Ext.String#htmlEncode</a>.\n",
                "src": {
                  "inheritdoc": "0,764,12",
                  "name": "0,766,0",
                  "text": "0,762,12,41"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#leftPad",
                "name": "leftPad",
                "text": "Alias for <a href='#!/api/Ext.String-method-leftPad'>Ext.String#leftPad</a>.\n",
                "src": {
                  "inheritdoc": "0,771,12",
                  "name": "0,773,0",
                  "text": "0,769,12,38"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#toggle",
                "name": "toggle",
                "text": "Alias for <a href='#!/api/Ext.String-method-toggle'>Ext.String#toggle</a>.\n",
                "src": {
                  "inheritdoc": "0,778,12",
                  "name": "0,780,0",
                  "text": "0,776,12,37"
                }
              },
              {
                "$type": "method",
                "inheritdoc": "Ext.String#trim",
                "name": "trim",
                "text": "Alias for <a href='#!/api/Ext.String-method-trim'>Ext.String#trim</a>.\n",
                "src": {
                  "inheritdoc": "0,785,12",
                  "name": "0,787,0",
                  "text": "0,783,12,35"
                }
              },
              {
                "$type": "method",
                "name": "parseBox",
                "text": "Parses a number or string representing margin sizes into an object.\nSupports CSS-style margin declarations (e.g. 10, \"10\", \"10 10\", \"10 10 10\" and\n\"10 10 10 10\" are all valid options and would return the same result).\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "box",
                    "text": "The encoded margins\n",
                    "type": "Number/String",
                    "src": {
                      "name": "0,794,35",
                      "text": "0,794,39,20",
                      "type": "0,794,20"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "An object with margin sizes for top, right, bottom and left\n",
                    "type": "Object",
                    "src": {
                      "text": "0,795,29,60",
                      "type": "0,795,21"
                    }
                  }
                ],
                "src": {
                  "name": "0,797,0",
                  "text": "0,790,12,219"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "defaultDateFormat",
                "text": "The global default date format.\n",
                "src": {
                  "name": "0,72,0",
                  "text": "0,70,12,32"
                }
              },
              {
                "$type": "property",
                "name": "thousandSeparator",
                "text": "The character that the <a href='#!/api/Ext.util.Format-method-number'>number</a> function uses as a thousand separator.\n\nThis may be overridden in a locale file.\n",
                "type": "String",
                "src": {
                  "name": "0,76,31",
                  "text": "0,77,12,120",
                  "type": "0,76,23"
                }
              },
              {
                "$type": "property",
                "name": "decimalSeparator",
                "text": "The character that the <a href='#!/api/Ext.util.Format-method-number'>number</a> function uses as a decimal point.\n\nThis may be overridden in a locale file.\n",
                "type": "String",
                "src": {
                  "name": "0,86,31",
                  "text": "0,87,12,115",
                  "type": "0,86,23"
                }
              },
              {
                "$type": "property",
                "name": "currencyPrecision",
                "text": "The number of decimal places that the <a href='#!/api/Ext.util.Format-method-currency'>currency</a> function displays.\n\nThis may be overridden in a locale file.\n",
                "type": "Number",
                "src": {
                  "name": "0,96,31",
                  "text": "0,97,12,117",
                  "type": "0,96,23"
                }
              },
              {
                "$type": "property",
                "name": "currencySign",
                "text": "The currency sign that the <a href='#!/api/Ext.util.Format-method-currency'>currency</a> function displays.\n\nThis may be overridden in a locale file.\n",
                "type": "String",
                "src": {
                  "name": "0,106,31",
                  "text": "0,107,12,106",
                  "type": "0,106,23"
                }
              },
              {
                "$type": "property",
                "name": "percentSign",
                "text": "The percent sign that the <a href='#!/api/Ext.util.Format-method-percent'>percent</a> function displays.\n\nThis may be overridden in a locale file.\n",
                "type": "String",
                "src": {
                  "name": "0,115,31",
                  "text": "0,116,12,104",
                  "type": "0,115,23"
                }
              },
              {
                "$type": "property",
                "name": "currencyAtEnd",
                "text": "This may be set to <code>true</code> to make the <a href='#!/api/Ext.util.Format-method-currency'>currency</a> function\nappend the currency sign to the formatted value.\n\nThis may be overridden in a locale file.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,124,32",
                  "text": "0,125,12,167",
                  "type": "0,124,23"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,2,11",
          "requires": "0,61,0,0:0,62,0,0:0,63,0,0:0,64,0,0",
          "singleton": "0,54,4",
          "text": "0,3,4,1363"
        }
      }
    ]
  },
  "version": 1
}