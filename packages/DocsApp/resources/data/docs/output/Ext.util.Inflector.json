{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/core/src/util/Inflector.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "name": "Ext.util.Inflector",
        "singleton": true,
        "text": "General purpose inflector class that <a href='#!/api/Ext.util.Inflector-method-pluralize'>pluralize</a>, <a href='#!/api/Ext.util.Inflector-method-singularize'>singularize</a> and\n<a href='#!/api/Ext.util.Inflector-method-ordinalize'>ordinalize</a> words. Sample usage:\n\n    //turning singular words into plurals\n    Ext.util.Inflector.pluralize('word'); //'words'\n    Ext.util.Inflector.pluralize('person'); //'people'\n    Ext.util.Inflector.pluralize('sheep'); //'sheep'\n\n    //turning plurals into singulars\n    Ext.util.Inflector.singularize('words'); //'word'\n    Ext.util.Inflector.singularize('people'); //'person'\n    Ext.util.Inflector.singularize('sheep'); //'sheep'\n\n    //ordinalizing numbers\n    Ext.util.Inflector.ordinalize(11); //\"11th\"\n    Ext.util.Inflector.ordinalize(21); //\"21st\"\n    Ext.util.Inflector.ordinalize(1043); //\"1043rd\"\n\n# Customization\n\nThe Inflector comes with a default set of US English pluralization rules. These can be augmented with additional\nrules if the default rules do not meet your application's requirements, or swapped out entirely for other languages.\nHere is how we might add a rule that pluralizes \"ox\" to \"oxen\":\n\n    Ext.util.Inflector.plural(/^(ox)$/i, \"$1en\");\n\nEach rule consists of two items - a regular expression that matches one or more rules, and a replacement string. In\nthis case, the regular expression will only match the string \"ox\", and will replace that match with \"oxen\". Here's\nhow we could add the inverse rule:\n\n    Ext.util.Inflector.singular(/^(ox)en$/i, \"$1\");\n\nNote that the ox/oxen rules are present by default.\n",
        "items": [
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "singular",
                "text": "Adds a new singularization rule to the Inflector. See the intro docs for more information\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matcher",
                    "text": "The matcher regex\n",
                    "type": "RegExp",
                    "src": {
                      "name": "0,133,24",
                      "text": "0,133,32,18",
                      "type": "0,133,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "replacer",
                    "text": "The replacement string, which can reference matches from the matcher argument\n",
                    "type": "String",
                    "src": {
                      "name": "0,134,24",
                      "text": "0,134,33,78",
                      "type": "0,134,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,136,0",
                  "text": "0,132,8,90"
                }
              },
              {
                "$type": "method",
                "name": "plural",
                "text": "Adds a new pluralization rule to the Inflector. See the intro docs for more information\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "matcher",
                    "text": "The matcher regex\n",
                    "type": "RegExp",
                    "src": {
                      "name": "0,142,24",
                      "text": "0,142,32,18",
                      "type": "0,142,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "replacer",
                    "text": "The replacement string, which can reference matches from the matcher argument\n",
                    "type": "String",
                    "src": {
                      "name": "0,143,24",
                      "text": "0,143,33,78",
                      "type": "0,143,16"
                    }
                  }
                ],
                "src": {
                  "name": "0,145,0",
                  "text": "0,141,8,88"
                }
              },
              {
                "$type": "method",
                "name": "clearSingulars",
                "text": "Removes all registered singularization rules\n",
                "src": {
                  "name": "0,152,0",
                  "text": "0,150,8,45"
                }
              },
              {
                "$type": "method",
                "name": "clearPlurals",
                "text": "Removes all registered pluralization rules\n",
                "src": {
                  "name": "0,159,0",
                  "text": "0,157,8,43"
                }
              },
              {
                "$type": "method",
                "name": "isTransnumeral",
                "text": "Returns true if the given word is transnumeral (the word is its own singular and plural form - e.g. sheep, fish)\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "word",
                    "text": "The word to test\n",
                    "type": "String",
                    "src": {
                      "name": "0,165,24",
                      "text": "0,165,29,17",
                      "type": "0,165,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "True if the word is transnumeral\n",
                    "type": "Boolean",
                    "src": {
                      "text": "0,166,26,33",
                      "type": "0,166,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,168,0",
                  "text": "0,164,8,113"
                }
              },
              {
                "$type": "method",
                "name": "pluralize",
                "text": "Returns the pluralized form of a word (e.g. Ext.util.Inflector.pluralize('word') returns 'words')\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "word",
                    "text": "The word to pluralize\n",
                    "type": "String",
                    "src": {
                      "name": "0,174,24",
                      "text": "0,174,29,22",
                      "type": "0,174,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The pluralized form of the word\n",
                    "type": "String",
                    "src": {
                      "text": "0,175,25,32",
                      "type": "0,175,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,177,0",
                  "text": "0,173,8,98"
                }
              },
              {
                "$type": "method",
                "name": "singularize",
                "text": "Returns the singularized form of a word (e.g. Ext.util.Inflector.singularize('words') returns 'word')\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "word",
                    "text": "The word to singularize\n",
                    "type": "String",
                    "src": {
                      "name": "0,200,24",
                      "text": "0,200,29,24",
                      "type": "0,200,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The singularized form of the word\n",
                    "type": "String",
                    "src": {
                      "text": "0,201,25,34",
                      "type": "0,201,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,203,0",
                  "text": "0,199,8,102"
                }
              },
              {
                "$type": "method",
                "name": "classify",
                "text": "Returns the correct <a href='#!/api/Ext.data.Model'>Ext.data.Model</a> name for a given string. Mostly used internally by the data\npackage\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "word",
                    "text": "The word to classify\n",
                    "type": "String",
                    "src": {
                      "name": "0,227,24",
                      "text": "0,227,29,21",
                      "type": "0,227,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The classified version of the word\n",
                    "type": "String",
                    "src": {
                      "text": "0,228,25,35",
                      "type": "0,228,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,230,0",
                  "text": "0,225,8,117"
                }
              },
              {
                "$type": "method",
                "name": "ordinalize",
                "text": "Ordinalizes a given number by adding a prefix such as 'st', 'nd', 'rd' or 'th' based on the last digit of the\nnumber. 21 -> 21st, 22 -> 22nd, 23 -> 23rd, 24 -> 24th etc\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "number",
                    "text": "The number to ordinalize\n",
                    "type": "Number",
                    "src": {
                      "name": "0,237,24",
                      "text": "0,237,31,25",
                      "type": "0,237,16"
                    }
                  },
                  {
                    "$type": "return",
                    "text": "The ordinalized number\n",
                    "type": "String",
                    "src": {
                      "text": "0,238,25,23",
                      "type": "0,238,17"
                    }
                  }
                ],
                "src": {
                  "name": "0,240,0",
                  "text": "0,235,8,169"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "access": "private",
                "name": "plurals",
                "text": "The registered plural tuples. Each item in the array should contain two items - the first must be a regular\nexpression that matchers the singular form of a word, the second must be a String that replaces the matched\npart of the regular expression. This is managed by the <a href='#!/api/Ext.util.Inflector-method-plural'>plural</a> method.\n",
                "type": "Array",
                "src": {
                  "access": "0,45,8",
                  "name": "0,49,26",
                  "text": "0,46,8,295",
                  "type": "0,49,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "singulars",
                "text": "The set of registered singular matchers. Each item in the array should contain two items - the first must be a\nregular expression that matches the plural form of a word, the second must be a String that replaces the\nmatched part of the regular expression. This is managed by the <a href='#!/api/Ext.util.Inflector-method-singular'>singular</a> method.\n",
                "type": "Array",
                "src": {
                  "access": "0,75,8",
                  "name": "0,79,26",
                  "text": "0,76,8,305",
                  "type": "0,79,19"
                }
              },
              {
                "$type": "property",
                "access": "private",
                "name": "uncountable",
                "text": "The registered uncountable words\n",
                "type": "String[]",
                "src": {
                  "access": "0,111,8",
                  "name": "0,113,29",
                  "text": "0,112,8,33",
                  "type": "0,113,19"
                }
              }
            ]
          }
        ],
        "src": {
          "name": "0,36,0",
          "singleton": "0,40,0",
          "text": "0,2,4,1478"
        }
      }
    ]
  },
  "version": 1
}