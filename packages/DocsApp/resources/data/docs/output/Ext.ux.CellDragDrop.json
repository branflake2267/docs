{
  "$type": "doxi",
  "files": [
    "../../../ext/packages/ux/classic/src/CellDragDrop.js",
    "../../../ext/packages/core/src/plugin/Abstract.js",
    "../../../ext/classic/classic/overrides/plugin/Abstract.js"
  ],
  "global": {
    "$type": "namespace",
    "items": [
      {
        "$type": "class",
        "alias": "plugin.celldragdrop",
        "extends": "Ext.plugin.Abstract",
        "name": "Ext.ux.CellDragDrop",
        "text": "This plugin can enable a cell to cell drag and drop operation within the same grid view.\n\nNote that the plugin must be added to the grid view, not to the grid panel. For example, using <a href='#!/api/Ext.panel.Table'>Ext.panel.Table</a>:\n\n     viewConfig: {\n         plugins: {\n             ptype: 'celldragdrop',\n\n             // Remove text from source cell and replace with value of emptyText.\n             applyEmptyText: true,\n\n             //emptyText: Ext.String.htmlEncode('<<foo>>'),\n\n             // Will only allow drops of the same type.\n             enforceType: true\n         }\n     }\n",
        "uses": "Ext.view.DragZone",
        "items": [
          {
            "$type": "configs",
            "items": [
              {
                "$type": "property",
                "name": "applyEmptyText",
                "text": "If `true`, then use the value of <a href='#!/api/Ext.ux.CellDragDrop-cfg-emptyText'>emptyText</a> to replace the drag record's value after a node drop.\nNote that, if dropped on a cell of a different type, it will convert the default text according to its own conversion rules.\n\nDefaults to `false`.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,35,23",
                  "text": "0,36,8,253",
                  "type": "0,35,14"
                }
              },
              {
                "$type": "property",
                "name": "containerScroll",
                "text": "True to register this container with the Scrollmanager for auto scrolling during drag operations.\nA <a href='#!/api/Ext.dd.ScrollManager'>Ext.dd.ScrollManager</a> configuration may also be passed.\n",
                "type": "Object/Boolean",
                "src": {
                  "name": "0,100,30",
                  "text": "0,101,8,163",
                  "type": "0,100,14"
                }
              },
              {
                "$type": "property",
                "name": "ddGroup",
                "text": "A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and\nDropZone used by this plugin will only interact with other drag drop objects in the same group.\n",
                "type": "String",
                "src": {
                  "name": "0,81,22",
                  "text": "0,82,8,203",
                  "type": "0,81,14"
                }
              },
              {
                "$type": "property",
                "name": "dragText",
                "text": "The text to show while dragging.\n\nTwo placeholders can be used in the text:\n\n- `{0}` The number of selected items.\n- `{1}` 's' when more than 1 items (only useful for English).\n",
                "type": "String",
                "src": {
                  "name": "0,69,22",
                  "text": "0,70,8,177",
                  "type": "0,69,14"
                }
              },
              {
                "$type": "property",
                "name": "dropBackgroundColor",
                "text": "The default background color for when a drop is allowed.\n\nDefaults to green.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,52,23",
                  "text": "0,53,8,77",
                  "type": "0,52,14"
                }
              },
              {
                "$type": "property",
                "name": "emptyText",
                "text": "If <a href='#!/api/Ext.ux.CellDragDrop-cfg-applyEmptyText'>applyEmptyText</a> is `true`, then this value as the drag record's value after a node drop.\n\nDefaults to an empty string.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,44,23",
                  "text": "0,45,8,130",
                  "type": "0,44,14"
                }
              },
              {
                "$type": "property",
                "name": "enableDrag",
                "text": "Set to `false` to disallow dragging items from the View.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,94,23",
                  "text": "0,95,8,57",
                  "type": "0,94,14"
                }
              },
              {
                "$type": "property",
                "name": "enableDrop",
                "text": "Set to `false` to disallow the View from accepting drop gestures.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,88,23",
                  "text": "0,89,8,66",
                  "type": "0,88,14"
                }
              },
              {
                "$type": "property",
                "name": "enforceType",
                "text": "Set to `true` to only allow drops of the same type.\n\nDefaults to `false`.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,27,23",
                  "text": "0,28,8,74",
                  "type": "0,27,14"
                }
              },
              {
                "$type": "property",
                "name": "noDropBackgroundColor",
                "text": "The default background color for when a drop is not allowed.\n\nDefaults to red.\n",
                "type": "Boolean",
                "src": {
                  "name": "0,60,23",
                  "text": "0,61,8,79",
                  "type": "0,60,14"
                }
              },
              {
                "$type": "property",
                "name": "pluginId",
                "text": "A name for the plugin that can be set at creation time to then retrieve the plugin\nthrough <a href='#!/api/Ext.Component-method-getPlugin'>Ext.Component#getPlugin</a> method.  For example:\n\n    var grid = Ext.create('Ext.grid.Panel', {\n        plugins: [{\n            ptype: 'cellediting',\n            clicksToEdit: 2,\n            pluginId: 'cellplugin'\n        }]\n    });\n\n    // later on:\n    var plugin = grid.getPlugin('cellplugin');\n",
                "type": "String",
                "src": {
                  "name": "1,61,22",
                  "text": "1,62,8,404",
                  "type": "1,61,14"
                }
              },
              {
                "$type": "property",
                "name": "stateEvents",
                "text": "The configured list of stateEvents used to (optionally) participate in Owner Component's state management.\n",
                "type": "String/Array",
                "src": {
                  "name": "2,13,28",
                  "text": "2,14,8,107",
                  "type": "2,13,14"
                }
              }
            ]
          },
          {
            "$type": "methods",
            "items": [
              {
                "$type": "method",
                "name": "applyState",
                "text": "The applyState method is invoked by the client Component's State mixin after initComponent method has been run for the client.\n\nThe supplied implementation is empty. If plugin Subclasses are to (optionally) participate in the client Component's\nstate management, implementers should provide a suitable method to utilize it.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "state",
                    "text": "The current plugin state object to be applied.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,35,24",
                      "text": "2,35,30,47",
                      "type": "2,35,16"
                    }
                  },
                  {
                    "$type": "param",
                    "name": "allState",
                    "text": "The current aggregate state of the Component and all plugins.\n",
                    "type": "Object",
                    "src": {
                      "name": "2,36,24",
                      "text": "2,36,33,62",
                      "type": "2,36,16"
                    }
                  }
                ],
                "src": {
                  "name": "2,39,0",
                  "text": "2,31,8,324"
                }
              },
              {
                "$type": "method",
                "name": "clonePlugin",
                "text": "Creates clone of the plugin.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "overrideCfg",
                    "optional": true,
                    "text": "Additional config for the derived plugin.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,38,25",
                      "text": "1,38,38,42",
                      "type": "1,38,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,40,0",
                  "text": "1,37,8,29"
                }
              },
              {
                "$type": "method",
                "name": "constructor",
                "text": "Instantiates the plugin.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "config",
                    "optional": true,
                    "text": "Configuration object.\n",
                    "type": "Object",
                    "src": {
                      "name": "1,27,25",
                      "text": "1,27,33,22",
                      "type": "1,27,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,29,0",
                  "text": "1,26,8,25"
                }
              },
              {
                "$type": "method",
                "name": "destroy",
                "text": "The destroy method is invoked by the owning Component at the time the Component is\nbeing destroyed.\n",
                "src": {
                  "name": "1,91,16",
                  "text": "1,88,8,101"
                }
              },
              {
                "$type": "method",
                "name": "disable",
                "text": "The base implementation just sets the plugin's `disabled` flag to `true`\n\nPlugin subclasses which need more complex processing may implement an overriding implementation.\n",
                "src": {
                  "name": "2,57,0",
                  "text": "2,52,8,171"
                }
              },
              {
                "$type": "method",
                "name": "enable",
                "text": "The base implementation just sets the plugin's `disabled` flag to `false`\n\nPlugin subclasses which need more complex processing may implement an overriding implementation.\n",
                "src": {
                  "name": "2,47,0",
                  "text": "2,42,8,172"
                }
              },
              {
                "$type": "method",
                "name": "getCmp",
                "text": "Returns the component to which this plugin is attached.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "Owner component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "text": "1,54,32,17",
                      "type": "1,54,17"
                    }
                  }
                ],
                "src": {
                  "name": "1,56,0",
                  "text": "1,53,8,56"
                }
              },
              {
                "$type": "method",
                "name": "getState",
                "text": "The getState method is invoked by the client Component's State mixin when one or more of the the specified <a href='#!/api/Ext.ux.CellDragDrop-cfg-stateEvents'>stateEvents</a> are raised.\n\nThe supplied implementation is empty. If plugin Subclasses are to (optionally) participate in the client Component's\nstate management, implementers should provide a suitable method which returns a state object.\n",
                "items": [
                  {
                    "$type": "return",
                    "text": "state\n",
                    "type": "Object",
                    "src": {
                      "text": "2,24,25,6",
                      "type": "2,24,17"
                    }
                  }
                ],
                "src": {
                  "name": "2,27,0",
                  "text": "2,20,8,352"
                }
              },
              {
                "$type": "method",
                "name": "init",
                "text": "The init method is invoked after initComponent method has been run for the client Component.\n\nThe supplied implementation is empty. Subclasses should perform plugin initialization, and set up bidirectional\nlinks between the plugin and its client Component in their own implementation of this method.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "client",
                    "text": "The client Component which owns this plugin.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "1,83,31",
                      "text": "1,83,38,45",
                      "type": "1,83,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,85,0",
                  "text": "1,79,8,300"
                }
              },
              {
                "$type": "method",
                "name": "setCmp",
                "text": "Sets the component to which this plugin is attached.\n",
                "items": [
                  {
                    "$type": "param",
                    "name": "cmp",
                    "text": "Owner component.\n",
                    "type": "Ext.Component",
                    "src": {
                      "name": "1,46,31",
                      "text": "1,46,35,17",
                      "type": "1,46,16"
                    }
                  }
                ],
                "src": {
                  "name": "1,48,0",
                  "text": "1,45,8,53"
                }
              }
            ]
          },
          {
            "$type": "properties",
            "items": [
              {
                "$type": "property",
                "name": "isPlugin",
                "text": "`true` in this class to identify an object as an instantiated Plugin, or subclass thereof.\n",
                "type": "Boolean",
                "src": {
                  "name": "1,20,28",
                  "text": "1,21,8,91",
                  "type": "1,20,19"
                }
              }
            ]
          }
        ],
        "src": {
          "alias": "0,22,0",
          "extends": "0,21,0",
          "name": "0,20,0",
          "text": "0,2,4,582",
          "uses": "0,24,0"
        }
      }
    ]
  },
  "version": 1
}